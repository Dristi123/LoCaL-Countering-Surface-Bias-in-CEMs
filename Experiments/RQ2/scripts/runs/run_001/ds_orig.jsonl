{"golden_code": "N=int(eval(input()))\n\na=list(map(int,input().split()))\n\nfor i in range(N):\n\n  for j in range(1,31):\n\n    if a[i]%(2**j)!=0:\n\n      a[i]=j-1\n\n      break\n\nprint((sum(a)))", "generated_code": "import sys\n\ninput = sys.stdin.buffer.readline\n\n\n\nN = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n\n\ndef f(n):\n\n  res = 0\n\n  while n % 2 == 0:\n\n    n //= 2\n\n    res += 1\n\n  return res\n\n\n\nanswer = 0\n\nfor a in A:\n\n  answer += f(a)\n\n\n\nprint(answer)", "score": 1.0}
{"golden_code": "import numpy as np\n\nS=eval(input())\n\nN=len(S)\n\nmod=[0 for i in range(2019)]\n\nmod2=0\n\nten=1\n\nfor i in range(N-1,-1,-1): \n\n  s=int(S[i])*ten\n\n  mod2+=np.mod(s,2019)\n\n  mod2=np.mod(mod2,2019)\n\n  mod[mod2]+=1\n\n  ten=(ten*10)%2019\n\nans=0\n\nfor i in range(2019):\n\n  k=mod[i]\n\n  if i==0:\n\n    if k>=2:\n\n      ans+=k*(k-1)//2+k\n\n    else:\n\n      ans+=k\n\n  else:\n\n    if k>=2:\n\n      ans+=k*(k-1)//2\n\nprint(ans) ", "generated_code": "S=eval(input())\n\nN=len(S)\n\nmod=[0 for i in range(2019)]\n\ns=0\n\nten=1\n\nfor i in range(N-1,-1,-1): \n\n  s+=int(S[i])*ten\n\n  mod2=s%2019\n\n  mod[mod2]+=1\n\n  ten=(ten*10)%2019\n\nans=0\n\nfor i in range(2019):\n\n  k=mod[i]\n\n  if i==0:\n\n    if k>=2:\n\n      ans+=k*(k-1)//2+k\n\n    else:\n\n      ans+=k\n\n  else:\n\n    if k>=2:\n\n      ans+=k*(k-1)//2\n\nprint(ans) ", "score": 1.0}
{"golden_code": "from math import log2\n\nn = int(eval(input()))\n\na = list(map(int, input().split()))\n\nans = 0\n\n\n\nfor _a in a:\n\n    if _a%2 == 0:\n\n        cnt =0\n\n        while _a%2 == 0:\n\n            _a //= 2\n\n            cnt += 1\n\n        ans += cnt\n\n\n\nprint((int(ans)))", "generated_code": "def f(k):\n\n    cnt = 0\n\n    while k%2 == 0:\n\n        k //= 2\n\n        cnt += 1\n\n        # print(k)\n\n        # print(\"-----\")\n\n    return cnt\n\n\n\nn = int(eval(input()))\n\nA = list(map(int, input().split()))\n\nans = 0\n\n\n\nfor a in A:\n\n    if a%2 == 0:\n\n        ans += f(a)\n\nprint(ans)", "score": 1.0}
{"golden_code": "from collections import deque\n\n\n\nN, *AB = list(map(int, open(0).read().split()))\n\n\n\nE = [set() for _ in range(N + 1)]\n\nfor i, (a, b) in enumerate(zip(*[iter(AB)] * 2)):\n\n    E[a].add((b, i))\n\n    E[b].add((a, i))\n\n\n\nA = [0] * (N - 1)\n\nQ = deque([(0, 1)])\n\nwhile Q:\n\n    p, v = Q.popleft()\n\n    c = 0\n\n    for u, i in E[v]:\n\n        E[u].remove((v, i))\n\n        c += 1 + (c + 1 == p)\n\n        Q.append((c, u))\n\n        A[i] = c\n\n\n\nprint((max(A), *A))", "generated_code": "from collections import deque\n\n\n\nN, *AB = list(map(int, open(0).read().split()))\n\n\n\nE = [set() for _ in range(N + 1)]\n\nfor i, (a, b) in enumerate(zip(*[iter(AB)] * 2)):\n\n    E[a].add((b, i))\n\n    E[b].add((a, i))\n\n\n\nA = [0] * (N - 1)\n\nQ = deque([1])\n\nwhile Q:\n\n    p, v = divmod(Q.popleft(), N + 1)\n\n    c = 0\n\n    for u, i in E[v]:\n\n        E[u].remove((v, i))\n\n        c += 1 + (c + 1 == p)\n\n        Q.append(c * (N + 1) + u)\n\n        A[i] = c\n\n\n\nprint((max(A)))\n\nprint((\"\\n\".join(map(str, A))))", "score": 1.0}
{"golden_code": "import sys\n\nsys.setrecursionlimit(2147483647)\n\nINF=float(\"inf\")\n\nMOD=10**9+7\n\ninput=lambda :sys.stdin.readline().rstrip()\n\n\n\nfrom collections import deque\n\ndef resolve():\n\n    k=int(eval(input()))\n\n    E=[[] for _ in range(k)]\n\n    for i in range(k):\n\n        E[i].append(((i+1)%k,1))\n\n        E[i].append(((10*i)%k,0))\n\n\n\n    # 0-1 BFS\n\n    dist=[INF]*k\n\n    dist[1]=0\n\n    Q=deque([1])\n\n    while(Q):\n\n        v=Q.popleft()\n\n        for nv,w in E[v]:\n\n            if(dist[nv]<=dist[v]+w): continue\n\n            dist[nv]=dist[v]+w\n\n            if(w==0): Q.appendleft(nv)\n\n            else: Q.append(nv)\n\n    print((dist[0]+1))\n\nresolve()", "generated_code": "import sys\n\nINF = 1 << 60\n\nMOD = 10**9 + 7 # 998244353\n\nsys.setrecursionlimit(2147483647)\n\ninput = lambda:sys.stdin.readline().rstrip()\n\nfrom collections import deque\n\ndef resolve():\n\n    k = int(eval(input()))\n\n    dist = [INF] * k\n\n    dist[1] = 1\n\n    queue = deque([1])\n\n\n\n    while queue:\n\n        v = queue.pop()\n\n        if dist[10 * v % k] > dist[v]:\n\n            dist[10 * v % k] = dist[v]\n\n            queue.appendleft(10 * v % k)\n\n        if dist[(v + 1) % k] > dist[v] + 1:\n\n            dist[(v + 1) % k] = dist[v] + 1\n\n            queue.append((v + 1) % k)\n\n\n\n    print((dist[0]))\n\nresolve()", "score": 1.0}
{"golden_code": "N, W = list(map(int, input().split()))\n\nL = [list(map(int, input().split())) for i in range(N)]\n\nV = 0\n\nfor i in range(N):\n\n  V += L[i][1]\n\n\n\ndp = [[10**9+1] * (V + 1) for i in range(N+1)]\n\ndp[0][0] = 0\n\nfor i in range(N):\n\n    for j in range(V+1):\n\n        if j - L[i][1] >= 0:\n\n          dp[i+1][j] = min(dp[i][j], dp[i][j-L[i][1]] + L[i][0])\n\n        else:\n\n          dp[i+1][j] = dp[i][j]\n\nans = 0\n\nfor j in range(V+1):\n\n    if  W >= dp[-1][j]:\n\n        ans = max(ans, j)\n\nprint(ans)", "generated_code": "N, W = list(map(int, input().split()))\n\nL = [list(map(int, input().split())) for i in range(N)]\n\nV = 0\n\nfor i in range(N):\n\n  V += L[i][1]\n\n\n\ndp = [10**9+1] * (V + 1)\n\ndp[0] = 0\n\nfor i in range(N):\n\n    for j in range(V, -1, -1):\n\n        dp[j] = min(dp[j], dp[j-L[i][1]] + L[i][0])\n\nans = 0\n\nfor j in range(V+1):\n\n    if  W >= dp[j]:\n\n        ans = max(ans, j)\n\nprint(ans)", "score": 1.0}
{"golden_code": "import sys\n\ninput = sys.stdin.readline\n\n \n\ns = input().rstrip()\n\nk = int(eval(input()))\n\n    \n\ndef check_count(s):\n\n    cnt_list = [1]\n\n    cnt = 1\n\n    for i in range(1, len(s)):\n\n        if s[i-1] == s[i]:\n\n            cnt_list[-1] += 1\n\n        else:\n\n            cnt_list.append(1)\n\n    return cnt_list\n\n\n\ndef calc_ans(cnt_list, k):\n\n    _ans = 0\n\n    for c in cnt_list:\n\n        _ans += c//2\n\n    return(_ans * k)\n\n\n\nif len(s)==1:\n\n    ans = k//2\n\nelse:\n\n    cnt_list = check_count(s)\n\n    if len(cnt_list)==1:\n\n        ans = (len(s)*k)//2\n\n    else:\n\n        ans = calc_ans(cnt_list, k)\n\n        if s[0]==s[-1]:\n\n            if cnt_list[0]%2==1 and cnt_list[-1]%2==1:\n\n                ans += k - 1\n\n\n\nprint(ans)", "generated_code": "import sys\n\ninput = sys.stdin.readline\n\n \n\ns = input().rstrip()\n\nk = int(eval(input()))\n\n\n\ndef check_count(s):\n\n    cnt_list = []\n\n    cnt = 1\n\n    for i in range(1, len(s)):\n\n        if s[i-1] == s[i]:\n\n            cnt += 1\n\n        else:\n\n            cnt_list.append(cnt)\n\n            cnt = 1\n\n    if cnt>1:\n\n        cnt_list.append(cnt)\n\n    return cnt_list\n\n\n\ndef calc_ans(cnt_list, k):\n\n    _ans = 0\n\n    for c in cnt_list:\n\n        _ans += c//2\n\n    return(_ans * k)\n\n\n\nif len(s)==1:\n\n    ans = k//2\n\nelse:\n\n    cnt_list = check_count(s)\n\n    if len(cnt_list)==1:\n\n        ans = (len(s)*k)//2\n\n    else:\n\n        ans = calc_ans(cnt_list, k)\n\n        if s[0]==s[-1]:\n\n            if cnt_list[0]%2==1 and cnt_list[-1]%2==1:\n\n                ans += k - 1\n\n\n\nprint(ans)", "score": 1.0}
{"golden_code": "# -*- coding: utf-8 -*-\n\n\n\nimport sys\n\nfrom collections import Counter\n\n\n\ndef input(): return sys.stdin.readline().strip()\n\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\n\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\n\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\n\ndef ceil(x, y=1): return int(-(-x // y))\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\n\ndef Yes(): print('Yes')\n\ndef No(): print('No')\n\ndef YES(): print('YES')\n\ndef NO(): print('NO')\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = 10 ** 18\n\nMOD = 10 ** 9 + 7\n\n\n\ndef fft(A, B):\n\n    \"\"\" \n\n    高速フーリエ変換(FFT)\n\n        A：出現回数をカウントしたリスト\n\n        B：出現回数をカウントしたリスト\n\n    \"\"\"\n\n    import numpy as np\n\n    from numpy.fft import rfft, irfft\n\n\n\n    # 出現数カウント\n\n    MAXA = max(A)\n\n    MAXB = max(B)\n\n    C1 = [0] * (MAXA+1)\n\n    C2 = [0] * (MAXB+1)\n\n    for a in A:\n\n        C1[a] += 1\n\n    for b in B:\n\n        C2[b] += 1\n\n    # max(A)+max(B)より大きい2冪\n\n    L = 1\n\n    k = 0\n\n    while L <= MAXA + MAXB:\n\n        k += 1\n\n        L = 2**k\n\n    # FFT\n\n    res = irfft(rfft(C1, L) * rfft(C2, L), L)\n\n    # 四捨五入して整数に\n\n    res = np.rint(res).astype(np.int64)\n\n    return res\n\n\n\nN, M, L = MAP()\n\nA = LIST()\n\nB = LIST()\n\n\n\nres = list(fft(A, B))\n\n\n\nmn = INF\n\nfor i, a in enumerate(res):\n\n    if a != 0:\n\n        mn = i\n\n        break\n\n\n\nfor _ in range(L):\n\n    x, y, c = MAP()\n\n    x -= 1; y -= 1\n\n    mn = min(mn, A[x] + B[y] - c)\n\nprint(mn)\n", "generated_code": "# -*- coding: utf-8 -*-\n\n\n\nimport sys\n\nfrom collections import Counter\n\n\n\ndef input(): return sys.stdin.readline().strip()\n\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\n\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\n\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\n\ndef ceil(x, y=1): return int(-(-x // y))\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\n\ndef Yes(): print('Yes')\n\ndef No(): print('No')\n\ndef YES(): print('YES')\n\ndef NO(): print('NO')\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = 10 ** 18\n\nMOD = 10 ** 9 + 7\n\n\n\nN, M, L = MAP()\n\nA = LIST()\n\nB = LIST()\n\n\n\nmn = min(A) + min(B)\n\nfor _ in range(L):\n\n    x, y, c = MAP()\n\n    x -= 1; y -= 1\n\n    mn = min(mn, A[x] + B[y] - c)\n\nprint(mn)\n", "score": 1.0}
{"golden_code": "def popcount(x):\n\n    x = x - ((x >> 1) & 0x55555555)\n\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333)\n\n    x = (x + (x >> 4)) & 0x0f0f0f0f\n\n    x = x + (x >> 8)\n\n    x = x + (x >> 16)\n\n    return x & 0x0000007f\n\n\n\ncmb=[[0 for i in range(51)] for j in range(51)]\n\ncmb[0][0]=1\n\nfor i in range(51):\n\n    for j in range(51):\n\n        if i!=50 and j!=50:\n\n            cmb[i+1][j+1]+=cmb[i][j]\n\n        if i!=50:\n\n            cmb[i+1][j]+=cmb[i][j]\n\n\n\nfor i in range(1,51):\n\n    for j in range(2,51):\n\n        cmb[i][j]+=cmb[i][j-1]\n\n\n\nN,K,T,S=list(map(int,input().split()))\n\na=list(map(int,input().split()))\n\n\n\nmust0=[i for i in range(18) if S>>i &1==0]\n\nmust1=[i for i in range(18) if T>>i &1==1]\n\n\n\nA=[]\n\nfor val in a:\n\n    check=True\n\n    for j in must0:\n\n        check=check&(val>>j &1==0)\n\n    for j in must1:\n\n        check=check&(val>>j &1==1)\n\n    if check:\n\n        A.append(val)\n\n\n\nif not A:\n\n    print((0))\n\n    exit()\n\n\n\nbit=[]\n\nfor i in range(18):\n\n    if i not in must0 and i not in must1:\n\n        bit.append(i)\n\n\n\nfor i in range(len(A)):\n\n    temp=0\n\n    for j in range(len(bit)):\n\n        temp+=(A[i]>>bit[j] &1==1)*2**j\n\n    A[i]=temp\n\n\n\nans=0\n\nn=len(bit)\n\ndata=[0]*(2**n)\n\nfor i in range(2**n):\n\n    t=set([])\n\n    for a in A:\n\n        data[a&i]+=1\n\n        t.add(a&i)\n\n    temp=0\n\n    for val in t:\n\n        temp+=cmb[data[val]][min(K,data[val])]\n\n    ans+=temp*(-1)**popcount(i)\n\n    for val in t:\n\n        data[val]=0\n\n\n\nprint(ans)\n", "generated_code": "def popcount(x):\n\n    x = x - ((x >> 1) & 0x55555555)\n\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333)\n\n    x = (x + (x >> 4)) & 0x0f0f0f0f\n\n    x = x + (x >> 8)\n\n    x = x + (x >> 16)\n\n    return x & 0x0000007f\n\n\n\ncmb=[[0 for i in range(51)] for j in range(51)]\n\ncmb[0][0]=1\n\nfor i in range(51):\n\n    for j in range(51):\n\n        if i!=50:\n\n            cmb[i+1][j]+=cmb[i][j]\n\n        if j!=50 and i!=50:\n\n            cmb[i+1][j+1]+=cmb[i][j]\n\n\n\n\n\nfor i in range(1,51):\n\n    for j in range(2,51):\n\n        cmb[i][j]+=cmb[i][j-1]\n\n\n\nimport random\n\nN,K,T,S=list(map(int,input().split()))\n\na=list(map(int,input().split()))\n\n\n\nmust0=[i for i in range(18) if S>>i &1==0]\n\nmust1=[i for i in range(18) if T>>i &1==1]\n\n\n\nA=[]\n\nfor val in a:\n\n    check=True\n\n    for j in must0:\n\n        check=check&(val>>j &1==0)\n\n    for j in must1:\n\n        check=check&(val>>j &1==1)\n\n    if check:\n\n        A.append(val)\n\n\n\nif not A:\n\n    print((0))\n\n    exit()\n\n\n\nbit=[]\n\nfor i in range(18):\n\n    if i not in must0 and i not in must1:\n\n        bit.append(i)\n\n\n\nfor i in range(len(A)):\n\n    temp=0\n\n    for j in range(len(bit)):\n\n        temp+=(A[i]>>bit[j] &1==1)*2**j\n\n    A[i]=temp\n\n\n\nans=0\n\nn=len(bit)\n\ndata=[0]*(2**n)\n\npc=[popcount(i) for i in range(2**n)]\n\nfor i in range(2**n):\n\n    for a in A:\n\n        data[a&i]+=1\n\n    for a in A:\n\n        if data[a&i]:\n\n            ans+=cmb[data[a&i]][min(K,data[a&i])]*(-1)**pc[i]\n\n            data[a&i]=0\n\n\n\nprint(ans)", "score": 1.0}
{"golden_code": "N = int(eval(input()))\n\na = 1\n\nfor n in range(2,N+1):\n\n    a = a*n % (10**9+7)\n\nprint(a)", "generated_code": "def factorial(N):\n\n    a = 1\n\n    for n in range(2,N+1):\n\n        a = a*n % (10**9 + 7)\n\n    return a\n\n\n\nif __name__ == '__main__':\n\n    N = int(eval(input()))\n\n    print((factorial(N)))", "score": 1.0}
{"golden_code": "N, M = list(map(int, input().split()))\n\nA_ = [int(eval(input())) for _ in range(M)]\n\nA = [0] * (N+3)\n\nfor a in A_:\n\n    A[a] = 1\n\ndp = [0] * (N+3)\n\ndp[0] = 1\n\n\n\nmod = 10**9+7\n\n\n\nfor i in range(1, N+1):\n\n    if A[i-1] == 0:\n\n        dp[i] += dp[i-1]\n\n    if A[i-2] == 0:\n\n        dp[i] += dp[i-2]\n\n    dp[i] %= mod\n\nprint((dp[N]))", "generated_code": "n,m=list(map(int,input().split()))\n\ndp=[0]*(n+3)\n\na=[int(eval(input())) for i in range(m)]\n\nmod=10**9+7\n\nfor i in range(m):\n\n    dp[a[i]]=-1\n\n\n\ndp[0]=1\n\nif dp[1]!=-1:\n\n    dp[1]+=dp[0]\n\n\n\nfor i in range(n+1):\n\n    if dp[i+2]==-1:\n\n        continue\n\n    if dp[i]!=-1:\n\n        dp[i+2]+=dp[i]\n\n    if dp[i+1]!=-1:\n\n        dp[i+2]+=dp[i+1]\n\n    dp[i+2]%=mod\n\nprint((dp[n]%mod))", "score": 1.0}
{"golden_code": "from math import factorial\n\n\n\nn = int(eval(input()))\n\nf = factorial(n)\n\n\n\nmod = 10 ** 9 + 7\n\n\n\ndef primes(n):\n\n    is_prime = [True] * (n + 1)\n\n    is_prime[0] = False\n\n    is_prime[1] = False\n\n    for i in range(2, int(n ** 0.5) + 1):\n\n        if not is_prime[i]:\n\n            continue\n\n        for j in range(i * 2, n + 1, i):\n\n            is_prime[j] = False\n\n    return [i for i in range(n + 1) if is_prime[i]]\n\n\n\nans = 1\n\nfor p in primes(n):\n\n    temp = 1\n\n    while f % p == 0:\n\n        temp += 1\n\n        f //= p\n\n    ans = (ans * temp) % mod\n\nprint(ans)\n", "generated_code": "n=int(eval(input()))\n\nm=10**9+7\n\np=[1 for i in range(10000)]\n\np[0]=0\n\np[1]=0\n\nfor i in range(2,n+1):\n\n  if p[i]==1:\n\n    for j in range(i*i,n+1,i):\n\n        p[j]=0\n\nans=1\n\nfor i in range(2,n+1):\n\n  if p[i]:\n\n    c=0\n\n    k=i\n\n    while n//k>0:\n\n      c=c+(n//k)%m\n\n      k=k*i\n\n    ans=(ans*((c+1)%m))%m\n\nprint((ans%m))\n\n    \n\n    \n\n      \n\n      \n", "score": 1.0}
{"golden_code": "import math\n\n\n\nn = int(eval(input()))\n\n\n\nprint((math.factorial(n) % (10**9 + 7)))\n", "generated_code": "n = int(eval(input()))\n\n\n\nans = 1\n\n\n\nfor i in range(1, n+1):\n\n    ans *= i\n\n    ans %= 10**9 + 7\n\n\n\nprint(ans)\n", "score": 1.0}
{"golden_code": "# coding: utf-8\n\n\n\nimport sys\n\ninput = sys.stdin.readline\n\n\n\ndef f(n, abc):\n\n    dp = [[0] * 3 for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n\n        for j in range(3):\n\n            dp[i][j] = max(dp[i - 1][k] + abc[i - 1][j] \\\n\n                for k in range(3) if k != j)\n\n    return(max(dp[n]))\n\n\n\nn = int(eval(input()))    # 1 <= n <= 10^5\n\nabc = [list(map(int, input().rstrip().split())) for _ in range(n)]\n\n\n\nprint((f(n, abc)))\n", "generated_code": "# coding: utf-8\n\nimport sys\n\ninput = sys.stdin.readline\n\n\n\ndef f(n, abc):\n\n    dp = [0] * 3\n\n    for i in range(1, n + 1):\n\n        a, b, c = abc[i - 1]\n\n        dp = [ max(dp[1] + a, dp[2] + a), \\\n\n               max(dp[0] + b, dp[2] + b), \\\n\n               max(dp[0] + c, dp[1] + c) ]\n\n    return(max(dp))\n\n\n\nn = int(eval(input()))    # 1 <= n <= 10^5\n\nabc = [list(map(int, input().rstrip().split())) for _ in range(n)]\n\n\n\nprint((f(n, abc)))\n", "score": 1.0}
{"golden_code": "import numpy as np\n\n\n\nN = int(input())\n\n\n\nA = np.array([int(i) for i in input().split()])\n\n\n\nx = np.argsort(A)\n\nx += 1\n\n\n\nfor i in range(N):\n\n    print(x[i], end=\" \")\n\n    \n\nprint()\n", "generated_code": "N = int(eval(input()))\n\n\n\nA = [int(i) for i in input().split()]\n\n\n\nB = [0]*N\n\nfor i in range(N):\n\n    B[A[i]-1] = i+1\n\n\n\nfor i in range(N):\n\n    print((B[i]))\n", "score": 1.0}
{"golden_code": "s = eval(input())\n\nt = eval(input())\n\nfor i in range(len(s)):\n\n        if s[i:]+s[:i]==t:\n\n                print('Yes')\n\n                exit()\n\nprint('No')", "generated_code": "s = eval(input())\n\nt = eval(input())\n\n\n\nfor i in range(len(s)):\n\n    s = s[1:] + s[0]\n\n    if s == t:\n\n        print(\"Yes\")\n\n        exit()\n\nprint(\"No\")", "score": 1.0}
{"golden_code": "n = int(eval(input())) % 1000\n\nif n == 0:\n\n    print((0))\n\nelse:\n\n    print((1000 - n))", "generated_code": "n = int(eval(input()))\n\nprint(((1000 - n % 1000) % 1000))", "score": 1.0}
{"golden_code": "import numpy as np\n\n\n\neval(input())\n\nA = np.array(list(map(int, input().split())))\n\n\n\nans = 0\n\nwhile(all(A%2==0)):\n\n    A = A/2\n\n    ans += 1\n\n\n\nprint(ans)\n", "generated_code": "eval(input())\n\nA = list(map(int, input().split()))\n\n\n\nans = 0\n\nwhile all(a%2==0 for a in A):\n\n    A=[a/2 for a in A]\n\n    ans += 1\n\n\n\nprint(ans)", "score": 1.0}
{"golden_code": "import numpy as np\n\n\n\nA = np.zeros((3,3),int)\n\nfor i in range(3):\n\n    A[i,:] = np.array([int(x) for x in input().split()])\n\n    \n\nN = int(eval(input()))\n\n\n\nfor _ in range(N):\n\n    b = int(eval(input()))\n\n    A[A==b] = 0\n\n\n\nans = 'No'\n\nif np.sum(A[0,:])==0 or np.sum(A[1,:])==0 or np.sum(A[2,:])==0 or np.sum(A[:,0])==0 or np.sum(A[:,1])==0 or np.sum(A[:,2])==0 or np.sum(A[0,0]+A[1,1]+A[2,2])==0 or np.sum(A[0,2]+A[1,1]+A[2,0])==0:\n\n   ans = 'Yes'\n\n\n\nprint(ans)\n", "generated_code": "# B - Bingo\n\n\n\nimport numpy as np\n\n\n\nA = np.zeros((3,3), dtype=np.int64)\n\n\n\nfor i in range(3):\n\n    A[i] = [int(x) for x in input().split()]\n\n\n\nN = int(input())\n\n\n\nfor _ in range(N):\n\n    b = int(input())\n\n    A = np.where(A==b, 0, A)\n\n\n\nif sum(A[0])==0 or sum(A[1])==0 or sum(A[2])==0 or \\\n\n    sum(A[:,0])==0 or sum(A[:,1])==0 or sum(A[:,2])==0 or \\\n\n    A[0,0]+A[1,1]+A[2,2]==0 or \\\n\n    A[2,0]+A[1,1]+A[0,2]==0:\n\n    print('Yes')\n\nelse:\n\n    print('No')\n", "score": 1.0}
{"golden_code": "import sys\n\nsys.setrecursionlimit(1 << 25)\n\nreadline = sys.stdin.buffer.readline\n\nread = sys.stdin.readline  # 文字列読み込む時はこっち\n\nra = range\n\nenu = enumerate\n\n\n\n\n\ndef exit(*argv, **kwarg):\n\n    print(*argv, **kwarg)\n\n    sys.exit()\n\n\n\n\n\ndef mina(*argv, sub=1): return list(map(lambda x: x - sub, argv))\n\n# 受け渡されたすべての要素からsubだけ引く.リストを*をつけて展開しておくこと\n\n\n\n\n\ndef a_int(): return int(readline())\n\n\n\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\n\n\n\ndef _make_minimum_prime(N: int):\n\n    # xの最小の素因数表を作成\n\n    min_prime = [x for x in range(N + 1)]\n\n    # min_prime[0] = 0  # 0と1は素数ではない\n\n    # min_prime[1] = 1\n\n    for i in range(2, int(N ** 0.5) + 1):\n\n        if min_prime[i] == i:  # 素数だったら更新\n\n            for j in range(2 * i, N + 1, i):  # iの倍数は素数でない\n\n                if min_prime[j] == j:\n\n                    min_prime[j] = i\n\n    return min_prime\n\n\n\n\n\nmin_prime = _make_minimum_prime(10**6)\n\n\n\n\n\nfrom collections import Counter\n\n\n\n\n\ndef fast_factorization(N: int):\n\n    # -> List[Tuple[int,int]] (素数,冪数)を格納\n\n    # 最小素数配列min_primeを使ってO(log N)で因数分解\n\n    if N == 1:\n\n        return Counter()  # 1は素数ではない\n\n    # 素因数分解\n\n    arr = []\n\n    tmp = N\n\n    while tmp != 1:\n\n        p = min_prime[tmp]\n\n        tmp //= p\n\n        arr.append(p)\n\n\n\n    return Counter(arr)\n\n\n\n\n\nMOD = 10**9 + 7\n\nINF = 2**31  # 2147483648 > 10**9\n\n# default import\n\nfrom collections import defaultdict, Counter, deque\n\nimport random\n\nfrom math import gcd\n\n\n\n\n\nN = a_int()\n\nA = ints()\n\nrandom.shuffle(A)\n\n\n\n# setかはすぐわかる\n\n# setでなければ not coprime\n\n# pairは互いに素かをみればいいのか\n\n# つまり因数分解して足してったときにすべての素数のべき数が1以下であれば良い\n\n\n\ng_set = 0\n\ncnt = defaultdict(lambda: 0)\n\nflg = 1  # pairwiseであるフラグ\n\nfor a in A:\n\n    g_set = gcd(g_set, a)\n\n    if flg:\n\n        for p, n in fast_factorization(a).items():\n\n            if cnt[p] != 0:\n\n                flg = 0\n\n            cnt[p] += n\n\n\n\n\n\n# print(cnt)\n\n# for v in cnt.values():\n\n#     if v > 1:\n\n#         flg = 0\n\n#         break\n\n\n\nif g_set > 1:\n\n    print('not coprime')\n\nelif flg:\n\n    print('pairwise coprime')\n\nelse:\n\n    print('setwise coprime')\n", "generated_code": "import sys\n\nsys.setrecursionlimit(1 << 25)\n\nreadline = sys.stdin.buffer.readline\n\nread = sys.stdin.readline  # 文字列読み込む時はこっち\n\nra = range\n\nenu = enumerate\n\n\n\n\n\ndef exit(*argv, **kwarg):\n\n    print(*argv, **kwarg)\n\n    sys.exit()\n\n\n\n\n\ndef mina(*argv, sub=1): return list(map(lambda x: x - sub, argv))\n\n# 受け渡されたすべての要素からsubだけ引く.リストを*をつけて展開しておくこと\n\n\n\n\n\ndef a_int(): return int(readline())\n\n\n\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\n\n\n\nfrom collections import Counter\n\n\n\n\n\nclass FastFactorization:\n\n    def __init__(self, N: int):\n\n        '''構築O(NloglogN)、クエリO(logN)'''\n\n        self.N = N\n\n        self.min_prime = self._make_minimum_prime()\n\n\n\n    def _make_minimum_prime(self):\n\n        # xの最小の素因数表を作成\n\n        min_prime = [x for x in range(self.N + 1)]\n\n        # min_prime[0] = 0  # 0と1は素数ではない\n\n        # min_prime[1] = 1\n\n        for i in range(2, int(self.N ** 0.5) + 1):\n\n            if min_prime[i] == i:  # 素数だったら更新\n\n                for j in range(2 * i, self.N + 1, i):  # iの倍数は素数でない\n\n                    if min_prime[j] == j:\n\n                        min_prime[j] = i\n\n        return min_prime\n\n\n\n    def query(self, x: int):\n\n        # -> Counter[p,n] (素数,冪数) を格納\n\n        # 最小素数配列min_primeを使ってO(log N)で因数分解\n\n        if x == 1:\n\n            return Counter()  # 1は素数ではない\n\n\n\n        # 素因数分解\n\n        arr = []\n\n        tmp = x\n\n        while tmp != 1:\n\n            p = self.min_prime[tmp]\n\n            tmp //= p\n\n            arr.append(p)\n\n        return Counter(arr)\n\n\n\n\n\nMOD = 10**9 + 7\n\nINF = 2**31  # 2147483648 > 10**9\n\n# default import\n\nfrom collections import defaultdict, Counter, deque\n\nfrom math import gcd\n\n\n\n\n\nN = a_int()\n\nA = ints()\n\n\n\nfact = FastFactorization(max(A))\n\n\n\n# setかはすぐわかる\n\n# setでなければ not coprime\n\n# pairは互いに素かをみればいいのか\n\n# つまり因数分解して足してったときにすべての素数のべき数が1以下であれば良い\n\n\n\ng_set = 0\n\ncnt = defaultdict(lambda: 0)\n\nflg = 1  # pairwiseであるフラグ\n\nfor a in A:\n\n    g_set = gcd(g_set, a)\n\n    if flg:\n\n        for p, n in fact.query(a).items():\n\n            if cnt[p] != 0:\n\n                flg = 0\n\n            cnt[p] += n\n\n\n\n\n\n# print(cnt)\n\n# for v in cnt.values():\n\n#     if v > 1:\n\n#         flg = 0\n\n#         break\n\n\n\nif g_set > 1:\n\n    print('not coprime')\n\nelif flg:\n\n    print('pairwise coprime')\n\nelse:\n\n    print('setwise coprime')\n", "score": 1.0}
{"golden_code": "ia = [int(i) for i in input().split(\" \")]\n\nW=ia[0]\n\nH=ia[1]\n\nx=ia[2]\n\ny=ia[3]\n\nr=ia[4]\n\nprint((\"Yes\" if 0<=x-r and x+r<=W and 0<=y-r and y+r<=H else \"No\"))", "generated_code": "# encoding:utf-8\n\n\n\ninput = list(map(int, input().split()))\n\nW, H, x, y, r = input\n\n\n\nif x - r < 0 or x + r > W:\n\n\tprint(\"No\")\n\nelif y - r < 0 or y + r > H:\n\n\tprint(\"No\")\n\nelse:\n\n\tprint(\"Yes\")", "score": 1.0}
{"golden_code": "res = []\n\nwhile True:\n\n    s = eval(input())\n\n    if s == '0':\n\n        break\n\n\n\n    res.append(sum([int(x) for x in s]))\n\n\n\nfor e in res:\n\n    print(e)", "generated_code": "def sum_of_numbers(n):\n\n    '''\n\n    (* int -> int *)\n\n    '''\n\n    res = [int(n) for n in list(str(n))]\n\n    \n\n    return sum(res)\n\n\n\nif __name__ == \"__main__\":\n\n    while True:\n\n        n = eval(input())\n\n        if n == '0':\n\n            break\n\n        print((sum_of_numbers(n)))\n", "score": 1.0}
{"golden_code": "N,K=list(map(int,input().split()))\n\na = [[0]*N]*K\n\na = [[0 for n in range(N)] for k in range(K)]\n\n\n\nfor k in range(K):\n\n    d=int(eval(input()))\n\n    have_k=list(map(int,input().split()))\n\n    for h in have_k:\n\n        a[k][h-1]=1\n\n\n\nan=[0]*N\n\nfor k in range(K):\n\n  for n in range(N):\n\n    an[n] = an[n]+a[k][n]\n\n\n\nresult=0\n\nfor i in an:\n\n  if i == 0:\n\n    result+=1\n\n\n\nprint(result)", "generated_code": "N,K=list(map(int,input().split()))\n\na = [[0 for n in range(N)] for k in range(K)]\n\n\n\nfor k in range(K):\n\n    d=int(eval(input()))\n\n    have_k=list(map(int,input().split()))\n\n    for h in have_k:\n\n        a[k][h-1]=1\n\n\n\nan=[0]*N\n\nfor k in range(K):\n\n  for n in range(N):\n\n    an[n] = an[n]+a[k][n]\n\n\n\nresult=0\n\nfor i in an:\n\n  if i == 0:\n\n    result+=1\n\n\n\nprint(result)", "score": 1.0}
{"golden_code": "import sys\n\ninput = sys.stdin.readline\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\nK, S = list(map(int, input().split()))\n\n\n\nans = 0\n\nfor z in range(K+1):\n\n    for y in range(K+1):\n\n        x = S - (z + y)\n\n        if x >= 0 and x <= K:\n\n            ans += 1\n\nprint(ans)", "generated_code": "import sys\n\ninput = sys.stdin.readline\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\nK, S = list(map(int, input().split()))\n\n\n\nans = 0\n\nfor z in range(K+1):\n\n    for y in range(K+1):\n\n        x = S - (z + y)\n\n        if 0 <= x <= K:\n\n            ans += 1\n\nprint(ans)", "score": 1.0}
{"golden_code": "import copy\n\n\n\nn=int(eval(input()))\n\norg_set=set([i for i in range(1,10**5)])\n\nedges=[]\n\nrelations={}\n\nnodes=[]\n\nfor i in range(n-1):\n\n    a,b=list(map(int,input().split(\" \")))\n\n    edges.append([a,b])\n\n    relations.setdefault(a,[]).append(b)\n\n    nodes.append([])\n\nnodes.append([])\n\nnodes.append([])\n\n\n\nmax_color=0\n\nfor start in range(1,n+1):\n\n    targets=relations.get(start,[])\n\n    color=1\n\n    for target in targets:\n\n        if color in nodes[start]:\n\n            color+=1\n\n        else:\n\n            pass\n\n        nodes[target].append(color)\n\n        if color>=max_color:\n\n            max_color=color\n\n        color+=1\n\n\n\nprint(max_color)\n\nfor edge in edges:\n\n    print((nodes[edge[1]][0]))", "generated_code": "n=int(eval(input()))\n\nedges=[]\n\nrelations={}\n\nnodes=[0,0]\n\nfor i in range(n-1):\n\n    a,b=list(map(int,input().split(\" \")))\n\n    edges.append([a,b])\n\n    relations.setdefault(a,[]).append(b)\n\n    nodes.append(0)\n\n\n\nmax_color=0\n\nfor start in range(1,n+1):\n\n    targets=relations.get(start,[])\n\n    color=1\n\n    for target in targets:\n\n        if color == nodes[start]:\n\n            color+=1\n\n        else:\n\n            pass\n\n        nodes[target]=color\n\n        if color>=max_color:\n\n            max_color=color\n\n        color+=1\n\n\n\nprint(max_color)\n\nfor edge in edges:\n\n    print((nodes[edge[1]]))", "score": 1.0}
{"golden_code": "x = int(eval(input()))\n\na = 0\n\nb = 0\n\nfor i in range(-120, 120):\n\n    for j in range(-120, 120):\n\n        if i ** 5 - j ** 5 == x:\n\n            a = i\n\n            b = j\n\nprint((a, b))\n", "generated_code": "x = int(eval(input()))\n\nfor i in range(-120, 120):\n\n    for j in range(-120, 120):\n\n        if i ** 5 - j ** 5 == x:\n\n            print((i, j))\n\n            exit()\n", "score": 1.0}
{"golden_code": "a, b = list(map(int, input().split()))\n\ntmp=str(a)\n\nc=0\n\nfor i in range(a,b+1):\n\n    tmp=str(i)\n\n    tmp2=\"\"\n\n    for s in range(len(tmp)):\n\n        tmp2=tmp2+tmp[len(tmp)-1-s]\n\n    if tmp==tmp2:\n\n        c=c+1\n\nprint(c)", "generated_code": "def main():\n\n    #1. input\n\n    a, b = list(map(int, input().split()))\n\n\n\n    ans = 0\n\n\n\n    #2. from A to B\n\n    for i in range(a, b+1):\n\n        #2.1. judge if the number is palindromic\n\n        if (str(i)[0]==str(i)[4]) and (str(i)[1]==str(i)[3]):\n\n            ans = ans+1\n\n\n\n    #3. output\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()", "score": 1.0}
{"golden_code": "# C - Go to School\n\ndef main():\n\n    import numpy as np\n\n    n = int(input())\n\n    a = list(map(int, input().split()))\n\n    a = np.array(a)\n\n    a = np.argsort(a)\n\n    for i in a:\n\n        print(i+1,end=\" \")\n\n\n\nif __name__ ==  \"__main__\":\n\n    main()\n", "generated_code": "# C - Go to School\n\ndef main():\n\n    n = int(eval(input()))\n\n    a = list(map(int, input().split()))\n\n    ans = [0] * n\n\n\n\n    for i, o in enumerate(a):\n\n        ans[o-1] = i + 1 \n\n    \n\n    print((*ans))\n\n\n\nif __name__ ==  \"__main__\":\n\n    main()", "score": 1.0}
{"golden_code": "import numpy as np\n\n\n\nS=eval(input())\n\nS=np.array([1 if s=='B' else 0 for s in S])\n\n\n\nprint((np.abs(np.diff(S)).sum()))\n", "generated_code": "from itertools import groupby\n\n\n\nS=eval(input())\n\nanswer = sum([1 for _ in groupby(S)]) -1\n\n\n\nprint(answer)", "score": 1.0}
{"golden_code": "def binarySearch():\n\n    n = int(eval(input()))\n\n    S = set(map(int, input().split()))\n\n    q = int(eval(input()))\n\n    T = set(map(int, input().split()))\n\n    print((len(S.intersection(T))))\n\n    \n\n\n\nbinarySearch()", "generated_code": "def binarySearch():\n\n    n = int(eval(input()))\n\n    S = set(input().split())\n\n    q = int(eval(input()))\n\n    T = set(input().split())\n\n    print((len(S.intersection(T))))\n\n    \n\n\n\nbinarySearch()", "score": 1.0}
{"golden_code": "from collections import defaultdict\n\n\n\nN, K, *A = list(map(int, open(0).read().split()))\n\n\n\nS = [0] * (N + 1)\n\nfor i in range(N):\n\n    S[i + 1] = S[i] + A[i]\n\n\n\nd = defaultdict(int)\n\nans = 0\n\nfor j in range(N + 1):\n\n    v = (S[j] - j) % K\n\n    ans += d[v]\n\n    d[v] += 1\n\n    if j >= K - 1:\n\n        d[(S[j - K + 1] - (j - K + 1)) % K] -= 1\n\n        \n\nprint(ans)\n", "generated_code": "from collections import defaultdict\n\n\n\nN, K, *A = list(map(int, open(0).read().split()))\n\n\n\nx = [0] * (N + 1)\n\nfor i in range(N):\n\n    x[i + 1] = x[i] + A[i]\n\n    \n\ny = [(x[i] - i) % K for i in range(N + 1)]\n\n\n\nctr = defaultdict(int)\n\nans = 0\n\nfor j in range(N + 1):\n\n    ans += ctr[y[j]]\n\n    ctr[y[j]] += 1\n\n    if j - K + 1 >= 0:\n\n        ctr[y[j - K + 1]] -= 1\n\nprint(ans)\n", "score": 1.0}
{"golden_code": "answer = 0\n\nN = int(eval(input()))\n\nA = list(map(int,input().split()))\n\nfor i in range(N) :\n\n    while A[i] % 2 == 0 :\n\n        A[i] = A[i] / 2\n\n        answer += 1\n\nprint(answer)\n\n\n", "generated_code": "N = int(eval(input()))\n\nL = list(map(int,input().split()))\n\n\n\nans = 0\n\nfor i in range(N) :\n\n    flag = 0\n\n    while flag == 0 :\n\n        if (L[i] % 2) == 0 :\n\n            ans += 1\n\n            L[i] = L[i]//2\n\n        else :\n\n            flag = 1\n\nprint(ans)\n", "score": 1.0}
{"golden_code": "icase=0\n\nif icase==0:\n\n    n,m=list(map(int, input().split()))\n\n    a=[]\n\n    b=[]\n\n    for i in range(m):\n\n        ai,bi=list(map(int, input().split()))\n\n        a.append(ai)\n\n        b.append(bi)\n\nelif icase==1:\n\n    n=6\n\n    m=5\n\n#    a=[[1],[2],[3],[4],[5]]\n\n#    b=[[2],[3],[4],[5],[6]]\n\n    a=[1,2,3,4,5]\n\n    b=[2,3,4,5,6]\n\nelif icase==2:\n\n    n=7\n\n    m=7\n\n    a=[1,2,3,4,4,5,6]\n\n    b=[3,7,4,5,6,6,7]\n\n\n\n    \n\nvtx=[]\n\nfor i in range(n):\n\n    vtx.append([i+1])\n\nicnt=0\n\n\n\nfor j in range(m):    \n\n    vtx1=vtx.copy()\n\n    a1=a.copy()\n\n    b1=b.copy()\n\n    del a1[j]\n\n    del b1[j]\n\n    \n\n    for i in range(m-1):\n\n        for v1 in vtx1:\n\n            if a1[i] in v1:\n\n                if not b1[i] in v1:\n\n                    for v2 in vtx1:\n\n                        if v1!=v2:\n\n                            if b1[i] in v2:\n\n                                break\n\n                    vtx1.remove(v1)\n\n                    vtx1.remove(v2)\n\n                    v3=v1+v2\n\n                    vtx1.append(v3)\n\n#        print(a[i],b[i],len(vtx1),vtx1)\n\n#    print(len(vtx1),vtx1)\n\n    if len(vtx1)!=1:\n\n        icnt=icnt+1\n\nprint(icnt)        ", "generated_code": "limit=50\n\ngraph=[[False]*limit for i in range(limit)]\n\nvisited=[]*limit\n\n\n\ndef dfs(v,n,graph,visited):\n\n    visited[v]=True\n\n    for v2 in range(n):\n\n        if graph[v][v2]==False:\n\n            continue\n\n        if visited[v2]==True:\n\n            continue\n\n        dfs(v2,n,graph,visited)\n\n\n\nn,m=list(map(int,input().split()))\n\na=[0]*m\n\nb=[0]*m\n\nfor i in range(m):\n\n    ai,bi=list(map(int,input().split()))\n\n    a[i]=ai-1\n\n    b[i]=bi-1\n\n    graph[a[i]][b[i]]=True\n\n    graph[b[i]][a[i]]=True\n\n    \n\nans=0 \n\nfor i in range(m):\n\n    graph[a[i]][b[i]]=False\n\n    graph[b[i]][a[i]]=False\n\n    visited=[False]*n\n\n    dfs(0,n,graph,visited)\n\n    bridge=False\n\n    for j in range(n):\n\n        if visited[j]==False:\n\n            bridge=True\n\n    if bridge:\n\n        ans+=1\n\n    graph[a[i]][b[i]]=True\n\n    graph[b[i]][a[i]]=True\n\n    \n\nprint(ans)", "score": 1.0}
{"golden_code": "#E\n\nfrom itertools import accumulate\n\nfrom bisect import bisect_left\n\ndef main():\n\n    n,m=list(map(int,input().split()))\n\n    A=list(map(int,input().split()))\n\n    A.sort()\n\n    \n\n    def count(k):\n\n        cnt=0\n\n        for a in A:\n\n            cnt+=bisect_left(A,k-a)\n\n        return cnt\n\n    \n\n    ok=0\n\n    ng=10**10+1\n\n    while ng-ok>1:\n\n        mid=(ok+ng)//2\n\n        if count(mid)<n**2-m:\n\n            ok=mid\n\n        else:\n\n            ng=mid\n\n    border=ok\n\n    \n\n    k=n**2-count(border)\n\n    Acc=[0]+list(accumulate(A))\n\n    s=Acc[-1]\n\n    ans=0\n\n    for a in A:\n\n        idx=bisect_left(A,border-a)\n\n        ans+=a*(n-idx)+(s-Acc[idx])\n\n    ans-=border*(k-m)\n\n    print(ans)\n\n    \n\nif __name__=='__main__':\n\n    main()", "generated_code": "from itertools import accumulate\n\nfrom bisect import bisect_left\n\ndef main():\n\n    n,m=list(map(int,input().split()))\n\n    A=list(map(int,input().split()))\n\n    A.sort()\n\n    \n\n    def count(k):\n\n        cnt=0\n\n        for a in A:\n\n            cnt+=bisect_left(A,k-a)\n\n        return cnt\n\n    \n\n    ok=0\n\n    ng=2*10**5+1\n\n    while ng-ok>1:\n\n        mid=(ok+ng)//2\n\n        if count(mid)<n**2-m:\n\n            ok=mid\n\n        else:\n\n            ng=mid\n\n    border=ok\n\n    \n\n    k=n**2-count(border)\n\n    Acc=[0]+list(accumulate(A))\n\n    s=Acc[-1]\n\n    ans=0\n\n    for a in A:\n\n        idx=bisect_left(A,border-a)\n\n        ans+=a*(n-idx)+(s-Acc[idx])\n\n    ans-=border*(k-m)\n\n    print(ans)\n\n    \n\nif __name__=='__main__':\n\n    main()", "score": 1.0}
{"golden_code": "# E - This Message Will Self-Distruct in 5s\n\n\n\nfrom collections import Counter\n\n\n\nn = int(eval(input()))\n\na = list(map(int, input().split()))\n\nassert len(a) == n\n\n\n\n# Ai + Aj == j - i\n\n# Aj - j == -Ai - i\n\n\n\n# Aj - j の各値の個数\n\ndiff = Counter(a[j] - (j+1) for j in range(n))\n\n\n\n# 各Aiについて Aj - j == -Ai - i となるjの個数を数える\n\ncount = 0\n\nfor i in range(n):\n\n    diff[a[i] - (i+1)] -= 1  # i自身を取り除く\n\n    count += diff[-a[i] - (i+1)]\n\n\n\nprint(count)\n", "generated_code": "# E - This Message Will Self-Distruct in 5s\n\n\n\nfrom collections import Counter\n\n\n\nn = int(eval(input()))\n\na = list(map(int, input().split()))\n\nassert len(a) == n\n\n\n\n# Aj - j の各値の個数\n\ndiff = Counter(a[j] - (j+1) for j in range(n))\n\n\n\n# Aj - j == -Ai - i となる(i,j)の個数\n\ncount = sum(diff[-a[i] - (i+1)] for i in range(n))\n\nprint(count)\n", "score": 1.0}
{"golden_code": "import numpy as np\n\ncookies = np.array([int(x) for x in input().split()])\n\n\n\nif any(cookies%2):\n\n  ans = 0\n\nelif cookies[0] == cookies[1] == cookies[2]:\n\n  ans = -1\n\nelse:\n\n  ans = 0\n\n  while True:\n\n    if not any(cookies%2):\n\n      cookies = cookies//2\n\n      ans += 1\n\n      continue\n\n    if all(cookies%2):\n\n      ans += 1\n\n    break\n\nprint(ans)", "generated_code": "a, b, c = list(map(int, input().split()))\n\nif a == b == c and a%2 == 0:\n\n  print((-1))\n\nelif a%2 or b%2 or c%2:\n\n  print((0))\n\nelse:\n\n  ans = 0\n\n  while a%2 == b%2 == c%2 == 0:\n\n    a, b, c = (b+c)//2, (a+c)//2, (a+b)//2\n\n    ans += 1\n\n  print(ans)", "score": 1.0}
{"golden_code": "from statistics import mean\n\n\n\ninputCount = int(eval(input()))\n\nprices = [int(eval(input())) for lp in range(inputCount)]\n\naverage = mean(prices)\n\nprint((int(average)))\n\n\n", "generated_code": "inputCount = int(eval(input()))\n\nprices = [int(eval(input())) for lp in range(inputCount)]\n\naverage = sum(prices) // inputCount\n\nprint(average)\n\n\n", "score": 1.0}
{"golden_code": "\n\nn,m,k = list(map(int,input().split()))\n\n#１回押すと変わるマス　= N * M -1\n\n#２回目押すと黒に変わるマス N * M -1 -2\n\n# 3 = N * M -1 -4\n\n\n\ncnt = 0\n\nfor i in range(n+1):\n\n    for j in range(m + 1):\n\n        cnt = i * m + j * n -2 * i * j\n\n        if cnt == k:\n\n            print(\"Yes\")\n\n            exit()\n\nprint(\"No\")\n", "generated_code": "\n\nn,m,k = list(map(int,input().split()))\n\n\n\nfor i in range(n+1):\n\n    for j in range(m+1):\n\n        if i*(m-j) + j*(n-i) == k:\n\n            print(\"Yes\")\n\n            exit()\n\nprint(\"No\")\n", "score": 1.0}
{"golden_code": "n = int(input())\n\na = list(map(int, input().split()))\n\n\n\ntmp = [[e, n - i] for i, e in enumerate(a)]\n\ntmp.sort(reverse=True)\n\n\n\naa = [[e, n - i] for e, i in tmp] + [[0, -1]]\n\n\n\nv_prev, i_prev = aa[0]\n\ni = 0\n\nans = [0] * n\n\nsm = 0\n\nwhile i < n:\n\n    while aa[i][1] >= i_prev:\n\n        sm += aa[i][0]\n\n        i += 1\n\n\n\n    ans[i_prev] += sm - aa[i][0] * i\n\n    sm = aa[i][0] * i\n\n    v_prev, i_prev = aa[i]\n\n\n\nprint(*ans, sep=\"\\n\")\n", "generated_code": "from bisect import bisect_right\n\n\n\nn = int(input())\n\na = list(map(int, input().split()))\n\n\n\nli = [[0, -1]]\n\nfor i, e in enumerate(a):\n\n    if e > li[-1][0]:\n\n        li.append([e, i])\n\n\n\nli = li[::-1]\n\n\n\na.sort()\n\nacc = [0] * (n + 1)\n\nfor i in range(n - 1, -1, -1):\n\n    acc[i] = acc[i+1] + a[i]\n\n\n\nans = [0] * n\n\nsub = 0\n\nans_prev = 0\n\nfor (ep, ip), (e, i) in zip(li, li[1:]):\n\n    j = bisect_right(a, e)\n\n    ans[ip] = acc[j] - e * (n - j)\n\n\n\ni_prev = 0\n\nfor i in range(1, n):\n\n    if ans[i]:\n\n        ans[i_prev] -= ans[i]\n\n        i_prev = i\n\n\n\nprint(*ans, sep=\"\\n\")\n", "score": 1.0}
{"golden_code": "# -*- coding: utf-8 -*-\n\n\n\nA, B, C, X, Y = list(map(int, input().split()))\n\n\n\ncost = int(1e10)\n\nfor num_ac in range(0, int(1e5) + 1):\n\n    num_A = max(0, X - num_ac)\n\n    num_B = max(0, Y - num_ac)\n\n    c = 2 * C * num_ac + A * num_A + B * num_B\n\n    cost = min(c, cost)\n\nprint(cost)", "generated_code": "A, B, C, X, Y = list(map(int, input().split()))\n\n\n\nans = 0\n\nif A + B > 2 * C:\n\n    z = min(X, Y)\n\n    X -= z\n\n    Y -= z\n\n    ans += 2 * z * C\n\n\n\n# 偏り分\n\nif 2 * C < A:\n\n    k = X\n\n    X -= k\n\n    Y -= k\n\n    ans += 2 * C * k\n\nif 2 * C < B:\n\n    k = Y\n\n    X -= k\n\n    Y -= k\n\n    ans += 2 * C * k\n\n\n\n# あまり分\n\nans += A * max(0, X) + B * max(0, Y)\n\nprint(ans)", "score": 1.0}
{"golden_code": "n,m=list(map(int,input().split()))\n\na=[int(x) for x in input().split()]\n\nb=[0 for x in range(n+1)]\n\nl=list([0])\n\n\n\nfor i in range(1,n+1):\n\n  b[i]=b[i-1]+a[i-1]\n\n\n\nfor i in range(1,n+1):\n\n  l.append(b[i]%m)\n\n\n\nd=list()\n\nl.sort()\n\nt,c=0,1\n\nfor i in range(1,n+1):\n\n  if l[i]==l[i-1]:\n\n    c+=1\n\n  else:\n\n    if c!=1:\n\n      t += c*(c-1)//2\n\n      c=1\n\n\n\nif c!=1:\n\n  t += c*(c-1)//2  \n\n\n\nprint(t)\n", "generated_code": "n,m=list(map(int,input().split()))\n\na=[int(x) for x in input().split()]\n\nl=list([0])\n\n\n\nb=0\n\nfor i in range(0,n):\n\n  b += a[i]\n\n  l.append(b%m)\n\nl.append(m)\n\n\n\nl.sort()\n\nt,c=0,1\n\nfor i in range(1,n+2):\n\n  if l[i]==l[i-1]:\n\n    c+=1\n\n  else:\n\n    if c!=1:\n\n      t += c*(c-1)//2\n\n      c=1\n\nprint(t)\n", "score": 1.0}
{"golden_code": "X,Y,Z,K = list(map(int,input().split()))\n\nA = list(map(int,input().split()))\n\nB = list(map(int,input().split()))\n\nC = list(map(int,input().split()))\n\nasort,bsort,csort = sorted(A,reverse=True),sorted(B,reverse=True),sorted(C,reverse=True)\n\nprint((asort[0] + bsort[0] + csort[0]))\n\nalready = [[0,0,0]]\n\nx,y,z = 0,0,0\n\nplace_sum = []\n\ncheck = []\n\nfor k in range(K - 1):\n\n    if [x + 1,y,z] not in already and x + 1 < X:\n\n        already.append([x + 1,y,z])\n\n        place_sum.append([x + 1,y,z])\n\n        check.append(asort[x + 1] + bsort[y] + csort[z])\n\n    if [x,y + 1,z] not in already and y + 1 < Y:\n\n        already.append([x,y + 1,z])\n\n        place_sum.append([x,y + 1,z])\n\n        check.append(asort[x] + bsort[y + 1] + csort[z])\n\n    if [x,y,z + 1] not in already and z + 1 < Z:\n\n        already.append([x,y,z + 1])\n\n        place_sum.append([x,y,z + 1])\n\n        check.append(asort[x] + bsort[y] + csort[z + 1])\n\n    print((max(check)))\n\n    x,y,z = place_sum[check.index(max(check))][0],place_sum[check.index(max(check))][1],place_sum[check.index(max(check))][2]\n\n    place_sum.pop(check.index(max(check)))\n\n    check.remove(max(check))", "generated_code": "import heapq\n\nX,Y,Z,K = list(map(int,input().split()))\n\nA = list(map(int,input().split()))\n\nB = list(map(int,input().split()))\n\nC = list(map(int,input().split()))\n\nasort,bsort,csort = sorted(A,reverse=True),sorted(B,reverse=True),sorted(C,reverse=True)\n\nalready = [[0,0,0]]\n\nprint((asort[0] + bsort[0] + csort[0]))\n\nx,y,z = 0,0,0\n\ncheck = []\n\nfor k in range(K - 1):\n\n    if [x + 1,y,z] not in already and x + 1 < X:\n\n        already.append([x + 1,y,z])\n\n        heapq.heappush(check,(-(asort[x + 1] + bsort[y] + csort[z]),x + 1,y,z))\n\n    if [x,y + 1,z] not in already and y + 1 < Y:\n\n        already.append([x,y + 1,z])\n\n        heapq.heappush(check,(-(asort[x] + bsort[y + 1] + csort[z]),x,y + 1,z))\n\n    if [x,y,z + 1] not in already and z + 1 < Z:\n\n        already.append([x,y,z + 1])\n\n        heapq.heappush(check,(-(asort[x] + bsort[y] + csort[z + 1]),x,y,z + 1))\n\n    maxsum = heapq.heappop(check)\n\n    print((-maxsum[0]))\n\n    x,y,z = maxsum[1],maxsum[2],maxsum[3]", "score": 1.0}
{"golden_code": "while 1:\n\n    ans=0\n\n    n,x=list(map(int,input().split()))\n\n    if n:\n\n        for i in range(1,n-1):\n\n            for j in range(i+1,n):\n\n                for k in range(j+1,n+1):\n\n                    if i+j+k==x:ans+=1\n\n    else:break\n\n    print(ans)", "generated_code": "while 1:\n\n    a=0\n\n    n,x=list(map(int,input().split()))\n\n    if n==0:break\n\n    for i in range(1,n-1):\n\n        for j in range(i+1,n):\n\n            c=x-i-j\n\n            if c>j and c<=n:a+=1\n\n    print(a)", "score": 1.0}
{"golden_code": "A,B = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(A,B+1):\n\n    i = str(i)\n\n    if i[0] == i[4]:\n\n        if i[1] == i[3]:\n\n            ans += 1\n\n        else:\n\n            ans += 0\n\n    else:\n\n        ans += 0\n\nprint(ans)", "generated_code": "A,B = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(A,B+1):\n\n    k = str(i)\n\n    if k[0] == k[4] and k[1] == k[3]:\n\n        ans += 1\n\nprint(ans)", "score": 1.0}
{"golden_code": "import sys\n\ninput = sys.stdin.buffer.readline\n\nfrom collections import defaultdict\n\nimport copy\n\n\n\ndef main():\n\n    N,M = list(map(int,input().split()))\n\n    d = defaultdict(int)\n\n    MOD = 10**9+7\n\n    R = 10**5+100\n\n    fac = [0 for _ in range(R+1)]\n\n    fac[0],fac[1] = 1,1\n\n    inv = copy.deepcopy(fac)\n\n    invfac = copy.deepcopy(fac)\n\n    \n\n    for i in range(2,R+1):\n\n        fac[i] = (fac[i-1]*i)%MOD\n\n        inv[i] = MOD-(MOD//i)*inv[MOD%i]%MOD\n\n        invfac[i] = (invfac[i-1]*inv[i])%MOD\n\n        \n\n    def coef(x,y):\n\n        num = (((fac[x+y]*invfac[y])%MOD)*invfac[x]%MOD)\n\n        return num\n\n\n\n    while M%2 == 0:\n\n        d[2] += 1\n\n        M //= 2\n\n    f = 3\n\n    while f ** 2 <= M:\n\n        if M % f == 0:\n\n            d[f] += 1\n\n            M //= f\n\n        else:\n\n            f += 2\n\n    if M != 1:\n\n        d[M] += 1\n\n    \n\n    l = list(d.values())\n\n    ans = 1\n\n    for num in l:\n\n        ans *= coef(num,N-1)\n\n        ans %= MOD\n\n        \n\n    print(ans)\n\n    \n\nif __name__ == \"__main__\":\n\n    main()", "generated_code": "import sys\n\ninput = sys.stdin.buffer.readline\n\n\n\ndef main():\n\n    N,M = list(map(int,input().split()))\n\n    MOD = 10**9+7\n\n    \n\n    def factorization(n):\n\n        arr = []\n\n        temp = n\n\n        for i in range(2, int(-(-n**0.5//1))+1):\n\n            if temp%i==0:\n\n                cnt=0\n\n                while temp%i==0:\n\n                    cnt+=1\n\n                    temp //= i\n\n                arr.append([i, cnt])\n\n\n\n        if temp!=1:\n\n            arr.append([temp, 1])\n\n\n\n        return arr\n\n        \n\n    cl = factorization(M)\n\n    \n\n    def combinations(x,y,N):\n\n        fac = [0]*(N+1)\n\n        fac[0],fac[1] = 1,1\n\n        \n\n        for i in range(2,N+1):\n\n            fac[i] = (fac[i-1]*i)%MOD\n\n            \n\n        return (fac[x+y]*pow(fac[x],MOD-2,MOD)*pow(fac[y],MOD-2,MOD))%MOD\n\n        \n\n    ans = 1\n\n    for pr,num in cl:\n\n        ans *= combinations(N-1,num,N+num)\n\n        ans %= MOD\n\n    \n\n    print(ans)\n\n    \n\nif __name__ == \"__main__\":\n\n    main()\n", "score": 1.0}
{"golden_code": "# 2019-11-12 22:21:08(JST)\n\nimport sys\n\n# import collections\n\n# import math\n\n# from string import ascii_lowercase, ascii_uppercase, digits\n\n# from bisect import bisect_left as bi_l, bisect_right as bi_r\n\nimport itertools\n\n# from functools import reduce\n\n# import operator as op\n\n# from scipy.misc import comb # float\n\n# import numpy as np \n\n\n\ndef main():\n\n    s = sys.stdin.readline().rstrip()\n\n    \n\n    all_words = []\n\n    for i in range(1, len(s) + 1):\n\n        for letters in itertools.product('ATCG', repeat=i):\n\n            word = ''.join(letters)\n\n            all_words.append(word)\n\n    \n\n    for i in range(len(all_words)-1, 0-1, -1):\n\n        if all_words[i] in s:\n\n            print((len(all_words[i])))\n\n            sys.exit()\n\n    print((0))\n\n\n\n\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n", "generated_code": "# 2019-11-12 22:21:08(JST)\n\nimport sys\n\n# import collections\n\n# import math\n\n# from string import ascii_lowercase, ascii_uppercase, digits\n\n# from bisect import bisect_left as bi_l, bisect_right as bi_r\n\n# import itertools\n\n# from functools import reduce\n\n# import operator as op\n\n# from scipy.misc import comb # float\n\n# import numpy as np \n\n\n\ndef main():\n\n    s = sys.stdin.readline().rstrip()\n\n    \n\n    permitted = 'ACGT'\n\n    continuous_count = []\n\n    count = 0\n\n\n\n    for i in range(len(s)):\n\n        char = s[i]\n\n        if char in permitted:\n\n            count += 1\n\n        else:\n\n            continuous_count.append(count)\n\n            count = 0\n\n        if i == len(s) - 1:\n\n            continuous_count.append(count)\n\n    \n\n    if not continuous_count:\n\n        print((len(s)))\n\n    else:\n\n        print((max(continuous_count)))\n\n\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n", "score": 1.0}
{"golden_code": "k = int(eval(input()))\n\nx = 1\n\n\n\nif k%7 != 0:\n\n    mod = 9*k\n\nelse:\n\n    mod = 9*k//7\n\n\n\nfor i in range(10**6):\n\n    x = x*10%mod\n\n    if x == 1:\n\n        print((i + 1))\n\n        exit()\n\n\n\nprint((-1))", "generated_code": "k = int(eval(input()))\n\na = 0\n\n\n\nfor i in range(k + 10):\n\n    a = (a*10 + 7)%k\n\n    if a == 0:\n\n        print((i + 1))\n\n        exit()\n\nprint((-1))", "score": 1.0}
{"golden_code": "S = int(input())\n\n\n\nif S >= 3600:\n\n    h=S//3600\n\n    m=S%3600//60\n\n    s=S%60\n\nelif 3600 > S >= 60:\n\n    h=0\n\n    m=S//60\n\n    s=S%60\n\nelse:\n\n    h=m=0\n\n    s=S\n\nprint(h, m, s, sep=\":\")\n", "generated_code": "s = int(input())\n\nh = s // 3600\n\nm = (s - h * 3600) // 60\n\ns = s -  h * 3600 - m * 60\n\nprint(h, m, s, sep=\":\")\n", "score": 1.0}
{"golden_code": "def c_remainder_minimization_2019(L, R):\n\n    ans = float('inf')\n\n    for i in range(L, min(R, L + 2019)):\n\n        for j in range(i + 1, min(R + 1, L + 2020)):\n\n            ans = min(ans, (i * j) % 2019)\n\n    return ans\n\n\n\nL, R = [int(i) for i in input().split()]\n\nprint((c_remainder_minimization_2019(L, R)))", "generated_code": "def c_remainder_minimization_2019(L, R):\n\n    ans = float('inf')\n\n    for i in range(L, min(R, L + 2019)):\n\n        for j in range(i + 1, min(R + 1, L + 2020)):\n\n            ans = min(ans, (i * j) % 2019)\n\n            if ans == 0:\n\n                return 0\n\n    return ans\n\n\n\nL, R = [int(i) for i in input().split()]\n\nprint((c_remainder_minimization_2019(L, R)))", "score": 1.0}
{"golden_code": "k,s=list(map(int,input().split()))\n\ncnt=0\n\nfor i in range(k+1):\n\n    for j in range(k+1):\n\n        if 0 <= s-i-j <= k:\n\n            cnt+=1\n\nprint(cnt)", "generated_code": "k,s=list(map(int,input().split()))\n\na=0\n\nfor i in range(0,k+1):\n\n    for j in range(0,k+1):\n\n        if 0<=s-i-j<=k:\n\n            a+=1\n\nprint(a)", "score": 1.0}
{"golden_code": "import numpy as np\n\nN_1=list(map(int, input().split()))\n\nN_2=list(map(int, input().split()))\n\nN_3=list(map(int, input().split()))\n\nN=int(eval(input()))\n\na=[int(eval(input())) for i in range(N)]\n\n\n\nn=np.array([N_1,N_2,N_3])\n\n\n\nfor a_n in a:\n\n    if a_n in n:\n\n        n[n==a_n]=0\n\n    else:\n\n        pass\n\ni=0\n\n    \n\nif np.all(n[0:,0]==0)==True:\n\n    i=+1\n\n    \n\nelif np.all(n[0:,1]==0)==True:\n\n    i+=1\n\n    \n\nelif np.all(n[0:,2]==0)==True:\n\n    i+=1\n\n    \n\nelif np.all(n[0,0:]==0)==True:\n\n    i+=1\n\n    \n\nelif np.all(n[1,0:]==0)==True:\n\n    i+=1\n\n\n\nelif np.all(n[2,0:]==0)==True:\n\n    i+=1\n\n\n\nelif n[0,0]==0 and n[1,1]==0  and n[2,2] ==0:\n\n    i+=1\n\n    \n\nelif n[0,2]==0 and n[1,1]==0 and n[2,0] ==0:\n\n    i+=1\n\n    \n\nif i>0:\n\n    print(\"Yes\")\n\nelse:\n\n    print(\"No\")", "generated_code": "a_1=list(map(int, input().split()))\n\na_2=list(map(int, input().split()))\n\na_3=list(map(int, input().split()))\n\n\n\nc=[a_1,a_2,a_3]\n\n\n\nN=int(eval(input()))\n\n\n\nb=[int(eval(input())) for _ in range(N)]\n\n\n\nfor i in range(3):\n\n    for j in range(3):\n\n        if c[i][j] in b:\n\n            c[i][j]=0\n\n            \n\n            \n\ni=0\n\nif c[0][0]==0 and c[0][1]==0 and c[0][2]==0:\n\n    i+=1\n\nif c[1][0]==0 and c[1][1]==0 and c[1][2]==0:\n\n    i+=1\n\nif c[2][0]==0 and c[2][1]==0 and c[2][2]==0:\n\n    i+=1\n\nif c[0][0]==0 and c[1][0]==0 and c[2][0]==0:\n\n    i+=1\n\nif c[0][1]==0 and c[1][1]==0 and c[2][1]==0:\n\n    i+=1\n\nif c[0][2]==0 and c[1][2]==0 and c[2][2]==0:\n\n    i+=1\n\nif c[0][0]==0 and c[1][1]==0 and c[2][2]==0:\n\n    i+=1\n\nif c[0][2]==0 and c[1][1]==0 and c[2][0]==0:\n\n    i+=1\n\n    \n\nif i>0:\n\n    print(\"Yes\")\n\nelse:\n\n  print(\"No\")", "score": 1.0}
{"golden_code": "def main():\n\n    from itertools import product\n\n\n\n    N = int(eval(input()))\n\n\n\n    g = []\n\n    for _ in range(N):\n\n        a = int(eval(input()))\n\n        t = []\n\n        for _ in range(a):\n\n            x, y = list(map(int, input().split()))\n\n            x -= 1\n\n            t.append((x, y))\n\n        g.append(t)\n\n\n\n    def is_ok(prd):\n\n        for j, bl in enumerate(prd):\n\n            if bl:\n\n                for x, y in g[j]:\n\n                    if prd[x] != y:\n\n                        return False\n\n        return True\n\n\n\n    ans = 0\n\n    for prd in product([0, 1], repeat=N):\n\n        *prd, = prd  # list化\n\n        if is_ok(prd):\n\n            ans = max(ans, prd.count(1))\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n\n\n\n# bit演算しようとしてはまった\n", "generated_code": "def main():\n\n    from itertools import product\n\n\n\n    N = int(eval(input()))\n\n\n\n    g = []\n\n    for _ in range(N):\n\n        a = int(eval(input()))\n\n        t = []\n\n        for _ in range(a):\n\n            x, y = list(map(int, input().split()))\n\n            t.append((x - 1, y))\n\n        g.append(t)\n\n\n\n    def is_ok(prd):\n\n        for j, bl in enumerate(prd):\n\n            if bl:\n\n                for x, y in g[j]:\n\n                    if prd[x] != y:\n\n                        return False\n\n        return True\n\n\n\n    ans = 0\n\n    for prd in product([0, 1], repeat=N):\n\n        if is_ok(prd):\n\n            ans = max(ans, prd.count(1))\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n\n\n\n# bit演算しようとしてはまった\n", "score": 1.0}
{"golden_code": "from bisect import *\n\nn = int(eval(input()))\n\na = list(map(int,input().split()))\n\nb = list(map(int,input().split()))\n\nc = list(map(int,input().split()))\n\n\n\na = sorted(a)\n\nc = sorted(c)\n\n\n\nrec = 0\n\nfor i in range(n):\n\n    temp = b[i]\n\n    l = bisect_left(a, temp)\n\n    r = bisect_right(c, temp)\n\n    rec += l * (n - r)\n\nprint(rec)", "generated_code": "from bisect import *\n\nn = int(eval(input()))\n\na = list(map(int,input().split()))\n\nb = list(map(int,input().split()))\n\nc = list(map(int,input().split()))\n\n\n\na.sort()\n\nc.sort()\n\nres = 0\n\nfor i in b:\n\n    temp_a = bisect_left(a, i)\n\n    temp_c = n - bisect_right(c, i)\n\n    res += temp_a*temp_c\n\nprint(res)", "score": 1.0}
{"golden_code": "import numpy as np\n\n\n\nN = int(eval(input()))\n\nA = np.array(input().split(),dtype=np.int32)\n\n\n\ndef ord(n):\n\n  cnt = 0\n\n  while not n&1:\n\n    n >>= 1\n\n    cnt += 1\n\n  return cnt\n\n\n\nnp_ord = np.frompyfunc(ord,1,1)\n\nanswer = np_ord(A).sum()\n\nprint(answer)", "generated_code": "import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nimport numpy as np\n\n\n\nN = int(readline())\n\nA = np.array(read().split(),np.int32)\n\n\n\nanswer = 0\n\nfor _ in range(32):\n\n    A = A[A%2 == 0]\n\n    answer += len(A)\n\n    A >>= 1\n\n\n\nprint(answer)", "score": 1.0}
{"golden_code": "N=int(eval(input()))\n\nd=list(map(int, input().split()))\n\n\n\nimport numpy as np\n\nd = np.array(d)\n\n\n\nprint(( ( (np.sum(d))**2 - np.sum(d**2) ) // 2 ))\n", "generated_code": "N=int(eval(input()))\n\nd=list(map(int, input().split()))\n\n\n\ncumsum = 0\n\nfor n in range(N):\n\n    cumsum += d[n]\n\nsub_cumsum = 0\n\nans = 0\n\nfor n in range(N):\n\n    sub_cumsum += d[n]\n\n    ans += d[n] * (cumsum-sub_cumsum)\n\nprint(ans)\n", "score": 1.0}
{"golden_code": "from copy import deepcopy\n\nfrom scipy.sparse.csgraph import floyd_warshall\n\n\n\nn,m=list(map(int,input().split()))\n\nl=[list(map(int,input().split())) for i in range(m)]\n\n\n\ncnt=0\n\nfor i in range(m):\n\n  ll=deepcopy(l)\n\n  del ll[i]\n\n\n\n  d=[[float('inf')]*n for i in range(n)]\n\n  for i in range(n):\n\n    d[i][i]=0\n\n\n\n  for a,b in ll:\n\n    a-=1\n\n    b-=1\n\n    d[a][b]=1\n\n    d[b][a]=1\n\n\n\n  s=floyd_warshall(d)\n\n  for i in s:\n\n    if float('inf') in i:\n\n      cnt+=1\n\n      break\n\n\n\nprint(cnt)", "generated_code": "from collections import deque\n\nfrom copy import deepcopy\n\n\n\nn,m=list(map(int,input().split()))\n\nl=[list(map(int,input().split())) for i in range(m)]\n\n\n\ndef BFS(m):\n\n  t_l=deepcopy(l)\n\n  del t_l[m]\n\n\n\n  tree=[[] for j in range(n)]\n\n  for a,b in t_l:\n\n    a-=1\n\n    b-=1\n\n    tree[a].append(b)\n\n    tree[b].append(a)\n\n\n\n  dist=[-1 for i in range(n)]\n\n  dist[0]=0\n\n\n\n  que=deque()\n\n  que.append(0)\n\n\n\n  while que:\n\n    x=que.popleft()\n\n    for i in tree[x]:\n\n      if dist[i]==-1:\n\n        que.append(i)\n\n        dist[i]=dist[x]+1\n\n\n\n  return dist\n\n\n\nans=0\n\nfor i in range(m):\n\n  d=BFS(i)\n\n  if -1 in d:\n\n    ans+=1\n\n\n\nprint(ans)", "score": 1.0}
{"golden_code": "import itertools\n\nimport numpy as np\n\n\n\nN = int(eval(input()))\n\nstl = []\n\nfor i in range(N):\n\n    a = int(eval(input()))\n\n    for _ in range(a):\n\n        x, y = list(map(int, input().split()))\n\n        stl.append((i, x-1, y))\n\ndl = np.array(list(itertools.product([0, 1], repeat=N)), np.bool)\n\nfor i, x, y in stl:\n\n    bl = (dl[:, i] == False) | (dl[:, x] == bool(y))\n\n    dl = dl[bl]\n\nres = dl.sum(axis=1).max()\n\nprint(res)\n", "generated_code": "import sys\n\nimport itertools\n\nimport collections\n\n\n\n\n\ndef solve():\n\n    readline = sys.stdin.buffer.readline\n\n    mod = 10 ** 9 + 7\n\n    n = int(readline())\n\n    xy = []\n\n    for i in range(n):\n\n        a = int(readline())\n\n        for j in range(a):\n\n            x, y = list(map(int, readline().split()))\n\n            xy.append([i, x-1, y])\n\n    ls = collections.deque([v for v in itertools.product([True, False], repeat=n)])\n\n    for i, x, y in xy:\n\n        for j in range(len(ls)):\n\n            lsv = ls.pop()\n\n            if not lsv[i] or lsv[x] == bool(y):\n\n                ls.appendleft(lsv)\n\n    t = 0\n\n    for i in range(len(ls)):\n\n        t = max(t, ls[i].count(True))\n\n    print(t)\n\n\n\n\n\nif __name__ == '__main__':\n\n    solve()\n", "score": 1.0}
{"golden_code": "N = int(eval(input()))\n\ncount = [[0 for _ in range(9)] for _ in range(9)]\n\nfor i in range(1, N + 1):\n\n    if str(i)[0] != \"0\" and str(i)[-1] != \"0\":\n\n        count[int(str(i)[0]) - 1][int(str(i)[-1]) - 1] += 1\n\nans = 0\n\nfor i in range(0, 9):\n\n    for k in range(0, 9):\n\n        ans += count[i][k] * count[k][i]\n\nprint(ans)", "generated_code": "N = int(eval(input()))\n\nnums = [0 for i in range(100)]\n\nfor i in range(1, N + 1):\n\n    i = str(i)\n\n    nums[int(i[0] + i[-1])] += 1\n\nans = 0\n\nfor i in range(1, 10):\n\n    for j in range(i, 10):\n\n        i = str(i)\n\n        j = str(j)\n\n        if i != j:\n\n            ans += nums[int(i + j)] * nums[int(j + i)] * 2\n\n        else:\n\n            n = nums[int(i + j)]\n\n            ans += n * (n - 1)\n\n            ans += n\n\nprint(ans)", "score": 1.0}
{"golden_code": "n, m = list(map(int, input().split()))\n\ngate = []\n\nl, r = list(map(int, input().split()))\n\nfor i in range(1, m):\n\n    m, s = list(map(int, input().split()))\n\n    if l < m:\n\n        l = m\n\n    if s < r:\n\n        r = s\n\nprint((len([i for i in range(l, r + 1)])))", "generated_code": "n, m = list(map(int, input().split()))\n\nl, r = [0] * m, [0] * m\n\nfor i in range(m):\n\n    l[i], r[i] = list(map(int, input().split()))\n\nprint((max(min(r) - max(l) + 1, 0)))", "score": 1.0}
{"golden_code": "N, D = list(map(int, input().split()))\n\npoint = []\n\nfor i in range(N):\n\n    point.append(list(map(int, input().split())))\n\n\n\nct = 0\n\nD2 = D * D\n\nfor i in point:\n\n    if (i[0]**2 + i[1]**2) <= D2:\n\n        ct += 1\n\n\n\nprint(ct)", "generated_code": "N, D = list(map(int, input().split()))\n\n\n\nct = 0\n\nD2 = D * D\n\nfor i in range(N):\n\n    X, Y = list(map(int, input().split()))\n\n    if (X**2 + Y**2) <= D2:\n\n        ct += 1\n\n\n\nprint(ct)", "score": 1.0}
{"golden_code": "from math import factorial as f\n\nn = int(eval(input()))\n\nprint((f(n) % (10 ** 9 + 7)))", "generated_code": "n = int(eval(input()))\n\np = 1\n\nfor i in range(n):\n\n    p = (p * (i+1)) % (10 ** 9 + 7)\n\nprint(p)", "score": 1.0}
{"golden_code": "import math\n\nN = int(eval(input()))\n\nans = 10**12\n\nfor i in range(1,10**6+1):\n\n  j = math.ceil(N/(i+1))\n\n  if (1+i)*j == N:\n\n    ans = min(i+j-1,ans)\n\n  if i == 10**6 and ans == 10**12:\n\n    ans = N-1\n\n    break\n\nprint(ans)", "generated_code": "N = int(eval(input()))\n\nans = 10**12\n\nfor i in range(1,10**6+1):\n\n  j = N//i\n\n  if i*j == N:\n\n    ans = min(i+j-2,ans)\n\n  if i == 10**6 and ans == 10**12:\n\n    ans = N-1\n\n    break\n\nprint(ans)", "score": 1.0}
{"golden_code": "n,t=int(input()),list(map(int,input().split()));T=sum(t)\n\nprint(*[T-t[i-1]+j for i,j in [list(map(int,input().split())) for _ in range(int(input()))]],sep='\\n')\n", "generated_code": "input();t=list(map(int,input().split()));T=sum(t)\n\nprint(*[T-t[i-1]+j for i,j in [list(map(int,input().split())) for _ in range(int(input()))]],sep='\\n')\n", "score": 1.0}
{"golden_code": "import sys\n\nsys.setrecursionlimit(100000)\n\n\n\ndef intinput(): return list(map(int,sys.stdin.readline().split()))\n\n\n\nfib={0:0,1:1,2:1}\n\nfor i in range(3,100003):\n\n    fib[i]=fib[i-1]+fib[i-2]\n\n  #  fib.append(fib[i-1]+fib[i-2])\n\n\n\nn,m=intinput()\n\nmod=10**9+7\n\na=[int(sys.stdin.readline()) for _ in range(m)]\n\nif m!=0:\n\n    l=[a[0]]\n\n    for i in range(len(a)-1):\n\n        l.append(a[i+1]-a[i]-1)\n\n    l.append(n-a[-1])\n\n    k=1\n\n    for i in l:\n\n        k=fib[i]*k%mod\n\n    print((k%mod))\n\nelse:\n\n    print((fib[n+1]%mod))", "generated_code": "import sys\n\nsys.setrecursionlimit(100000)\n\n\n\ndef intinput(): return list(map(int,sys.stdin.readline().split()))\n\n\n\n\n\nn, m = intinput()\n\na = {int(sys.stdin.readline()) for _ in range(m)}\n\nmemo = [0 for x in range(n + 4)]\n\nmemo[0] = 1\n\nmod = 10 ** 9 + 7\n\nfor i in range(n):\n\n    if i + 1 not in a:\n\n        memo[i + 1] = (memo[i + 1] + memo[i]) % mod\n\n    if i + 2 not in a:\n\n        memo[i + 2] = (memo[i + 2] + memo[i]) % mod\n\nprint((memo[n]))", "score": 1.0}
{"golden_code": "import numpy as np\n\nn=int(eval(input()))\n\na=np.array(list(map(int,input().split())))\n\nb=0\n\nwhile np.all(a%2==0):\n\n\ta=a/2\n\n\tb+=1\n\n\t\n\nprint(b)", "generated_code": "a = int(eval(input(\"\")))\n\nb = input(\"\").split(\" \")\n\nc = 0\n\nd = []\n\n\n\nfor i in range(a):\n\n\tc = 0\n\n\twhile (int(b[i]) % 2 == 0):\n\n\t\tb[i] = int(b[i]) / 2\n\n\t\tc += 1\n\n\td.append(c)\n\nprint((min(d)))", "score": 1.0}
{"golden_code": "a,b,c,x,y = list(map(int,input().split()))\n\nprice = 10**10\n\nfor k in range(10**5+1):\n\n    re = 2*c*k + max(0,x-k)*a + max(0,y-k)*b\n\n    price = min(re,price)\n\nprint(price)", "generated_code": "a,b,c,x,y = list(map(int,input().split()))\n\na1 = a*x + b*y\n\na2 = max(x,y) * 2*c\n\nif y >= x:\n\n    a3 = 2*c*x + (y-x)*b\n\nelse:\n\n    a3 = 2*c*y + (x-y)*a\n\nprint((min(a1,a2,a3)))", "score": 1.0}
{"golden_code": "import numpy as np\n\nN = int(eval(input()))\n\n\n\nabc = np.array([list(map(int, input().split())) for i in range(N)])\n\n\n\ndp = [[0]*3 for i in range(N+1)]\n\n\n\nfor i in range(1, N+1):\n\n    dp[i][0] = max(dp[i - 1][1] + abc[i - 1][1], dp[i - 1][2] + abc[i - 1][2])\n\n    dp[i][1] = max(dp[i - 1][0] + abc[i - 1][0], dp[i - 1][2] + abc[i - 1][2])\n\n    dp[i][2] = max(dp[i - 1][1] + abc[i - 1][1], dp[i - 1][0] + abc[i - 1][0])\n\n\n\nprint((max(dp[-1])))\n", "generated_code": "N = int(eval(input()))\n\n\n\nA = [0] * (N + 1)\n\nB = [0] * (N + 1)\n\nC = [0] * (N + 1)\n\n\n\nfor i in range(1, N + 1):\n\n    A[i], B[i], C[i] = list(map(int, input().split()))\n\n\n\ndp = [[0] * 3 for _ in range(N + 1)]\n\nfor i in range(1, N + 1):\n\n    dp[i][0] = A[i] + max(dp[i-1][1], dp[i-1][2])\n\n    dp[i][1] = B[i] + max(dp[i-1][2], dp[i-1][0])\n\n    dp[i][2] = C[i] + max(dp[i-1][0], dp[i-1][1])\n\n\n\nprint((max(dp[N])))", "score": 1.0}
{"golden_code": "S = list(eval(input()))\n\nnum_one = S.count(\"1\")\n\nnum_zero = S.count(\"0\")\n\nans = min(num_one, num_zero) *2\n\nprint(ans)\n", "generated_code": "S = eval(input())\n\n\n\nans = min(S.count(\"0\"), S.count(\"1\")) * 2\n\nprint(ans)\n", "score": 1.0}
{"golden_code": "X = int(eval(input()))\n\nfor A in range(-200, 200):\n\n    for B in range(-200, 200):\n\n        if A**5 - B**5 == X:\n\n            print((A, B))\n\n            break\n\n    else:\n\n        continue\n\n    break", "generated_code": "X = int(eval(input()))\n\nfor A in range(-150, 150):\n\n    for B in range(-150, 150):\n\n        if A**5 - B**5 == X:\n\n            print((A, B))\n\n            break\n\n    else:\n\n        continue\n\n    break", "score": 1.0}
{"golden_code": "from collections import Counter\n\n\n\nimport numpy as np\n\n\n\n\n\ndef part(pts, a, ans):\n\n    b = np.dot(pts, [np.sin(a), np.cos(a)])\n\n    c = np.argmax(b, axis=0)\n\n    for i, v in list(Counter(c).items()):\n\n        ans[i] += v\n\n\n\n\n\ndef solve(n, pts):\n\n    ans = [0] * n\n\n    part(pts, np.linspace(0, np.pi, 100000, endpoint=False), ans)\n\n    part(pts, np.linspace(np.pi, 2 * np.pi, 100000, endpoint=False), ans)\n\n    return [v / 200000 for v in ans]\n\n\n\n\n\nn = int(eval(input()))\n\npts = np.array([list(map(int, input().split())) for _ in range(n)])\n\nprint(('\\n'.join(map(str, solve(n, pts)))))\n", "generated_code": "from collections import Counter\n\nimport numpy as np\n\n\n\n\n\ndef part(pts, s, t, num, ans):\n\n    a = np.linspace(s, t, num, endpoint=False)\n\n    for i, v in list(Counter(np.argmax(np.dot(pts, [np.sin(a), np.cos(a)]), axis=0)).items()):\n\n        ans[i] += v\n\n\n\n\n\ndef solve(n, pts):\n\n    ans = np.zeros(n)\n\n    part(pts, 0, np.pi, 1e5, ans)\n\n    part(pts, np.pi, 2 * np.pi, 1e5, ans)\n\n    return ans / 2e5\n\n\n\n\n\nn = int(eval(input()))\n\nprint(('\\n'.join(map(str, solve(n, [list(map(int, input().split())) for _ in range(n)])))))\n", "score": 1.0}
{"golden_code": "import sys\n\nsys.setrecursionlimit(10**6)\n\nif sys.platform in (['ios','darwin','win32']):\n\n\tsys.stdin=open('Untitled.txt')\n\ninput = sys.stdin.readline\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return [int(s) for s in input().split()]\n\n\n\ndef main():\n\n\tS = input().rstrip()\n\n\tbcnt = 0\n\n\tA = []\n\n\tfor i in range(len(S)):\n\n\t\tif S[i] == 'B': bcnt += 1\n\n\t\tif S[i] == 'W': A.append(bcnt)\n\n\t\n\n\tprint((sum(A)))\n\n\n\nif __name__ == '__main__':\n\n\tmain()", "generated_code": "import sys\n\nsys.setrecursionlimit(10**6)\n\nif sys.platform in (['ios','darwin','win32']):\n\n\tsys.stdin=open('Untitled.txt')\n\ninput = sys.stdin.readline\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return [int(s) for s in input().split()]\n\n\n\ndef main():\n\n\tS = input().rstrip()\n\n\tbcnt = 0\n\n\tans = 0\n\n\tfor i in range(len(S)):\n\n\t\tif S[i] == 'B': bcnt += 1\n\n\t\tif S[i] == 'W': ans += bcnt\n\n\t\n\n\tprint(ans)\n\n\n\nif __name__ == '__main__':\n\n\tmain()", "score": 1.0}
{"golden_code": "import math\n\ninput_num = int(eval(input()))\n\nnum_sqrt = int(math.sqrt(input_num))\n\n\n\nminimam = input_num\n\nfor i in range(num_sqrt+1,0,-1):\n\n    q, mod = divmod(input_num, i)\n\n    distance = q + i -2\n\n    if mod == 0 and minimam > distance:\n\n        minimam = distance\n\nprint(minimam)", "generated_code": "import math\n\ndef main1():\n\n    input_num = int(eval(input()))\n\n    num_sqrt = int(math.sqrt(input_num))\n\n\n\n    minimam = input_num\n\n    for i in range(num_sqrt+1,0,-1):\n\n        q, mod = divmod(input_num, i)\n\n        if mod == 0:\n\n            distance = q + i -2\n\n            if minimam > distance:\n\n                minimam = distance\n\n    print(minimam)\n\nmain1()", "score": 1.0}
{"golden_code": "x = int(eval(input()))\n\nprint((0 if x==1 else 1))", "generated_code": "s = eval(input())\n\nif s == '0':\n\n  print((1))\n\nelse:\n\n  print((0))", "score": 1.0}
{"golden_code": "a,b,c=list(map(int, input().split()))\n\nd=0\n\nwhile d<10**5:\n\n    if a%2==1 or b%2==1 or c%2==1:break\n\n    a,b,c=b/2+c/2,a/2+c/2,a/2+b/2\n\n    d+=1\n\nelse:d=-1\n\nprint(d)", "generated_code": "a,b,c=list(map(int, input().split()))\n\nans=0\n\nwhile a%2==0 and b%2==0 and c%2==0 and ans<10000:\n\n    a,b,c=b//2+c//2,a//2+c//2,a//2+b//2\n\n    ans+=1\n\nif ans==10000:ans=-1\n\nprint(ans)", "score": 1.0}
{"golden_code": "\n\nX = int(eval(input()))\n\nfor a in range(-200, 200):\n\n    find = False\n\n    for b in range(-200, 200):\n\n        x = a**5-b**5\n\n        if x == X:\n\n            find = True\n\n            print((a, b))\n\n            break\n\n    if find:\n\n        break\n", "generated_code": "\n\nX = int(eval(input()))\n\nfor a in range(-120, 120):\n\n    find = False\n\n    for b in range(-120, 120):\n\n        x = a**5-b**5\n\n        if x == X:\n\n            find = True\n\n            print((a, b))\n\n            break\n\n    if find:\n\n        break\n", "score": 1.0}
{"golden_code": "N, M = list(map(int, input().split()))\n\nLR = [list(map(int, input().split())) for _ in range(M)]\n\n\n\nleft = 1\n\nright = N\n\n\n\nfor l, r in LR:\n\n    if left < l:\n\n        left = l\n\n    if right > r:\n\n        right = r\n\n\n\nans = right - left\n\n\n\nprint((ans + 1 if ans >= 0 else 0))\n", "generated_code": "N, M = list(map(int, input().split()))\n\n\n\nleft = 1\n\nright = N\n\n\n\nfor _ in range(M):\n\n    l, r = list(map(int, input().split()))\n\n\n\n    if left < l:\n\n        left = l\n\n    if right > r:\n\n        right = r\n\n\n\nans = right - left\n\n\n\nprint((ans + 1 if ans >= 0 else 0))\n", "score": 1.0}
{"golden_code": "import numpy as np\n\nk,n = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nb = np.zeros(n)\n\nfor i in range(0,n-1):\n\n  b[i] = a[i+1] -a[i]\n\n  \n\nb[n-1] = k - a[n-1] + a[0]\n\nans = k - max(b)\n\nprint((int(ans)))", "generated_code": "k,n = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nb = [0 for i in range(n)]\n\nfor i in range(0,n-1):\n\n  b[i] = a[i+1] -a[i]\n\n\n\nb[n-1] = k - a[n-1] + a[0]\n\nans = k - max(b)\n\nprint((int(ans)))", "score": 1.0}
{"golden_code": "import sys\n\ndef input(): return sys.stdin.readline().rstrip()\n\ndef main():\n\n    x=int(eval(input()))\n\n    for i in range(-300,300):\n\n        for j in range(-300,300):\n\n            if i**5-j**5==x:\n\n                print((i,j))\n\n                sys.exit()\n\n\n\nif __name__=='__main__':\n\n    main()", "generated_code": "import sys\n\ndef input(): return sys.stdin.readline().rstrip()\n\ndef main():\n\n    x=int(eval(input()))\n\n    for a in range(-118,120):\n\n        for diff in range(238):\n\n            if a**5-(a-diff)**5>10**9:\n\n                break\n\n            if a**5-(a-diff)**5==x:\n\n                print((a,a-diff))\n\n                sys.exit()\n\n\n\nif __name__=='__main__':\n\n    main()", "score": 1.0}
{"golden_code": "N, K = list(map(int, input().split()))\n\nA = list(map(int, input().split()))\n\nF = list(map(int, input().split()))\n\n\n\nA.sort()\n\nF.sort(reverse=True)\n\n\n\n#積をx以下にするために必要な修行回数\n\ndef f(x):\n\n    r = 0\n\n    for i in range(N):\n\n        a, f = A[i], F[i]\n\n        m = a * f\n\n        if m > x:\n\n            r += (m - x + f - 1) // f\n\n    return r\n\n\n\nunder = -1\n\nr = 10**18\n\nwhile r - under > 1:\n\n    m = (under + r) // 2\n\n    if f(m) > K: under = m\n\n    else: r = m\n\nprint(r)", "generated_code": "# でつoO(YOU PLAY WITH THE CARDS YOU'RE DEALT..)\n\nimport sys\n\ndef main(N, K, A, F):\n\n    A.sort()\n\n    F.sort(reverse=True)\n\n\n\n    def f(x):\n\n        sy = 0\n\n        for a, f in zip(A, F):\n\n            m = a * f\n\n            if m > x:\n\n                sy += (m - x + f - 1) // f\n\n        return sy\n\n\n\n    under = -1\n\n    hi = 10**12 + 1\n\n    while hi - under > 1:\n\n        m = (hi + under) // 2\n\n        if f(m) <= K: hi = m\n\n        else: under = m\n\n    print(hi)\n\n\n\nif __name__ == '__main__':\n\n    input = sys.stdin.readline\n\n    N, K = list(map(int, input().split()))\n\n    *A, = list(map(int, input().split()))\n\n    *F, = list(map(int, input().split()))\n\n    main(N, K, A, F)\n", "score": 1.0}
{"golden_code": "import sys\n\n#import numpy as np\n\n\n\ns2nn = lambda s: [int(c) for c in s.split(' ')]\n\nss2nn = lambda ss: [int(s) for s in ss]\n\nss2nnn = lambda ss: [s2nn(s) for s in ss]\n\ni2s = lambda: sys.stdin.readline().rstrip()\n\ni2n = lambda: int(i2s())\n\ni2nn = lambda: s2nn(i2s())\n\nii2ss = lambda n: [sys.stdin.readline().rstrip() for _ in range(n)]\n\nii2nn = lambda n: ss2nn(ii2ss(n))\n\nii2nnn = lambda n: ss2nnn(ii2ss(n))\n\n\n\nN = 10000\n\ndef tokey(i, j, k):\n\n    return i*N*N + j*N + k\n\ndef dekey(n):\n\n    i = int(n / N / N)\n\n    j = int(n / N) % N\n\n    k = n % N\n\n    return i, j, k\n\n\n\ndef main():\n\n    X, Y, Z, K = i2nn()\n\n    A = i2nn()\n\n    B = i2nn()\n\n    C = i2nn()\n\n    A.sort()\n\n    A.reverse()\n\n    B.sort()\n\n    B.reverse()\n\n    C.sort()\n\n    C.reverse()\n\n    Q = [(A[0] + B[0] + C[0], 0, 0, 0)]\n\n    loop = 0\n\n    stored = set()\n\n    def next(i, j, k):\n\n        if i >= X or j >= Y or k >= Z:\n\n            return\n\n        key = tokey(i, j, k)\n\n        if key not in stored:\n\n            stored.add(key)\n\n            n = A[i] + B[j] + C[k]\n\n            Q.append((n, i, j, k))\n\n    while True:\n\n        v = max(Q, key=lambda v: v[0])\n\n        Q.remove(v)\n\n        print((v[0]))\n\n        loop += 1\n\n        if loop >= K:\n\n            break\n\n        next(v[1]+1, v[2], v[3])\n\n        next(v[1], v[2]+1, v[3])\n\n        next(v[1], v[2], v[3]+1)\n\n\n\nmain()\n", "generated_code": "import sys\n\nfrom collections import deque  # 双方向キュー\n\nfrom collections import defaultdict  # 初期化済み辞書\n\nfrom heapq import heapify, heappush, heappop, heappushpop  # プライオリティキュー\n\nfrom bisect import bisect_left, bisect_right  # 二分探索\n\n#import numpy as np  # 1.8.2\n\n#import scipy  # 0.13.3\n\n#sys.setrecursionlimit(int(1e+6))\n\ns2nn = lambda s: [int(c) for c in s.split(' ')]\n\nss2nn = lambda ss: [int(s) for s in ss]\n\nss2nnn = lambda ss: [s2nn(s) for s in ss]\n\ni2s = lambda: sys.stdin.readline().rstrip()\n\ni2n = lambda: int(i2s())\n\ni2nn = lambda: s2nn(i2s())\n\nii2ss = lambda n: [sys.stdin.readline().rstrip() for _ in range(n)]\n\nii2sss = lambda n: [list(sys.stdin.readline().rstrip()) for _ in range(n)]\n\nii2nn = lambda n: ss2nn(ii2ss(n))\n\nii2nnn = lambda n: ss2nnn(ii2ss(n))\n\nMOD = int(1e+9) + 7\n\n\n\ndef main():\n\n    X, Y, Z, K = i2nn()\n\n    A = i2nn()\n\n    B = i2nn()\n\n    C = i2nn()\n\n    A.sort()\n\n    A.reverse()\n\n    B.sort()\n\n    B.reverse()\n\n    C.sort()\n\n    C.reverse()\n\n    s = set()\n\n    hq = []\n\n    n = 0\n\n    heappush(hq, ((A[0] + B[0] + C[0]) * -1, (0, 0, 0)))\n\n    while n < K:\n\n        t, abc = heappop(hq)\n\n        if abc in s:\n\n            continue\n\n        s.add(abc)\n\n        (a, b, c) = abc\n\n        if a+1 < X:\n\n            heappush(hq, ((A[a+1] + B[b] + C[c]) * -1, (a+1, b, c)))\n\n        if b+1 < Y:\n\n            heappush(hq, ((A[a] + B[b+1] + C[c]) * -1, (a, b+1, c)))\n\n        if c+1 < Z:\n\n            heappush(hq, ((A[a] + B[b] + C[c+1]) * -1, (a, b, c+1)))\n\n        print((-t))\n\n        n += 1\n\n\n\nmain()\n", "score": 1.0}
{"golden_code": "from math import factorial as fac\n\n\n\nS = int(eval(input()))\n\nans = 0\n\n\n\nif S == 1 or S == 2:\n\n  print((0))\n\nelif S == 3:\n\n  print((1))\n\nelse:\n\n  for k in range(1,S):\n\n    if S-2*k-1 >= 0 and S-3*k >= 0:\n\n      ans += fac(S-2*k-1)//(fac(k-1)*fac(S-3*k))\n\n  print((ans%1000000007))", "generated_code": "S = int(eval(input()))\n\n\n\nif S == 1 or S ==2:\n\n  print((0))\n\nelif S == 3 or S == 4 or S == 5:\n\n  print((1))\n\nelse:\n\n  #初期化\n\n  dp = [0]*S\n\n  dp[2] = 1\n\n  dp[3] = 1\n\n  dp[4] = 1\n\n  dp_S = 0\n\n  #dp\n\n  for i in range(5,S):\n\n    dp_S += dp[i-3] \n\n    dp[i] = 1+dp_S\n\n\n\n  print((dp[S-1]%1000000007))", "score": 1.0}
{"golden_code": "import numpy as np\n\nN, D = list(map(int, input().split()))\n\nprint((int(np.ceil(N/(2*D+1)))))", "generated_code": "N, D = list(map(int, input().split()))\n\nimport math\n\nprint((math.ceil(N/(2*D+1))))", "score": 1.0}
{"golden_code": "def main():\n\n\n\n    while True:\n\n        n, x = tuple(map(int, input().split()))\n\n        pattern = 0\n\n\n\n        if n == x == 0:\n\n            break\n\n        else:\n\n            for a in range(1, n+1):\n\n                for b in range(1, a):\n\n                    for c in range(1, b):\n\n                        pattern += 1 if a + b + c == x and a > b > c else 0\n\n            print(pattern)\n\n                            \n\n\n\nif __name__ == '__main__':\n\n    main()\n", "generated_code": "def divide_two(c, z):\n\n    min_b = z // 2 + 1\n\n    max_b = min(c-1, z-1)\n\n    return max(max_b-min_b+1, 0)\n\n    \n\n\n\nnum_set = []\n\ncnt = 0\n\nwhile True:\n\n    n, x = list(map(int, input().split()))\n\n    if (n, x) == (0, 0):\n\n        break\n\n    else:\n\n        num_set.append((n, x))\n\n        cnt += 1\n\n\n\nfor i in range(cnt):\n\n    num_count = 0\n\n    (n, x) = num_set[i]\n\n    for c in range(x//3, n+1):\n\n        num_count += divide_two(c, x-c)\n\n    print(num_count)\n", "score": 1.0}
{"golden_code": "import math\n\nN, M = list(map(int, input().split()))\n\n\n\n\n\ndef factorization(n):\n\n    arr = []\n\n    temp = n\n\n    for i in range(2, int(-(-n**0.5//1))+1):\n\n        if temp % i == 0:\n\n            cnt = 0\n\n            while temp % i == 0:\n\n                cnt += 1\n\n                temp //= i\n\n            arr.append([i, cnt])\n\n    if temp != 1:\n\n        arr.append([temp, 1])\n\n\n\n    if arr == [] and n != 1:\n\n        arr.append([n, 1])\n\n\n\n    return arr\n\n\n\n\n\nmod = 10**9 + 7\n\n\n\n\n\ndef cmb(n, r, mod):\n\n    if (r < 0 or r > n):\n\n        return 0\n\n    r = min(r, n-r)\n\n    return g1[n] * g2[r] * g2[n-r] % mod\n\n\n\n\n\ng1 = [1, 1]\n\ng2 = [1, 1]\n\ninverse = [0, 1]\n\nfor i in range(2, 2*10**5 + 1):\n\n    g1.append((g1[-1] * i) % mod)\n\n    inverse.append((-inverse[mod % i] * (mod//i)) % mod)\n\n    g2.append((g2[-1] * inverse[-1]) % mod)\n\n\n\n\n\nprimes = factorization(M)\n\n# 何箇所に分けるか（cnt以下）,その中でどう分けるか（しきりをどこにおくか（振り分けられないものが出ると選べれないのとおなじになるので、cnt - 選んだ数））\n\n\n\nans = 1\n\n\n\nfor p, cnt in primes:\n\n    tmp = cmb(N+cnt-1, N-1, mod)\n\n    ans *= tmp\n\n    ans %= mod\n\n\n\nprint(ans)\n", "generated_code": "def main():\n\n    N, M = list(map(int, input().split()))\n\n\n\n    def factorization(n):\n\n        arr = []\n\n        temp = n\n\n        for i in range(2, int(-(-n**0.5//1))+1):\n\n            if temp % i == 0:\n\n                cnt = 0\n\n                while temp % i == 0:\n\n                    cnt += 1\n\n                    temp //= i\n\n                arr.append([i, cnt])\n\n        if temp != 1:\n\n            arr.append([temp, 1])\n\n\n\n        if arr == [] and n != 1:\n\n            arr.append([n, 1])\n\n\n\n        return arr\n\n\n\n    mod = 10**9 + 7\n\n\n\n    def cmb(n, r, mod):\n\n        if (r < 0 or r > n):\n\n            return 0\n\n        r = min(r, n-r)\n\n        return g1[n] * g2[r] * g2[n-r] % mod\n\n\n\n    g1 = [1, 1]\n\n    g2 = [1, 1]\n\n    inverse = [0, 1]\n\n    for i in range(2, N+100 + 1):\n\n        g1.append((g1[-1] * i) % mod)\n\n        inverse.append((-inverse[mod % i] * (mod//i)) % mod)\n\n        g2.append((g2[-1] * inverse[-1]) % mod)\n\n\n\n    primes = factorization(M)\n\n    # 何箇所に分けるか（cnt以下）,その中でどう分けるか（しきりをどこにおくか（振り分けられないものが出ると選べれないのとおなじになるので、cnt - 選んだ数））\n\n\n\n    ans = 1\n\n\n\n    for p, cnt in primes:\n\n        tmp = cmb(N+cnt-1, N-1, mod)\n\n        ans *= tmp\n\n        ans %= mod\n\n\n\n    print(ans)\n\n\n\n\n\nmain()\n", "score": 1.0}
{"golden_code": "N = int(eval(input()))\n\n\n\ncount = 0\n\nfor i in range(1, N + 1):\n\n    num_dig = 0\n\n    ii = i\n\n    while ii > 0:\n\n        ii = int(ii / 10)\n\n        num_dig += 1\n\n    if num_dig % 2 != 0:\n\n        count += 1\n\n\n\nprint(count)", "generated_code": "N = int(eval(input()))\n\n\n\ncount = 0\n\nfor i in range(1, N + 1):\n\n    if len(str(i)) % 2 != 0:\n\n        count += 1\n\nprint(count)", "score": 1.0}
{"golden_code": "import math\n\nN = int(eval(input()))\n\nans = math.factorial(N) % (10 ** 9 + 7)\n\nprint(ans)", "generated_code": "n = int(eval(input()))\n\nfrom functools import reduce\n\nprint((reduce(lambda x,y:x*y%1000000007,list(range(1,n+1)))))", "score": 1.0}
{"golden_code": "n = int(eval(input()))\n\nv = list(map(int, input().split()))\n\nc = list(map(int, input().split()))\n\nresult = 0\n\nfor i in range(n):\n\n  if v[i] > c[i]:\n\n    result += v[i] - c[i]\n\nprint(result)", "generated_code": "N = int(eval(input()))\n\nV = list(map(int, input().split()))\n\nC = list(map(int, input().split()))\n\nprint((sum([V[i] - C[i] for i in range(N) if V[i] > C[i]])))\n", "score": 1.0}
{"golden_code": "def getN():\n\n    return int(eval(input()))\n\ndef getNM():\n\n    return list(map(int, input().split()))\n\ndef getList():\n\n    return list(map(int, input().split()))\n\ndef getArray(intn):\n\n    return [int(eval(input())) for i in range(intn)]\n\ndef input():\n\n    return sys.stdin.readline().rstrip()\n\ndef rand_N(ran1, ran2):\n\n    return random.randint(ran1, ran2)\n\ndef rand_List(ran1, ran2, rantime):\n\n    return [random.randint(ran1, ran2) for i in range(rantime)]\n\ndef rand_ints_nodup(ran1, ran2, rantime):\n\n  ns = []\n\n  while len(ns) < rantime:\n\n    n = random.randint(ran1, ran2)\n\n    if not n in ns:\n\n      ns.append(n)\n\n  return sorted(ns)\n\n\n\ndef rand_query(ran1, ran2, rantime):\n\n  r_query = []\n\n  while len(r_query) < rantime:\n\n    n_q = rand_ints_nodup(ran1, ran2, 2)\n\n    if not n_q in r_query:\n\n      r_query.append(n_q)\n\n  return sorted(r_query)\n\n\n\nfrom collections import defaultdict, deque, Counter\n\nfrom sys import exit\n\nfrom decimal import *\n\nfrom heapq import heapify, heappop, heappush\n\nimport math\n\nimport random\n\nimport string\n\nfrom copy import deepcopy\n\nfrom itertools import combinations, permutations, product\n\nfrom operator import mul, itemgetter\n\nfrom functools import reduce\n\nfrom bisect import bisect_left, bisect_right\n\n\n\nimport sys\n\nsys.setrecursionlimit(1000000000)\n\nmod = 10 ** 9 + 7\n\n\n\n#############\n\n# Main Code #\n\n#############\n\n\n\nS = getN()\n\n\n\n# 逆元事前処理ver\n\n# nが小さい場合に\n\nlim = 10 ** 5 + 1\n\nfact = [1, 1]\n\nfactinv = [1, 1]\n\ninv = [0, 1]\n\n\n\nfor i in range(2, lim + 1):\n\n    fact.append((fact[-1] * i) % mod)\n\n    inv.append((-inv[mod % i] * (mod // i)) % mod)\n\n    # 累計\n\n    factinv.append((factinv[-1] * inv[-1]) % mod)\n\n\n\ndef cmb(n, r):\n\n    if (r < 0) or (n < r):\n\n        return 0\n\n    r = min(r, n - r)\n\n    return fact[n] * factinv[r] * factinv[n - r] % mod\n\n\n\nans = 0\n\n# 長さNの時最低でも3 * N使う\n\n# 残りは分配する\n\nfor i in range(1, 2001):\n\n    s = S - (3 * i)\n\n    if s < 0:\n\n        break\n\n    # sをN個に分配する通りがいくつあるか\n\n    # 重複組み合わせ\n\n    # 仕切りの数はi - 1個\n\n    ans += cmb(s + i - 1, i - 1)\n\nprint((ans % mod))", "generated_code": "def getN():\n\n    return int(eval(input()))\n\ndef getNM():\n\n    return list(map(int, input().split()))\n\ndef getList():\n\n    return list(map(int, input().split()))\n\ndef getArray(intn):\n\n    return [int(eval(input())) for i in range(intn)]\n\ndef input():\n\n    return sys.stdin.readline().rstrip()\n\ndef rand_N(ran1, ran2):\n\n    return random.randint(ran1, ran2)\n\ndef rand_List(ran1, ran2, rantime):\n\n    return [random.randint(ran1, ran2) for i in range(rantime)]\n\ndef rand_ints_nodup(ran1, ran2, rantime):\n\n  ns = []\n\n  while len(ns) < rantime:\n\n    n = random.randint(ran1, ran2)\n\n    if not n in ns:\n\n      ns.append(n)\n\n  return sorted(ns)\n\n\n\ndef rand_query(ran1, ran2, rantime):\n\n  r_query = []\n\n  while len(r_query) < rantime:\n\n    n_q = rand_ints_nodup(ran1, ran2, 2)\n\n    if not n_q in r_query:\n\n      r_query.append(n_q)\n\n  return sorted(r_query)\n\n\n\nfrom collections import defaultdict, deque, Counter\n\nfrom sys import exit\n\nfrom decimal import *\n\nfrom heapq import heapify, heappop, heappush\n\nimport math\n\nimport random\n\nimport string\n\nfrom copy import deepcopy\n\nfrom itertools import combinations, permutations, product\n\nfrom operator import mul, itemgetter\n\nfrom functools import reduce\n\nfrom bisect import bisect_left, bisect_right\n\n\n\nimport sys\n\nsys.setrecursionlimit(1000000000)\n\nmod = 10 ** 9 + 7\n\n\n\n#############\n\n# Main Code #\n\n#############\n\n\n\nN = getN()\n\nlogk = N.bit_length()\n\n\n\n# 漸化式にできるなら行列計算に落とし込める\n\n# A[n] = A[n - 1] + A[n - 3]なので\n\n# [a2, a1, a0] = [0, 0, 1]\n\n# [[1, 1, 0], [0, 0, 1], [1, 0, 0]]のN乗をすれば\n\n# [an+2, an+1, an] が出る\n\n\n\ndp = [[[0, 0, 0] for i in range(3)] for i in range(logk)]\n\ndp[0] = [\n\n[1, 1, 0],\n\n[0, 0, 1],\n\n[1, 0, 0]\n\n]\n\n\n\n# 行列掛け算 O(n3)かかる\n\ndef array_cnt(ar1, ar2):\n\n    h = len(ar1)\n\n    w = len(ar2[0])\n\n    row = ar1\n\n    col = []\n\n    for j in range(w):\n\n        opt = []\n\n        for i in range(len(ar2)):\n\n            opt.append(ar2[i][j])\n\n        col.append(opt)\n\n\n\n    res = [[[0, 0] for i in range(w)] for i in range(h)]\n\n    for i in range(h):\n\n        for j in range(w):\n\n            cnt = 0\n\n            for x, y in zip(row[i], col[j]):\n\n                cnt += x * y\n\n            res[i][j] = cnt\n\n            res[i][j] %= mod\n\n    return res\n\n\n\nfor i in range(1, logk):\n\n    dp[i] = array_cnt(dp[i - 1], dp[i - 1])\n\n\n\nans = [[0, 0, 1]]\n\nfor i in range(logk):\n\n    if N & (1 << i):\n\n        ans = array_cnt(ans, dp[i])\n\nprint((ans[0][2] % mod))", "score": 1.0}
{"golden_code": "# ABC150 D\n\nsi = lambda: eval(input())\n\nni = lambda: int(eval(input()))\n\nnm = lambda: list(map(int, input().split()))\n\nnl = lambda: list(map(int, input().split()))\n\nfrom fractions import gcd\n\nfrom math import ceil\n\ndef lcm(x, y):\n\n    return (x * y) // gcd(x, y)\n\nn,m=nm()\n\na=nl()\n\nans=0\n\na=[x//2 for x in a] \n\n\n\nlcm_v=a[0]\n\nfor i in range(n):\n\n    lcm_v=lcm(lcm_v,a[i])\n\nok_flg=[(lcm_v//i)%2==1 for i in a]\n\nif all(ok_flg):\n\n    ans=((m//lcm_v)+1)//2\n\nprint(ans)\n\n\n", "generated_code": "from math import gcd, ceil\n\n\n\n\n\ndef lcm(a, b):\n\n    return (a*b)//gcd(a, b)\n\n\n\n\n\nn, m = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\n\n\nfor i in range(n):\n\n    a[i] = a[i]//2\n\n\n\nlcm_v = a[0]\n\nfor i in range(1, n):\n\n    lcm_v = lcm(lcm_v, a[i])\n\n\n\nok = True\n\nfor aa in a:\n\n    if (lcm_v//aa) % 2 != 1:\n\n        ok = False\n\n        break\n\nans = 0\n\nif ok:\n\n    ans = ((m//lcm_v)+1)//2\n\nprint(ans)\n", "score": 1.0}
{"golden_code": "w = eval(input())\n\ny = list(set(w))\n\n\n\nfor i in range(len(y)):\n\n    if w.count(y[i]) % 2 != 0:\n\n        print('No')\n\n        exit(0)\n\n\n\nprint('Yes')", "generated_code": "w = list(eval(input()))\n\nx = list(set(w))\n\nfor i in x:\n\n    y = w.count(i)\n\n    if y % 2 != 0:\n\n        print('No')\n\n        exit(0)\n\nprint('Yes')", "score": 1.0}
{"golden_code": "A, B = list(map(int, input().split()))\n\ncnt = 0\n\nfor i in range(A, B+1):\n\n    l = list(str(i))\n\n\n\n    if l == list(reversed(l)):\n\n        cnt += 1\n\n\n\nprint(cnt)\n", "generated_code": "A, B = list(map(int, input().split()))\n\ncnt = 0\n\nfor i in range(A, B+1):\n\n    l = str(i)\n\n    if l == l[::-1]:\n\n        cnt += 1\n\n\n\nprint(cnt)\n", "score": 1.0}
{"golden_code": "import sys\n\ninput = sys.stdin.readline\n\n\n\ndef main():\n\n  n, m = map(int, input().split())\n\n  LR = [list(map(int, input().split())) for _ in range(n)]\n\n  \n\n  BIT = [0]*(m+2)\n\n  def add(i, a):\n\n    while i <= m+1:\n\n      BIT[i] += a\n\n      i += i&(-i)\n\n  def bit_sum(i):\n\n    res = 0\n\n    while i > 0:\n\n      res += BIT[i]\n\n      i -= i&(-i)\n\n    return res\n\n  \n\n  S = sorted([(r-l+1, l, r) for l, r in LR], reverse=True)\n\n  cnt = n\n\n  L = []\n\n  for i in range(1, m+1):\n\n    while S and S[-1][0] == i:\n\n      c, l, r = S.pop()\n\n      cnt -= 1\n\n      add(l, 1)\n\n      add(r+1, -1)\n\n    res = cnt\n\n    for j in range(0, m+1, i):\n\n      res += bit_sum(j)\n\n    L.append(res)\n\n  print(*L, sep=\"\\n\")\n\n\n\nif __name__ == \"__main__\":\n\n  main()\n", "generated_code": "import sys\n\ninput = sys.stdin.readline\n\n\n\ndef main():\n\n  n, m = list(map(int, input().split()))\n\n  S = [[] for _ in range(m+1)]\n\n  for _ in range(n):\n\n    l, r = list(map(int, input().split()))\n\n    S[r-l+1].append((l, r))\n\n  \n\n  BIT = [0]*(m+2)\n\n  def add(i, a):\n\n    while i <= m+1:\n\n      BIT[i] += a\n\n      i += i&(-i)\n\n  def bit_sum(i):\n\n    res = 0\n\n    while i > 0:\n\n      res += BIT[i]\n\n      i -= i&(-i)\n\n    return res\n\n  cnt = n\n\n  for i in range(1, m+1):\n\n    for l, r in S[i]:\n\n      cnt -= 1\n\n      add(l, 1)\n\n      add(r+1, -1)\n\n    res = cnt\n\n    for j in range(0, m+1, i):\n\n      res += bit_sum(j)\n\n    print(res)\n\n\n\nif __name__ == \"__main__\":\n\n  main()", "score": 1.0}
{"golden_code": "N, L = [int(i) for i in input().split()]\n\n\n\nmin_ = L\n\nmax_ = L + N -1\n\n\n\ndef eat_apple():\n\n    if max_<0:\n\n        return max_ \n\n    if L < 0:\n\n        return 0\n\n    return L\n\n\n\nprint(((min_+max_)*(max_-min_+1)//2 - eat_apple()))", "generated_code": "N, L = [int(i) for i in input().split()]\n\n\n\nmin_ = L\n\nmax_ = L + N -1\n\n\n\ndef eat_apple(N, L, max_):\n\n    if max_<0:\n\n        return max_ \n\n    if L < 0:\n\n        return 0\n\n    return L\n\n\n\nprint(((min_+max_)*(max_-min_+1)//2 - eat_apple(N, L, max_)))", "score": 1.0}
{"golden_code": "from collections import deque\n\n\n\nn = int(eval(input()))\n\n\n\ng = {i: dict() for i in range(n)}\n\n\n\na_list = [0] * (n - 1)\n\nb_list = [0] * (n - 1)\n\nfor i in range(n - 1):\n\n    a, b = list(map(int, input().split()))\n\n    a_list[i] = a - 1\n\n    b_list[i] = b - 1\n\n    g[a - 1][b - 1] = -1\n\n    g[b - 1][a - 1] = -1\n\n\n\nk = max([len(g[a]) for a in range(n)])\n\n\n\nused_color = [-1] * n\n\nused_color[0] = k - 1\n\n# BFS\n\nqueue = deque([0])\n\nwhile len(queue) > 0:\n\n    p = queue.popleft()\n\n    c = used_color[p]\n\n    for q in list(g[p].keys()):\n\n        if used_color[q] != -1:\n\n            continue\n\n        c += 1\n\n        c %= k\n\n        # print(p, q, c)\n\n        g[p][q] = c\n\n        g[q][p] = c\n\n        used_color[q] = c\n\n        queue.append(q)\n\n\n\nprint(k)\n\nfor i in range(n - 1):\n\n    print((g[a_list[i]][b_list[i]] + 1))\n", "generated_code": "from collections import deque\n\n\n\n\n\ndef solve(n, a_list, b_list):\n\n\n\n    # create graph\n\n    g = {i: dict() for i in range(n)}\n\n    for i in range(n - 1):\n\n        a, b = a_list[i] - 1, b_list[i] - 1\n\n        g[a][b] = -1\n\n        g[b][a] = -1\n\n\n\n    k = max([len(g[a]) for a in range(n)])\n\n\n\n    used_color = [-1] * n\n\n    used_color[0] = k - 1\n\n    # BFS\n\n    queue = deque([0])\n\n    while len(queue) > 0:\n\n        p = queue.popleft()\n\n        c = used_color[p]\n\n        for q in list(g[p].keys()):\n\n            if used_color[q] != -1:\n\n                continue\n\n            c += 1\n\n            c %= k\n\n            # print(p, q, c)\n\n            g[p][q] = c\n\n            g[q][p] = c\n\n            used_color[q] = c\n\n            queue.append(q)\n\n\n\n    res_list = [0] * (n - 1)\n\n    for i in range(n - 1):\n\n        res_list[i] = g[a_list[i] - 1][b_list[i] - 1] + 1\n\n\n\n    return k, res_list\n\n\n\n\n\ndef main():\n\n    n = int(eval(input()))\n\n    a_list = [0] * (n - 1)\n\n    b_list = [0] * (n - 1)\n\n    for i in range(n - 1):\n\n        a, b = list(map(int, input().split()))\n\n        a_list[i] = a\n\n        b_list[i] = b\n\n\n\n    k, res_list = solve(n, a_list, b_list)\n\n    print(k)\n\n    for i in range(n - 1):\n\n        print((res_list[i]))\n\n\n\n\n\ndef test():\n\n    print((solve(3, [1, 2], [2, 3])))\n\n    print((solve(8, [1, 2, 2, 2, 4, 5, 6], [2, 3, 4, 5, 7, 6, 8])))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    # test()\n\n    main()\n", "score": 1.0}
{"golden_code": "import numpy as np\n\nn = int(eval(input()))\n\na_list = np.array(list(map(int, input().split())))\n\n\n\ncounter = 0\n\nwhile True:\n\n    if np.sum(a_list % 2) > 0:\n\n        break\n\n    counter += 1\n\n    a_list = a_list / 2\n\nprint(counter)\n", "generated_code": "n = int(eval(input()))\n\na_list = list(map(int, input().split()))\n\n\n\nstatus = True\n\nexecute = 0\n\nwhile status:\n\n    for i in range(n):\n\n        if a_list[i] % 2 == 1:\n\n            status = False\n\n            break\n\n        else:\n\n            a_list[i] = a_list[i] / 2\n\n    if status:\n\n        execute += 1\n\nprint(execute)\n", "score": 1.0}
{"golden_code": "import numpy as np\n\n# Me\n\n\n\n\n\ndef f():\n\n    i = int(eval(input()))\n\n    nums = np.array(list(map(int, input().split())))\n\n    # nums = [int(x) for x in input().split()]\n\n    c = 0\n\n    while True:\n\n        if any(nums % 2 == 1):\n\n            break\n\n        c += 1\n\n        nums = nums / 2\n\n    print(c)\n\n\n\n\n\nf()\n\n\n\n\n\n# Other\n", "generated_code": "def divide_all(a):\n\n    success = True\n\n    for i, n in enumerate(a):\n\n        if n % 2 != 0:\n\n            success = False\n\n            break\n\n        a[i] = n / 2\n\n    if success is False:\n\n        return (a, False)\n\n    return (a, True)\n\n\n\nn = int(eval(input()))\n\na = list(map(int, input().split()))\n\nc = 0\n\nwhile True:\n\n    a, r = divide_all(a)\n\n    if r is False:\n\n        break\n\n    c += 1\n\n\n\n\n\nprint(c)\n", "score": 1.0}
{"golden_code": "A, B = list(map(int, input().split()))\n\nnumbers = list(range(A, B+1))\n\ncount = 0\n\nfor i in numbers:\n\n    m = str(i)\n\n    rm = ''.join(list(reversed(m)))\n\n    if m == rm:\n\n        count += 1\n\nprint(count)", "generated_code": "A, B = list(map(int, input().split()))\n\nx = list(range(1,10))\n\ny = list(range(10))\n\ncount = 0\n\nfor p in x:\n\n    for q in y:\n\n        for r in y:\n\n            sakasama = int(str(p)+str(q)+str(r)+str(q)+str(p))\n\n            if A <= sakasama <= B:\n\n                count += 1\n\nprint(count)", "score": 1.0}
{"golden_code": "N = int(eval(input()))\n\nA = list(map(int, input().split()))\n\nanswer = 10 ** 9\n\nfor i in range(1,101):\n\n    tmp = 0\n\n    for a in A:\n\n        tmp += abs(a-i) ** 2\n\n    answer = min(answer,tmp)\n\nprint(answer)", "generated_code": "N = int(eval(input()))\n\nA = list(map(int, input().split()))\n\nchushin = sum(A)//N\n\nchushin_1 = sum(A)//N +1\n\nanswer = 0\n\nanswer_1 = 0\n\nfor a in A:\n\n    answer += abs(a-chushin) ** 2\n\n    answer_1 += abs(a-chushin_1) ** 2\n\nprint((min(answer,answer_1)))", "score": 1.0}
{"golden_code": "import sys\n\n\n\nif __name__ == '__main__':\n\n    import doctest\n\n    doctest.testmod()\n\n    S = int(sys.stdin.read())\n\n    h = S / 3600\n\n    m = (S % 3600) / 60\n\n    s = S % 60\n\n    print(\"%d:%d:%d\" % (h, m, s))\n", "generated_code": "#!/usr/bin/env python\n\n#-*- coding: utf-8 -*-\n\n\n\n# http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ITP1_1_D\n\n\n\nif __name__ == '__main__':\n\n    S = int(input())\n\n    h = S / 3600\n\n    m = (S % 3600) / 60\n\n    s = S % 60\n\n    print(\"%d:%d:%d\" % (h, m, s))\n", "score": 1.0}
{"golden_code": "# -*- coding: utf-8 -*-\n\n\n\nimport sys\n\n\n\ndef input(): return sys.stdin.readline().strip()\n\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\n\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\n\ndef ceil(x, y=1): return int(-(-x // y))\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(): return list(map(int, input().split()))\n\ndef Yes(): print('Yes')\n\ndef No(): print('No')\n\ndef YES(): print('YES')\n\ndef NO(): print('NO')\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = float('inf')\n\nMOD = 10 ** 9 + 7\n\n\n\nX,Y,Z,K=MAP()\n\nA=sorted(LIST(), reverse=True)\n\nB=sorted(LIST(), reverse=True)\n\nC=sorted(LIST(), reverse=True)\n\n\n\nABC=[]\n\nfor i in range(X):\n\n    for j in range(Y):\n\n        if (i+1)*(j+1)>K:\n\n            break\n\n        for k in range(Z):\n\n            if (i+1)*(j+1)*(k+1)>K:\n\n                break\n\n            ABC.append(A[i]+B[j]+C[k])\n\nABC.sort(reverse=True)\n\nfor i in range(K):\n\n    print((ABC[i]))\n\n\n", "generated_code": "# -*- coding: utf-8 -*-\n\n\n\nimport sys\n\nfrom heapq import heappush, heappop\n\n\n\ndef input(): return sys.stdin.readline().strip()\n\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\n\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\n\ndef ceil(x, y=1): return int(-(-x // y))\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(): return list(map(int, input().split()))\n\ndef Yes(): print('Yes')\n\ndef No(): print('No')\n\ndef YES(): print('YES')\n\ndef NO(): print('NO')\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = float('inf')\n\nMOD = 10 ** 9 + 7\n\n\n\nX,Y,Z,K=MAP()\n\nA=sorted(LIST(), reverse=True)\n\nB=sorted(LIST(), reverse=True)\n\nC=sorted(LIST(), reverse=True)\n\n\n\n\n\nque=[]\n\nheappush(que, (-(A[0]+B[0]+C[0]), 0, 0, 0))\n\nS={(0,0,0)}\n\nfor i in range(K):\n\n    ans=heappop(que)\n\n    print((-ans[0]))\n\n    a,b,c=ans[1:]\n\n    if a+1<X and (a+1,b,c) not in S:\n\n        heappush(que, (-(A[a+1]+B[b]+C[c]), a+1, b, c))\n\n        S.add((a+1,b,c))\n\n    if b+1<Y and (a,b+1,c) not in S:\n\n        heappush(que, (-(A[a]+B[b+1]+C[c]), a, b+1, c))\n\n        S.add((a,b+1,c))\n\n    if c+1<Z and (a,b,c+1) not in S:\n\n        heappush(que, (-(A[a]+B[b]+C[c+1]), a, b, c+1))\n\n        S.add((a,b,c+1))\n", "score": 1.0}
{"golden_code": "N=int(eval(input()))\n\na=list(map(int,input().split()))\n\nfor i in range(N):\n\n  for j in range(1,31):\n\n    if a[i]%(2**j)!=0:\n\n      a[i]=j-1\n\n      break\n\nprint((sum(a)))", "generated_code": "import heapq\n\nX,Y,Z,K = list(map(int,input().split()))\n\nA = list(map(int,input().split()))\n\nB = list(map(int,input().split()))\n\nC = list(map(int,input().split()))\n\nasort,bsort,csort = sorted(A,reverse=True),sorted(B,reverse=True),sorted(C,reverse=True)\n\nalready = [[0,0,0]]\n\nprint((asort[0] + bsort[0] + csort[0]))\n\nx,y,z = 0,0,0\n\ncheck = []\n\nfor k in range(K - 1):\n\n    if [x + 1,y,z] not in already and x + 1 < X:\n\n        already.append([x + 1,y,z])\n\n        heapq.heappush(check,(-(asort[x + 1] + bsort[y] + csort[z]),x + 1,y,z))\n\n    if [x,y + 1,z] not in already and y + 1 < Y:\n\n        already.append([x,y + 1,z])\n\n        heapq.heappush(check,(-(asort[x] + bsort[y + 1] + csort[z]),x,y + 1,z))\n\n    if [x,y,z + 1] not in already and z + 1 < Z:\n\n        already.append([x,y,z + 1])\n\n        heapq.heappush(check,(-(asort[x] + bsort[y] + csort[z + 1]),x,y,z + 1))\n\n    maxsum = heapq.heappop(check)\n\n    print((-maxsum[0]))\n\n    x,y,z = maxsum[1],maxsum[2],maxsum[3]", "score": 0.0}
{"golden_code": "import numpy as np\n\nS=eval(input())\n\nN=len(S)\n\nmod=[0 for i in range(2019)]\n\nmod2=0\n\nten=1\n\nfor i in range(N-1,-1,-1): \n\n  s=int(S[i])*ten\n\n  mod2+=np.mod(s,2019)\n\n  mod2=np.mod(mod2,2019)\n\n  mod[mod2]+=1\n\n  ten=(ten*10)%2019\n\nans=0\n\nfor i in range(2019):\n\n  k=mod[i]\n\n  if i==0:\n\n    if k>=2:\n\n      ans+=k*(k-1)//2+k\n\n    else:\n\n      ans+=k\n\n  else:\n\n    if k>=2:\n\n      ans+=k*(k-1)//2\n\nprint(ans) ", "generated_code": "s = eval(input())\n\nif s == '0':\n\n  print((1))\n\nelse:\n\n  print((0))", "score": 0.0}
{"golden_code": "from math import log2\n\nn = int(eval(input()))\n\na = list(map(int, input().split()))\n\nans = 0\n\n\n\nfor _a in a:\n\n    if _a%2 == 0:\n\n        cnt =0\n\n        while _a%2 == 0:\n\n            _a //= 2\n\n            cnt += 1\n\n        ans += cnt\n\n\n\nprint((int(ans)))", "generated_code": "import sys\n\nsys.setrecursionlimit(100000)\n\n\n\ndef intinput(): return list(map(int,sys.stdin.readline().split()))\n\n\n\n\n\nn, m = intinput()\n\na = {int(sys.stdin.readline()) for _ in range(m)}\n\nmemo = [0 for x in range(n + 4)]\n\nmemo[0] = 1\n\nmod = 10 ** 9 + 7\n\nfor i in range(n):\n\n    if i + 1 not in a:\n\n        memo[i + 1] = (memo[i + 1] + memo[i]) % mod\n\n    if i + 2 not in a:\n\n        memo[i + 2] = (memo[i + 2] + memo[i]) % mod\n\nprint((memo[n]))", "score": 0.0}
{"golden_code": "from collections import deque\n\n\n\nN, *AB = list(map(int, open(0).read().split()))\n\n\n\nE = [set() for _ in range(N + 1)]\n\nfor i, (a, b) in enumerate(zip(*[iter(AB)] * 2)):\n\n    E[a].add((b, i))\n\n    E[b].add((a, i))\n\n\n\nA = [0] * (N - 1)\n\nQ = deque([(0, 1)])\n\nwhile Q:\n\n    p, v = Q.popleft()\n\n    c = 0\n\n    for u, i in E[v]:\n\n        E[u].remove((v, i))\n\n        c += 1 + (c + 1 == p)\n\n        Q.append((c, u))\n\n        A[i] = c\n\n\n\nprint((max(A), *A))", "generated_code": "A, B = list(map(int, input().split()))\n\ncnt = 0\n\nfor i in range(A, B+1):\n\n    l = str(i)\n\n    if l == l[::-1]:\n\n        cnt += 1\n\n\n\nprint(cnt)\n", "score": 0.0}
{"golden_code": "import sys\n\nsys.setrecursionlimit(2147483647)\n\nINF=float(\"inf\")\n\nMOD=10**9+7\n\ninput=lambda :sys.stdin.readline().rstrip()\n\n\n\nfrom collections import deque\n\ndef resolve():\n\n    k=int(eval(input()))\n\n    E=[[] for _ in range(k)]\n\n    for i in range(k):\n\n        E[i].append(((i+1)%k,1))\n\n        E[i].append(((10*i)%k,0))\n\n\n\n    # 0-1 BFS\n\n    dist=[INF]*k\n\n    dist[1]=0\n\n    Q=deque([1])\n\n    while(Q):\n\n        v=Q.popleft()\n\n        for nv,w in E[v]:\n\n            if(dist[nv]<=dist[v]+w): continue\n\n            dist[nv]=dist[v]+w\n\n            if(w==0): Q.appendleft(nv)\n\n            else: Q.append(nv)\n\n    print((dist[0]+1))\n\nresolve()", "generated_code": "from math import gcd, ceil\n\n\n\n\n\ndef lcm(a, b):\n\n    return (a*b)//gcd(a, b)\n\n\n\n\n\nn, m = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\n\n\nfor i in range(n):\n\n    a[i] = a[i]//2\n\n\n\nlcm_v = a[0]\n\nfor i in range(1, n):\n\n    lcm_v = lcm(lcm_v, a[i])\n\n\n\nok = True\n\nfor aa in a:\n\n    if (lcm_v//aa) % 2 != 1:\n\n        ok = False\n\n        break\n\nans = 0\n\nif ok:\n\n    ans = ((m//lcm_v)+1)//2\n\nprint(ans)\n", "score": 0.0}
{"golden_code": "N, W = list(map(int, input().split()))\n\nL = [list(map(int, input().split())) for i in range(N)]\n\nV = 0\n\nfor i in range(N):\n\n  V += L[i][1]\n\n\n\ndp = [[10**9+1] * (V + 1) for i in range(N+1)]\n\ndp[0][0] = 0\n\nfor i in range(N):\n\n    for j in range(V+1):\n\n        if j - L[i][1] >= 0:\n\n          dp[i+1][j] = min(dp[i][j], dp[i][j-L[i][1]] + L[i][0])\n\n        else:\n\n          dp[i+1][j] = dp[i][j]\n\nans = 0\n\nfor j in range(V+1):\n\n    if  W >= dp[-1][j]:\n\n        ans = max(ans, j)\n\nprint(ans)", "generated_code": "while 1:\n\n    a=0\n\n    n,x=list(map(int,input().split()))\n\n    if n==0:break\n\n    for i in range(1,n-1):\n\n        for j in range(i+1,n):\n\n            c=x-i-j\n\n            if c>j and c<=n:a+=1\n\n    print(a)", "score": 0.0}
{"golden_code": "import sys\n\ninput = sys.stdin.readline\n\n \n\ns = input().rstrip()\n\nk = int(eval(input()))\n\n    \n\ndef check_count(s):\n\n    cnt_list = [1]\n\n    cnt = 1\n\n    for i in range(1, len(s)):\n\n        if s[i-1] == s[i]:\n\n            cnt_list[-1] += 1\n\n        else:\n\n            cnt_list.append(1)\n\n    return cnt_list\n\n\n\ndef calc_ans(cnt_list, k):\n\n    _ans = 0\n\n    for c in cnt_list:\n\n        _ans += c//2\n\n    return(_ans * k)\n\n\n\nif len(s)==1:\n\n    ans = k//2\n\nelse:\n\n    cnt_list = check_count(s)\n\n    if len(cnt_list)==1:\n\n        ans = (len(s)*k)//2\n\n    else:\n\n        ans = calc_ans(cnt_list, k)\n\n        if s[0]==s[-1]:\n\n            if cnt_list[0]%2==1 and cnt_list[-1]%2==1:\n\n                ans += k - 1\n\n\n\nprint(ans)", "generated_code": "def c_remainder_minimization_2019(L, R):\n\n    ans = float('inf')\n\n    for i in range(L, min(R, L + 2019)):\n\n        for j in range(i + 1, min(R + 1, L + 2020)):\n\n            ans = min(ans, (i * j) % 2019)\n\n            if ans == 0:\n\n                return 0\n\n    return ans\n\n\n\nL, R = [int(i) for i in input().split()]\n\nprint((c_remainder_minimization_2019(L, R)))", "score": 0.0}
{"golden_code": "# -*- coding: utf-8 -*-\n\n\n\nimport sys\n\nfrom collections import Counter\n\n\n\ndef input(): return sys.stdin.readline().strip()\n\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\n\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\n\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\n\ndef ceil(x, y=1): return int(-(-x // y))\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\n\ndef Yes(): print('Yes')\n\ndef No(): print('No')\n\ndef YES(): print('YES')\n\ndef NO(): print('NO')\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = 10 ** 18\n\nMOD = 10 ** 9 + 7\n\n\n\ndef fft(A, B):\n\n    \"\"\" \n\n    高速フーリエ変換(FFT)\n\n        A：出現回数をカウントしたリスト\n\n        B：出現回数をカウントしたリスト\n\n    \"\"\"\n\n    import numpy as np\n\n    from numpy.fft import rfft, irfft\n\n\n\n    # 出現数カウント\n\n    MAXA = max(A)\n\n    MAXB = max(B)\n\n    C1 = [0] * (MAXA+1)\n\n    C2 = [0] * (MAXB+1)\n\n    for a in A:\n\n        C1[a] += 1\n\n    for b in B:\n\n        C2[b] += 1\n\n    # max(A)+max(B)より大きい2冪\n\n    L = 1\n\n    k = 0\n\n    while L <= MAXA + MAXB:\n\n        k += 1\n\n        L = 2**k\n\n    # FFT\n\n    res = irfft(rfft(C1, L) * rfft(C2, L), L)\n\n    # 四捨五入して整数に\n\n    res = np.rint(res).astype(np.int64)\n\n    return res\n\n\n\nN, M, L = MAP()\n\nA = LIST()\n\nB = LIST()\n\n\n\nres = list(fft(A, B))\n\n\n\nmn = INF\n\nfor i, a in enumerate(res):\n\n    if a != 0:\n\n        mn = i\n\n        break\n\n\n\nfor _ in range(L):\n\n    x, y, c = MAP()\n\n    x -= 1; y -= 1\n\n    mn = min(mn, A[x] + B[y] - c)\n\nprint(mn)\n", "generated_code": "n = int(eval(input()))\n\nfrom functools import reduce\n\nprint((reduce(lambda x,y:x*y%1000000007,list(range(1,n+1)))))", "score": 0.0}
{"golden_code": "def popcount(x):\n\n    x = x - ((x >> 1) & 0x55555555)\n\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333)\n\n    x = (x + (x >> 4)) & 0x0f0f0f0f\n\n    x = x + (x >> 8)\n\n    x = x + (x >> 16)\n\n    return x & 0x0000007f\n\n\n\ncmb=[[0 for i in range(51)] for j in range(51)]\n\ncmb[0][0]=1\n\nfor i in range(51):\n\n    for j in range(51):\n\n        if i!=50 and j!=50:\n\n            cmb[i+1][j+1]+=cmb[i][j]\n\n        if i!=50:\n\n            cmb[i+1][j]+=cmb[i][j]\n\n\n\nfor i in range(1,51):\n\n    for j in range(2,51):\n\n        cmb[i][j]+=cmb[i][j-1]\n\n\n\nN,K,T,S=list(map(int,input().split()))\n\na=list(map(int,input().split()))\n\n\n\nmust0=[i for i in range(18) if S>>i &1==0]\n\nmust1=[i for i in range(18) if T>>i &1==1]\n\n\n\nA=[]\n\nfor val in a:\n\n    check=True\n\n    for j in must0:\n\n        check=check&(val>>j &1==0)\n\n    for j in must1:\n\n        check=check&(val>>j &1==1)\n\n    if check:\n\n        A.append(val)\n\n\n\nif not A:\n\n    print((0))\n\n    exit()\n\n\n\nbit=[]\n\nfor i in range(18):\n\n    if i not in must0 and i not in must1:\n\n        bit.append(i)\n\n\n\nfor i in range(len(A)):\n\n    temp=0\n\n    for j in range(len(bit)):\n\n        temp+=(A[i]>>bit[j] &1==1)*2**j\n\n    A[i]=temp\n\n\n\nans=0\n\nn=len(bit)\n\ndata=[0]*(2**n)\n\nfor i in range(2**n):\n\n    t=set([])\n\n    for a in A:\n\n        data[a&i]+=1\n\n        t.add(a&i)\n\n    temp=0\n\n    for val in t:\n\n        temp+=cmb[data[val]][min(K,data[val])]\n\n    ans+=temp*(-1)**popcount(i)\n\n    for val in t:\n\n        data[val]=0\n\n\n\nprint(ans)\n", "generated_code": "N, M = list(map(int, input().split()))\n\n\n\nleft = 1\n\nright = N\n\n\n\nfor _ in range(M):\n\n    l, r = list(map(int, input().split()))\n\n\n\n    if left < l:\n\n        left = l\n\n    if right > r:\n\n        right = r\n\n\n\nans = right - left\n\n\n\nprint((ans + 1 if ans >= 0 else 0))\n", "score": 0.0}
{"golden_code": "N = int(eval(input()))\n\na = 1\n\nfor n in range(2,N+1):\n\n    a = a*n % (10**9+7)\n\nprint(a)", "generated_code": "s = eval(input())\n\nt = eval(input())\n\n\n\nfor i in range(len(s)):\n\n    s = s[1:] + s[0]\n\n    if s == t:\n\n        print(\"Yes\")\n\n        exit()\n\nprint(\"No\")", "score": 0.0}
{"golden_code": "N, M = list(map(int, input().split()))\n\nA_ = [int(eval(input())) for _ in range(M)]\n\nA = [0] * (N+3)\n\nfor a in A_:\n\n    A[a] = 1\n\ndp = [0] * (N+3)\n\ndp[0] = 1\n\n\n\nmod = 10**9+7\n\n\n\nfor i in range(1, N+1):\n\n    if A[i-1] == 0:\n\n        dp[i] += dp[i-1]\n\n    if A[i-2] == 0:\n\n        dp[i] += dp[i-2]\n\n    dp[i] %= mod\n\nprint((dp[N]))", "generated_code": "# encoding:utf-8\n\n\n\ninput = list(map(int, input().split()))\n\nW, H, x, y, r = input\n\n\n\nif x - r < 0 or x + r > W:\n\n\tprint(\"No\")\n\nelif y - r < 0 or y + r > H:\n\n\tprint(\"No\")\n\nelse:\n\n\tprint(\"Yes\")", "score": 0.0}
{"golden_code": "from math import factorial\n\n\n\nn = int(eval(input()))\n\nf = factorial(n)\n\n\n\nmod = 10 ** 9 + 7\n\n\n\ndef primes(n):\n\n    is_prime = [True] * (n + 1)\n\n    is_prime[0] = False\n\n    is_prime[1] = False\n\n    for i in range(2, int(n ** 0.5) + 1):\n\n        if not is_prime[i]:\n\n            continue\n\n        for j in range(i * 2, n + 1, i):\n\n            is_prime[j] = False\n\n    return [i for i in range(n + 1) if is_prime[i]]\n\n\n\nans = 1\n\nfor p in primes(n):\n\n    temp = 1\n\n    while f % p == 0:\n\n        temp += 1\n\n        f //= p\n\n    ans = (ans * temp) % mod\n\nprint(ans)\n", "generated_code": "w = list(eval(input()))\n\nx = list(set(w))\n\nfor i in x:\n\n    y = w.count(i)\n\n    if y % 2 != 0:\n\n        print('No')\n\n        exit(0)\n\nprint('Yes')", "score": 0.0}
{"golden_code": "import math\n\n\n\nn = int(eval(input()))\n\n\n\nprint((math.factorial(n) % (10**9 + 7)))\n", "generated_code": "n = int(eval(input()))\n\nprint(((1000 - n % 1000) % 1000))", "score": 0.0}
{"golden_code": "# coding: utf-8\n\n\n\nimport sys\n\ninput = sys.stdin.readline\n\n\n\ndef f(n, abc):\n\n    dp = [[0] * 3 for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n\n        for j in range(3):\n\n            dp[i][j] = max(dp[i - 1][k] + abc[i - 1][j] \\\n\n                for k in range(3) if k != j)\n\n    return(max(dp[n]))\n\n\n\nn = int(eval(input()))    # 1 <= n <= 10^5\n\nabc = [list(map(int, input().rstrip().split())) for _ in range(n)]\n\n\n\nprint((f(n, abc)))\n", "generated_code": "N, D = list(map(int, input().split()))\n\nimport math\n\nprint((math.ceil(N/(2*D+1))))", "score": 0.0}
{"golden_code": "import numpy as np\n\n\n\nN = int(input())\n\n\n\nA = np.array([int(i) for i in input().split()])\n\n\n\nx = np.argsort(A)\n\nx += 1\n\n\n\nfor i in range(N):\n\n    print(x[i], end=\" \")\n\n    \n\nprint()\n", "generated_code": "from collections import deque\n\n\n\nN, *AB = list(map(int, open(0).read().split()))\n\n\n\nE = [set() for _ in range(N + 1)]\n\nfor i, (a, b) in enumerate(zip(*[iter(AB)] * 2)):\n\n    E[a].add((b, i))\n\n    E[b].add((a, i))\n\n\n\nA = [0] * (N - 1)\n\nQ = deque([1])\n\nwhile Q:\n\n    p, v = divmod(Q.popleft(), N + 1)\n\n    c = 0\n\n    for u, i in E[v]:\n\n        E[u].remove((v, i))\n\n        c += 1 + (c + 1 == p)\n\n        Q.append(c * (N + 1) + u)\n\n        A[i] = c\n\n\n\nprint((max(A)))\n\nprint((\"\\n\".join(map(str, A))))", "score": 0.0}
{"golden_code": "s = eval(input())\n\nt = eval(input())\n\nfor i in range(len(s)):\n\n        if s[i:]+s[:i]==t:\n\n                print('Yes')\n\n                exit()\n\nprint('No')", "generated_code": "while 1:\n\n    a=0\n\n    n,x=list(map(int,input().split()))\n\n    if n==0:break\n\n    for i in range(1,n-1):\n\n        for j in range(i+1,n):\n\n            c=x-i-j\n\n            if c>j and c<=n:a+=1\n\n    print(a)", "score": 0.0}
{"golden_code": "n = int(eval(input())) % 1000\n\nif n == 0:\n\n    print((0))\n\nelse:\n\n    print((1000 - n))", "generated_code": "def getN():\n\n    return int(eval(input()))\n\ndef getNM():\n\n    return list(map(int, input().split()))\n\ndef getList():\n\n    return list(map(int, input().split()))\n\ndef getArray(intn):\n\n    return [int(eval(input())) for i in range(intn)]\n\ndef input():\n\n    return sys.stdin.readline().rstrip()\n\ndef rand_N(ran1, ran2):\n\n    return random.randint(ran1, ran2)\n\ndef rand_List(ran1, ran2, rantime):\n\n    return [random.randint(ran1, ran2) for i in range(rantime)]\n\ndef rand_ints_nodup(ran1, ran2, rantime):\n\n  ns = []\n\n  while len(ns) < rantime:\n\n    n = random.randint(ran1, ran2)\n\n    if not n in ns:\n\n      ns.append(n)\n\n  return sorted(ns)\n\n\n\ndef rand_query(ran1, ran2, rantime):\n\n  r_query = []\n\n  while len(r_query) < rantime:\n\n    n_q = rand_ints_nodup(ran1, ran2, 2)\n\n    if not n_q in r_query:\n\n      r_query.append(n_q)\n\n  return sorted(r_query)\n\n\n\nfrom collections import defaultdict, deque, Counter\n\nfrom sys import exit\n\nfrom decimal import *\n\nfrom heapq import heapify, heappop, heappush\n\nimport math\n\nimport random\n\nimport string\n\nfrom copy import deepcopy\n\nfrom itertools import combinations, permutations, product\n\nfrom operator import mul, itemgetter\n\nfrom functools import reduce\n\nfrom bisect import bisect_left, bisect_right\n\n\n\nimport sys\n\nsys.setrecursionlimit(1000000000)\n\nmod = 10 ** 9 + 7\n\n\n\n#############\n\n# Main Code #\n\n#############\n\n\n\nN = getN()\n\nlogk = N.bit_length()\n\n\n\n# 漸化式にできるなら行列計算に落とし込める\n\n# A[n] = A[n - 1] + A[n - 3]なので\n\n# [a2, a1, a0] = [0, 0, 1]\n\n# [[1, 1, 0], [0, 0, 1], [1, 0, 0]]のN乗をすれば\n\n# [an+2, an+1, an] が出る\n\n\n\ndp = [[[0, 0, 0] for i in range(3)] for i in range(logk)]\n\ndp[0] = [\n\n[1, 1, 0],\n\n[0, 0, 1],\n\n[1, 0, 0]\n\n]\n\n\n\n# 行列掛け算 O(n3)かかる\n\ndef array_cnt(ar1, ar2):\n\n    h = len(ar1)\n\n    w = len(ar2[0])\n\n    row = ar1\n\n    col = []\n\n    for j in range(w):\n\n        opt = []\n\n        for i in range(len(ar2)):\n\n            opt.append(ar2[i][j])\n\n        col.append(opt)\n\n\n\n    res = [[[0, 0] for i in range(w)] for i in range(h)]\n\n    for i in range(h):\n\n        for j in range(w):\n\n            cnt = 0\n\n            for x, y in zip(row[i], col[j]):\n\n                cnt += x * y\n\n            res[i][j] = cnt\n\n            res[i][j] %= mod\n\n    return res\n\n\n\nfor i in range(1, logk):\n\n    dp[i] = array_cnt(dp[i - 1], dp[i - 1])\n\n\n\nans = [[0, 0, 1]]\n\nfor i in range(logk):\n\n    if N & (1 << i):\n\n        ans = array_cnt(ans, dp[i])\n\nprint((ans[0][2] % mod))", "score": 0.0}
{"golden_code": "import numpy as np\n\n\n\neval(input())\n\nA = np.array(list(map(int, input().split())))\n\n\n\nans = 0\n\nwhile(all(A%2==0)):\n\n    A = A/2\n\n    ans += 1\n\n\n\nprint(ans)\n", "generated_code": "n = int(eval(input()))\n\np = 1\n\nfor i in range(n):\n\n    p = (p * (i+1)) % (10 ** 9 + 7)\n\nprint(p)", "score": 0.0}
{"golden_code": "import numpy as np\n\n\n\nA = np.zeros((3,3),int)\n\nfor i in range(3):\n\n    A[i,:] = np.array([int(x) for x in input().split()])\n\n    \n\nN = int(eval(input()))\n\n\n\nfor _ in range(N):\n\n    b = int(eval(input()))\n\n    A[A==b] = 0\n\n\n\nans = 'No'\n\nif np.sum(A[0,:])==0 or np.sum(A[1,:])==0 or np.sum(A[2,:])==0 or np.sum(A[:,0])==0 or np.sum(A[:,1])==0 or np.sum(A[:,2])==0 or np.sum(A[0,0]+A[1,1]+A[2,2])==0 or np.sum(A[0,2]+A[1,1]+A[2,0])==0:\n\n   ans = 'Yes'\n\n\n\nprint(ans)\n", "generated_code": "def c_remainder_minimization_2019(L, R):\n\n    ans = float('inf')\n\n    for i in range(L, min(R, L + 2019)):\n\n        for j in range(i + 1, min(R + 1, L + 2020)):\n\n            ans = min(ans, (i * j) % 2019)\n\n            if ans == 0:\n\n                return 0\n\n    return ans\n\n\n\nL, R = [int(i) for i in input().split()]\n\nprint((c_remainder_minimization_2019(L, R)))", "score": 0.0}
{"golden_code": "import sys\n\nsys.setrecursionlimit(1 << 25)\n\nreadline = sys.stdin.buffer.readline\n\nread = sys.stdin.readline  # 文字列読み込む時はこっち\n\nra = range\n\nenu = enumerate\n\n\n\n\n\ndef exit(*argv, **kwarg):\n\n    print(*argv, **kwarg)\n\n    sys.exit()\n\n\n\n\n\ndef mina(*argv, sub=1): return list(map(lambda x: x - sub, argv))\n\n# 受け渡されたすべての要素からsubだけ引く.リストを*をつけて展開しておくこと\n\n\n\n\n\ndef a_int(): return int(readline())\n\n\n\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\n\n\n\ndef _make_minimum_prime(N: int):\n\n    # xの最小の素因数表を作成\n\n    min_prime = [x for x in range(N + 1)]\n\n    # min_prime[0] = 0  # 0と1は素数ではない\n\n    # min_prime[1] = 1\n\n    for i in range(2, int(N ** 0.5) + 1):\n\n        if min_prime[i] == i:  # 素数だったら更新\n\n            for j in range(2 * i, N + 1, i):  # iの倍数は素数でない\n\n                if min_prime[j] == j:\n\n                    min_prime[j] = i\n\n    return min_prime\n\n\n\n\n\nmin_prime = _make_minimum_prime(10**6)\n\n\n\n\n\nfrom collections import Counter\n\n\n\n\n\ndef fast_factorization(N: int):\n\n    # -> List[Tuple[int,int]] (素数,冪数)を格納\n\n    # 最小素数配列min_primeを使ってO(log N)で因数分解\n\n    if N == 1:\n\n        return Counter()  # 1は素数ではない\n\n    # 素因数分解\n\n    arr = []\n\n    tmp = N\n\n    while tmp != 1:\n\n        p = min_prime[tmp]\n\n        tmp //= p\n\n        arr.append(p)\n\n\n\n    return Counter(arr)\n\n\n\n\n\nMOD = 10**9 + 7\n\nINF = 2**31  # 2147483648 > 10**9\n\n# default import\n\nfrom collections import defaultdict, Counter, deque\n\nimport random\n\nfrom math import gcd\n\n\n\n\n\nN = a_int()\n\nA = ints()\n\nrandom.shuffle(A)\n\n\n\n# setかはすぐわかる\n\n# setでなければ not coprime\n\n# pairは互いに素かをみればいいのか\n\n# つまり因数分解して足してったときにすべての素数のべき数が1以下であれば良い\n\n\n\ng_set = 0\n\ncnt = defaultdict(lambda: 0)\n\nflg = 1  # pairwiseであるフラグ\n\nfor a in A:\n\n    g_set = gcd(g_set, a)\n\n    if flg:\n\n        for p, n in fast_factorization(a).items():\n\n            if cnt[p] != 0:\n\n                flg = 0\n\n            cnt[p] += n\n\n\n\n\n\n# print(cnt)\n\n# for v in cnt.values():\n\n#     if v > 1:\n\n#         flg = 0\n\n#         break\n\n\n\nif g_set > 1:\n\n    print('not coprime')\n\nelif flg:\n\n    print('pairwise coprime')\n\nelse:\n\n    print('setwise coprime')\n", "generated_code": "# 2019-11-12 22:21:08(JST)\n\nimport sys\n\n# import collections\n\n# import math\n\n# from string import ascii_lowercase, ascii_uppercase, digits\n\n# from bisect import bisect_left as bi_l, bisect_right as bi_r\n\n# import itertools\n\n# from functools import reduce\n\n# import operator as op\n\n# from scipy.misc import comb # float\n\n# import numpy as np \n\n\n\ndef main():\n\n    s = sys.stdin.readline().rstrip()\n\n    \n\n    permitted = 'ACGT'\n\n    continuous_count = []\n\n    count = 0\n\n\n\n    for i in range(len(s)):\n\n        char = s[i]\n\n        if char in permitted:\n\n            count += 1\n\n        else:\n\n            continuous_count.append(count)\n\n            count = 0\n\n        if i == len(s) - 1:\n\n            continuous_count.append(count)\n\n    \n\n    if not continuous_count:\n\n        print((len(s)))\n\n    else:\n\n        print((max(continuous_count)))\n\n\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n", "score": 0.0}
{"golden_code": "ia = [int(i) for i in input().split(\" \")]\n\nW=ia[0]\n\nH=ia[1]\n\nx=ia[2]\n\ny=ia[3]\n\nr=ia[4]\n\nprint((\"Yes\" if 0<=x-r and x+r<=W and 0<=y-r and y+r<=H else \"No\"))", "generated_code": "import sys\n\nimport itertools\n\nimport collections\n\n\n\n\n\ndef solve():\n\n    readline = sys.stdin.buffer.readline\n\n    mod = 10 ** 9 + 7\n\n    n = int(readline())\n\n    xy = []\n\n    for i in range(n):\n\n        a = int(readline())\n\n        for j in range(a):\n\n            x, y = list(map(int, readline().split()))\n\n            xy.append([i, x-1, y])\n\n    ls = collections.deque([v for v in itertools.product([True, False], repeat=n)])\n\n    for i, x, y in xy:\n\n        for j in range(len(ls)):\n\n            lsv = ls.pop()\n\n            if not lsv[i] or lsv[x] == bool(y):\n\n                ls.appendleft(lsv)\n\n    t = 0\n\n    for i in range(len(ls)):\n\n        t = max(t, ls[i].count(True))\n\n    print(t)\n\n\n\n\n\nif __name__ == '__main__':\n\n    solve()\n", "score": 0.0}
{"golden_code": "res = []\n\nwhile True:\n\n    s = eval(input())\n\n    if s == '0':\n\n        break\n\n\n\n    res.append(sum([int(x) for x in s]))\n\n\n\nfor e in res:\n\n    print(e)", "generated_code": "N, M = list(map(int, input().split()))\n\n\n\nleft = 1\n\nright = N\n\n\n\nfor _ in range(M):\n\n    l, r = list(map(int, input().split()))\n\n\n\n    if left < l:\n\n        left = l\n\n    if right > r:\n\n        right = r\n\n\n\nans = right - left\n\n\n\nprint((ans + 1 if ans >= 0 else 0))\n", "score": 0.0}
{"golden_code": "N,K=list(map(int,input().split()))\n\na = [[0]*N]*K\n\na = [[0 for n in range(N)] for k in range(K)]\n\n\n\nfor k in range(K):\n\n    d=int(eval(input()))\n\n    have_k=list(map(int,input().split()))\n\n    for h in have_k:\n\n        a[k][h-1]=1\n\n\n\nan=[0]*N\n\nfor k in range(K):\n\n  for n in range(N):\n\n    an[n] = an[n]+a[k][n]\n\n\n\nresult=0\n\nfor i in an:\n\n  if i == 0:\n\n    result+=1\n\n\n\nprint(result)", "generated_code": "def main():\n\n    #1. input\n\n    a, b = list(map(int, input().split()))\n\n\n\n    ans = 0\n\n\n\n    #2. from A to B\n\n    for i in range(a, b+1):\n\n        #2.1. judge if the number is palindromic\n\n        if (str(i)[0]==str(i)[4]) and (str(i)[1]==str(i)[3]):\n\n            ans = ans+1\n\n\n\n    #3. output\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()", "score": 0.0}
{"golden_code": "import sys\n\ninput = sys.stdin.readline\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\nK, S = list(map(int, input().split()))\n\n\n\nans = 0\n\nfor z in range(K+1):\n\n    for y in range(K+1):\n\n        x = S - (z + y)\n\n        if x >= 0 and x <= K:\n\n            ans += 1\n\nprint(ans)", "generated_code": "from collections import deque\n\n\n\n\n\ndef solve(n, a_list, b_list):\n\n\n\n    # create graph\n\n    g = {i: dict() for i in range(n)}\n\n    for i in range(n - 1):\n\n        a, b = a_list[i] - 1, b_list[i] - 1\n\n        g[a][b] = -1\n\n        g[b][a] = -1\n\n\n\n    k = max([len(g[a]) for a in range(n)])\n\n\n\n    used_color = [-1] * n\n\n    used_color[0] = k - 1\n\n    # BFS\n\n    queue = deque([0])\n\n    while len(queue) > 0:\n\n        p = queue.popleft()\n\n        c = used_color[p]\n\n        for q in list(g[p].keys()):\n\n            if used_color[q] != -1:\n\n                continue\n\n            c += 1\n\n            c %= k\n\n            # print(p, q, c)\n\n            g[p][q] = c\n\n            g[q][p] = c\n\n            used_color[q] = c\n\n            queue.append(q)\n\n\n\n    res_list = [0] * (n - 1)\n\n    for i in range(n - 1):\n\n        res_list[i] = g[a_list[i] - 1][b_list[i] - 1] + 1\n\n\n\n    return k, res_list\n\n\n\n\n\ndef main():\n\n    n = int(eval(input()))\n\n    a_list = [0] * (n - 1)\n\n    b_list = [0] * (n - 1)\n\n    for i in range(n - 1):\n\n        a, b = list(map(int, input().split()))\n\n        a_list[i] = a\n\n        b_list[i] = b\n\n\n\n    k, res_list = solve(n, a_list, b_list)\n\n    print(k)\n\n    for i in range(n - 1):\n\n        print((res_list[i]))\n\n\n\n\n\ndef test():\n\n    print((solve(3, [1, 2], [2, 3])))\n\n    print((solve(8, [1, 2, 2, 2, 4, 5, 6], [2, 3, 4, 5, 7, 6, 8])))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    # test()\n\n    main()\n", "score": 0.0}
{"golden_code": "import copy\n\n\n\nn=int(eval(input()))\n\norg_set=set([i for i in range(1,10**5)])\n\nedges=[]\n\nrelations={}\n\nnodes=[]\n\nfor i in range(n-1):\n\n    a,b=list(map(int,input().split(\" \")))\n\n    edges.append([a,b])\n\n    relations.setdefault(a,[]).append(b)\n\n    nodes.append([])\n\nnodes.append([])\n\nnodes.append([])\n\n\n\nmax_color=0\n\nfor start in range(1,n+1):\n\n    targets=relations.get(start,[])\n\n    color=1\n\n    for target in targets:\n\n        if color in nodes[start]:\n\n            color+=1\n\n        else:\n\n            pass\n\n        nodes[target].append(color)\n\n        if color>=max_color:\n\n            max_color=color\n\n        color+=1\n\n\n\nprint(max_color)\n\nfor edge in edges:\n\n    print((nodes[edge[1]][0]))", "generated_code": "from collections import deque\n\nfrom copy import deepcopy\n\n\n\nn,m=list(map(int,input().split()))\n\nl=[list(map(int,input().split())) for i in range(m)]\n\n\n\ndef BFS(m):\n\n  t_l=deepcopy(l)\n\n  del t_l[m]\n\n\n\n  tree=[[] for j in range(n)]\n\n  for a,b in t_l:\n\n    a-=1\n\n    b-=1\n\n    tree[a].append(b)\n\n    tree[b].append(a)\n\n\n\n  dist=[-1 for i in range(n)]\n\n  dist[0]=0\n\n\n\n  que=deque()\n\n  que.append(0)\n\n\n\n  while que:\n\n    x=que.popleft()\n\n    for i in tree[x]:\n\n      if dist[i]==-1:\n\n        que.append(i)\n\n        dist[i]=dist[x]+1\n\n\n\n  return dist\n\n\n\nans=0\n\nfor i in range(m):\n\n  d=BFS(i)\n\n  if -1 in d:\n\n    ans+=1\n\n\n\nprint(ans)", "score": 0.0}
{"golden_code": "x = int(eval(input()))\n\na = 0\n\nb = 0\n\nfor i in range(-120, 120):\n\n    for j in range(-120, 120):\n\n        if i ** 5 - j ** 5 == x:\n\n            a = i\n\n            b = j\n\nprint((a, b))\n", "generated_code": "N, D = list(map(int, input().split()))\n\nimport math\n\nprint((math.ceil(N/(2*D+1))))", "score": 0.0}
{"golden_code": "a, b = list(map(int, input().split()))\n\ntmp=str(a)\n\nc=0\n\nfor i in range(a,b+1):\n\n    tmp=str(i)\n\n    tmp2=\"\"\n\n    for s in range(len(tmp)):\n\n        tmp2=tmp2+tmp[len(tmp)-1-s]\n\n    if tmp==tmp2:\n\n        c=c+1\n\nprint(c)", "generated_code": "a_1=list(map(int, input().split()))\n\na_2=list(map(int, input().split()))\n\na_3=list(map(int, input().split()))\n\n\n\nc=[a_1,a_2,a_3]\n\n\n\nN=int(eval(input()))\n\n\n\nb=[int(eval(input())) for _ in range(N)]\n\n\n\nfor i in range(3):\n\n    for j in range(3):\n\n        if c[i][j] in b:\n\n            c[i][j]=0\n\n            \n\n            \n\ni=0\n\nif c[0][0]==0 and c[0][1]==0 and c[0][2]==0:\n\n    i+=1\n\nif c[1][0]==0 and c[1][1]==0 and c[1][2]==0:\n\n    i+=1\n\nif c[2][0]==0 and c[2][1]==0 and c[2][2]==0:\n\n    i+=1\n\nif c[0][0]==0 and c[1][0]==0 and c[2][0]==0:\n\n    i+=1\n\nif c[0][1]==0 and c[1][1]==0 and c[2][1]==0:\n\n    i+=1\n\nif c[0][2]==0 and c[1][2]==0 and c[2][2]==0:\n\n    i+=1\n\nif c[0][0]==0 and c[1][1]==0 and c[2][2]==0:\n\n    i+=1\n\nif c[0][2]==0 and c[1][1]==0 and c[2][0]==0:\n\n    i+=1\n\n    \n\nif i>0:\n\n    print(\"Yes\")\n\nelse:\n\n  print(\"No\")", "score": 0.0}
{"golden_code": "# C - Go to School\n\ndef main():\n\n    import numpy as np\n\n    n = int(input())\n\n    a = list(map(int, input().split()))\n\n    a = np.array(a)\n\n    a = np.argsort(a)\n\n    for i in a:\n\n        print(i+1,end=\" \")\n\n\n\nif __name__ ==  \"__main__\":\n\n    main()\n", "generated_code": "n, m = list(map(int, input().split()))\n\nl, r = [0] * m, [0] * m\n\nfor i in range(m):\n\n    l[i], r[i] = list(map(int, input().split()))\n\nprint((max(min(r) - max(l) + 1, 0)))", "score": 0.0}
{"golden_code": "import numpy as np\n\n\n\nS=eval(input())\n\nS=np.array([1 if s=='B' else 0 for s in S])\n\n\n\nprint((np.abs(np.diff(S)).sum()))\n", "generated_code": "N = int(eval(input()))\n\n\n\ncount = 0\n\nfor i in range(1, N + 1):\n\n    if len(str(i)) % 2 != 0:\n\n        count += 1\n\nprint(count)", "score": 0.0}
{"golden_code": "def binarySearch():\n\n    n = int(eval(input()))\n\n    S = set(map(int, input().split()))\n\n    q = int(eval(input()))\n\n    T = set(map(int, input().split()))\n\n    print((len(S.intersection(T))))\n\n    \n\n\n\nbinarySearch()", "generated_code": "from collections import defaultdict\n\n\n\nN, K, *A = list(map(int, open(0).read().split()))\n\n\n\nx = [0] * (N + 1)\n\nfor i in range(N):\n\n    x[i + 1] = x[i] + A[i]\n\n    \n\ny = [(x[i] - i) % K for i in range(N + 1)]\n\n\n\nctr = defaultdict(int)\n\nans = 0\n\nfor j in range(N + 1):\n\n    ans += ctr[y[j]]\n\n    ctr[y[j]] += 1\n\n    if j - K + 1 >= 0:\n\n        ctr[y[j - K + 1]] -= 1\n\nprint(ans)\n", "score": 0.0}
{"golden_code": "from collections import defaultdict\n\n\n\nN, K, *A = list(map(int, open(0).read().split()))\n\n\n\nS = [0] * (N + 1)\n\nfor i in range(N):\n\n    S[i + 1] = S[i] + A[i]\n\n\n\nd = defaultdict(int)\n\nans = 0\n\nfor j in range(N + 1):\n\n    v = (S[j] - j) % K\n\n    ans += d[v]\n\n    d[v] += 1\n\n    if j >= K - 1:\n\n        d[(S[j - K + 1] - (j - K + 1)) % K] -= 1\n\n        \n\nprint(ans)\n", "generated_code": "\n\nX = int(eval(input()))\n\nfor a in range(-120, 120):\n\n    find = False\n\n    for b in range(-120, 120):\n\n        x = a**5-b**5\n\n        if x == X:\n\n            find = True\n\n            print((a, b))\n\n            break\n\n    if find:\n\n        break\n", "score": 0.0}
{"golden_code": "answer = 0\n\nN = int(eval(input()))\n\nA = list(map(int,input().split()))\n\nfor i in range(N) :\n\n    while A[i] % 2 == 0 :\n\n        A[i] = A[i] / 2\n\n        answer += 1\n\nprint(answer)\n\n\n", "generated_code": "N = int(eval(input()))\n\n\n\nA = [int(i) for i in input().split()]\n\n\n\nB = [0]*N\n\nfor i in range(N):\n\n    B[A[i]-1] = i+1\n\n\n\nfor i in range(N):\n\n    print((B[i]))\n", "score": 0.0}
{"golden_code": "icase=0\n\nif icase==0:\n\n    n,m=list(map(int, input().split()))\n\n    a=[]\n\n    b=[]\n\n    for i in range(m):\n\n        ai,bi=list(map(int, input().split()))\n\n        a.append(ai)\n\n        b.append(bi)\n\nelif icase==1:\n\n    n=6\n\n    m=5\n\n#    a=[[1],[2],[3],[4],[5]]\n\n#    b=[[2],[3],[4],[5],[6]]\n\n    a=[1,2,3,4,5]\n\n    b=[2,3,4,5,6]\n\nelif icase==2:\n\n    n=7\n\n    m=7\n\n    a=[1,2,3,4,4,5,6]\n\n    b=[3,7,4,5,6,6,7]\n\n\n\n    \n\nvtx=[]\n\nfor i in range(n):\n\n    vtx.append([i+1])\n\nicnt=0\n\n\n\nfor j in range(m):    \n\n    vtx1=vtx.copy()\n\n    a1=a.copy()\n\n    b1=b.copy()\n\n    del a1[j]\n\n    del b1[j]\n\n    \n\n    for i in range(m-1):\n\n        for v1 in vtx1:\n\n            if a1[i] in v1:\n\n                if not b1[i] in v1:\n\n                    for v2 in vtx1:\n\n                        if v1!=v2:\n\n                            if b1[i] in v2:\n\n                                break\n\n                    vtx1.remove(v1)\n\n                    vtx1.remove(v2)\n\n                    v3=v1+v2\n\n                    vtx1.append(v3)\n\n#        print(a[i],b[i],len(vtx1),vtx1)\n\n#    print(len(vtx1),vtx1)\n\n    if len(vtx1)!=1:\n\n        icnt=icnt+1\n\nprint(icnt)        ", "generated_code": "# E - This Message Will Self-Distruct in 5s\n\n\n\nfrom collections import Counter\n\n\n\nn = int(eval(input()))\n\na = list(map(int, input().split()))\n\nassert len(a) == n\n\n\n\n# Aj - j の各値の個数\n\ndiff = Counter(a[j] - (j+1) for j in range(n))\n\n\n\n# Aj - j == -Ai - i となる(i,j)の個数\n\ncount = sum(diff[-a[i] - (i+1)] for i in range(n))\n\nprint(count)\n", "score": 0.0}
{"golden_code": "#E\n\nfrom itertools import accumulate\n\nfrom bisect import bisect_left\n\ndef main():\n\n    n,m=list(map(int,input().split()))\n\n    A=list(map(int,input().split()))\n\n    A.sort()\n\n    \n\n    def count(k):\n\n        cnt=0\n\n        for a in A:\n\n            cnt+=bisect_left(A,k-a)\n\n        return cnt\n\n    \n\n    ok=0\n\n    ng=10**10+1\n\n    while ng-ok>1:\n\n        mid=(ok+ng)//2\n\n        if count(mid)<n**2-m:\n\n            ok=mid\n\n        else:\n\n            ng=mid\n\n    border=ok\n\n    \n\n    k=n**2-count(border)\n\n    Acc=[0]+list(accumulate(A))\n\n    s=Acc[-1]\n\n    ans=0\n\n    for a in A:\n\n        idx=bisect_left(A,border-a)\n\n        ans+=a*(n-idx)+(s-Acc[idx])\n\n    ans-=border*(k-m)\n\n    print(ans)\n\n    \n\nif __name__=='__main__':\n\n    main()", "generated_code": "from collections import deque\n\nfrom copy import deepcopy\n\n\n\nn,m=list(map(int,input().split()))\n\nl=[list(map(int,input().split())) for i in range(m)]\n\n\n\ndef BFS(m):\n\n  t_l=deepcopy(l)\n\n  del t_l[m]\n\n\n\n  tree=[[] for j in range(n)]\n\n  for a,b in t_l:\n\n    a-=1\n\n    b-=1\n\n    tree[a].append(b)\n\n    tree[b].append(a)\n\n\n\n  dist=[-1 for i in range(n)]\n\n  dist[0]=0\n\n\n\n  que=deque()\n\n  que.append(0)\n\n\n\n  while que:\n\n    x=que.popleft()\n\n    for i in tree[x]:\n\n      if dist[i]==-1:\n\n        que.append(i)\n\n        dist[i]=dist[x]+1\n\n\n\n  return dist\n\n\n\nans=0\n\nfor i in range(m):\n\n  d=BFS(i)\n\n  if -1 in d:\n\n    ans+=1\n\n\n\nprint(ans)", "score": 0.0}
{"golden_code": "# E - This Message Will Self-Distruct in 5s\n\n\n\nfrom collections import Counter\n\n\n\nn = int(eval(input()))\n\na = list(map(int, input().split()))\n\nassert len(a) == n\n\n\n\n# Ai + Aj == j - i\n\n# Aj - j == -Ai - i\n\n\n\n# Aj - j の各値の個数\n\ndiff = Counter(a[j] - (j+1) for j in range(n))\n\n\n\n# 各Aiについて Aj - j == -Ai - i となるjの個数を数える\n\ncount = 0\n\nfor i in range(n):\n\n    diff[a[i] - (i+1)] -= 1  # i自身を取り除く\n\n    count += diff[-a[i] - (i+1)]\n\n\n\nprint(count)\n", "generated_code": "# -*- coding: utf-8 -*-\n\n\n\nimport sys\n\nfrom collections import Counter\n\n\n\ndef input(): return sys.stdin.readline().strip()\n\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\n\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\n\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\n\ndef ceil(x, y=1): return int(-(-x // y))\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\n\ndef Yes(): print('Yes')\n\ndef No(): print('No')\n\ndef YES(): print('YES')\n\ndef NO(): print('NO')\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = 10 ** 18\n\nMOD = 10 ** 9 + 7\n\n\n\nN, M, L = MAP()\n\nA = LIST()\n\nB = LIST()\n\n\n\nmn = min(A) + min(B)\n\nfor _ in range(L):\n\n    x, y, c = MAP()\n\n    x -= 1; y -= 1\n\n    mn = min(mn, A[x] + B[y] - c)\n\nprint(mn)\n", "score": 0.0}
{"golden_code": "import numpy as np\n\ncookies = np.array([int(x) for x in input().split()])\n\n\n\nif any(cookies%2):\n\n  ans = 0\n\nelif cookies[0] == cookies[1] == cookies[2]:\n\n  ans = -1\n\nelse:\n\n  ans = 0\n\n  while True:\n\n    if not any(cookies%2):\n\n      cookies = cookies//2\n\n      ans += 1\n\n      continue\n\n    if all(cookies%2):\n\n      ans += 1\n\n    break\n\nprint(ans)", "generated_code": "a_1=list(map(int, input().split()))\n\na_2=list(map(int, input().split()))\n\na_3=list(map(int, input().split()))\n\n\n\nc=[a_1,a_2,a_3]\n\n\n\nN=int(eval(input()))\n\n\n\nb=[int(eval(input())) for _ in range(N)]\n\n\n\nfor i in range(3):\n\n    for j in range(3):\n\n        if c[i][j] in b:\n\n            c[i][j]=0\n\n            \n\n            \n\ni=0\n\nif c[0][0]==0 and c[0][1]==0 and c[0][2]==0:\n\n    i+=1\n\nif c[1][0]==0 and c[1][1]==0 and c[1][2]==0:\n\n    i+=1\n\nif c[2][0]==0 and c[2][1]==0 and c[2][2]==0:\n\n    i+=1\n\nif c[0][0]==0 and c[1][0]==0 and c[2][0]==0:\n\n    i+=1\n\nif c[0][1]==0 and c[1][1]==0 and c[2][1]==0:\n\n    i+=1\n\nif c[0][2]==0 and c[1][2]==0 and c[2][2]==0:\n\n    i+=1\n\nif c[0][0]==0 and c[1][1]==0 and c[2][2]==0:\n\n    i+=1\n\nif c[0][2]==0 and c[1][1]==0 and c[2][0]==0:\n\n    i+=1\n\n    \n\nif i>0:\n\n    print(\"Yes\")\n\nelse:\n\n  print(\"No\")", "score": 0.0}
{"golden_code": "from statistics import mean\n\n\n\ninputCount = int(eval(input()))\n\nprices = [int(eval(input())) for lp in range(inputCount)]\n\naverage = mean(prices)\n\nprint((int(average)))\n\n\n", "generated_code": "import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nimport numpy as np\n\n\n\nN = int(readline())\n\nA = np.array(read().split(),np.int32)\n\n\n\nanswer = 0\n\nfor _ in range(32):\n\n    A = A[A%2 == 0]\n\n    answer += len(A)\n\n    A >>= 1\n\n\n\nprint(answer)", "score": 0.0}
{"golden_code": "\n\nn,m,k = list(map(int,input().split()))\n\n#１回押すと変わるマス　= N * M -1\n\n#２回目押すと黒に変わるマス N * M -1 -2\n\n# 3 = N * M -1 -4\n\n\n\ncnt = 0\n\nfor i in range(n+1):\n\n    for j in range(m + 1):\n\n        cnt = i * m + j * n -2 * i * j\n\n        if cnt == k:\n\n            print(\"Yes\")\n\n            exit()\n\nprint(\"No\")\n", "generated_code": "A, B = list(map(int, input().split()))\n\nx = list(range(1,10))\n\ny = list(range(10))\n\ncount = 0\n\nfor p in x:\n\n    for q in y:\n\n        for r in y:\n\n            sakasama = int(str(p)+str(q)+str(r)+str(q)+str(p))\n\n            if A <= sakasama <= B:\n\n                count += 1\n\nprint(count)", "score": 0.0}
{"golden_code": "n = int(input())\n\na = list(map(int, input().split()))\n\n\n\ntmp = [[e, n - i] for i, e in enumerate(a)]\n\ntmp.sort(reverse=True)\n\n\n\naa = [[e, n - i] for e, i in tmp] + [[0, -1]]\n\n\n\nv_prev, i_prev = aa[0]\n\ni = 0\n\nans = [0] * n\n\nsm = 0\n\nwhile i < n:\n\n    while aa[i][1] >= i_prev:\n\n        sm += aa[i][0]\n\n        i += 1\n\n\n\n    ans[i_prev] += sm - aa[i][0] * i\n\n    sm = aa[i][0] * i\n\n    v_prev, i_prev = aa[i]\n\n\n\nprint(*ans, sep=\"\\n\")\n", "generated_code": "# 2019-11-12 22:21:08(JST)\n\nimport sys\n\n# import collections\n\n# import math\n\n# from string import ascii_lowercase, ascii_uppercase, digits\n\n# from bisect import bisect_left as bi_l, bisect_right as bi_r\n\n# import itertools\n\n# from functools import reduce\n\n# import operator as op\n\n# from scipy.misc import comb # float\n\n# import numpy as np \n\n\n\ndef main():\n\n    s = sys.stdin.readline().rstrip()\n\n    \n\n    permitted = 'ACGT'\n\n    continuous_count = []\n\n    count = 0\n\n\n\n    for i in range(len(s)):\n\n        char = s[i]\n\n        if char in permitted:\n\n            count += 1\n\n        else:\n\n            continuous_count.append(count)\n\n            count = 0\n\n        if i == len(s) - 1:\n\n            continuous_count.append(count)\n\n    \n\n    if not continuous_count:\n\n        print((len(s)))\n\n    else:\n\n        print((max(continuous_count)))\n\n\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n", "score": 0.0}
{"golden_code": "# -*- coding: utf-8 -*-\n\n\n\nA, B, C, X, Y = list(map(int, input().split()))\n\n\n\ncost = int(1e10)\n\nfor num_ac in range(0, int(1e5) + 1):\n\n    num_A = max(0, X - num_ac)\n\n    num_B = max(0, Y - num_ac)\n\n    c = 2 * C * num_ac + A * num_A + B * num_B\n\n    cost = min(c, cost)\n\nprint(cost)", "generated_code": "import sys\n\nsys.setrecursionlimit(10**6)\n\nif sys.platform in (['ios','darwin','win32']):\n\n\tsys.stdin=open('Untitled.txt')\n\ninput = sys.stdin.readline\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return [int(s) for s in input().split()]\n\n\n\ndef main():\n\n\tS = input().rstrip()\n\n\tbcnt = 0\n\n\tans = 0\n\n\tfor i in range(len(S)):\n\n\t\tif S[i] == 'B': bcnt += 1\n\n\t\tif S[i] == 'W': ans += bcnt\n\n\t\n\n\tprint(ans)\n\n\n\nif __name__ == '__main__':\n\n\tmain()", "score": 0.0}
{"golden_code": "n,m=list(map(int,input().split()))\n\na=[int(x) for x in input().split()]\n\nb=[0 for x in range(n+1)]\n\nl=list([0])\n\n\n\nfor i in range(1,n+1):\n\n  b[i]=b[i-1]+a[i-1]\n\n\n\nfor i in range(1,n+1):\n\n  l.append(b[i]%m)\n\n\n\nd=list()\n\nl.sort()\n\nt,c=0,1\n\nfor i in range(1,n+1):\n\n  if l[i]==l[i-1]:\n\n    c+=1\n\n  else:\n\n    if c!=1:\n\n      t += c*(c-1)//2\n\n      c=1\n\n\n\nif c!=1:\n\n  t += c*(c-1)//2  \n\n\n\nprint(t)\n", "generated_code": "while 1:\n\n    a=0\n\n    n,x=list(map(int,input().split()))\n\n    if n==0:break\n\n    for i in range(1,n-1):\n\n        for j in range(i+1,n):\n\n            c=x-i-j\n\n            if c>j and c<=n:a+=1\n\n    print(a)", "score": 0.0}
{"golden_code": "X,Y,Z,K = list(map(int,input().split()))\n\nA = list(map(int,input().split()))\n\nB = list(map(int,input().split()))\n\nC = list(map(int,input().split()))\n\nasort,bsort,csort = sorted(A,reverse=True),sorted(B,reverse=True),sorted(C,reverse=True)\n\nprint((asort[0] + bsort[0] + csort[0]))\n\nalready = [[0,0,0]]\n\nx,y,z = 0,0,0\n\nplace_sum = []\n\ncheck = []\n\nfor k in range(K - 1):\n\n    if [x + 1,y,z] not in already and x + 1 < X:\n\n        already.append([x + 1,y,z])\n\n        place_sum.append([x + 1,y,z])\n\n        check.append(asort[x + 1] + bsort[y] + csort[z])\n\n    if [x,y + 1,z] not in already and y + 1 < Y:\n\n        already.append([x,y + 1,z])\n\n        place_sum.append([x,y + 1,z])\n\n        check.append(asort[x] + bsort[y + 1] + csort[z])\n\n    if [x,y,z + 1] not in already and z + 1 < Z:\n\n        already.append([x,y,z + 1])\n\n        place_sum.append([x,y,z + 1])\n\n        check.append(asort[x] + bsort[y] + csort[z + 1])\n\n    print((max(check)))\n\n    x,y,z = place_sum[check.index(max(check))][0],place_sum[check.index(max(check))][1],place_sum[check.index(max(check))][2]\n\n    place_sum.pop(check.index(max(check)))\n\n    check.remove(max(check))", "generated_code": "N = int(eval(input()))\n\n\n\ncount = 0\n\nfor i in range(1, N + 1):\n\n    if len(str(i)) % 2 != 0:\n\n        count += 1\n\nprint(count)", "score": 0.0}
{"golden_code": "while 1:\n\n    ans=0\n\n    n,x=list(map(int,input().split()))\n\n    if n:\n\n        for i in range(1,n-1):\n\n            for j in range(i+1,n):\n\n                for k in range(j+1,n+1):\n\n                    if i+j+k==x:ans+=1\n\n    else:break\n\n    print(ans)", "generated_code": "N = int(eval(input()))\n\nnums = [0 for i in range(100)]\n\nfor i in range(1, N + 1):\n\n    i = str(i)\n\n    nums[int(i[0] + i[-1])] += 1\n\nans = 0\n\nfor i in range(1, 10):\n\n    for j in range(i, 10):\n\n        i = str(i)\n\n        j = str(j)\n\n        if i != j:\n\n            ans += nums[int(i + j)] * nums[int(j + i)] * 2\n\n        else:\n\n            n = nums[int(i + j)]\n\n            ans += n * (n - 1)\n\n            ans += n\n\nprint(ans)", "score": 0.0}
{"golden_code": "A,B = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(A,B+1):\n\n    i = str(i)\n\n    if i[0] == i[4]:\n\n        if i[1] == i[3]:\n\n            ans += 1\n\n        else:\n\n            ans += 0\n\n    else:\n\n        ans += 0\n\nprint(ans)", "generated_code": "n = int(eval(input()))\n\nfrom functools import reduce\n\nprint((reduce(lambda x,y:x*y%1000000007,list(range(1,n+1)))))", "score": 0.0}
{"golden_code": "import sys\n\ninput = sys.stdin.buffer.readline\n\nfrom collections import defaultdict\n\nimport copy\n\n\n\ndef main():\n\n    N,M = list(map(int,input().split()))\n\n    d = defaultdict(int)\n\n    MOD = 10**9+7\n\n    R = 10**5+100\n\n    fac = [0 for _ in range(R+1)]\n\n    fac[0],fac[1] = 1,1\n\n    inv = copy.deepcopy(fac)\n\n    invfac = copy.deepcopy(fac)\n\n    \n\n    for i in range(2,R+1):\n\n        fac[i] = (fac[i-1]*i)%MOD\n\n        inv[i] = MOD-(MOD//i)*inv[MOD%i]%MOD\n\n        invfac[i] = (invfac[i-1]*inv[i])%MOD\n\n        \n\n    def coef(x,y):\n\n        num = (((fac[x+y]*invfac[y])%MOD)*invfac[x]%MOD)\n\n        return num\n\n\n\n    while M%2 == 0:\n\n        d[2] += 1\n\n        M //= 2\n\n    f = 3\n\n    while f ** 2 <= M:\n\n        if M % f == 0:\n\n            d[f] += 1\n\n            M //= f\n\n        else:\n\n            f += 2\n\n    if M != 1:\n\n        d[M] += 1\n\n    \n\n    l = list(d.values())\n\n    ans = 1\n\n    for num in l:\n\n        ans *= coef(num,N-1)\n\n        ans %= MOD\n\n        \n\n    print(ans)\n\n    \n\nif __name__ == \"__main__\":\n\n    main()", "generated_code": "a_1=list(map(int, input().split()))\n\na_2=list(map(int, input().split()))\n\na_3=list(map(int, input().split()))\n\n\n\nc=[a_1,a_2,a_3]\n\n\n\nN=int(eval(input()))\n\n\n\nb=[int(eval(input())) for _ in range(N)]\n\n\n\nfor i in range(3):\n\n    for j in range(3):\n\n        if c[i][j] in b:\n\n            c[i][j]=0\n\n            \n\n            \n\ni=0\n\nif c[0][0]==0 and c[0][1]==0 and c[0][2]==0:\n\n    i+=1\n\nif c[1][0]==0 and c[1][1]==0 and c[1][2]==0:\n\n    i+=1\n\nif c[2][0]==0 and c[2][1]==0 and c[2][2]==0:\n\n    i+=1\n\nif c[0][0]==0 and c[1][0]==0 and c[2][0]==0:\n\n    i+=1\n\nif c[0][1]==0 and c[1][1]==0 and c[2][1]==0:\n\n    i+=1\n\nif c[0][2]==0 and c[1][2]==0 and c[2][2]==0:\n\n    i+=1\n\nif c[0][0]==0 and c[1][1]==0 and c[2][2]==0:\n\n    i+=1\n\nif c[0][2]==0 and c[1][1]==0 and c[2][0]==0:\n\n    i+=1\n\n    \n\nif i>0:\n\n    print(\"Yes\")\n\nelse:\n\n  print(\"No\")", "score": 0.0}
{"golden_code": "# 2019-11-12 22:21:08(JST)\n\nimport sys\n\n# import collections\n\n# import math\n\n# from string import ascii_lowercase, ascii_uppercase, digits\n\n# from bisect import bisect_left as bi_l, bisect_right as bi_r\n\nimport itertools\n\n# from functools import reduce\n\n# import operator as op\n\n# from scipy.misc import comb # float\n\n# import numpy as np \n\n\n\ndef main():\n\n    s = sys.stdin.readline().rstrip()\n\n    \n\n    all_words = []\n\n    for i in range(1, len(s) + 1):\n\n        for letters in itertools.product('ATCG', repeat=i):\n\n            word = ''.join(letters)\n\n            all_words.append(word)\n\n    \n\n    for i in range(len(all_words)-1, 0-1, -1):\n\n        if all_words[i] in s:\n\n            print((len(all_words[i])))\n\n            sys.exit()\n\n    print((0))\n\n\n\n\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n", "generated_code": "N = int(eval(input()))\n\n\n\ncount = 0\n\nfor i in range(1, N + 1):\n\n    if len(str(i)) % 2 != 0:\n\n        count += 1\n\nprint(count)", "score": 0.0}
{"golden_code": "k = int(eval(input()))\n\nx = 1\n\n\n\nif k%7 != 0:\n\n    mod = 9*k\n\nelse:\n\n    mod = 9*k//7\n\n\n\nfor i in range(10**6):\n\n    x = x*10%mod\n\n    if x == 1:\n\n        print((i + 1))\n\n        exit()\n\n\n\nprint((-1))", "generated_code": "a_1=list(map(int, input().split()))\n\na_2=list(map(int, input().split()))\n\na_3=list(map(int, input().split()))\n\n\n\nc=[a_1,a_2,a_3]\n\n\n\nN=int(eval(input()))\n\n\n\nb=[int(eval(input())) for _ in range(N)]\n\n\n\nfor i in range(3):\n\n    for j in range(3):\n\n        if c[i][j] in b:\n\n            c[i][j]=0\n\n            \n\n            \n\ni=0\n\nif c[0][0]==0 and c[0][1]==0 and c[0][2]==0:\n\n    i+=1\n\nif c[1][0]==0 and c[1][1]==0 and c[1][2]==0:\n\n    i+=1\n\nif c[2][0]==0 and c[2][1]==0 and c[2][2]==0:\n\n    i+=1\n\nif c[0][0]==0 and c[1][0]==0 and c[2][0]==0:\n\n    i+=1\n\nif c[0][1]==0 and c[1][1]==0 and c[2][1]==0:\n\n    i+=1\n\nif c[0][2]==0 and c[1][2]==0 and c[2][2]==0:\n\n    i+=1\n\nif c[0][0]==0 and c[1][1]==0 and c[2][2]==0:\n\n    i+=1\n\nif c[0][2]==0 and c[1][1]==0 and c[2][0]==0:\n\n    i+=1\n\n    \n\nif i>0:\n\n    print(\"Yes\")\n\nelse:\n\n  print(\"No\")", "score": 0.0}
{"golden_code": "S = int(input())\n\n\n\nif S >= 3600:\n\n    h=S//3600\n\n    m=S%3600//60\n\n    s=S%60\n\nelif 3600 > S >= 60:\n\n    h=0\n\n    m=S//60\n\n    s=S%60\n\nelse:\n\n    h=m=0\n\n    s=S\n\nprint(h, m, s, sep=\":\")\n", "generated_code": "N, D = list(map(int, input().split()))\n\nimport math\n\nprint((math.ceil(N/(2*D+1))))", "score": 0.0}
{"golden_code": "def c_remainder_minimization_2019(L, R):\n\n    ans = float('inf')\n\n    for i in range(L, min(R, L + 2019)):\n\n        for j in range(i + 1, min(R + 1, L + 2020)):\n\n            ans = min(ans, (i * j) % 2019)\n\n    return ans\n\n\n\nL, R = [int(i) for i in input().split()]\n\nprint((c_remainder_minimization_2019(L, R)))", "generated_code": "# 2019-11-12 22:21:08(JST)\n\nimport sys\n\n# import collections\n\n# import math\n\n# from string import ascii_lowercase, ascii_uppercase, digits\n\n# from bisect import bisect_left as bi_l, bisect_right as bi_r\n\n# import itertools\n\n# from functools import reduce\n\n# import operator as op\n\n# from scipy.misc import comb # float\n\n# import numpy as np \n\n\n\ndef main():\n\n    s = sys.stdin.readline().rstrip()\n\n    \n\n    permitted = 'ACGT'\n\n    continuous_count = []\n\n    count = 0\n\n\n\n    for i in range(len(s)):\n\n        char = s[i]\n\n        if char in permitted:\n\n            count += 1\n\n        else:\n\n            continuous_count.append(count)\n\n            count = 0\n\n        if i == len(s) - 1:\n\n            continuous_count.append(count)\n\n    \n\n    if not continuous_count:\n\n        print((len(s)))\n\n    else:\n\n        print((max(continuous_count)))\n\n\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n", "score": 0.0}
{"golden_code": "k,s=list(map(int,input().split()))\n\ncnt=0\n\nfor i in range(k+1):\n\n    for j in range(k+1):\n\n        if 0 <= s-i-j <= k:\n\n            cnt+=1\n\nprint(cnt)", "generated_code": "import heapq\n\nX,Y,Z,K = list(map(int,input().split()))\n\nA = list(map(int,input().split()))\n\nB = list(map(int,input().split()))\n\nC = list(map(int,input().split()))\n\nasort,bsort,csort = sorted(A,reverse=True),sorted(B,reverse=True),sorted(C,reverse=True)\n\nalready = [[0,0,0]]\n\nprint((asort[0] + bsort[0] + csort[0]))\n\nx,y,z = 0,0,0\n\ncheck = []\n\nfor k in range(K - 1):\n\n    if [x + 1,y,z] not in already and x + 1 < X:\n\n        already.append([x + 1,y,z])\n\n        heapq.heappush(check,(-(asort[x + 1] + bsort[y] + csort[z]),x + 1,y,z))\n\n    if [x,y + 1,z] not in already and y + 1 < Y:\n\n        already.append([x,y + 1,z])\n\n        heapq.heappush(check,(-(asort[x] + bsort[y + 1] + csort[z]),x,y + 1,z))\n\n    if [x,y,z + 1] not in already and z + 1 < Z:\n\n        already.append([x,y,z + 1])\n\n        heapq.heappush(check,(-(asort[x] + bsort[y] + csort[z + 1]),x,y,z + 1))\n\n    maxsum = heapq.heappop(check)\n\n    print((-maxsum[0]))\n\n    x,y,z = maxsum[1],maxsum[2],maxsum[3]", "score": 0.0}
{"golden_code": "import numpy as np\n\nN_1=list(map(int, input().split()))\n\nN_2=list(map(int, input().split()))\n\nN_3=list(map(int, input().split()))\n\nN=int(eval(input()))\n\na=[int(eval(input())) for i in range(N)]\n\n\n\nn=np.array([N_1,N_2,N_3])\n\n\n\nfor a_n in a:\n\n    if a_n in n:\n\n        n[n==a_n]=0\n\n    else:\n\n        pass\n\ni=0\n\n    \n\nif np.all(n[0:,0]==0)==True:\n\n    i=+1\n\n    \n\nelif np.all(n[0:,1]==0)==True:\n\n    i+=1\n\n    \n\nelif np.all(n[0:,2]==0)==True:\n\n    i+=1\n\n    \n\nelif np.all(n[0,0:]==0)==True:\n\n    i+=1\n\n    \n\nelif np.all(n[1,0:]==0)==True:\n\n    i+=1\n\n\n\nelif np.all(n[2,0:]==0)==True:\n\n    i+=1\n\n\n\nelif n[0,0]==0 and n[1,1]==0  and n[2,2] ==0:\n\n    i+=1\n\n    \n\nelif n[0,2]==0 and n[1,1]==0 and n[2,0] ==0:\n\n    i+=1\n\n    \n\nif i>0:\n\n    print(\"Yes\")\n\nelse:\n\n    print(\"No\")", "generated_code": "n,m=list(map(int,input().split()))\n\ndp=[0]*(n+3)\n\na=[int(eval(input())) for i in range(m)]\n\nmod=10**9+7\n\nfor i in range(m):\n\n    dp[a[i]]=-1\n\n\n\ndp[0]=1\n\nif dp[1]!=-1:\n\n    dp[1]+=dp[0]\n\n\n\nfor i in range(n+1):\n\n    if dp[i+2]==-1:\n\n        continue\n\n    if dp[i]!=-1:\n\n        dp[i+2]+=dp[i]\n\n    if dp[i+1]!=-1:\n\n        dp[i+2]+=dp[i+1]\n\n    dp[i+2]%=mod\n\nprint((dp[n]%mod))", "score": 0.0}
{"golden_code": "def main():\n\n    from itertools import product\n\n\n\n    N = int(eval(input()))\n\n\n\n    g = []\n\n    for _ in range(N):\n\n        a = int(eval(input()))\n\n        t = []\n\n        for _ in range(a):\n\n            x, y = list(map(int, input().split()))\n\n            x -= 1\n\n            t.append((x, y))\n\n        g.append(t)\n\n\n\n    def is_ok(prd):\n\n        for j, bl in enumerate(prd):\n\n            if bl:\n\n                for x, y in g[j]:\n\n                    if prd[x] != y:\n\n                        return False\n\n        return True\n\n\n\n    ans = 0\n\n    for prd in product([0, 1], repeat=N):\n\n        *prd, = prd  # list化\n\n        if is_ok(prd):\n\n            ans = max(ans, prd.count(1))\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n\n\n\n# bit演算しようとしてはまった\n", "generated_code": "S = int(eval(input()))\n\n\n\nif S == 1 or S ==2:\n\n  print((0))\n\nelif S == 3 or S == 4 or S == 5:\n\n  print((1))\n\nelse:\n\n  #初期化\n\n  dp = [0]*S\n\n  dp[2] = 1\n\n  dp[3] = 1\n\n  dp[4] = 1\n\n  dp_S = 0\n\n  #dp\n\n  for i in range(5,S):\n\n    dp_S += dp[i-3] \n\n    dp[i] = 1+dp_S\n\n\n\n  print((dp[S-1]%1000000007))", "score": 0.0}
{"golden_code": "from bisect import *\n\nn = int(eval(input()))\n\na = list(map(int,input().split()))\n\nb = list(map(int,input().split()))\n\nc = list(map(int,input().split()))\n\n\n\na = sorted(a)\n\nc = sorted(c)\n\n\n\nrec = 0\n\nfor i in range(n):\n\n    temp = b[i]\n\n    l = bisect_left(a, temp)\n\n    r = bisect_right(c, temp)\n\n    rec += l * (n - r)\n\nprint(rec)", "generated_code": "A, B = list(map(int, input().split()))\n\ncnt = 0\n\nfor i in range(A, B+1):\n\n    l = str(i)\n\n    if l == l[::-1]:\n\n        cnt += 1\n\n\n\nprint(cnt)\n", "score": 0.0}
{"golden_code": "import numpy as np\n\n\n\nN = int(eval(input()))\n\nA = np.array(input().split(),dtype=np.int32)\n\n\n\ndef ord(n):\n\n  cnt = 0\n\n  while not n&1:\n\n    n >>= 1\n\n    cnt += 1\n\n  return cnt\n\n\n\nnp_ord = np.frompyfunc(ord,1,1)\n\nanswer = np_ord(A).sum()\n\nprint(answer)", "generated_code": "n = int(eval(input()))\n\na_list = list(map(int, input().split()))\n\n\n\nstatus = True\n\nexecute = 0\n\nwhile status:\n\n    for i in range(n):\n\n        if a_list[i] % 2 == 1:\n\n            status = False\n\n            break\n\n        else:\n\n            a_list[i] = a_list[i] / 2\n\n    if status:\n\n        execute += 1\n\nprint(execute)\n", "score": 0.0}
{"golden_code": "N=int(eval(input()))\n\nd=list(map(int, input().split()))\n\n\n\nimport numpy as np\n\nd = np.array(d)\n\n\n\nprint(( ( (np.sum(d))**2 - np.sum(d**2) ) // 2 ))\n", "generated_code": "limit=50\n\ngraph=[[False]*limit for i in range(limit)]\n\nvisited=[]*limit\n\n\n\ndef dfs(v,n,graph,visited):\n\n    visited[v]=True\n\n    for v2 in range(n):\n\n        if graph[v][v2]==False:\n\n            continue\n\n        if visited[v2]==True:\n\n            continue\n\n        dfs(v2,n,graph,visited)\n\n\n\nn,m=list(map(int,input().split()))\n\na=[0]*m\n\nb=[0]*m\n\nfor i in range(m):\n\n    ai,bi=list(map(int,input().split()))\n\n    a[i]=ai-1\n\n    b[i]=bi-1\n\n    graph[a[i]][b[i]]=True\n\n    graph[b[i]][a[i]]=True\n\n    \n\nans=0 \n\nfor i in range(m):\n\n    graph[a[i]][b[i]]=False\n\n    graph[b[i]][a[i]]=False\n\n    visited=[False]*n\n\n    dfs(0,n,graph,visited)\n\n    bridge=False\n\n    for j in range(n):\n\n        if visited[j]==False:\n\n            bridge=True\n\n    if bridge:\n\n        ans+=1\n\n    graph[a[i]][b[i]]=True\n\n    graph[b[i]][a[i]]=True\n\n    \n\nprint(ans)", "score": 0.0}
{"golden_code": "from copy import deepcopy\n\nfrom scipy.sparse.csgraph import floyd_warshall\n\n\n\nn,m=list(map(int,input().split()))\n\nl=[list(map(int,input().split())) for i in range(m)]\n\n\n\ncnt=0\n\nfor i in range(m):\n\n  ll=deepcopy(l)\n\n  del ll[i]\n\n\n\n  d=[[float('inf')]*n for i in range(n)]\n\n  for i in range(n):\n\n    d[i][i]=0\n\n\n\n  for a,b in ll:\n\n    a-=1\n\n    b-=1\n\n    d[a][b]=1\n\n    d[b][a]=1\n\n\n\n  s=floyd_warshall(d)\n\n  for i in s:\n\n    if float('inf') in i:\n\n      cnt+=1\n\n      break\n\n\n\nprint(cnt)", "generated_code": "import sys\n\ndef input(): return sys.stdin.readline().rstrip()\n\ndef main():\n\n    x=int(eval(input()))\n\n    for a in range(-118,120):\n\n        for diff in range(238):\n\n            if a**5-(a-diff)**5>10**9:\n\n                break\n\n            if a**5-(a-diff)**5==x:\n\n                print((a,a-diff))\n\n                sys.exit()\n\n\n\nif __name__=='__main__':\n\n    main()", "score": 0.0}
{"golden_code": "import itertools\n\nimport numpy as np\n\n\n\nN = int(eval(input()))\n\nstl = []\n\nfor i in range(N):\n\n    a = int(eval(input()))\n\n    for _ in range(a):\n\n        x, y = list(map(int, input().split()))\n\n        stl.append((i, x-1, y))\n\ndl = np.array(list(itertools.product([0, 1], repeat=N)), np.bool)\n\nfor i, x, y in stl:\n\n    bl = (dl[:, i] == False) | (dl[:, x] == bool(y))\n\n    dl = dl[bl]\n\nres = dl.sum(axis=1).max()\n\nprint(res)\n", "generated_code": "a, b, c = list(map(int, input().split()))\n\nif a == b == c and a%2 == 0:\n\n  print((-1))\n\nelif a%2 or b%2 or c%2:\n\n  print((0))\n\nelse:\n\n  ans = 0\n\n  while a%2 == b%2 == c%2 == 0:\n\n    a, b, c = (b+c)//2, (a+c)//2, (a+b)//2\n\n    ans += 1\n\n  print(ans)", "score": 0.0}
{"golden_code": "N = int(eval(input()))\n\ncount = [[0 for _ in range(9)] for _ in range(9)]\n\nfor i in range(1, N + 1):\n\n    if str(i)[0] != \"0\" and str(i)[-1] != \"0\":\n\n        count[int(str(i)[0]) - 1][int(str(i)[-1]) - 1] += 1\n\nans = 0\n\nfor i in range(0, 9):\n\n    for k in range(0, 9):\n\n        ans += count[i][k] * count[k][i]\n\nprint(ans)", "generated_code": "A, B, C, X, Y = list(map(int, input().split()))\n\n\n\nans = 0\n\nif A + B > 2 * C:\n\n    z = min(X, Y)\n\n    X -= z\n\n    Y -= z\n\n    ans += 2 * z * C\n\n\n\n# 偏り分\n\nif 2 * C < A:\n\n    k = X\n\n    X -= k\n\n    Y -= k\n\n    ans += 2 * C * k\n\nif 2 * C < B:\n\n    k = Y\n\n    X -= k\n\n    Y -= k\n\n    ans += 2 * C * k\n\n\n\n# あまり分\n\nans += A * max(0, X) + B * max(0, Y)\n\nprint(ans)", "score": 0.0}
{"golden_code": "n, m = list(map(int, input().split()))\n\ngate = []\n\nl, r = list(map(int, input().split()))\n\nfor i in range(1, m):\n\n    m, s = list(map(int, input().split()))\n\n    if l < m:\n\n        l = m\n\n    if s < r:\n\n        r = s\n\nprint((len([i for i in range(l, r + 1)])))", "generated_code": "# 2019-11-12 22:21:08(JST)\n\nimport sys\n\n# import collections\n\n# import math\n\n# from string import ascii_lowercase, ascii_uppercase, digits\n\n# from bisect import bisect_left as bi_l, bisect_right as bi_r\n\n# import itertools\n\n# from functools import reduce\n\n# import operator as op\n\n# from scipy.misc import comb # float\n\n# import numpy as np \n\n\n\ndef main():\n\n    s = sys.stdin.readline().rstrip()\n\n    \n\n    permitted = 'ACGT'\n\n    continuous_count = []\n\n    count = 0\n\n\n\n    for i in range(len(s)):\n\n        char = s[i]\n\n        if char in permitted:\n\n            count += 1\n\n        else:\n\n            continuous_count.append(count)\n\n            count = 0\n\n        if i == len(s) - 1:\n\n            continuous_count.append(count)\n\n    \n\n    if not continuous_count:\n\n        print((len(s)))\n\n    else:\n\n        print((max(continuous_count)))\n\n\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n", "score": 0.0}
{"golden_code": "N, D = list(map(int, input().split()))\n\npoint = []\n\nfor i in range(N):\n\n    point.append(list(map(int, input().split())))\n\n\n\nct = 0\n\nD2 = D * D\n\nfor i in point:\n\n    if (i[0]**2 + i[1]**2) <= D2:\n\n        ct += 1\n\n\n\nprint(ct)", "generated_code": "# encoding:utf-8\n\n\n\ninput = list(map(int, input().split()))\n\nW, H, x, y, r = input\n\n\n\nif x - r < 0 or x + r > W:\n\n\tprint(\"No\")\n\nelif y - r < 0 or y + r > H:\n\n\tprint(\"No\")\n\nelse:\n\n\tprint(\"Yes\")", "score": 0.0}
{"golden_code": "from math import factorial as f\n\nn = int(eval(input()))\n\nprint((f(n) % (10 ** 9 + 7)))", "generated_code": "N, M = list(map(int, input().split()))\n\n\n\nleft = 1\n\nright = N\n\n\n\nfor _ in range(M):\n\n    l, r = list(map(int, input().split()))\n\n\n\n    if left < l:\n\n        left = l\n\n    if right > r:\n\n        right = r\n\n\n\nans = right - left\n\n\n\nprint((ans + 1 if ans >= 0 else 0))\n", "score": 0.0}
{"golden_code": "import math\n\nN = int(eval(input()))\n\nans = 10**12\n\nfor i in range(1,10**6+1):\n\n  j = math.ceil(N/(i+1))\n\n  if (1+i)*j == N:\n\n    ans = min(i+j-1,ans)\n\n  if i == 10**6 and ans == 10**12:\n\n    ans = N-1\n\n    break\n\nprint(ans)", "generated_code": "def main():\n\n    #1. input\n\n    a, b = list(map(int, input().split()))\n\n\n\n    ans = 0\n\n\n\n    #2. from A to B\n\n    for i in range(a, b+1):\n\n        #2.1. judge if the number is palindromic\n\n        if (str(i)[0]==str(i)[4]) and (str(i)[1]==str(i)[3]):\n\n            ans = ans+1\n\n\n\n    #3. output\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()", "score": 0.0}
{"golden_code": "n,t=int(input()),list(map(int,input().split()));T=sum(t)\n\nprint(*[T-t[i-1]+j for i,j in [list(map(int,input().split())) for _ in range(int(input()))]],sep='\\n')\n", "generated_code": "N = int(eval(input()))\n\n\n\nA = [0] * (N + 1)\n\nB = [0] * (N + 1)\n\nC = [0] * (N + 1)\n\n\n\nfor i in range(1, N + 1):\n\n    A[i], B[i], C[i] = list(map(int, input().split()))\n\n\n\ndp = [[0] * 3 for _ in range(N + 1)]\n\nfor i in range(1, N + 1):\n\n    dp[i][0] = A[i] + max(dp[i-1][1], dp[i-1][2])\n\n    dp[i][1] = B[i] + max(dp[i-1][2], dp[i-1][0])\n\n    dp[i][2] = C[i] + max(dp[i-1][0], dp[i-1][1])\n\n\n\nprint((max(dp[N])))", "score": 0.0}
{"golden_code": "import sys\n\nsys.setrecursionlimit(100000)\n\n\n\ndef intinput(): return list(map(int,sys.stdin.readline().split()))\n\n\n\nfib={0:0,1:1,2:1}\n\nfor i in range(3,100003):\n\n    fib[i]=fib[i-1]+fib[i-2]\n\n  #  fib.append(fib[i-1]+fib[i-2])\n\n\n\nn,m=intinput()\n\nmod=10**9+7\n\na=[int(sys.stdin.readline()) for _ in range(m)]\n\nif m!=0:\n\n    l=[a[0]]\n\n    for i in range(len(a)-1):\n\n        l.append(a[i+1]-a[i]-1)\n\n    l.append(n-a[-1])\n\n    k=1\n\n    for i in l:\n\n        k=fib[i]*k%mod\n\n    print((k%mod))\n\nelse:\n\n    print((fib[n+1]%mod))", "generated_code": "\n\nn,m,k = list(map(int,input().split()))\n\n\n\nfor i in range(n+1):\n\n    for j in range(m+1):\n\n        if i*(m-j) + j*(n-i) == k:\n\n            print(\"Yes\")\n\n            exit()\n\nprint(\"No\")\n", "score": 0.0}
{"golden_code": "import numpy as np\n\nn=int(eval(input()))\n\na=np.array(list(map(int,input().split())))\n\nb=0\n\nwhile np.all(a%2==0):\n\n\ta=a/2\n\n\tb+=1\n\n\t\n\nprint(b)", "generated_code": "a,b,c,x,y = list(map(int,input().split()))\n\na1 = a*x + b*y\n\na2 = max(x,y) * 2*c\n\nif y >= x:\n\n    a3 = 2*c*x + (y-x)*b\n\nelse:\n\n    a3 = 2*c*y + (x-y)*a\n\nprint((min(a1,a2,a3)))", "score": 0.0}
{"golden_code": "a,b,c,x,y = list(map(int,input().split()))\n\nprice = 10**10\n\nfor k in range(10**5+1):\n\n    re = 2*c*k + max(0,x-k)*a + max(0,y-k)*b\n\n    price = min(re,price)\n\nprint(price)", "generated_code": "n,m=list(map(int,input().split()))\n\na=[int(x) for x in input().split()]\n\nl=list([0])\n\n\n\nb=0\n\nfor i in range(0,n):\n\n  b += a[i]\n\n  l.append(b%m)\n\nl.append(m)\n\n\n\nl.sort()\n\nt,c=0,1\n\nfor i in range(1,n+2):\n\n  if l[i]==l[i-1]:\n\n    c+=1\n\n  else:\n\n    if c!=1:\n\n      t += c*(c-1)//2\n\n      c=1\n\nprint(t)\n", "score": 0.0}
{"golden_code": "import numpy as np\n\nN = int(eval(input()))\n\n\n\nabc = np.array([list(map(int, input().split())) for i in range(N)])\n\n\n\ndp = [[0]*3 for i in range(N+1)]\n\n\n\nfor i in range(1, N+1):\n\n    dp[i][0] = max(dp[i - 1][1] + abc[i - 1][1], dp[i - 1][2] + abc[i - 1][2])\n\n    dp[i][1] = max(dp[i - 1][0] + abc[i - 1][0], dp[i - 1][2] + abc[i - 1][2])\n\n    dp[i][2] = max(dp[i - 1][1] + abc[i - 1][1], dp[i - 1][0] + abc[i - 1][0])\n\n\n\nprint((max(dp[-1])))\n", "generated_code": "a,b,c=list(map(int, input().split()))\n\nans=0\n\nwhile a%2==0 and b%2==0 and c%2==0 and ans<10000:\n\n    a,b,c=b//2+c//2,a//2+c//2,a//2+b//2\n\n    ans+=1\n\nif ans==10000:ans=-1\n\nprint(ans)", "score": 0.0}
{"golden_code": "S = list(eval(input()))\n\nnum_one = S.count(\"1\")\n\nnum_zero = S.count(\"0\")\n\nans = min(num_one, num_zero) *2\n\nprint(ans)\n", "generated_code": "def divide_two(c, z):\n\n    min_b = z // 2 + 1\n\n    max_b = min(c-1, z-1)\n\n    return max(max_b-min_b+1, 0)\n\n    \n\n\n\nnum_set = []\n\ncnt = 0\n\nwhile True:\n\n    n, x = list(map(int, input().split()))\n\n    if (n, x) == (0, 0):\n\n        break\n\n    else:\n\n        num_set.append((n, x))\n\n        cnt += 1\n\n\n\nfor i in range(cnt):\n\n    num_count = 0\n\n    (n, x) = num_set[i]\n\n    for c in range(x//3, n+1):\n\n        num_count += divide_two(c, x-c)\n\n    print(num_count)\n", "score": 0.0}
{"golden_code": "X = int(eval(input()))\n\nfor A in range(-200, 200):\n\n    for B in range(-200, 200):\n\n        if A**5 - B**5 == X:\n\n            print((A, B))\n\n            break\n\n    else:\n\n        continue\n\n    break", "generated_code": "n,m=list(map(int,input().split()))\n\na=[int(x) for x in input().split()]\n\nl=list([0])\n\n\n\nb=0\n\nfor i in range(0,n):\n\n  b += a[i]\n\n  l.append(b%m)\n\nl.append(m)\n\n\n\nl.sort()\n\nt,c=0,1\n\nfor i in range(1,n+2):\n\n  if l[i]==l[i-1]:\n\n    c+=1\n\n  else:\n\n    if c!=1:\n\n      t += c*(c-1)//2\n\n      c=1\n\nprint(t)\n", "score": 0.0}
{"golden_code": "from collections import Counter\n\n\n\nimport numpy as np\n\n\n\n\n\ndef part(pts, a, ans):\n\n    b = np.dot(pts, [np.sin(a), np.cos(a)])\n\n    c = np.argmax(b, axis=0)\n\n    for i, v in list(Counter(c).items()):\n\n        ans[i] += v\n\n\n\n\n\ndef solve(n, pts):\n\n    ans = [0] * n\n\n    part(pts, np.linspace(0, np.pi, 100000, endpoint=False), ans)\n\n    part(pts, np.linspace(np.pi, 2 * np.pi, 100000, endpoint=False), ans)\n\n    return [v / 200000 for v in ans]\n\n\n\n\n\nn = int(eval(input()))\n\npts = np.array([list(map(int, input().split())) for _ in range(n)])\n\nprint(('\\n'.join(map(str, solve(n, pts)))))\n", "generated_code": "n, m = list(map(int, input().split()))\n\nl, r = [0] * m, [0] * m\n\nfor i in range(m):\n\n    l[i], r[i] = list(map(int, input().split()))\n\nprint((max(min(r) - max(l) + 1, 0)))", "score": 0.0}
{"golden_code": "import sys\n\nsys.setrecursionlimit(10**6)\n\nif sys.platform in (['ios','darwin','win32']):\n\n\tsys.stdin=open('Untitled.txt')\n\ninput = sys.stdin.readline\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return [int(s) for s in input().split()]\n\n\n\ndef main():\n\n\tS = input().rstrip()\n\n\tbcnt = 0\n\n\tA = []\n\n\tfor i in range(len(S)):\n\n\t\tif S[i] == 'B': bcnt += 1\n\n\t\tif S[i] == 'W': A.append(bcnt)\n\n\t\n\n\tprint((sum(A)))\n\n\n\nif __name__ == '__main__':\n\n\tmain()", "generated_code": "def divide_all(a):\n\n    success = True\n\n    for i, n in enumerate(a):\n\n        if n % 2 != 0:\n\n            success = False\n\n            break\n\n        a[i] = n / 2\n\n    if success is False:\n\n        return (a, False)\n\n    return (a, True)\n\n\n\nn = int(eval(input()))\n\na = list(map(int, input().split()))\n\nc = 0\n\nwhile True:\n\n    a, r = divide_all(a)\n\n    if r is False:\n\n        break\n\n    c += 1\n\n\n\n\n\nprint(c)\n", "score": 0.0}
{"golden_code": "import math\n\ninput_num = int(eval(input()))\n\nnum_sqrt = int(math.sqrt(input_num))\n\n\n\nminimam = input_num\n\nfor i in range(num_sqrt+1,0,-1):\n\n    q, mod = divmod(input_num, i)\n\n    distance = q + i -2\n\n    if mod == 0 and minimam > distance:\n\n        minimam = distance\n\nprint(minimam)", "generated_code": "x = int(eval(input()))\n\nfor i in range(-120, 120):\n\n    for j in range(-120, 120):\n\n        if i ** 5 - j ** 5 == x:\n\n            print((i, j))\n\n            exit()\n", "score": 0.0}
{"golden_code": "x = int(eval(input()))\n\nprint((0 if x==1 else 1))", "generated_code": "# coding: utf-8\n\nimport sys\n\ninput = sys.stdin.readline\n\n\n\ndef f(n, abc):\n\n    dp = [0] * 3\n\n    for i in range(1, n + 1):\n\n        a, b, c = abc[i - 1]\n\n        dp = [ max(dp[1] + a, dp[2] + a), \\\n\n               max(dp[0] + b, dp[2] + b), \\\n\n               max(dp[0] + c, dp[1] + c) ]\n\n    return(max(dp))\n\n\n\nn = int(eval(input()))    # 1 <= n <= 10^5\n\nabc = [list(map(int, input().rstrip().split())) for _ in range(n)]\n\n\n\nprint((f(n, abc)))\n", "score": 0.0}
{"golden_code": "a,b,c=list(map(int, input().split()))\n\nd=0\n\nwhile d<10**5:\n\n    if a%2==1 or b%2==1 or c%2==1:break\n\n    a,b,c=b/2+c/2,a/2+c/2,a/2+b/2\n\n    d+=1\n\nelse:d=-1\n\nprint(d)", "generated_code": "# でつoO(YOU PLAY WITH THE CARDS YOU'RE DEALT..)\n\nimport sys\n\ndef main(N, K, A, F):\n\n    A.sort()\n\n    F.sort(reverse=True)\n\n\n\n    def f(x):\n\n        sy = 0\n\n        for a, f in zip(A, F):\n\n            m = a * f\n\n            if m > x:\n\n                sy += (m - x + f - 1) // f\n\n        return sy\n\n\n\n    under = -1\n\n    hi = 10**12 + 1\n\n    while hi - under > 1:\n\n        m = (hi + under) // 2\n\n        if f(m) <= K: hi = m\n\n        else: under = m\n\n    print(hi)\n\n\n\nif __name__ == '__main__':\n\n    input = sys.stdin.readline\n\n    N, K = list(map(int, input().split()))\n\n    *A, = list(map(int, input().split()))\n\n    *F, = list(map(int, input().split()))\n\n    main(N, K, A, F)\n", "score": 0.0}
{"golden_code": "\n\nX = int(eval(input()))\n\nfor a in range(-200, 200):\n\n    find = False\n\n    for b in range(-200, 200):\n\n        x = a**5-b**5\n\n        if x == X:\n\n            find = True\n\n            print((a, b))\n\n            break\n\n    if find:\n\n        break\n", "generated_code": "N, W = list(map(int, input().split()))\n\nL = [list(map(int, input().split())) for i in range(N)]\n\nV = 0\n\nfor i in range(N):\n\n  V += L[i][1]\n\n\n\ndp = [10**9+1] * (V + 1)\n\ndp[0] = 0\n\nfor i in range(N):\n\n    for j in range(V, -1, -1):\n\n        dp[j] = min(dp[j], dp[j-L[i][1]] + L[i][0])\n\nans = 0\n\nfor j in range(V+1):\n\n    if  W >= dp[j]:\n\n        ans = max(ans, j)\n\nprint(ans)", "score": 0.0}
{"golden_code": "N, M = list(map(int, input().split()))\n\nLR = [list(map(int, input().split())) for _ in range(M)]\n\n\n\nleft = 1\n\nright = N\n\n\n\nfor l, r in LR:\n\n    if left < l:\n\n        left = l\n\n    if right > r:\n\n        right = r\n\n\n\nans = right - left\n\n\n\nprint((ans + 1 if ans >= 0 else 0))\n", "generated_code": "from collections import deque\n\n\n\n\n\ndef solve(n, a_list, b_list):\n\n\n\n    # create graph\n\n    g = {i: dict() for i in range(n)}\n\n    for i in range(n - 1):\n\n        a, b = a_list[i] - 1, b_list[i] - 1\n\n        g[a][b] = -1\n\n        g[b][a] = -1\n\n\n\n    k = max([len(g[a]) for a in range(n)])\n\n\n\n    used_color = [-1] * n\n\n    used_color[0] = k - 1\n\n    # BFS\n\n    queue = deque([0])\n\n    while len(queue) > 0:\n\n        p = queue.popleft()\n\n        c = used_color[p]\n\n        for q in list(g[p].keys()):\n\n            if used_color[q] != -1:\n\n                continue\n\n            c += 1\n\n            c %= k\n\n            # print(p, q, c)\n\n            g[p][q] = c\n\n            g[q][p] = c\n\n            used_color[q] = c\n\n            queue.append(q)\n\n\n\n    res_list = [0] * (n - 1)\n\n    for i in range(n - 1):\n\n        res_list[i] = g[a_list[i] - 1][b_list[i] - 1] + 1\n\n\n\n    return k, res_list\n\n\n\n\n\ndef main():\n\n    n = int(eval(input()))\n\n    a_list = [0] * (n - 1)\n\n    b_list = [0] * (n - 1)\n\n    for i in range(n - 1):\n\n        a, b = list(map(int, input().split()))\n\n        a_list[i] = a\n\n        b_list[i] = b\n\n\n\n    k, res_list = solve(n, a_list, b_list)\n\n    print(k)\n\n    for i in range(n - 1):\n\n        print((res_list[i]))\n\n\n\n\n\ndef test():\n\n    print((solve(3, [1, 2], [2, 3])))\n\n    print((solve(8, [1, 2, 2, 2, 4, 5, 6], [2, 3, 4, 5, 7, 6, 8])))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    # test()\n\n    main()\n", "score": 0.0}
{"golden_code": "import numpy as np\n\nk,n = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nb = np.zeros(n)\n\nfor i in range(0,n-1):\n\n  b[i] = a[i+1] -a[i]\n\n  \n\nb[n-1] = k - a[n-1] + a[0]\n\nans = k - max(b)\n\nprint((int(ans)))", "generated_code": "A, B = list(map(int, input().split()))\n\nx = list(range(1,10))\n\ny = list(range(10))\n\ncount = 0\n\nfor p in x:\n\n    for q in y:\n\n        for r in y:\n\n            sakasama = int(str(p)+str(q)+str(r)+str(q)+str(p))\n\n            if A <= sakasama <= B:\n\n                count += 1\n\nprint(count)", "score": 0.0}
{"golden_code": "import sys\n\ndef input(): return sys.stdin.readline().rstrip()\n\ndef main():\n\n    x=int(eval(input()))\n\n    for i in range(-300,300):\n\n        for j in range(-300,300):\n\n            if i**5-j**5==x:\n\n                print((i,j))\n\n                sys.exit()\n\n\n\nif __name__=='__main__':\n\n    main()", "generated_code": "n = int(eval(input()))\n\np = 1\n\nfor i in range(n):\n\n    p = (p * (i+1)) % (10 ** 9 + 7)\n\nprint(p)", "score": 0.0}
{"golden_code": "N, K = list(map(int, input().split()))\n\nA = list(map(int, input().split()))\n\nF = list(map(int, input().split()))\n\n\n\nA.sort()\n\nF.sort(reverse=True)\n\n\n\n#積をx以下にするために必要な修行回数\n\ndef f(x):\n\n    r = 0\n\n    for i in range(N):\n\n        a, f = A[i], F[i]\n\n        m = a * f\n\n        if m > x:\n\n            r += (m - x + f - 1) // f\n\n    return r\n\n\n\nunder = -1\n\nr = 10**18\n\nwhile r - under > 1:\n\n    m = (under + r) // 2\n\n    if f(m) > K: under = m\n\n    else: r = m\n\nprint(r)", "generated_code": "from math import gcd, ceil\n\n\n\n\n\ndef lcm(a, b):\n\n    return (a*b)//gcd(a, b)\n\n\n\n\n\nn, m = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\n\n\nfor i in range(n):\n\n    a[i] = a[i]//2\n\n\n\nlcm_v = a[0]\n\nfor i in range(1, n):\n\n    lcm_v = lcm(lcm_v, a[i])\n\n\n\nok = True\n\nfor aa in a:\n\n    if (lcm_v//aa) % 2 != 1:\n\n        ok = False\n\n        break\n\nans = 0\n\nif ok:\n\n    ans = ((m//lcm_v)+1)//2\n\nprint(ans)\n", "score": 0.0}
{"golden_code": "import sys\n\n#import numpy as np\n\n\n\ns2nn = lambda s: [int(c) for c in s.split(' ')]\n\nss2nn = lambda ss: [int(s) for s in ss]\n\nss2nnn = lambda ss: [s2nn(s) for s in ss]\n\ni2s = lambda: sys.stdin.readline().rstrip()\n\ni2n = lambda: int(i2s())\n\ni2nn = lambda: s2nn(i2s())\n\nii2ss = lambda n: [sys.stdin.readline().rstrip() for _ in range(n)]\n\nii2nn = lambda n: ss2nn(ii2ss(n))\n\nii2nnn = lambda n: ss2nnn(ii2ss(n))\n\n\n\nN = 10000\n\ndef tokey(i, j, k):\n\n    return i*N*N + j*N + k\n\ndef dekey(n):\n\n    i = int(n / N / N)\n\n    j = int(n / N) % N\n\n    k = n % N\n\n    return i, j, k\n\n\n\ndef main():\n\n    X, Y, Z, K = i2nn()\n\n    A = i2nn()\n\n    B = i2nn()\n\n    C = i2nn()\n\n    A.sort()\n\n    A.reverse()\n\n    B.sort()\n\n    B.reverse()\n\n    C.sort()\n\n    C.reverse()\n\n    Q = [(A[0] + B[0] + C[0], 0, 0, 0)]\n\n    loop = 0\n\n    stored = set()\n\n    def next(i, j, k):\n\n        if i >= X or j >= Y or k >= Z:\n\n            return\n\n        key = tokey(i, j, k)\n\n        if key not in stored:\n\n            stored.add(key)\n\n            n = A[i] + B[j] + C[k]\n\n            Q.append((n, i, j, k))\n\n    while True:\n\n        v = max(Q, key=lambda v: v[0])\n\n        Q.remove(v)\n\n        print((v[0]))\n\n        loop += 1\n\n        if loop >= K:\n\n            break\n\n        next(v[1]+1, v[2], v[3])\n\n        next(v[1], v[2]+1, v[3])\n\n        next(v[1], v[2], v[3]+1)\n\n\n\nmain()\n", "generated_code": "a = int(eval(input(\"\")))\n\nb = input(\"\").split(\" \")\n\nc = 0\n\nd = []\n\n\n\nfor i in range(a):\n\n\tc = 0\n\n\twhile (int(b[i]) % 2 == 0):\n\n\t\tb[i] = int(b[i]) / 2\n\n\t\tc += 1\n\n\td.append(c)\n\nprint((min(d)))", "score": 0.0}
{"golden_code": "from math import factorial as fac\n\n\n\nS = int(eval(input()))\n\nans = 0\n\n\n\nif S == 1 or S == 2:\n\n  print((0))\n\nelif S == 3:\n\n  print((1))\n\nelse:\n\n  for k in range(1,S):\n\n    if S-2*k-1 >= 0 and S-3*k >= 0:\n\n      ans += fac(S-2*k-1)//(fac(k-1)*fac(S-3*k))\n\n  print((ans%1000000007))", "generated_code": "import sys\n\nfrom collections import deque  # 双方向キュー\n\nfrom collections import defaultdict  # 初期化済み辞書\n\nfrom heapq import heapify, heappush, heappop, heappushpop  # プライオリティキュー\n\nfrom bisect import bisect_left, bisect_right  # 二分探索\n\n#import numpy as np  # 1.8.2\n\n#import scipy  # 0.13.3\n\n#sys.setrecursionlimit(int(1e+6))\n\ns2nn = lambda s: [int(c) for c in s.split(' ')]\n\nss2nn = lambda ss: [int(s) for s in ss]\n\nss2nnn = lambda ss: [s2nn(s) for s in ss]\n\ni2s = lambda: sys.stdin.readline().rstrip()\n\ni2n = lambda: int(i2s())\n\ni2nn = lambda: s2nn(i2s())\n\nii2ss = lambda n: [sys.stdin.readline().rstrip() for _ in range(n)]\n\nii2sss = lambda n: [list(sys.stdin.readline().rstrip()) for _ in range(n)]\n\nii2nn = lambda n: ss2nn(ii2ss(n))\n\nii2nnn = lambda n: ss2nnn(ii2ss(n))\n\nMOD = int(1e+9) + 7\n\n\n\ndef main():\n\n    X, Y, Z, K = i2nn()\n\n    A = i2nn()\n\n    B = i2nn()\n\n    C = i2nn()\n\n    A.sort()\n\n    A.reverse()\n\n    B.sort()\n\n    B.reverse()\n\n    C.sort()\n\n    C.reverse()\n\n    s = set()\n\n    hq = []\n\n    n = 0\n\n    heappush(hq, ((A[0] + B[0] + C[0]) * -1, (0, 0, 0)))\n\n    while n < K:\n\n        t, abc = heappop(hq)\n\n        if abc in s:\n\n            continue\n\n        s.add(abc)\n\n        (a, b, c) = abc\n\n        if a+1 < X:\n\n            heappush(hq, ((A[a+1] + B[b] + C[c]) * -1, (a+1, b, c)))\n\n        if b+1 < Y:\n\n            heappush(hq, ((A[a] + B[b+1] + C[c]) * -1, (a, b+1, c)))\n\n        if c+1 < Z:\n\n            heappush(hq, ((A[a] + B[b] + C[c+1]) * -1, (a, b, c+1)))\n\n        print((-t))\n\n        n += 1\n\n\n\nmain()\n", "score": 0.0}
{"golden_code": "import numpy as np\n\nN, D = list(map(int, input().split()))\n\nprint((int(np.ceil(N/(2*D+1)))))", "generated_code": "k,n = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nb = [0 for i in range(n)]\n\nfor i in range(0,n-1):\n\n  b[i] = a[i+1] -a[i]\n\n\n\nb[n-1] = k - a[n-1] + a[0]\n\nans = k - max(b)\n\nprint((int(ans)))", "score": 0.0}
{"golden_code": "def main():\n\n\n\n    while True:\n\n        n, x = tuple(map(int, input().split()))\n\n        pattern = 0\n\n\n\n        if n == x == 0:\n\n            break\n\n        else:\n\n            for a in range(1, n+1):\n\n                for b in range(1, a):\n\n                    for c in range(1, b):\n\n                        pattern += 1 if a + b + c == x and a > b > c else 0\n\n            print(pattern)\n\n                            \n\n\n\nif __name__ == '__main__':\n\n    main()\n", "generated_code": "# -*- coding: utf-8 -*-\n\n\n\nimport sys\n\nfrom collections import Counter\n\n\n\ndef input(): return sys.stdin.readline().strip()\n\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\n\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\n\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\n\ndef ceil(x, y=1): return int(-(-x // y))\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\n\ndef Yes(): print('Yes')\n\ndef No(): print('No')\n\ndef YES(): print('YES')\n\ndef NO(): print('NO')\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = 10 ** 18\n\nMOD = 10 ** 9 + 7\n\n\n\nN, M, L = MAP()\n\nA = LIST()\n\nB = LIST()\n\n\n\nmn = min(A) + min(B)\n\nfor _ in range(L):\n\n    x, y, c = MAP()\n\n    x -= 1; y -= 1\n\n    mn = min(mn, A[x] + B[y] - c)\n\nprint(mn)\n", "score": 0.0}
{"golden_code": "import math\n\nN, M = list(map(int, input().split()))\n\n\n\n\n\ndef factorization(n):\n\n    arr = []\n\n    temp = n\n\n    for i in range(2, int(-(-n**0.5//1))+1):\n\n        if temp % i == 0:\n\n            cnt = 0\n\n            while temp % i == 0:\n\n                cnt += 1\n\n                temp //= i\n\n            arr.append([i, cnt])\n\n    if temp != 1:\n\n        arr.append([temp, 1])\n\n\n\n    if arr == [] and n != 1:\n\n        arr.append([n, 1])\n\n\n\n    return arr\n\n\n\n\n\nmod = 10**9 + 7\n\n\n\n\n\ndef cmb(n, r, mod):\n\n    if (r < 0 or r > n):\n\n        return 0\n\n    r = min(r, n-r)\n\n    return g1[n] * g2[r] * g2[n-r] % mod\n\n\n\n\n\ng1 = [1, 1]\n\ng2 = [1, 1]\n\ninverse = [0, 1]\n\nfor i in range(2, 2*10**5 + 1):\n\n    g1.append((g1[-1] * i) % mod)\n\n    inverse.append((-inverse[mod % i] * (mod//i)) % mod)\n\n    g2.append((g2[-1] * inverse[-1]) % mod)\n\n\n\n\n\nprimes = factorization(M)\n\n# 何箇所に分けるか（cnt以下）,その中でどう分けるか（しきりをどこにおくか（振り分けられないものが出ると選べれないのとおなじになるので、cnt - 選んだ数））\n\n\n\nans = 1\n\n\n\nfor p, cnt in primes:\n\n    tmp = cmb(N+cnt-1, N-1, mod)\n\n    ans *= tmp\n\n    ans %= mod\n\n\n\nprint(ans)\n", "generated_code": "eval(input())\n\nA = list(map(int, input().split()))\n\n\n\nans = 0\n\nwhile all(a%2==0 for a in A):\n\n    A=[a/2 for a in A]\n\n    ans += 1\n\n\n\nprint(ans)", "score": 0.0}
{"golden_code": "N = int(eval(input()))\n\n\n\ncount = 0\n\nfor i in range(1, N + 1):\n\n    num_dig = 0\n\n    ii = i\n\n    while ii > 0:\n\n        ii = int(ii / 10)\n\n        num_dig += 1\n\n    if num_dig % 2 != 0:\n\n        count += 1\n\n\n\nprint(count)", "generated_code": "a,b,c,x,y = list(map(int,input().split()))\n\na1 = a*x + b*y\n\na2 = max(x,y) * 2*c\n\nif y >= x:\n\n    a3 = 2*c*x + (y-x)*b\n\nelse:\n\n    a3 = 2*c*y + (x-y)*a\n\nprint((min(a1,a2,a3)))", "score": 0.0}
{"golden_code": "import math\n\nN = int(eval(input()))\n\nans = math.factorial(N) % (10 ** 9 + 7)\n\nprint(ans)", "generated_code": "from collections import defaultdict\n\n\n\nN, K, *A = list(map(int, open(0).read().split()))\n\n\n\nx = [0] * (N + 1)\n\nfor i in range(N):\n\n    x[i + 1] = x[i] + A[i]\n\n    \n\ny = [(x[i] - i) % K for i in range(N + 1)]\n\n\n\nctr = defaultdict(int)\n\nans = 0\n\nfor j in range(N + 1):\n\n    ans += ctr[y[j]]\n\n    ctr[y[j]] += 1\n\n    if j - K + 1 >= 0:\n\n        ctr[y[j - K + 1]] -= 1\n\nprint(ans)\n", "score": 0.0}
{"golden_code": "n = int(eval(input()))\n\nv = list(map(int, input().split()))\n\nc = list(map(int, input().split()))\n\nresult = 0\n\nfor i in range(n):\n\n  if v[i] > c[i]:\n\n    result += v[i] - c[i]\n\nprint(result)", "generated_code": "s = eval(input())\n\nt = eval(input())\n\n\n\nfor i in range(len(s)):\n\n    s = s[1:] + s[0]\n\n    if s == t:\n\n        print(\"Yes\")\n\n        exit()\n\nprint(\"No\")", "score": 0.0}
{"golden_code": "def getN():\n\n    return int(eval(input()))\n\ndef getNM():\n\n    return list(map(int, input().split()))\n\ndef getList():\n\n    return list(map(int, input().split()))\n\ndef getArray(intn):\n\n    return [int(eval(input())) for i in range(intn)]\n\ndef input():\n\n    return sys.stdin.readline().rstrip()\n\ndef rand_N(ran1, ran2):\n\n    return random.randint(ran1, ran2)\n\ndef rand_List(ran1, ran2, rantime):\n\n    return [random.randint(ran1, ran2) for i in range(rantime)]\n\ndef rand_ints_nodup(ran1, ran2, rantime):\n\n  ns = []\n\n  while len(ns) < rantime:\n\n    n = random.randint(ran1, ran2)\n\n    if not n in ns:\n\n      ns.append(n)\n\n  return sorted(ns)\n\n\n\ndef rand_query(ran1, ran2, rantime):\n\n  r_query = []\n\n  while len(r_query) < rantime:\n\n    n_q = rand_ints_nodup(ran1, ran2, 2)\n\n    if not n_q in r_query:\n\n      r_query.append(n_q)\n\n  return sorted(r_query)\n\n\n\nfrom collections import defaultdict, deque, Counter\n\nfrom sys import exit\n\nfrom decimal import *\n\nfrom heapq import heapify, heappop, heappush\n\nimport math\n\nimport random\n\nimport string\n\nfrom copy import deepcopy\n\nfrom itertools import combinations, permutations, product\n\nfrom operator import mul, itemgetter\n\nfrom functools import reduce\n\nfrom bisect import bisect_left, bisect_right\n\n\n\nimport sys\n\nsys.setrecursionlimit(1000000000)\n\nmod = 10 ** 9 + 7\n\n\n\n#############\n\n# Main Code #\n\n#############\n\n\n\nS = getN()\n\n\n\n# 逆元事前処理ver\n\n# nが小さい場合に\n\nlim = 10 ** 5 + 1\n\nfact = [1, 1]\n\nfactinv = [1, 1]\n\ninv = [0, 1]\n\n\n\nfor i in range(2, lim + 1):\n\n    fact.append((fact[-1] * i) % mod)\n\n    inv.append((-inv[mod % i] * (mod // i)) % mod)\n\n    # 累計\n\n    factinv.append((factinv[-1] * inv[-1]) % mod)\n\n\n\ndef cmb(n, r):\n\n    if (r < 0) or (n < r):\n\n        return 0\n\n    r = min(r, n - r)\n\n    return fact[n] * factinv[r] * factinv[n - r] % mod\n\n\n\nans = 0\n\n# 長さNの時最低でも3 * N使う\n\n# 残りは分配する\n\nfor i in range(1, 2001):\n\n    s = S - (3 * i)\n\n    if s < 0:\n\n        break\n\n    # sをN個に分配する通りがいくつあるか\n\n    # 重複組み合わせ\n\n    # 仕切りの数はi - 1個\n\n    ans += cmb(s + i - 1, i - 1)\n\nprint((ans % mod))", "generated_code": "while 1:\n\n    a=0\n\n    n,x=list(map(int,input().split()))\n\n    if n==0:break\n\n    for i in range(1,n-1):\n\n        for j in range(i+1,n):\n\n            c=x-i-j\n\n            if c>j and c<=n:a+=1\n\n    print(a)", "score": 0.0}
{"golden_code": "# ABC150 D\n\nsi = lambda: eval(input())\n\nni = lambda: int(eval(input()))\n\nnm = lambda: list(map(int, input().split()))\n\nnl = lambda: list(map(int, input().split()))\n\nfrom fractions import gcd\n\nfrom math import ceil\n\ndef lcm(x, y):\n\n    return (x * y) // gcd(x, y)\n\nn,m=nm()\n\na=nl()\n\nans=0\n\na=[x//2 for x in a] \n\n\n\nlcm_v=a[0]\n\nfor i in range(n):\n\n    lcm_v=lcm(lcm_v,a[i])\n\nok_flg=[(lcm_v//i)%2==1 for i in a]\n\nif all(ok_flg):\n\n    ans=((m//lcm_v)+1)//2\n\nprint(ans)\n\n\n", "generated_code": "S = int(eval(input()))\n\n\n\nif S == 1 or S ==2:\n\n  print((0))\n\nelif S == 3 or S == 4 or S == 5:\n\n  print((1))\n\nelse:\n\n  #初期化\n\n  dp = [0]*S\n\n  dp[2] = 1\n\n  dp[3] = 1\n\n  dp[4] = 1\n\n  dp_S = 0\n\n  #dp\n\n  for i in range(5,S):\n\n    dp_S += dp[i-3] \n\n    dp[i] = 1+dp_S\n\n\n\n  print((dp[S-1]%1000000007))", "score": 0.0}
{"golden_code": "w = eval(input())\n\ny = list(set(w))\n\n\n\nfor i in range(len(y)):\n\n    if w.count(y[i]) % 2 != 0:\n\n        print('No')\n\n        exit(0)\n\n\n\nprint('Yes')", "generated_code": "\n\nn,m,k = list(map(int,input().split()))\n\n\n\nfor i in range(n+1):\n\n    for j in range(m+1):\n\n        if i*(m-j) + j*(n-i) == k:\n\n            print(\"Yes\")\n\n            exit()\n\nprint(\"No\")\n", "score": 0.0}
{"golden_code": "A, B = list(map(int, input().split()))\n\ncnt = 0\n\nfor i in range(A, B+1):\n\n    l = list(str(i))\n\n\n\n    if l == list(reversed(l)):\n\n        cnt += 1\n\n\n\nprint(cnt)\n", "generated_code": "n=int(eval(input()))\n\nm=10**9+7\n\np=[1 for i in range(10000)]\n\np[0]=0\n\np[1]=0\n\nfor i in range(2,n+1):\n\n  if p[i]==1:\n\n    for j in range(i*i,n+1,i):\n\n        p[j]=0\n\nans=1\n\nfor i in range(2,n+1):\n\n  if p[i]:\n\n    c=0\n\n    k=i\n\n    while n//k>0:\n\n      c=c+(n//k)%m\n\n      k=k*i\n\n    ans=(ans*((c+1)%m))%m\n\nprint((ans%m))\n\n    \n\n    \n\n      \n\n      \n", "score": 0.0}
{"golden_code": "import sys\n\ninput = sys.stdin.readline\n\n\n\ndef main():\n\n  n, m = map(int, input().split())\n\n  LR = [list(map(int, input().split())) for _ in range(n)]\n\n  \n\n  BIT = [0]*(m+2)\n\n  def add(i, a):\n\n    while i <= m+1:\n\n      BIT[i] += a\n\n      i += i&(-i)\n\n  def bit_sum(i):\n\n    res = 0\n\n    while i > 0:\n\n      res += BIT[i]\n\n      i -= i&(-i)\n\n    return res\n\n  \n\n  S = sorted([(r-l+1, l, r) for l, r in LR], reverse=True)\n\n  cnt = n\n\n  L = []\n\n  for i in range(1, m+1):\n\n    while S and S[-1][0] == i:\n\n      c, l, r = S.pop()\n\n      cnt -= 1\n\n      add(l, 1)\n\n      add(r+1, -1)\n\n    res = cnt\n\n    for j in range(0, m+1, i):\n\n      res += bit_sum(j)\n\n    L.append(res)\n\n  print(*L, sep=\"\\n\")\n\n\n\nif __name__ == \"__main__\":\n\n  main()\n", "generated_code": "from collections import deque\n\nfrom copy import deepcopy\n\n\n\nn,m=list(map(int,input().split()))\n\nl=[list(map(int,input().split())) for i in range(m)]\n\n\n\ndef BFS(m):\n\n  t_l=deepcopy(l)\n\n  del t_l[m]\n\n\n\n  tree=[[] for j in range(n)]\n\n  for a,b in t_l:\n\n    a-=1\n\n    b-=1\n\n    tree[a].append(b)\n\n    tree[b].append(a)\n\n\n\n  dist=[-1 for i in range(n)]\n\n  dist[0]=0\n\n\n\n  que=deque()\n\n  que.append(0)\n\n\n\n  while que:\n\n    x=que.popleft()\n\n    for i in tree[x]:\n\n      if dist[i]==-1:\n\n        que.append(i)\n\n        dist[i]=dist[x]+1\n\n\n\n  return dist\n\n\n\nans=0\n\nfor i in range(m):\n\n  d=BFS(i)\n\n  if -1 in d:\n\n    ans+=1\n\n\n\nprint(ans)", "score": 0.0}
{"golden_code": "N, L = [int(i) for i in input().split()]\n\n\n\nmin_ = L\n\nmax_ = L + N -1\n\n\n\ndef eat_apple():\n\n    if max_<0:\n\n        return max_ \n\n    if L < 0:\n\n        return 0\n\n    return L\n\n\n\nprint(((min_+max_)*(max_-min_+1)//2 - eat_apple()))", "generated_code": "def c_remainder_minimization_2019(L, R):\n\n    ans = float('inf')\n\n    for i in range(L, min(R, L + 2019)):\n\n        for j in range(i + 1, min(R + 1, L + 2020)):\n\n            ans = min(ans, (i * j) % 2019)\n\n            if ans == 0:\n\n                return 0\n\n    return ans\n\n\n\nL, R = [int(i) for i in input().split()]\n\nprint((c_remainder_minimization_2019(L, R)))", "score": 0.0}
{"golden_code": "from collections import deque\n\n\n\nn = int(eval(input()))\n\n\n\ng = {i: dict() for i in range(n)}\n\n\n\na_list = [0] * (n - 1)\n\nb_list = [0] * (n - 1)\n\nfor i in range(n - 1):\n\n    a, b = list(map(int, input().split()))\n\n    a_list[i] = a - 1\n\n    b_list[i] = b - 1\n\n    g[a - 1][b - 1] = -1\n\n    g[b - 1][a - 1] = -1\n\n\n\nk = max([len(g[a]) for a in range(n)])\n\n\n\nused_color = [-1] * n\n\nused_color[0] = k - 1\n\n# BFS\n\nqueue = deque([0])\n\nwhile len(queue) > 0:\n\n    p = queue.popleft()\n\n    c = used_color[p]\n\n    for q in list(g[p].keys()):\n\n        if used_color[q] != -1:\n\n            continue\n\n        c += 1\n\n        c %= k\n\n        # print(p, q, c)\n\n        g[p][q] = c\n\n        g[q][p] = c\n\n        used_color[q] = c\n\n        queue.append(q)\n\n\n\nprint(k)\n\nfor i in range(n - 1):\n\n    print((g[a_list[i]][b_list[i]] + 1))\n", "generated_code": "A,B = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(A,B+1):\n\n    k = str(i)\n\n    if k[0] == k[4] and k[1] == k[3]:\n\n        ans += 1\n\nprint(ans)", "score": 0.0}
{"golden_code": "import numpy as np\n\nn = int(eval(input()))\n\na_list = np.array(list(map(int, input().split())))\n\n\n\ncounter = 0\n\nwhile True:\n\n    if np.sum(a_list % 2) > 0:\n\n        break\n\n    counter += 1\n\n    a_list = a_list / 2\n\nprint(counter)\n", "generated_code": "# でつoO(YOU PLAY WITH THE CARDS YOU'RE DEALT..)\n\nimport sys\n\ndef main(N, K, A, F):\n\n    A.sort()\n\n    F.sort(reverse=True)\n\n\n\n    def f(x):\n\n        sy = 0\n\n        for a, f in zip(A, F):\n\n            m = a * f\n\n            if m > x:\n\n                sy += (m - x + f - 1) // f\n\n        return sy\n\n\n\n    under = -1\n\n    hi = 10**12 + 1\n\n    while hi - under > 1:\n\n        m = (hi + under) // 2\n\n        if f(m) <= K: hi = m\n\n        else: under = m\n\n    print(hi)\n\n\n\nif __name__ == '__main__':\n\n    input = sys.stdin.readline\n\n    N, K = list(map(int, input().split()))\n\n    *A, = list(map(int, input().split()))\n\n    *F, = list(map(int, input().split()))\n\n    main(N, K, A, F)\n", "score": 0.0}
{"golden_code": "import numpy as np\n\n# Me\n\n\n\n\n\ndef f():\n\n    i = int(eval(input()))\n\n    nums = np.array(list(map(int, input().split())))\n\n    # nums = [int(x) for x in input().split()]\n\n    c = 0\n\n    while True:\n\n        if any(nums % 2 == 1):\n\n            break\n\n        c += 1\n\n        nums = nums / 2\n\n    print(c)\n\n\n\n\n\nf()\n\n\n\n\n\n# Other\n", "generated_code": "limit=50\n\ngraph=[[False]*limit for i in range(limit)]\n\nvisited=[]*limit\n\n\n\ndef dfs(v,n,graph,visited):\n\n    visited[v]=True\n\n    for v2 in range(n):\n\n        if graph[v][v2]==False:\n\n            continue\n\n        if visited[v2]==True:\n\n            continue\n\n        dfs(v2,n,graph,visited)\n\n\n\nn,m=list(map(int,input().split()))\n\na=[0]*m\n\nb=[0]*m\n\nfor i in range(m):\n\n    ai,bi=list(map(int,input().split()))\n\n    a[i]=ai-1\n\n    b[i]=bi-1\n\n    graph[a[i]][b[i]]=True\n\n    graph[b[i]][a[i]]=True\n\n    \n\nans=0 \n\nfor i in range(m):\n\n    graph[a[i]][b[i]]=False\n\n    graph[b[i]][a[i]]=False\n\n    visited=[False]*n\n\n    dfs(0,n,graph,visited)\n\n    bridge=False\n\n    for j in range(n):\n\n        if visited[j]==False:\n\n            bridge=True\n\n    if bridge:\n\n        ans+=1\n\n    graph[a[i]][b[i]]=True\n\n    graph[b[i]][a[i]]=True\n\n    \n\nprint(ans)", "score": 0.0}
{"golden_code": "A, B = list(map(int, input().split()))\n\nnumbers = list(range(A, B+1))\n\ncount = 0\n\nfor i in numbers:\n\n    m = str(i)\n\n    rm = ''.join(list(reversed(m)))\n\n    if m == rm:\n\n        count += 1\n\nprint(count)", "generated_code": "import sys\n\ninput = sys.stdin.readline\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\nK, S = list(map(int, input().split()))\n\n\n\nans = 0\n\nfor z in range(K+1):\n\n    for y in range(K+1):\n\n        x = S - (z + y)\n\n        if 0 <= x <= K:\n\n            ans += 1\n\nprint(ans)", "score": 0.0}
{"golden_code": "N = int(eval(input()))\n\nA = list(map(int, input().split()))\n\nanswer = 10 ** 9\n\nfor i in range(1,101):\n\n    tmp = 0\n\n    for a in A:\n\n        tmp += abs(a-i) ** 2\n\n    answer = min(answer,tmp)\n\nprint(answer)", "generated_code": "# -*- coding: utf-8 -*-\n\n\n\nimport sys\n\nfrom heapq import heappush, heappop\n\n\n\ndef input(): return sys.stdin.readline().strip()\n\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\n\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\n\ndef ceil(x, y=1): return int(-(-x // y))\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(): return list(map(int, input().split()))\n\ndef Yes(): print('Yes')\n\ndef No(): print('No')\n\ndef YES(): print('YES')\n\ndef NO(): print('NO')\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = float('inf')\n\nMOD = 10 ** 9 + 7\n\n\n\nX,Y,Z,K=MAP()\n\nA=sorted(LIST(), reverse=True)\n\nB=sorted(LIST(), reverse=True)\n\nC=sorted(LIST(), reverse=True)\n\n\n\n\n\nque=[]\n\nheappush(que, (-(A[0]+B[0]+C[0]), 0, 0, 0))\n\nS={(0,0,0)}\n\nfor i in range(K):\n\n    ans=heappop(que)\n\n    print((-ans[0]))\n\n    a,b,c=ans[1:]\n\n    if a+1<X and (a+1,b,c) not in S:\n\n        heappush(que, (-(A[a+1]+B[b]+C[c]), a+1, b, c))\n\n        S.add((a+1,b,c))\n\n    if b+1<Y and (a,b+1,c) not in S:\n\n        heappush(que, (-(A[a]+B[b+1]+C[c]), a, b+1, c))\n\n        S.add((a,b+1,c))\n\n    if c+1<Z and (a,b,c+1) not in S:\n\n        heappush(que, (-(A[a]+B[b]+C[c+1]), a, b, c+1))\n\n        S.add((a,b,c+1))\n", "score": 0.0}
{"golden_code": "import sys\n\n\n\nif __name__ == '__main__':\n\n    import doctest\n\n    doctest.testmod()\n\n    S = int(sys.stdin.read())\n\n    h = S / 3600\n\n    m = (S % 3600) / 60\n\n    s = S % 60\n\n    print(\"%d:%d:%d\" % (h, m, s))\n", "generated_code": "k = int(eval(input()))\n\na = 0\n\n\n\nfor i in range(k + 10):\n\n    a = (a*10 + 7)%k\n\n    if a == 0:\n\n        print((i + 1))\n\n        exit()\n\nprint((-1))", "score": 0.0}
{"golden_code": "# -*- coding: utf-8 -*-\n\n\n\nimport sys\n\n\n\ndef input(): return sys.stdin.readline().strip()\n\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\n\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\n\ndef ceil(x, y=1): return int(-(-x // y))\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(): return list(map(int, input().split()))\n\ndef Yes(): print('Yes')\n\ndef No(): print('No')\n\ndef YES(): print('YES')\n\ndef NO(): print('NO')\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = float('inf')\n\nMOD = 10 ** 9 + 7\n\n\n\nX,Y,Z,K=MAP()\n\nA=sorted(LIST(), reverse=True)\n\nB=sorted(LIST(), reverse=True)\n\nC=sorted(LIST(), reverse=True)\n\n\n\nABC=[]\n\nfor i in range(X):\n\n    for j in range(Y):\n\n        if (i+1)*(j+1)>K:\n\n            break\n\n        for k in range(Z):\n\n            if (i+1)*(j+1)*(k+1)>K:\n\n                break\n\n            ABC.append(A[i]+B[j]+C[k])\n\nABC.sort(reverse=True)\n\nfor i in range(K):\n\n    print((ABC[i]))\n\n\n", "generated_code": "\n\nX = int(eval(input()))\n\nfor a in range(-120, 120):\n\n    find = False\n\n    for b in range(-120, 120):\n\n        x = a**5-b**5\n\n        if x == X:\n\n            find = True\n\n            print((a, b))\n\n            break\n\n    if find:\n\n        break\n", "score": 0.0}
