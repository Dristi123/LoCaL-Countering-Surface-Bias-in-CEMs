{"id": "SHARE_1_1001_14__1_1001_338", "golden_code": "import java.util.Scanner;\nclass Main\n{\npublic static void main(String [] arg)\n{\nScanner scan = new Scanner(System.in);\nint a,b,sum = 0;\nwhile(scan.hasNextInt())\n{a=scan.nextInt();\nb=scan.nextInt();\nsum=a+b;\nSystem.out.println(sum);}\n}\n}", "generated_code": "\nimport java.util.Scanner;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author Mohammad Hadi\n */\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while(true){\n            try{System.out.println(in.nextInt() + in.nextInt());}\n            catch(Exception e){\n                break;\n            }\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2717_32__1_101065_3", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\npublic static void main(String[] args) {\n\tScanner sc = new Scanner(System.in);\n\tint length;\n\twhile(true){\n\t\tlength  = sc.nextInt();\n\t\tif(length==0)\n\t\t\tbreak;\n\tString S1 = sc.next();\n\tString S2 = sc.next();\n\tString S = sc.next();\n\tString goal = \"\";\n\tint counter=0;\n\t\n\t\n\twhile(!S.equals(goal)){\n\t\tgoal=\"\";\n\t\t\n\t\n\t\t\n\t\tfor(int i=0; i<length; i++){\n\t\t\t//System.out.println(\"un chare S2\"+ S2.charAt(i));\n\t\t\t//System.out.println(\"un chare S1\"+ S1.charAt(i));\n\t\t\tgoal+=S2.charAt(i);\n\t\t\tgoal+=S1.charAt(i);\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t\tS1=goal.substring(0,length);\n\t\tS2=goal.substring(length, 2*length);\n\t\t\n\t\t//System.out.println(\"striing of subset s1\" +S1);\n\t\t//System.out.println(\"striing of subset s2\" +S2);\n\t\t\n\t\t\n\t\t\n\t\tcounter++;\n\t\tif(counter>50){\n\t\t\tSystem.out.println(\"-1\");\n\t\t\tbreak;\n\t\t}\n\t\t//System.out.println(\"goal avale while\" + goal);\n\t\t\n\t\t\n\t}\n\tif(counter<=50)\n\t\tSystem.out.println(counter);\n\t}\n\t\n}\t\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\npublic static void main(String[] args) {\nScanner cin=new Scanner(System.in);\nint n=cin.nextInt(),j=0;\nwhile(n>0){\nString a=cin.next();\nint x=0,y=0,s=0;\nj++;\nfor(int i=0;i<a.length();i++){\nint p=x,q=y;\nchar b[]=a.toCharArray();\nswitch(b[i]){\ncase 'R': p++; break;\ncase 'L': p--; break;\ncase 'U': q++; break;\ncase 'D': q--; break;\n}\ns+=x*q-y*p;\nx=p;y=q;\n}\nSystem.out.printf(\"case %d: %d\\n\",j,Math.abs(s)/2);\nn--;\n}\n}\n}", "score": 0.0}
{"id": "SHARE_1_2499_24__1_2499_7", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n    int a,w,s;\n    int p[][]=new int[3][3];\n    p[0][0]=30;\n    p[0][1]=70;\n    p[0][2]=500;\n    p[1][0]=26;\n    p[1][1]=60;\n    p[1][2]=200;\n    p[2][0]=36;\n    p[2][1]=80;\n    p[2][2]=300;\n\n    boolean b[][]=new boolean[3][3];\n    Scanner input=new Scanner(System.in);\n        while (true){\n            for(int i=0;i<3;i++)\n                for(int j=0;j<3;j++)\n                    b[i][j]=false;\n            a=input.nextInt();\n            while(a>=1000){\n                a=input.nextInt();\n            }\n            w=input.nextInt();\n            while(w>=1000){\n                w=input.nextInt();\n            }\n            s=input.nextInt();\n            while(s>=1000){\n                s=input.nextInt();\n            }\n            if(a==0&&w==0&&s==0)\n                break;\n            if(a<=p[0][0])\n                b[0][0]=true;\n            if(a<=p[1][0])\n                b[1][0]=true;\n            if(a<=p[2][0])\n                b[2][0]=true;\n            if(w>=p[0][1])\n                b[0][1]=true;\n            if(w>=p[1][1])\n                b[1][1]=true;\n            if(w>=p[2][1])\n                b[2][1]=true;\n            if(s>=p[0][2])\n                b[0][2]=true;\n            if(s>=p[1][2])\n                b[1][2]=true;\n            if(s>=p[2][2])\n                b[2][2]=true;\n            if(b[0][0]&&b[0][1]&&b[0][2]&&b[1][0] && b[1][1] && b[1][2]&&b[2][0] && b[2][1] && b[2][2])\n                System.out.println(\"Mid-field Forward Defense\");\n            else if(b[0][0]&&b[0][1]&&b[0][2]&&b[1][0] && b[1][1] && b[1][2])\n                System.out.println(\"Mid-field Forward\");\n            else if(b[0][0]&&b[0][1]&&b[0][2]&&b[2][0] && b[2][1] && b[2][2])\n                System.out.println(\"Mid-field Defense\");\n            else if(b[1][0] && b[1][1] && b[1][2]&&b[2][0] && b[2][1] && b[2][2])\n                System.out.println(\"Forward Defense\");\n            else if(b[0][0] && b[0][1] && b[0][2])\n                System.out.println(\"Mid-field\");\n            else if(b[1][0] && b[1][1] && b[1][2])\n                System.out.println(\"Forward\");\n            else if(b[2][0] && b[2][1] && b[2][2])\n                System.out.println(\"Defense\");\n            else\n                System.out.println(\"No positions\");\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner inp = new Scanner(System.in);\n\t\tint a,b,c;\n\t\twhile(true)\n\t\t{\n\t\t\ta = inp.nextInt();\n\t\t\tb = inp.nextInt();\n\t\t\tc = inp.nextInt();\n\t\t\tif(a+b+c==0)break;\n\t\t\tString ans=\"\";\n\t\t\tif(mid(a,b,c))\n\t\t\t\tans+=(\"Mid-field\");\n\n\t\t\tif(forw(a,b,c))\n\t\t\t\tans+=(\" Forward\");\n\t\t\tif(def(a,b,c))\n\t\t\t\tans+=(\" Defense\");\n\t\t\t\n\t\t\tif(ans.equals(\"\"))\n\t\t\t\tSystem.out.println(\"No positions\");\n\t\t\telse\n\t\t\t\tSystem.out.println(ans.trim());\n\t\t\t\n\t\t}\n\n\t}\n\t\n\t\n\tstatic boolean mid(int a, int b, int c)\n\t{\n\t\tif(a<=30 && b>=70&&c>=500)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\tstatic boolean forw(int a, int b, int c)\n\t{\n\t\tif(a<=26 && b>=60&&c>=200)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\tstatic boolean def(int a, int b, int c)\n\t{\n\t\tif(a<=36 && b>=80&&c>=300)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_106018_16__1_106018_24", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    \n    public static boolean isP( int num ){\n        if( num % 2 == 0 && num != 2 || num == 1)\n            return false;\n        for(int j = 2; j <= Math.sqrt(num); j++){\n                if( num % j == 0 )\n                    return false;\n            }\n        return true;\n    }\n    \n    public static boolean isSP( int num ){\n        for(int i = 2; i <= Math.sqrt( num ); i++){\n            \n            if( isP(i) )\n                if(isP(num / i) && num % i == 0)\n                    return true;\n                \n        }\n        return false;\n    }\n    \n    public static void main(String[] args) {\n    \n        Scanner input = new Scanner( System.in );\n        \n        try{\n            while( true ){\n                if( isSP( input.nextInt() ) )\n                    System.out.println(\"Yes\");\n                else\n                    System.out.println(\"No\");    \n            }\n                \n        }catch( Exception e ){}\n        \n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main\n{ \n    public static int prime(int n)\n    {\n        int c=2;\n        while( c<n )\n        {\n            if(n%c==0)\n             return(0);\n            else\n             c++;\n         }\n          return(1);\n     }\n\n    public static void main(String [] args )\n    {\n        Scanner scan=new Scanner(System.in);\n        int n=scan.nextInt();\n          while(scan.hasNextLine())\n          {\n              int j=0;\n              int h=0;\n             for(int c=2;c<n;c++)\n             {\n                 if(n%c==0)\n                 {\n                     int i=prime(c);\n\t\t     if(i==1)\n                     j++;\n                     else\n                     h++;   \n                  }\n             }\n               if(j==0||j>2 || h!=0)\n                  System.out.println(\"No\");\n                   else   \n                    System.out.println(\"Yes\");\n \t\tn=scan.nextInt();\n          }\n    }\n\n}", "score": 1.0}
{"id": "SHARE_1_1018_52__1_1018_50", "golden_code": "import java.util.Scanner;\npublic class Main\n{\n\t public static void main(String[] args)\n\t {\n\t\t Scanner scan = new Scanner(System.in);\n\t\t \n\t\t int number;\n\t\t int Apoints;\n\t\t int Bpoints;\n\t\t boolean ok = false;\n\t\t \n\t\t while(scan.hasNextInt())\n\t\t {\n\t\t\t number=scan.nextInt();\n\t\t\t \n\t\t\t if(number==0)\n\t\t\t\t break;\n\t\t\t \n\t\t\t if(ok) System.out.println();\n\t\t\t ok = true ;\n\t\t\t \n\t\t\t int[] A = new int[number];\n\t\t\t int[] B = new int[number];\n\t\t\t Apoints=0;\n\t\t\t Bpoints=0;\n\t\t\t \n\t\t\t for(int i=0; i<number; i++)\n\t\t\t\t A[i]= scan.nextInt();\n\t\t\t \n\t\t\t for(int i=0; i<number; i++)\n\t\t\t\t B[i]= scan.nextInt();\n\t\t\t\n\t\t\t for(int i=0; i<number; i++)\n\t\t\t {\n\t\t\t\t if(Math.abs(A[i]-B[i])>1)\n\t\t\t\t {\n\t\t\t\t\t if(A[i]>B[i])\n\t\t\t\t\t\t Apoints+=A[i];\n\t\t\t\t\t \n\t\t\t\t\t else\n\t\t\t\t\t\t Bpoints+=B[i];\n\t\t\t\t \n\t\t\t\t } \n\t\t\t\t \n\t\t\t\t if(Math.abs(A[i]-B[i])==1)\n\t\t\t\t {\n\t\t\t\t\t if( A[i]==1 && B[i]==2 )\n\t\t\t\t\t {\n\t\t\t\t\t\t Apoints+=6;\n\t\t\t\t\t }\n\t\t\t\t\t \n\t\t\t\t\t else if( A[i]==2 && B[i]==1 )\n\t\t\t\t\t {\n\t\t\t\t\t\t Bpoints+=6;\n\t\t\t\t\t }\n\t\t\t\t\t \n\t\t\t\t\t else\n\t\t\t\t\t {\n\t\t\t\t\t\t if(A[i]<B[i])\n\t\t\t\t\t\t\t Apoints+=A[i]+B[i];\n\t\t\t\t\t\t \n\t\t\t\t\t\t else\n\t\t\t\t\t\t\t Bpoints+=A[i]+B[i];\n\t\t\t\t\t}\n\t\t\t\t }\n\t\t\t\t \n\t\t\t }\n\t\t\t\t\n\t\t\t System.out.println(\"A has \" + Apoints + \" points. B has \" + Bpoints + \" points.\");\n\t\t }\n\t }\n\n}", "generated_code": "\nimport java.util.Scanner;\n\n\npublic class Main{\n    static Scanner in = new Scanner(System.in);\n    public static void main(String[] args) {\nint count=0;\n        while (true) {            \n            int n=in.nextInt();\n            if (n==0) {\n                break;\n            }\nif(count!=0)\nSystem.out.println();\ncount++;\n            int a=0,b=0;\n            int x[]=new int[n];\n            int x1[]=new int[n];\n            for (int i = 0; i < x1.length; i++) {\n                x[i]=in.nextInt();\n            }\n            for (int i = 0; i < x1.length; i++) {\n                x1[i]=in.nextInt();\n            }\n            for (int i = 0; i < x1.length; i++) {\n               if(Math.abs(x[i]-x1[i])==1)\n               {\n                   if(x[i]==1 && x1[i]==2)\n                       a+=6;\n                   else if(x[i]==2 && x1[i]==1)\n                       b+=6;\n                   else if(x[i]>x1[i])\n                       b+=x1[i]+x[i];\n                   else\n                       a+=x[i]+x1[i];\n               }\n               else if(Math.abs(x[i]-x1[i])>1)\n               {\n                   if(x[i]>x1[i])\n                       a+=x[i];\n                   else\n                       b+=x1[i];\n               }\n            }\n            System.out.println(\"A has \"+a+\" points. B has \"+b+\" points.\");\n\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_158__1_1001_389", "golden_code": "import java.io.IOException;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\t\tSystem.out.println(sc.nextInt()+sc.nextInt());\n\t\t}\n\t\tsc.close();\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main{\n    public static void main(String[]args){\n        Scanner input=new Scanner(System.in);\n        int sum=0;\n        while(input.hasNextInt()){\n            int m=input.nextInt();\n            int n=input.nextInt();\n            sum=m+n;\n        System.out.println(sum);\n    }\n}\n}", "score": 1.0}
{"id": "SHARE_1_2747_24__1_1230_67", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint t = in.nextInt();\n\t\tboolean character = false;\n\t\tboolean lowerCase = false;\n\t\tboolean uperCase = false;\n\t\tboolean numeric = false;\n\t\t\n\n\t\tif( t >= 1 && t <= 1000){\n\t\t\tint[] score = new int[t+1];\n\t\t\tString[] s = new String[t+1];\n\t\t\tfor(int i = 0; i < t; i++){\n\t\t\t\tcharacter = false;\n\t\t\t\tlowerCase = false;\n\t\t\t\tuperCase = false;\n\t\t\t\tnumeric = false;\n\t\t\t\tfor(int p = 0; p < score.length; p++)\n\t\t\t\t\tscore[p] = 0;\n\t\t\t\tscore[i] = 0;\n\t\t\t\ts[i] = in.next();\n\n\t\t\t\tif(s[i].length() < 50){\n\t\t\t\t\t\n\t\t\t\t\t\tfor(int j = 0 ; j < s[i].length() ; j++){\n\t\t\t\t\t\t\tif(s[i].charAt(j) == '!'|| s[i].charAt(j) == '@'|| s[i].charAt(j) == '#'||\n\t\t\t\t\t\t\t\t\ts[i].charAt(j) == '$'|| s[i].charAt(j) == '%'|| s[i].charAt(j) == '^'||\n\t\t\t\t\t\t\t\t\ts[i].charAt(j) == '&'|| s[i].charAt(j) == '*'|| s[i].charAt(j) == '('|| \n\t\t\t\t\t\t\t\t\ts[i].charAt(j) == ')'){\n\t\t\t\t\t\t\t\tcharacter = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(s[i].charAt(j) >= 65 && s[i].charAt(j) <= 90)\n\t\t\t\t\t\t\t\tuperCase = true;\n\t\t\t\t\t\t\tif(s[i].charAt(j) >= 97 && s[i].charAt(j) <= 122)\n\t\t\t\t\t\t\t\tlowerCase = true;\n\t\t\t\t\t\t\tif(s[i].charAt(j) >= 48 && s[i].charAt(j) <= 57)\n\t\t\t\t\t\t\t\tnumeric = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(character)\n\t\t\t\t\t\t\tscore[i]++;\n\t\t\t\t\t\tif(uperCase)\n\t\t\t\t\t\t\tscore[i]++;\n\t\t\t\t\t\tif(lowerCase)\n\t\t\t\t\t\t\tscore[i]++;\n\t\t\t\t\t\tif(numeric)\n\t\t\t\t\t\t\tscore[i]++;\n\n\t\t\t\t\t\tswitch(score[i]){\n\t\t\t\t\t\tcase 1:s[i] = \"very bad\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2: s[i] = \"bad\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 3 : s[i] = \"good\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 4 : s[i] = \"overkill\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int x = 0; x < t; x++){\n\t\t\t\tSystem.out.println(s[x]);\n\t\t\t}\n\n\t\t}\n\n\n\t}\n\n}\n", "generated_code": "\nimport java.util.Scanner;\n\n\npublic class Main{\n    static Scanner in=new Scanner(System.in);\n    public static void main(String[] args) {\n        String a;\n         int sum=0,sum1=0,m;\n        while(true){\n        a=in.next();\n        if(a.equals(\"0\"))break;\n            sum=10;\n        while(sum>9){\n            sum=0;\n        for(int i=0;i<a.length();i++){\n            sum+=Integer.parseInt(\"\"+a.charAt(i)) %10;\n          \n        }\n        a=String.valueOf(sum);\n        }\n        if(sum!=0)\n          System.out.println(sum);\n        }\n      \n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1230_75__1_1230_66", "golden_code": "\nimport java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        \n        Scanner s=new Scanner(System.in);\n        while(true){\n            BigInteger n=new BigInteger(s.next());\n            if(n.toString().equals(\"0\")){\n                break;\n            }else{\n                String mod=n.mod(new BigInteger(\"9\")).toString();\n                if(mod.equals(\"0\")){\n                    System.out.println(\"9\");\n                }else{\n                    System.out.println(mod);\n                }\n            }\n        }\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\n\npublic class Main{\n    static Scanner in=new Scanner(System.in);\n    public static void main(String[] args) {\n        String a;\n         int sum=0,sum1=0,m;\n        while(true){\n        a=in.next();\n        if(a.equals(\"0\"))break;\n            sum=10;\n        while(sum>9){\n            sum=0;\n        for(int i=0;i<a.length();i++){\n            sum+=Integer.parseInt(\"\"+a.charAt(i)) %10;\n          \n        }\n        a=String.valueOf(sum);\n        }\n        if(sum!=0)\n          System.out.println(sum);\n        }\n      \n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1725_2__1_1750_2", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        int t=in.nextInt();\n        for (int q = 0; q < t; q++) {\n            int n=in.nextInt();\n            boolean door[]=new boolean[n];\n            for (int i = 2; i <= n; i++) {\n                for (int j = 0; j < n; j++) {\n                    if((j+1)%i==0)\n                        door[j]=!door[j];\n                }\n            }\n            int out=0;\n            for (int i = 0; i < n; i++) {\n                if(door[i] == false)\n                    out++;\n            }\n            System.out.println(out);\n        }\n    }\n}\n", "generated_code": "public class Main {\n\tpublic static void main(String[] args) throws Exception{\n\t\tlong t = System.currentTimeMillis();\n\t\twhile(System.currentTimeMillis()-t<1500);\n\t\tSystem.out.println(\"15 14\");\nSystem.out.println(\"17 22\");\nSystem.out.println(\"4 8\");\nSystem.out.println(\"1 12\");\nSystem.out.println(\"1 12\");\nSystem.out.println(\"101 100\");\nSystem.out.println(\"9 20\");\nSystem.out.println(\"225 5752\");\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1001_364__1_2806_4", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "generated_code": "\n\nimport java.text.DecimalFormat;\nimport java.util.*;\n\npublic class Main {\n\n    static DecimalFormat decimalFormat = new DecimalFormat(\"0.000000\");\n\n    private static long term(long n, long i) {\n        if(i > n)\n            return 0;\n        else if(i == 0)\n            return 1;\n\n        long r = 1;\n        long l = n - 1;\n        while(l != n - i) {\n            r *= l;\n            l--;\n        }\n        return r;\n    }\n\n    private static long nom(long n) {\n        long r = 0;\n        for(int i = 1; i <= n; i++)\n            r += term(n, i) * i;\n        return r;\n    }\n\n    private static long denom(long n) {\n        long r = 0;\n        for(int i = 1; i <= n; i++)\n            r += term(n, i) * n;\n        return r;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int nt = sc.nextInt();\n        for(int ti = 0; ti < nt; ti++) {\n            int n = sc.nextInt();\n            int s = 0;\n            for(int i = 0; i < n; i++)\n                s += sc.nextInt();\n            System.out.println(decimalFormat.format(1.0 * s * nom(n) / denom(n)));\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2518_12__1_1993_10", "golden_code": "\nimport java.util.*;\n\nclass Main{\n\n    public static void main(String[] a){\n        \n        Scanner I = new Scanner(System.in);\n        int N;\n        for(N = I.nextInt(); N > 0; N--){\n            int n = I.nextInt(), m[][] = new int[n][n], i, j, k, z, t;\n            for(i = 0; i < n; i++)\n                for(j = 0; j < n; j++)\n                    m[i][j] = I.nextInt();\n            \n            String s = I.next();\n            if (n > 1){\n                for(k = 0; k < s.length(); k++){\n\n                    if(s.charAt(k) == 'U'){\n                        for(j = 0; j < n; j++){\n                            t = m[0][j];\n                            m[0][j] = m[n - 1][j];\n                            m[n - 1][j] = t;\n                        }\n                        for(i = 0; i < n - 2; i++)\n                            for(j = 0; j < n; j++){\n                                t = m[i][j];\n                                m[i][j] = m[i + 1][j];\n                                m[i + 1][j] = t;\n                            }\n                    }\n\n                    else if(s.charAt(k) == 'D'){\n                        for(j = 0; j < n; j++){\n                            t = m[0][j];\n                            m[0][j] = m[n - 1][j];\n                            m[n - 1][j] = t;\n                        }\n                        for(i = n - 1; i > 1; i--)\n                            for(j = 0; j < n; j++){\n                                t = m[i][j];\n                                m[i][j] = m[i - 1][j];\n                                m[i - 1][j] = t;\n                            }\n                    }\n\n                    else if(s.charAt(k) == 'F'){\n                        for(i = 0; i < n; i++){\n                            t = m[i][0];\n                            m[i][0] = m[i][n - 1];\n                            m[i][n - 1] = t;\n                        }\n                        for(j = n - 1; j > 1; j--)\n                            for(i = 0; i < n; i++){\n                                t = m[i][j];\n                                m[i][j] = m[i][j - 1];\n                                m[i][j - 1] = t;\n                            }\n                    }\n\n                    else if(s.charAt(k) == 'B'){\n                        for(i = 0; i < n; i++){\n                            t = m[i][0];\n                            m[i][0] = m[i][n - 1];\n                            m[i][n - 1] = t;\n                        }\n                        for(j = 0; j < n - 2; j++)\n                            for(i = 0; i < n; i++){\n                                t = m[i][j];\n                                m[i][j] = m[i][j + 1];\n                                m[i][j + 1] = t;\n                            }\n                    }\n\n                    else if(s.charAt(k) == 'T'){\n                        for(i = 0; i < n; i++)\n                            for(j = i + 1; j < n; j++){\n                                t = m[i][j];\n                                m[i][j] = m[j][i];\n                                m[j][i] = t;\n                            }\n                    }\n\n                    else if(s.charAt(k) == 'R'){\n                        int b[][] = new int[n][n];\n                        for(i = 0, z = n - 1; i < n; i++, z--)\n                            for(j = 0; j < n; j++)\n                                b[j][z] = m[i][j];\n                        m = b;\n                    }\n                }\n            }\n            for(i = 0; i < n; i++){\n                for(j = 0; j < n; j++)\n                    System.out.print((j > 0 ? \" \" : \"\") + m[i][j]);\n                System.out.println();\n            }\n                System.out.println();\n        }\n    }  \n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\t\n\t    public static void main(String[] args) {\n\t    \t        Scanner in = new Scanner(System.in);\n\t    \t                while (in.hasNext()) {\n\t    \t                \t        int number = in.nextInt();\n\t    \t                \t        \n\t    \t                \t                    if (number > 0 & number < 101) {\n\t    \t                \t                    \t                String binary = Integer.toBinaryString(number);\n\t    \t                \t                    \t                                int one = binary.lastIndexOf('1');\n\t    \t                \t                    \t                                                binary = binary.substring(one);\n\t    \t                \t                    \t                                                                long n = Long.parseLong(binary, 2);\n\t    \t                \t                    \t                                                                                System.out.println((int) n);\n\t    \t                \t                    \t                                                                                \n\t    \t                \t                    }\n\t    \t                }\n\t    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1903_27__1_1903_24", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        Scanner in=new Scanner(System.in); \n        \n        while(true){\n        int a=in.nextInt();\n        if(a==-1){break;}\n        int []b=new int[a];\n        int []c=new int [a];\n        int []d=new int [a];\n        int q=0;\n        for(int i=0;i<a;i++){\n            b[i]=in.nextInt();\n            c[i]=in.nextInt();\n            d[0]=c[0];\n            if(i!=0){\n                d[i]=c[i]-c[i-1];\n            }\n            q+=d[i]*b[i];\n        }\n        System.out.println(q+\" miles\");\n        \n    }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input =new Scanner(System.in);\n        int test,answer=0;\n        while (true){\n            test=input.nextInt();\n            if (test == -1) {\n                break;\n            }\n            int nemo[][]=new int[test][2];\n            answer=0;\n            for (int i = 0; i < test; i++) {\n                nemo[i][0]=input.nextInt();\n                nemo[i][1]=input.nextInt();\n            }\n            answer+=nemo[0][0]*nemo[0][1];\n            for (int i = 1; i < test; i++) {\n                answer=answer+(nemo[i][1]-nemo[i-1][1])*nemo[i][0];\n            }\n            System.out.println(answer+\" miles\");\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2500_7__1_2500_47", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        double k, i;\n        Scanner s = new Scanner(System.in);\n        k = s.nextDouble();\n        i = s.nextDouble();\n        while (k != 0 && i != 0) {\n            meth(0,Math.pow(3, k),i);\n            k = s.nextDouble();\n            i = s.nextDouble();\n        }\n    }\n\n    private static void meth(double f, double l, double i) {\n        if (l - f == 3) {\n            if (i == 2) {\n                System.out.println(\"No\");\n                return;\n            }\n            System.out.println(\"Yes\");\n            return;\n        }\n        if (i <= (l - f) / 3) {\n            meth(f, ((l - f) / 3)+f, i);\n            return;\n        } else if ((l - f) / 3 < i && i <= ((l - f) / 3) * 2) {\n            System.out.println(\"No\");\n            return;\n        } else if (i > ((l - f) / 3) * 2) {\n            i = i - ((l - f) / 3) * 2;\n            meth(((l - f) / 3) * 2, l-f, i);\n            return;\n        }\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    static Scanner a = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        while (true) {\n            if(Func1(a.nextInt(),a.nextLong()) == true)\n                System.out.println(\"Yes\");\n            else \n                System.out.println(\"No\");\n        }\n    }\n\n    static boolean Func1(int n, long m) {\n\n        long c = (long) Math.pow(3, n);\n            //2\n            if(m == 0 && n== 0)\n                System.exit(0);\n            if (m > c / 3 && m <= ((c * 2) / 3)) {\n                return false;\n            } //1\n            else if (m > 0 && m <= c / 3) {\n                return Func1(n - 1, m);\n            } //3\n            else if (m > ((c  / 3)*2) && m <= c) {\n                return Func1(n - 1 , (m-((2*c)/3)) );\n            }\n        return true;\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2554_21__1_1478_4", "golden_code": "import java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        boolean endprog = false;\n\n        while(!endprog){\n            HashMap<String, Integer> map = new HashMap<String, Integer>();\n            Vector<Integer>[] a = new Vector[1010];\n            for(int i = 0; i < 1010; i++)\n                a[i] = new Vector<Integer>();\n\n            int[] noe = new int[1010];\n            int c = 0;\n\n            if (endprog)\n                break;\n\n            while(true){\n                //String[] line = input.nextLine().split(\" \");\n                String inputstring = input.nextLine();\n                inputstring = inputstring.replaceAll(\"\\\\s\", \"\");\n\n                if(inputstring.equals(\"###\")){\n                    endprog = true;\n                    break;\n                }\n\n                ArrayList<String> line = new ArrayList<String>();\n                String tmps = \"\";\n                for(int i = 0; i < inputstring.length(); i++){\n                    if(inputstring.charAt(i) == ' '){\n                        if(!tmps.equals(\"\"))\n                            line.add(tmps);\n                        tmps = \"\";\n                        continue;\n                    }\n                    if(inputstring.charAt(i) == '='){\n                        if(!tmps.equals(\"\"))\n                            line.add(tmps);\n                        tmps = \"\";\n                        line.add(\"=\");\n                        continue;\n                    }\n                    if(inputstring.charAt(i) == '+'){\n                        if(!tmps.equals(\"\"))\n                            line.add(tmps);\n                        tmps = \"\";\n                        line.add(\"+\");\n                        continue;\n                    }\n                    if(inputstring.charAt(i) == '|'){\n                        if(!tmps.equals(\"\"))\n                            line.add(tmps);\n                        tmps = \"\";\n                        line.add(\"|\");\n                        continue;\n                    }\n                    if(inputstring.charAt(i) == '^'){\n                        if(!tmps.equals(\"\"))\n                            line.add(tmps);\n                        tmps = \"\";\n                        line.add(\"^\");\n                        continue;\n                    }\n                    tmps = tmps + inputstring.charAt(i);\n                }\n                if(!tmps.equals(\"\"))\n                    line.add(tmps);\n\n                /*for(int i = 0 ; i < line.size(); i++)\n                    System.out.println(line.get(i));\n*/\n\n                if(line.get(0).equals(\"#\")){\n                    break;\n                }\n\n                Vector<Integer> v = new Vector<Integer>(0);\n\n                int tmpnoe = 0;\n                if(line.size() > 3 && line.get(3).equals(\"|\"))\n                    tmpnoe = 2;\n                if(line.size() > 3 && line.get(3).equals(\"^\"))\n                    tmpnoe = 3;\n\n                for(int i = 0; i < line.size(); i += 2){\n                    boolean flag = false;\n                    if(line.get(i).charAt(0) == '?'){\n                        flag = true;\n                        line.set(i, line.get(i).substring(1));\n                    }\n                    if(!map.containsKey(line.get(i))){\n                        map.put(line.get(i), c);\n                        c++;\n                    }\n                    int index = map.get(line.get(i));\n                    v.add(index);\n                    if(flag)\n                        noe[index] = 1;\n                    else if(i != 0) {\n                        /*System.out.print(index);\n                        System.out.print(\"   \");\n                        System.out.print(tmpnoe);\n                        System.out.print(\"\\n\");*/\n                        noe[index] = tmpnoe;\n                    }\n                }\n\n                /*System.out.print(tmpnoe);*/\n                //System.out.println(v);\n\n                for(int i = 1; i < v.size(); i++){\n                    a[v.elementAt(0)].add(v.elementAt(i));\n                }\n            }\n\n            /*for(int i = 0; i < c; i++){\n                System.out.println(noe[i]);\n            }*/\n\n            //System.out.println(map.get(\"b\"));\n\n            if(endprog)\n                break;\n\n            while(true){\n                String ss = input.nextLine();\n                ss = ss.replaceAll(\"\\\\s\", \"\");\n\n                if(ss.equals(\"##\"))\n                    break;\n\n                if(ss.equals(\"###\")){\n                    endprog = true;\n                    break;\n                }\n\n                ss = ss.substring(1, ss.length() - 1);\n                String[] line = ss.split(\", *\");\n\n                /*for(int i = 0; i < line.length; i++)\n                    System.out.println(line[i]);\n*/\n                boolean[] mark = new boolean[1010];\n                for(int i = 0; i < 1010; i++)\n                    mark[i] = false;\n\n                for(int i = 0; i < line.length; i++){\n\n                    //System.out.println(line[i]);\n\n                    int index = map.get(line[i]);\n                    mark[index] = true;\n                }\n\n                int[] p = new int[1010];\n                Queue<Integer> q = new LinkedList<>();\n                q.add(0);\n                if(!mark[0]){\n                    System.out.println(\"Invalid\");\n                    continue;\n                }\n\n                boolean endflag = false;\n                while(!q.isEmpty()){\n                    int v = q.remove();\n                    int tedad = 0;\n                    for(int i = 0; i < a[v].size(); i++){\n                        q.add(a[v].get(i));\n                        if(mark[a[v].get(i)]) {\n                            tedad++;\n                            if(mark[a[v].get(i)] && !mark[v]){\n                                //System.out.println(\"in2\");\n                                endflag = true;\n                                break;\n                            }\n                        }\n                        if(mark[v] && noe[a[v].get(i)] == 0 && !mark[a[v].get(i)]){\n                            //System.out.println(\"in1\");\n                            endflag = true;\n                            break;\n                        }\n                    }\n                    if(endflag)\n                        break;\n                    if(!a[v].isEmpty() && noe[a[v].get(0)] == 2 && tedad == 0 && mark[v]){\n                        //System.out.println(\"in\");\n                        endflag = true;\n                        break;\n                    }\n                    if(!a[v].isEmpty() && noe[a[v].get(0)] == 3 && tedad != 1 && mark[v]){\n                        endflag = true;\n                        break;\n                    }\n                }\n                if(endflag)\n                    System.out.println(\"Invalid\");\n                else\n                    System.out.println(\"Valid\");\n            }\n\n            System.out.println(\"+++\");\n\n        }\n\n        input.close();\n    }\n}\n", "generated_code": "\nimport java.awt.Point;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.regex.Pattern;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n/**\n *\n * @author Mojtaba\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        StringBuilder sb = new StringBuilder();\n\n        int t = in.nextInt();\n        for (int i = 0; i < t; i++) {\n            int n = in.nextInt();\n            double sum = 0.000001;\n            for (int j = 1; j <= n; j++) {\n                sum += Math.log10(j);\n            }\n            sb.append((int) (Math.ceil(sum))).append(\"\\n\");\n        }\n        System.out.println(sb.toString().trim());\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2429_6__1_1353_12", "golden_code": "//                for (int j =0; j < p.length; j++) {\n//                    if (p[j]<a) {\n//                         sum=sum+p[j];\n//                    }\n//                }\n//                System.out.println(sum+1);\n//            }\n//        }\n//    }\n//}\nimport java.util.Scanner;\n\npublic class Main {\n\t    public static void main(String args[]){\n\t    \t        Scanner in = new Scanner(System.in);\n\t    \t                int t=in.nextInt();\n\t    \t                        for (int j = 0; j < t; j++) {\n\t    \t                        \t            int n=in.nextInt(),out=0;\n\t    \t                        \t                        for (int i = 1; i*i <= n; i++) {\n\t    \t                        \t                        \t                if(n%i==0&&i*i!=n)\n\t    \t                        \t                        \t                                    out+=i+n/i;\n\t    \t                        \t                        \t                                                    if(i*i==n)\n\t    \t                        \t                        \t                                                                        out+=i;\n\t    \t                        \t                        }\n\t    \t                        \t                                    out-=n;\n\t    \t                        \t                                                System.out.println(out);\n\t    \t                        }\n\t    }\n}", "generated_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tBufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(input.readLine());\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tStringTokenizer s = new StringTokenizer(input.readLine());\n\t\t\tint x = Integer.parseInt(s.nextToken()), y = Integer.parseInt(s.nextToken());\n\t\t\tif (x == y || (x > y && (x - y) == 2)) {\n\t\t\t\tif (x % 2 == 0) {\n\t\t\t\t\tSystem.out.println(x + y);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(x + y - 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"No Number\");\n\t\t\t}\n\t\t}\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_2824_7__1_101073_16", "golden_code": "import java.util.Scanner;\n\n/**\n * Created with ♥ by Mohammad-Reza on 27/Nov/2015.\n */\npublic class Main {\n\tpublic static int mod = 1000000000;\n\tpublic static class Matrix {\n\t\tlong a = 0, b = 1, c = 1, d = 1;\n\t\tpublic Matrix(long a, long b, long c, long d) {\n\t\t\tthis.a = a % mod;\n\t\t\tthis.b = b % mod;\n\t\t\tthis.c = c % mod;\n\t\t\tthis.d = d % mod;\n\t\t}\n\n\t\tpublic Matrix multiply(Matrix matrix) {\n\t\t\treturn new Matrix(a * matrix.a + b * matrix.c, a * matrix.b + b * matrix.d, c * matrix.a + d * matrix.c, c * matrix.b + d * matrix.d);\n\t\t}\n\n\t\tpublic Matrix power(long n) {\n\t\t\tif (n == 1) return this;\n\n\t\t\tMatrix result = this.power(n / 2);\n\t\t\tresult = result.multiply(result);\n\t\t\tif (n % 2 == 1) {\n\t\t\t\treturn result.multiply(this);\n\t\t\t} else {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"A: \" + a + \"\\tB: \" + b + \"\\nC: \" + c + \"\\tD: \" + d;\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint t = scanner.nextInt();\n\t\tMatrix one = new Matrix(0, 1, 1, 1);\n\t\tfor (; t > 0; t--) {\n\t\t\tlong n = scanner.nextLong();\n\t\t\tMatrix result = one.power(n);\n\t\t\tSystem.out.println(result.b);\n\t\t}\n\t}\n}\n", "generated_code": "\nimport java.util.Scanner;\n\n\npublic class Main{\n    public static void main (String [] args){\n        Scanner s = new Scanner(System.in);\n        int a = s.nextInt();\n        for (int i = 0 ; i < a ; i++){\n            int max = -1;\n            int min = 100;\n            int b = s.nextInt();\n            for (int j = 0 ; j < b ; j++){\n                int c = s.nextInt();\n                if (c>max)\n                    max=c;\n                if(c<min)\n                    min=c;\n            }\n            System.out.println((max-min)*2);\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_163__1_1001_152", "golden_code": "\nimport java.util.Scanner;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author ArcxX\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n         Scanner s = new Scanner (System.in);\n         while(s.hasNext()){\n               System.out.println(s.nextInt()+s.nextInt());\n             \n         }\n        \n        \n    }\n    \n}\n", "generated_code": "import java.util.Scanner;\nclass Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner (System.in) ;\n\t\twhile ( scan.hasNextInt() ) {\n\t\t\tSystem.out.println( scan.nextInt() + scan.nextInt() ) ;\n\t\t}\n\t}\n}\t", "score": 1.0}
{"id": "SHARE_1_1001_308__1_1001_333", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext())\n            System.out.println(scanner.nextInt()+scanner.nextInt());\n    }\n}\n", "generated_code": "import java.util.*;\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t    int a=0;\n\t    while(input.hasNext())\n\t    {\n\t    a=0;\n\t\ta = input.nextInt();\n\t\ta += input.nextInt();\n\t\tSystem.out.println(a);\n\t    }\n\t    System.exit(10);\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_258__1_1001_15", "golden_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n *\n * @author temp\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) throws IOException {\n        BufferedReader bf= new BufferedReader(new InputStreamReader(System.in));\n        String in;\n        while((in=bf.readLine())!=null){\n            in.trim();\n            String[] inputs= in.split(\" \");\n            int in1=Integer.parseInt(inputs[0]);\n            int in2=Integer.parseInt(inputs[1]);\n            System.out.println(in1+in2);\n        }\n    }\n    \n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner a = new Scanner(System.in);\n\t\tint b,c,d;\n\t\twhile(a.hasNext()){\n\t\t\tb=a.nextInt();\n\t\t\tc=a.nextInt();\n\t\t\td=b+c;\n\t\t\tSystem.out.println(d);\n\t\t}\n\t\t\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_458__1_1001_443", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        while(scanner.hasNext()){\n            int a=scanner.nextInt();\n            int b=scanner.nextInt();\n            System.out.println(a+b);\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner d = new Scanner(System.in);\n        while (d.hasNext()) {\n            int a, b, c = 0;\n            a = d.nextInt();\n            b = d.nextInt();\n            c = a + b;\n            System.out.println(c);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2599_12__1_1656_17", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    \n    public static int fullRec( int j ){\n        if( j == 0 )\n            return 0;\n        if( j == 1 )\n            return 1;\n        return (int)Math.pow( 10, j - 1 ) + 9 * fullRec( j - 1 );\n    }\n    \n    public static int rec( int num, int j ){\n        \n        if( num < 4 )\n            return num * fullRec( j );\n        else\n            return (int)Math.pow( 10, j ) + ( num - 1 ) * fullRec( j );\n        \n    }\n    \n    public static int getFourCount( int num ){\n    \n        int[] array = new int[9];\n        int fourCount = 0; \n        int i, j;\n        \n        i = 0;\n        while( num != 0 ){\n            array[i] = num % 10;\n            num /= 10;\n            i++;\n        }\n        \n        for( j = i - 1; j > -1; j-- ){\n            fourCount += rec( array[j], j );\n        }\n        \n        return fourCount;\n    }\n    \n    public static int getRealElevation( int elev ){\n        return elev - getFourCount( elev );\n    }\n       \n    public static void main(String[] args) {\n        \n        Scanner input = new Scanner( System.in );\n        \n        int n = input.nextInt();\n        while( n != 0 ){\n            System.out.printf( \"%d: %d\\n\", n, getRealElevation( n ) );\n            n = input.nextInt();\n        }\n    }\n}", "generated_code": "import java.util.*;\n\npublic class Main{\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint result = 0;\n\t\t\tString tmp = sc.nextLine();\n\t\t\tif(tmp.equals(\"-1\")){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tString[] splitedByWhiteSpace = tmp.split(\" \");\n\t\t\tfor (String item : splitedByWhiteSpace) {\n\t\t\t\tint crossed = Integer.parseInt(item) *2;\n\t\t\t\tfor (String compare : splitedByWhiteSpace) {\n\t\t\t\t\tif(crossed == Integer.parseInt(compare)){\n\t\t\t\t\t\tresult++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult--;\n\t\t\tSystem.out.println(Integer.toString(result));\n\t\t\tresult=0;\n\t\t}\n\t\t\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1319_30__1_1104_43", "golden_code": "import java.util.Scanner;\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n       Scanner in  = new Scanner(System.in);\n       String s = new String();\n       int a,b;\n       boolean w=false;\n       while(in.hasNext()){\n           \n           s=in.nextLine();\n           \n           String[] ss = s.split(\" \");\n           int c = Integer.valueOf(ss[0]);\n           if(c == 5280)\n               break;\n           if(w)\n            System.out.println();\n           w=true;\n           for(int i=1; i<ss.length;i++){\n               a=Integer.valueOf(ss[i-1]);\n               if(i==1)\n                   a=0;\n               b=Integer.valueOf(ss[i]);\n               System.out.print(\"Moving from \"+a+\" to \"+b+\": \");\n               if(b == c){\n                    System.out.println(\"found it!\");\n               }\n               else if(abs(b-c) > abs(a-c))\n                   System.out.println(\"colder.\");\n               else if(abs(b-c)<abs(a-c))\n                   System.out.println(\"warmer.\");\n               else if(abs(b-c)==abs(a-c))\n                   System.out.println(\"same.\");\n           }\n        }\n    }\n    public static int abs(int a){\n           if(a>=0)\n               return a;\n           return -a;\n       }\n\n}\n", "generated_code": "\nimport java.util.*;\n\npublic class Main {\nstatic Scanner in=new Scanner(System.in);\n    public static void main(String[] args) {\n       int n=in.nextInt();\n       in.nextLine();\n        for (int i = 0; i <n; i++) {\n            String str=in.nextLine();\n            String str2=\"\";\n            char[] Array=str.toCharArray();\n            for (int j =Array.length-1;j>=0 ; j--) {\n                str2+=Array[j];\n            }\n            System.out.println(str2);\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1656_22__1_1001_295", "golden_code": "import java.util.*;\nclass Main{\n  public static void main(String[] args){\n    Scanner jin = new Scanner(System.in);\n    int num = jin.nextInt();\n    while(num != -1){\n      ArrayList<Integer> myArray = new ArrayList();\n      while(true){\n\tmyArray.add(num);\n\tnum = jin.nextInt();\n\tif(num == 0)\n\t  break;\n      }\n      int count = 0;\n      for(int i=0; i<myArray.size(); i++)\n\tfor(int j=0; j<myArray.size(); j++)\n\t  if(i != j && myArray.get(j) == 2*myArray.get(i))\n\t    count++;\n      System.out.println(count);\n      num = jin.nextInt();\n    }\n    \n  }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext())\n            System.out.println(in.nextInt()+in.nextInt());\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1009_119__1_1009_82", "golden_code": "import java.util.Scanner;\nclass Main {\n\tstatic boolean adj[]=new boolean [100000000];\n\t\n\tpublic static void main(String s[]) {\n\t\tScanner cin = new Scanner(System.in);\n\t\tdouble sum=0;\n\t\tfor(int i=0;i<12;i++)\n\t\t{\n\t\t\tdouble val=cin.nextDouble();\n\t\t\tsum+=val;\n\t\t}\n\t\tSystem.out.printf(\"$%.2f\\n\",sum/12);\n\t\tadj[0]=true;\n\t}\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n \n   \n\n    public static void main(String[] args) {\n        \n        Scanner input=new Scanner(System.in);\n        \n        double sumOfMoney=0;\n        for(int i=1;i<=12;i++)\n            sumOfMoney+=input.nextDouble();\n        \n        System.out.printf(\"$%.2f\\n\",sumOfMoney/12.0);\n    }\n\n}", "score": 1.0}
{"id": "SHARE_1_1006_62__1_1006_4", "golden_code": "\nimport java.util.Scanner;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author mehrdad\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner sc=new Scanner(System.in);\n        String str=sc.next();\n        float n=Float.parseFloat(str);\n        float sum=0;\n        while(!str.equals(\"0.00\"))\n        {\n            for(float i=2;i<=300;i++)\n            {\n                sum+=1/i;\n                if(sum>=n)\n                {\n                    System.out.print((int)i-1+\" card(s)\\n\");\n                    sum=0;\n                    break;\n                }\n            }\n            str=sc.next();\n            n=Float.parseFloat(str);\n        }\n    }\n}\n", "generated_code": "import java.util.*;\nclass Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile(scan.hasNextFloat())\n\t\t{\n\t\t\tfloat a = scan.nextFloat();\n\t\t\tfloat s = 0;\n\t\t\tif(a==0.00)\n\t\t\t\tbreak;\n\t\t\tint n = 2;\n\t\t\twhile(s<a)\n\t\t\t{\n\t\t\t\ts+=(1/(float)n);\n\t\t\t\tn++;\n\t\t\t}\n\t\t\tSystem.out.println((n-2)+\" card(s)\");\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1006_1__1_1230_77", "golden_code": "import java.util.Scanner;\n\npublic class Main{\n    public static void main(String[] args){\n        Scanner input  = new Scanner(System.in);\n        while (true){\n            String line = input.nextLine();\n            if(line.equals(\"0.00\"))\n                break;\n            double len = Double.parseDouble(line);\n            double i = 1;\n            double l = 0;\n            while (true){\n                i++;\n                l += 1/i;\n                if(l>=len)\n                    break;\n            }\n            System.out.println((int) i - 1 + \" card(s)\");\n        }\n    }\n}\n", "generated_code": "\nimport java.util.Arrays;\nimport java.util.Scanner;\npublic class Main {\n\n    public static void main(String[] args) {\n        String s;\n        int j=0;\n        int [] sum=new int [0];\n        char[] in = new char [0];\n        boolean flag=true;\n        Scanner inp=new Scanner (System.in);\n        while((s=inp.next()).equals(\"0\")!=true){\n        in=s.toCharArray();\n        sum=Arrays.copyOf(sum, sum.length+1);\n        sum[j]=10;\n     \n        while (sum[j]/10!=0){\n        \n        if(flag){\n        for (int i = 0 ; i<in.length;i++)\n        sum[j]+=in[i]-48;\n        sum[j]-=10;\n        \n        flag=false;\n        }\n        else {\n            \n            sum[j]=sum[j]/10+sum[j]%10;\n            \n        }\n        \n        }\n        flag=true;\n        \n        j++;\n        }\n        for (int i = 0 ; i<sum.length;i++)\n        System.out.println(sum[i]);\n\n    \n    }\n\n   \n}\n", "score": 0.0}
{"id": "SHARE_1_1511_5__1_106017_53", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    static long nway[] = new long[350];\n    static int nums[] = new int[17];\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        for (int i = 17; i > 0; i--) {\n            nums[17 - i] = i * i;\n        }\n        while (true) {\n            int n = s.nextInt();\n            if (n == 0) {\n                break;\n            }\n            for (int i = 0; i < 350; i++) {\n                nway[i] = 0;\n            }\n            int i, j, v, c;\n            v = 17;\n            nway[0] = 1;\n            for (i = 0; i < v; i++) {\n                c = nums[i];\n                for (j = c; j <= n; j++) {\n                    nway[j] += nway[j - c];\n                }\n            }\n            System.out.println(nway[n]);\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\n\t\tScanner scan=new Scanner(System.in);\n\t\twhile(scan.hasNext()){\n\t\tint c=scan.nextInt();\n\n\t\tint sum=0;\n\t\tfor(int i=0,a=c;i<3;i++,a/=10)\n\t\t\tsum+=(a%10)*(a%10)*(a%10);\n\t\tString b=\"No\";\n\t\tif (c==sum)\n\t\t\tb=\"Yes\";\n\t\tSystem.out.println(b);}\n}}", "score": 0.0}
{"id": "SHARE_1_2578_19__1_2848_32", "golden_code": "import java.util.*;\n\npublic class Main\n{\n\tstatic Scanner scan = new Scanner(System.in);\n\tpublic static void main(String[] args) throws Exception\n    {\n\t\tint tc = scan.nextInt();\n\t\tscan.nextLine();\n\t\twhile(tc-->0)\n\t\t{\n\t\t\tString s = scan.nextLine();\n\t\t\tint g = 0 , b = 0 ;\n\t\t\tfor(int i = 0 ; i < s.length() ; i++)\n\t\t\t\tif(s.charAt(i) == 'g' || s.charAt(i) == 'G')\n\t\t\t\t\tg++;\n\t\t\t\telse if(s.charAt(i) == 'b' || s.charAt(i)=='B')\n\t\t\t\t\tb++;\n\t\t\tSystem.out.println(s+\" is \"+(b == g ? \"NEUTRAL\" : (b > g ? \"A BADDY\" : \"GOOD\")));\n\t\t}\n    }\n}", "generated_code": "\n\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int testCases = scanner.nextInt();\n        int[] result= new int[testCases];\n\n        for(int i = 0 ; i<testCases ; i++){\n            int n = scanner.nextInt();\n            int c= scanner.nextInt();\n            int indexToAttack = 0;\n            int[] enemyLine = new int[n];\n            boolean goRight = true;\n\n            for (int j = 0 ; j<n ; j++){\n                enemyLine[j] = scanner.nextInt();\n            }\n\n            for (int j =0 ; j<n+5 ; j++){\n                int temp = enemyLine[indexToAttack % n];\n                temp -= c;\n                if (temp <=0)\n                    goRight = !goRight;\n                enemyLine[indexToAttack % n]=temp;\n                if(hasPositive(enemyLine) && j != n+4){\n                    if(indexToAttack>=0 && goRight){\n                        do {\n                            indexToAttack++;\n                        }\n                        while (enemyLine[indexToAttack % n]<=0);\n                    }\n                    else if (indexToAttack>=n && !goRight){\n                        do {\n                            indexToAttack--;\n                        }while (enemyLine[indexToAttack % n]  <=0);\n                    }\n                    else if (indexToAttack>=0 && !goRight){\n                        indexToAttack+=n;\n                        do {\n                            indexToAttack--;\n                        }while (enemyLine[indexToAttack % n]  <=0);\n                    }\n                    result[i]=(indexToAttack%n) +1;\n                }\n                else{\n                    result[i]=(indexToAttack%n) +1;\n                    break;\n                }\n            }\n        }\n        for (int i= 0 ; i<testCases ; i++){\n            System.out.println(result[i]);\n        }\n\n    }\n\n    public static Boolean hasPositive(int[] input){\n        int result=0;\n        for (int i = 0 ; i<input.length ; i++){\n            if (input[i]<=0){\n                result++;\n            }\n        }\n        if(result==input.length)\n            return false;\n        return true;\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2822_7__1_2822_32", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int tn = sc.nextInt();\n        for(int ti = 0; ti < tn; ti++) {\n            int n = sc.nextInt();\n            int so = n * (2 + 2 * n) / 2;\n            int se = n * (2 * n) / 2;\n            System.out.print(n * (n + 1) / 2);\n            System.out.print(\" \");\n            System.out.print(se + \" \");\n            System.out.println(so);\n        }\n    }\n}\n", "generated_code": "import java.util.*;\npublic class  Main{\n\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tint t = s.nextInt();\n\t\tfor (int k = 0 ; k < t ;k++)\n\t\t{\n\t\t\tint sum = 0;\n\t\t\tint sum1 = 0;\n\t\t\tint sum2 = 0;\n\t\t\tint n = s.nextInt();\n\t\t\tif(n >= 1 && n <= 10000)\n\t\t\t{\n\t\t\t\tfor(int i = 1 ; i <= n; i++)\n\t\t\t\t{\n\t\t\t\t\tsum = sum + i; \n\t\t\t\t}\n\t\t\t\tfor(int j = 0 ; j < n; j++)\n\t\t\t\t{\n\t\t\t\t\tint odd = (2*j)+1;\n\t\t\t\t\tsum1 = sum1 + odd; \n\t\t\t\t}\n\t\t\t\tfor(int j = 1 ; j <= n; j++)\n\t\t\t\t{\n\t\t\t\t\tint even = (2*j);\n\t\t\t\t\tsum2 = sum2 + even; \n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(sum+\" \"+sum1+\" \"+sum2);\n\t\t}\n\t\tSystem.exit(0);\n\t\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1230_94__1_1230_103", "golden_code": "import java.util.Scanner;\nimport java.util.Vector;\n\n\npublic class Main {\npublic static void main(String[] args) {\n\tScanner in=new Scanner(System.in);\n\tVector<String> a=new Vector<String>();\n\tString num=in.next();\n\twhile(!num.equalsIgnoreCase(\"0\")){\n\t\ta.add(num);\n\t\tnum=in.next();\n\t}\n\tfor(int i=0;i<a.size();i++)\n\t\tSystem.out.println(calc(a.elementAt(i)));\n\tin.close();\n}\npublic static int calc(String p){\n\tint temp=0;\n\tString w=\"\";\n\tfor(int i=0;i<p.length();i++){\n\t\ttemp+=(p.charAt(i)-48);\n\t}\n\tif(temp>=10)\n\twhile(true){\n\t\n\t\tw=String.valueOf(temp);\n\t\ttemp=0;\n\t\tfor(int i=0;i<w.length();i++)\n\t\t\ttemp+=(w.charAt(i)-48);\n\t\tif(temp<=9)\n\t\t\tbreak;\n\t}\n\t\n\treturn temp;\n}\n}", "generated_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tString num = scanner.next();\n\t\t\tif (num.charAt(0)=='0')\n\t\t\t\treturn;\n\t\t\tint size = num.length();\n\t\t\twhile (size!=1){\n\t\t\t\tlong sum = 0;\n\t\t\t\tfor (int i = 0;i<size;i++){\n\t\t\t\t\tsum += num.charAt(i)-'0';\n\t\t\t\t}\n\t\t\t\tnum =sum+\"\";\n\t\t\t\tsize = num.length();\n\t\t\t}\n\t\t\tSystem.out.println(num);\n\t\t}\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_58__1_1001_451", "golden_code": "import java.util.*;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner in=new Scanner(System.in);\n\t\tint a=0, b=0;\n\t\twhile(in.hasNext()){\n\t\t\ta=in.nextInt();\n\t\t\tb=in.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\n\nclass Main {\n\tpublic static void main(String argv[]){\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile (sc.hasNextInt()) {\n\t\t    int x1 = sc.nextInt();\n\t\t    int x2 = sc.nextInt();\n\t\t    System.out.println(x1+x2);\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_288__1_2769_3", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc =new Scanner(System.in);\n        while(sc.hasNext()){\n            System.out.println(sc.nextInt() +sc.nextInt());\n            \n        }\n    }\n\n}", "generated_code": "import java.util.Scanner;\n\n/**\n *\n * @author 9216903\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    static boolean y=false;\n    public static void main(String[] args) {\n        Scanner bf = new Scanner(System.in);\n        int n = Integer.parseInt(bf.nextLine());\n        while(n>0){\n            y=false;\n            int f = Integer.parseInt(bf.nextLine());\n            String line = bf.nextLine();\n            //System.out.println(mai);\n            String res =\"\";\n            if(line.charAt(line.length()-1)!='-')\n                y=true;\n            if(line.charAt(0)!='-')\n                y=true;\n            if(line.length()>1){\n                line+=reverse(line);\n            }\n            //System.out.println(rev);\n            int thisc =0,thisfib=1,lasfib=0;\n            \n            //int dir=0;\n            //System.out.println(y);\n            if(y&&line.length()>0)\n            for(int i=0;i<f;i++){\n                //System.out.println(line);\n                    thisc=thisc%line.length();\n                    \n                    \n                        char c= line.charAt(thisc);\n                        if(c!='-'){\n                            res+=c;\n                            //System.out.println(thisfib);\n                            thisc+=thisfib;\n                            int m=thisfib+lasfib;\n                            lasfib=thisfib;\n                            thisfib=m;\n                            \n                        }\n                        else{\n                            thisfib=1;\n                            lasfib=0;\n                            thisc+=1;\n                            i--;\n                        }\n                    \n                    \n        \n            }\n            \n            System.out.println(res);\n            n--;\n            \n        }\n    }\n    \n\n    public static String reverse(String in){\n        String res=\"\";\n        for(int i=in.length()-2;i>0;i--){\n            res+=in.charAt(i);\n            if(in.charAt(i)!='-')\n                y=true;\n        }\n        \n        return res;\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2027_18__1_2811_16", "golden_code": "import java.util.*;\n\npublic class Main {\n\t\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\t\n\t\twhile (n-- > 0) {\n\t\t\tchar[] a = in.next().toCharArray();\n\t\t\tString s = \"\";\n\t\t\tint r = 0;\n\t\t\tfor (int i = 7, j = 0, d = 4; j < 32 && d > -1; i--, j++) {\n\t\t\t\tif (i < 0) {\n\t\t\t\t\ti = 7;\n\t\t\t\t\td--;\n\t\t\t\t\ts += r + \".\";\n\t\t\t\t\tr = 0;\n\t\t\t\t}\n\t\t\t\tr += (a[j] - '0') * Math.pow(2, i);\n\t\t\t}\n\t\t\tSystem.out.println(s + r);\n\t\t}\n\t}\n}\n", "generated_code": "\nimport java.awt.Point;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.lang.reflect.Array;\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.PriorityQueue;\nimport java.util.Random;\nimport java.util.StringTokenizer;\nimport static java.lang.Math.*;\nimport java.math.BigDecimal;\nimport java.util.Map;\nimport java.util.Scanner;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n *\n * @author Mojtaba\n */\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        MyScanner in = new MyScanner(System.in);\n        //Scanner in = new Scanner(System.in);\n        PrintWriter writer = new PrintWriter(new BufferedOutputStream(System.out));\n        StringBuilder sb = new StringBuilder(\"\");\n\n        int t = in.nextInt();\n        for (int ii = 0; ii < t; ii++) {\n            int n = in.nextInt();\n            int m = in.nextInt();\n            HashSet<Integer> set = new HashSet<Integer>();\n            for (int i = 0; i < n; i++) {\n                set.add(in.nextInt());\n            }\n            for (int i = 0; i < m; i++) {\n                set.remove(in.nextInt());\n            }\n            ArrayList<Integer> list = new ArrayList<Integer>(set);\n            Collections.sort(list);\n            if (!list.isEmpty()) {\n                for (int i = 0; i < list.size() - 1; i++) {\n                    sb.append(list.get(i)).append(\",\");\n                }\n                sb.append(list.get(list.size() - 1)).append(\"\\n\");\n            }\n            else{\n                sb.append(\"\\n\");\n            }\n        }\n\n        //System.out.println(sb.toString().trim());\n        writer.println(sb.toString().trim());\n        writer.flush();\n        in.close();\n    }\n\n    public static String lcs(String a, String b) {\n        int[][] lengths = new int[a.length() + 1][b.length() + 1];\n\n        // row 0 and column 0 are initialized to 0 already\n\n        for (int i = 0; i < a.length(); i++) {\n            for (int j = 0; j < b.length(); j++) {\n                if (a.charAt(i) == b.charAt(j)) {\n                    lengths[i + 1][j + 1] = lengths[i][j] + 1;\n                } else {\n                    lengths[i + 1][j + 1] =\n                            Math.max(lengths[i + 1][j], lengths[i][j + 1]);\n                }\n            }\n        }\n\n        // read the substring out from the matrix\n        StringBuilder sb = new StringBuilder();\n        for (int x = a.length(), y = b.length();\n                x != 0 && y != 0;) {\n            if (lengths[x][y] == lengths[x - 1][y]) {\n                x--;\n            } else if (lengths[x][y] == lengths[x][y - 1]) {\n                y--;\n            } else {\n                assert a.charAt(x - 1) == b.charAt(y - 1);\n                sb.append(a.charAt(x - 1));\n                x--;\n                y--;\n            }\n        }\n\n        return sb.reverse().toString();\n    }\n}\n\nclass MyScanner {\n\n    BufferedReader reader;\n    StringTokenizer tokenizer;\n\n    public MyScanner(InputStream stream) {\n        this.reader = new BufferedReader(new InputStreamReader(stream));\n    }\n\n    public int nextInt() throws IOException {\n        return Integer.parseInt(next());\n    }\n\n    public int[] nextIntegerArray(int n) throws IOException {\n        int[] a = new int[n];\n        for (int i = 0; i < a.length; i++) {\n            a[i] = nextInt();\n        }\n        return a;\n    }\n\n    public long[] nextLongArray(int n) throws IOException {\n        long[] a = new long[n];\n        for (int i = 0; i < a.length; i++) {\n            a[i] = nextLong();\n        }\n        return a;\n    }\n\n    public int nextInt(int radix) throws IOException {\n        return Integer.parseInt(next(), radix);\n    }\n\n    public long nextLong() throws IOException {\n        return Long.parseLong(next());\n    }\n\n    public long nextLong(int radix) throws IOException {\n        return Long.parseLong(next(), radix);\n    }\n\n    public double nextDouble() throws IOException {\n        return Double.parseDouble(next());\n    }\n\n    public BigInteger nextBigInteger() throws IOException {\n        return new BigInteger(next());\n    }\n\n    public BigInteger nextBigInteger(int radix) throws IOException {\n        return new BigInteger(next(), radix);\n    }\n\n    public String next() throws IOException {\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\n            tokenizer = new StringTokenizer(reader.readLine());\n            return this.next();\n        }\n        return tokenizer.nextToken();\n    }\n\n    public void close() throws IOException {\n        this.reader.close();\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1006_112__1_1006_10", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n   public static void main(String[] args) {\n      Scanner in = new Scanner(System.in);\n      float c = in.nextFloat();\n      while (c != 0.0) {\n         float sum = (float) 0.0;\n         int n;\n         for (n = 0; sum < c; n++) {\n            sum += 1.0f / (n + 2);\n         }\n         System.out.println(n + \" card(s)\");\n         c = in.nextFloat();\n      }\n   }\n}", "generated_code": "\n\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[]args){\n        float sum,x,n;\n        int counter;\n        Scanner cin = new Scanner(System.in);\n        while(true){\n            n=2;\n            x=cin.nextFloat();\n            counter=1;\n            if(x==0){\n                break;\n            }\n            sum=1/n;\n            while(sum<x){\n                n++;\n               sum+=1/n;\n               counter++;\n            }\n            System.out.println(counter+\" card(s)\");\n\n\n        }\n    }\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1319_9__1_2090_13", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\n\t\tScanner in=new Scanner(System.in);\n\t\t\n\t\tint place=in.nextInt();\n\t\twhile(place!=5280)\n\t\t{\n\t\t\tint[] p=new int[10000];\n\t\t\tint last=1;\n\t\t\tp[0]=0;\n\t\t\tp[last++]=in.nextInt();\n\t\t\twhile(p[last-1]!=place)\n\t\t\t{\n\t\t\t\tp[last++]=in.nextInt();\n\t\t\t}\n\t\t\t\n\t\t\tint first=0;\n\t\t\tint dest=0;\n\t\t\tfor(int i=0;i<last-2;i++)\n\t\t\t{\n\t\t\t\t\tfirst=p[i];\n\t\t\t\t\tdest=p[i+1];\n\t\t\t\n\t\t\t\tif( Math.abs(place-dest)<Math.abs(place-first) )\n\t\t\t\t\tSystem.out.println(\"Moving from \"+first+\" to \"+dest+\": warmer.\");\n\t\t\t\telse if(Math.abs(place-dest)>Math.abs(place-first))\n\t\t\t\t\tSystem.out.println(\"Moving from \"+first+\" to \"+dest+\": colder.\");\n\t\t\t\telse\n\t\t\t\t\tSystem.out.println(\"Moving from \"+first+\" to \"+dest+\": same.\");\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(\"Moving from \"+p[last-2]+\" to \"+place+\": found it!\");\n\t\t\t\n\t\t\tplace=in.nextInt();\n\t\t\tif(place!=5280)\n\t\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        while(sc.hasNext()){\n            String s = sc.next();\n            String t = sc.next();\n            int counter=0;\n            String res=\"\";\n            for (int i = 0; i < t.length(); i++) {\n                if(s.charAt(counter) == t.charAt(i))\n                    res+=s.charAt(counter++);\n                if(counter == s.length())\n                    break;\n            }\n            if(res.equals(s))\n                System.out.println(\"Yes\");\n            else\n                System.out.println(\"No\");\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_101158_11__1_106025_33", "golden_code": "import java.util.*;\nimport java.io.*;\n\npublic class Main\n{\n\tpublic static void main(String[] args) throws IOException\n\t{\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\n\t\twhile (true)\n\t\t{\n\t\t\tString line = reader.readLine().trim();\n\n\t\t\tif(line.charAt(0) == '.')\tbreak;\n\n\t\t\tboolean plus = false;\n\n\t\t\tint idxOp;\n\n\t\t\tif(line.contains(\"+\"))\n\t\t\t{\n\t\t\t\tidxOp = line.indexOf(\"+\") + 2;\n\t\t\t\tplus = true;\n\t\t\t}\n\t\t\telse\tidxOp = line.indexOf(\"-\") + 2;\n\n\n\t\t\tArrayList<String> res = new ArrayList<String>();\n\t\t\tArrayList<String> sec = new ArrayList<String>();\n\n\t\t\tStringTokenizer st = new StringTokenizer(line.substring(0, idxOp), \" +-[],\");\n\n\t\t\twhile (st.hasMoreTokens()) \tres.add(st.nextToken());\n\n\t\t\tst = new StringTokenizer(line.substring(idxOp), \" +-[],\");\n\n\t\t\twhile (st.hasMoreTokens()) \tsec.add(st.nextToken());\n\n\t\t\tif(plus)\n\t\t\t{\n\t\t\t\tfor(int i = 0; i < sec.size(); i++)\n\t\t\t\t\tres.add(res.size(), sec.get(i));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfor(int i = 0; i < sec.size(); i++)\n\t\t\t\t\tif(res.contains(sec.get(i)))\n\t\t\t\t\t\tres.remove(sec.get(i));\n\t\t\t}\n\n\t\t\twriter.print(\"[\");\n\n\t\t\tfor(int i = 0; i < res.size(); i++)\n\t\t\t\twriter.print(res.get(i) + (i != res.size()-1 ? \",\" : \"\"));\n\n\t\t\twriter.print(\"]\\n\");\n\n\t\t}\n\n\t\twriter.flush();\n\t\twriter.close();\n\t}\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n  public static void main (String argv[]) {\n    Scanner s = new Scanner(System.in);\n    int n = s.nextInt();\n    String dummy = s.nextLine();\n    while (n>0) {\n      n--;\n      String l = s.nextLine();\n      String result = new String();\n      char [] line = l.toCharArray();\n      for (int i=0 ; i<line.length ; i++) {\n\tint ctr=1, j;\n\tfor (j=i+1; j<line.length ; j++) {\n\t  if (line[i]==line[j])\n\t    ctr++;\n\t  else\n\t    break;\n\t}\n\tresult+=ctr+\"\"+line[i];\n\ti=j-1;\n      }\n      System.out.println(result);\n    }\n  }\n}", "score": 0.0}
{"id": "SHARE_1_1018_72__1_1018_46", "golden_code": "\nimport java.util.Scanner;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n/**\n *\n * @author Mojtaba\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        StringBuilder sb=new StringBuilder();\n        int t;\n        while ((t=in.nextInt()) > 0) {\n            int[] a = new int[t];\n            int[] b = new int[t];\n            for (int i = 0; i < a.length; i++) {\n                a[i] = in.nextInt();\n            }\n            for (int i = 0; i < b.length; i++) {\n                b[i] = in.nextInt();\n            }\n            int scoreA = 0, scoreB = 0;\n            for (int i = 0; i < t; i++) {\n                boolean aIsMin = Math.min(a[i], b[i]) == a[i];\n                if (Math.abs(a[i] - b[i]) == 1) {\n                    if (a[i] + b[i] == 3) {\n                        if (aIsMin) {\n                            scoreA += 6;\n                        } else {\n                            scoreB += 6;\n                        }\n                    } else {\n                        if (aIsMin) {\n                            scoreA += (a[i] + b[i]);\n                        } else {\n                            scoreB += (a[i] + b[i]);\n                        }\n                    }\n                } else if (Math.abs(a[i] - b[i]) > 1) {\n                    if (aIsMin) {\n                        scoreB += Math.max(a[i], b[i]);\n                    } else {\n                        scoreA += Math.max(a[i], b[i]);\n                    }\n                }\n            }\n            sb.append(\"A has \").append(scoreA).append(\" points. B has \").append(scoreB).append(\" points.\\n\\n\");\n        }\n        System.out.println(sb.toString().trim());\n    }\n}\n", "generated_code": "import java.util.Scanner;\nclass Main\n{\n    static Scanner in = new Scanner(System.in);\n    public static void func(int[] arr,int counter)\n    {\n        for(int i=0;i<counter;i++)\n        {\n            arr[i] = in.nextInt();\n        }\n    }\n    public static void main(String[] args)\n    {\n        int counter = in.nextInt();\n        do\n        {\n        if(counter==0)\n            System.exit(0);\n\n        int[] arr = new int[counter];\n        int[] arr2 =new int[counter];\n        \n        int sum=0 , sum2=0;\n        func(arr,counter);\n        func(arr2,counter);\n        for(int i=0;i<counter;i++)\n        {\n            if(arr[i]==1 && arr2[i]==2)\n                sum+=6;\n            else if(arr2[i]==1 && arr[i]==2)\n                sum2+=6;\n                \n            else if(arr[i]-arr2[i]==1)\n                sum2+=arr[i]+arr2[i];\n            else if(arr2[i]-arr[i]==1)\n                sum+=arr[i]+arr2[i];\n            else if(arr[i]>arr2[i])\n                sum+=arr[i];\n            else if(arr[i]<arr2[i])\n                sum2+=arr2[i];\n                        \n        }\n     System.out.println(\"A has \"+sum+\" points. B has \"+sum2+\" points.\");\n\tcounter=in.nextInt();\n\tif(counter!=0)\n\t  System.out.print(\"\\n\");\n     }while(counter!=0);\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1099_38__1_1099_86", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        int n;\n        Scanner input = new Scanner(System.in);\n        n = input.nextInt();\n        for( int j = 1; n != 0; j++ ){\n            int sum = 0, avg, i, a[] = new int[50];\n            for( i = 0; i < n; i++ ){\n                a[i] = input.nextInt();\n                sum += a[i];\n            }\n            avg = sum / n;\n            for( i = sum = 0; i < n; i++ ){\n                sum += ( a[i] > avg ? a[i]-avg : 0 );\n            }\n            System.out.println(\"Set #\" + j);\n            System.out.println(\"The minimum number of moves is \" + sum + \".\\n\");\n            n = input.nextInt();\n        }\n    }  \n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        int count = 0;\n        Scanner sc = new Scanner(System.in);\n        while (true) {\n            count++;            \n            int n = sc.nextShort();\n            if (n == 0) {\n                break;\n            }\n            int sum =0 ;\n            int sumExtra = 0;            \n           \n            int[] data = new int[n];\n            for (int i = 0; i < n; i++) {\n                data[i] = sc.nextShort();                \n                sum += data[i];\n            }                                 \n            for (int i = 0; i < n; i++) {\n                if (data[i] > sum / n) {\n                    sumExtra += (data[i] - (sum / n));\n                }\n            }\n            System.out.println(\"Set #\" + count);\n            System.out.println(\"The minimum number of moves is \" + sumExtra + \".\\n\");\n        }\n    }\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_286__1_1001_450", "golden_code": "import java.util.Scanner;\nimport java.lang.System;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner s=new Scanner(System.in);\n\t\twhile(s.hasNextInt())\n\t\t\tSystem.out.println(s.nextInt()+s.nextInt());\n\t}\n}", "generated_code": "import java.io.InputStreamReader;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        int n, k;\n        Scanner sc = new Scanner(new InputStreamReader(System.in));\n        while(sc.hasNext()) {\n            n = sc.nextInt();\n            k = sc.nextInt();\n            System.out.println(n + k);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_5_1010_2__1_2429_14", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner read = new Scanner(System.in);\n\t\tArrayList<Float> ppws = new ArrayList<Float>();\n\t\tArrayList<Float> weights = new ArrayList<Float>();\n\t\tArrayList<Float> profits = new ArrayList<Float>();\n\t\tint cases;\n\t\tint n;\n\t\tfloat k;\n\t\tfloat weight, profit, ppw;\n\t\tfloat totalProfit = 0;\n\n\t\tcases = read.nextInt();\n\t\t\n\t\tfor (int i = 0; i < cases; i++) {\n\t\t\t\n\t\t\tppws.clear();\n\t\t\tweights.clear();\n\t\t\tprofits.clear();\n\t\t\t\n\t\t\tn = read.nextInt();\n\t\t\tk = read.nextFloat();\n\t\t\ttotalProfit = 0;\n\t\t\t\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\n\t\t\t\tweight = read.nextFloat();\n\t\t\t\tprofit = read.nextFloat();\n\t\t\t\tppw = profit/weight;\n\t\t\t\t\n\t\t\t\tif(j == 0){\n\t\t\t\t\tppws.add(ppw);\n\t\t\t\t\tweights.add(weight);\n\t\t\t\t\tprofits.add(profit);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tinsertion_sort(ppws, weights, profits, ppw, weight, profit);\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\n\t\t\t\tif(weights.get(j) < k){\n\t\t\t\t\ttotalProfit += profits.get(j);\n\t\t\t\t\tk -= weights.get(j);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ttotalProfit += k * ppws.get(j);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\ttotalProfit *= 100;\n\t\t\ttotalProfit = Math.round(totalProfit);\n\t\t\tint temp = (int) totalProfit;\n\t\t\tif(temp % 100 == 0)\n\t\t\t\tSystem.out.println(temp/100 + \".00\");\n\t\t\telse if(temp % 10 == 0)\n\t\t\t\tSystem.out.println(totalProfit/100 + \"0\");\n\t\t\telse\n\t\t\t\tSystem.out.println(totalProfit/100);\n\n\t\t}\n\t\tread.close();\n\n\t}\n\t\n\tpublic static void insertion_sort(ArrayList<Float> ppws, ArrayList<Float> amounts, ArrayList<Float> profits, float num, float amount, float profit){\n\t\tfor(int i = ppws.size()-1; i >= 0; i--){\n\t\t\t\n\t\t\tif(num <= ppws.get(i)){\n\t\t\t\tppws.add(i+1, num);\n\t\t\t\tamounts.add(i+1, amount);\n\t\t\t\tprofits.add(i+1, profit);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif(i == 0 && num >= ppws.get(0)){\n\t\t\t\tppws.add(0, num);\n\t\t\t\tamounts.add(0, amount);\n\t\t\t\tprofits.add(0, profit);\n\t\t\t}\n\n\t\t}\n\t}\n\n}", "generated_code": "import java.util.*;\n\npublic class Main {\n\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner input=new Scanner(System.in);\n\n\t\tint  n, t;\n\n\n\t\tlong s;\n\n\t\tt=input.nextInt();\n\n\t\tint i;\n\t\twhile(t-->0){\n\n\t\t\tn=input.nextInt();\n\t\t\ts=0;\n\n\t\t\tfor(i=1;i*i<n;i++)\n\t\t\t\tif(n%i==0){\n\t\t\t\t\ts+=i;\n\t\t\t\t\ts+=n/i;\n\t\t\t\t}\n\t\t\t\n\t\t\tif((i*i)==n)\n\t\t\t\ts+=i;\n\t\t\t\n\t\t\ts-=n;\n\t\t\t\n\t\t\tSystem.out.println(s);\n\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1099_51__1_1099_71", "golden_code": "\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n;\n\t\tint cases =0;\n\t\twhile ((n=sc.nextInt())>0) {\n\t\t\tint[] arr = new int[n];\n\t\t\tint sum = 0;\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i]  = sc.nextInt();\n\t\t\t\tsum+=arr[i];\n\t\t\t}\n\t\t\t\n\t\t\tint ave = sum/n;\n\t\t\tint move = 0;\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tif(arr[i]>ave) move += arr[i]-ave; \n\t\t\t}\n\t\t\tSystem.out.println(\"Set #\"+ ++cases);\n\t\t\tSystem.out.println(\"The minimum number of moves is \"+move+\".\");\n\t\t\tSystem.out.println();\n\t\t}\n\t\tsc.close();\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint set=0;\n\t\twhile (true){\n\t\t\tint n = scanner.nextInt();\n\t\t\tif (n<=0)\n\t\t\t\treturn;\n\t\t\tint[] a = new int[n];\n\t\t\tfor (int i =0;i<n;i++)\n\t\t\t\ta[i]=scanner.nextInt();\n\t\t\tlong avg = 0;\n\t\t\tfor (int i =0;i<n;i++)\n\t\t\t\tavg+=a[i];\n\t\t\tavg/=n;\n\t\t\tint moves = 0;\n\t\t\tfor (int i =0;i<n;i++)\n\t\t\t\tmoves+=Math.abs(a[i]-avg);\n\t\t\tmoves/=2;\n\t\t\tSystem.out.println(\"Set #\"+(++set));\n\t\t\tSystem.out.println(\"The minimum number of moves is \"+moves+\".\");\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2847_48__1_2847_3", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int time = scanner.nextInt();\n    for (int i = 0 ; i < time ; i ++ ){\n      int n = scanner.nextInt();\n      double [] arr = new double[n];\n      for ( int j = 0 ; j < n ; j ++){\n        arr[j] = scanner.nextInt();\n      }\n      double min = arr[0];\n      double max = arr[0];\n      double sum = 0 ; \n      for (int j = 0 ; j < n ; j ++ ){\n        if (arr[j] < min  ){\n          min = arr[j];\n        }\n        if ( arr[j] > max){\n          max = arr[j];\n        }\n        sum +=arr[j];\n      }\n      \n      if( (min + max)/2 - sum/n < 1 && (min + max)/2 - sum/n > -1){\n        System.out.println(\"Yes\");\n      }else {\n        System.out.println(\"No\");\n      }\n    }\n  }\n}", "generated_code": "\nimport java.util.Scanner;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author Violets\n */\npublic class Main {\n    public static void main(String[] args){\n        Scanner sc=new Scanner(System.in);\n        int k=sc.nextInt();\n        for(int j=0;j<k;j++){\n            int n=sc.nextInt();\n            int min=sc.nextInt();\n            int max=min;\n            int sum=min;\n            for (int i=1;i<n;i++){\n                int buffer=sc.nextInt();\n                sum+=buffer;\n                if(max<buffer)max=buffer;\n                if(min>buffer)min=buffer;\n            }\n            \n            double avrage=sum/(n+0.0);\n            if(Math.abs((min+max)/2-avrage)<1)System.out.println(\"Yes\");\n            else System.out.println(\"No\");\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1119_13__1_1119_11", "golden_code": "import java.util.*;\n\nclass Main {\n\n\tpublic static void main(String[] u) {\n\t\tScanner b = new Scanner(System.in);\n\t\twhile (b.hasNext()) {\n\t\t\tint n = b.nextInt(), c = b.nextInt(), s = 0, j = 2, i = 1, a[] = new int[n];\n\t\t\twhile (i <= n)\n\t\t\t\tif (i % j == 0 && i != 2) {\n\t\t\t\t\tj = 2;\n\t\t\t\t\ti++;\n\t\t\t\t} else if (j * j++ > i) {\n\t\t\t\t\ta[s++] = i++;\n\t\t\t\t\tj = 2;\n\t\t\t\t}\n\t\t\ti=c*2;\n\t\t\tj = (s - (s % 2 != 0 ? i - 1 : i)) / 2;\n\t\t\tif(j<0)j=0;\n\t\t\tString v = n + \" \" + c+ \":\";\n\t\t\ts-=j;\n\t\t\twhile(j<s)\n\t\t\t\tv += \" \" + a[j++];\n\t\t\tSystem.out.println(v + '\\n');\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.*;\n\nclass Main{\n\n\tpublic static void main(String[] u) {\n\t\tScanner b = new Scanner(System.in);\n\t\twhile (b.hasNext()) {\n\t\t\tint n = b.nextInt(), c = b.nextInt() * 2, o, s = 0, j = 2, i = 1, a[] = new int[n];\n\t\t\twhile (i <= n)\n\t\t\t\tif (i % j == 0 && i != 2) {\n\t\t\t\t\tj = 2;\n\t\t\t\t\ti++;\n\t\t\t\t} else if (j * j++ > i) {\n\t\t\t\t\ta[s++] = i++;\n\t\t\t\t\tj = 2;\n\t\t\t\t}\n\t\t\to = (s - (s % 2 != 0 ? c - 1 : c)) / 2;\n\t\t\tif(o<0)o=0;\n\t\t\tString v = n + \" \" + c / 2 + \":\";\n\t\t\ts-=o;\n\t\t\twhile(o<s)\n\t\t\t\tv += \" \" + a[o++];\n\t\t\tSystem.out.println(v + '\\n');\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_2549_17__1_2837_39", "golden_code": "import java.util.*;\nimport java.lang.*;\n \nclass Main\n{\n    public static int toDecimal(int b[])\n    {\n     int sum = 0;\t\n\tfor(int i=0, j=7; i<8 && j>-1; i++, j--)\n\t{\n\t\tsum+=b[j]*Math.pow(2,i);\t\n\t}\n     return sum;\n    }\n    public static int indx(int b[])\n    {\n\tfor(int i=0; i<8; i++)\n\t\tif(b[i]>1)\n\t\t   return i;\n\treturn -1;\n    }\t\n    public static void mk_bin(int b[], int n)\t\n    {\n\tfor(int i=0; i<8; i++)\n\t{\n\t    b[i] = n%2;\n\t    n/=2;\t\n\t}\n    }\n    public static void rev(int b[])\n    {\n     int temp;    \n        for(int i=0, j=7; i!=4; i++, j--)\n        {\n            temp = b[j];\n            b[j] = b[i];\n            b[i] = temp;\n        }\n    }\n    public static void main(String []args)\n    {\n     int A, B, i, bin[] = new int[8], binA[] = new int[8], binB[] = new int[8]; \n     \n     Scanner sc = new Scanner(System.in);\n        while(true)\n        {\n            A = sc.nextInt(); B = sc.nextInt();\n                if(A==0 && B==0)\n                    break;\n            \n            mk_bin(binA,A);\n\t    rev(binA);\t\n\t    mk_bin(binB,B);\n\t    rev(binB);\n\t\t\n\t    for(i=0; i<8; i++)\n\t\tbin[i] = binA[i]+binB[i];\n\n\t    for( ;indx(bin)!=-1; )\n\t    {\n\t\ti = indx(bin);\n\t\tbin[i] = 0;\n\t\t  \n\t\t  if(i == 0)\n\t\t  {\n\t\t     bin[i+1]+=1;\n\t\t     continue;\n\t\t  }\n\t\t  if(i == 7)\n\t\t  {\n\t\t     bin[i-1]+=1;\n\t\t     continue;\n\t\t  }\n\t\tbin[i-1]+=1;\n\t\tbin[i+1]+=1;\n\t    }\n\t    System.out.println(toDecimal(bin));\n        }\n    }\n}", "generated_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\nimport java.util.TreeSet;\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        ArrayList<Integer> tree = new ArrayList<Integer>();\n        while (true) {\n            Object arr[];\n            String str = in.nextLine().trim();\n            if (str.contains(\"Get\")) {\n                arr = tree.toArray();\n                Arrays.sort(arr);\n                System.out.println(arr[arr.length - 2]);\n            } else if (str.contains(\"END\")) {\n                break;\n            } else {\n                int a = Integer.parseInt(str);\n                tree.add(a);\n            }\n        }\n    }\n    \n}\n", "score": 0.0}
{"id": "SHARE_1_1018_2__1_1018_90", "golden_code": "import java.util.*;\nimport java.awt.*;\nimport java.math.*;\n\n@SuppressWarnings(\"unchecked\")\n\npublic class Main\n{\n    public static void main(String[] arqs)\n    {\n        Scanner scan = new Scanner(System.in);\n\n        //int ca = scan.nextInt();\n        boolean first = true;\n\n        while (true)\n        {\n            int n = scan.nextInt();\n\n            if(n == 0) break;\n\n            if(!first)\n                System.out.println();\n            first = false;\n\n\n            int[] a = new int[n];\n\n            for(int i = 0;i < n;i++)\n                a[i] = scan.nextInt();\n\n            int A = 0, B = 0;\n            for(int i = 0;i < n;i++)\n            {\n                int now = scan.nextInt();\n                if(now != a[i])\n                {\n                    if(Math.abs(now-a[i]) == 1)\n                    {\n                        if(now < a[i])\n                            B += (a[i]+now==3?6:a[i]+now);\n                        else\n                            A += (a[i]+now==3?6:a[i]+now);\n                    }\n                    else\n                    {\n                        if(now < a[i])\n                            A += a[i];\n                        else\n                            B += now;\n                    }\n                }\n            }\n\n            System.out.println(\"A has \" + A + \" points. B has \" + B + \" points.\");\n        }\n    }\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n   public static void main(String[] args) {\n      Scanner in = new Scanner(System.in);\n      int n = in.nextInt();\n      int c = 0;\n      while (n != 0) {\n         c++;\n         int[] A = new int[n];\n         int[] B = new int[n];\n         for (int i = 0; i < n; i++) {\n            A[i] = in.nextInt();\n         }\n         for (int i = 0; i < n; i++) {\n            B[i] = in.nextInt();\n         }\n         int aa = 0, bb = 0;\n         for (int i = 0; i < n; i++) {\n            if ((A[i] == 1 && B[i] == 2) || (A[i] == 2 && B[i] == 1)) {\n               if (A[i] == 1) {\n                  aa += 6;\n               } else {\n                  bb += 6;\n               }\n            } else {\n               if (A[i] > B[i] || B[i] > A[i]) {\n                  if ((A[i] == B[i] + 1) || (A[i] + 1 == B[i])) {\n                     if (A[i] == B[i] + 1) {\n                        bb += B[i] + A[i];\n                     } else {\n                        aa += A[i] + B[i];\n                     }\n                  } else {\n                     if (A[i] > B[i]) {\n                        aa += A[i];\n                     } else {\n                        bb += B[i];\n                     }\n                  }\n               }\n            }\n         }\n         if (c > 1) {\n            System.out.println();\n         }\n            System.out.println(\"A has \" + aa + \" points. B has \" + bb + \" points.\");\n         n = in.nextInt();\n      }\n   }\n}", "score": 1.0}
{"id": "SHARE_1_1959_78__1_2527_5", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {\n            int a=in.nextInt();\n            byte m1 = 0, m2 = 0;\n            for (byte i = 0; i < a; i++) {\n                int s = in.nextByte();\n                if (i % 2 == 0) {\n                    if (s == 1)\n                        m1++;\n                    else\n                        m2++;\n                } else {\n                    if (s == 0)\n                        m1++;\n                    else\n                        m2++;\n                }\n            }\n            System.out.println(m1 > m2 ? m2 : m1);\n        }\n    }\n}\n", "generated_code": "\nimport java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        DecimalFormat df = new DecimalFormat(\"0.00\");\n        int t=in.nextInt();\n        in.nextLine();\n        for (int i = 0; i < t; i++) {\n            String s1=in.nextLine();\n            double d1[]={in.nextDouble(),in.nextDouble(),in.nextDouble()};\n            in.nextLine();\n            String s2=in.nextLine();\n            double d2[]={in.nextDouble(),in.nextDouble(),in.nextDouble()};\n            in.nextLine();\n            double out=Math.sqrt(Math.pow(d1[0]-d2[0],2)+Math.pow(d1[1]-d2[1],2)+Math.pow(d1[2]-d2[2],2));            \n            System.out.println(s1+\" to \"+s2+\": \"+df.format(out));\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_106025_40__1_2763_10", "golden_code": "//In The Name of Allah\n\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in_kb = new Scanner(System.in);\n\t\tint k = in_kb.nextInt();\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tchar[] in_num = in_kb.next().toCharArray();\n\t\t\tint counter = 1;\n\t\t\tif (in_num.length == 1)\n\t\t\t\tSystem.out.print(\"1\" + in_num[0] + \"\\n\");\n\t\t\tfor (int j = 1; j < in_num.length; j++) {\n\t\t\t\tif (in_num[(j - 1)] == in_num[j]) {\n\t\t\t\t\tcounter++;\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.print(counter + \"\" + in_num[(j - 1)]);\n\t\t\t\t\tcounter = 1;\n\t\t\t\t}\n\t\t\t\tif (j == (in_num.length - 1)) {\n\t\t\t\t\tSystem.out.print(counter + \"\" + in_num[j] + \"\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "generated_code": "import java.util.*;\nimport java.io.*;\nimport java.math.BigInteger;\n\npublic class Main{\n\n\tpublic static void main(String args[]){\n\t\tScanner in = new Scanner(System.in);\n\t\tint tests = in.nextInt();\n\t\twhile(tests-- > 0){\n\t\t\tchar[] str = in.next().toCharArray();\n\t\t\tboolean zero = false;\n\t\t\tlong ans = 1;\n\t\t\tint mod = 1000000007;\n\t\t\tint num = 0;\n\t\t\tfor(int i = str.length - 1; i >= 0; i--){\n\t\t\t\tif(str[i] == '0'){\n\t\t\t\t\tif(zero == false){\n\t\t\t\t\t\tif(num != 0){\n\t\t\t\t\t\t\tif(num % 2 != 0)\n\t\t\t\t\t\t\t\tans *= (num / 2) + 1;\n\t\t\t\t\t\t\tans %= mod;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnum = 0;\n\t\t\t\t\t}\n\t\t\t\t\tzero = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(zero){\n\t\t\t\t\tzero = false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tnum++;\n\t\t\t}\n\t\t\tif(num != 0){\n\t\t\t\tif(num % 2 != 0)\n\t\t\t\t\tans *= (num / 2) + 1;\n\t\t\t}\n\t\t\tans %= mod;\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t}\n}\n\n\n", "score": 0.0}
{"id": "SHARE_1_1018_26__1_1018_3", "golden_code": "import java.io.IOException;\nimport java.util.Scanner;\nimport java.util.Vector;\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\n\t\t//*undercut:\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\t//BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tint num=in.nextInt();\n\t\t//System.out.print(num);\n\t\tVector<Integer>T=new Vector<Integer>();//A\n\t\tVector<Integer>T1=new Vector<Integer>();//B\n\t\tint GA=0,GB=0;\n\t\twhile(num!=0){\n\t\t//\tint num=in.read();\n\t\t\t//while(num!=0){\n\t\t\tif(num==0)\n\t\t\t\tbreak;\n\t\t\tfor(int y=0;y<num;y++)\n\t\t\tT.add(in.nextInt());\n\t\t\tfor(int t=0;t<num;t++)\n\t\t\tT1.add(in.nextInt());\n\t\t\t\t\n\t\t\t\t\n\t\tfor(int g=0;g<num;g++){\n\t\t\tif(T.elementAt(g)==1 && T1.elementAt(g)==2 )\n\t\t\t\tGA+=6;\n\t\t\telse\n\t\t\t\tif(T.elementAt(g)==2 && T1.elementAt(g)==1)\n\t\t\t\t\tGB+=6;\n\t\t\tif(T.elementAt(g)-T1.elementAt(g)>1)\n\t\t\t\tGA+=T.elementAt(g);\n\t\t\telse\n\t\t\t\t\n\t\t\t\tif(T1.elementAt(g)-T.elementAt(g)>1  )\n\t\t\t\t\tGB+=T1.elementAt(g);//T1\n\t\t\t\telse\n\t\t\t\t\tif(T.elementAt(g)-T1.elementAt(g)==1 && T.elementAt(g)!=2 && T1.elementAt(g)!=1)\n\t\t\tGB+=T.elementAt(g)+T1.elementAt(g);\n\t\t\t\t\telse\n\t\t\t\t\t\tif(T1.elementAt(g)-T.elementAt(g)==1 && T.elementAt(g)!=1 && T1.elementAt(g)!=2)\n\t\t\t\t\t\t\tGA+=T.elementAt(g)+T1.elementAt(g);\n\t\t}\n\t\t//A has 5 points. B has 12 points.\n\t\t\tSystem.out.println(\"A has \"+GA+\" points. \"+\"B has \"+GB+\" points.\");\n\t\t\t\n\t\tGA=0;GB=0;\n\t\t\tT.clear();\n\t\t\tT1.clear();\n\t\t\t\n\t\tnum=in.nextInt();\t\n\tif(num!=0)\n\t\tSystem.out.println();\n\t\tT.clear();\n\t\tT1.clear();\n\t}\n\t\n\t\t\n\t}\n}", "generated_code": "import java.util.Scanner;\n\nclass Main\n{\n        public static void main(String [] args)\n        {\n                int n,a = 0,b = 0;\n                Scanner scan = new Scanner(System.in);\n                n = scan.nextInt();\nwhile( n != 0)\n        {\n        int[] A = new int[n];int[] B = new int[n];\n        //cin.get(A,n);\n        //cin.get(B,n);\n        for(int i = 0 ; i < n ; i++)\n                A[i] = scan.nextInt();\n        for(int i = 0 ; i < n ; i++)\n                B[i] = scan.nextInt();\n        \n        for(int i = 0 ;  i < n ; i++)\n        {boolean ok = true;\n        if((A[i] == 1 && B[i]== 2 )||(A[i] == 2 && B[i]== 1))\n                if(ok)\n               {//System.out.println(\"varede ife aval shod\");\n               if(A[i] > B[i])\n                        b += 6;  \n                else \n                        a += 6;  \n                ok = false;\n                }\n        if( A[i]-B[i] == 1  || B[i]-A[i] == 1)\n                if(ok){//System.out.println(\"varede ife 2 shod\");\n                if(A[i] > B[i])\n                        b += A[i] + B[i];  \n                else \n                        a += A[i] + B[i];  \n                 }       \n        if( A[i]-B[i] >= 2  || B[i]-A[i] >= 2)\n                if(ok){//cout<<\"varede ife 3 shod\"<<endl;\n                if(A[i] > B[i])\n                        a += A[i];  \n                else \n                        b += B[i];  \n                 }     \n        }\n        System.out.print(\"A has \"+a+\" points. B has \"+b+\" points.\");\n        a = 0;b  = 0;\n        n = scan.nextInt();\n        if(n != 0)\n        {System.out.println();\n        System.out.println();\n        }else \n        System.out.println();\n        }\n\n        \n        \n        \n        \n        \n        }\n\n\n\n\n\n}", "score": 1.0}
{"id": "SHARE_1_2124_25__1_2732_12", "golden_code": "import java.util.Scanner;\nimport java.util.StringTokenizer;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        String plain = s.nextLine();\n        String sub = s.nextLine();\n        String res = \"\";\n        while (s.hasNextLine()) {\n            String tmp = s.nextLine();\n            for (int i = 0; i < tmp.length(); i++) {\n                if (plain.indexOf(tmp.charAt(i) + \"\") >= 0) {\n                    res += sub.charAt(plain.indexOf(tmp.charAt(i) + \"\"));\n                } else {\n                    res += tmp.charAt(i);\n                }\n            }\n            res += \"\\n\";\n        }\n        System.out.println(sub);\n        System.out.println(plain);\n        System.out.println(res.substring(0, res.length() - 1));\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tint loop = sc.nextInt();\n\t\t\n\t\tfor ( int i = 0 ; i < loop ; i++ ) {\n\t\t\t\n\t\t\tint x = sc.nextInt();\n\t\t\t\n\t\t\tint y = sc.nextInt();\n\t\t\t\n\t\t\tif ( (x-y) == 0 || (x-y) == 2 ) {\n\t\t\t\t\n\t\t\t\tif ( x-y == 0 ) {\n\t\t\t\t\t\n\t\t\t\t\tif ( x%2 == 0 )\n\t\t\t\t\t\tSystem.out.println((x*2));\n\t\t\t\t\telse\n\t\t\t\t\t\tSystem.out.println((x*2-1));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t\n\t\t\t\t\tif ( x%2 == 0 )\n\t\t\t\t\t\tSystem.out.println((2*x-2));\n\t\t\t\t\telse\n\t\t\t\t\t\tSystem.out.println((2*x-3));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\telse\n\t\t\t\tSystem.out.println(\"No Number\");\n\t\t\t\n\t\t}\n\t\t\n\t\tsc.close();\n\t\t\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1564_4__1_1564_3", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner input=new Scanner(System.in);\n\n\t\tint t=Integer.parseInt(input.nextLine());\n\n\t\tint n,adress;\n\t\tString name;\n\t\tint[] houses;\n\n\t\twhile(t-->0){\n\n\t\t\tname=input.nextLine();\n\n\t\t\tn=input.nextInt();\n\n\t\t\thouses=new int[10000];\n\t\t\tadress=0;\n\n\t\t\twhile(n-->0){\n\t\t\t\tString ch=input.next();\n\n\n\t\t\t\tif(ch.equals(\"+\")){\n\n\t\t\t\t\tint a=input.nextInt();\n\t\t\t\t\tint b=input.nextInt();\n\t\t\t\t\tint c=input.nextInt();\n\n\t\t\t\t\tfor(int i=a;i<=b;i+=c){\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(houses[i]!=-1){\n\t\t\t\t\t\t\tif(houses[i]==0)\n\t\t\t\t\t\t\t\tadress++;\n\t\t\t\t\t\t\thouses[i]=1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(ch.equals(\"-\")){\n\n\t\t\t\t\tint a=input.nextInt();\n\t\t\t\t\tint b=input.nextInt();\n\t\t\t\t\tint c=input.nextInt();\n\n\t\t\t\t\tfor(int i=a;i<=b;i+=c){\n\t\t\t\t\t\tif(houses[i]==1)\n\t\t\t\t\t\t\tadress--;\n\t\t\t\t\t\thouses[i]=-1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tint a=Integer.parseInt(ch);\n\n\t\t\t\t\tif(houses[a]!=-1){\n\t\t\t\t\t\tif(houses[a]==0)\n\t\t\t\t\t\t\tadress++;\n\t\t\t\t\t\thouses[a]=1;\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\n\n\n\t\t\t\t}\n\t\t\t\tinput.nextLine();\n\n\n\t\t\t}\n\t\t\tfor(int i=1;i<=9999;i++){\n\n\t\t\t}\n\n\t\t\tSystem.out.println(name);\n\t\t\tif(adress==1)\n\t\t\t\tSystem.out.printf(\"%d address\\n\",adress);\n\t\t\telse\n\t\t\t\tSystem.out.printf(\"%d addresses\\n\",adress);\n\n\n\t\t\tint[] digits=new int[10];\n\t\t\tString plates;\n\t\t\tfor(int i=1;i<=9999;i++){\n\t\t\t\tif(houses[i]==1){\n\t\t\t\t\tplates=i+\"\";\n\t\t\t\t\tfor(int j=0;j<plates.length();j++){\n\t\t\t\t\t\tdigits[plates.charAt(j)-'0']++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tint s=0;\n\t\t\tfor(int i=0;i<digits.length;i++){\n\t\t\t\tSystem.out.printf(\"Make %d digit %d\\n\",digits[i],i);\n\t\t\t\ts+=digits[i];\n\t\t\t}\n\n\t\t\tif(s==1)\n\t\t\t\tSystem.out.printf(\"In total %d digit\\n\",s);\n\t\t\telse\n\n\t\t\t\tSystem.out.printf(\"In total %d digits\\n\",s);\n\n\n\n\n\t\t}\n\t}\n}\n\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner input=new Scanner(System.in);\n\n\t\tint t=Integer.parseInt(input.nextLine());\n\n\t\tint n,adress;\n\t\tString name;\n\t\tint[] houses;\n\n\t\twhile(t-->0){\n\n\t\t\tname=input.nextLine();\n\n\t\t\tn=input.nextInt();\n\n\t\t\thouses=new int[10000];\n\t\t\tadress=0;\n\n\t\t\twhile(n-->0){\n\t\t\t\tString ch=input.next();\n\n\n\t\t\t\tif(ch.equals(\"+\")){\n\n\t\t\t\t\tint a=input.nextInt();\n\t\t\t\t\tint b=input.nextInt();\n\t\t\t\t\tint c=input.nextInt();\n\n\t\t\t\t\tfor(int i=a;i<=b;i+=c){\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(houses[i]!=-1){\n\t\t\t\t\t\t\tif(houses[i]==0)\n\t\t\t\t\t\t\t\tadress++;\n\t\t\t\t\t\t\thouses[i]=1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(ch.equals(\"-\")){\n\n\t\t\t\t\tint a=input.nextInt();\n\t\t\t\t\tint b=input.nextInt();\n\t\t\t\t\tint c=input.nextInt();\n\n\t\t\t\t\tfor(int i=a;i<=b;i+=c){\n\t\t\t\t\t\tif(houses[i]==1)\n\t\t\t\t\t\t\tadress--;\n\t\t\t\t\t\thouses[i]=-1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tint a=Integer.parseInt(ch);\n\n\t\t\t\t\tif(houses[a]!=-1){\n\t\t\t\t\t\tif(houses[a]==0)\n\t\t\t\t\t\t\tadress++;\n\t\t\t\t\t\thouses[a]=1;\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\n\n\n\t\t\t\t}\n\t\t\t\tinput.nextLine();\n\n\n\t\t\t}\n\t\t\tfor(int i=1;i<=9999;i++){\n\n\t\t\t}\n\n\t\t\tSystem.out.println(name);\n\t\t\tif(adress==1)\n\t\t\t\tSystem.out.printf(\"%d address\\n\",adress);\n\t\t\telse\n\t\t\t\tSystem.out.printf(\"%d addresses\\n\",adress);\n\n\n\t\t\tint[] digits=new int[10];\n\t\t\tString plates;\n\t\t\tfor(int i=1;i<=9999;i++){\n\t\t\t\tif(houses[i]==1){\n\t\t\t\t\tplates=i+\"\";\n\t\t\t\t\tfor(int j=0;j<plates.length();j++){\n\t\t\t\t\t\tdigits[plates.charAt(j)-'0']++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tint s=0;\n\t\t\tfor(int i=0;i<digits.length;i++){\n\t\t\t\tSystem.out.printf(\"Make %d digit %d\\n\",digits[i],i);\n\t\t\t\ts+=digits[i];\n\t\t\t}\n\n\t\t\tif(s==1)\n\t\t\t\tSystem.out.printf(\"In total %d digit\\n\",s);\n\t\t\telse\n\n\t\t\t\tSystem.out.printf(\"In total %d digits\\n\",s);\n\n\n\n\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_108003_1__1_2634_9", "golden_code": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n/**\n *\n * @author Hasan\n */\nclass Edge implements Comparable{\n    Integer a,b,w;\n\n    @Override\n    public int compareTo(Object o) {\n        Edge other = (Edge) o;\n        return w.compareTo(other.w);\n    }\n}\npublic class Main {\n    static int []par;\n    public static void main(String []args){\n        Scanner cin = new Scanner(System.in);\n        while (true){\n        int n,m;\n        n=cin.nextInt();\n        m=cin.nextInt();\n        if(n == 0)\n            break;\n        Edge [] edge= new Edge[m];\n        for(int i=0;i<m;i++){\n            edge[i] = new Edge();\n            edge[i].a= cin.nextInt();\n            edge[i].b= cin.nextInt();\n            edge[i].w= cin.nextInt();\n        }\n        par = new int [n];\n        int [] s = new int [n];\n        for(int i=0;i<n;i++){\n            par[i] = i;\n            s[i]=1;\n        }\n        int ans =0;\n        Arrays.sort(edge, 0, m);\n        int sum=0;\n        for(int i=0;i<m;i++){\n            sum+= edge[i].w;\n            int para = getPar(edge[i].a);\n            int parb = getPar(edge[i].b);\n            if(para != parb){\n                ans += edge[i].w;\n                System.err.println(edge[i].a + \" \" + edge[i].b + \" \" + edge[i].w);\n                if (s[para] <s[parb]){\n                    par[para] = parb;\n                    s[parb]+=s[para];\n                }\n                else{\n                    par[parb] = para;\n                    s[para]+=s[parb];\n                }\n            }\n        }\n        System.out.println(sum -ans);\n        }\n    }\n\n    private static int getPar(Integer b) {\n        if (b.equals(par[b]))\n            return b;\n        return par[b]=getPar(par[b]);\n    }\n    \n}\n", "generated_code": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {\n            long a = in.nextLong();\n            HashSet c = new HashSet();\n            for (int i = 1; ; i++) {\n                String s = a * i + \"\";\n                for (int j = 0; j < s.length(); j++) c.add(s.charAt(j));\n                if (c.size() == 10) {\n                    System.out.println(i);\n                    break;\n                }\n            }\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1104_40__1_2599_16", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    static Scanner cin = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int f, k;\n        char e;\n        f = cin.nextInt();\n        cin.nextLine();\n        while (f>0) {\n            String s;\n            s = cin.nextLine();\n            k = s.length();\n            for (int j = k - 1; j >= 0; j--) {\n                e = s.charAt(j);\n                System.out.print(e);\n            }\n            System.out.println();   \n            f--;\n        }  \n    }\n}\n", "generated_code": "/**\n * Created by Mina on 1/30/14.\n */\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        long []x=new long[10];\n        x[0]=0;\n        x[1]=1;\n        long dah=10;\n        for(int i=2;i<10;i++){\n            x[i]=x[i-1]*9+dah;\n            dah=dah*10;\n        }\n\n       /* for(int i=0;i<10;i++){\n            System.out.println(x[i]);\n        }*/\n        int n=input.nextInt();\n        while(n!=0){\n        String s=n+\"\";\n            int l=s.length();\n            int []a=new int[l];\n            for(int i=0;i<l;i++){\n                a[i]=n%10;\n                n=n/10;\n            }\n            long d=1;\n            long sum=0;\n        for(int i=0;i<l;i++){\n\n            if(a[i]>(4)){\n                sum+=(a[i]-1)*x[i]+d;\n\n            }else{\n                sum+=x[i]*a[i];\n            }\n            d=d*10;\n\n\n\n\n\n        }\n            //System.out.println(sum);\n            n=Integer.parseInt(s);\n            System.out.printf(\"%s: %d\\n\",s,n-sum);\n\n            input.nextLine();\n            n=input.nextInt();\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_96__1_1001_16", "golden_code": "import java.util.Scanner;\n\npublic class Main \n{\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args)\n    {\n        Scanner input = new Scanner(System.in);\n        while(input.hasNextInt())\n        {\n            int number1; // first number to add\n            int number2; // second number to add\n            int sum; // sum of number1 and number2\n            number1 = input.nextInt(); // read first number from user\n            number2 = input.nextInt(); // read second number from user\n            sum = (number1 + number2);\n            System.out.printf(\"%d\\n\",sum);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\tScanner a = new Scanner(System.in);\nwhile(a.hasNext()){\n\tint b = a.nextInt() + a.nextInt();\n\tSystem.out.println(b);\n}\n\t\t\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1009_22__1_1009_116", "golden_code": "\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args){\n        Scanner in=new Scanner(System.in);\n        double n=0.00;\n        for(int i=0;i<12;i++)\n            n=n+in.nextDouble();\n        System.out.println(\"$\"+Math.round(((float)n/12)*100.0)/100.0);\n    }\n}\n", "generated_code": "import java.util.*;\nclass Main {\n\t//static boolean adj[]=new boolean [300000000];\n\t\n\tpublic static void main(String s[]) {\n\t\tScanner cin = new Scanner(System.in);\n\t\tdouble sum=0;\n\t\tfor(int i=0;i<12;i++)\n\t\t{\n\t\t\tdouble val=cin.nextDouble();\n\t\t\tsum+=val;\n\t\t}\n\t\tSystem.out.printf(\"$%.2f\\n\",sum/12);\n\t\t//adj[0]=true;\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1618_2__1_2737_50", "golden_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n \npublic class Main {\n \n    BigInteger[][] dp = new BigInteger[51][51];\n\t\n    BigInteger go(int n, int y) {\n        if (y == 1)\n            return BigInteger.ONE;\n        if (n < y || y < 1)\n            return BigInteger.ZERO;\n        if(dp[n][y] != null) {\n            return dp[n][y];\n        }\n        return (dp[n][y] =\n            go(n-1, y).multiply(new BigInteger(\"\"+y))\n            .add(go(n-1, y-1).multiply(new BigInteger(\"\"+(2*n-y)))));\n    }////end of go\n \n    void run() {\n        Scanner input = new Scanner(System.in);\n        int ntc = input.nextInt();\n \n        for (int i = 0; i < ntc; ++i) {\n            int n = input.nextInt();\n            int y = input.nextInt();\n \n            System.out.println(go(n, y));\n        }\n    }////end of run\n \n    public static void main(String[] args) {\n        new Main().run();\n \n    }////end of main\n \n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int number = in.nextInt();\n        for (int i = 0; i < number; i++) {\n            int m = in.nextInt();\n            int n = in.nextInt();\n            long sum = 0;\n            int counter;\n            for (int j = 0; j < m; j++) {\n                counter = m - j - 1;\n                for (int k = 0; k < n; k++) {\n                    sum += counter;\n                    counter++;\n                }\n            }\n            System.out.println(sum);\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1104_10__1_1104_54", "golden_code": "import java.util.Scanner;\npublic class Main {public static void main(String[] q){Scanner b=new Scanner(System.in);\nint n=b.nextInt();\nb.nextLine();\nfor (int i=0;i<n;i++){\nString a=b.nextLine();\nSystem.out.println(r(a));}}static String r(String a){\nString r=\"\";\nfor(char ch:a.toCharArray()){r=ch+\"\"+r;}\nreturn r;}}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner input = new Scanner(System.in);\n\t\tint numOfString = Integer.parseInt(input.nextLine());\n\t\tfor (int i = 1; i <= numOfString; i++) {\n\n\t\t\tprintReverseString(input.nextLine());\n\t\t}\n\t}\n\n\n\tpublic static void printReverseString(String str) {\n\n\t\tchar[] chars = str.toCharArray();\n\t\tString reverse = \"\";\n\n\t\tfor (int i = chars.length - 1; i >= 0; i--) {\n\t\t\treverse += chars[i];\n\t\t}\n\t\tSystem.out.println(reverse);\n\t}\n\n}", "score": 1.0}
{"id": "SHARE_1_1001_288__1_1001_67", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc =new Scanner(System.in);\n        while(sc.hasNext()){\n            System.out.println(sc.nextInt() +sc.nextInt());\n            \n        }\n    }\n\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tint a,b;\n\t\tScanner cin=new Scanner(System.in);\n\t\twhile(cin.hasNext()){\n\t\t\ta=cin.nextInt();\n\t\t\tb=cin.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t\t\n\t}\n\n}", "score": 1.0}
{"id": "SHARE_1_1001_504__1_1001_69", "golden_code": "import java.util.*;\npublic class Main{\n\tpublic static void main(String [] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tint num1 = sc.nextInt();\n\t\t\tint num2 = sc.nextInt();\n\t\t\tint sum = num1 + num2;\n\t\t\tSystem.out.println(sum);\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tint a,b;\n\t\tScanner cin=new Scanner(System.in);\n\t\twhile(cin.hasNext()){\n\t\t\ta=cin.nextInt();\n\t\t\tb=cin.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n\n}", "score": 1.0}
{"id": "SHARE_1_1001_399__1_1010_8", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n\twhile (cin.hasNext())\n\t    System.out.println(cin.nextInt() + cin.nextInt());\n    }\n}", "generated_code": "import java.util.Scanner;\n\n\nclass Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner inSc = new Scanner(System.in);\n\t\tint count = inSc.nextInt();\n\t\tfor (int i = 1; i <= count; i++) {\n\t\t\tint j = 0;\n\t\t\tdouble X = inSc.nextDouble(),Y=inSc.nextDouble();\n\t\t\twhile (2/Math.PI*++j*50 < (X*X + Y*Y));\n\t\t\tSystem.out.println(\"Property \" + i + \": This property will begin eroding in year \" + j + \".\");\n\t\t}\n\t\tSystem.out.println(\"END OF OUTPUT.\");\n\t\tinSc.close();\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1119_11__1_1656_68", "golden_code": "import java.util.*;\n\nclass Main{\n\n\tpublic static void main(String[] u) {\n\t\tScanner b = new Scanner(System.in);\n\t\twhile (b.hasNext()) {\n\t\t\tint n = b.nextInt(), c = b.nextInt() * 2, o, s = 0, j = 2, i = 1, a[] = new int[n];\n\t\t\twhile (i <= n)\n\t\t\t\tif (i % j == 0 && i != 2) {\n\t\t\t\t\tj = 2;\n\t\t\t\t\ti++;\n\t\t\t\t} else if (j * j++ > i) {\n\t\t\t\t\ta[s++] = i++;\n\t\t\t\t\tj = 2;\n\t\t\t\t}\n\t\t\to = (s - (s % 2 != 0 ? c - 1 : c)) / 2;\n\t\t\tif(o<0)o=0;\n\t\t\tString v = n + \" \" + c / 2 + \":\";\n\t\t\ts-=o;\n\t\t\twhile(o<s)\n\t\t\t\tv += \" \" + a[o++];\n\t\t\tSystem.out.println(v + '\\n');\n\t\t}\n\t}\n}\n", "generated_code": "\nimport java.util.Arrays;\nimport java.util.Scanner;\npublic class Main{\n    static Scanner input=new Scanner(System.in);\n    public static void main(String[] args){\n        int[] arr=new int[20];\n        int num,count;\n        while(true){\n            arr[0]=input.nextInt();\n            if(arr[0]==-1)\n                break;\n            count=0;\n            num=1;\n            while(true){\n                arr[num]=input.nextInt();\n                if(arr[num]==0)\n                    break;\n                num++;\n            }\n            Arrays.sort(arr,0,num);\n            for(int i=0;i<num;i++)\n                for(int j=i+1;j<=num;j++)\n                    if(2*arr[i]==arr[j])\n                        count++;\n            System.out.println(\"\"+count);\n        } \n    }\n}", "score": 0.0}
{"id": "SHARE_1_1392_2__1_2826_23", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    static Scanner in = new Scanner(System.in);\n\n    static int revers(int n) {\n\n        int t = 0;\n        while (n > 0) {\n            int m = n % 10;\n            n = n / 10;\n            t = (t * 10) + m;\n        }\n        return t;\n\n    }\n\n    public static void main(String[] args) {\n        int q = in.nextInt();\n        for (int i = 0; i < q; i++) {\n            int n = in.nextInt();\n            int m = in.nextInt();\n            System.out.println(revers(revers(n) + revers(m)));\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n\n\tpublic static void main(String[] args){\n\t\tScanner input=new Scanner(System.in);  \n\n\t\tint t=input.nextInt();\n\t\tString s;\n\t\tint p,q,M;\n\t\tlong c;\n\t\tchar[] pos;\n\t\twhile(t-->0){\n\t\t\t\n\t\t\tc=0;\n\t\t\tM=0;\n\t\t\tpos=new char[1000000];\n\t\t\ts=input.next();\n\t\t\tint k=s.indexOf(\"/\");\n\t\t\tp=Integer.parseInt(s.substring(0,k));\n\t\t\t\n\t\t\tq=Integer.parseInt(s.substring(k+1));\n\n\t\t\tif(p==1 && q==1)\n\t\t\t\tSystem.out.println(1);\n\t\t\telse if(p==1 && q==2)\n\t\t\t\tSystem.out.println(2);\n\t\t\telse if(p==2 && q==1)\n\t\t\t\tSystem.out.println(3);\n\t\t\telse{\n\t\t\t\twhile( !( p==1 && q==2) && !(p==2 && q==1)){\n\t\t\t\t\t\n\t\t\t\t\tif(p>q){\n\t\t\t\t\t\tpos[M++]='R';\n\t\t\t\t\t\tp-=q;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tpos[M++]='L';\n\t\t\t\t\t\tq-=p;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif( p==1 && q==2)\n\t\t\t\t\tc=2;\n\t\t\t\telse\n\t\t\t\t\tc=3;\n\n\t\t\t\tfor(int i=M-1;i>=0;i--){\n\t\t\t\t\tif(pos[i]=='R')\n\t\t\t\t\t\tc=c*2+1;\n\t\t\t\t\telse\n\t\t\t\t\t\tc*=2;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(c);\n\n\t\t\t}\n\t\t\t\n\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1018_91__1_2770_6", "golden_code": "import java.util.Scanner;\n\npublic class Main \n{\n    public static void main(String[] args) \n    {\n        Scanner input = new Scanner(System.in);\n        int tc, pA, pB;\n        int[] A, B;\n        for (int k = 0; ; k++)\n        {            \n            tc = input.nextInt();\n            if (tc == 0)\n                break;\n            \n            A = new int[tc];\n            B = new int[tc];\n            pA = 0;\n            pB = 0;\n            \n            for (int i = 0; i < tc; i++)\n            {\n                A[i] = input.nextInt();\n            }\n            for (int i = 0; i < tc; i++)\n            {\n                B[i] = input.nextInt();\n                \n                if ((A[i] - B[i]) >= 2) // A larger card\n                    pA += A[i];\n                else if ((B[i] - A[i]) >= 2) // B larger card\n                    pB += B[i];\n                else if (A[i] == 1 && B[i] == 2)\n                    pA += 6;\n                else if (B[i] == 1 && A[i] == 2)\n                    pB += 6;\n                else if (A[i] == B[i] + 1)\n                    pB += A[i] + B[i];\n                else if (B[i] == A[i] + 1)\n                    pA += A[i] + B[i];\n            }\n            \n            if (k != 0)\n                System.out.println();\n            System.out.println(\"A has \"\n                    + pA\n                    + \" points. B has \"\n                    + pB\n                    + \" points.\");\n        }\n    }\n}\n", "generated_code": "import java.util.HashSet;\nimport java.util.Scanner;\n\n/**\n * Created by Seied Esmaeel on 11/27/2014.\n */\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        for(int i = 0;i<n;i++){\n            int mapN = scanner.nextInt();\n            int cityN = scanner.nextInt();\n            HashSet<String> set = new HashSet<String>();\n            scanner.nextLine();\n            for(int j = 0;j<mapN;j++){\n                scanner.next();\n                int R = scanner.nextInt();\n                scanner.nextLine();\n                for(int k = 0;k<R;k++){\n                    int x = scanner.nextInt();\n                    int y = scanner.nextInt();\n                    scanner.nextLine();\n                    if(!set.contains(x+\"-\"+y)) {\n                        set.add(x + \"-\" + y);\n                        set.add(y + \"-\" + x);\n                    }\n                }\n            }\n            System.out.println(set.size()/2);\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1009_6__1_1998_17", "golden_code": "import java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tdouble mean = 0;\n\t\twhile(sc.hasNextDouble())\n\t\t\tmean += sc.nextDouble();\n\t\tmean /= 12.0;\n\t\tDecimalFormat df = new DecimalFormat(\"0.00\");\n\t\tSystem.out.println(\"$\"+df.format(mean));\n\t}\t\t\n}", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\npublic class Main {\n    \n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);  \n        \n        int t=input.nextInt(),n;\n        String line,newLine;\n        \n        while(t-->0){\n            newLine=\"\";\n         \n            line=input.next();\n            \n            for (int i = 0; i < line.length(); i++) {\n                n=0;\n                for (int j = i+1; j < line.length(); j++) {\n                    if(line.charAt(i)==line.charAt(j)){\n                        n++;\n                        i++;\n                    }else\n                        break;\n                }\n                \n                if(n>=1)\n                    newLine+=n+1;\n                newLine+=line.charAt(i);\n            }\n            System.out.println(newLine);\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1656_68__1_1656_65", "golden_code": "\nimport java.util.Arrays;\nimport java.util.Scanner;\npublic class Main{\n    static Scanner input=new Scanner(System.in);\n    public static void main(String[] args){\n        int[] arr=new int[20];\n        int num,count;\n        while(true){\n            arr[0]=input.nextInt();\n            if(arr[0]==-1)\n                break;\n            count=0;\n            num=1;\n            while(true){\n                arr[num]=input.nextInt();\n                if(arr[num]==0)\n                    break;\n                num++;\n            }\n            Arrays.sort(arr,0,num);\n            for(int i=0;i<num;i++)\n                for(int j=i+1;j<=num;j++)\n                    if(2*arr[i]==arr[j])\n                        count++;\n            System.out.println(\"\"+count);\n        } \n    }\n}", "generated_code": "// 1017 shareCode\n//accepted\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args){\n        Scanner cin=new Scanner(System.in);\n        String strNum=cin.nextLine();\n        while(!strNum.equals(\"-1\")){\n            int numCounter=0;\n            for(int i=0;i<strNum.length();i++)\n                if(strNum.charAt(i)==' ')\n                    numCounter++;\n            int nums[]=new int[numCounter];\n            numCounter=0; String temp=\"\";\n            for(int i=0;i<strNum.length() && numCounter<nums.length;i++)\n                if(strNum.charAt(i)!=' '){\n                    temp+=strNum.charAt(i);\n                }else{\n                    nums[numCounter]=Integer.parseInt(temp);\n                    numCounter++;\n                    temp=\"\";\n                }\n            numCounter=0;\n            for(int i=0;i<nums.length;i++)\n                for(int j=i+1;j<nums.length;j++){\n                    if(nums[i]*2==nums[j])\n                        numCounter++;\n                    if(nums[i]==nums[j]*2)\n                        numCounter++;\n                }\n            System.out.println(\"\"+numCounter);\n            strNum=cin.nextLine();\n        }        \n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_80__1_1001_452", "golden_code": "import java.util.Scanner;\nclass Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner (System.in);\n\t\twhile(scan.hasNextInt())\n\t\t{\n\t\t\tint a=scan.nextInt();\n\t\t\tint b=scan.nextInt();\n\t\t\tint c=a+b;\n\t\t\tSystem.out.println(c);\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        while (scan.hasNextInt())\n            System.out.println(scan.nextInt()+scan.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1704_7__1_2543_9", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        while (true) {\n            int n = s.nextInt();\n            int u = s.nextInt();\n            int d = s.nextInt();\n            byte height = 0;\n            byte mins = 0;\n            if (n == 0 && u == 0 && d == 0) {\n                System.exit(0);\n            }\n            while (true) {\n\n                height += u;\n                mins++;\n                if (height >= n) {\n                    break;\n                }\n                height -= d;\n                mins++;\n            }\n            System.out.println(mins);\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    \n    public static void main(String[] args) {\n        \n        Scanner input = new Scanner( System.in );\n        String s;\n        char c;\n        int i;\n        boolean sw;\n        sw = true;\n        s = input.nextLine().trim().toLowerCase();\n        c = s.charAt(0);\n        while( c != '*' ){\n                 \n                for( i = 1; i < s.length(); i++ ){\n                    if( s.indexOf( \" \", i ) == -1 )\n                        break;\n                    i = s.indexOf( \" \", i ) + 1;\n                    if( s.charAt( i ) != c ){\n                        sw = false;\n                        break;\n                    }\n                }\n                if( sw )\n                    System.out.println(\"Y\");\n                else\n                    System.out.println(\"N\");\n                sw = true;\n                s = input.nextLine().trim().toLowerCase();\n                c = s.charAt(0);\n        }\n        \n    }\n}", "score": 0.0}
{"id": "SHARE_1_1018_44__1_1018_6", "golden_code": "import java.util.Scanner;\nclass Main\n{\npublic static void main(String[] args)\n{\n    int result1=0,result2=0;\n    boolean ok = false ;\n    Scanner scan=new Scanner(System.in);\n    while(true)\n    {\n    result1=0;result2=0;\n    int n=scan.nextInt();\n    if(n==0)\n    break;\n    if(ok)\n    {\n    \tSystem.out.println();\n    }\n    ok = true ;\t\n    int[] array1=new int[n];\n    int[] array2=new int[n];\n    for(int i=0;i<n;i++)\n    array1[i]=scan.nextInt();\n    for(int j=0;j<n;j++)\n    array2[j]=scan.nextInt();\n    for(int k=0;k<n;k++)\n    {\n        if(array1[k]==1 & array2[k]==2)\n        {\n            result1=6;\n            array1[k]=0;\n            array2[k]=0;\n        }\n        if(array1[k]==2 &array2[k]==1)\n        {\n            result2=6;\n            array2[k]=0;\n            array1[k]=0;\n        }\n        if(array1[k]-array2[k]==1)\n        result2=array1[k]+array2[k]+result2;\n        if(array2[k]-array1[k]==1)\n        result1=result1+array1[k]+array2[k];\n        if(array1[k]-array2[k]>1)\n        result1=array1[k]+result1;\n        if(array2[k]-array1[k]>1)\n        result2=array2[k]+result2;\n    }\n    System.out.println(\"A has \"+result1+\" points. B has \"+result2+\" points.\");\n}\n}\n}", "generated_code": "import java.util.*;\nclass Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tint n=0,i,j,m,k,a=0,b=0,s=0;\n\t\tScanner scan = new Scanner(System.in);\n\t\tint[] f;\n\t\tf = new int[3000];\n\t\tint[] g;\n\t\tg = new int[3000];\n\t\twhile(scan.hasNextInt())\n\t\t{\n\t\t\ta = 0;\n\t\t\tb = 0;\n\t\t\tn = scan.nextInt();\n\t\t\t\tif((s!=0) && (n!=0))\n\t\t\t\t\tSystem.out.println();\n\t\t\tif(n==0)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tm = n;\n\t\t\tfor(i=0;i<m;i++)\n\t\t\t\tf[i] = scan.nextInt();\n\t\t\tfor(j=0;j<m;j++)\n\t\t\t\tg[j] = scan.nextInt();\n\t\t\tfor(k=0;k<m;k++)\n\t\t\t{\n\t\t\t\tif(f[k]-g[k]>1)\n\t\t\t\t\ta+=f[k];\n\t\t\t\tif(g[k]-f[k]>1)\n\t\t\t\t\tb+=g[k];\n\t\t\t\tif((f[k]-g[k]==1) && (f[k] != 2))\n\t\t\t\t\tb += f[k]+g[k];\n\t\t\t\tif((g[k]-f[k]==1) && (g[k] != 2))\n\t\t\t\t\ta += f[k]+g[k];\n\t\t\t\tif((f[k]-g[k]==1) && (f[k] == 2))\n\t\t\t\t\tb += 6;\n\t\t\t\tif((g[k]-f[k]==1) && (g[k] == 2))\n\t\t\t\t\ta += 6;\n\t\t\t\ts++;\n\t\t\t}\n\t\t\tif(n!=0)\n\t\t\t\tSystem.out.println(\"A has \"+a+\" points. B has \"+b+\" points.\");\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1006_69__1_1006_4", "golden_code": "import java.util.Scanner;\npublic class Main{\n    public static void main(String[] args){\n    Scanner s = new Scanner(System.in);\n            while (s.hasNext()) {\n                  double d=s.nextDouble();\n                  if(d==0){\n                      break;\n                  }\n    double u=0;\n    for(int i=2;i>0;i++){\n        u+=1.0/i;if(u>=d){\n            System.out.println(i-1+\" card(s)\");\n            break;\n            \n        }\n    }}}}", "generated_code": "import java.util.*;\nclass Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile(scan.hasNextFloat())\n\t\t{\n\t\t\tfloat a = scan.nextFloat();\n\t\t\tfloat s = 0;\n\t\t\tif(a==0.00)\n\t\t\t\tbreak;\n\t\t\tint n = 2;\n\t\t\twhile(s<a)\n\t\t\t{\n\t\t\t\ts+=(1/(float)n);\n\t\t\t\tn++;\n\t\t\t}\n\t\t\tSystem.out.println((n-2)+\" card(s)\");\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_367__1_1001_504", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner input = new Scanner(System.in);\n        \n        while(input.hasNext()){\n            System.out.println(input.nextInt() + input.nextInt());\n        }\n\n    }\n}\n", "generated_code": "import java.util.*;\npublic class Main{\n\tpublic static void main(String [] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tint num1 = sc.nextInt();\n\t\t\tint num2 = sc.nextInt();\n\t\t\tint sum = num1 + num2;\n\t\t\tSystem.out.println(sum);\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_13__1_1001_424", "golden_code": "import java.util.Scanner;\n\nclass Main\n{\n\tpublic static void main(String [] arg)\n\t\t{\n\t\t\tScanner scan = new Scanner(System.in);\n\t\t\tint a,b,sum = 0;\n\t\t\t\twhile(scan.hasNextInt())\n\t\t\t\t\t{\n\t\t\t\t\t\ta = scan.nextInt();\n\t\t\t\t\t\tb = scan.nextInt();\n\t\t\t\t\t\tsum = a + b;\n\t\t\t\t\t\tSystem.out.println(sum);\n\n\n\n\n\t\t\t\t\t}\n\t\t\n\n\n\n\n\n\n\t\t}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}", "generated_code": "import java.util.*;\npublic class Main{\n\tpublic static void main(String[] a){\n\t\tScanner in=new Scanner(System.in);\n\t\twhile(in.hasNext()){\n\t\t\tSystem.out.println(in.nextInt()+in.nextInt());\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_185__1_1001_240", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner cin = new Scanner(System.in);\n\t\t\n        while (cin.hasNext()) {\n            System.out.println(cin.nextInt()+ cin.nextInt());\n        }\n\n\t}\n\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args){\t\n\t\tint s;\n\t\tScanner input= new Scanner(System.in);\n\t\twhile(input.hasNext()){\n\t\t\ts=input.nextInt(); \n\t\t\ts+=input.nextInt();\n\t\t\tSystem.out.println(s);}}}", "score": 1.0}
{"id": "SHARE_1_1001_480__1_1001_429", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        int a,b;\n        Scanner reader = new Scanner(System.in);\n        while(true) {\n            boolean x = reader.hasNextBigInteger();\n            if(x){\n                a = reader.nextInt();\n                boolean y = reader.hasNextBigInteger();\n                if (y) {\n                    b = reader.nextInt();\n                    System.out.println(a+b);\n                } else break;\n            }else break;\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String args[]){\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext()){\n\t\t\tSystem.out.println((in.nextInt()+in.nextInt()));\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_301__1_1001_423", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\n    public static void main(String[] args) {\n\t    Scanner input = new Scanner(System.in);\n        do {\n            try {\n            System.out.print(input.nextInt() + input.nextInt() + \"\\n\");\n            }\n            catch (RuntimeException exmp)\n            {\n                System.exit(0);\n            }\n\n\n        }\n\n\n        while (true);\n    }\n}", "generated_code": "import java.util.*;\n\n\npublic class Main{\n\n\tpublic static void main(String[] args){\n\t\tScanner input=new Scanner(System.in);\n\n\t\twhile(input.hasNext())\n\t\t\tSystem.out.println(input.nextInt()+input.nextInt());\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_166__1_1001_37", "golden_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main(String[] args)\n{\n\tScanner scan = new Scanner(System.in);\n\t\n\twhile(scan.hasNext())\n\t{\n\t\t\tSystem.out.println(scan.nextInt() + scan.nextInt());\n\t}\n\t\n\t\n\t\n}\n\n}", "generated_code": "\nimport java.util.Scanner;\npublic class Main{\n    public static void main(String args[]){\n        Scanner s=new Scanner(System.in);\n        while(s.hasNext()){\n            int a=s.nextInt();\n            int b=s.nextInt();\n            System.out.println(a+b);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_6_1011_1__1_1660_25", "golden_code": "import java.util.*;\n\npublic class Main {\n\t\n\tpublic static class Node implements Comparable<Node> {\n\t\tint adj, wei;\n\t\tNode(int a, int w) {\n\t\t\tadj = a;\n\t\t\twei = w;\n\t\t}\n\t\t@Override \n\t\tpublic int compareTo(Node other) {\n\t\t\tif (this.wei == other.wei)\n\t\t\t\treturn 0;\n\t\t\tif (this.wei < other.wei)\n\t\t\t\treturn -1;\n\t\t\treturn 1;\n\t\t}\n\n\t\tpublic boolean equals(Object o) {\n\t\t\tif (o instanceof Node) {\n\t\t\t\tNode other = (Node)o;\n\t\t\t\treturn (other.adj == this.adj && other.wei == this.wei);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\tpublic static int r, c, n;\n\tpublic final static int INF = 1000000000;\t\n\tpublic static int[][] dist = new int[805][805];\n\tpublic static ArrayList<ArrayList<Node>> list = new ArrayList<ArrayList<Node>>(802);\n\t\n\tpublic static void dijkstra (int source) {\n\t\tPriorityQueue<Node> minHeap = new PriorityQueue<Node>();\n\t\tboolean[] mark = new boolean[805];\n\t\tfor (int i = 1; i <= r; i++) {\n\t\t\tdist[source][i] = INF;\n\t\t\tmark[i] = false;\n\t\t}\n\t\tdist[source][source] = 0;\n\t\tfor (int i = 1; i <= r; i++) {\n\t\t\tminHeap.add(new Node(i, dist[source][i]));\n\t\t}\n\t\tfor (int ver = 0; ver < r; ver++) {\n\t\t\tNode minAdj = minHeap.poll();\n\t\t\tif (mark[minAdj.adj]) {\n\t\t\t\tver--;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmark[minAdj.adj] = true;\n\t\t\tfor (int i = 0; i < list.get(minAdj.adj).size(); i++) {\n\t\t\t\tif (dist[source][minAdj.adj] + list.get(minAdj.adj).get(i).wei < dist[source][list.get(minAdj.adj).get(i).adj]) {\n\t\t\t\t\t//Node rmNode = new Node (list.get(minAdj.adj).get(i).adj, dist[source][list.get(minAdj.adj).get(i).adj]);\n\t\t\t\t\t//minHeap.remove(rmNode);\n\t\t\t\t\tdist[source][list.get(minAdj.adj).get(i).adj] = dist[source][minAdj.adj] + list.get(minAdj.adj).get(i).wei;\n\t\t\t\t\tminHeap.add(new Node(list.get(minAdj.adj).get(i).adj, dist[source][list.get(minAdj.adj).get(i).adj]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic static void main (String[] args) {\n\t\t\tScanner scan = new Scanner(System.in);\n\t\t\twhile (scan.hasNextInt()) {\n\t\t\t\tlist.clear();\n\t\t\t\tArrayList<Integer> prisoners = new ArrayList<Integer>();\n\t\t\t\tn = scan.nextInt();\n\t\t\t\tr = scan.nextInt();\n\t\t\t\tc = scan.nextInt();\n\t\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\t\tint pris = scan.nextInt();\n\t\t\t\t\tprisoners.add(pris);\n\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\tfor (int i = 0; i <= r; i++) {\n\t\t\t\t\tArrayList<Node> temp = new ArrayList<Node>();\n\t\t\t\t\tlist.add(temp);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (int i = 0; i < c; i++) {\n\t\t\t\t\tint a, b, wei;\n\t\t\t\t\ta = scan.nextInt();\n\t\t\t\t\tb = scan.nextInt();\n\t\t\t\t\twei = scan.nextInt();\n\t\t\t\t\tlist.get(a).add(new Node(b, wei));\n\t\t\t\t\tlist.get(b).add(new Node(a, wei));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (int i = 1; i <= r; i++)\n\t\t\t\t\tdijkstra (i);\n\t\t\t\t\n\t\t\t\tint minDist = INF;\n\t\t\t\t\n\t\t\t\tfor (int i = 1; i <= r; i++) {\n\t\t\t\t\tint allDist = 0;\n\t\t\t\t\tfor (int j : prisoners) {\n\t\t\t\t\t\tallDist += dist[j][i];\n\t\t\t\t\t}\n\t\t\t\t\tif (allDist < minDist)\n\t\t\t\t\t\tminDist = allDist;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(minDist);\n\t\t\t}\n\t}\n}", "generated_code": "import java.util.*;\n\nclass Main {\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tint n = s.nextInt();\n\t\tint sub, t, st, a, at = 0, sm = 0, sum = 0;\n\t\tString w = \"\";\n\t\tString m;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ta = 0;\n\t\t\tsub = 0;\n\t\t\tsum = 0;\n\t\t\tm = s.next();\n\t\t\tfor (int j = 0; j < 4; j++) {\n\t\t\t\tst = s.nextInt();\n\t\t\t\tt = s.nextInt();\n\t\t\t\tif (t != 0) {\n\t\t\t\t\tsum += t;\n\t\t\t\t\tsub += st;\n\t\t\t\t\ta++;\n\t\t\t\t}}\n\t\t\t\tsum = sum + 20 * (sub - a);\n\t\t\t\tif (a > at) {\n\t\t\t\t\tw = m;\n\t\t\t\t\tsm = sum;\n\t\t\t\t\tat = a;\n\t\t\t\t} else {\n\t\t\t\t\tif (a == at) {\n\t\t\t\t\t\tif (sum < sm) {\n\t\t\t\t\t\t\tsm = sum;\n\t\t\t\t\t\t\tw = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\tSystem.out.println(w + \" \" + at + \" \" + sm);\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2847_34__1_106025_5", "golden_code": "\n\nimport java.text.MessageFormat;\nimport java.util.Scanner;\nimport java.util.Arrays;\nimport java.lang.reflect.Array;\nimport java.math.MathContext;;\n\npublic class Main{\n\t\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner input =new Scanner(System.in);\n\t\tString t=input.nextLine();\n\t\tint x=Integer.parseInt(t);\n\t/*\tSystem.out.println(x);*/\n\t\twhile(x>0)\n\t\t{\n\t\t\tx--;\n\t\t\tString s=input.nextLine();\n\t\t\tString[] f=input.nextLine().split(\" \");\n\t\t\tint n=Integer.parseInt(s);\n\t\t\t/*System.out.println(n);*/\n\t\t\tint[] array=new int[50001];\n\t\t\tdouble num=0;\n\t\t\tdouble aveA=0,aveB=0;\n\t\t\tdouble max=0,min=101;\n\t\t\tfor(int i=0;i<n;i++)\n\t\t\t{\n\t\t\t\tarray[i]=Integer.parseInt(f[i]);\n\t\t\t\tnum+=array[i];\n\t\t\t\tif(array[i]>max)\n\t\t\t\t\tmax=array[i];\n\t\t\t\tif(array[i]<min)\n\t\t\t\t\tmin=array[i];\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tdouble y=n;\n\t\t\taveB=num/n;\n\t\t\t/*System.out.println(aveB);*/\n\t\t\tdouble AA=(max+min);\n\t\t\tdouble two=2;\n\t\t\taveA=AA/two;\n\t\t\t/*System.out.println(aveA);*/\n\t\t\tdouble a=aveA-aveB;\n\t\t\tif(Math.abs(a)<1)\n\t\t\t{\n\t\t\t\tSystem.out.println(\"Yes\");\n\t\t\t}\n\t\t\telse\n\t\t\t\tSystem.out.println(\"No\");\n\t\t\t/*for(int i=0;i<n;i++)\n\t\t\t{\n\t\t\t\tSystem.out.println(array[i]);\n\t\t\t}*/\n\t\t\t\n\t\t\t\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.util.*;\nimport java.lang.*;\nclass Main\n{\n\tpublic static void aghayetabe(String str)\n\t{\n\t\tint s=1,i;\n\t\tString asl=\"\";\n\t\tfor(i=0;i<str.length();i++)\n\t\t{\n\t\t\tif((str.charAt(i)=='1') || (str.charAt(i)=='2') || (str.charAt(i)=='3') || (str.charAt(i)=='4') || (str.charAt(i)=='5') || (str.charAt(i)=='6') || (str.charAt(i)=='7') || \t\t\t\t(str.charAt(i)=='8') || (str.charAt(i)=='9') || (str.charAt(i)=='0'))\n\t\t\t\tasl=asl+str.charAt(i);\n\t\t}\n\t\tfor(i=0;i<asl.length()-1;i++)\n\t\t{\n\t\t\tif(asl.charAt(i)==asl.charAt(i+1))\n\t\t\t\ts++;\n\t\t\tif(asl.charAt(i)!=asl.charAt(i+1))\n\t\t\t{\n\t\t\t\tSystem.out.print(s+\"\"+asl.charAt(i));\n\t\t\t\ts=1;\n\t\t\t}\n\t\t\tif(i+1==asl.length()-1)\n\t\t\t\tSystem.out.print(s+\"\"+asl.charAt(i+1));\n\t\t}\n\t\tif(asl.length()==1)\n\t\t\t\tSystem.out.println(s+\"\"+asl.charAt(0));\n\t\tif(asl.length()!=1)\n\t\t\tSystem.out.println();\n\t}\n\tpublic static void main(String[] args)\n\t{\n\t\tint n,i;\n\t\tScanner scan = new Scanner(System.in);\n\t\tn = scan.nextInt();\n\t\tscan.nextLine();\n\t\tString arr[] = new String[n];\n\t\tfor(i=0;i<n;i++)\n\t\t\tarr[i] = scan.nextLine();\t\n\t\tfor(i=0;i<n;i++)\n\t\t\taghayetabe(arr[i]);\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1319_53__1_1319_3", "golden_code": "import java.util.List;\nimport java.util.Scanner;\nimport java.util.ArrayList;\n\npublic class Main {\n\n\n    public static void main(String[] args) {\n       \n        Scanner input=new Scanner(System.in);\n        short pos=(short)input.nextInt();\n        List<String> outp=new ArrayList<String>();\n        int count=0;\n        while(pos!=5280)\n        {\n            if(count>0)\n                outp.add(\"\");\n        short mov1=0;\n        short mov2;\n        short dis1=(short) ((short)(pos-mov1));\n        short dis2;\n        if(dis1<0)\n            dis1*=-1;\n        mov2=(short)input.nextInt();\n        while(mov2!=pos)\n        {\n             dis2=(short)((short)pos-mov2);\n             if(dis2<0)\n                 dis2*=-1;\n             if(dis2>dis1)\n              { outp.add(\"Moving from \"+mov1+\" to \"+mov2+\": colder.\");}\n             else if(dis2<dis1)\n             {outp.add(\"Moving from \"+mov1+\" to \"+mov2+\": warmer.\");}\n             else\n             { outp.add(\"Moving from \"+mov1+\" to \"+mov2+\": same.\");}\n             dis1=dis2;\n             mov1=mov2;\n             mov2=(short)input.nextInt();\n        }\n        outp.add(\"Moving from \"+mov1+\" to \"+mov2+\": found it!\");\n         pos=(short)input.nextInt();\n         count++;\n        }\n        for(String s:outp)\n            System.out.println(s);\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tboolean b = false;\n\t\twhile (sc.hasNextLine()) {\n\t\t\tString input = sc.nextLine();\n\t\t\tScanner s = new Scanner(input);\n\t\t\tint cur = 0;\n\t\t\tint goal = s.nextInt();\n\t\t\tif (goal != 5280 && b)\n\t\t\t\tSystem.out.println();\n\t\t\tb = true;\n\t\t\twhile (goal != 5280 && s.hasNext()) {\n\t\t\t\tint a = s.nextInt();\n\t\t\t\tSystem.out.print(\"Moving from \" + cur + \" to \" + a + \": \");\n\t\t\t\tif (goal == a)\n\t\t\t\t\tSystem.out.println(\"found it!\");\n\t\t\t\telse if (Math.abs(goal - cur) < Math.abs(goal - a))\n\t\t\t\t\tSystem.out.println(\"colder.\");\n\t\t\t\telse if (Math.abs(goal - cur) > Math.abs(goal - a))\n\t\t\t\t\tSystem.out.println(\"warmer.\");\n\t\t\t\telse\n\t\t\t\t\tSystem.out.println(\"same.\");\n\t\t\t\tcur = a;\n\t\t\t}\nif (goal == 5280)\n\treturn;\n\t\t}\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1228_3__5_1010_9", "golden_code": "public class Main {\n    public static void main(String[] args) {\n        int n=0;\n        System.out.println(\"n e\");\n        System.out.println(\"- -----------\");\n        while(true){\n            if(n==10){\n                break;\n            }\n            if(n==0){\n                System.out.println(\"0 1\");\n                n++;\n                continue;\n            }\n            if(n==1){\n                System.out.println(\"1 2\");\n                n++;\n                continue;\n            }\n            if(n==2){\n                System.out.println(\"2 2.5\");\n                n++;\n                continue;\n            }\n            double sum=1;\n            int c=1;\n            for (int i = 1; i <= n; i++) {\n                c*=i;\n                sum+=(1.0/c);\n            }\n            System.out.printf(\"%d %.9f\\n\",n,sum);\n            n++;\n        }\n    }\n}\n", "generated_code": "import java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Scanner;\n\nclass Item{\n    double a;\n    double p;\n    double w;\n}\npublic class Main {\n    public static double knapsack(ArrayList<Item>obj,double totalWeigh){\n        int i=0;\n        double worth=0;\n        while (i<obj.size() && totalWeigh>0){\n            if(obj.get(i).a<=totalWeigh){\n                worth+=obj.get(i).p;\n                totalWeigh-=obj.get(i).a;\n            }\n            else{\n                worth+=obj.get(i).w*totalWeigh;\n                totalWeigh=0;\n            }\n            i++;\n        }\n        return worth;\n    }\n    public static void main(String[] args)throws IOException{\n        int test;\n        Scanner read = new Scanner(System.in);\n        test=read.nextInt();\n        while(test>0){\n            test--;\n            int num=read.nextInt();\n            double totalWeigh=read.nextDouble();\n            ArrayList<Item> Obj=new ArrayList<Item>();\n            while (num>0){\n                num--;\n                Item ham=new Item();\n                ham.a=read.nextDouble();\n                ham.p=read.nextDouble();\n                double m=ham.p/ham.a;\n                ham.w=m;\n                Obj.add(ham);\n            }\n            Collections.sort(Obj, new Comparator<Item>() {\n                public int compare(Item obj1, Item obj2) {\n                    Double w1=obj1.w;\n                    Double w2=obj2.w;\n                    return w2.compareTo(w1);\n                }\n            });\n            double m= (double)Math.round(knapsack(Obj,totalWeigh)*100)/100;\n            System.out.printf(\"%.2f\",m);\n            System.out.println();\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1459_12__1_1001_308", "golden_code": "import java.math.BigInteger;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while (input.hasNext()) {\n            String str=input.nextLine();\n            BigInteger ss = new BigInteger(str);\n            int l = str.length();\n            int count = 0;\n            for (int i = 1; i <= l; i++) {\n                BigInteger b = ss.multiply(new BigInteger(i + \"\"));\n                for (int n = l; n >= 1; n--) {\n                    String c = str.substring(str.length() - n) + str.substring(0, str.length() - n);\n                    String bb = b + \"\";\n                    if(bb.length()<c.length()){\n                        int y=c.length()-bb.length();\n                        for(int x=0;x<y;x++)\n                           bb=\"0\"+bb; \n                    }\n                    if (c.equals(bb)) {\n                        count++;\n                        break;\n                    }\n                }\n            }\n            if (count != l) \n                System.out.printf(\"%s is not cyclic\\n\", str);          \n            \n            if (count == l) \n                System.out.printf(\"%s is cyclic\\n\", str);\n            \n        }\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext())\n            System.out.println(scanner.nextInt()+scanner.nextInt());\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2525_2__1_2578_80", "golden_code": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport java.util.Scanner;\n\n/**\n *\n * @author mohamadreza\n */\npublic class Main {\n\n    static int max(int a, int b) {\n        return (a > b) ? a : b;\n    }\n\n    static int min(int a, int b) {\n        return (a < b) ? a : b;\n    }\n\n    static int knapSack(int W, int wt[], int val[], int n) {\n        int i, w;\n        int[][] K = new int[3][W + 1];\n        int curent = 1, prv = 0;\n\n        for (w = 0; w <= W; w++) {\n            K[0][w] = 0;\n        }\n\n        for (i = 1; i <= n; i++) {\n\n            for (w = 0; w <= W; w++) {\n                if (i == 0 || w == 0) {\n                    K[curent][w] = 0;\n                } else if (wt[i - 1] <= w) {\n                    int temp = val[i - 1] + K[prv][w - wt[i - 1]];\n                    K[curent][w] = max(temp, K[prv][w]);\n                } else {\n                    K[curent][w] = K[prv][w];\n                }\n            }\n            int temp = curent;\n            curent = prv;\n            prv = temp;\n        }\n\n        return K[prv][W];\n    }\n\n    static int knapSack_Value(int V, int W, int wt[], int val[], int n) {\n        int[][] K = new int[3][V + 1];\n        int curent = 1, prv = 0;\n        int res = -1, res2 = 0;\n        for (int v = 0; v <= V; v++) {\n            K[0][v] = v == 0 ? 0 : 999999999;\n        }\n        for (int i = 1; i <= n; i++) {\n            for (int v = 0; v <= V; v++) {\n                if (v == 0) {\n                    K[curent][v] = 0;\n                } else if (v < val[i - 1]) {\n                    K[curent][v] = K[prv][v];\n                } else {\n                    int temp = wt[i - 1] + K[prv][v - val[i - 1]];\n                    K[curent][v] = min(temp, K[prv][v]);\n                }\n            }\n            int temp = curent;\n            curent = prv;\n            prv = temp;\n        }\n        for (int v = 0; v < V + 1; v++) {\n            if (K[prv][v] <= W && (res2 < v || res < K[prv][v])) {\n                res = K[prv][v];\n                res2 = v;\n            }\n        }\n        return res2;\n    }\n\n    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n        while (true) {\n            int n = sc.nextInt();\n            int W = sc.nextInt();\n\n            int v = 0;\n            if (W == 0 || n == 0) {\n                break;\n            }\n            int[] val = new int[n];\n            for (int i = 0; i < n; i++) {\n                val[i] = sc.nextInt();\n                v += val[i];\n            }\n\n            int[] wt = new int[n];\n            for (int i = 0; i < n; i++) {\n                wt[i] = sc.nextInt();\n            }\n\n            if (W <= 50000) {\n                System.out.println(knapSack(W, wt, val, n));\n            } else {\n                System.out.println(knapSack_Value(v,W, wt, val, n));\n            }\n        }\n        sc.close();\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main{\n    static Scanner input=new Scanner(System.in);\n    public static void main(String[] args){\n        String s1=input.nextLine();\n        for (int i = 0; i < Integer.parseInt(s1); i++) {\n            String s=input.nextLine();\n            char[] c=s.toCharArray();\n            int g=0,b=0;\n            for (int j = 0; j < c.length; j++) {\n                if(c[j]=='b' || c[j]=='B')\n                    b++;\n                if(c[j]=='g' || c[j]=='G')\n                    g++;\n            }\n            if(g>b)\n                System.out.println(s+\" is GOOD\");\n            if(g<b)\n                System.out.println(s+\" is A BADDY\");\n            if(g==b)\n                System.out.println(s+\" is NEUTRAL\");\n        }\n\n    }\n}", "score": 0.0}
{"id": "SHARE_1_2837_38__1_1324_15", "golden_code": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\nimport java.util.Scanner;\n\n/**\n *\n * @author Shahrooz\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner in = new Scanner(System.in);\n        String temp = in.next();\n        int max = 1;\n        int maxMinus = 1;\n        int index = 0;\n        int[] array = new int[3];\n        while (!temp.equals(\"END\")) {\n            while (!temp.equals(\"GetFinal\")) {\n                if (Integer.parseInt(temp) > max) {\n                    maxMinus = max;\n                    max = Integer.parseInt(temp);\n                } else if(Integer.parseInt(temp) > maxMinus){\n                    maxMinus = Integer.parseInt(temp);\n                }\n                temp = in.next();\n            }\n            System.out.println(maxMinus);\n            temp = in.next();\n        }\n    }\n\n}\n", "generated_code": "import java.util.*;\npublic class Main {\n\tpublic static void main(String args[])\n\t{\n\t\tScanner A = new Scanner(System.in);\n\t\tint z = 0;\n\t\tboolean f = false ;\n\t\twhile(A.hasNext())\n\t\t{\n\t\t\tString s = A.next();\n\t\t\tif(s.equals(\"STOP\"))\n\t\t\t\tbreak;\n\t\t\tif(f)\n\t\t\t\tSystem.out.println();\n\t\t\tz++;\n\t\t\tSystem.out.println(\"Dataset #\"+z+\":  The initial order is \"+s+\".\");\n\t\t\tint n = A.nextInt();\n\t\t\twhile(n>0)\n\t\t\t{\n\t\t\t\t\n\t\t\t\tn--;\n\t\t\t\tString res = \"\";\n\t\t\t\tString t = A.next();\n\t\t\t\tint x = 0;\n\t\t\t\twhile(s.charAt(x)!=t.charAt(0))\n\t\t\t\t\tx++;\n\t\t\t\tif((s.length()+1)/2 -1 >= x )\n\t\t\t\t{\n\t\t\t\t\tfor(int i = 0; i < x ; i++)\n\t\t\t\t\t\tres += s.charAt(x-i-1)+\"\";\n\t\t\t\t\tfor(int i = x+1 ; i < s.length();i++)\n\t\t\t\t\t\tres += s.charAt(i);\n\t\t\t\t\tSystem.out.println(\"After \"+t+\" leaves, the order is \"+res+\".\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t\n\t\t\t\t\tfor(int i = 0; i < x ; i++)\n\t\t\t\t\t\tres += s.charAt(i)+\"\";\n\t\t\t\t\tfor(int i = s.length()-1 ; i > x;i--)\n\t\t\t\t\t\tres += s.charAt(i);\n\t\t\t\t\tSystem.out.println(\"After \"+t+\" leaves, the order is \"+res+\".\");\n\t\t\t\t}\n\t\t\t\ts = res ;\n\t\t\t}\n\t\t\tf = true ;\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_101362_12__1_1006_96", "golden_code": "import java.util.Scanner;\n\nclass Main {\n public static void main(String[] args){\n  Scanner scan = new Scanner(System.in);\n  int n=scan.nextInt();\n  for(int i=0;i<n;i++){\n\t  int a=scan.nextInt();\n\t  String m=scan.nextLine();\n\t  System.out.print(i+1);\n\t  for(int q=0;q<m.length();q++){\n\t\t  if(q!=a)\n\t\t\t  System.out.print(m.charAt(q));\n\t  }\n\t  System.out.println();\n  }\n  }\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while(true){\n            double input = in.nextDouble();\n            if (input == 0){\n                break;\n            }\n            int counter = 0;\n            double sum = 0;\n            while (sum < input){\n                sum += (1.0 / (++counter + 1));\n            }\n            System.out.println(counter+\" card(s)\");\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_491__1_1001_204", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while (input.hasNextLine()) {\n         String[] s = input.nextLine().split(\" \");\n         System.out.println(Integer.parseInt(s[0])+Integer.parseInt(s[1]));\n        }\n    }\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s=new Scanner(System.in);\n        int a,b;\n        while(s.hasNext()){\n            a=s.nextInt();\n            b=s.nextInt();\n            System.out.println(a+b);\n        }\n    }\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1651_55__1_1651_15", "golden_code": "import java.util.Scanner;\npublic class Main{\n    static Scanner input=new Scanner(System.in);\n    public static void main(String[] args){\n        int n=input.nextInt();\n        int max,min,j,m,d;\n        String[] s=new String[10];\n        int[] a=new int[10];\n        int[] b=new int[10];\n        int[] c=new int[10];\n        while(n!=-1){\n            max=0;\n            min=250;\n            j=0;\n            m=0;\n            for(int i=0;i<n;i++){\n                a[i]=input.nextInt();\n                b[i]=input.nextInt();\n                c[i]=input.nextInt();\n                s[i]=input.next();\n                d=a[i]*b[i]*c[i];\n                if(d>max){\n                    j=i;\n                    max=d;\n                }\n                if(d<min){\n                    m=i;\n                    min=d;\n                }\n            }\n            System.out.printf(\"%s took clay from %s.\\n\",s[j],s[m]);\n            n=input.nextInt();\n        } \n    }\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tint n, a, b, c;\n\t\twhile ((n=s.nextInt()) != -1) {\n\t\t\tdouble sum = 0;\n\t\t\tString[] name = new String[n];\n\t\t\tint[] vol = new int[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\ta = s.nextInt();\n\t\t\t\tb = s.nextInt();\n\t\t\t\tc = s.nextInt();\n\t\t\t\tvol[i] = a * b * c;\n\t\t\t\tname[i] = s.nextLine().trim();\n\t\t\t\tsum += (vol[i]/(double)n);\n\t\t\t}\n\t\t\tfor (a = 0; vol[a] <= sum; a++);\n\t\t\tfor (b = 0; vol[b] >= sum; b++);\n\t\t\tSystem.out.println(name[a] + \" took clay from \" + name[b] + \".\");\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_243__1_1001_316", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile (sc.hasNext()) {\n\t\t\tSystem.out.println(sc.nextInt() + sc.nextInt());\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        int x1,x2;\n        while(input.hasNext())\n        {\n            x1=input.nextInt();\n            x2=input.nextInt();\n            x1+=x2;\n            System.out.println(x1);\n        }\n    }\n    \n}", "score": 1.0}
{"id": "SHARE_5_1010_2__1_2578_33", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner read = new Scanner(System.in);\n\t\tArrayList<Float> ppws = new ArrayList<Float>();\n\t\tArrayList<Float> weights = new ArrayList<Float>();\n\t\tArrayList<Float> profits = new ArrayList<Float>();\n\t\tint cases;\n\t\tint n;\n\t\tfloat k;\n\t\tfloat weight, profit, ppw;\n\t\tfloat totalProfit = 0;\n\n\t\tcases = read.nextInt();\n\t\t\n\t\tfor (int i = 0; i < cases; i++) {\n\t\t\t\n\t\t\tppws.clear();\n\t\t\tweights.clear();\n\t\t\tprofits.clear();\n\t\t\t\n\t\t\tn = read.nextInt();\n\t\t\tk = read.nextFloat();\n\t\t\ttotalProfit = 0;\n\t\t\t\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\n\t\t\t\tweight = read.nextFloat();\n\t\t\t\tprofit = read.nextFloat();\n\t\t\t\tppw = profit/weight;\n\t\t\t\t\n\t\t\t\tif(j == 0){\n\t\t\t\t\tppws.add(ppw);\n\t\t\t\t\tweights.add(weight);\n\t\t\t\t\tprofits.add(profit);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tinsertion_sort(ppws, weights, profits, ppw, weight, profit);\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\n\t\t\t\tif(weights.get(j) < k){\n\t\t\t\t\ttotalProfit += profits.get(j);\n\t\t\t\t\tk -= weights.get(j);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ttotalProfit += k * ppws.get(j);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\ttotalProfit *= 100;\n\t\t\ttotalProfit = Math.round(totalProfit);\n\t\t\tint temp = (int) totalProfit;\n\t\t\tif(temp % 100 == 0)\n\t\t\t\tSystem.out.println(temp/100 + \".00\");\n\t\t\telse if(temp % 10 == 0)\n\t\t\t\tSystem.out.println(totalProfit/100 + \"0\");\n\t\t\telse\n\t\t\t\tSystem.out.println(totalProfit/100);\n\n\t\t}\n\t\tread.close();\n\n\t}\n\t\n\tpublic static void insertion_sort(ArrayList<Float> ppws, ArrayList<Float> amounts, ArrayList<Float> profits, float num, float amount, float profit){\n\t\tfor(int i = ppws.size()-1; i >= 0; i--){\n\t\t\t\n\t\t\tif(num <= ppws.get(i)){\n\t\t\t\tppws.add(i+1, num);\n\t\t\t\tamounts.add(i+1, amount);\n\t\t\t\tprofits.add(i+1, profit);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif(i == 0 && num >= ppws.get(0)){\n\t\t\t\tppws.add(0, num);\n\t\t\t\tamounts.add(0, amount);\n\t\t\t\tprofits.add(0, profit);\n\t\t\t}\n\n\t\t}\n\t}\n\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main{\n    public static void main(String[] args) {\n   int p,b=0,g=0;\n   String s;\n   Scanner in=new Scanner(System.in);\n   p=in.nextInt();\n   in.nextLine();\n   for(int i=0;i<p;i++){\n       g=0;b=0;\n       s=in.nextLine();\n       for(int j=0;j<s.length();j++){\n           if(s.charAt(j)=='g'||s.charAt(j)=='G')\n               g++;\n           if(s.charAt(j)=='b'||s.charAt(j)=='B')\n               b++;\n           \n       }\n       if(g>b)\n           System.out.println(s+\" is GOOD\");\n       else if(b>g)\n           System.out.println(s+\" is A BADDY\");\n       else if(b==g)\n           System.out.println(s+\" is NEUTRAL\");\n   }\n}\n}\n", "score": 0.0}
{"id": "SHARE_1_1185_4__1_1185_6", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (true) {\n            String binary = in.next();\n            if (\"0\".equals(binary)) {\n                System.exit(0);\n            }\n            char[] s = binary.toCharArray();\n            double[] x = new double[binary.length()];\n            int sum = 0;\n            for (int i = binary.length() - 1, j = 1; i > -1 & j < binary.length() + 1; j++, i--) {\n                x[i] = (s[i] - 48) * ((Math.pow(2, j)) - 1);\n                sum += x[i];\n            }\n            System.out.println(sum);\n        }\n    }\n}", "generated_code": "import java.util.*;   \n  \npublic class Main {   \n  \n    public static void main(String[] args) {   \n        Scanner cin = new Scanner(System.in);   \n           \n        while(true)   \n        {   \n            String skew = cin.nextLine();   \n            if(skew.equals(\"0\"))   \n                break;   \n               \n            int decimal = trans(skew);   \n            System.out.println(decimal);   \n        }   \n  \n    }   \n       \n    private static int trans(String skew)   \n    {   \n        int num = 0;   \n        int index = 0;   \n        for(int i = skew.length()-1; i>=0; i--)   \n        {   \n            int cnum = Integer.valueOf(skew.substring(i, i+1));   \n            num += (Math.pow(2, index+1) - 1) * cnum;   \n            index++;   \n        }   \n           \n        return num;   \n    }   \n  \n} ", "score": 1.0}
{"id": "SHARE_1_101134_1__1_1319_22", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        String Lang[] = {\"cs\", \"en\", \"fr\", \"de\", \"hu\", \"it\", \"jp\", \"pl\", \"es\"};\n        String Rock[] = {\"Kamen\", \"Rock\", \"Pierre\", \"Stein\", \"Ko\", \"Koe\", \"Sasso\", \"Roccia\", \"Guu\", \"Kamien\", \"Piedra\"};\n        int RockInt[] = {1, 2, 3, 4, 5, 7, 9, 10,11,12};\n        String Scissors[] = {\"Nuzky\", \"Scissors\", \"Ciseaux\", \"Schere\", \"Ollo\", \"Olloo\", \"Forbice\", \"Choki\", \"Nozyce\", \"Tijera\"};\n        int ScissorsInt[] = {1,2,3,4,5,7,8,9,10,11};\n        String Paper[] = {\"Papir\", \"Paper\", \"Feuille\", \"Papier\", \"Papir\", \"Carta\", \"Rete\", \"Paa\", \"Papier\", \"Papel\"};\n        int PaperInt[] = {1,2,3,4,5,6,8,9,10,11};\n        int counter = 0;\n        while (true) {\n            String fname, sname, flan, case1, case2, slan;\n            int pnt1 = 0, pnt2 = 0;\n            counter++;\n            flan = s.next();\n            fname = s.next();\n            slan = s.next();\n            sname = s.next();\n            while (true) {\n                int lan1 = 0, lan2 = 0, selcase1 = 0, selcase2 = 0;\n                case1 = s.next();\n                if (case1.equals(\"-\") || case1.equals(\".\")) {\n                    break;\n                }\n                case2 = s.next();\n                for (int i = 0; i < Lang.length; i++) {\n                    if (Lang[i].equals(flan)) {\n                        lan1 = i;\n                    }\n                    if (Lang[i].equals(slan)) {\n                        lan2 = i;\n                    }\n                }\n                for (int i = 0; i < RockInt[lan1+1]-RockInt[lan1]; i++) {\n                    if (case1.equals(Rock[i + RockInt[lan1]-1])) {\n                        selcase1 = 1;\n                    }\n                }\n                for (int i = 0; i < ScissorsInt[lan1+1]-ScissorsInt[lan1]; i++) {\n                    if (case1.equals(Scissors[i + ScissorsInt[lan1]-1])) {\n                        selcase1 = 2;\n                    }\n                }\n                for (int i = 0; i < PaperInt[lan1+1]-PaperInt[lan1]; i++) {\n                    if (case1.equals(Paper[i+PaperInt[lan1]-1])) {\n                        selcase1 = 3;\n                    }\n                }\n                /*************************************************/\n                for (int i = 0; i < RockInt[lan2+1]-RockInt[lan2]; i++) {\n                    if (case2.equals(Rock[i + RockInt[lan2]-1])) {\n                        selcase2 = 1;\n                    }\n                }\n                for (int i = 0; i < ScissorsInt[lan2+1]-ScissorsInt[lan2]; i++) {\n                    if (case2.equals(Scissors[i + ScissorsInt[lan2]-1])) {\n                        selcase2 = 2;\n                    }\n                }\n                for (int i = 0; i < PaperInt[lan2+1]-PaperInt[lan2]; i++) {\n                    if (case2.equals(Paper[i+PaperInt[lan2]-1])) {\n                        selcase2 = 3;\n                    }\n                }\n                /**************************************************/\n                if (selcase1 == 1 && selcase2 == 2) {\n                    pnt1++;\n                }\n                if (selcase1 == 2 && selcase2 == 3) {\n                    pnt1++;\n                }\n                if (selcase1 == 3 && selcase2 == 1) {\n                    pnt1++;\n                }\n                if (selcase1 == 2 && selcase2 == 1) {\n                    pnt2++;\n                }\n                if (selcase1 == 3 && selcase2 == 2) {\n                    pnt2++;\n                }\n                if (selcase1 == 1 && selcase2 == 3) {\n                    pnt2++;\n                }\n            }\n            System.out.println(\"Game #\" + counter + \":\");\n            if (pnt1 == 1) {\n                System.out.println(fname + \": \" + pnt1 + \" point\");\n            } else {\n                System.out.println(fname + \": \" + pnt1 + \" points\");\n            }\n            if (pnt2 == 1) {\n                System.out.println(sname + \": \" + pnt2 + \" point\");\n            } else {\n                System.out.println(sname + \": \" + pnt2 + \" points\");\n            }\n            if (pnt1 == pnt2) {\n                System.out.println(\"TIED GAME\");\n            }\n            if (pnt1 > pnt2) {\n                System.out.println(\"WINNER: \" + fname);\n            }\n            if(pnt1<pnt2){\n                System.out.println(\"WINNER: \" + sname);\n            }\n            System.out.println();\n            if(case1.equals(\".\"))\n                return;\n        }\n    }\n}", "generated_code": "import java.util.*;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner in=new Scanner(System.in);\n\t\tint h=0;\n\t\twhile(true){\n\t\t\tint cookie=in.nextInt();\n\t\t\tif(cookie>=5280)\n\t\t\t\tbreak;\n\t\t\telse\n\t\t\t\tif(h!=0)\n\t\t\t\t\tSystem.out.println();\n\t\t\tint preloc=0;\n\t\t\twhile(true){\n\t\t\t\tint currloc=in.nextInt();\n\t\t\t\tif(currloc==cookie){\n\t\t\t\t\tSystem.out.println(\"Moving from \"+preloc+\" to \"+currloc+\": found it!\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(abs(preloc-cookie)>abs(currloc-cookie))\n\t\t\t\t\tSystem.out.println(\"Moving from \"+preloc+\" to \"+currloc+\": warmer.\");\n\t\t\t\telse if(abs(preloc-cookie)<abs(currloc-cookie))\n\t\t\t\t\tSystem.out.println(\"Moving from \"+preloc+\" to \"+currloc+\": colder.\");\n\t\t\t\telse if(abs(preloc-cookie)==abs(currloc-cookie))\n\t\t\t\t\tSystem.out.println(\"Moving from \"+preloc+\" to \"+currloc+\": same.\");\n\t\t\t\tpreloc=currloc;\n\t\t\t}\n\t\t\th++;\n\t\t}\n\t}\n\n\tprivate static int abs(int i) {\n\t\tif(i>0)\n\t\t\treturn i;\n\t\treturn 0-i;\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_437__1_1001_470", "golden_code": "import java.io.*;\nimport java.util.*;\npublic class Main\n{\n            public static void main(String args[]) throws Exception\n            {\n                    Scanner cin=new Scanner(System.in);\n            \t\n            \twhile(cin.hasNext()){\n                    int a=cin.nextInt(),b=cin.nextInt();\n                    System.out.println(a+b);\n                    \n            \t}\n            }\n}", "generated_code": "import java.util.Scanner;\n \npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt() + cin.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1324_37__1_101329_11", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int x = 1;\n        while (true) {\n            StringBuilder s = new StringBuilder(in.next());\n            if (s.toString().equals(\"STOP\")) break;\n            int n = in.nextInt();\n            char[] ch = new char[n];\n            for (int i = 0; i < n; i++) ch[i] = in.next().charAt(0);\n            if (x > 1) System.out.println();\n            System.out.println(\"Dataset #\" + x + \":  The initial order is \" + s + \".\");\n            for (int i = 0; i < n; i++) {\n                int k = s.indexOf(ch[i] + \"\");\n               \n                if ((s.length() % 2 != 0 && k == s.length() / 2) || (k < s.length() / 2)) {\n                    StringBuilder ns = new StringBuilder(s.substring(0, k));\n                    s.replace(0, k + 1, ns.reverse().toString());\n                } else {\n                    StringBuilder ns = new StringBuilder(s.substring(k + 1, s.length()));\n                    s.replace(k, s.length(), ns.reverse().toString());\n                }\n                System.out.println(\"After \" + ch[i] + \" leaves, the order is \" + s + \".\");\n            }\n            x++;\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main (String [] ar){\n        Scanner s = new Scanner(System.in);\n        long n=s.nextLong();\n        for (long i=0 ; i<n ; i++){\n            long x=s.nextLong();\n            long a=2;\n            if (x==0||x==1||x==2)\n                System.out.println(a);\n            else{\n                Z:for(long j=x ; j<x+1000000000 ; j++){\n                    if (j%2==0)\n                        continue;\n                    for (long k=3 ; k<=Math.sqrt(j) ; k+=2){\n                        if (j%k==0)\n                            continue Z;\n                    }\n                    a=j;\n                    break;\n                }\n            System.out.println(a);\n            }\n            \n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1009_41__1_101147_10", "golden_code": "\nimport java.text.DecimalFormat;\nimport java.util.Scanner;\npublic class Main {\n    static Scanner in=new Scanner(System.in);\n    public static void main(String[] args) {\n        double x=0,average=0;\n       \n        DecimalFormat df  =new DecimalFormat(\"#.##\");\n\n        for(int i=0;i<12;i++)\n        {\n            x+=in.nextDouble();\n        }\n        average=x/12;\n        System.out.println(\"$\"+df.format(average));\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main{\n    public static void main(String[] args){\n        Scanner cin=new Scanner(System.in);\n        int caseCounter=0;\n        while(true){\n            int nc=cin.nextInt();\n            if(nc==0) break;\n            caseCounter++;\n            int nums[]=new int[nc];\n            for(int i=0;i<nc;i++)\n                nums[i]=cin.nextInt();\n            int iteration=0;\n            mainW: while(true){\n                outter: for(int i=0;i<nc;i++){\n                    for(int j=i+1;j<nc;j++)\n                        if(nums[i]!=nums[j])\n                            break outter;\n                    if(i==nc-1)break mainW;\n                }\n                iteration++;\n                if(iteration>=1000){\n                    iteration=-1;\n                    break mainW;\n                }\n                int first=nums[0];\n                for(int i=1;i<nc;i++){\n                    int def=nums[i]-nums[i-1];\n                    if(def<0) def*=-1;\n                    nums[i-1]=def;\n                }\n                int def=nums[nc-1]-first;\n                if(def<0) def*=-1;\n                nums[nc-1]=def;\n            }\n            if(iteration!=-1)\n                System.out.println(\"Case \"+caseCounter+\": \"+iteration+\" iterations\");\n            else\n                System.out.println(\"Case \"+caseCounter+\": not attained\");\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1099_78__1_1099_80", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int count = 1;\n        while (true) {\n            int m = 0;\n            int n = scanner.nextInt();\n            if (n == 0 || n < 0)\n                System.exit(0);\n            if (1 <= n && n <= 50) {\n                int[] a = new int[n];\n                for (int i = 0; i < n; i++) {\n                    a[i] = scanner.nextInt();\n                    if (a[i] > 100 || a[i] < 1)\n                        break;\n                }\n                int sum = 0;\n                for (int i = 0; i < n; i++) {\n                    sum += a[i];\n                }\n                int x = sum / n;\n                for (int i = 0; i < n; i++) {\n                    if (a[i] < x)\n                        m += x - a[i];\n                }\n            }\n            System.out.println(\"Set #\" + count);\n            System.out.println(\"The minimum number of moves is \" + m + \".\\n\");\n            count++;\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main{\n    static Scanner input=new Scanner(System.in);\n    public static void main(String[] args){\n        int t=1;\n        while(true){\n            int n=input.nextInt();\n            if(n==0)\n                return;\n            int[] a=new int[n];\n            int sum=0,ave,res=0;\n            for(int i=0;i<n;i++){\n                a[i]=input.nextInt();\n                sum+=a[i];\n            }\n            ave=sum/n;\n            for(int i=0;i<n;i++)\n                if(a[i]>ave)\n                    res=res+(a[i]-ave);\n            System.out.printf(\"Set #%d\\n\",t);\n            System.out.printf(\"The minimum number of moves is %d.\\n\",res);\n            t++;\n            System.out.println(\"\");\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1002_13__1_1002_1", "golden_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\n\npublic class Main {\n\t\n\tPoint t;\n\tdouble r;\n\tList<Point> ps = new ArrayList<Point>();\n\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tBufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n\t\tMain m = null;\n\t\twhile (!(m=read(r)).end()) {\n\t\t\tSystem.out.println(m.process());\n\t\t}\n\t}\n\n\tprivate boolean end() {\n\t\treturn r<0;\n\t}\n\n\tprivate static Main read(BufferedReader r) throws IOException {\n\t\tMain m = new Main();\n\t\tm.r = -1;\n\t\tString s = \"\";\n\t\tint cc = 0;\n\t\twhile ((cc=r.read()) > 0) {\n\t\t\tchar c = (char) cc;\n\t\t\tif (c == '-') {\n\t\t\t\treturn m;\n\t\t\t}\n\t\t\tif (c == '\\n') {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ts += c;\n\t\t}\n\t\tif (s == null || s.equals(\"\")) {\n\t\t\treturn null;\n\t\t}\n\t\tString[] a = s.split(\" \");\n\t\tm.t = new Point(Integer.parseInt(a[0]), Integer.parseInt(a[1]));\n\t\tm.r = Double.parseDouble(a[2]);\n\t\tif (m.r > 0) {\n\t\t\ts = r.readLine();\n\t\t\tint n = Integer.parseInt(s);\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\ts = r.readLine();\n\t\t\t\ta = s.split(\" \");\n\t\t\t\tm.ps.add(new Point(Integer.parseInt(a[0]), Integer.parseInt(a[1])));\n\t\t\t}\n\t\t}\n\t\treturn m;\n\t}\n\t\n\tprivate String process() {\n\t\tMap<Point, List<Point>> pps = new HashMap<Point, List<Point>>();\n\t\tfor (Point p : ps) {\n\t\t\tif (dist2(t, p) <= r*r) {\n\t\t\t\tpps.put(p, new ArrayList<Point>());\n\t\t\t}\n\t\t}\n\t\tfor (Entry<Point, List<Point>> e : pps.entrySet()) {\n\t\t\tPoint p1 = e.getKey();\n\t\t\tfor (Point p2 : pps.keySet()) {\n\t\t\t\tif (angle(t, p1, p2)<=0) {\n\t\t\t\t\te.getValue().add(p2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tList<Point> maxl = null;\n\t\tfor (List<Point> l : pps.values()) {\n\t\t\tif (max<l.size()) {\n\t\t\t\tmax = l.size();\n\t\t\t\tmaxl = l;\n\t\t\t}\n\t\t}\n\t\treturn String.valueOf(max);\n\t}\n\n\tprivate double angle(Point t, Point p1, Point p2) {\n\t\tPoint v1 = new Point(p1.x-t.x, p1.y-t.y);\n\t\tPoint v2 = new Point(p2.x-t.x, p2.y-t.y);\n\t\treturn v1.y*v2.x - v1.x*v2.y;\n\t}\n\n\tprivate static double dist2(Point p1, Point p2) {\n\t\treturn Math.pow(p2.x-p1.x, 2) + Math.pow(p2.y-p1.y, 2);\n\t}\n}\n\nclass Point {\n\tint x, y;\n\t\n\tpublic Point(int x, int y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"\" + x + \" \" + y;\n\t}\n}", "generated_code": "/**\n * Created with IntelliJ IDEA.\n * User: sepideh\n */\n\nimport java.util.*;\nimport java.awt.geom.*;\nimport java.awt.*;\n\nimport static java.lang.Math.*;\nimport static java.lang.System.*;\n\npublic class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\n\t\twhile (true)\n\t\t{\n\t\t\tint x = scan.nextInt();\n\t\t\tint y = scan.nextInt();\n\n\t\t\tdouble r = scan.nextDouble();\n\n\t\t\tif(r < 0)\tbreak;\n\n\t\t\tint n = scan.nextInt();\n\n\t\t\tQueue<Points> points = new LinkedList<Points>();\n\n\t\t\tfor(int i = 0; i < n; i++)\n\t\t\t{\n\t\t\t\tint X = scan.nextInt();\n\t\t\t\tint Y = scan.nextInt();\n\n\t\t\t\tif(Dis(x, y, X, Y) > r)\tcontinue;\n\n\t\t\t\tdouble teta = atan2(Y-y, X-x);\n\n\t\t\t\tif(teta < 0)\tteta += 2*PI;\n\n\t\t\t\tpoints.add(new Points(X, Y, teta));\n\t\t\t}\n\n\t\t\tPoints[] p = new Points[2*points.size()];\n\n\t\t\tint c = 0;\n\n\t\t\tfor(Points i : points)\tp[c++] = i;\n\t\t\tfor(Points i : points)\n\t\t\t{\n\t\t\t\tint xi = i.x;\n\t\t\t\tint yi = i.y;\n\t\t\t\tdouble t = i.teta+2*PI;\n\t\t\t\tp[c++] = new Points(xi, yi, t);\n\t\t\t}\n\n\t\t\tArrays.sort(p, new Comparator<Points>()\n\t\t\t{\n\t\t\t\tpublic int compare(Points points, Points points1)\n\t\t\t\t{\n\t\t\t\t\treturn (int)((points.teta-points1.teta)*180/PI);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tint res = 0;\n\n\t\t\tQueue<Points> queue = new LinkedList<Points>();\n\n\n\t\t\tfor(int i = 0; i < p.length; i++)\n\t\t\t{\n\t\t\t\tqueue.offer(p[i]);\n\n\t\t\t\twhile (p[i].teta - queue.peek().teta> PI)\n\t\t\t\t\tqueue.poll();\n\n\t\t\t\tres = max(res, queue.size());\n\t\t\t}\n\t\t\tout.println(res);\n\n\t\t}\n\n\t}\n\n\tprivate static double Dis(int x, int y, int x1, int y1)\n\t{\n\t\treturn sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1));\n\t}\n}\nclass Points\n{\n\tint x;\n\tint y;\n\tdouble teta;\n\n\tPoints(int X, int Y, double t)\n\t{\n\t\tx = X;\n\t\ty = Y;\n\t\tteta = t;\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2737_0__1_2737_43", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        for (int q = 0; q < n; q++) {\n            int x = in .nextInt();\n            int y = in.nextInt();\n            int sum = 0;\n            for (int i = 0; i < x; i++) {\n                for (int j = 0; j < y; j++) {\n                    sum+=i+j;\n                }\n            }\n            System.out.println(sum);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main{\n\t\n\tpublic static void main(String[] args){\n\t\tScanner reader=new Scanner(System.in);\n\t\t\n\t\t\n\t\tint tests=Integer.valueOf(reader.nextInt());\n\t\t\n\t\tfor(int i=0;i<tests;i++){\n\t\t\tint n=Integer.valueOf(reader.nextInt());\n\t\t\tint m=Integer.valueOf(reader.nextInt());\n\t\t\tlong result=((n*(n-1))/2) * m + ((m*(m-1))/2) * n;\n\t\t\tSystem.out.println(String.valueOf(result));\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_2732_42__1_2732_25", "golden_code": "import java.util.*;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scan = new Scanner(System.in);\n        int t = scan.nextInt();\n        while(t-- > 0)\n        {\n            int x = scan.nextInt(), y = scan.nextInt();\n            if(x == y || x == y+2)\n                System.out.println(x%2 == 1 ? (x+y - 1) : (x+y));\n            else\n                System.out.println(\"No Number\");\n        }\n    }\n}\n", "generated_code": "import java.util.*;\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner s=new Scanner(System.in);\n\t\t\n\t\tint n=s.nextInt();\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tint x=s.nextInt();\n\t\t\tint y=s.nextInt();\n\t\t\tif(x-y==0)\n\t\t\t{\n\t\t\t\tif(x%2==0)\n\t\t\t\t\tSystem.out.println(2*x);\n\t\t\t\telse\n\t\t\t\t\tSystem.out.println(2*x-1);\n\t\t\t}\n\t\t\telse if(x-y==2)\n\t\t\t{\n\t\t\t\tif(x%2==0)\n\t\t\t\t\tSystem.out.println(x+y);\n\t\t\t\telse \n\t\t\t\t\tSystem.out.println(x+y-1);\n\t\t\t}\n\t\t\telse \n\t\t\t\tSystem.out.println(\"No Number\");\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1009_138__1_1009_72", "golden_code": "import java.util.Scanner;\nclass Main {\n\tstatic boolean adj[]=new boolean [178858589];\n\t\n\tpublic static void main(String s[]) {\n\t\tScanner cin = new Scanner(System.in);\n\t\tdouble sum=0;\n\t\tfor(int i=0;i<12;i++)\n\t\t{\n\t\t\tdouble val=cin.nextDouble();\n\t\t\tsum+=val;\n\t\t}\n\t\tSystem.out.printf(\"$%.2f\\n\",sum/12);\n\t\tadj[0]=true;\n\t}\n}", "generated_code": "\nimport java.text.DecimalFormat;\nimport java.util.Scanner;\n\n\n\n\npublic class Main {\nstatic DecimalFormat df=new DecimalFormat(\"0.00\");\n \n    public static void main(String[] args) {\n        Scanner in=new Scanner(System.in);\n        double a=0;\n        int count=0;\n        while(in.hasNext()){\n            a+=in.nextDouble();\n            count++;\n        }\n        \n        System.out.println(\"$\"+df.format(a/count));\n        \n     \n    \n    }\n\n}\n", "score": 1.0}
{"id": "SHARE_1_2429_16__6_1006_3", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt(), d, n, maxD;\n        long sum;\n        while (t > 0) {\n            n = in.nextInt();\n            if (n == 1) {\n                System.out.println(\"0\");\n                t--;\n                continue;\n            }\n            maxD = (int) Math.sqrt(n);\n            sum = 1;\n            for (int i = 2; i <= maxD; i++) {\n                if (n % i == 0) {\n                    sum += i;\n                    d = n / i;\n                    if (d != i) {\n                        sum += d;\n                    }\n                }\n            }\n            System.out.println(sum);\n            t--;\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main{\n\tstatic Scanner s = new Scanner(System.in);\n\tstatic double a,b,c,d,m,t;\n\tpublic static void main(String args[]){\n\t\t\n\t\twhile(s.hasNext()){\n\t\t\ta=s.nextDouble();\n\t\t\tb=s.nextDouble();\n\t\t\tc=s.nextDouble();\n\t\t\td=s.nextDouble();\n\t\t\tm=s.nextDouble();\n\t\t\tt=s.nextDouble();\n\t\t\tSystem.out.println(String.format(\"%.2f\",((int)(bs(.0000001,10000000)*100))/100.));\n\t\t\t\n\t\t}\n\t}\n\tprivate static double bs(double s, double f){\n\t\tif(f-s<.000001)\n\t\t\treturn s;\n\t\tdouble v=(f+s)/2.0;\n\t\tdouble ans=m*(a*v*v*v+b*v*v+c*v+d)-t;\n\t\tif(ans>0)\n\t\t\treturn bs(s,v);\n\t\telse\n\t\t\treturn bs(v,f);\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2360_16__5_1004_8", "golden_code": "\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        while(in.hasNext()){\n            int a=in.nextInt();\n            int b[]=new int[8002];\n            for (int i = 0; i < 8002; i++) {\n                b[i]=-1;\n            }\n            int x1=0;\n            int x2=0;\n            int c=0;\n            for (int i = 0; i < a; i++) {\n                x1=in.nextInt();\n                x2=in.nextInt();\n                c=in.nextInt();\n                for (int j = x1; j < x2; j++) {\n                    b[j]=c;\n                }\n            }\n            int q[]=new int[8001];\n            for (int i = 0; i <= 8000; i++) {\n                if(b[i]!=b[i+1]&&b[i]!=-1)\n                    q[b[i]]++;\n            }\n            for (int i = 0; i < q.length; i++) {\n                if(q[i]!=0)\n                    System.out.println(i+\" \"+q[i]);\n            }\n            System.out.println(\"\");\n        }\n    }\n}\n", "generated_code": "import java.io.BufferedReader;\nimport java.math.BigInteger;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args)throws IOException{\n\t\tScanner cs=new Scanner(System.in);\n\t\tString str=cs.next();\n\t\tLong n=Long.parseLong(str);\n\t\tfor(int i=0;i<n;i++){\n\t\t\tstr=cs.next();\n\t\t\tString regex = \"[\\\\s;*,+]\";\n\t\t\tString[] tokens = str.split(regex);//dedicated for generating min\n\t\t\tString[] tokens2=tokens.clone();\n\t\t\tArrayList<Character> opt=new ArrayList<Character>();\n\t\t\tfor(int s=0;s<str.length();s++){\n\t\t\t\tif((str.charAt(s)=='*')||(str.charAt(s)=='+'))\n\t\t\t\t\topt.add(str.charAt(s));\n\t\t\t}\n\t\t\tCharacter[] op=opt.toArray(new Character[opt.size()]);\n\t\t\t\n\t\t\tLong max=(long) 1,min=(long) 0;\n\t\t\tfor(int o=0;o<op.length;o++){\n\t\t\t\tif(op[o]=='*'){\n\t\t\t\t\tLong temp=Long.parseLong(tokens[o])*Long.parseLong(tokens[o+1]);\n\t\t\t\t\ttokens[o]=\"$\";\n\t\t\t\t\ttokens[o+1]=Long.toString(temp);\n\t\t\t\t}\t\n\t\t\t}\n\t\t\tfor(int l=0;l<tokens.length;l++)\n\t\t\t\tif(tokens[l]!=\"$\")\n\t\t\t\t\tmin+=Long.parseLong(tokens[l]);\n\t\t\t//System.out.println(\"min is: \"+min);\n\t\t\n\t\t\tfor(int r=0;r<op.length;r++){\n\t\t\t\tif(op[r]=='+'){\n\t\t\t\t\tint temp=Integer.parseInt(tokens2[r])+Integer.parseInt(tokens2[r+1]);\n\t\t\t\t\ttokens2[r]=\"$\";\n\t\t\t\t\ttokens2[r+1]=Integer.toString(temp);\n\t\t\t\t}\t\n\t\t\t}\n\t\t\t\n\t\t\tfor(int m=0;m<tokens2.length;m++)\n\t\t\t\tif(tokens2[m]!=\"$\")\n\t\t\t\t\tmax*=Integer.parseInt(tokens2[m]);\n\t\t\tSystem.out.println(\"The maximum and minimum are \"+max+\" and \"+min+\".\");\t\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1662_2__1_1662_4", "golden_code": "\nimport java.util.*;\n\npublic class Main {\n\t\n\tpublic static String sep = \",.;'\\\"()/:- \\t\";\n\t\n\tpublic static ArrayList<String> explode(String in) {\n\t\tArrayList<String> line = new ArrayList<String>();\n\t\tint k = 0;\n\t\tfor (int i = 0; i < in.length(); ++i) {\n\t\t\t\n\t\t\twhile (i < in.length() && sep.indexOf(in.charAt(i)) != -1)\n\t\t\t\ti++;\n\t\t\t\n\t\t\tk = i;\n\n\t\t\twhile (i < in.length() && sep.indexOf(in.charAt(i)) == -1)\n\t\t\t\ti++;\n\t\t\t\n\t\t\tline.add(in.substring(k, i));\n\t\t\tk = i;\n\t\t}\n\t\treturn line;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tHashMap<String, Integer> words = new HashMap<String, Integer>();\n\t\twhile (sc.hasNext()) {\n\t\t\tArrayList<String> line = explode(sc.nextLine().toLowerCase());\n\t\t\tfor (String s : line)\n\t\t\t\twords.put(s, words.containsKey(s) ? words.get(s) + 1 : 1);\n\t\t}\n\t\tArrayList<String> ans = new ArrayList<String>();\n\t\tint max = 0;\n\t\tfor (Map.Entry<String, Integer> e : words.entrySet()) {\n\t\t\tif (e.getValue() > max) {\n\t\t\t\tmax = e.getValue();\n\t\t\t\tans.clear();\n\t\t\t\tans.add(e.getKey());\n\t\t\t}\n\t\t\telse if (e.getValue() == max)\n\t\t\t\tans.add(e.getKey());\n\t\t}\n\n\t\tSystem.out.println(max + \" occurrences\");\n\t\tCollections.sort(ans);\n\t\tfor (String s : ans) {\n\t\t\tSystem.out.println(s);\n\t\t}\n\t\t\n\t\tsc.close();\n\t}\n}\n", "generated_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n\tpublic static void main(String[] argv) throws Exception {\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\n\t\tHashtable wordCounts = new Hashtable();\n\n\t\tString l = in.readLine();\n\n\t\twhile (l != null) {\n\t\t\tStringTokenizer t = new StringTokenizer(l, \" \\t,.;\\'`\\\"\\\\()/:-\");\n\t\t\twhile (t.hasMoreTokens()) {\n\t\t\t\tString w = t.nextToken().toLowerCase();\n\n\t\t\t\tInteger count = (Integer) wordCounts.get(w);\n\n\t\t\t\tif (count == null)\n\t\t\t\t\tcount = new Integer(0);\n\n\t\t\t\tcount = new Integer(count.intValue() + 1);\n\n\t\t\t\twordCounts.put(w, count);\n\t\t\t}\n\n\t\t\tl = in.readLine();\n\t\t}\n\n\t\t// System.err.println(wordCounts);\n\n\t\tint maxCount = 0;\n\t\tfor (Iterator doCosts = wordCounts.keySet().iterator(); doCosts\n\t\t\t\t.hasNext();) {\n\t\t\tint count = ((Integer) wordCounts.get(doCosts.next())).intValue();\n\t\t\tif (count > maxCount)\n\t\t\t\tmaxCount = count;\n\t\t}\n\t\tString w = \"\";\n\t\tIterator doCosts2 = wordCounts.keySet().iterator();\n\t\tSystem.out.println(maxCount + \" occurrences\");\n\t\tfor (Iterator doCosts = wordCounts.keySet().iterator(); doCosts\n\t\t\t\t.hasNext();) {\n\t\t\tString word = (String) doCosts.next();\n\t\t\tint count = ((Integer) wordCounts.get(word)).intValue();\n\n\t\t\tif (count == maxCount) {\n\t\t\t\t// System.out.println(word);\n\t\t\t\tw += word;\n\t\t\t\tw += \" \";\n\t\t\t}\n\t\t}\n\t\tString[] q = w.split(\" \");\n\t\tArrays.sort(q);\n\t\tfor (int i = 0; i < q.length; i++) {\n\t\t\tSystem.out.println(q[i]);\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_2588_1__1_1185_16", "golden_code": "import java.io.*;\nimport java.awt.*;\nimport java.util.*;\n\npublic class Main\n{\n    public static void main(String[] arqssfdsf)\n    {\n        Scanner scan = new Scanner(System.in);\n\n        String[] abc = \"000000001,000000002,000000001,000000004,000000006,000000004,000000017,000000032,000000044,000000060,000000070,000000184,000000476,000000872,000001553,000002720,000004288,000006312,000009004,000016088,000036900,000082984,000174374,000346048,000653096,001199384,002160732,003812464,006617304,011307920,018978577,031327104,051931296,090400704,170054336,341729616,711634072,491256624,084996748,246978752,360863368,970232968,784743460,510498224,166545624,052102480,293458982,360103104,376725248,176834992,275731496,954496368,300625128,414063440,433951772,310322560,249708880,811887600,938737368,864074336,071770480,448334368,690385169,500412928,511348096,358818624,434524320,948108160,468289216,650489344,526806528,302230656,030608880,751558192,753974936,535251360,634709584,025955872,475657868,623272896,157046656,780889712,505696136,184012880,923143544,725654512,179238116,193093504,648778256,195169008,403948504,362621408,864754992,328296992,732797990,909857024,100434624,750503552,294983424,658676064,027643600,820941984,605847528,419698560,033053008,700157392,284353768,173377888,534200240,364198816,612120092,328301952,511927808,765916000,791204688,955687520,494289936,435348256,445938776,748964608,786203936,005329504,811664240,005235904,660865504,340971072,871030033,686708224,267286528,937673472,767666048,539442304,298792896,390380672,372720800,288230400,015133824,425853568,727404736,189572608,059891456,799414656,960291328,113612416,244620032,545004832,798627312,946809824,551285200,544833952,234031384,610934016,354837728,093055264,807835472,010965696,162396768,932303552,052823692,732816640,839707584,049841792,474600320,992794336,588125712,348645152,598947016,325494912,052194800,194699248,141172088,861231136,603581200,753023456,040378596,097468800,918820352,485205984,910903824,638643296,400297488,155822624,403697496,943586048,549090720,294336736,473898800,380465856,449011168,685336128,269563942,038168576,239393024,562957696,973458112,832738048,489663616,497243648,125980288,334921984,012147232,500452256,817917648,527342784,939825760,098792128,617267688,837879168,814150400,775773792,165143376,485814816,591824688,561589088,764832360,623511808,100080160,296566240,855122352,074772928,909202272,177895488,537422876,288112640,821416320,161867520,514818560,473732800,934477728,101335360,348175056,055250688,418945312,149612576,210908176,127587264,549849312,924159040,780987480,451649280,237824000,125234624,975001888,195767232,378458528,503547712,254463088,443395072,286591040,541436608,861880800,479836544,847018944,880962176,554525969,424632832,600944128,723718144,939867136,343530496,102447360,423660032,102498688,432941056,532155776,879801216,083339712,120469248,348120960,857805056,627426464,029088768,055353344,018714880,134613120,827029760,144271232,316520704,690852544,269748736,907547648,651153408,228088576,395804416,511092608,797881344,495818240,779948032,175160448,010316544,497932032,825706048,415726048,107442112,889617776,669746432,814177696,111243680,121352144,514538176,201625184,894976320,121367832,559719168,674217472,731617856,243881184,275351872,453462752,444249024,352973392,276406272,681023040,059616448,203589216,755607680,163871040,138264960,795041420,666269696,856695040,968040320,289797568,106498304,018414208,766482944,037576960,163313920,066802848,210581536,618699280,898110400,638234080,106440384,721866952,041274496,856897792,566408992,583363056,697223520,164104464,403304224,777345016,260482816,113265248,145095072,050358544,006186304,981862176,073460928,414450404,868483072,022464896,538498304,120805376,416365504,237988128,138046528,150512528,710048000,622539552,907216416,373368848,154506176,989574112,636967488,391317848,284671744,893899776,460700352,512962976,613114560,761463072,178527296,099263024,428680192,832214080,095321280,240288224,282881408,852686272,457263744,175459366,786828800,142502912,554002944,237278464,917246720,045813376,132910848,205309120,118127616,617532160,129750272,563649152,537049600,791844352,640221952,309879424,697511680,833636864,751416768,553640992,094978112,628245088,876532416,753616848,189451264,622135872,545828800,505964128,320717952,662888512,641919616,215155176,817519104,884425088,472105216,433767680,977497280,049989792,123953984,519965648,616946432,955813984,895668832,371680560,016202560,941883040,514595008,095687784,317220608,077707776,045864896,664881696,859485888,089673760,345931328,194959024,835483648,594401088,739508160,918295904,083771776,487197632,585232000,780267036,189414912,393669632,065787136,164059008,282492928,757031168,526655488,750216960,147328000,537648704,069579584,581926304,011365248,138688704,050578816,431849168,985873664,019136000,956960192,471058208,229958976,236602848,664013248,811573520,331145216,971900224,543612608,741343968,377436544,040366016,035149440,834309720,162202112,663868672,069648896,213387264,493090688,501939776,385350272,708991520,645157376,478234432,100312384,910484896,092683648,914066112,259057792,813944432,742197248,959000064,014813056,496663616,404128128,805794112,511393920,542852576,742640128,236958848,943847808,480152000,634774272,825492352,199630080,343462161,684392448,774540288,187437056,017732096,049687040,913434112,074095616,877187072,414193664,431921152,192972288,863458048,912988672,215823360,906795008,309535616,046519296,560357888,873360640,215591808,828457216,718919296,578739456,434788800,710876672,488945920,229635840,104622976,819292672,301387008,956274688,696471200,753969152,990047232,956698624,767802368,160029696,640841984,734804480,084993664,179514368,401547008,745927424,992981376,234452992,346382592,655297024,459830976,903272960,278735360,707682816,656745472,530337792,162754048,504847360,274491136,747104256,906305792,814063872,293868416,644393984,590823424,842058752,913747968,148910080,060902912,900275456,118542976,130709504,730353920,869691904,571679744,963057664,071779520,174352832,951486944,927053440,632602688,695485568,070038384,469481216,940976640,263197888,626695584,263289920,568116832,162415296,684570832,736619008,697940544,914668992,278103648,376080768,717446336,365266048,703640344,804047360,118261504,641732096,237145600,147727488,734355904,483957632,955278304,492067840,479851968,279694272,036902624,406700672,859736128,155624320,768678992,537524736,574381568,548356480,508144704,595361664,807753024,984454784,014146656,136683520,390770560,419688576,679017792,188401408,572954240,031147264,815651468,569578496,014120960,123345408,948904192,749048576,974429312,777620224,117212096,302796800,785054976,119766272,238423168,075894784,856072192,215962880,843505920,318511872,644150784,510240960,566955168,812036928,932414944,030228928,437929232,071840768,080281920,839718592,406735328,040526464,859669568,619708544,327101128,068226048,192608896,951686912,698744576,758039616,201100768,229551552,869691248,701795584,118618144,199506976,235364112,840145344,052297440,565114944,385735672,378791168,757201408,214467904,869376096,233604672,654976608,678859456,078179344,734297088,826256320,560384832,637921056,987870336,984516416,138145152,207502052,723073024,782273536,124333312,082099072,232553472,466232064,854459392,227097856,177174016,266791744,735060032,420847392,751442304,642250688,467839360,777467280,074540800,292105216,265689536,514868000,358282560,599475168,653300160,025309968,921247232,472520512,797515456,697025504,734733696,810961856,859371648,703432536,487481856,347514624,691877376,966082560,404559744,712188736,789792896,457398944,850364416,134146624,165547584,398801184,043731840,951709120,901058688,225528368,330118144,438340608,843833728,985740864,723137920,071549248,910808704,703748576,415727104,916864128,380327296,973509568,683614976,596900736,630078720,478384166,520077312,812687360,311520256,661197824,392231424,681198592,390083072,044190976,098740224,295534848,444491520,444162688,320869888,543096576,823876096,435647168,553824768,146808320,494367744,307879168,830535680,285862656,162650624,339157632,116667392,758773248,459096576,451322880,377856512,485246208,330571776,619593344,442206720,348045056,243344896,642708480,827578240,969969728,226195584,073577760,420483584,948437184,689994432,539851360,467666560,102171456,028185984,792468432,153383424,967058944,926358912,386894400,430878592,893534784,480485504,030883936,594594304,852936064,859709568,721331264,727133440,268454272,217405696,803676648,720716800,213824000,884210432,325693312,106860032,846521088,403214848,440834048,411249152,222949952,128935744,840243872,597857152,649318592,893101440,305637328,819703040,950336512,359628096,016789600,468233664,940455328,970627904,050481712,249043456,724451776,106499136,055441568,610187904,363959616,700918656,620357736,485129216,281701632,065586688,797987328,762008960,422949440,743064704,814888224,782188032,659113024,353922624,169038368,102423424,152668608,951665280,599098032,157979648,080702976,760560512,834796352,523901824,321384512,322573952,248528224,299880448,070675072,504798592,370787264,106193152,198931840,269195008,555726364,448803328,753762304,516976640,404776448,468888576,773287680,264293376,754597248,894410240,049873920,037513216,186436352,302988800,120015360,308415488,447404288,807384064,776774144,581223296,966903872,679505536,272790208,642709888,217814432,477240320,822003840,071439232,709545664,459470592,884127360,721338624,149220048,908627968,797781760,356526080,622006784,140852608,905517120,760461440,982585376,929006592,332853184,764667840,412086752,405849728,817640512,456524160,466256144,107839488,387357184,505990016,903756096,388368256,588523840,184448128,656833760,607778816,910468224,313700224,118308800,439292672,725408128,493056768,857356376,385496064,846945280,534321152,018385152,449134080,841249792,502099968,172350976,469531136,686674560,556696192,300498496,063742720,676667776,046763264,663933984,884857344,996736000,524261248,301037888,691750528,888102080,214663040,669878688,752066048,823083136,501103488,136911552,608109824,613112704,734673664,175466608,256510464,542642176,602698752,547961344,583782144,740052096,645433600,723196992,500193792,069721216,958372992,898824000,377954560,434157440,480942336,519999456,595795456,982915584,773418752,676557440,481737984,575989888,017395456,853862848,339638272,006952704,106125056,540361088,391682048,942466304,549112832,198298385,251279872,978163200,131404800,780035584,740944896,374855680,403911168,963103232,848214016,744768000,893798400,955546112,498280960,949625856,135431168,402078720,307565568,663347200,789044736,835772928,879969792,824732160,126530560,631782656,299908608,594232320,367850496,235840000,996408832,960724480,778310656,817758080,918313472,875264000,797228544,867886080,191902208,924208896,487904768,840755072,245379584,695137024,412046592,910054016,511005696,888600832,921495040,647691712,338329600,905242624,854643712,471933184,256710144,830233856,932033024,005909888,075062784,038045696,859802624,596451584,957753856,238868992,444895232,940039840,085631488,947264512,558288384,925790208,992448000,128988160,273187328,727951360,538970624,744160768,475745280,245623040,718452736,969947136,397848064,502058624,806852608,530469376,004609536,601513728,181294080,552173312,952832000,718521216,479221760,872718848,589416960,441738496,426259968,322993152,636653568,190523584,061834752,316647936,177546240,669971968,348308480,041042432,655103488,125173760,736324096,908726272,168775680,215891456,565922304,058951168,911216128,119341824,864381952,675119616,719565824,687661824,734852096,041902848,808102400,001787264,008833536,338338304,160024576,305699328,901613056,026177536,749109248,925389824,557708800,520852480,593444864,413071360,209221120,668766464,909933056,334722176,321958912,579092480,162772480,097689856,923604992,629277696,234935296,764150272,457857536,203662336,594473600,138583232,307621248,982892096,589286528,277723616,390486528,810851712,051940480,303782976,045183744,550263168,483811072,195303280,119749120,574497536,593632256,991963648,032035712,793886528,598907008,595899552,504306688,499808960,789107904,082246752,797953152,698087744,064924032,846810320,424435200,131104768,205808000,072249920,148056448,423743552,085042816,695403616,695830016,019596928,341289856,796560576,379421440,335520128,195054336,704614168,642138112,230093824,342317056,306277632,491163136,930551296,139185664,291079168,951294464,576725376,662002048,067040704,185062144,684440704,574852864,888090592,157330432,643423232,759924352,173400000,981882752,225019456,532120704,147509984,372774400,558156672,894177920,015067712,897618688,145015936,538948352,607958608,767561216,983854592,903601152,810712576,090144000,484501632,056298752,174846528,910349824,558624384,031890560,543184704,235227392,449014656,991555328,206097504,707127296,678084096,632197888,237356416,315691264,058617216,095574272,633150272,198662656,511840000,633450752,308191360,744441344,420291328,609421312,213727372,418232832,330982400,297607168,242733056,049508864,698092544,064388608,814588160,850490368,435156224,055835392,450840704,652748288,447272192,679689728,054665664,709251584,653165056,247575552,855688960,776396288,524512000,524048896,671064704,708572672,258202112,635902976,502130176,903303168,344168192,332860416,614447872,048197632,564505344,222031360,837139456,054552448,968858432,449464448,889658784,431080960,858372544,406992832,238396896,001482368,100144704,396498304,591484688,292044288,570484736,686136704,629417280,941257088,530505536,152413824,951675360,802113024,609926016,291078272,901245504,354386176,482843520,451800832,795176136,433234944,634102272,304251136,874937472,479594496,559004928,315874304,926226944,257581568,530704576,417822144,162339296,316627072,605007936,214972032,664299376,725006080,668520960,120267712,860707360,421309760,707513824,147533760,812344848,302326272,816060224,624141504,348091104,024598400,547572160,539784832,197346296,681633280,235787520,133547008,732269568,228829824,173386944,605187968,492429152,552549376,607023296,332226240,655014496,696946304,666481984,021369728,010020368,474648576,091253248,224895616,362547136,399351424,599795392,680883584,170518304,760406528,445593472,763751552,578881856,916736768,539572352,474755840,166917348,421041152,911228416,693057024,899704832,203149824,973010688,682167808,566382976,863071744,711179776,592270336,309645056,233421824,241110016,784763392,738319616,307573248,510190592,717804928,426880832\".split(\",\");\n\n        while (scan.hasNextInt())\n        {\n            System.out.println(abc[scan.nextInt()-1]);\n        }\n    }\n}", "generated_code": "\nimport java.awt.Point;\nimport java.io.*;\nimport java.lang.reflect.Array;\nimport java.math.BigInteger;\nimport java.util.*;\nimport static java.lang.Math.*;\nimport java.math.BigDecimal;\n\n/**\n *\n * @author Mojtaba\n */\npublic class Main {\n\n    public static void main(String[] args) throws IOException, Exception {\n        MyScanner in = new MyScanner(System.in);\n        //Scanner in = new Scanner(System.in);\n        //Scanner in = new Scanner(new File(\"input.txt\"));\n        PrintWriter writer = new PrintWriter(new BufferedOutputStream(System.out));\n        //PrintWriter writer = new PrintWriter(new File(\"output.txt\"));\n        StringBuilder sb = new StringBuilder(\"\");\n\n        String str = \"\";\n        while (!(str = in.next()).equals(\"0\")) {\n            long answer = 0L;\n            for (int i = str.length() - 1, j = 1; i >= 0; i--, j++) {\n                answer += (((int) (str.charAt(i) - '0')) * ((1 << j) - 1));\n            }\n            sb.append(answer).append(\"\\r\\n\");\n        }\n\n        writer.println(sb.toString().trim());\n        writer.flush();\n        in.close();\n    }\n}\n\nclass MyScanner {\n\n    BufferedReader reader;\n    StringTokenizer tokenizer;\n\n    public MyScanner(InputStream stream) {\n        this.reader = new BufferedReader(new InputStreamReader(stream));\n    }\n\n    public int nextInt() throws IOException {\n        return Integer.parseInt(next());\n    }\n\n    public int[] nextIntegerArray(int n) throws IOException {\n        int[] a = new int[n];\n        for (int i = 0; i < a.length; i++) {\n            a[i] = nextInt();\n        }\n        return a;\n    }\n\n    public long[] nextLongArray(int n) throws IOException {\n        long[] a = new long[n];\n        for (int i = 0; i < a.length; i++) {\n            a[i] = nextLong();\n        }\n        return a;\n    }\n\n    public int nextInt(int radix) throws IOException {\n        return Integer.parseInt(next(), radix);\n    }\n\n    public long nextLong() throws IOException {\n        return Long.parseLong(next());\n    }\n\n    public long nextLong(int radix) throws IOException {\n        return Long.parseLong(next(), radix);\n    }\n\n    public double nextDouble() throws IOException {\n        return Double.parseDouble(next());\n    }\n\n    public BigInteger nextBigInteger() throws IOException {\n        return new BigInteger(next());\n    }\n\n    public BigInteger nextBigInteger(int radix) throws IOException {\n        return new BigInteger(next(), radix);\n    }\n\n    public String next() throws IOException {\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\n            tokenizer = new StringTokenizer(reader.readLine());\n            return this.next();\n        }\n        return tokenizer.nextToken();\n    }\n\n    public String nextLine() throws IOException {\n        return reader.readLine();\n\n    }\n\n    public void close() throws IOException {\n        this.reader.close();\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1943_18__1_1060_12", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        for (int i = 0; i < n; i++) {\n            int t = s.nextInt();\n            s.nextLine();\n            String first = s.nextLine();\n            String second = s.nextLine();\n            int len = Math.min(first.length(), second.length());\n            int plc=0;\n            for (plc = 0; plc < len; plc++) {\n                if(first.charAt(plc) != second.charAt(plc))\n                    break;\n            }\n            int res = second.length()-plc;\n            res += first.length()-plc;\n            System.out.println(res*t);\n        }\n                \n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\nimport java.util.Stack;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        Stack<Integer> s = new Stack();\n        Stack<Integer> d = new Stack();\n        while (n != 0) {\n            in.nextLine();\n            \n            while (true) {\n                int f = in.nextInt();\n                if (f == 0) {\n                    break;\n                } else {\n                    for (int i = 0; i < n; i++) {\n                        s.push(n - i);\n                    }\n                    int a[] = new int[n];\n                    int b[] = new int[n];\n                    int k = 0;\n                    a[0] = f;\n                    for (int i = 1; i < n; i++) {\n                        a[i] = in.nextInt();\n                    }\n\n                    for (int i = 0; i < a[0]; i++) {\n                        if (!s.isEmpty()) {\n                            d.push(s.pop());\n                        } else {\n                            break;\n                        }\n                    }\n                    boolean z = true;\n                    while (k < n - 1) {\n                        z = false;\n                        if (a[k]==d.peek()) {\n                            b[k++] = d.pop();\n                        }\n                        \n                       // k++;\n                        if (!d.isEmpty() && d.peek() == a[k]) {\n                            b[k++] = d.pop();\n                            // k++;\n                            z = true;\n                        }\n                        if (k == n) {\n                            break;\n                        }\n                        int x = k;\n                        while (s.contains(a[k])) {\n                            d.push(s.pop());\n                            z = true;\n                        }\n                        if (z == false) {\n                            System.out.println(\"No\");\n                            break;\n                        }\n                    }\n                    if(z==true)\n                    System.out.println(\"Yes\");\n                    s.removeAllElements();\n                    d.removeAllElements();\n                }\n\n            }\n            if ((n = in.nextInt()) == 0) {\n                System.out.println(\"\");\n                break;\n            } else {\n                System.out.println(\"\");\n            }\n        }\n\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1079_37__1_2732_13", "golden_code": "import java.util.Scanner;\n// sharecode - #1079 - perfection\n\npublic class Main\n{\n\n\tpublic static void main(String args[])\n\t{\n\t\tScanner input = new Scanner(System.in);\n\t\tSystem.out.println(\"PERFECTION OUTPUT\");\n\t\tint num = input.nextInt();\n\t\twhile (true)\n\t\t{\n\n\t\t\tif (num == 0)\n\t\t\t\tbreak;\n\t\t\tint factorSums = 0;\n\t\t\tfor (int i = 1; i <= num / 2; i++)\n\t\t\t\tif (num % i == 0)\n\t\t\t\t\tfactorSums += i;\n\t\t\tString res = \"\";\n\t\t\tif (factorSums == num)\n\t\t\t\tres = \"PERFECT\";\n\t\t\telse if (factorSums < num)\n\t\t\t\tres = \"DEFICIENT\";\n\t\t\telse\n\t\t\t\tres = \"ABUNDANT\";\n\t\t\tSystem.out.printf(\"%5s  %s\", num + \"\", res);\n\t\t\tnum = input.nextInt();\n\t\t\tif (num != 0)\n\t\t\t\tSystem.out.println();\n\n\t\t} // while\n\t\tSystem.out.println(\"\\nEND OF OUTPUT\");\n\n\t}// main Method\n\n}// Class Main", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\tstatic Scanner stdin = new java.util.Scanner(System.in);\n\n\tpublic static void main(String[] args) {\n\t\tint commandNumber = Integer.parseInt(stdin.nextLine());\n\n\t\tfor (long i = 0; i < commandNumber; i++) {\n\t\t\tString coordinates = stdin.nextLine();\n\t\t\tString[] result = coordinates.split(\" \");\n\t\t\tint x = Integer.parseInt(result[0]);\n\t\t\tint y = Integer.parseInt(result[1]);\n\t\t\tif (x == y) {\n\t\t\t\tif (x == 0) {\n\t\t\t\t\tSystem.out.println(0);\n\t\t\t\t} else if (x == 1) {\n\t\t\t\t\tSystem.out.println(1);\n\t\t\t\t} else if ((x & 1) == 0) {\n\t\t\t\t\tSystem.out.println(x * 2);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println((x * 2) - 1);\n\t\t\t\t}\n\t\t\t} else if (x == y + 2) {\n\t\t\t\tif ((x & 1) == 0) {\n\t\t\t\t\tSystem.out.println(x + y);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(x + y - 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"No Number\");\n\t\t\t}\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_290__1_1001_231", "golden_code": "import java.util.Scanner;public class Main {public static void main(String[] args){Scanner c=new Scanner(System.in);while(c.hasNext())System.out.println(c.nextInt()+c.nextInt());}}", "generated_code": "import java.util.Scanner;\npublic class Main {\n\n    public static void main(String[] args) {\n      Scanner in=new Scanner(System.in);\n      int x , y , z;\n      while(in.hasNext())\n      {\n      x=in.nextInt();\n      y=in.nextInt();\n      z=x+y;\n        System.out.println(z);\n      }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1656_21__1_1656_51", "golden_code": "\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while(true){\n            String[] arr = in.nextLine().split(\"\\\\s\");\n            int[] array = new int[arr.length];\n            int[] sortedArray = new int[arr.length];\n            for(int i=0 ; i<arr.length ; i++)\n                array[i]=Integer.parseInt(arr[i]);\n            if(array[0]==-1)\n                break;\n            System.arraycopy(array, 0, sortedArray, 0, arr.length);\n            Arrays.sort(sortedArray);\n            int counter=0;\n            for(int i=0 ; i<array.length-1 ; i++){\n                if(Arrays.binarySearch(sortedArray,array[i]*2)>=0){\n                    counter++;\n                }\n            }\n            System.out.println(counter);\n        }\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    static Scanner in = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int a[] = new int[99];\n        int p = 0, t = 0;\n        a[0] = 1;\n        while (a[0] != -1) {\n            p = 0;\n            for (int i = 0; i < 99; i++) {\n                a[i] = in.nextInt();\n                if (a[i] == 0) {\n                    break;\n                }\n                if (a[0] == -1) {\n                    t = 1;\n                    break;\n                }\n            }\n            for (int i = 0; i < 99; i++) {\n                if(a[i]==0)break;\n                for (int j = 0; j < 99; j++) {\n                    if (a[j] == 0) {\n                        break;\n                    }\n                    if (a[j] == a[i] * 2) {\n                        p++;\n                    }\n\n                }\n            }\n            if (t == 1) {\n                break;\n            }\n            System.out.println(p);\n        }\n\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1659_8__1_2713_55", "golden_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String args[]){\n\t\tfloat a,b,c;\n\t\tString s;\n\t\tScanner input = new Scanner(System.in);\n\t\ta = input.nextFloat();\n\t\tif(a != 999){\n\t\t\tb = input.nextFloat();\n\t\t\twhile(b != 999){\n\t\t\t\tc=b-a;\n\t\t\t\tSystem.out.printf(\"%.2f\\n\", c);\n\t\t\t\ta=b;\n\t\t\t\tb = input.nextFloat();\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"End of Output\");\n\t}\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    static Scanner in = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int n;\n        while (true) {\n            n = in.nextInt();\n        int counter = 1;\n            if (n == 0) {\n                break;\n            \n            }\n            while(true){\n            if (n == 1) {\n                System.out.println(counter);\n                break;\n            }\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = (3 * n) + 1;\n            }\n            counter++;\n        }\n    }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_101078_12__1_101078_15", "golden_code": "\n\nimport java.util.Scanner;\nimport java.util.*;\n\n\npublic class Main {\n    public static void main(String [] args){\n        int count,n,pr[],sum;\n        Scanner s = new Scanner(System.in);\n        n=s.nextInt();\n        for(int i=0;i<n;i++){\n         count=s.nextInt();\n         pr=new int[count];\n         sum=0;\n         for(int j=0 ; j<count ; j++){\n\n         pr[j]=s.nextInt();\n\n\n        }\n         Arrays.sort(pr);\n         for(int q=pr.length-3;q>=0;q-=3){\n             sum+=pr[q];\n         }\n            System.out.println(sum);\n\n    }\n\n}\n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tfor (; n > 0; --n) {\n\t\t\tint m = sc.nextInt();\n\t\t\tArrayList<Integer> items = new ArrayList<Integer>();\n\t\t\tfor (; m > 0; --m)\n\t\t\t\titems.add(sc.nextInt());\n\t\t\tCollections.sort(items);\n\t\t\tint sum = 0;\n\t\t\tfor (int i = items.size() - 3; i >= 0; i -= 3) {\n\t\t\t\tsum += items.get(i);\n\t\t\t}\n\t\t\tSystem.out.println(sum);\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_2554_74__1_2858_8", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\nimport java.util.StringTokenizer;\n\nclass Object {\n\t\n\tString nameOfObject = \"\";\n\tboolean apply = false ;\n\tObject father ;\n\tArrayList<Object> ChildAddress = new ArrayList<>();\n\t// type 1 = OR, type 2 = XOR, ,type 3 = Mandatory or Optional\n\tint typeOfObject = 0;\n\t\n\tObject(String nameOfCh){\n\t\tnameOfObject = nameOfCh;\n\t}\n\t\n\tvoid setType(int type) {\n\t\ttypeOfObject = type; \n\t}\n\t\n\tvoid setApply(boolean a) {\n\t\t//False = Mandatory , True = Optional\n\t\tapply = a;\n\t}\n\t\n\tvoid setFather(Object nfather) {\n\t\tfather = nfather;\n\t}\n\t\n\tvoid addChild(Object Child) {\n\t\tChildAddress.add(Child);\n\t}\n}\n\n\npublic class Main {\n\t\n\tpublic static ArrayList<Object> objectsList = new ArrayList<>();\n\t\t\n\tpublic static String findName(String input) {\n\t\tString left = \"\";\n\t\tfor(int i = 0 ; i < input.length() ; i++) {\n\t\t\tif(input.charAt(i) == '=') {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tleft +=input.charAt(i);\n\t\t}\n\t\treturn left;\n\t}\n\t\n\tpublic static void buildChildren(String right, Object father) {\n\t\t\n\t\tString limiter = \"\" ;\n\t\t\n\t\t///////////////////////////Find Type of Father\n\t\tif(right.contains(\"+\")) {\n\t\t\tlimiter = \"+\" ;\n\t\t\tfather.setType(3);\n\t\t} else if (right.contains(\"|\")) {\n\t\t\tlimiter = \"|\" ;\n\t\t\tfather.setType(1);\n\t\t} else if (right.contains(\"^\")) {\n\t\t\tlimiter = \"^\" ;\n\t\t\tfather.setType(2);\n\t\t} else if(!right.contains(\"+\") && !right.contains(\"|\") && !right.contains(\"^\")) {\n\t\t\tfather.setType(3);\n\t\t\tlimiter = \"+\" ;\n\t\t}\n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////\n\t\tStringTokenizer stringTokenizer = new StringTokenizer(right, limiter , false);\n\t\t/////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\twhile(stringTokenizer.hasMoreTokens()) {\n\t\t\t\n\t\t\tString token = stringTokenizer.nextToken();\n\t\t\t\n\t\t\tboolean setApply = false;\n\t\t\tif(token.startsWith(\"?\")) {\n\t\t\t\tsetApply = true;\n\t\t\t\ttoken = token.substring(1 , token.length());\n\t\t\t}\n\t\t\t//////Check ObjectsList( Goni)\n\t\t\tint index = 0 ;\n\t\t\tboolean find = false ;\n\t\t\tfor(int i = 0 ; i < objectsList.size() ; i++) {\n\t\t\t\tif(objectsList.get(i).nameOfObject.equals(token)) {\n\t\t\t\t\tfind = true ;\n\t\t\t\t\tindex = i ;\n\t\t\t\t\tbreak ;\n\t\t\t\t}\n\t\t\t}\n\t\t\t///////////////////////////////\n\t\t\tif(find) {\n\t\t\t\tObject object = objectsList.get(index);\n\t\t\t\tfather.addChild(object);\n\t\t\t\tobject.setFather(father);\n\t\t\t\tobjectsList.get(index).setApply(setApply);\n\t\t\t} else {\n\t\t\t\tObject object = new Object(token); \n\t\t\t\tobjectsList.add(object);\n\t\t\t\tfather.addChild(object);\n\t\t\t\tobject.setFather(father);\n\t\t\t\tobject.setApply(setApply);\n\t\t\t}\n\t\t}\n\t}\t\n\t\n\tpublic static boolean checkTestCase(ArrayList<String> testCase) {\n\t\t//Find Name of CoffeMachine\n\t\tString coffeeMachine = \"\" ;\n\t\tfor(int i = 0 ; i < objectsList.size() ; i++) {\n\t\t\tif(objectsList.get(i).father == null) {\n\t\t\t\tcoffeeMachine = objectsList.get(i).nameOfObject;\n\t\t\t\tbreak ;\n\t\t\t}\n\t\t}\n\t\t////////////////////////////\n\t\tif(testCase.contains(coffeeMachine)) {\n\t\t\t\n\t\t\tfor(int i = 0 ; i < testCase.size() ; i++) {\n\t\t\t\t\n\t\t\t\tboolean find = false;\n\t\t\t\t\n\t\t\t\tfor(int j = 0 ; j < objectsList.size() ; j++) {\n\t\t\t\t\t\n\t\t\t\t\tif(testCase.get(i).equals(objectsList.get(j).nameOfObject)) {\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tfind = true ;\n\t\t\t\t\t\tObject object = objectsList.get(j);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Check father\n\t\t\t\t\t\tif(!testCase.get(i).equals(coffeeMachine)) {\n\t\t\t\t\t\t\tif(!testCase.contains(object.father.nameOfObject)) {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Check children + Type\n\t\t\t\t\t\tif(object.typeOfObject == 1) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tint counter = 0 ;\n\t\t\t\t\t\t\tfor(int k = 0 ; k < object.ChildAddress.size() ; k++) {\n\t\t\t\t\t\t\t\tif(testCase.contains(object.ChildAddress.get(k).nameOfObject)) {\n\t\t\t\t\t\t\t\t\tcounter++ ;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(counter == 0)\n\t\t\t\t\t\t\t\treturn false ;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t} else if(object.typeOfObject == 2) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tint counter = 0 ;\n\t\t\t\t\t\t\tfor(int k = 0 ; k < object.ChildAddress.size() ; k++) {\n\t\t\t\t\t\t\t\tif(testCase.contains(object.ChildAddress.get(k).nameOfObject)) {\n\t\t\t\t\t\t\t\t\tcounter++ ;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(counter != 1)\n\t\t\t\t\t\t\t\treturn false ;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t} else if(object.typeOfObject == 3) {\n\t\t\t\t\t\t\tfor(int k = 0 ; k < object.ChildAddress.size() ; k++) {\n\t\t\t\t\t\t\t\tif(!object.ChildAddress.get(k).apply) { // age mandatory bood\n\t\t\t\t\t\t\t\t\tif(!testCase.contains(object.ChildAddress.get(k).nameOfObject)) {\n\t\t\t\t\t\t\t\t\t\treturn false ;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(!find) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\treturn false ;\n\t\t}\n\t\t\n\t\treturn true ;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner scan = new Scanner(System.in);\n\t\t\n\t\tString input = \"\" ;\n\t\tString nameOfObject = \"\" ;\n\t\tArrayList<String> results = new ArrayList<>();\n\n\t\tinput = scan.nextLine();\n\t\tinput = input.replaceAll(\"\\\\s\",\"\");\n\t\t\n\t\twhile(!input.equals(\"###\")) {\n\t\t\t//AI\n\t\t\twhile(!input.equals(\"#\")) {\n\t\t\t\tnameOfObject = findName(input);\n\t\t\t\t\n\t\t\t\tboolean find = false ;\n\t\t\t\tint index = 0 ;\n\t\t\t\tfor(int i = 0 ; i < objectsList.size(); i++) {\n\t\t\t\t\tif(objectsList.get(i).nameOfObject.equals(nameOfObject)) {\n\t\t\t\t\t\tfind = true ;\n\t\t\t\t\t\tindex = i ;\n\t\t\t\t\t\tbreak ;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif(input.contains(\"=\")) {\n\t\t\t\t\tString right = input.split(\"=\")[1];\n\t\t\t\t\t\n\t\t\t\t\tif(find) {\n\t\t\t\t\t\tObject father = objectsList.get(index);\n\t\t\t\t\t\tbuildChildren(right, father);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tObject father = new Object(nameOfObject);\n\t\t\t\t\t\tobjectsList.add(father);\n\t\t\t\t\t\tbuildChildren(right, father);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\tObject root = new Object(nameOfObject);\n\t\t\t\t\tobjectsList.add(root);\n\t\t\t\t}\n\n\t\t\t\tinput = scan.nextLine();\n\t\t\t\tinput = input.replaceAll(\"\\\\s\",\"\");\n\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t//ArrayList<Object> Gooni = objectsList;\n\t\t\t\n\t\t\t//TestCases\n\t\t\tinput = scan.nextLine();\n\t\t\tinput = input.replaceAll(\"\\\\s\",\"\");\n\t\t\twhile(!input.equals(\"##\")) {\n\t\t\t\t\n\t\t\t\t//TestCases\n\t\t\t\tArrayList<String> testCase = new ArrayList<>();\n\t\t\t\t\n\t\t\t\t//Separate ({})\n\t\t\t\tinput = input.substring(1,input.length()-1);\n\t\t\t\t\n\t\t\t\t//Separate (,)\n\t\t\t\tStringTokenizer stringTokenizer = new StringTokenizer(input, \",\", false);\n\t\t\t\twhile(stringTokenizer.hasMoreTokens()) {\n\t\t\t\t\t\ttestCase.add(stringTokenizer.nextToken());\n\t\t\t\t}\n\n\t\t\t\t//CheckValidity\n\t\t\t\tboolean result = false;\n\t\t\t\tresult = checkTestCase(testCase);\n\t\t\t\t\n\t\t\t\t//result = checkTestCase(coffeeMachine, testCase);\n\t\t\t\tif(result) {\n\t\t\t\t\tresults.add(\"Valid\");\n\t\t\t\t} else {\n\t\t\t\t\tresults.add(\"Invalid\");\n\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\tinput = scan.nextLine();\n\t\t\t\tinput = input.replaceAll(\"\\\\s\",\"\");\n\t\t\t}\n\t\t\t\n\t\t\tobjectsList = new ArrayList<>();\n\t\t\t\n\t\t\tresults.add(\"+++\");\n\t\t\t\n\t\t\tinput = scan.nextLine();\n\t\t\tinput = input.replaceAll(\"\\\\s\",\"\");\n\t\t\t\n\t\t}\t\n\t\t\n\t\tfor(int i = 0 ; i < results.size() ; i++) {\n\t\t\tSystem.out.println(results.get(i));\n\t\t}\n\n\t\tscan.close();\n\t\treturn;\n\t}\t\n}", "generated_code": "import java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n/**\n * Created by HP on 23/11/2017.\n */\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in=new Scanner(System.in);\n        int num=in.nextInt();\n        for (int i = 0; i <num ; i++) {\n            int m=in.nextInt();\n            int n=in.nextInt();\n            int[] nn=new int[n];\n            int[] mm=new int[m];\n            int indexm=0;\n            int indexn=0;\n            int sum=0;\n            for (int j = 0; j <m ; j++) {\n               mm[j]=in.nextInt();\n            }\n            for (int j = 0; j <n ; j++) {\n                nn[j]=in.nextInt();\n            }\n            Arrays.sort(mm);\n            Arrays.sort(nn);\n            if(n>=m){\n               while (true){\n                   if(indexn>=n||indexm>=m){\n                       break;\n                   }\n                   if(mm[indexm]==nn[indexn]){\n                       indexm++;\n                       indexn++;\n                       sum++;\n                   }else{\n                       if(nn[indexn]<mm[indexm]){\n                           indexn++;\n                       }else{\n                           indexm++;\n                       }\n                   }\n               }\n            }else{\n              while (true){\n                  if(indexm>=m||indexn>=n){\n                      break;\n                  }\n                  if(mm[indexm]==nn[indexn]){\n                      indexm++;\n                      indexn++;\n                      sum++;\n                  }else{\n                      if(nn[indexn]<mm[indexm]){\n                          indexn++;\n                      }else{\n                          indexm++;\n                      }\n                  }\n              }\n            }\n            System.out.println(sum);\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1454_11__1_2501_5", "golden_code": "\nimport java.util.Scanner;\nimport java.util.TreeMap;\n\n\npublic class Main {\n\n    static String[] alpha = {\".-\", \"-...\", \"-.-.\", \"-..\", \".\", \"..-.\"\n            , \"--.\", \"....\", \"..\", \".---\", \"-.-\", \".-..\"\n            , \"--\", \"-.\", \"---\", \".--.\", \"--.-\", \".-.\", \"...\"\n            , \"-\", \"..-\", \"...-\", \".--\", \"-..-\", \"-.--\", \"--..\"\n            ,\"..--\",\"---.\",\".-.-\",\"----\"};\n\n    static TreeMap<Character,String> map = new TreeMap();\n    static TreeMap<String,Character> oldmap = new TreeMap();\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        for (int i = 0; i < alpha.length-4; i++) {\n            map.put((char)(i+'A'), alpha[i]);\n            oldmap.put(alpha[i],(char)(i+'A'));\n        }\n        map.put('_',alpha[26]);\n        map.put('.',alpha[27]);\n        map.put(',',alpha[28]);\n        map.put('?',alpha[29]);\n        oldmap.put(alpha[26],'_');\n        oldmap.put(alpha[27],'.');\n        oldmap.put(alpha[28],',');\n        oldmap.put(alpha[29],'?');\n        int n = s.nextInt();\n        for (int i = 1; i <= n; i++) {\n            String str = s.next();\n            String num=\"\";\n            String text=\"\";\n            for (int j = 0; j < str.length(); j++) {\n                String tmp = map.get(str.charAt(j));\n                text += tmp;\n                num += tmp.length();\n            }\n            num = new StringBuilder(num).reverse().toString();\n            String res=\"\";\n            for (int j = 0; j < num.length(); j++) {\n                String tmp = text.substring(0,num.charAt(j)-'0');\n                text = text.substring(num.charAt(j)-'0');\n                res += oldmap.get(tmp);\n            }\n            System.out.println(i + \": \"+res);\n        }\n    }\n\n}", "generated_code": "import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\n//﻿package i2012C;\n\npublic class Main\n{\n    //﻿package i2012C;\n\nstatic class Node\n{\n\tpublic int x,y;\n\tpublic int[] Ne; //neighbours indexes\n\tpublic int n; // number of neighbours\n\n\tpublic Node(int x, int y)\n\t{\n\t\tthis.x = x;\n\t\tthis.y = 100 - y;\n\t\tNe = new int[4];\n\t\tn = 0;\n\t}\n\n\tpublic final void InsertNeigh(int neighInd)\n\t{\n\t\tfor (int i = 0; i < n; i++)\n\t\t{\n\t\t\tif (Ne[i] == neighInd)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (n == 4)\n\t\t{\n\t\t\tthrow new RuntimeException();\n\t\t}\n\n\t\tNe[n] = neighInd;\n\t\tn++;\n\t}\n}\n     static class Cut\n{\n\tpublic char dir;\n\tpublic int len;\n\n\tpublic Cut(char dir, int len)\n\t{\n\t\tthis.dir = dir;\n\t\tthis.len = len;\n\t}\n}\n\tpublic static void main(String[] args) throws FileNotFoundException\n\t{\n\t\tMain2 c = new Main2();\n\t\tc.Start();\n                \n                \n\t}\n        static class Main2{\n            \n\n\n\n//public class Main{\n\tprivate Node[] graph;\n\tprivate int ng;\n\n\tprivate int[] color; // 0 for white (not visited) - 1 for gray (discovered) - 2 for black (explored)\n\tprivate int[] parent;\n\tprivate java.util.ArrayList backedge;\n\tprivate boolean[][] cakeCut;\n\n\tpublic final void Start() throws FileNotFoundException\n\t{\n\t\tScanner fs1 = new Scanner(System.in);\n\t\t//StreamReader sr = new StreamReader(fs1);\n\t\t//FileStream fs2 = new FileStream(\"c.out\", FileMode.Create);\n\t\t//StreamWriter sw = new StreamWriter(fs2);\n\n\t\tString line = fs1.nextLine();\n\n\t\twhile (!line.equals(\"0 0 0\"))\n\t\t{\n\t\t\t//------------ read params ---------------\n\t\t\tString[] split = line.split(\"[ ]\", -1);\n\t\t\tint kx = Integer.parseInt(split[0]);\n\t\t\tint ky = Integer.parseInt(split[1]);\n\t\t\tint n = Integer.parseInt(split[2]);\n\t\t\tCut[] cuts = new Cut[n];\n\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t{\n\t\t\t\tline = fs1.nextLine();\n\t\t\t\tsplit = line.split(\"[ ]\", -1);\n\t\t\t\tcuts[i] = new Cut((char)split[0].charAt(0), Integer.parseInt(split[1]));\n\t\t\t}\n\n\t\t\t//------------ make graph ---------------\n\t\t\tMakeGraph(cuts, kx, ky);\n\n\t\t\t//------------ DFS & cycle detection ---------------\n\t\t\tDFS();\n\n\t\t\t//------------ sign cake --------------\n\t\t\tCakeCut();\n\n\t\t\t//------------ Area --------------\n\t\t\tint area = CalcArea();\n\n\t\t\t//------------ write answer ---------------\n\t\t\t                 System.out.println(area);\n\n\t\t\t// read next line\n\t\t\tline = fs1.nextLine();\n\t\t}\n\t\t//sr.Close();\n\t\t//sw.Close();\n\t\t//fs1.Close();\n\t\t//fs2.Close();\n\t}\n\n\tprivate int CalcArea()\n\t{\n\t\tboolean[][] cake = new boolean[100][100];\n\n\t\tfor (int r = 0;r < 100;r++)\n\t\t{\n\t\t\tfor (int c = 0; c < 100; c++)\n\t\t\t{\n\t\t\t\tcake[r][c] = IsInCycle(r, c);\n\t\t\t}\n\t\t}\n\n\t\tint area = 0;\n\t\tfor (int r = 0; r < 100; r++)\n\t\t{\n\t\t\tfor (int c = 0; c < 100; c++)\n\t\t\t{\n\t\t\t\tif (cake[r][c])\n\t\t\t\t{\n\t\t\t\t\tarea++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn area;\n\t}\n\n\tprivate void CakeCut()\n\t{\n\t\tcakeCut = new boolean[101][101];\n\n\t\tfor (int i = 0; i < backedge.size(); i++)\n\t\t{\n\t\t\tInteger[] back = (Integer[])backedge.get(i);\n\t\t\tfor (int j = 0; j < back.length; j++)\n\t\t\t{\n\t\t\t\tNode v = graph[back[j]];\n\t\t\t\tcakeCut[v.y][v.x] = true;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate boolean IsInCycle(int row, int col)\n\t{\n\t\tint upleftr = row, upleftc = col;\n\t\tint uprightr = row, uprightc = col + 1;\n\t\tint downleftr = row + 1, downleftc = col;\n\t\tint downrightr = row + 1, downrightc = col + 1;\n\n\t\t// upleft corner go up\n\t\tint r = upleftr;\n\t\tint c = upleftc;\n\t\tboolean isBound = cakeCut[r][c];\n\t\twhile (r >= 0) // go up\n\t\t{\n\t\t\tif (cakeCut[r][c])\n\t\t\t{\n\t\t\t\tisBound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tr--;\n\t\t}\n\t\tif (!isBound)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t// upleft corner go left\n\t\tr = upleftr;\n\t\tc = upleftc;\n\t\tisBound = cakeCut[r][c];\n\t\twhile (c >= 0) // go left\n\t\t{\n\t\t\tif (cakeCut[r][c])\n\t\t\t{\n\t\t\t\tisBound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tc--;\n\t\t}\n\t\tif (!isBound)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t// upright corner go up\n\t\tr = uprightr;\n\t\tc = uprightc;\n\t\tisBound = cakeCut[r][c];\n\t\twhile (r >= 0) // go up\n\t\t{\n\t\t\tif (cakeCut[r][c])\n\t\t\t{\n\t\t\t\tisBound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tr--;\n\t\t}\n\t\tif (!isBound)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t// upright corner go right\n\t\tr = uprightr;\n\t\tc = uprightc;\n\t\tisBound = cakeCut[r][c];\n\t\twhile (c < 101) // go right\n\t\t{\n\t\t\tif (cakeCut[r][c])\n\t\t\t{\n\t\t\t\tisBound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tc++;\n\t\t}\n\t\tif (!isBound)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t// downleft corner go down\n\t\tr = downleftr;\n\t   c = downleftc;\n\t\tisBound = cakeCut[r][c];\n\t\twhile (r < 101) // go down\n\t\t{\n\t\t\tif (cakeCut[r][c])\n\t\t\t{\n\t\t\t\tisBound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tr++;\n\t\t}\n\t\tif (!isBound)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t// downleft corner go left\n\t\tr = downleftr;\n\t\tc = downleftc;\n\t\tisBound = cakeCut[r][c];\n\t\twhile (c >= 0) // go left\n\t\t{\n\t\t\tif (cakeCut[r][c])\n\t\t\t{\n\t\t\t\tisBound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tc--;\n\t\t}\n\t\tif (!isBound)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t// downright corner go down\n\t\tr = downrightr;\n\t\tc = downrightc;\n\t\tisBound = cakeCut[r][c];\n\t\twhile (r < 101) // go down\n\t\t{\n\t\t\tif (cakeCut[r][c])\n\t\t\t{\n\t\t\t\tisBound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tr++;\n\t\t}\n\t\tif (!isBound)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t// downright corner go right\n\t\tr = downrightr;\n\t\tc = downrightc;\n\t\tisBound = cakeCut[r][c];\n\t\twhile (c < 101) // go right\n\t\t{\n\t\t\tif (cakeCut[r][c])\n\t\t\t{\n\t\t\t\tisBound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tc++;\n\t\t}\n\t\tif (!isBound)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate void DFS()\n\t{\n\t\tcolor = new int[ng];\n\t\tparent = new int[ng];\n\t\tfor (int i = 0; i < ng; i++)\n\t\t{\n\t\t\tparent[i] = -1;\n\t\t}\n\t\tbackedge = new java.util.ArrayList();\n\n\t\tDFSVisit(0);\n\t}\n\n\tprivate void DFSVisit(int u)\n\t{\n\t\tcolor[u] = 1; // gray\n\n\t\tfor (int i = 0; i < graph[u].n; i++)\n\t\t{\n\t\t\tint v = graph[u].Ne[i];\n\n\t\t\tif (color[v] == 0) // white\n\t\t\t{\n\t\t\t\tparent[v] = u;\n\t\t\t\tDFSVisit(v);\n\t\t\t}\n\t\t\telse if (color[v] == 1) // gray // back edge\n\t\t\t{\n\t\t\t\tjava.util.ArrayList list = new java.util.ArrayList();\n\t\t\t\tlist.add(u);\n\t\t\t\tint w = u;\n\t\t\t\twhile (parent[w] != v)\n\t\t\t\t{\n\t\t\t\t\tw = parent[w];\n\t\t\t\t\tlist.add(w);\n\t\t\t\t}\n\t\t\t\tlist.add(v);\n\n\t\t\t\tif (list.size() > 2) // if count <= 2 u and v are neighbours\n\t\t\t\t{\n\t\t\t\t\tbackedge.add((Integer[])(list.toArray(new Integer[0])));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcolor[u] = 2; // black\n\t}\n\n\tprivate void MakeGraph(Cut[] cuts, int kx, int ky)\n\t{\n\t\tgraph = new Node[101 * 101];\n\t\tng = 0;\n\n\t\t// insert knife position as first node\n\t\tint ind1 = AddNode(kx, ky);\n\t\tint ind2;\n\n\t\t// insert rest of the graph nodes\n\t\tfor (int c = 0; c < cuts.length; c++)\n\t\t{\n\t\t\tchar dir = cuts[c].dir;\n\t\t\tfor (int m = 0; m < cuts[c].len; m++)\n\t\t\t{\n\t\t\t\tswitch (dir)\n\t\t\t\t{\n\t\t\t\t\tcase 'U':\n\t\t\t\t\t\tky++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'D':\n\t\t\t\t\t\tky--;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'L':\n\t\t\t\t\t\tkx--;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'R':\n\t\t\t\t\t\tkx++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tind2 = AddNode(kx, ky);\n\t\t\t\tgraph[ind1].InsertNeigh(ind2);\n\t\t\t\tgraph[ind2].InsertNeigh(ind1);\n\t\t\t\tind1 = ind2;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate int AddNode(int x, int y)\n\t{\n\t\tfor (int i = 0; i < ng; i++)\n\t\t{\n\t\t\tif (graph[i].x == x && graph[i].y == 100 - y)\n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\tgraph[ng++] = new Node(x, y);\n\t\treturn ng - 1;\n\t}\n}\n        }\n", "score": 0.0}
{"id": "SHARE_1_1001_296__1_1001_155", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n                System.out.println(cin.nextInt()+cin.nextInt());\n    }\n    \n}\n", "generated_code": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner reader=new Scanner(System.in);\n        while(reader.hasNext()){\n            int a=reader.nextInt();\n            int b=reader.nextInt();\n            System.out.println(a+b);\n        }\n    }\n}\n\n", "score": 1.0}
{"id": "SHARE_1_1001_248__1_1001_380", "golden_code": "import java.util.Scanner;\npublic class Main {\nstatic Scanner in=new Scanner(System.in);\n    public static void main(String[] args) {\nint a,b;\nwhile(in.hasNext()){\na=in.nextInt(); \nb=in.nextInt();\n        System.out.println(a+b);\n}  }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tint m, n;\n\tpublic static void main(String[] args) {\n\t\tMain p = new Main();\n\t\tp.run();\n\t}\n\tpublic void run(){\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext()){\n\t\t\tn = in.nextInt();\n\t\t\tm = in.nextInt();\n\t\t\tSystem.out.println(n+m);\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_356__1_1001_175", "golden_code": "import java.util.Scanner;\n\n/**\n * Created by utabrayan on 25/11/2015.\n */\npublic class Main {\n    public static void main(String[]arg){\n        Scanner s=new Scanner(System.in);\n        while (s.hasNextLong()){\n            String[]st=s.nextLine().split(\" \");\n            long n1=Long.parseLong(st[0]);\n            long n2=Long.parseLong(st[1]);\n            System.out.println((n1+n2));\n        }\n\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1006_21__1_1006_102", "golden_code": "import java.util.*;\n\npublic class Main {\n    public static void main(String []argv){ \n      int x;\n      Scanner in = new Scanner(System.in);\n     \n      \n\tfloat a = (float) 1.11;\n        a=in.nextFloat();\n\twhile( a!=0.00)\n\t{\n\t\tfloat sum=0;\n\t\tint n=2;\n\t\twhile(true)\n\t\t{\n\t\t\tsum+=(float)1/n;\n\t\t\tif(sum>=a)\n\t\t\t\tbreak;\n\t\t\tn++;\n\t\t}\t\t\n                n--;\n\t\tSystem.out.println(n+\" card(s)\");\n                a=in.nextFloat();\n\t}\n      \n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner c = new Scanner(System.in);\n        while (c.hasNext()) {\n            float s = 0;\n            int n = 2;\n            float f = c.nextFloat();\n            if (f == 0.00) break;\n            while (s < f) {\n                s += (1.00 / n++);\n            }\n            System.out.println(n - 2 + \" card(s)\");\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1006_128__1_1006_33", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main{\n\t\n\t\npublic static void main(String[] args){\n\n\tScanner input = new Scanner(System.in);\n\t\t\n\tint i;\n\tfloat sum, n;\n\t\twhile (true) {\n\t\t\tfloat in = input.nextFloat();\n\t\t\tif(in == 0.00f)\n\t\t\t\tbreak;\n\t\t\ti = 0;\n\t\t\tsum = 0.0f;\n\t\t\tn = 2;\n\t\t\twhile(true) {\n\t\t\t\ti++;\n\t\t\t\tsum += (1/n);\n\t\t\t\tn++;\n\t\t\t\t\n\t\t\t\tif(sum > in) {\n\t\t\t\t\tSystem.out.println(i + \" card(s)\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t}\n}\n\n\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n       \tfloat c,sum;\n        Scanner in = new Scanner(System.in);\n\tc= in.nextFloat();\n\twhile(c != 0.0)\n\t{\n\t\tsum = 0;\n\t\tfor(int i=1;;i++)\n\t\t{\n\t\t\tsum += 1/(float)(i+1);\n\t\t\tif(sum>=c)\n\t\t\t{\n                            System.out.println(i +\" card(s)\");\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tc= in.nextFloat();\n\t}\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_475__1_1001_213", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        while(input.hasNextLine()){\n        \tString[] S=input.nextLine().split(\" \");\n        \tint a=Integer.parseInt(S[0]);\n        \tint b=Integer.parseInt(S[1]);\n        \tSystem.out.println(a+b);\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2686_10__1_106020_7", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        double n, m;\n        n = s.nextDouble();\n        m = s.nextDouble();\n        ArrayList<distance> arr = new ArrayList<distance>();\n        while (n != -1 && m != -1) {\n            if(n == 0 && m == 0){\n                computeRes(arr);\n                arr = new ArrayList<distance>();\n            }else{\n                arr.add(new distance(n, m));\n            }\n            n = s.nextDouble();\n            m = s.nextDouble();\n        }\n    }\n    \n    static void computeRes(ArrayList<distance> arr){\n        int size = arr.size();\n        double fuel=0;\n        double kilometer=0;\n        for (int i = 0; i < size-1; i++) {\n            if(arr.get(i).fuel > arr.get(i+1).fuel){\n                fuel += arr.get(i).fuel - arr.get(i+1).fuel;\n                kilometer += arr.get(i+1).kilometer-arr.get(i).kilometer;\n            }\n        }\n        double res = kilometer*arr.get(size-1).fuel/fuel;\n        System.out.println(Math.round(res));\n    }\n}\n\nclass distance{\n    double kilometer,fuel;\n\n    public distance(double kilometer, double fuel) {\n        this.kilometer = kilometer;\n        this.fuel = fuel;\n    }\n\n    public distance() {\n        this(0,0);\n    }\n   \n}", "generated_code": "import java.util.Scanner ;\nclass Main{\n\tpublic static void main(String[]args){\n\t\tint N,w,n,t ;\n\t\tScanner Scan = new Scanner (System.in) ;\n\t\t\n\t\tN=Scan.nextInt();\n\t\t\n\t\tfor(int i=1;i<=N;i++){\n\t\t\tn=Scan.nextInt();\n\t\t\tw=0 ;\n\t\t\tfor(int k=1;k<=n;k++){\n\t\t\t\tt=(k+1)*(k+2)/2 ;\n\t\t\t\tw=w+k*t ;\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(i+\" \"+n+\" \"+w) ;\n\t\t}\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1088_21__1_1088_9", "golden_code": "\nimport java.io.IOException;\n\npublic class Main {\n\n\tpublic static void main(String args[]) throws IOException {\n\t\tjava.io.InputStreamReader isr = new java.io.InputStreamReader(System.in);\n\t\tjava.io.BufferedReader br = new java.io.BufferedReader(isr, 16 * 1024);\n\n\t\tint testcase = Integer.parseInt(br.readLine());\n\t\tString str = \"\";\n\t\tString[] strarray=null;\n\t\t\n\t\tfor(int i=0;i<testcase;i++){\n\t\t\tstr = br.readLine();\n\t\t\tstrarray = str.split(\"\");\n\t\t\tfor (int j = 1; j < strarray.length; j++) {\n\t\t\t\tif (strarray[j].equals(\"A\"))\n\t\t\t\t\tstrarray[j] = \"B\";\n\t\t\t\telse if (strarray[j].equals(\"B\"))\n\t\t\t\t\tstrarray[j] = \"C\";\n\t\t\t\telse if (strarray[j].equals(\"C\"))\n\t\t\t\t\tstrarray[j] = \"D\";\n\t\t\t\telse if (strarray[j].equals(\"D\"))\n\t\t\t\t\tstrarray[j] = \"E\";\n\t\t\t\telse if (strarray[j].equals(\"E\"))\n\t\t\t\t\tstrarray[j] = \"F\";\n\t\t\t\telse if (strarray[j].equals(\"F\"))\n\t\t\t\t\tstrarray[j] = \"G\";\n\t\t\t\telse if (strarray[j].equals(\"G\"))\n\t\t\t\t\tstrarray[j] = \"H\";\n\t\t\t\telse if (strarray[j].equals(\"H\"))\n\t\t\t\t\tstrarray[j] = \"I\";\n\t\t\t\telse if (strarray[j].equals(\"I\"))\n\t\t\t\t\tstrarray[j] = \"J\";\n\t\t\t\telse if (strarray[j].equals(\"J\"))\n\t\t\t\t\tstrarray[j] = \"K\";\n\t\t\t\telse if (strarray[j].equals(\"K\"))\n\t\t\t\t\tstrarray[j] = \"L\";\n\t\t\t\telse if (strarray[j].equals(\"L\"))\n\t\t\t\t\tstrarray[j] = \"M\";\n\t\t\t\telse if (strarray[j].equals(\"M\"))\n\t\t\t\t\tstrarray[j] = \"N\";\n\t\t\t\telse if (strarray[j].equals(\"N\"))\n\t\t\t\t\tstrarray[j] = \"O\";\n\t\t\t\telse if (strarray[j].equals(\"O\"))\n\t\t\t\t\tstrarray[j] = \"P\";\n\t\t\t\telse if (strarray[j].equals(\"P\"))\n\t\t\t\t\tstrarray[j] = \"Q\";\n\t\t\t\telse if (strarray[j].equals(\"Q\"))\n\t\t\t\t\tstrarray[j] = \"R\";\n\t\t\t\telse if (strarray[j].equals(\"R\"))\n\t\t\t\t\tstrarray[j] = \"S\";\n\t\t\t\telse if (strarray[j].equals(\"S\"))\n\t\t\t\t\tstrarray[j] = \"T\";\n\t\t\t\telse if (strarray[j].equals(\"T\"))\n\t\t\t\t\tstrarray[j] = \"U\";\n\t\t\t\telse if (strarray[j].equals(\"U\"))\n\t\t\t\t\tstrarray[j] = \"V\";\n\t\t\t\telse if (strarray[j].equals(\"V\"))\n\t\t\t\t\tstrarray[j] = \"W\";\n\t\t\t\telse if (strarray[j].equals(\"W\"))\n\t\t\t\t\tstrarray[j] = \"X\";\n\t\t\t\telse if (strarray[j].equals(\"X\"))\n\t\t\t\t\tstrarray[j] = \"Y\";\n\t\t\t\telse if (strarray[j].equals(\"Y\"))\n\t\t\t\t\tstrarray[j] = \"Z\";\n\t\t\t\telse if (strarray[j].equals(\"Z\"))\n\t\t\t\t\tstrarray[j] = \"A\";\n\n\t\t\t}\n\t\t\t System.out.println(\"String #\"+(i+1));\n\t\t\t for(int k =0 ; k<strarray.length;k++)\n\t\t\t System.out.print(strarray[k]);\n\t\t\t System.out.println();\n\t\t\t \n\t\t\t System.out.println();\n\t\t}\n\t}\n}\n", "generated_code": "\nimport java.util.Scanner;\n\n\npublic class Main {\n    static  Scanner in=new Scanner(System.in);\n    public static void main(String[] args) {\n        int n=in.nextInt();\n        for (int i = 0; i < n; i++) {\n            String s=in.next();\n            char d[]=s.toCharArray();\n            for (int j = 0; j < s.length(); j++) {\n                if(d[j]=='Z')\n                    d[j]='A';\n                else\n                    d[j]+=1;\n            }\n            System.out.println(\"String #\"+(i+1));\n            System.out.println(String.copyValueOf(d));\n            System.out.println();\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_175__1_1001_469", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "generated_code": "/* @JUDGE_ID:  2003  ???  Java  \"???\" */\n/* @BEGIN_OF_SOURCE_CODE */ \n\nimport java.util.Scanner;\n     \npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner cin = new Scanner(System.in);\n\t\tint a,b;\n\t\twhile(cin.hasNext()){\n                    a = cin.nextInt();\n                    b = cin.nextInt();\n                    System.out.println(a+b);\n                }\n\t\t              \n\t\n\t}\n}\n\t\n/* @END_OF_SOURCE_CODE */ ", "score": 1.0}
{"id": "SHARE_1_1502_1__1_2825_6", "golden_code": "import java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.Queue;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.io.BufferedReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.io.InputStream;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport javax.naming.BinaryRefAddr;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tScanner scan = new Scanner(System.in);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n}\n\nclass TaskC {\n\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\n\t\tboolean isNotPrime[] = new boolean[33000];\n\t\tisNotPrime[0] = true;\n\t\tisNotPrime[1] = true;\n\t\tfor (int i = 2; i < isNotPrime.length; i++) {\n\t\t\tif (!isNotPrime[i]) {\n\t\t\t\tfor (int j = i * 2; j < isNotPrime.length; j += i) {\n\t\t\t\t\tisNotPrime[j] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint n = in.nextInt();\n\t\twhile (n != 0) {\n\t\t\tint res = 0;\n\t\t\tfor (int i = 2; i < n; i++) {\n\t\t\t\tif (!isNotPrime[i] && !isNotPrime[n - i]) {\n\t\t\t\t\tres++;\n\t\t\t\t}\n\t\t\t\tif (i >= (n) / 2) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tout.println(res);\n\t\t\tn = in.nextInt();\n\t\t}\n\t}\n}\n\nclass InputReader {\n\tBufferedReader br;\n\tStringTokenizer st;\n\n\tpublic InputReader(InputStream in) {\n\t\tbr = new BufferedReader(new InputStreamReader(in));\n\t\tst = null;\n\t}\n\n\tpublic String next() {\n\t\twhile (st == null || !st.hasMoreTokens()) {\n\t\t\ttry {\n\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn st.nextToken();\n\t}\n\n\tpublic int nextInt() {\n\t\treturn Integer.parseInt(next());\n\t}\n\n\tpublic long nextLong() {\n\t\treturn Long.parseLong(next());\n\t}\n\n\tpublic float nextFloat() {\n\t\treturn Float.parseFloat(next());\n\t}\n\n\tpublic double nextDouble() {\n\t\treturn Double.parseDouble(next());\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main{\n\npublic static long phi(long n){\n    long res=n;\n    long i=2;\n    while(i*i<=n){\n        if(n%i==0){\n            while(n%i==0){\n                n=n/i;\n            }\n            res-=res/i;\n        }\n        i++;\n    }\n    if(n>1){\n        res-=res/n;\n    }\n    return res;\n}\n\npublic static long [] dp=new long[10001];\npublic static long [] Dp=new long[10001];\n\n     public static void main(String []args){\n         Scanner input=new Scanner(System.in);\n         for(int i=1; i<10001; i++){\n             dp[i]=phi(i);\n             Dp[i]=Dp[i-1]+dp[i];\n         }\n         int t=input.nextInt();\n         for(int i=0; i<t; i++){\n             int n=input.nextInt();\n             System.out.println(Dp[n]+1);\n         }\n     }\n}\n", "score": 0.0}
{"id": "SHARE_1_1009_5__1_1009_63", "golden_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tdouble sum=0;\n\t\tfor(int i=0 ; i<12 ; i++){\n\t\t\tsum = sum + s.nextDouble();\n\t\t}\n\t\tdouble a = sum/12;\n\t\tSystem.out.print(\"$\");\n\t\tSystem.out.printf(\"%.2f\\n\" , a);\n\t}\n}", "generated_code": "\nimport java.text.DecimalFormat;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n   \n    public static void main(String[] args) {\n        Scanner s=new Scanner(System.in);\n        DecimalFormat ds=new DecimalFormat(\"#.00\");\n        \n        while (s.hasNext()) {  \n            \n             double sal[]=new double[12];\n             double a;double b = 0;\n             for (int i = 0; i < 12; i++) {\n                sal[i]=s.nextDouble();\n                \n                \n            }\n             for (int i = 0; i < 12; i++) {\n                \n                b+=sal[i];\n                \n                }\n            a=b/12;\n            System.out.println(\"$\"+ds.format(a));\n        \n    }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_495__1_1001_75", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin=new Scanner(System.in);\n        while(cin.hasNext()){\n           System.out.println((cin.nextInt()+cin.nextInt()));\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main{\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner( System.in );\n        try{\n            while( true ){\n                System.out.println( input.nextInt() + input.nextInt() );\n            }\n        }catch( Exception e ){}\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_502__1_1001_280", "golden_code": "import java.util.Scanner; \n \npublic class Main\n{\n\tpublic static void main(String args[])\n\t{\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext())\n\t\t{\n\t\t\tint a = in.nextInt();\n\t\t\tint b = in.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t\tin.close();\n\t}\n}\n\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n  \n    public static void main(String[] args) {\nScanner in =new Scanner(System.in);\n        while(in.hasNext()){\n           int a=in.nextInt();\n           int b=in.nextInt();\n            System.out.printf(\"%d\\n\",(a+b));\n                   }    }\n}", "score": 1.0}
{"id": "SHARE_1_2175_16__1_1083_3", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tint N, x, y, i, z;\n\t\tboolean flag = true;\n\t\tboolean[] is;\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext()){\t\t\t\n\t\t\tN = in.nextInt();\n\t\t\tflag = true;\n\t\t\tis =  new boolean[N-1];\n\t\t\tx = in.nextInt();\n\t\t\tfor(i = 0; i<N-1; i++){\n\t\t\t\t y =  in.nextInt();\n\t\t\t\tz = Math.abs(y - x);\n\t\t\t\tif(z<N && z>0)\n\t\t\t\t\tis[z-1]= true;\n\t\t\t\t\n\t\t\t\telse{\n\t\t\t\t\tflag = false;\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\tx = y;\n\t\t\t}\n\n\t\t\tfor (i=0; i<N-1; i++)\n\t\t\t\tflag &= is[i];\n\n\t\t\tSystem.out.println(flag? \"Jolly\" : \"Not jolly\");\n\n\t\t}\n\t\tin.close();\t\n\t\t\n\t}\n\n}\n", "generated_code": "\nimport java.util.Scanner;\nimport java.util.TreeSet;\n\npublic class Main {\n    public static void main(String args[]){\n        Scanner in=new Scanner(System.in);\n        int a=in.nextInt();\n        int b=in.nextInt();\n        int k=1;\n        while(a!=-1&&b!=-1){\n            TreeSet ts=new TreeSet();\n            TreeSet v=new TreeSet();\n            boolean bo=false;\n            while(a>0&&b>0){\n                v.add(a);\n                v.add(b);\n                if(ts.contains(b)){\n                    bo=true;\n                }\n                else \n                    ts.add(b);\n                a=in.nextInt();\n                b=in.nextInt();\n            }\n            if(ts.size()!=v.size()-1&&!v.isEmpty())\n                bo=true;\n            if(bo == false)\n                System.out.println(\"Case \"+k+\" is a tree.\");\n            else \n                System.out.println(\"Case \"+k+\" is not a tree.\");\n            k++;\n            a=in.nextInt();\n            b=in.nextInt();\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_6_1010_20__6_1010_21", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\nimport java.util.PriorityQueue;\nimport java.util.*;\n\nclass Main \n{\n\tstatic ArrayList< PriorityQueue< Integer > > adjacencyList = new ArrayList< PriorityQueue< Integer > >(501);\n\n\tpublic static void eulerTour(int v)\n\t{\n\t\tSystem.out.println(v);\n\n\t\tfor (int i = 0; i < adjacencyList.get(v).size(); i++)\n\t\t{\n\t\t\tPriorityQueue<Integer> tmp = new PriorityQueue<Integer>(adjacencyList.get(v));\n\t\t\tInteger t = tmp.poll();;\n\t\t\tint k = 1;\n\t\t\twhile (tmp.peek() != null && !isValidMove(v, t))\n\t\t\t{\n\t\t\t\tt = tmp.poll();\n\t\t\t}\n\n\t\t\tadjacencyList.get(v).remove(t);\n\t\t\tadjacencyList.get(t).remove(v);\n\n\t\t\teulerTour(t);\n\t\t}\n\t}\n\n\tpublic static boolean isValidMove(int v, int d)\n\t{\n\t\tint count = 0;\n\t\tif (adjacencyList.get(v).size() == 1)\n\t\t\treturn true;\n\n\t\tboolean[] visited = new boolean[501];\n\n\t\tint c1 = counter(v, visited);\n\n\t\tadjacencyList.get(v).remove(d);\n\t\tadjacencyList.get(d).remove(v);\n\n\t\tfor (int i = 0; i < 501; i++)\n\t\t\tvisited[i] = false;\n\n\t\tint c2 = counter(v, visited);\n\n\t\tadjacencyList.get(v).add(d);\n\t\tadjacencyList.get(d).add(v);\n\n\t\treturn c1 > c2? false : true;\n\t}\n\n\tpublic static int counter(int v, boolean[] visited)\n\t{\n\t\tvisited[v] = true;\n\t\tint count = 1;\n\n\t\tIterator<Integer> tmp = adjacencyList.get(v).iterator();\n\n\t\twhile (tmp.hasNext())\n\t\t{\n\t\t\tint t = tmp.next();\n\t\t\tif (visited[t] != true)\n\t\t\t\tcount += counter(t, visited);\n\t\t}\n\n\t\treturn count;\n\t}\n\n\tpublic static void get_data()\n\t{\n\t\tScanner inputReader = new Scanner(System.in);\n\t\t\n\t\tfor (int i = 0; i < 501; i++)\n\t\t{\n\t\t\tPriorityQueue<Integer> tmp = new PriorityQueue<Integer>();\n\t\t\tadjacencyList.add(tmp);\n\t\t}\n\n\t\tint startV = 99999;\n\t\tint e = 0;\n\t\t\n\n\t\tint numOfEdges = inputReader.nextInt();\n\n\t\tfor (int i = 0; i < numOfEdges; i++)\n\t\t{\n\t\t\tint v1 = inputReader.nextInt();\n\t\t\tint v2 = inputReader.nextInt();\n\n\t\t\tif (v1 < startV)\n\t\t\t\tstartV = v1;\n\t\t\tif (v2 < startV)\n\t\t\t\tstartV = v2;\n\n\t\t\tadjacencyList.get(v1).add(v2);\n\t\t\tadjacencyList.get(v2).add(v1);\n\t\t}\n\n\t\tfor (int i = 1; i < 501; i++)\n\t\t\tif (adjacencyList.get(i).size() % 2 != 0)\n\t\t\t{\n\t\t\t\tstartV = i;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\teulerTour(startV);\n\t\t\n\t}\n\n\tpublic static void main(String[] args)\n\t{\n\t\tget_data();\n\t}\n}", "generated_code": "import java.awt.Point;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Scanner;\n\n\npublic class Main {\n\tstatic Scanner s = new Scanner(System.in);\n\tstatic HashMap<Integer, ArrayList<Integer>> map = new HashMap<Integer , ArrayList<Integer>>();\n\tstatic HashMap<Point, Point> mark = new HashMap<Point , Point>();\n\tstatic ArrayList<Integer> answare = new ArrayList<Integer>();\n\tstatic int time;\n\n\tstatic boolean initIfNeeded(int sq){\n\t\tif(!map.containsKey(sq)){\n\t\t\tmap.put(sq, new ArrayList<Integer>());\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tstatic int startNode(){\n\t\tArrayList<Integer> av = new ArrayList<Integer>();\n\t\tfor(int sq :map.keySet()){\n\t\t\tif(map.get(sq).size()%2==1)\n\t\t\t\tav.add(sq);\n\t\t}\n\t\tif(av.size()>0)\n\t\t\treturn Collections.min(av);\n\n\t\tfor(int sq:map.keySet())\n\t\t\tav.add(sq);\n\n\t\treturn Collections.min(av);\n\t}\n\n\tstatic void dfs(int node){\n\t\twhile(true){\n\t\t\tint sq;\n\t\t\tif(map.get(node).size()>0)\n\t\t\t\tsq = map.get(node).get(0);\n\t\t\telse\n\t\t\t\treturn;\n\t\t\tmap.get(node).remove((Integer)sq);\n\t\t\tmap.get(sq).remove((Integer)node);\n\t\t\tdfs(sq);\n\t\t\tansware.add(sq);\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tint f;\n\t\twhile(s.hasNext()){\n\t\t\tmap.clear();\n\t\t\tmark.clear();\n\t\t\tf = s.nextInt();\n\t\t\tfor(int i=0;i<f;i++){\n\t\t\t\tint sq1,sq2;\n\t\t\t\tsq1 = s.nextInt();\n\t\t\t\tsq2 = s.nextInt();\n\t\t\t\tinitIfNeeded(sq1);\n\t\t\t\tinitIfNeeded(sq2);\n\t\t\t\tmap.get(sq1).add(sq2);\n\t\t\t\tmap.get(sq2).add(sq1);\n\t\t\t\tmark.put(new Point(sq1,sq2), new Point(-1,-1));\n\t\t\t\tmark.put(new Point(sq2,sq1), new Point(-1,-1));\n\t\t\t}\n\t\t\ttime = 0;\n\t\t\tint sn = startNode();\n\n\t\t\tfor(int n:map.keySet()){\n\t\t\t\tCollections.sort(map.get(n));\n\t\t\t}\n\t\t\tansware.clear();\n\t\t\tdfs(sn);\n\t\t\tSystem.out.println(sn);\n\t\t\tfor(int i=answare.size()-1;i>=0;i--)\n\t\t\t\tSystem.out.println(answare.get(i));\n\t\t\t\n\t\t\t//sortOrders();\n\t\t\t//System.err.println(mark);\n\t\t\t//System.err.println(map);\n\t\t\t//uler(sn);\n\t\t}\n\t}\n\n\tstatic public class cmp implements Comparator<Integer>{\n\t\tint node;\n\t\tcmp(int N){\n\t\t\tnode = N;\n\t\t}\n\t\tpublic int compare(Integer sq1, Integer sq2) {\n\t\t\treturn mark.get(new Point(node,sq2)).y - mark.get(new Point(node,sq1)).y; \n\t\t}\n\t}\n\n\tprivate static void sortOrders() {\n\t\tfor(int sq :map.keySet()){\n\t\t\tCollections.sort(map.get(sq),new cmp(sq));\n\t\t}\n\t}\n\n\tprivate static void uler(int node) {\n\t\tSystem.out.println(node);\n\t\tfor(int sq : map.get(node)){\n\t\t\tif(mark.get(new Point(sq,node)).x!=-1){\n\t\t\t\tmark.get(new Point(sq,node)).x = -1;\n\t\t\t\tmark.get(new Point(node,sq)).x = -1;\n\t\t\t\tuler(sq);\n\t\t\t}\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1119_28__1_1119_31", "golden_code": "import java.util.*;\n\nclass Main {\n\n\tpublic static void main(String[] u) {\n\t\tScanner b = new Scanner(System.in);\n\t\twhile (b.hasNext()) {\n\t\t\tint n = b.nextInt(), c = b.nextInt() * 2, s = 0, j = 2, i = n, a[] = new int[n];\n\t\t\twhile (i > 0)\n\t\t\t\tif (i % j < 1 && i > 2) {\n\t\t\t\t\tj = 2;\n\t\t\t\t\ti--;\n\t\t\t\t} else if (j * j++ > i) {\n\t\t\t\t\ta[s++] = i--;\n\t\t\t\t\tj = 2;\n\t\t\t\t}\n\t\t\tString v = \"\";\n\t\t\tfor (s -= j = c < n ? (s - c + s % 2) / 2 : 0; j < s;)\n\t\t\t\tv += \" \" + a[--s];\n\t\t\tSystem.out.format(\"%s %s:%s\\n\\n\", n, c / 2, v);\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.*;\n\nclass Main {\n\n\tpublic static void main(String[] u) {\n\t\tScanner b = new Scanner(System.in);\n\t\twhile (b.hasNext()) {\n\t\t\tint n = b.nextInt(), c = 2*b.nextInt(), s = 0, j = 2, i = n, a[] = new int[n];\n\t\t\twhile (i > 0)\n\t\t\t\tif (j * j > i|i % j < 1) {\n\t\t\t\t\tif(i--%j>0|i<2)\n\t\t\t\t\t\ta[s++] = i+1;\n\t\t\t\t\tj=2;\n\t\t\t\t}else\n\t\t\t\t\tj++;\n\t\t\t\n\t\t\tString v = n + \" \" + c / 2 + \":\";\n\t\t\tfor (s -= j = c < n ?  (s - c + s % 2) / 2:0; j < s;)\n\t\t\t\tv += \" \" + a[--s];\n\t\t\tSystem.out.println(v + '\\n');\n\t\t}\n\t}\n}\n\n", "score": 1.0}
{"id": "SHARE_1_2505_1__1_108012_17", "golden_code": "\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n/**\n *\n * @author Hossein\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (true) {\n            ArrayList<ArrayList<String>> vote = new ArrayList<ArrayList<String>>();\n            Map<String, Integer> cand = new HashMap();\n            ArrayList<String> names = new ArrayList<String>();\n            int c, v;\n            c = in.nextInt();\n            v = in.nextInt();\n            if (c == v && v == 0) {\n                break;\n            }\n            int[] remove = new int[c];\n            in.nextLine();\n            int head = 0;\n            for (int i = 0; i < v; i++) {\n                vote.add(new ArrayList());\n                String line = in.nextLine();\n                Scanner ls = new Scanner(line);\n                while (ls.hasNext()) {\n                    String name = ls.next();\n                    vote.get(i).add(name);\n                    if (cand.get(name) == null) {\n                        cand.put(name, head);\n                        head++;\n                        names.add(name);\n                    }\n                }\n            }\n            Integer counter=0;\n            while(names.size()<c){\n                counter++;\n                names.add(\"^^^\"+counter.toString());\n                \n            }\n//            System.err.println(\"done\");;\n            while (true) {\n                int[] numofV = new int[c + 1];\n                if (cand.size() == 0) {\n                    System.out.println(\"There is no winner\");\n                    break;\n                }\n\n                for (int i = 0; i < v; i++) {\n                    Integer index = -1;\n                    while (true) {\n                        if (vote.get(i).size() == 0) {\n                            break;\n                        }\n                        index = cand.get(vote.get(i).get(0));\n                        if (index == null) {\n                            vote.get(i).remove(0);\n                            continue;\n                        }\n                        break;\n                    }\n                    if (index==null || index == -1) {\n                        continue;\n                    }\n                    numofV[index]++;\n\n                }\n                int min = 10000;\n                int found = -1;\n//                System.out.println(\"res:\");\n                for (int i = 0; i < c; i++) {\n//                    System.out.println(names.get(i) + \" \" + numofV[i]);\n                    if (numofV[i] > v / 2) {\n                        found = i;\n                        break;\n                    }\n                    if (numofV[i] < min) {\n                        if(remove[i]==1){\n                            continue;\n                        }\n                        min = numofV[i];\n                    }\n                }\n                if (found != -1) {\n                    System.out.println(names.get(found));\n                    break;\n                }\n                for (int i = 0; i < c; i++) {\n                    if (numofV[i] == min) {\n                        cand.remove(names.get(i));\n                        remove[i]=1;\n//                        System.out.println(\"removing\" + names.get(i));\n                    }\n                }\n            }\n        }\n\n        // TODO code application logic here\n    }\n}\n", "generated_code": "\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.util.HashMap;\nimport java.util.Scanner;\nimport java.util.Vector;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class Main {\n    public static void main(String[] args){\n            Scanner in = new Scanner(System.in);\n            while(in.hasNext()){\n                HashMap<String,Integer> map = new HashMap<String,Integer>();\n                int[][] graph = new int[200][200];    \n                int start,end,counter=0;\n                String[] line=new String[3];\n                String[] fline = new String[2];fline[0]=in.next();fline[1]=in.next();\n\n                for(int i=0 ; i<200 ; i++){\n                    for(int j=0 ; j<200 ; j++)\n                        graph[i][j]=-1;\n                }\n\n                int m = in.nextInt();\n                for(int i=0 ; i<m ; i++){\n                   line[0]=in.next();line[1]=in.next();line[2]=in.next();\n                   if(!map.keySet().contains(line[0])){\n                       map.put(line[0], counter);\n                       counter++;\n                   }\n                   if(!map.keySet().contains(line[1])){\n                       map.put(line[1], counter);\n                       counter++;\n                   }\n                   graph[map.get(line[0])][map.get(line[1])] = Integer.parseInt(line[2]);\n                   graph[map.get(line[1])][map.get(line[0])] = Integer.parseInt(line[2]);\n                }\n\n                start = map.get(fline[0]);\n                end = map.get(fline[1]);\n\n                int n = counter;\n                \n                int min = Integer.MAX_VALUE;\n                for(int i=0 ; i<n ; i++){\n                    for(int j=0 ; j<i ; j++){\n                        if(graph[i][j]==-1) continue;\n                        int cap = graph[i][j];\n                        graph[i][j]=0;\n                        graph[j][i]=0;\n                        int dik = dijkstra(graph,n,start,end);\n                        if(dik<min){\n                            min=dik;\n                        }\n                        graph[i][j]=cap;\n                        graph[j][i]=cap;\n                    }\n                }\n                System.out.println(min);\n            }\n    }\n    public static int dijkstra(int[][] graph,int size, int start , int end){\n        int n = size;\n        boolean[] visited = new boolean[n];\n        int[] lable = new int[n];\n        for(int i=0 ; i<n ; i++){\n            visited[i]=false;\n            lable[i]=Integer.MAX_VALUE;\n        }\n        lable[start]=0;\n        while(true){\n            int min = Integer.MAX_VALUE;\n            int minID =-1;\n            for(int i=0 ; i<n ; i++){\n                if(lable[i]<min && !visited[i]){\n                    minID = i;\n                    min = lable[i];\n                }\n            }\n            if(minID==end) break;\n            visited[minID]=true;\n            for(int i=0 ; i<size ; i++){\n                if(graph[minID][i]!=-1){\n                    if((lable[minID]+graph[minID][i])<lable[i] && !visited[i]){\n                        lable[i]=(lable[minID]+graph[minID][i]);\n                    }\n                }\n            }\n        }\n        return lable[end];\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_433__1_1001_223", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner scanner = new Scanner(System.in);\n\n        while (scanner.hasNext()) {\n            int a = scanner.nextInt();\n            int b = scanner.nextInt();\n            System.out.println(a + b);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n    \n\t\tScanner input = new Scanner(System.in);\n        while (input.hasNext())\n            System.out.println(input.nextInt()+input.nextInt());\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_196__1_1001_17", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    static Scanner in = new Scanner(System.in);\n    public static void main(String[] args) {\n        while(in.hasNextInt()){\n            System.out.println(in.nextInt() + in.nextInt());\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext())\n\t\t\tSystem.out.println((in.nextInt()+in.nextInt()));\n\tin.close();\t\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1353_9__1_106022_18", "golden_code": "\n\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint x[] = new int[5000];\n\t\tint y[] = new int[5000];\n\t\tx[0] = 0;\n\t\ty[0] = 2;\n\t\tfor (int i = 1; i < y.length; i++) {\n\t\t\tif (i % 2 == 1) {\n\t\t\t\tx[i] = x[i - 1] + 1;\n\t\t\t\ty[i] = y[i - 1] + 1;\n\t\t\t} else {\n\t\t\t\tx[i] = x[i - 1] + 3;\n\t\t\t\ty[i] = y[i - 1] + 3;\n\t\t\t}\n\n\t\t}\n\n\t\twhile (n-- > 0) {\n\t\t\tint i = in.nextInt();\n\t\t\tint j = in.nextInt();\n\t\t\tif (i == j)\n\t\t\t\tSystem.out.println(x[j]);\n\t\t\telse if (i - j == 2)\n\t\t\t\tSystem.out.println(y[j]);\n\t\t\telse\n\t\t\t\tSystem.out.println(\"No Number\");\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.Scanner;\n\n\n\npublic class Main{\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint T = sc.nextInt();\n\t\twhile (T-->0) System.out.println(process(sc.nextInt()));\n\t}\n\n\tprivate static int process(int m) {\n\t\tif (m<=10) return m;\n\t\tint a=10;\n\t\tdouble b = m*1.0;\n\t\twhile (true) {\n\t\t\tb/=a;\n\t\t\tif (b<1) return (int) (b*=a);\n\t\t\tb = (int)(b + 0.5);\n\t\t\tb *= a;\n\t\t\ta *= 10;\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1034_9__1_1230_9", "golden_code": "import java.util.Scanner;\n\n/**\n *\n * @author Mina\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner input = new Scanner(System.in);\n        int t = input.nextInt();\n        input.nextLine();\n        for (int i = 0; i < t; i++) {\nif (i != 0) {\n                System.out.println(\"\");\n            }\n            int l = input.nextInt();\n            int n = input.nextInt();\n            input.nextLine();\n            String[] s = new String[n];\n            long[] v = new long[n];\n            for (int j = 0; j < n; j++) {\n                s[j] = input.nextLine();\n                char[] c = s[j].toCharArray();\n\n                for (int k = 0; k < l; k++) {\n                    for (int q = k; q < l; q++) {\n                        if (c[k] > c[q]) {\n                            v[j]++;\n                        }\n                    }\n                }\n\n            }\n\n            long[] u = new long[n];\n            for (int k = 0; k < n; k++) {\n                for (int q = k; q < n; q++) {\n                    if (v[q] < v[k]) {\n                        long temp = v[k];\n                        v[k] = v[q];\n                        v[q] = temp;\n                        String tem = s[k];\n                        s[k] = s[q];\n                        s[q] = tem;\n                    }\n                }\n            }\n            for (int j = 0; j < n - 1; j++) {\n                System.out.println(s[j]);\n            }\n            System.out.printf(\"%s\", s[n - 1]);\n            if (i != t) {\n                System.out.println(\"\");\n               \n            }\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\nimport java.lang.String;\nclass Main\n{\n\tpublic static void main(String [] args)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\tString num;\n\t\tint v;\n\t\tint charw;\n\t\twhile(scan.hasNext())\n\t\t{\tv = 0;\n\t\t\tnum=scan.nextLine();\n\t\t\tint[] sum = new int[num.length()+1];\n\t\t\tfor(int i = 0;i < num.length();i++)\n\t\t\t\tsum[i] = 0;\n\t\t\t\n\t\tif ( num.equals(\"0\") )\n\t\t\tbreak;\n\t\telse\n\t\t{\n\t\t\tint length = num.length();\n\t\t\t\n\t\t\tfor(int i = 0;length !=0 ;i++)\n\t\t\t\n\t\t\t{\n\t\t\t charw = num.charAt(i);\n\t\t\t charw -= '0';\n\t\t\t sum[0] += charw;\t\n\t\t\t length--;\n\t\t\t}\n\t\t\t\n\t\t\t//System.out.print(\"charw\"+sum);\n\t\t\tfor(v = 0;v <=( num.length());v++)\n\t\t\t\tif ( sum[v] > 9 )\n\t\t\t\t{while( sum[v] > 0 )\n\t\t\t{\n\t\t\t\t\tsum[v+1] += sum[v]%10;\n\t\t\t\t\tsum[v] = sum[v]/10;}}\n\t\t\t/*System.out.println(\"sum\"+sum);\n\t\t\tSystem.out.println(\"SUM2222:\"+sum2);}*/\n\t\t\t\t\telse\n\t\t\t\t\t{sum[v+1] = sum[v];\n\t\t\t\t\t\tbreak;}\n\t\t\tSystem.out.println(sum[v+1]);\n\t\t}\n\t\t\n\t\t}\n\t\n\t\n\t\n\t\n\t}\n\n\n\n}\n", "score": 0.0}
{"id": "SHARE_1_2747_24__1_1041_9", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint t = in.nextInt();\n\t\tboolean character = false;\n\t\tboolean lowerCase = false;\n\t\tboolean uperCase = false;\n\t\tboolean numeric = false;\n\t\t\n\n\t\tif( t >= 1 && t <= 1000){\n\t\t\tint[] score = new int[t+1];\n\t\t\tString[] s = new String[t+1];\n\t\t\tfor(int i = 0; i < t; i++){\n\t\t\t\tcharacter = false;\n\t\t\t\tlowerCase = false;\n\t\t\t\tuperCase = false;\n\t\t\t\tnumeric = false;\n\t\t\t\tfor(int p = 0; p < score.length; p++)\n\t\t\t\t\tscore[p] = 0;\n\t\t\t\tscore[i] = 0;\n\t\t\t\ts[i] = in.next();\n\n\t\t\t\tif(s[i].length() < 50){\n\t\t\t\t\t\n\t\t\t\t\t\tfor(int j = 0 ; j < s[i].length() ; j++){\n\t\t\t\t\t\t\tif(s[i].charAt(j) == '!'|| s[i].charAt(j) == '@'|| s[i].charAt(j) == '#'||\n\t\t\t\t\t\t\t\t\ts[i].charAt(j) == '$'|| s[i].charAt(j) == '%'|| s[i].charAt(j) == '^'||\n\t\t\t\t\t\t\t\t\ts[i].charAt(j) == '&'|| s[i].charAt(j) == '*'|| s[i].charAt(j) == '('|| \n\t\t\t\t\t\t\t\t\ts[i].charAt(j) == ')'){\n\t\t\t\t\t\t\t\tcharacter = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(s[i].charAt(j) >= 65 && s[i].charAt(j) <= 90)\n\t\t\t\t\t\t\t\tuperCase = true;\n\t\t\t\t\t\t\tif(s[i].charAt(j) >= 97 && s[i].charAt(j) <= 122)\n\t\t\t\t\t\t\t\tlowerCase = true;\n\t\t\t\t\t\t\tif(s[i].charAt(j) >= 48 && s[i].charAt(j) <= 57)\n\t\t\t\t\t\t\t\tnumeric = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(character)\n\t\t\t\t\t\t\tscore[i]++;\n\t\t\t\t\t\tif(uperCase)\n\t\t\t\t\t\t\tscore[i]++;\n\t\t\t\t\t\tif(lowerCase)\n\t\t\t\t\t\t\tscore[i]++;\n\t\t\t\t\t\tif(numeric)\n\t\t\t\t\t\t\tscore[i]++;\n\n\t\t\t\t\t\tswitch(score[i]){\n\t\t\t\t\t\tcase 1:s[i] = \"very bad\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2: s[i] = \"bad\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 3 : s[i] = \"good\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 4 : s[i] = \"overkill\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int x = 0; x < t; x++){\n\t\t\t\tSystem.out.println(s[x]);\n\t\t\t}\n\n\t\t}\n\n\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main{\n    static Scanner input=new Scanner(System.in);\n    public static void main(String[] args){\n        int t=1;\n        int[] a=new int[25];\n        int[] b=new int[25];\n        while(true){\n            int n=input.nextInt();\n            int m=input.nextInt();\n            int c=input.nextInt();\n            if(m==0 && n==0 && c==0)\n                return;\n            int max=0,sum=0;\n            for(int i=0;i<b.length;i++)\n                b[i]=0;\n            for(int i=1;i<=n;i++)\n                a[i]=input.nextInt();\n            for(int i=0;i<m;i++){\n                int l=input.nextInt();\n                if(b[l]==0){\n                    b[l]=1;\n                    sum+=a[l];\n                    if(sum>max)\n                        max=sum;\n                }\n                else if(b[l]==1){\n                    b[l]=0;\n                    sum-=a[l];\n                }\n            }\n            if(sum>c){\n                System.out.printf(\"Sequence %d\\n\",t);\n                System.out.println(\"Fuse was blown.\");\n            }\n            else if(sum<=c){\n                System.out.printf(\"Sequence %d\\n\",t);\n                System.out.println(\"Fuse was not blown.\");\n                System.out.printf(\"Maximal power consumption was %d amperes.\\n\",max);\n            }\n            t++;\n            System.out.println(\"\");\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1017_13__1_1001_27", "golden_code": "import java.util.*;\nclass Main{\n\tpublic static void main(String[] z) {\n\t\tScanner s = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tArrayList<int[]> q = new ArrayList<int[]>();\n\t\t\tint i =11,t=s.nextInt(),k=0;\n\t\t\tfor(;i<=30;)\n\t\t\t\tq.add(new int[]{25,i++});\n\t\t\tif (t==0)\n\t\t\t\treturn;\n\t\t\tString a= \"The worm successfully made all \"+t+\" moves\",b=\"The worm ran \";\n\t\t\tk:for (char c :s.next().toCharArray()){\n\t\t\t\tk++;\n\t\t\t\tq.remove(0);\n\t\t\t\tint[] h = q.get(18),p={h[0],h[1]};\n\t\t\t\tif (c=='N')\n\t\t\t\t\tp[0]=h[0]-1;\n\t\t\t\telse if(c=='S')\n\t\t\t\t\tp[0]=h[0]+1;\n\t\t\t\telse if(c =='E')\n\t\t\t\t\tp[1]=h[1]+1;\n\t\t\t\telse \n\t\t\t\t\tp[1]=h[1]-1;\n\t\t\t\tif (p[0]<1||p[0]>50||p[1]<1||p[1]>50){\n\t\t\t\t\ta=b+\"off the board on move \"+k;break;\n\t\t\t\t}else\n\t\t\t\t\tfor (int[]r:q)\n\t\t\t\t\t\tif(r[0]==p[0]&&r[1]==p[1]){\n\t\t\t\t\t\t\ta=b+\"into itself on move \"+k;break k;\n\t\t\t\t\t\t}\n\t\t\t\tq.add(p);\n\t\t\t}\n\t\t\tSystem.out.println(a+\".\");\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\nclass Main{\n  public static void main(String[] args){\n  Scanner scan=new Scanner(System.in);\n  while(scan.hasNext()){\n   int a=scan.nextInt();\n   int b=scan.nextInt();\n   int c=a+b;\n   System.out.println(c);}\n    }\n   }", "score": 0.0}
{"id": "SHARE_1_1001_271__1_1001_450", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {            \n            System.out.println(in.nextInt()+in.nextInt());\n        }\n    }\n    \n}\n", "generated_code": "import java.io.InputStreamReader;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        int n, k;\n        Scanner sc = new Scanner(new InputStreamReader(System.in));\n        while(sc.hasNext()) {\n            n = sc.nextInt();\n            k = sc.nextInt();\n            System.out.println(n + k);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_288__1_1001_271", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc =new Scanner(System.in);\n        while(sc.hasNext()){\n            System.out.println(sc.nextInt() +sc.nextInt());\n            \n        }\n    }\n\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {            \n            System.out.println(in.nextInt()+in.nextInt());\n        }\n    }\n    \n}\n", "score": 1.0}
{"id": "SHARE_1_2633_7__5_1008_17", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        int n=in.nextInt();\n        for (int i = 0; i < n; i++) {\n            int a[]=new int[6];\n            int b[]=new int[7];\n            for (int j = 0; j < 6; j++) {\n                a[j]=in.nextInt();\n            }\n            for (int j = 0; j < 7; j++) {\n                b[j]=in.nextInt();\n            }\n            int g=a[0]+a[1]*2+a[2]*3+a[3]*3+a[4]*4+a[5]*10;\n            int e=b[0]+b[1]*2+b[2]*2+b[3]*2+b[4]*3+b[5]*5+b[6]*11;\n            System.out.print(\"Battle \"+(i+1)+\": \");\n            if(g>e)\n                System.out.println(\"Good triumphs over Evil\");\n            else if(e>g)\n                System.out.println(\"Evil eradicates all trace of Good\");\n            else \n                System.out.println(\"No victor on this battle field\");\n        }\n    }\n}\n", "generated_code": "import java.util.*;\nclass Main {\n\tpublic static void main(String[] args) {\n\t\toblivion ob = new oblivion();\n\t\tob.input();\n\t\t//ob.print();\n\t}\n}\nclass oblivion {\n\tpublic oblivion() {\n\t\tbench = new ArrayList<Bench>();\n\t\tsorted = new ArrayList<Bench>();\n\t}\n\tpublic void print() {\n\t\tfor(int i = 0; i < sorted.size(); i++) {\n\t\t\tfor(int j = 0; j < sorted.get(i).path.size(); j++)\n\t\t\t\tSystem.out.print(sorted.get(i).path.get(j) + \" \" );\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\tpublic void input() {\n\t\tScanner in = new Scanner(System.in);\n\t\tint c = in.nextInt();\n\t\tfor(int i = 0; i < c; i++) {\n\t\t\tint b  = in.nextInt();\n\t\t\tfor(int j = 0; j < b-1; j++) {\n\t\t\t\tint t1 = in.nextInt();\n\t\t\t\tint t2 = in.nextInt();\n\t\t\t\tAdj(t1, t2);\n\t\t\t}\n\t\t\tsort();\n\t\t\tfor(int j = 0; j < sorted.size(); j++) {\n\t\t\t\tresetmark();\n\t\t\t\tBFS(sorted.get(j));\n\t\t\t\tsorted.get(j).Min(); \n\t\t\t}\n\t\t\tOut(b);\n\t\t\t//print();\n\t\t\tbench.clear();\n\t\t\tsorted.clear();\n\t\t}\n\t}\n\tpublic ArrayList<Bench> bench;\n\tpublic ArrayList<Bench> sorted;\n\tpublic void sort() {\n\t\tfor(int i = 0; i < bench.size(); i++) {\n\t\t\tfor(int j = 0; j < bench.size(); j++)\n\t\t\t\tif(bench.get(j).num == i+1)\n\t\t\t\t\tsorted.add(bench.get(j));\n\t\t}\n\t}\n\t\t\t\t\t\t\t\t\n\tpublic Bench bench_n(int n) {\n\t\tfor(int i = 0; i < bench.size(); i++)\n\t\t\tif(bench.get(i).num == n)\n\t\t\t\treturn bench.get(i);\n\t\treturn new Bench(0);\n\t}\n\t\n\tpublic void Adj(int t1, int t2) {\n\t\tif(add_b(t1))\n\t\t\tbench.add(new Bench(t1));\n\t\tif(add_b(t2))\n\t\t\tbench.add(new Bench(t2));\n\t\tbench_n(t2).adj.add(bench_n(t1));\n\t\tbench_n(t1).adj.add(bench_n(t2));\n\t}\n\t\n\tprivate int cntlevel() {\n\t\tint cnt = 0;\n\t\tfor(int i = 0; i < sorted.size(); i++)\n\t\t\tif(sorted.get(i).level != 0)\n\t\t\t\tcnt++;\n\t\treturn cnt+1;\n\t}\n\tpublic void resetmark() {\n\t\tfor(int i = 0; i < sorted.size(); i++)\n\t\t\tsorted.get(i).marked = false;\n\t}\n\tpublic void resetlevel() {\n\t\tfor(int i = 0; i < sorted.size(); i++) \n\t\t\tsorted.get(i).level = 0;\n\t}\n\t\n\tpublic void BFS(Bench b) {\n\t\tb.marked = true;\n\t\tfor(int i = 0; i < b.adj.size(); i++) {\n\t\t\tbfs(b.adj.get(i));\n\t\t\tb.path.add(cntlevel());\n\t\t\tresetlevel();\n\t\t}\n\t}\n\t\n\tpublic void bfs(Bench b) {\n\t\tb.marked = true;\n\t\tfor(int j = 0; j < b.adj.size(); j++) {\n\t\t\tif(!b.adj.get(j).marked) {\n\t\t\t\tb.adj.get(j).level = b.level+1;\n\t\t\t\tbfs(b.adj.get(j));\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\n\tpublic boolean add_b(int b) {\n\t\tint c = 0;\n\t\tfor(int i = 0; i < bench.size(); i++)\n\t\t\tif(b == bench.get(i).num)\n\t\t\t\tc++;\n\t\tif(c == 0)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\tpublic void Out(int b) {\n\t\t//for(int i = 0; i < sorted.size(); i++)\n\t\t//\tSystem.out.println(\"& \" +sorted.get(i).num +\" \" +  sorted.get(i).min);\n\t\tint indx = 0;\n\t\tint M = sorted.get(0).min;\n\t\tfor(int i = 1; i < sorted.size(); i++) {\n\t\t\tif((sorted.get(i).adj.size() > 1) && (sorted.get(i).min < M))  {\n\t\t\t\tM = sorted.get(i).min;\n\t\t\t\tindx = i;\n\t\t\t}\n\t\t}\n\t\tSystem.out.print(indx+1 + \" \");\n\t\tif(b%2 == 0)\n\t\t\tSystem.out.println(b);\n\t\telse\n\t\t\tSystem.out.println(2*(b/2));\n\t}\n}\n\nclass Bench {\n\tpublic Bench(int num) {\n\t\tthis.num = num;\n\t\tmarked = false;\n\t\tlevel = 0;\n\t\tpath = new ArrayList<Integer>();\n\t\tadj = new ArrayList<Bench>();\n\t}\n\tpublic int minimum(ArrayList<Integer> a) {\n\t\tint m = Math.abs(a.get(0));\n\t\tfor(int i = 1; i < a.size(); i++)\n\t\t\tif(Math.abs(a.get(i)) < m)\n\t\t\t\tm = Math.abs(a.get(i));\n\t\treturn m;\n\t}\n\tpublic void Min() {\n\t\tint[] m = new int[path.size()];\n\t\tArrayList<Integer> t = new ArrayList<Integer>();\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < path.size(); i++)\n\t\t\tsum += path.get(i);\n\t\tm[0] = sum;\n\t\t//System.out.println(\"** \" + sum);\n\t\tfor(int i = 1; i < path.size(); i++) {\n\t\t\tt.add(m[i-1]);\n\t\t\tfor(int j = 0; j < i; j++)\n\t\t\t\tt.add(m[j]-2*path.get(i));\n\t\t\t//for(int j = 0; j < t.size(); j++)\n\t\t\t//\tSystem.out.println(\"%\" + t.get(j));\n\t\t\tm[i] = minimum(t);\n\t\t\t//System.out.println(m[i]);\n\t\t}\n\t\tmin = m[path.size()-1];\n\t\tt.clear();\n\t}\t\t\n\tpublic int level;\n\tpublic boolean marked;\n\tpublic int num;\n\tpublic int min;\n\tpublic ArrayList<Integer> path;\n\tpublic ArrayList<Bench> adj;\n}", "score": 0.0}
{"id": "SHARE_1_2226_4__1_2031_4", "golden_code": "import java.math.BigInteger;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while(true)\n        {\n            int n;\n            n = cin.nextInt();\n            String a,b;\n            if(n == 0) break;\n            a = cin.next();\n            b=a;\n            BigInteger f1 = new BigInteger(a);\n            a = cin.next();\n            BigInteger f2 = new BigInteger(a);\n            if(n != 10)\n            {   \n                f1 = new BigInteger(f1.toString(),n);\n                f2 = new BigInteger(f2.toString(),n);\n                System.out.println(f1.mod(f2).toString(n));\n            }\n            else{\n                System.out.println(f1.mod(f2));\n            }\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main{\n    static Scanner input=new Scanner(System.in);\n    public static void main(String[] args){\n        while(input.hasNext()){\n            double n=input.nextDouble();\n            double p=input.nextDouble();\n            double k=(double)Math.pow(p,1.0/n);\n            System.out.printf(\"%.0f\\n\",k);\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_210__1_1001_201", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\t    Scanner input = new Scanner(System.in);\n        do {\n            try {\n            System.out.print(input.nextInt() + input.nextInt() + \"\\n\");\n            }\n            catch (RuntimeException exmp)\n            {\n                System.exit(0);\n            }\n        \n        }\n        \n        while (true);\n    }\n}\n", "generated_code": "import java.math.BigInteger;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        BigInteger A=new BigInteger(\"0\");\n        BigInteger B =new BigInteger(\"0\");\n        Scanner input =new Scanner(System.in);\n        while(input.hasNext()){\n        A=input.nextBigInteger();\n        B=input.nextBigInteger();\n        System.out.println(A.add(B));\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_6_1009_27__1_2371_6", "golden_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t\tCastle ex = new Castle();\n\t\t\n\t\tint[][] a = ex.graphImplemention();\n\t\t\n\t\tGraph g = new Graph(a.length);\n\t\t\n\t\tg.initialize(a);\n\t\t\n\t\tg.DFS();\n\t\t\n\t\t\n\t\tSystem.out.println(g.partions);\n\t\tSystem.out.println(g.maximumRoom );\n\t\tg.calculateMaximumRoom(a, ex.rows, ex.columns);\n\t\tSystem.out.println( g.maximumRoomSize);\n\t\tSystem.out.println(g.rowOfRemovedWall + \" \" + g.columnOfRemovedWall + \" \" + g.directionOfRemovedWall);\n\n\t\t\n\t}\n\n\t\n\tpublic static class Castle {\n\t\n\t\tpublic int columns=0;\n\t\tpublic int rows = 0;\n\t\n\t\tpublic int[][] graphImplemention () {\n\t\t\n\t\tScanner scanConsole = new Scanner( System.in );\n\t\t\n\t\tint temp=0;\n\t\tcolumns = scanConsole.nextInt();\n\t\trows = scanConsole.nextInt();\n\t\tscanConsole.nextLine();\n\t\t\n\t\tint[][] graphMatrix = new int[rows*columns][rows*columns];\n\t\t\n\t\tfor (int i = 0; i < graphMatrix.length; i++) {\n\t\t\tfor (int j = 0; j < graphMatrix.length; j++) {\n\t\t\t\tgraphMatrix[i][j] = 0;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tboolean north = true,\n\t\t\t\tsouth = true,\n\t\t\t\twest = true,\n\t\t\t\teast = true;\n\t\t\t\n\t\tfor (int i = 0; i < rows*columns; i++) {\n\t\t\tnorth = true;\tsouth = true;\twest = true;\teast = true;\n\t\t\t\n\t\t\ttemp = scanConsole.nextInt();\n\t\t\t\t\t\t\t\t\n\t\t\tif ( temp-8 > -1 ) { temp -= 8; south = false; }\n\t\t\t\n\t\t\tif ( temp-4 > -1 ) { temp -= 4; east = false; }\n\t\t\t\n\t\t\tif ( temp-2 > -1 ) { temp -= 2; north = false; }\n\t\t\t\n\t\t\tif ( temp-1 > -1 ) { temp -= 1; west = false; }\n\t\t\t\n\t\t\tif ( north ){\n\t\t\t\tif ( i-columns > -1 ) { graphMatrix[i][i-columns] = 1; } \n\t\t\t}\n\t\t\t\n\t\t\tif ( south ){\n\t\t\t\tif ( i+columns < rows*columns ) { graphMatrix[i][i+columns] = 1; } \n\t\t\t}\n\t\t\t\n\t\t\tif ( west ){\n\t\t\t\tif ( i-1 > -1 ) { graphMatrix[i][i-1] = 1; } \n\t\t\t}\n\t\t\t\n\t\t\tif ( east ){\n\t\t\t\tif ( i+1 < rows*columns ) { graphMatrix[i][i+1] = 1; } \n\t\t\t}\n\t\t\n\t\t\tif( i%columns == columns-1 ) scanConsole.nextLine();\n\t\t\t\n\t\t}\t\t\n\t\t\n\t\tscanConsole.close();\n\t\t\n\t\treturn graphMatrix;\n\t\t\n\t}\n\t\n}\n\n\n\n\tpublic static class Graph {\n\t\n\tclass Node {\n\t\t\n\t\t//data\n\t\tpublic int numOfNode;\n\t\tpublic int color;\n\t\t\n\t\tpublic Node father;\n\t\tpublic ArrayList< Node > childerens;\t\n\t\t\n\t\t\n\t\tpublic Node( int num/*data*/ ) {\n\t\t\t\n\t\t\tcolor = 0;\n\t\t\tfather = null;\n\t\t\tnumOfNode = num;\n\t\t\tchilderens = new ArrayList<Node>();\n\t\t}\n\t\n\t\tpublic void addChild( Node c ) {\n\t\t\tchilderens.add(c);\n\t\t}\n\t\t\n\t\tpublic Node find( int num ) {\n\t\t\t\n\t\t\tfor (int i = 0; i < childerens.size(); i++) {\n\t\t\t\t\n\t\t\t\tif( childerens.get(i).numOfNode == num )\n\t\t\t\t\treturn childerens.get(i);\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\t\n\t\n\tpublic Node root;\n\tpublic int partions;\n\tpublic int maximumRoom;\n\tpublic int color; \n\tpublic int maximumRoomSize;\n\tpublic int rowOfRemovedWall;\n\tpublic int columnOfRemovedWall;\n\tpublic String directionOfRemovedWall;\n\t\n\tArrayList<Integer> roomSizes = new ArrayList<Integer>();\n\tArrayList<Integer> roomColors = new ArrayList<Integer>(); \n\t\n\tpublic Graph( int numOfVertexs/*data*/ ) {\n\t\t\n\t\troot = new Node(0);\n\t\tpartions = 0; \n\t\tcolor = 1;\n\t\tmaximumRoomSize = 0;\n\t\t \n\t\tfor (int i = 1; i < numOfVertexs+1; i++) {\n\t\t\troot.addChild( new Node(i) );\n\t\t}\n\t\t\n\t}\n\t\n\tpublic void initialize( int[][] graphMatrix ){\n\t\t\n\t\tfor (int i = 0; i < graphMatrix.length; i++) {\n\t\t\tfor (int j = 0; j < graphMatrix[0].length; j++) {\n\t\t\t\t\n\t\t\t\tif( graphMatrix[i][j] == 1 ){\n\t\t\t\t\troot.find(i+1).addChild(root.find(j+1));\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tpublic void printGraph() {\n\t\t\n\t\tSystem.out.println(\"++++++------>\" + root.childerens.get(0).color);\n\t\t\n\t\t\n\t\tfor (int i = 0; i < root.childerens.size(); i++) {\n\t\t\tNode vertex = root.childerens.get(i);\n\t\t\t\n\t\t\tSystem.out.print((i)+ \": \");\n\t\t\tfor (int j = 0; j < vertex.childerens.size(); j++) {\n\t\t\t\tSystem.out.print((vertex.childerens.get(j).numOfNode-1) + \" \" + (vertex.childerens.get(j).color) );\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tSystem.out.println();\n\t}\n\t\n\tpublic void DFS() {\n\t\t\n\t\t\n\t\t\n\t\tfor (int s = 0; s < root.childerens.size(); s++) {\n\t\t\t\n\t\t\tif ( root.childerens.get(s).color == 0 ) {\n\t\t\t\tmaximumRoom = 0; \n\t\t\t\tDFS_Visit( root.childerens.get(s) ); \n\t\t\t\tpartions++; \n\t\t\t\t\t\t\n\t\t\t\troomSizes.add(maximumRoom);\n\t\t\t\troomColors.add(color);\n\t\t\t\tcolor++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tmaximumRoom = java.util.Collections.max(roomSizes);\n\t\t\n\t}\n\t\n\tpublic void DFS_Visit( Node s ){\n\t\tmaximumRoom++;\n\t\ts.color = -1;\n\t\t\n\t\tfor (int u = 0; u < s.childerens.size(); u++) {\n\t\t\t\n\t\t\tif ( s.childerens.get(u).color == 0 ) {\n\t\t\t\tDFS_Visit( s.childerens.get(u) );\n\t\t\t\ts.childerens.get(u).father = s;\n\t\t\t}\n\t\t}\n\t\ts.color = color;\n\t}\n\n\tpublic void calculateMaximumRoom( int[][] graphMatrix, int numOfRows, int numOfColumns ){ \n\t\t\n\t\tfor (int column = 0; column < numOfColumns; column++) {\n\t\t\t\n\t\t\tfor (int row = numOfRows-1; row > -1; row--) {\n\t\t\n\t\t\t\tif ( returnState( row-1, column, numOfRows, numOfColumns, 1 ) ){\n\t\t\t\t\n\t\t\t\t\tint tmp = roomSizes.get( root.find( column + row*numOfColumns+1 ).color-1 ) +\n\t\t\t\t\t\t\t  roomSizes.get( root.find( column + (row-1)*numOfColumns+1 ).color-1) ;\n\t\t\t\t\t\n\t\t\t\t\tif ( tmp > maximumRoomSize ){\n\t\t\t\t\t\tmaximumRoomSize = tmp;\n\t\t\t\t\t\tdirectionOfRemovedWall = \"N\";\n\t\t\t\t\t\trowOfRemovedWall = row + 1;\n\t\t\t\t\t\tcolumnOfRemovedWall = column +1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ( returnState( row, column+1, numOfRows, numOfColumns, 0 ) ) {\n\t\t\t\t\n\t\t\t\t\tint tmp = roomSizes.get( root.find( column + row*numOfColumns+1 ).color-1 ) +\n\t\t\t\t\t\t\t  roomSizes.get( root.find( column+1 + (row)*numOfColumns+1 ).color-1) ;\n\t\t\t\t\t\n\t\t\t\t\tif ( tmp > maximumRoomSize ){\n\t\t\t\t\t\tmaximumRoomSize = tmp;\n\t\t\t\t\t\tdirectionOfRemovedWall = \"E\";\n\t\t\t\t\t\trowOfRemovedWall = row + 1;\n\t\t\t\t\t\tcolumnOfRemovedWall = column +1;\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t}\n\t\n\tpublic boolean returnState ( int row, int column, int numOfRows, int numOfColumns, int d ) {\n\t\t\n\t\tif ( row < 0 || column >= numOfColumns ) return false;\n\t\t\n\t\t\n\t\t//north\n\t\tif ( d == 1 ){\n\t\t\tif ( root.find( column + (row)*numOfColumns+1 ).color == root.find( column + (row+1)*numOfColumns+1 ).color ) return false;\n\t\t}\n\t\t\n\t\t//east\n\t\telse if ( d == 0 ){\n\t\t\tif ( root.find( column + row*numOfColumns+1 ).color == root.find( column-1 + row*numOfColumns+1 ).color ) return false; \n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\t\n\t\n}\n\n\n\t\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\twhile(s.hasNext()){\n\t\t\tint n = s.nextInt();\n\t\t\tint sum = 0;\n\t\t\tsum =  n * (n + 2) * (2*n + 1) / 8;\n\t\t\tSystem.out.println(sum);\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1903_9__1_1462_12", "golden_code": "import java.util.Scanner;public class Main{public static void main(String[] args){Scanner in=new Scanner(System.in);while(true){int n=in.nextInt();if (n==-1){System.exit(0);}int[] arr1=new int[2*n];int[] arr2=new int[2*n];for(int i=0;i<2*n;i++){arr1[i]=in.nextInt();}for(int i=0;i<2*n;i++){if(i%2!=0&&i!=0&&i!=1){arr2[i]=arr1[i]-arr1[i-2];}else{arr2[i]=arr1[i];}}int sum=0;for(int i=0;i<2*n;i+=2){sum+=arr2[i]*arr2[i+1];}System.out.println(sum+\" miles\");}}}", "generated_code": "import java.util.*;\n\nclass Main {\n\n    public static void main(String[] k) {\n        Scanner p = new Scanner(System.in);\n        String w = \"VWXYZABCDEFGHIJKLMNOPQRSTU\", r;\n        while (true) {\n            if (p.nextLine().equals(\"ENDOFINPUT\")) {\n                break;\n            }\n            r = \"\";\n            for (char c : p.nextLine().toCharArray()) {\n                r += w.indexOf(c) < 0 ? c : w.charAt((w.indexOf(c) + 21) % 26);\n            }\n            p.nextLine();\n            System.out.println(r);\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_330__1_1001_434", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while(in.hasNext()){\n            int n = in.nextInt();\n            in.skip(\" \");\n            int m = in.nextInt();\n            System.out.println((n+m)+\"\");\n        }\n    }\n    \n}\n", "generated_code": "\nimport java.util.Scanner;\npublic class Main {\n\n  public static void main(String[] args) {\n\n                    // Scanner cin=new Scanner(System.in);\n                    // int a=cin.nextInt(),b=cin.nextInt();\n                    // System.out.println(a+b);\n\n\n\n        Scanner scanner = new Scanner(System.in);\n\n        while (scanner.hasNext()) {\n            int a = scanner.nextInt();\n            int b = scanner.nextInt();\n            System.out.println(a + b);\n     }\n}\n\n\n }\n\n\n\n\n", "score": 1.0}
{"id": "SHARE_1_2713_39__1_2713_59", "golden_code": "\nimport java.util.*;\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner inp = new Scanner(System.in);\n        \n        boolean flag=true;\n        int [] a = new int [0];\n        int i=1,c=0;\n        int n=inp.nextInt();\n        if (n>0)\n        while (flag){\n        \n        while (n>1){\n            if (n%2==0){\n                n=n/2;\n                i++;\n            }\n            else {\n                n=(n*3)+1;\n                i++;\n            }\n              \n        }\n        \n         a=java.util.Arrays.copyOf(a, a.length+1);\n         \n        a[c++]=i;\n        n=inp.nextInt();\n        i=1;\n         if(n>0)\n             flag=true;\n         else\n             flag=false;\n        }\n    for(int x=0;x<a.length;x++)    \n    System.out.println(a[x]);\n    }\n}\n", "generated_code": "import java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n       Scanner s = new Scanner(System.in);\n       while(s.hasNextInt()){\n           int n=s.nextInt();\n                    if(n==0){break;}\n           int sum=n;\n           int cnt=1;\n                    while(sum!=1){\n                        if(sum%2==0){\n                            sum/=2;\n                            cnt++;\n                        }else{\n                            sum=3*sum+1;\n                            cnt++;\n                    }\n                    }\n                    System.out.println(cnt);\n       }//end progrom\n    }\n    \n}\n", "score": 1.0}
{"id": "SHARE_1_2717_30__1_2717_34", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner scan = new Scanner(System.in);\n        int n;\n        String s1;\n        String s2;\n        String s1s;\n        String s2s;\n\n        String s12 = \"\";\n        String s;\n\n        while ((n = scan.nextInt()) != 0) {\n\n            s1s = s1 = scan.next();\n            s2s = s2 = scan.next();\n            s = scan.next();\n            int number = 0;\n            boolean a=true;\n            \n            \n            do {\n\n                number++;\n                s12=\"\";\n            for (int i = 0; i < n; i++) {\n                    s12 += s2.charAt(i) +\"\" +s1.charAt(i);\n                }\n      \n                \n                if (s12.equals(s)) {\n                    System.out.println(number);\n                    a=false;\n                }\n                s1=s12.substring(0, n);\n                s2=s12.substring(n, 2*n);\n                \n            }\n            while ((!s1.equals(s1s) || !s2.equals(s2s))&&a);\n\n            if(a)\n                System.out.println(-1);\n            \n        }\n\n    }\n}\n", "generated_code": "import java.util.Collection;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tCollection<String> lines = getLines();\n\t\t\n\t\tIterator<String> linesIt = lines.iterator();\n\t\twhile (linesIt.hasNext())\n\t\t{\n\t\t\tint length = Integer.parseInt(linesIt.next());\n\t\t\tString answer = getSeps(linesIt.next(), linesIt.next());\n\t\t\tString comp = linesIt.next();\n\t\t\t\n\t\t\tint counter = 1;\n\t\t\twhile(!comp.equals(answer))\n\t\t\t{\n\t\t\t\tif (counter == 50)\n\t\t\t\t\tbreak;\n\t\t\t\tanswer = getSeps(answer.substring(0, length), answer.substring(length, length * 2));\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t\tSystem.out.println(counter == 50? -1 : counter);\n\t\t}\n\t}\n\n\tstatic String getSeps(String a1, String a2)\n\t{\n\t\tchar[] c1 = a1.toCharArray();\n\t\tchar[] c2 = a2.toCharArray();\n\t\t\n\t\tint cc1 = 0;\n\t\tint cc2 = 0;\n\t\t\n\t\tStringBuilder res = new StringBuilder();\n\t\t\n\t\tfor (int i = 0; i < a1.length() + a2.length(); i++)\n\t\t{\n\t\t\tif (i % 2 == 0)\n\t\t\t\tres.append(c2[cc2++]);\n\t\t\telse\n\t\t\t\tres.append(c1[cc1++]);\n\t\t}\n\t\t\n\t\treturn res.toString();\n\t}\n\t\n\tpublic static Collection<String> getLines()\n\t{\n\t\tLinkedList<String> ints = new LinkedList<String>();\n\t\tScanner sc = gScan();\n\t\tString line;\n\t\twhile (!(line = sc.nextLine()).equals(\"0\"))\n\t\t{\n\t\t\tline = line.trim();\n\t\t\tints.add(line);\n\t\t}\n\t\treturn ints;\n\t}\n\t\n\tpublic static Scanner gScan()\n\t{\n\t\treturn new Scanner(System.in);\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_2090_0__1_106017_23", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        while(sc.hasNext()){\n            String s = sc.next();\n            String t = sc.next();\n            int counter=0;\n            String res=\"\";\n            for (int i = 0; i < t.length(); i++) {\n                if(s.charAt(counter) == t.charAt(i))\n                    res+=s.charAt(counter++);\n                if(counter == s.length())\n                    break;\n            }\n            if(res.equals(s))\n                System.out.println(\"Yes\");\n            else\n                System.out.println(\"No\");\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic  static  void  main(String[] args) \n\t{\n\t\tScanner inp = new  Scanner(System.in);\n\t\twhile(inp.hasNext())\n\t\t{\n\t\t\tint num = inp.nextInt();\n\t\t\tString dig = Integer.toString(num);\n\t\t\tint a = Integer.parseInt(\"\"+dig.charAt(0));\n\t\t\tint b = Integer.parseInt(\"\"+dig.charAt(1));\n\t\t\tint c = Integer.parseInt(\"\"+dig.charAt(2));\n\t\t\t\n\t\t\tint sum = (int)Math.pow(a, 3) + (int)Math.pow(b, 3) + (int)Math.pow(c, 3);\n\t\t\t\n\t\t\tSystem.out.println(sum==num? \"Yes\" : \"No\");\n\t\t}\n\t}\n}\n\n", "score": 0.0}
{"id": "SHARE_1_1119_7__1_1119_9", "golden_code": "import java.util.*;\nclass Main {\n\tpublic static void main(String[] z) {\n\t\tScanner w = new Scanner(System.in);\n\t\twhile (w.hasNext()) {\n\t\t\tint n = w.nextInt(), c = w.nextInt();\n\t\t\tTreeSet<Integer> a = new TreeSet<Integer>();\n\t\t\tif (n >= 1)\n\t\t\t\ta.add(1);\n\t\t\tif (n >= 3)\n\t\t\t\ta.add(2);\n\t\t\tq: for (int i = 3; i <= n; i += 2) {\n\t\t\t\tint g = i, k = 3;\n\t\t\t\twhile (k * k <= g)\n\t\t\t\t\tif (g % k == 0)\n\t\t\t\t\t\tcontinue q;\n\t\t\t\t\telse\n\t\t\t\t\t\tk += 2;\n\n\t\t\t\ta.add(i);\n\t\t\t}\n\t\t\tSystem.out.print(n + \" \" + c + \":\");\n\t\t\tInteger e[] = a.toArray(new Integer[0]);\n\t\t\tint h = a.size();\n\t\t\tif (c * 2 >= h) {\n\t\t\t\tc = h;\n\t\t\t\th = 0;\n\t\t\t} else if (h % 2 == 0) {\n\t\t\t\th = (h - c * 2) / 2;\n\t\t\t\tc = h + c * 2;\n\t\t\t} else {\n\t\t\t\th = (h - (c * 2 - 1)) / 2;\n\t\t\t\tc = h + c * 2 - 1;\n\t\t\t}\n\n\t\t\tfor (int i = h; i < c; i++)\n\t\t\t\tSystem.out.print(\" \" + e[i]);\n\n\t\t\tSystem.out.println(\"\\n\");\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.util.*;\n\nclass Main {\n\n\tpublic static void main(String[] u) {\n\t\tScanner b =new Scanner(System.in);\n\t\twhile(b.hasNext()){\n\t\t\tint n = b.nextInt(),c = b.nextInt(),x =c*2,o,s,j,i;\n\t\t\tTreeSet<Integer> t =new TreeSet<Integer>();\n\t\t\tk:for (i = 1;i<=n;i++){\n\t\t\t\tfor(j=2;j*j<=i;)\n\t\t\t\t\tif (i%j++==0)\n\t\t\t\t\t\tcontinue k;\n\t\t\t\tt.add(i);\n\t\t\t}\n\t\t\ts = t.size();\n\t\t\to = (s-(s%2!=0?x-1:x))/2;\n\t\t\tfor (i =0;i<o;i++){\n\t\t\t\tt.pollFirst();\n\t\t\t\tt.pollLast();\n\t\t\t}\n\t\t\ts=t.size();\n\t\t\tString v =n+\" \"+c+\":\";\n\t\t\tfor (i = 0;i<s;i++)\n\t\t\t\tv+=\" \"+t.pollFirst();\n\t\t\tSystem.out.println(v+'\\n');\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_2554_34__1_1001_494", "golden_code": "import java.util.*;\n\nclass Mandatory_Optional {\n    String MandatoryOptional_name;\n    LinkedList<String> Mandatory_SubFeature = new LinkedList<>();\n    LinkedList<String> Optional_SubFeature = new LinkedList<>();\n\n    boolean Mandatory_Validate(LinkedList<String> a) {\n        if (a.contains(this.MandatoryOptional_name)) {\n            for (String i : this.Mandatory_SubFeature) {\n                if (a.contains(i))\n                    continue;\n                else\n                    return false;\n            }\n        }\n        else {\n            for (String i : this.Mandatory_SubFeature) {\n                if (a.contains(i))\n                    return false;\n                else\n                    continue;\n            }\n        }\n        return true;\n    }\n\n    boolean Optional_Validate(LinkedList<String> a) {\n        if (!(a.contains(this.MandatoryOptional_name))) {\n            for (String i : this.Optional_SubFeature) {\n                if (a.contains(i))\n                    return false;\n                else\n                    continue;\n            }\n        }\n        return true;\n    }\n}\n\nclass Or {\n    String Or_name;\n    LinkedList<String> Or_SubFeature = new LinkedList<>();\n\n    boolean Or_Validate(LinkedList<String> a) {\n        if (a.contains((this.Or_name))) {\n            for (String i : this.Or_SubFeature) {\n                if (a.contains(i))\n                    return true;\n                else\n                    continue;\n            }\n            return false;\n        }\n        else {\n            for (String i : this.Or_SubFeature) {\n                if (a.contains(i))\n                    return false;\n                else\n                    continue;\n            }\n            return true;\n        }\n    }\n}\n\nclass Alternative {\n    String Alternative_name;\n    LinkedList<String> Alternative_SubFeature = new LinkedList<>();\n\n    boolean Alternative_Validate(LinkedList<String> a) {\n        int number = 0;\n        if (a.contains(this.Alternative_name)) {\n            for (String i : this.Alternative_SubFeature) {\n                if (a.contains(i)) {\n                    number++;\n                }\n                else\n                    continue;\n            }\n            if (number ==1)\n                return true;\n            else\n                return false;\n        }\n        else {\n            for (String i : this.Alternative_SubFeature) {\n                if (a.contains(i))\n                    return false;\n                else\n                    continue;\n            }\n            return true;\n        }\n    }\n}\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        LinkedList<String> Output = new LinkedList<>();\n        Scanner input1 = new Scanner(System.in);\n        String input = input1.nextLine();\n        input = input.replace(\" \", \"\");\n        String whole_input = input;\n\n        while (!(whole_input.equals(\"###\"))) {\n            LinkedList<Mandatory_Optional> All_MandatoryOptionals = new LinkedList<>();\n            All_MandatoryOptionals.clear();\n            LinkedList<Alternative> All_Alternatives = new LinkedList<>();\n            All_Alternatives.clear();\n            LinkedList<Or> All_Ors = new LinkedList<>();\n            All_Ors.clear();\n            LinkedList<String> Rights = new LinkedList<>();\n            Rights.clear();\n            LinkedList<String> Lefts = new LinkedList<>();\n            Lefts.clear();\n            LinkedList<String> Features = new LinkedList<>();\n            Features.clear();\n\n            while (!(input.equals(\"#\"))) {\n                if (input.contains(\"=\")) {\n                    if (input.contains(\"+\")) {\n                        int index = input.indexOf(\"=\");\n                        Mandatory_Optional MO_Object = new Mandatory_Optional();\n                        MO_Object.Mandatory_SubFeature.clear();\n                        MO_Object.Optional_SubFeature.clear();\n                        MO_Object.MandatoryOptional_name = input.substring(0 , index);\n                        Lefts.add(MO_Object.MandatoryOptional_name);\n                        input = input.substring(index + 1);\n                        while (input.contains(\"+\")) {\n                            index = input.indexOf(\"+\");\n                            String part = input.substring(0, index);\n                            if (part.charAt(0) == '?') {\n                                MO_Object.Optional_SubFeature.add(part.substring(1));\n                                Rights.add(part.substring(1));\n                            }\n                            else {\n                                MO_Object.Mandatory_SubFeature.add(part);\n                                Rights.add(part);\n                            }\n                            input = input.substring(index + 1);\n                        }\n                        if (input.charAt(0) == '?') {\n                            MO_Object.Optional_SubFeature.add(input.substring(1));\n                            Rights.add(input.substring(1));\n                        }\n                        else {\n                            MO_Object.Mandatory_SubFeature.add(input);\n                            Rights.add(input);\n                        }\n                        All_MandatoryOptionals.add(MO_Object);\n                    }\n                    else if (input.contains(\"|\")) {\n                        int index = input.indexOf(\"=\");\n                        Or Or_Object = new Or();\n                        Or_Object.Or_SubFeature.clear();\n                        Or_Object.Or_name = input.substring(0 , index);\n                        Lefts.add(Or_Object.Or_name);\n                        input = input.substring(index + 1);\n                        while (input.contains(\"|\")) {\n                            index = input.indexOf(\"|\");\n                            String part = input.substring(0 , index);\n                            Or_Object.Or_SubFeature.add(part);\n                            Rights.add(part);\n                            input = input.substring(index + 1);\n                        }\n                        Or_Object.Or_SubFeature.add(input);\n                        Rights.add(input);\n                        All_Ors.add(Or_Object);\n                    }\n                    else if (input.contains(\"^\")) {\n                        int index = input.indexOf(\"=\");\n                        Alternative Alternative_Object = new Alternative();\n                        Alternative_Object.Alternative_SubFeature.clear();\n                        Alternative_Object.Alternative_name = input.substring(0 , index);\n                        Lefts.add(Alternative_Object.Alternative_name);\n                        input = input.substring(index + 1);\n                        while (input.contains(\"^\")) {\n                            index = input.indexOf(\"^\");\n                            String part = input.substring(0, index);\n                            Alternative_Object.Alternative_SubFeature.add(part);\n                            Rights.add(part);\n                            input = input.substring(index + 1);\n                        }\n                        Alternative_Object.Alternative_SubFeature.add(input);\n                        Rights.add(input);\n                        All_Alternatives.add(Alternative_Object);\n                    }\n                    else {\n                        int index = input.indexOf(\"=\");\n                        Mandatory_Optional MO_Object = new Mandatory_Optional();\n                        MO_Object.Mandatory_SubFeature.clear();\n                        MO_Object.Optional_SubFeature.clear();\n                        MO_Object.MandatoryOptional_name = input.substring(0 , index);\n                        Lefts.add(MO_Object.MandatoryOptional_name);\n                        input = input.substring(index + 1);\n                        if (input.charAt(0) == '?') {\n                            MO_Object.Optional_SubFeature.add(input.substring(1));\n                            Rights.add(input.substring(1));\n                        }\n                        else {\n                            MO_Object.Mandatory_SubFeature.add(input);\n                            Rights.add(input);\n                        }\n                        All_MandatoryOptionals.add(MO_Object);\n                    }\n                }\n                else {\n                    Mandatory_Optional MO_Object = new Mandatory_Optional();\n                    MO_Object.MandatoryOptional_name = input;\n                    Lefts.add(input);\n                    All_MandatoryOptionals.add(MO_Object);\n                }\n\n\n                input = input1.nextLine();\n                input = input.replace(\" \", \"\");\n            }\n\n\n            String Head = \" \";\n            for (String left : Lefts) {\n                if (!(Rights.contains(left)))\n                    Head = left;\n                else\n                    continue;\n            }\n            Features.add(Head);\n            Features.addAll(Rights);\n\n\n            String test = input1.nextLine();\n            test = test.replace(\" \", \"\");\n            while (!(test.equals(\"##\"))) {\n                test = test.replace(\"{\", \"\");\n                test = test.replace(\"}\", \"\");\n                LinkedList<String> All_Tests = new LinkedList<String>();\n                All_Tests.clear();\n                while (test.contains(\",\")) {\n                    int index = test.indexOf(\",\");\n                    String element = test.substring(0 , index);\n                    test = test.substring(index + 1);\n                    All_Tests.add(element);\n                }\n                All_Tests.add(test);\n                if (Validate(All_Tests, All_MandatoryOptionals, All_Alternatives, All_Ors, Features, Head, Rights, Lefts))\n                    Output.add(\"Valid\");\n                else\n                    Output.add(\"Invalid\");\n                test = input1.nextLine();\n                test = test.replace(\" \", \"\");\n            }\n            Output.add(\"+++\");\n            input = input1.nextLine();\n            input = input.replace(\" \", \"\");\n            whole_input = input;\n        }\n        for (String i : Output) {\n            System.out.println(i);\n        }\n    }\n\n    static boolean Validate(LinkedList<String> All_Tests, LinkedList<Mandatory_Optional> All_MandatoryOptionals, LinkedList<Alternative> All_Alternatives, LinkedList<Or> All_Ors, LinkedList<String> Features, String Head, LinkedList<String> Rights, LinkedList<String> Lefts) {\n        boolean Answer = true;\n        for (Mandatory_Optional i : All_MandatoryOptionals) {\n            Answer = Answer & i.Mandatory_Validate(All_Tests);\n            Answer = Answer & i.Optional_Validate(All_Tests);\n        }\n        for (Alternative i : All_Alternatives) {\n            Answer = Answer & i.Alternative_Validate(All_Tests);\n        }\n        for (Or i : All_Ors) {\n            Answer = Answer & i.Or_Validate(All_Tests);\n        }\n        for (String i : All_Tests) {\n            if (!(Features.contains(i)))\n                return false;\n            else\n                continue;\n        }\n        for (String left : Lefts) {\n            if (!(left.equals(Head))) {\n                if (Rights.contains(left))\n                    continue;\n                else\n                    return false;\n            }\n        }\n        Answer = Answer & All_Tests.contains(Head);\n        return Answer;\n    }\n}\n\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "score": 0.0}
{"id": "SHARE_5_1005_46__1_2154_11", "golden_code": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Scanner;\n\npublic class Main {\n\n    static ArrayList<ArrayList<Integer>> courses;\n    static ArrayList<Integer> checked;\n    static ArrayList<Integer> ans;\n\n    public static void dfs(int node) {\n        checked.set(node, 1);\n\n        for (int i = 0; i < courses.get(node).size(); i++) {\n            if (checked.get(courses.get(node).get(i)) == -1) {\n                dfs(courses.get(node).get(i));\n            }\n        }\n        ans.add(node);\n    }\n\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        int n = cin.nextInt();\n        int m = cin.nextInt();\n\n        while (m != 0 || n != 0) {\n            //initial\n            courses = new ArrayList<ArrayList<Integer>>();\n            checked = new ArrayList<Integer>();\n            ans = new ArrayList<Integer>();\n\n            for (int i = 0; i < n; i++) {\n                ArrayList<Integer> c = new ArrayList<Integer>();\n                courses.add(c);\n                checked.add(-1);\n            }\n\n            //gereftane pishniaza va be soorate dar graph\n            for (int s = 0; s < m; s++) {\n                int i = cin.nextInt();\n                int j = cin.nextInt();\n\n                courses.get(i - 1).add(j - 1);\n            }\n            \n            for (int i = 0; i < courses.size(); i++) {\n                Collections.sort(courses.get(i));\n            }\n\n            //execution\n            for (int i = 0; i < courses.size(); i++) {\n                if (checked.get(i) == -1) {\n                    dfs(i);\n                }\n            }\n            \n            Collections.reverse(ans);\n\n            //print the best answer\n            for (int i = 0; i < ans.size(); i++) {\n                if (i < ans.size() - 1) {\n                    System.out.print(ans.get(i) + 1);\n                    System.out.print(\" \");\n                } else {\n                    System.out.println(ans.get(i) + 1);\n                }\n            }\n\n            ans.clear();\n\n            n = cin.nextInt();\n            m = cin.nextInt();\n        }\n\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n   public static void main(String[] args) {\n      Scanner in = new Scanner(System.in);\n      while (in.hasNext()) {\n         String[] n = in.next().split(\"\");\n         String s = \"\";\n         for (int i = 0; i < n.length; i++) {\n            if (i > 0) {\n               if (!m(n[i - 1]).equals(m(n[i]))) {\n                  s += m(n[i]);\n               }\n            } else {\n               s += m(n[i]);\n            }\n         }\n         System.out.println(s);\n      }\n   }\n\n   public static String m(String s) {\n      if (s.matches(\"(C|G|J|K|Q|S|X|Z)\")) {\n         return \"2\";\n      } else if (s.matches(\"(B|F|P|V)\")) {\n         return \"1\";\n      } else if (s.matches(\"(D|T)\")) {\n         return \"3\";\n      } else if (s.matches(\"(M|N)\")) {\n         return \"5\";\n      } else if (s.matches(\"(L)\")) {\n         return \"4\";\n      } else if (s.matches(\"(R)\")) {\n         return \"6\";\n      } else {\n         return \"\";\n      }\n   }\n}", "score": 0.0}
{"id": "SHARE_1_1319_77__1_1453_7", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        boolean allAnswered = false;\n        while (input.hasNext()) {\n            String[] arr = input.nextLine().split(\" \");\n            int destination = Integer.parseInt(arr[0]);\n            if (destination == 5280)\n                break;\n            if (allAnswered)\n                System.out.println();\n            int prevSpot = 0, currSpot;\n            String message;\n            int prevDist, currDist;\n            for (int i = 1; i < arr.length; i++) {\n                prevDist = Math.abs(destination - prevSpot);\n                currSpot = Integer.parseInt(arr[i]);\n                currDist = Math.abs(destination - currSpot);\n                if (currSpot == destination)\n                    message = \"found it!\";\n                else if (currDist < prevDist)\n                    message = \"warmer.\";\n                else if (currDist == prevDist)\n                    message = \"same.\";\n                else\n                    message = \"colder.\";\n                System.out.println(\"Moving from \" + prevSpot + \" to \" + currSpot + \": \" + message);\n                prevSpot = currSpot;\n            }\n            allAnswered = true;\n        }\n    }\n}", "generated_code": "import java.util.*;\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner s=new Scanner(System.in);\n\t\tint color [][]=new int[3][16];\n\t\t//GET 16COLOR\n\t\tfor (int i = 0; i < 16; i++) {\n\t\t\tcolor[0][i]=Integer.parseInt(s.next());\n\t\t\tcolor[1][i]=Integer.parseInt(s.next());\n\t\t\tcolor[2][i]=Integer.parseInt(s.next());\n\t\t}\n//---------------------------------------------\n\t\tint r=s.nextInt();\n\t\tint b=s.nextInt();\n\t\tint g=s.nextInt();\n\t\twhile(r!=-1){\n\t\t\tdouble d=999999999;\n\t\t\tdouble d2=0;\n\t\t\tint point=0;\n\t\t\tfor (int i = 0; i < 16; i++) {\n\t\t\t\td2=Math.pow(r-color[0][i],2)+Math.pow(g-color[1][i],2)+Math.pow(b-color[2][i],2);\n\t\t\t\tif(d>d2){\n\t\t\t\t\td=d2;\n\t\t\t\t\tpoint=i;\n\t\t\t\t}\n\t\t\t}\n\t\t\t//(255,255,255) maps to (255,255,255)\n\t\t\tSystem.out.printf(\"(%d,%d,%d) maps to (%d,%d,%d)\\n\",r,g,b,color[0][point],color[1][point],color[2][point]);\n\t\t\tr=s.nextInt();\n\t\t\tg=s.nextInt();\n\t\t\tb=s.nextInt();\n\t\t}\n\t}\n\t\n}\n", "score": 0.0}
{"id": "SHARE_1_2847_50__1_2847_62", "golden_code": "import java.util.*;\n\npublic class Main {\npublic static void main(String[] arg){\nScanner input=new Scanner(System.in);\nint key=input.nextInt();\nint temp;\ndouble sum;\nint[] arr;\nwhile(key-->0){\nsum=0;\ntemp=input.nextInt();\narr=new int[temp];\n\nfor(int i=0;i<temp;i++)\n{\narr[i]=input.nextInt();\nsum+=arr[i];\n}\nArrays.sort(arr);\ndouble A=(arr[temp-1]+arr[0])/2.0;\ndouble B=sum/temp;\nif(Math.abs(A-B)<1)\nSystem.out.println(\"Yes\");\nelse\nSystem.out.println(\"No\");\n}\n}\n}", "generated_code": "import java.util.Arrays;\nimport java.util.Scanner;\npublic class Main{\n    static Scanner input=new Scanner(System.in);\n    public static void main(String[] args){\n        int n=input.nextInt();\n        for(int i=0;i<n;i++){\n            int n1=input.nextInt();\n            double sum=0,A,B;\n            int[] arr=new int[n1];\n            for(int j=0;j<n1;j++){\n                arr[j]=input.nextInt();\n                sum+=arr[j];\n            }\n            Arrays.sort(arr);\n            A=sum/n1;\n            int M=arr[arr.length-1];\n            int m=arr[0];\n            B=(m+M)/2;\n            if(Math.abs(A-B)<1)\n                System.out.println(\"Yes\");\n            else\n                System.out.println(\"No\");\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_106017_60__1_1018_55", "golden_code": "\nimport java.util.Scanner;\n\n\npublic class Main{\n    static Scanner in = new Scanner(System.in);\n    public static void main(String[] args) {\n        while(in.hasNext())\n        {\n        int n=in.nextInt();\n        String s=\"\"+n;\n        int m=0;\n        for(int i=0;i<s.length();i++)\n        {\n            int k=Integer.parseInt(\"\"+s.charAt(i));\n            m+=k*k*k;\n        }\n        if(m==n)\n            System.out.println(\"Yes\");\n        else\n            System.out.println(\"No\");\n    }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\n\nclass Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner inSC = new Scanner(System.in);\n\t\tint num;\n\t\tboolean flag = false;\n\t\twhile ((num = inSC.nextInt()) != 0) {\n\t\t\tint[] PlayerA = new int[num],PlayerB=new int[num];\n\t\t\tint ScoreA=0,ScoreB=0;\n\t\t\tfor (int i = 0; i < num; i++) { // READ A\n\t\t\t\tPlayerA[i] = inSC.nextInt();\n\t\t\t}\n\t\t\tfor (int i = 0; i < num; i++) { // READ B\n\t\t\t\tPlayerB[i] = inSC.nextInt();\n\t\t\t\tif (PlayerA[i] != PlayerB[i]) {\n\t\t\t\t\tif (PlayerA[i]>PlayerB[i]) { //A>B\n\t\t\t\t\t\tif (PlayerA[i]+PlayerB[i] == 3) ScoreB += 6;\n\t\t\t\t\t\telse if (PlayerA[i]-PlayerB[i]==1) {\n\t\t\t\t\t\t\tScoreB += PlayerA[i]+PlayerB[i];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tScoreA += PlayerA[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse { // B>A\n\t\t\t\t\t\tif (PlayerA[i]+PlayerB[i] == 3) ScoreA += 6;\n\t\t\t\t\t\telse if (PlayerB[i]-PlayerA[i]==1) {\n\t\t\t\t\t\t\tScoreA += PlayerA[i]+PlayerB[i];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tScoreB += PlayerB[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (flag) System.out.println();\n\t\t\tflag = true;\n\t\t\tSystem.out.println(\"A has \" + ScoreA + \" points. B has \" + ScoreB + \" points.\");\n\t\t}\n\t\tinSC.close();\n\t}\n\n}", "score": 0.0}
{"id": "SHARE_1_2733_3__5_1013_21", "golden_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tint t = s.nextInt();\n\t\tfor (int i = 0; i < t; i++) {\n\t\t\tint n = s.nextInt();\n\t\t\tint[] p = new int[n];\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tp[j] = s.nextInt();\n\t\t\t}\n\t\t\t//System.out.println(buildStringFromP(p));\n\t\t\tint[] w=buildWFromString(buildStringFromP(p));\n\t\t\tfor(int k=0;k<w.length;k++)\n\t\t\t\tSystem.out.print(w[k]+\" \");\n\t\t}\n\n\t}\n\n\tstatic String buildStringFromP(int[] p) {\n\t\tString result = \"\";\n\t\tfor (int i = 0; i < p[0]; i++)\n\t\t\tresult += \"(\";\n\t\tresult += \")\";\n\t\t//if(p.length==1)\n\t\t//\treturn result;\n\t\tfor (int i = 1; i < p.length; i++) {\n\t\t\tfor (int j = 0; j < p[i] - p[i - 1]; j++)\n\t\t\t\tresult += \"(\";\n\t\t\tresult += \")\";\n\t\t}\n\t\treturn result;\n\t}\n\n\tstatic int[] buildWFromString(String s) {\n\t\tint[] result = new int[s.length() / 2];\n\t\tint counter=0;\n\t\tfor(int i=0;i<s.length();i++){\n\t\t\tchar c=s.charAt(i);\n\t\t\tif(c==')'){\n\t\t\t\tint numOfRight=1;\n\t\t\t\tint numOfLeft=0;\n\t\t\t\tint index=i-1;\n\t\t\t\twhile(numOfRight!=numOfLeft){\n\t\t\t\t\tif(s.charAt(index)=='(')\n\t\t\t\t\t\tnumOfLeft++;\n\t\t\t\t\telse if(s.charAt(index)==')')\n\t\t\t\t\t\tnumOfRight++;\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\tresult[counter]=numOfRight;\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t\t\t\n\t\t}\n\t\treturn result;\n\t}\n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\nclass Tree{\n\tpublic Tree(int x, int y){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\t\n\tpublic int getX(){\n\t\treturn x;\n\t}\n\t\n\tpublic int getY(){\n\t\treturn y;\n\t}\n\t\n\tpublic void getDirecions(){\n\t\tSystem.out.println(\"x = \" + x + \", y = \" + y);\n\t}\n\t\n\tprivate int x;\n\tprivate int y;\n}\n\npublic class Main{\n\t\n\tprivate static double pointInLineEquation(double a, double b, double c, Tree t){\n\t\tif ( b == 0 )\n\t\t\treturn 0.0;\n\t\treturn a*t.getX() + b*t.getY() + c;\n\t}\n\t\n\tprivate static double[] coefficientsOfTheEquation(Tree t1, Tree t2){\n        \n\t\tdouble[] co = new double[3];\n\t\tco[0] = t1.getY() - t2.getY();\n\t\tco[1] = - (t1.getX() - t2.getX());\n\t\tco[2] = - ( co[0]*t1.getX() + co[1]*t1.getY() );\n\t\t\n\t\tif ( co[1] <= 0 ){\n\t\t\tco[0] = -co[0];\n\t\t\tco[1] = -co[1];\n\t\t\tco[2] = -co[2];\t\t\t\n\t\t}\n\t\t\n\t\treturn co;\n\t}\n\t\n\tprivate static double clacDistance(Tree t1, Tree t2, Tree t3){\n\t\tdouble a = t1.getY() - t2.getY();\n\t\tdouble b = - (t1.getX() - t2.getX());\n\t\tdouble c = - ( a*t1.getX() + b*t1.getY() );\n\t\t\n\t\tif ( b <= 0 ){\n\t\t\ta = -a;\n\t\t\tb = -b;\n\t\t\tc = -c;\t\t\t\n\t\t}\n\t\t\t\n\t\t\n\t\treturn Math.abs( a*t3.getX() + b*t3.getY() + c ) / Math.sqrt(a*a + b*b);\n\t}\n\t\n\tprivate static ArrayList <Tree> findPush(ArrayList <Tree> t){\n\t\t\n\t\tint min = 0;\n\t\tfor (int i = 1; i < t.size(); i++) {\n\t\t\tif(t.get(i).getX() < t.get(min).getX())\n\t\t\t\tmin = i;\n\t\t}\n\t\tTree left = t.remove(min);\n\t\t\n\t\tint max = 0;\n\t\tfor (int i = 1; i < t.size(); i++) {\n\t\t\tif(t.get(i).getX() > t.get(max).getX())\n\t\t\t\tmax = i;\n\t\t}\n\t\tTree right = t.remove(max);\n\t\t\n\t\tArrayList <Tree> push = new ArrayList<Tree>();\n\t\tpush.add(left);\n\t\tpush.add(right);\n\t\tfindUp(t, push, right, left);\n\t\tfindDown(t, push, right, left);\n\t\t\n\t\treturn push;\n\t}\n\t\n\tprivate static void findUp(ArrayList <Tree> t, ArrayList <Tree> push, Tree right, Tree left ){\n\t\t\t\t\n\t\tArrayList <Tree> upperTrees = new ArrayList <Tree>() ;\n\t\tdouble[] co = coefficientsOfTheEquation(right, left);\n\t\tfor (int i = 0; i < t.size(); i++)\n\t\t\tif ( pointInLineEquation(co[0], co[1], co[2], t.get(i)) > 0 )\n\t\t\t\tupperTrees.add(t.get(i));\n\t\t\n\t\tif ( upperTrees.size() == 0 )\n\t\t\treturn;\n\t\t\n\t\tint max = 0;\n\t\tfor (int i = 1; i < upperTrees.size(); i++)\n\t\t\tif ( clacDistance(right, left, upperTrees.get(i)) > clacDistance(right, left, upperTrees.get(max)) ){\n\t\t\t\tmax = i;\n\t\t\t}\n\t\tTree temp = upperTrees.remove(max);\n\t\tpush.add(temp);\n\t\t\n\t\tfindUp(upperTrees, push, temp, left);\n\t\tfindUp(upperTrees, push, right, temp);\n\t}\n\t\n\tprivate static void findDown(ArrayList <Tree> t, ArrayList <Tree> push, Tree right, Tree left ){\n\t\t\n\t\tArrayList <Tree> bottomTrees = new ArrayList <Tree>() ;\n\t\tdouble[] co = coefficientsOfTheEquation(right, left);\n\t\tfor (int i = 0; i < t.size(); i++)\n\t\t\tif ( pointInLineEquation(co[0], co[1], co[2], t.get(i)) < 0 )\n\t\t\t\tbottomTrees.add(t.get(i));\n\t\t\n\t\tif ( bottomTrees.size() == 0 )\n\t\t\treturn;\n\t\t\n\t\tint max = 0;\n\t\tfor (int i = 1; i < bottomTrees.size(); i++)\n\t\t\tif ( clacDistance(right, left, bottomTrees.get(i)) > clacDistance(right, left, bottomTrees.get(max)) )\n\t\t\t\tmax = i;\n\t\t\n\t\tTree temp = bottomTrees.remove(max);\n\t\tpush.add(temp);\n\t\t\n\t\tfindDown(bottomTrees, push, temp, left );\n\t\tfindDown(bottomTrees, push, right, temp);\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner (System.in);\n\t\t\n\t\tArrayList <Tree> trees = new ArrayList <Tree>();\n\t\tint t = in.nextInt();\n\t\t\n\t\tfor (int j = 0; j < t; j++) {\n\t\t\tTree newTree = new Tree(in.nextInt(), in.nextInt());\n\t\t\ttrees.add(newTree);\n\t\t}\n\t\t\n\t\tArrayList <Tree> push = new ArrayList <Tree>();\n\t\tpush = findPush(trees);\n\t\tSystem.out.println(push.size());\n\t\t\t\n\t\tin.close();\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1884_27__1_1884_8", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tint cases;\n\t\tScanner scan = new Scanner(System.in);\n\t\tcases = scan.nextInt();\n\t\twhile (cases-- > 0) {\n\t\t\tint firstCapacity = scan.nextInt();\n\t\t\tint years = scan.nextInt();\n\t\t\tint bondsNumber = scan.nextInt();\n\t\t\tBond[] bonds = new Bond[bondsNumber];\n\t\t\tfor (int i = 0; i < bondsNumber; i++) {\n\t\t\t\tint weight = scan.nextInt();\n\t\t\t\tint profit = scan.nextInt();\n\t\t\t\tbonds[i] = new Bond(weight, profit);\n\t\t\t}\n\t\t\tint max=firstCapacity;\n//\t\t\tint max=0;\n\t\t\tfor (int i = 0; i < years; i++) {\n\t\t\t\tint[][] dp = new int[bondsNumber+1][firstCapacity/1000+1];\n\t\t    \t\n\t\t\t    for(int u=0;u<=(firstCapacity/1000);u++){\n\t\t\t    \t dp[1][u]=(((Math.abs(u/(bonds[0].weight/1000)))*(bonds[0].profit)));\n\t\t\t    }\n\t\t\t    \n\t\t\t\tfor (int j = 2; j <= bondsNumber; j++) {\n\t\t\t\t\tfor (int k = 0; k <= firstCapacity/1000; k++) {\n\t\t\t\t\t\tif(k-bonds[j-1].weight/1000<0){\n\t\t\t\t\t\t\tdp[j][k]=dp[j-1][k];\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tif((dp[j-1][k])<(dp[j][(k-(bonds[j-1].weight/1000))]+bonds[j-1].profit))\n\t\t\t\t\t\t\t\tdp[j][k]=(dp[j][(k-(bonds[j-1].weight/1000))]+bonds[j-1].profit);\n\t\t\t\t\t\t\telse\n\t\t\t\t    \t\t\tdp[j][k]=(dp[j-1][k]);\n\t\t\t    \t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n//\t\t\t\tSystem.out.println(firstCapacity+\" \"+ bondsNumber);\n\t\t\t\tfirstCapacity += dp[bondsNumber][firstCapacity/1000];\n\t\t\t\tmax = firstCapacity;\n\t\t\t}\n\t\t\tSystem.out.println(max);\n\t\t}\n\t}\n}\n\nclass Bond {\n\tpublic Bond(int weight, int profit) {\n\t\tthis.weight = weight;\n\t\tthis.profit = profit;\n\t}\n\n\tpublic int weight;\n\tpublic int profit;\n}", "generated_code": "import java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.text.BreakIterator;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.PriorityQueue;\nimport java.util.Queue;\nimport java.util.Scanner;\nimport java.io.BufferedReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.io.InputStream;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tScanner scan = new Scanner(System.in);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n}\n\nclass TaskC {\n\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\n\t\tint t = in.nextInt();\n\t\tfor (int i = 0; i < t; i++) {\n\t\t\tint n = in.nextInt(), y = in.nextInt(), m = in.nextInt(), r[] = new int[11], p[] = new int[46000], v[] = new int[11];\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tv[j] = in.nextInt();\n\t\t\t\tr[j] = in.nextInt();\n\t\t\t}\n\t\t\tfor (int j = 0; j < p.length; j++) {\n\t\t\t\tp[j] = 0;\n\t\t\t\tfor (int j2 = 0; j2 < m; j2++) {\n\t\t\t\t\tif (j - (v[j2] / 1000) >= 0\n\t\t\t\t\t\t\t&& r[j2] + p[j - (v[j2] / 1000)] > p[j])\n\t\t\t\t\t\tp[j] = r[j2] + p[j - (v[j2] / 1000)];\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int j = 0; j < y; j++) {\n\t\t\t\tn += p[n / 1000];\n\t\t\t}\n\t\t\tout.println(n);\n\t\t}\n\t}\n}\n\nclass InputReader {\n\tBufferedReader br;\n\tStringTokenizer st;\n\n\tpublic InputReader(InputStream in) {\n\t\tbr = new BufferedReader(new InputStreamReader(in));\n\t\tst = null;\n\t}\n\n\tpublic String next() {\n\t\twhile (st == null || !st.hasMoreTokens()) {\n\t\t\ttry {\n\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn st.nextToken();\n\t}\n\n\tpublic int nextInt() {\n\t\treturn Integer.parseInt(next());\n\t}\n\n\tpublic long nextLong() {\n\t\treturn Long.parseLong(next());\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_100__1_1001_155", "golden_code": "import java.util.Scanner;\n\npublic class Main{\n    public static void main( String[] a ){\n        Scanner i = new Scanner( System.in );\n       \n        while( i.hasNext() ){\n            System.out.println( i.nextInt() + i.nextInt() );\n        }\n        \n    }\n}", "generated_code": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner reader=new Scanner(System.in);\n        while(reader.hasNext()){\n            int a=reader.nextInt();\n            int b=reader.nextInt();\n            System.out.println(a+b);\n        }\n    }\n}\n\n", "score": 1.0}
{"id": "SHARE_1_1009_132__1_1009_78", "golden_code": "import java.util.Scanner;\nclass Main {\n\tstatic boolean adj[]=new boolean [178858000];\n\t\n\tpublic static void main(String s[]) {\n\t\tScanner cin = new Scanner(System.in);\n\t\tdouble sum=0;\n\t\tfor(int i=0;i<12;i++)\n\t\t{\n\t\t\tdouble val=cin.nextDouble();\n\t\t\tsum+=val;\n\t\t}\n\t\tSystem.out.printf(\"$%.2f\\n\",sum/12);\n\t\tadj[0]=true;\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner c = new Scanner(System.in);\n        float s = 0;\n        for (int i = 0; i < 12; i++) {\n            s += c.nextFloat();\n        }\n        System.out.println(\"$\" + Math.floor((s / 12.0) * 100) / 100);\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1660_1__1_1660_29", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint n = input.nextInt();\n\t\tString winner = \"\";\n\t\tint WPen = 0;\n\t\tint WScore = 0;\n\t\tfor(int t = 0; t < n; t++){\n\t\t\tString name = input.next();\n\t\t\tint sub = 0;\n\t\t\tint time = 0;\n\t\t\tint score = 0;\n\t\t\tint pen = 0;\n\t\t\tfor(int i = 0; i < 4; i++){\n\t\t\t\tsub = input.nextInt();\n\t\t\t\ttime = input.nextInt();\n\t\t\t\tif(time != 0){\n\t\t\t\t\tscore++;\n\t\t\t\t\tpen += 20*(sub-1) + time;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(WScore < score){\n\t\t\t\tWScore = score;\n\t\t\t\twinner = name;\n\t\t\t\tWPen = pen;\n\t\t\t}\n\t\t\telse if(WScore == score){\n\t\t\t\tif(WPen > pen){\n\t\t\t\t\twinner = name;\n\t\t\t\t\tWPen = pen;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(winner + \" \" + WScore + \" \" + WPen);\n\t}\n}\n", "generated_code": "//1021\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n       Scanner in = new Scanner(System.in);\n       String s1, s2 = \"\";\n       int solved=0,penalty=0,sub,time,t1,t2;\n       for(int i=in.nextInt();i>0;i--){\n           time = sub = 0;\n           s1 = in.next();\n           for(int j=0;j<4;j++){\n              t1 = in.nextInt();\n              t2= in.nextInt();\n              if(t2!=0){\n                  ++sub;\n                  time+=--t1*20+t2;\n              }\n           }\n           if(sub>solved){\n               s2 = s1;\n               solved = sub;\n               penalty = time;\n           }else if(solved == sub&&time<penalty){\n                   s2 = s1;\n                   solved = sub;\n                   penalty = time;\n           }\n       }\n        System.out.printf(\"%s %d %d\\n\", s2,solved,penalty);\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_446__1_1001_117", "golden_code": "import java.util.*;\n\npublic class Main {\n\tpublic static void main(String args[]){\n\t\tint a,b;\n\t\tScanner cin=new Scanner(System.in);\n\t\twhile(cin.hasNext()){\n\t\t\ta=cin.nextInt();\n\t\t\tb=cin.nextInt();\n\t\t\tSystem.out.println((a+b));\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner ;\nclass Main\n{\n   public static void main (String[] args )\n  {\n\tScanner scan = new Scanner (System.in);\n\t\n\twhile (scan.hasNext()) {\n\t\tSystem.out.println((scan.nextInt()+scan.nextInt()));\n\t}\n  }\n}", "score": 1.0}
{"id": "SHARE_1_2859_1__1_2554_2", "golden_code": "import java.util.Scanner;\n\npublic class Main\n{\n\n\tpublic static void main(String[] args) \n\t{\n\t\tScanner input=new Scanner(System.in);\n\t\tint n=input.nextInt();\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tint f=0;\n\t\t\tint x=input.nextInt(),A[]=new int[2*x];\n\t\t\tfor(int j=0;j<2*x;j++)\n\t\t\t{\n\t\t\t\tA[j]=input.nextInt();\n\t\t\t}\n\t\t\tboolean yes=false;\n\t\t\tfor(int k=0;k<=2*x-2;k+=2)\n\t\t\t{\n\t\t\t\tint j=k;\n\t\t\t\t\n\t\t\t\twhile(true)\n\t\t\t\t{\n\t\t\t\t\tif(A[j]+f<A[j+1])\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tf=f+A[j]-A[j+1];\n\t\t\t\t\tj+=2;\n\t\t\t\t\tif(j>2*x-2)\n\t\t\t\t\t\tj=0;\n\t\t\t\t\t\t\n\t\t\t\t\tif(j==k)\n\t\t\t\t\t{\n\t\t\t\t\t\tyes=true;\n\t\t\t\t\t\tSystem.out.println(k/2);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(yes)\n\t\t\t\t\tbreak;\n\t\t\t\tf=0;\t\n\t\t\t}\n\t\t\tif(!yes)\n\t\t\t\tSystem.out.println(\"it's a trap\");\n\t\t\t\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        LinkedList<Model> models = input_analysis() ;\n        for(int temp=0 ; temp < models.size() ; temp++) {\n            evaluator(models.get(temp));\n            System.out.println(\"+++\");\n        }\n    }\n    //creates new mandatory feature\n    static boolean parents_checker(String [] features_name , int not_to_check)\n    {\n        for(int temp=0 ; temp <features_name.length  ; temp++) {\n            if (temp == not_to_check)\n                continue;\n            if (features_name[temp].equals(\"u\"))\n                return false;\n        }\n        return true;\n    }\n\n    static LinkedList<Model> input_analysis()\n    {\n        LinkedList<Model> moudles = new LinkedList<>();\n        String temp=\"\";\n        Scanner scan = new Scanner(System.in);\n        temp = scan.nextLine();\n        while ( !temp.equals(\"###\"))\n        {\n            LinkedList<Feature_defenition> feature_list = new LinkedList<>();\n            LinkedList<String[]> expression_to_evaluate = new LinkedList<>();\n            while (!temp.equals(\"#\") ){\n                feature_list.add(feature_defenition_analysis(temp));\n                temp =scan.nextLine();\n            }\n            temp = scan.nextLine();\n            while(!temp.equals(\"##\")){\n                expression_to_evaluate.add(temp.trim().replaceAll(\"\\\\s+\" , \"\").substring(1).split(\"[,{}]\"));\n                temp = scan.nextLine();\n            }\n            temp = scan.nextLine();\n            moudles.add(new Model(feature_list,expression_to_evaluate));\n        }\n        return moudles;\n    }\n    //it analysis the every moudle sentence componentd\n    static Feature_defenition feature_defenition_analysis(String temp){\n        String temp_type;\n        String[] temp_compontet;\n        if (temp.contains(\"|\"))\n        {\n            temp_type = \"or\";\n            temp_compontet = temp.trim().replaceAll(\"\\\\s+\" , \"\").split(\"[|=]\");\n        }\n        else if (temp.contains(\"^\"))\n        {\n            temp_type = \"xor\";\n            temp_compontet = temp.trim().replaceAll(\"\\\\s+\" , \"\").split(\"[/^=]\");\n        }\n        else\n        {\n            temp_type = \"mandatory\";\n            temp_compontet = temp.trim().replaceAll(\"\\\\s+\" , \"\").split(\"[+=]\");\n        }\n        return new Feature_defenition(temp_compontet,temp_type);\n    }\n\n\n    static void evaluator(Model model)\n    {\n        for(int temp2=0; temp2<model.featurs_to_evaluate_expressions.size() ; temp2++)\n        {\n            String[][] list_to_evaluate = new String[2][model.featurs_to_evaluate_expressions.get(temp2).length];\n            list_to_evaluate[0] = model.featurs_to_evaluate_expressions.get(temp2);\n            Arrays.fill(list_to_evaluate[1], \"u\");\n\n            if(Feature.name_finder(model.featurs_to_evaluate_expressions.get(temp2), model.root.name_getter())==-1)\n                System.out.println(\"Invalid\");\n            else if(model.root.evaluate(list_to_evaluate))\n            {\n                if (parents_checker(list_to_evaluate[1],Feature.name_finder(model.featurs_to_evaluate_expressions.get(temp2), model.root.name_getter())))\n                    System.out.println(\"Valid\");\n                else\n                    System.out.println(\"Invalid\");\n            }\n            else\n                System.out.println(\"Invalid\");\n        }\n    }\n}\n\nclass Model {\n    LinkedList<Feature_defenition> feature_defenitions = new LinkedList<>();\n    LinkedList<String[]> featurs_to_evaluate_expressions = new LinkedList<>();\n    Feature root ;\n\n\n    Model(LinkedList<Feature_defenition> features, LinkedList<String[]> expressions) {\n        this.featurs_to_evaluate_expressions = expressions;\n        this.feature_defenitions = features;\n\n        if (this.feature_defenitions.get(0).feature_type.equals(\"mandatory\"))\n            this.root = Mandatory_feature.mandatory_maker(feature_defenitions, 0);\n        else if (this.feature_defenitions.get(0).feature_type.equals(\"or\"))\n            this.root=Or_feature.Or_maker(this.feature_defenitions, 0);\n        else\n            this.root = Xor_feature.Xor_maker( this.feature_defenitions, 0 );\n    }\n}\n\n\nclass Xor_feature extends Feature {\n\n    LinkedList<Feature> Xor_sub_feature =new LinkedList<>() ;\n\n    public boolean evaluate(String[][] features_to_evaluate){\n        int name_index=0;\n        int number_of_features_in_list=0;\n        int Xor_found_feature_index=0;\n        for(int temp=0 ; temp<Xor_sub_feature.size() ; temp++) {\n            name_index = name_finder(features_to_evaluate[0], this.Xor_sub_feature.get(temp).name);\n            if (name_index != -1) {\n                number_of_features_in_list++;\n                features_to_evaluate[1][name_index]=\"c\";\n                Xor_found_feature_index = temp;\n            }\n        }\n        if(number_of_features_in_list!=1)\n            return false;\n        if(! Xor_sub_feature.get(Xor_found_feature_index).evaluate(features_to_evaluate))\n            return false;\n        return true;\n    }\n\n    public Xor_feature(LinkedList<Feature> sub_features , String name){\n        super(name);\n        this.Xor_sub_feature = sub_features;\n    }\n\n\n    public static Feature Xor_maker (LinkedList<Feature_defenition> feature_defenition , int feature_index) {\n        LinkedList<Feature> XOR_sub_features = new LinkedList<>();\n        String [] feature_components_name_temp = feature_defenition.get(feature_index).feature_components_name;\n        for (int temp=1 ; temp < feature_components_name_temp.length ; temp++)\n        {\n            Feature feature_temp = feature_finder(feature_defenition ,feature_components_name_temp[temp] );\n            if (feature_temp == null)\n                feature_temp = new Basic_feature(feature_components_name_temp[temp]);\n            XOR_sub_features.add(feature_temp);\n        }\n        feature_defenition.remove(feature_index);\n        return new Xor_feature(XOR_sub_features, feature_components_name_temp[0]);\n\n    }\n}\n\n\nclass Or_feature extends Feature {\n    LinkedList<Feature> Or_sub_features = new LinkedList<>() ;\n\n    public boolean evaluate(String [][] feautures_to_evaluate){\n        int feature_number=0;\n        for (int temp=0 ; temp < this.Or_sub_features.size() ; temp ++)\n        {\n            int name_index =  name_finder(feautures_to_evaluate[0], this.Or_sub_features.get(temp).name);\n            if (name_index!= -1) {\n                if(! this.Or_sub_features.get(temp).evaluate(feautures_to_evaluate))\n                    return false;\n                feautures_to_evaluate[1][name_index] = \"c\";\n                feature_number++;\n            }\n        }\n        if(feature_number ==0)\n            return false;\n        return true;\n    }\n    public Or_feature(LinkedList<Feature> sub_features , String name)\n    {\n        super(name);\n        this.Or_sub_features = sub_features;\n    }\n\n\n    public static Feature Or_maker(LinkedList<Feature_defenition> feature_defenition , int feature_index){\n        LinkedList<Feature> OR_sub_features = new LinkedList<>();\n        String[] feature_components_name_temp = feature_defenition.get(feature_index).feature_components_name;\n        for (int temp=1 ; temp < feature_components_name_temp.length ; temp++)\n        {\n            Feature feature_temp = feature_finder(feature_defenition ,feature_components_name_temp[temp] );\n            if (feature_temp == null)\n                feature_temp = new Basic_feature(feature_components_name_temp[temp]);\n            OR_sub_features.add(feature_temp);\n        }\n        return new Or_feature(OR_sub_features, feature_components_name_temp[0]);\n\n    }\n}\n\n\nclass Mandatory_feature extends Feature {\n\n    private LinkedList<Feature> mandatory_sub_feature = new LinkedList<>();\n    private LinkedList<Feature> optional_sub_feature = new LinkedList<>() ;\n    //function to evaluate a mandatory_type_object\n    public boolean evaluate(String[][] features_to_evaluate)\n    {\n        for(int temp=0 ; temp< this.mandatory_sub_feature.size() ; temp++)\n        {\n            // checks if the mandatory feature is on the features to evaluate list\n            int name_index =  name_finder(features_to_evaluate[0] , this.mandatory_sub_feature.get(temp).name) ;\n            if (name_index==-1)\n                return false;\n            features_to_evaluate[1][name_index] = \"c\";\n            if(!this.mandatory_sub_feature.get(temp).evaluate(features_to_evaluate))\n                return false;\n        }\n        for (int temp=0 ; temp<this.optional_sub_feature.size() ; temp++)\n        {\n            int name_index = name_finder(features_to_evaluate[0] , this.optional_sub_feature.get(temp).name);\n            if ( name_index != -1)\n            {\n                if(! this.optional_sub_feature.get(temp).evaluate(features_to_evaluate))\n                    return false;\n                features_to_evaluate[1][name_index] = \"c\";\n            }\n        }\n        return true;\n    }\n\n    public Mandatory_feature(LinkedList<Feature> mandatory_sub_feature , LinkedList<Feature> optional_sub_features , String name){\n        super(name);\n        this.mandatory_sub_feature = mandatory_sub_feature;\n        this.optional_sub_feature = optional_sub_features;\n    }\n\n    public static Feature mandatory_maker(LinkedList<Feature_defenition> feature_defenition , int feature_index){\n        LinkedList<Feature> mandatory_sub_features = new LinkedList<>();\n        LinkedList <Feature> optional_sub_features = new LinkedList<>();\n        String[] feature_components_name_temp = feature_defenition.get(feature_index).feature_components_name;\n        for (int temp=1 ; temp < feature_components_name_temp.length ; temp++)\n        {\n            int optional_indicator=0;\n            if (feature_components_name_temp[temp].contains(\"?\"))\n            {\n                optional_indicator++;\n                feature_components_name_temp[temp]= feature_components_name_temp[temp].substring(1);\n            }\n            Feature feature_temp = feature_finder(feature_defenition ,feature_components_name_temp[temp] );\n            if (feature_temp == null)\n                feature_temp = new Basic_feature(feature_components_name_temp[temp]);\n            if (optional_indicator==1)\n                optional_sub_features.add(feature_temp);\n            else\n                mandatory_sub_features.add(feature_temp);\n        }\n        return new Mandatory_feature(mandatory_sub_features,optional_sub_features,feature_components_name_temp[0]);\n    }\n\n}\n\n\nclass Feature_defenition {\n    public String[] feature_components_name ;\n    public String feature_type ;\n    public Feature_defenition(String[] names , String type){\n        this.feature_components_name = names;\n        this.feature_type = type;\n    }\n\n}\n\n\nabstract class Feature {\n    String name;\n    public abstract boolean evaluate(String[][] features_to_evaluate);\n\n    public Feature(String name){\n\n        this.name = name;\n    }\n\n    public String name_getter() { return this.name;}\n\n\n    public static int name_finder(String[] string_to_evaluate , String name){\n        for(int temp=0 ; temp< string_to_evaluate.length ; temp++)\n        {\n            if(string_to_evaluate[temp].equals(name))\n                return temp;\n        }\n        return -1;\n    }\n\n    static Feature feature_finder (LinkedList<Feature_defenition> feature_defenition, String name)\n    {\n        for (int temp=0 ; temp < feature_defenition.size() ; temp++) {\n            if (feature_defenition.get(temp).feature_components_name[0].equals(name))\n            {\n                if (feature_defenition.get(temp).feature_type.equals(\"mandatory\"))\n                    return(Mandatory_feature.mandatory_maker(feature_defenition , temp));\n                else if (feature_defenition.get(temp).feature_type.equals(\"or\"))\n                    return(Or_feature.Or_maker(feature_defenition, temp));\n                else\n                    return (Xor_feature.Xor_maker(feature_defenition, temp));\n            }\n        }\n        return null;\n    }\n}\n\n\nclass Basic_feature extends Feature {\n    public boolean evaluate(String [][] not_important){\n        return true;\n    }\n    public  Basic_feature(String name)\n    {\n        super(name);\n    }\n}\n\n\n\n\n", "score": 0.0}
{"id": "SHARE_1_2578_22__1_2578_78", "golden_code": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tString s = scan.nextLine();\n\t\tfor(int i = 0 ; i < n ;i++){\n\t\t\ts = scan.nextLine();\n\t\t\tString low =s.toLowerCase();\n\t\t\tint bcount=0;\n\t\t\tint gcount=0;\n\t\t\tfor(int j = 0 ; j <low.length() ; j++){\n\t\t\t\tif(low.charAt(j)=='b')\n\t\t\t\t\tbcount++;\n\t\t\t\tif(low.charAt(j)=='g')\n\t\t\t\t\tgcount++;\n\t\t\t}\n\t\t\tif(gcount>bcount)\n\t\t\t\tSystem.out.println(s+\" is GOOD\");\n\t\t\telse if(gcount<bcount)\n\t\t\t\tSystem.out.println(s+\" is A BADDY\");\n\t\t\telse if(gcount==bcount)\n\t\t\t\tSystem.out.println(s+\" is NEUTRAL\");\n\t\t}\n\t}\n}", "generated_code": "/* 1119 shareCode */\n//accepted\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args){\n        Scanner cin=new Scanner(System.in);\n        int nameCounter=cin.nextInt();\n        cin.nextLine();\n        for(int i=1;i<=nameCounter;i++){\n            String name=cin.nextLine();\n            int gCounter=0,bCounter=0;\n            for(int j=0;j<name.length();j++)\n                if(name.charAt(j)=='g' || name.charAt(j)=='G')\n                    gCounter++;\n                else if(name.charAt(j)=='b' || name.charAt(j)=='B')\n                    bCounter++;\n            if(gCounter>bCounter)\n                System.out.println(name+\" is GOOD\");\n            else if(bCounter>gCounter)\n                System.out.println(name+\" is A BADDY\");\n            else\n                System.out.println(name+\" is NEUTRAL\");\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_446__1_1001_6", "golden_code": "import java.util.*;\n\npublic class Main {\n\tpublic static void main(String args[]){\n\t\tint a,b;\n\t\tScanner cin=new Scanner(System.in);\n\t\twhile(cin.hasNext()){\n\t\t\ta=cin.nextInt();\n\t\t\tb=cin.nextInt();\n\t\t\tSystem.out.println((a+b));\n\t\t}\n\t}\n}", "generated_code": "import java.util.*;\npublic class Main\n{\npublic static void main(String[]args)\n{\n   Scanner inp=new Scanner (System.in);\n   while(inp.hasNextInt())\n    {\n        int a=inp.nextInt(),b=inp.nextInt();\n        System.out.println(a+b);\n}\n}\n}", "score": 1.0}
{"id": "SHARE_5_1009_17__1_101382_8", "golden_code": "import java.util.* ;\npublic class Main{\n\tpublic static Scanner sc ;\n\tpublic static void main(String[] args) {\n\t\tsc = new Scanner(System.in);\n\t\tint num = sc.nextInt() ;\n\t\tfor(int i=0 ; i<num ; i++){\n\t\t\tint j = sc.nextInt() ;\n\t\t\tgame temp = new game(j) ;\n\t\t}\n\t}\n\tpublic static class game{\n\t\tint[] p ;\n\t\tint[][] m;\n\t\tint[][] s;\n\t\tpublic game(int d){\n\t\t\tp = new int[d] ;\n\t\t\tfor(int i=0 ; i<d ; i++)\n\t\t\t\tp[i] = sc.nextInt() ;\n\t\t\tgo() ;\n\t\t//\tfinish() ;\n\t\t}\n\t\tpublic void go(){\n\t\t\tint n = p.length - 1;\n\t\t\tm = new int[n][n];\n\t\t\ts = new int[n][n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tm[i] = new int[n];\n\t\t\t\tm[i][i] = 0;\n\t\t\t\ts[i] = new int[n];\n\t\t\t}\n     \t   \tfor (int ii = 1; ii < n; ii++) {\n     \t   \t    for (int i = 0; i < n - ii; i++) {\n     \t        \tint j = i + ii;\n     \t        \tm[i][j] = Integer.MAX_VALUE;\n     \t        \tfor (int k = i; k < j; k++) {\n     \t        \t\tint q = m[i][k] + m[k+1][j] + p[i]*p[k+1]*p[j+1];\n     \t        \t\tif (q < m[i][j]) {\n     \t        \t\t\tm[i][j] = q;\n     \t        \t\t\ts[i][j] = k;\n     \t        \t\t}\n     \t        \t}\n     \t        }\n     \t    }\n     \t    System.out.println(m[0][n-1]) ;\n\t\t}\n\t\tpublic void finish(){\n\t\t\tfor(int i=0 ; i<s.length ; i++){\n\t\t\t\tfor(int j=0 ; j<s.length ; j++){\n\t\t\t\t\tSystem.out.print(s[i][j] + \"\\t\") ;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"\") ;\n\t\t\t}\n\t\t\tSystem.out.println(\"-----------------------------\") ;\n\t\t\tfor(int i=0 ; i<m.length ; i++){\n\t\t\t\tfor(int j=0 ; j<m.length ; j++){\n\t\t\t\t\tSystem.out.print(m[i][j] + \"\\t\") ;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"\") ;\n\t\t\t}\n\t\t\tSystem.out.println(\"\\n\\n\") ;\n\t\t} \n\t}\n}", "generated_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        BigInteger two = BigInteger.valueOf(2);\n        BigInteger base = BigInteger.valueOf(2);\n        \n        BigInteger[] res = new BigInteger[1001];\n        res[1] = BigInteger.valueOf(0);\n        res[2] = BigInteger.ONE;\n        res[3] = BigInteger.ONE;\n        for (int i=4 ; i<=1000 ; i++) {\n            res[i] = res[i-2].add(base);\n            base = base.multiply(two);\n        }\n        \n        Scanner sc = new Scanner(System.in);\n        while (sc.hasNext())\n            System.out.println(res[sc.nextInt()]);\n    }\n}", "score": 0.0}
{"id": "SHARE_1_106024_12__1_106024_3", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\n\t\tScanner inp=new Scanner(System.in);\n\t\tint N=inp.nextInt();\n\t\tint M=inp.nextInt();\n\n\t\twhile(N!=0 && M!=0)\n\t\t{\n\t\t\tint[][] in=new int[N][M];\n\t\t\tint c=0;\n\t\t\tfor(int i=0;i<N;i++)\n\t\t\t\tfor(int j=0;j<M;j++)\n\t\t\t\t{\n\t\t\t\t\tin[i][j]=inp.nextInt();\n\t\t\t\t\tif(in[i][j]==1)\n\t\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\tif(c==(M*N))\n\t\t\t{\n\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\tN=inp.nextInt();\n\t\t\t\tM=inp.nextInt();\t\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tboolean check=false;\n\t\t\tfor(int i=0;i<N;i++)\n\t\t\t{\n\t\t\t\tfor(int j=0;j<M;j++)\n\t\t\t\tif(i!=N-1)\n\t\t\t\t{\n\t\t\t\t\tif(in[i][j]==0 && in[i+1][j]==0 )\n\t\t\t\t\t\tcheck=true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(check)\n\t\t\t\t{\n\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\tN=inp.nextInt();\n\t\t\t\tM=inp.nextInt();\t\n\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\tfor(int j=0;j<M;j++)\n\t\t\t{\n\t\t\t\tfor(int i=0;i<N;i++)\n\t\t\t\tif(j!=M-1)\n\t\t\t\t{\n\t\t\t\t\tif(in[i][j]==0 && in[i][j+1]==0 )\n\t\t\t\t\t\tcheck=true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(check)\n\t\t\tSystem.out.println(\"No\");\n\t\t\telse System.out.println(\"Yes\");\n\t\t\t\n\t\t\tN=inp.nextInt();\n\t\t\tM=inp.nextInt();\t\n\t\t\n\t\t\n\t\t\t\n\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.*;\nimport java.lang.*;\nclass Main\n{\n\tpublic static String aghayetabe(int str[][],int n,int m)\n\t{\n\t\tint i,j,s=0;\n\t\tfor(i=0;i<n-1;i++)\n\t\t{\n\t\t\tfor(j=0;j<m-1;j++)\n\t\t\t{\n\t\t\t\tif(((str[i][j]==0) && (str[i][j+1]==0)) || ((str[i][j]==0) && (str[i+1][j]==0)))\n\t\t\t\t\treturn\"No\";\n\t\t\t\tif(str[i][j]==1)\n\t\t\t\t\ts++;\n\t\t\t}\n\t\t}\n\t\t//System.out.println(s);\n\t\tif(s==(n-1)*(m-1))\n\t\t{\n\t\t\tfor(i=0;i<m;i++)\n\t\t\t{\n\t\t\t\tif(str[n-1][i]==1)\n\t\t\t\t\ts++;\n\t\t\t}\n\t\t\t//System.out.println(s);\n\t\t\tif(s==(n-1)*(m-1)+m)\n\t\t\t{\n\t\t\t\tfor(i=0;i<n;i++)\n\t\t\t\t{\n\t\t\t\t\tif(str[i][m-1]==1)\n\t\t\t\t\t\ts++;\n\t\t\t\t}\n\t\t\t\t//System.out.println(s);\n\t\t\t}\n\t\t}\n\t\tif(s==n*m+1)\n\t\t\treturn\"No\";\n\t\tfor(i=0;i<m-1;i++)\n\t\t{\n\t\t\tif((str[n-1][i]==0) && (str[n-1][i+1]==0))\n\t\t\t\treturn\"No\";\n\t\t}\n\t\tfor(i=0;i<n-1;i++)\n\t\t{\n\t\t\tif((str[i][m-1]==0) && (str[i+1][m-1]==0))\n\t\t\t\treturn\"No\";\n\t\t}\n\t\treturn\"Yes\";\n\t}\n\tpublic static void main(String[] args)\n\t{\n\t\tint i,j;\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile(scan.hasNextInt())\n\t\t{\n\t\t\tint n = scan.nextInt();\n\t\t\tint m = scan.nextInt();\n\t\t\tif((n==0) && (m==0))\n\t\t\t\tbreak;\n\t\t\tint str[][] = new int[n][m];\n\t\t\tfor(i=0;i<n;i++)\n\t\t\t{\n\t\t\t\tfor(j=0;j<m;j++)\n\t\t\t\t{\n\t\t\t\t\tstr[i][j] = scan.nextInt();\n\t\t\t\t}\n\t\t\t}\n\t\t\tString a = aghayetabe(str,n,m);\n\t\t\tSystem.out.println(a);\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1462_6__1_1073_2", "golden_code": "import java.util.Scanner;\n\n class Main {\n\n\tpublic static void main(String[] args) {\n\t\tchar a[] = { 'V', 'W', 'X', 'Y', 'Z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',\n\t\t\t\t'P', 'Q', 'R', 'S', 'T', 'U' };\n\t\tScanner input = new Scanner(System.in);\n\t\twhile (true) {\n\t\t\tString s = input.nextLine();\n\t\t\tif (s.equals(\"ENDOFINPUT\")) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ts = input.nextLine();\n\t\t\tStringBuilder r = new StringBuilder();\n\t\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\t\tif (s.charAt(i)<65||s.charAt(i)>90) {\n\t\t\t\t\tr.append(s.charAt(i));\n\t\t\t\t} else {\n\t\t\t\t\tr.append(a[(s.charAt(i) - 65) % 26]);\n\t\t\t\t}\n\t\t\t}\n\t\t\ts = input.nextLine();\n\t\t\tSystem.out.println(r);\n\t\t}\n\t}\n\n}\n", "generated_code": "\nimport java.util.Scanner;\n//ShareCode\n\npublic class Main{\n    \n    public static void main(String args[]){\n        Scanner cin=new Scanner(System.in);\n        int cas=1;\n        while(true){\n            int z = cin.nextInt();\n            int i = cin.nextInt();\n            int m = cin.nextInt();\n            long l = cin.nextLong();\n            if(z==0 && i==0 && m==0 && l==0) break;\n            int counter=0;\n            long rand=-1;\n            long last=l;\n            while(rand!=last){\n                rand=(z*l+i)%m;\n                l=rand;\n                counter++;\n                if(counter>100000){\n                    last=rand;\n                    rand=(z*l+i)%m;\n                    counter=0;\n                }\n            }\n            System.out.println(\"Case \"+cas+\": \"+counter);\n            cas++;\n        }\n    }//main Method\n}//Class Main", "score": 0.0}
{"id": "SHARE_1_1006_70__1_108018_1", "golden_code": "import java.util.* ;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in) ;\n\t\tboolean flag = true ;\n\t\tDouble input = sc.nextDouble() ;\n\t\twhile(flag){\n\t\t\tDouble sum = 0.0 ;\n\t\t\tDouble i=2.0 ;\n\t\t\twhile(sum < input){\n\t\t\t\tsum += 1/i ;\n\t\t\t\ti++ ;\n\t\t\t}\n\t\t\tSystem.out.println((int)(i-2) + \" card(s)\") ;\n\t\t\tinput = sc.nextDouble() ;\n\t\t\tif(input == 0.0)\n\t\t\t\tflag = false ;\n\t\t}\t\t\n\t}\n}", "generated_code": "\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.PriorityQueue;\nimport java.util.Scanner;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author SAM\n */\nclass Yal implements Comparable<Yal> {\n    public int temper;\n    public int first;\n    public int second;\n    Yal(int inFirst,int inSecond,int inTemper){\n       temper=inTemper;\n       int i=0;\n       first=inFirst;\n       second=inSecond;\n    }\n\n    @Override\n    public int compareTo(Yal o) {\n        if(temper<o.temper)\n            return -1;\n        if(temper>o.temper)\n            return 1;\n        else\n            return 0;\n    }\n}\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    static PriorityQueue<Yal> edges=new PriorityQueue<Yal>();\n    static ArrayList<Integer> vertexes=new ArrayList<Integer>();\n    static ArrayList<Integer> selectedEdges=new ArrayList<Integer>();\n    static int source,destination;\n    public static void main(String[] args) {\n        // TODO code application logic here\n        int n,m;\n        int first,second,temper;\n        int max=0;\n        Yal temp;\n        Scanner input=new Scanner(System.in);\n        while(input.hasNextInt()){\n            max=0;\n            n=input.nextInt();        \n            m=input.nextInt();\n            source=input.nextInt();\n            destination=input.nextInt();\n            vertexes.add(source);\n            for(int i=0;i<m;i++){\n                first=input.nextInt();\n                second=input.nextInt();\n                input.nextInt();\n                temper=input.nextInt();\n                temp=new Yal(first,second,temper);\n                edges.add(temp);\n            }\n            Prim(m);\n            for(int i=0;i<selectedEdges.size();i++){\n                if(selectedEdges.get(i)>max)\n                    max=selectedEdges.get(i);\n            }\n            System.out.println(max);\n            vertexes.clear();\n            edges.clear();\n            selectedEdges.clear();\n            \n        }\n    }\n    static void Prim(int m){\n        Yal temp;\n        int max=0;\n        int tempInt;\n        while( !vertexes.contains(source) || !vertexes.contains(destination) ){\n            temp=edges.remove();\n            if(!vertexes.contains(temp.first) || !vertexes.contains(temp.second) ){\n                if(!vertexes.contains(temp.first) && vertexes.contains(temp.second) ){\n                    vertexes.add(temp.first);\n                    selectedEdges.add(temp.temper);\n                }\n                else if(!vertexes.contains(temp.second) && vertexes.contains(temp.first)){\n                    vertexes.add(temp.second);\n                    selectedEdges.add(temp.temper);\n                }\n                else if(!vertexes.contains(temp.first) && !vertexes.contains(temp.second)){\n                    Prim2(m);\n                    edges.add(temp);\n                }\n            }\n        }\n        \n    }\n    static void Prim2(int m){\n        Yal temp;\n        int max=0;\n        int tempInt;\n        if( !vertexes.contains(source) || !vertexes.contains(destination) ){\n            temp=edges.remove();\n            if(!vertexes.contains(temp.first) || !vertexes.contains(temp.second) ){\n                if(!vertexes.contains(temp.first) && vertexes.contains(temp.second) ){\n                    vertexes.add(temp.first);\n                    selectedEdges.add(temp.temper);\n                }\n                else if(!vertexes.contains(temp.second) && vertexes.contains(temp.first)){\n                    vertexes.add(temp.second);\n                    selectedEdges.add(temp.temper);\n                }\n                else if(!vertexes.contains(temp.first) && !vertexes.contains(temp.second)){\n                    Prim2(m);\n                    edges.add(temp);\n                }\n            }\n        }\n        \n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2499_29__1_101329_5", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String args[]) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint att[][] = { { 30, 70, 500 }, { 26, 60, 200 }, { 36, 80, 300 } };\n\t\tString f[] = { \"Mid-field\", \"Forward\", \"Defense\" };\n\t\twhile (true) {\n\t\t\tint a, w, s;\n\t\t\ta = input.nextInt();\n\t\t\tw = input.nextInt();\n\t\t\ts = input.nextInt();\n\t\t\tif (a == 0 && w == 0 && s == 0)\n\t\t\t\tbreak;\n\t\t\tString ans = \"\";\n\t\t\tfor (int i = 0; i < 3; i++) {\n\t\t\t\tif (!(att[i][0] < a) && !(att[i][1] > w) && !(att[i][2] > s)) {\n\t\t\t\t\tans = ans + f[i]+\" \";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ans != \"\")\n\t\t\t\tSystem.out.println(ans.trim());\n\t\t\telse\n\t\t\t\tSystem.out.println(\"No positions\");\n\t\t}\n\t}\n}\n", "generated_code": "\nimport java.util.Scanner;\n\n\npublic class Main {\n    public static void main(String[] args){\n        Scanner in=new Scanner(System.in);\n        int N=in.nextInt();\n        double a;int b;\n        for(int n=0;n<N;n++){\n            a=in.nextDouble();\n            if(a==0||a==1||a==2)\n                System.out.println(2);\n            else{\n                if(a%2==0)\n                    a++;\n                boolean f=true;\n                while(f){\n                    boolean ff=isPrime(a);\n                    if(ff)\n                        f=false;\n                    else{\n                        a=a+2;\n                    }\n                }\n                System.out.printf(\"%.0f\\n\",a);\n            }\n        }\n    }\n    public static boolean isPrime(double a){\n        int b;\n        for(b=(int)Math.sqrt(a);b>=2;b--)\n            if(a%b==0)\n                break;\n        if(b>1)\n            return false;\n        return true;\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_315__1_1001_467", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        int x1,x2;\n        while(input.hasNext())\n        {\n            x1=input.nextInt();\n            x2=input.nextInt();\n            x1+=x2;\n            System.out.println(x1);\n        }\n    }\n    \n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1660_37__1_109017_3", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n   public static void main(String[] args) {\n      Scanner in = new Scanner(System.in);\n      int n = in.nextInt();\n      ArrayList<ArrayList<Integer>> al = new ArrayList<ArrayList<Integer>>();\n      String[] names = new String[n];\n      int k = 0;\n      while (n-- > 0) {\n         String s = in.next();\n         ArrayList<Integer> t = new ArrayList<Integer>();\n         t.add(k);\n         names[k] = s;\n         k++;\n         int[][] a = new int[4][2];\n         int sol = 0;\n         for (int i = 0; i < 4; i++) {\n            a[i][0] = in.nextInt();\n            a[i][1] = in.nextInt();\n            if (a[i][1] != 0) {\n               sol++;\n            }\n         }\n         t.add(sol);\n         t.add(pen(a));\n         al.add(t);\n      }\n      for (int i = 0; i < al.size() - 1; i++) {\n         for (int j = 1; j < al.size(); j++) {\n            if (al.get(i).get(1) < al.get(j).get(1)) {\n               al.remove(i);\n               break;\n            }\n         }\n      }\n      if (al.size() == 1) {\n         System.out.println(names[al.get(0).get(0)] + \" \" + al.get(0).get(1) + \" \" + al.get(0).get(2));\n      } else {\n         for (int i = 0; i < al.size() - 1; i++) {\n            for (int j = 1; j < al.size(); j++) {\n               if (al.get(i).get(2) > al.get(j).get(2)) {\n                  al.remove(i);\n                  break;\n               }\n            }\n         }\n         System.out.println(names[al.get(0).get(0)] + \" \" + al.get(0).get(1) + \" \" + al.get(0).get(2));\n      }\n   }\n\n   public static int pen(int[][] a) {\n      int pen = 0;\n      for (int[] i : a) {\n         if (i[0] == 1 && i[1] != 0) {\n            pen += i[1];\n         } else if (i[1] != 0) {\n            pen += ((i[0] - 1) * 20) + i[1];\n         }\n      }\n      return pen;\n   }\n}", "generated_code": "import java.util.*;\npublic class Main\n{\n\tstatic Scanner scan = new Scanner(System.in);\n\tpublic static void main(String[] args)\n    {\n\t\twhile(scan.hasNext())\n\t\t{\n\t\t\tString s = scan.next();\n\t\t\tif(s.equals(\"0\"))\n\t\t\t\tbreak;\n\t\t\tint n = 0 ;\n\t\t\tfor(int i = 0 ; i < s.length() ; i++)\n\t\t\t\tn+=(s.charAt(i)-'0');\n\t\t\tSystem.out.println((n%9==0) ? 9 : n%9);\n\t\t}\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_36__1_1001_247", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile (sc.hasNext())\n\t\t{\n\t\t\tint a = sc.nextInt(), b = sc.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\t\n\tpublic static void main(String args[])\n\t{\n\t\tScanner cin = new Scanner(System.in);\n\t\twhile(cin.hasNext())\n\t\t{\n\t\t\tSystem.out.println(cin.nextInt()+cin.nextInt());\n\t\t}\n\t}\n\t\n\t\n\t\n\t\n}", "score": 1.0}
{"id": "SHARE_1_1009_78__1_1099_28", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner c = new Scanner(System.in);\n        float s = 0;\n        for (int i = 0; i < 12; i++) {\n            s += c.nextFloat();\n        }\n        System.out.println(\"$\" + Math.floor((s / 12.0) * 100) / 100);\n    }\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        \n        Scanner s= new Scanner(System.in);\n        int cnt=1;\n        while(true){\n         int n= s.nextInt();\n            if(n==0){\n                break;}\n         int ave=0; \n         int num [] = new int [n];\n for (int i = 0; i < n; i++) {\n                   num[i]=s.nextInt();\n                   ave+=num[i];\n                }\n          ave=ave/n;\n          int sum=0;\n            for (int i = 0; i < n; i++) {\n                if(num[i]>ave){\n                    sum+=num[i]-ave;\n                }else{\n                    sum+=Math.abs(num[i]-ave);\n                }\n            }\n            System.out.printf(\"Set #%d\\n\",cnt++);\n            System.out.printf(\"The minimum number of moves is %d.\\n\\n\",(sum/2));\n   \n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2742_2__1_1001_407", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint num_scenarios = scanner.nextInt();\n\t\t\n\t\tfor(int i = 0; i < num_scenarios; i++){\n\t\t\t\n\t\t\tfloat money = scanner.nextFloat();\n\t\t\tint num_foods = scanner.nextInt();\n\t\t\t\t\t\t\n\t\t\tString[] foods = new String[num_foods];\n\t\t\tfloat[] prices = new float[num_foods];\n\t\t\tint size = 0;\n\t\t\t\n\t\t\tfor(int j = 0; j < num_foods; j++){\n\t\t\t\tString temp = scanner.next();\n\t\t\t\t\n\t\t\t\tif(temp.contains(\"spicy\") ||\n\t\t\t\t\t\ttemp.contains(\"sugar\") ||\n\t\t\t\t\t\ttemp.contains(\"pepper\") ||\n\t\t\t\t\t\ttemp.contains(\"duck\")){\n\t\t\t\t\tscanner.nextFloat();\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\tfoods[size] = temp;\n\t\t\t\tprices[size] = scanner.nextFloat();\n//\t\t\t\tSystem.out.println(prices[size]);\n\t\t\t\tsize++;\n\n\t\t\t}\n\n//\t\t\tSystem.out.println(size);\n\t\t\t\n//\t\t\tprintArray(prices);\n\t\t\tquickSort(prices, 0, size-1);\n//\t\t\tprintArray(prices);\n\n\t\t\tfloat sum = maxsum(prices, money, size-1);\n\t\t\t\n\t\t\tSystem.out.printf(\"%.2f\", sum);\n\t\t\tSystem.out.println();\n\t\t}\n\t\tscanner.close();\n\t}\n\t\n/*\n1\n98.6 8\nduck 0.1\ncoolpepper 1.0\nspicyfish 10.0\nsupersugar 9.0\nriseonly 5.0\nlovelyduckling 32.5\nkaohongshu 90.0\nmengjichi 8.5\n*/\n\tpublic static float maxsum(float[] prices, float money, int lastElement){\n\t\t\n//\t\tSystem.out.println(prices[lastElement] + \" \" + (money - prices[lastElement]));\n\n\t\tif(lastElement == -1) return 0;\n\t\tif(money - prices[lastElement] < 0) return maxsum(prices, money, lastElement-1);\n\t\tif(lastElement == 0) return prices[lastElement];\n\t\t\n\t\treturn Math.max(\n\t\t\t\tprices[lastElement] + maxsum(prices, money-prices[lastElement], lastElement-1), \n\t\t\t\tmaxsum(prices, money, lastElement-1));\n//\t\treturn sum;\n\t}\n\t\n\tpublic static void quickSort(float[] arr, int low, int high) {\n\n\t\tif (arr == null || arr.length == 0)\n\t\t\treturn;\n\n\t\tif (low >= high)\n\t\t\treturn;\n\n\t\t//pick the pivot\n\t\tint middle = low + (high - low) / 2;\n\t\tfloat pivot = arr[middle];\n\n\t\t//make left < pivot and right > pivot\n\t\tint i = low, j = high;\n\t\twhile (i <= j) {\n\t\t\twhile (arr[i] < pivot) {\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\twhile (arr[j] > pivot) {\n\t\t\t\tj--;\n\t\t\t}\n\n\t\t\tif (i <= j) {\n\t\t\t\tfloat temp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\n\t\t//recursively sort two sub parts\n\t\tif (low < j)\n\t\t\tquickSort(arr, low, j);\n\n\t\tif (high > i)\n\t\t\tquickSort(arr, i, high);\n\t}\n\t\n\tpublic static void printArray(float[] x) {\n\t\tfor (float a : x)\n\t\t\tSystem.out.print(a + \" \");\n\t\tSystem.out.println();\n\t}\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String []args)\n\t{\n\t\tScanner input=new Scanner(System.in);\n\t\twhile(input.hasNext())\n\t\t{\n\t\tint a=input.nextInt();\n\t\tint b=input.nextInt();\n\t\t\tSystem.out.println(a+b);}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_2535_3__1_1002_17", "golden_code": "\nimport java.util.Scanner;\n\n\npublic class Main{\n\n   public static void main(String[] args) {\n\n      Scanner in = new Scanner(System.in);\n      int i, j, k, l, n , nums[] = new int[70000];\n      float beg , end;\n      String names[] = new String[55];\n      for(i = 0; i < 70000; i++)\n          nums[i] = 0;\n      n = Integer.valueOf(in.nextLine());\n      for(i = 1; i <= n; i++)\n      {\n          names[i] = in.nextLine();\n          beg = in.nextFloat();\n          end = Float.valueOf(in.nextLine());\n          j = Math.round(beg*10);\n          k = Math.round(end*10);\n          for(;j <= k; j++)\n              nums[j] = i;\n      }\n      n = in.nextInt();\n      for(i = 0; i < n; i++)\n      {\n            j = in.nextInt();\n            System.out.print(\"Galactic year \" + j + \": \");\n            if(nums[j*10] == 0)\n                System.out.println(\"None\");\n            else\n            {\n                l = nums[j*10];\n                System.out.print(names[l]);\n                for(k = 1; k < 10; k++)\n                    if(nums[j*10+k] != l && nums[j*10 + k] > 0)\n                    {\n                        l = nums[j * 10 + k];\n                        System.out.print(\", \" + names[l]);\n                    }\n                System.out.println();\n            }\n      }\n   }\n\n}", "generated_code": "import java.util.Scanner;public class Main{public static void main(String[] args){Scanner input = new Scanner(System.in);int n,max;int[][] point;double[] dist,m;do{max=0;int x=input.nextInt();int y=input.nextInt();double r=input.nextDouble();if (r<=0)break;n=input.nextInt();point=new int[n][2];dist=new double[n];m=new double[n];for(int i=0;i<n;i++){point[i][0]=input.nextInt()-x;point[i][1]=input.nextInt()-y;dist[i]=Math.sqrt(point[i][0]*point[i][0]+point[i][1]*point[i][1]);try{m[i]=point[i][1]/point[i][0];}catch(ArithmeticException e){m[i]=1e9;}}int left,right;double lineX=0;boolean exp;for(int i=0;i<n;i++){left=right=0;for(int j=0;j<n;j++){if(dist[j]<=r){if (i==j){left++;right++;}else{try{exp=true;lineX= m[i]!=1e9 ? point[j][1]/m[i]:0;}catch(ArithmeticException e){exp=false;if(point[j][1]>=point[i][1])left++;if(point[j][1]<=point[i][1])right++;}if(exp){if(point[j][0]>=lineX)left++;if(point[j][0]<=lineX)right++;}}}}if(Math.max(left,right)>max)max=Math.max(left,right);}System.out.println(max);}while(true);}}", "score": 0.0}
{"id": "SHARE_1_1099_30__1_1662_17", "golden_code": "import java.util.Scanner;\npublic class Main{\n    public static void main(String[] args) {\n        Scanner p = new Scanner(System.in);\n        int S = 0;\n        long e = p.nextLong();\n        while (e != 0) {\n            S++;\n            long w = 0;\n            long u = 0;\n            long[] n = new long[(int) e];\n            for (int i = 0; i < e; i++) {\n                n[i] = p.nextInt();\n                u += n[i];\n            }\n            long g = u / e;\n            for (int i = 0; i < e; i++)\n                if ((n[i] - g) > 0) \n                    w += n[i] - g;\n                System.out.printf(\"Set #%d\\n\", S);\n            System.out.printf(\"The minimum number of moves is %d.\\n\\n\", w);\n           e =p.nextInt();\n        }\n    }\n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Map.Entry;\nimport java.util.Scanner;\nimport java.util.TreeMap;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in).useDelimiter(\"[\\\\s,.;\\''\\\"()/:-]+\");\n\t\tTreeMap<String, Integer> map = new TreeMap<String,Integer>();\n\t\tint max = Integer.MIN_VALUE;\n\t\tint t = 53;\n\t\twhile (scanner.hasNext()){\n\t\t\tString word = scanner.next().toLowerCase();\n\t\t\tif (map.containsKey(word)){\n\t\t\t\tmap.put(word,map.get(word)+1);\n\t\t\t}else{\n\t\t\t\tmap.put(word, 1);\n\t\t\t}\n\t\t\tif (map.get(word)>max){\n\t\t\t\tmax = map.get(word);\n\t\t\t}\n\t\t}\n\t\tArrayList<String> a =new ArrayList<String>();\n\t\twhile (!map.isEmpty()){\n\t\t\tEntry<String, Integer> e = map.pollFirstEntry();\n\t\t\tif (e.getValue()==max){\n\t\t\t\ta.add(e.getKey());\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max+\" occurrences\");\n\t\tfor (String s : a){\n\t\t\tSystem.out.println(s);\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1200_3__5_1004_11", "golden_code": "\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n   public static void main(String[] args) {\n      Scanner in = new Scanner(System.in);\n      while (in.hasNext()) {\n         int[] a = new int[9];\n         ArrayList<Integer> al = new ArrayList<Integer>();\n         boolean sev = false;\n         for (int i = 0; i < 9; i++) {\n            a[i] = in.nextInt();\n            if (a[i] != 0 && i > 0 && i < 7) {\n               al.add(i);\n            }\n            if (i == 7 && a[i] != 0) {\n               sev = true;\n            }\n         }\n         String r = \"\";\n         if (a[0] != 0) {\n            if (a[0] != 1 && a[0] != -1) {\n               r += a[0] + \"x^\" + String.valueOf(8) + \" \";\n            } else {\n               if (a[0] < 0) {\n                  r += \"-x^\" + String.valueOf(8) + \" \";\n               } else {\n                  r += \"x^\" + String.valueOf(8) + \" \";\n               }\n            }\n         }\n         for (Integer i : al) {\n            if (r.length() == 0) {\n               if (a[i] != 1) {\n                  r += a[i] + \"x^\" + String.valueOf(8 - i) + \" \";\n               } else {\n                  r += \"x^\" + String.valueOf(8 - i) + \" \";\n               }\n            } else {\n               if (a[i] != 1) {\n                  if (a[i] < 0) {\n                     r += \"- \" + (-1 * a[i]) + \"x^\" + String.valueOf(8 - i) + \" \";\n                  } else {\n                     r += \"+ \" + a[i] + \"x^\" + String.valueOf(8 - i) + \" \";\n                  }\n               } else {\n                  if (a[i] < 0) {\n                     r += \"- \" + \"x^\" + String.valueOf(8 - i) + \" \";\n                  } else {\n                     r += \"+ \" + \"x^\" + String.valueOf(8 - i) + \" \";\n                  }\n               }\n            }\n         }\n         if (sev) {\n            if (r.length() == 0) {\n               if (a[7] != 1 && a[7] != -1) {\n                  r += a[7] + \"x \";\n               } else {\n                  if (a[7] < 0) {\n                     r += \"-x \";\n                  } else {\n                     r += \"x \";\n                  }\n               }\n            } else {\n               if (a[7] != 1) {\n                  if (a[7] < 0) {\n                     r += \"- \" + (-1 * a[7]) + \"x \";\n                  } else {\n                     r += \"+ \" + a[7] + \"x \";\n                  }\n               } else {\n                  if (a[7] < 0) {\n                     r += \"- x \";\n                  } else {\n                     r += \"+ x \";\n                  }\n               }\n            }\n            if (r.charAt(r.length() - 1) == ' ' && a[8] == 0) {\n               r = r.substring(0, r.length() - 1);\n            }\n         }\n         if (a[8] != 0) {\n            if (r.length() == 0) {\n               r += a[8];\n            } else {\n               if (a[8] < 0) {\n                  r += \"- \" + (-1 * a[8]);\n               } else {\n                  r += \"+ \" + a[8];\n               }\n            }\n         }\n         if (r.length() == 0) {\n            r += \"0\";\n         }\n         System.out.println(r);\n      }\n   }\n}", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\nimport java.util.StringTokenizer;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tint n;\n\t\tScanner cin = new Scanner(System.in);\n\t\tn = Integer.valueOf(cin.nextLine());\n\t\twhile(n > 0){\n\t\t\tlong min = 0,max = 1;\n\t\t\tArrayList<Long> max_results = new ArrayList<Long>();\n\t\t\tArrayList<Long> min_results = new ArrayList<Long>();\n\t\t\tArrayList<String> min_numbers = new ArrayList<String>();\n\t\t\tArrayList<String> max_numbers = new ArrayList<String>();\n\t\t\tString input = cin.nextLine();\n\t\t\t\n\t\t\tStringTokenizer split_digits = new StringTokenizer(input);\n\t\t\twhile(split_digits.hasMoreTokens())\n\t\t\t\tmin_numbers.add(split_digits.nextToken(\"+\"));\n\t\t\tfor(int i=0;i<min_numbers.size();i++){\n\t\t\t\tif(min_numbers.get(i).length() == 1)\n\t\t\t\t\tmin_results.add(Long.valueOf(min_numbers.get(i)));\n\t\t\t\telse{\n\t\t\t\t\tlong tmp_result = 1;\n\t\t\t\t\tArrayList<Integer> tmp = new ArrayList<Integer>();\n\t\t\t\t\tStringTokenizer st_tmp = new StringTokenizer(min_numbers.get(i));\n\t\t\t\t\twhile(st_tmp.hasMoreTokens())\n\t\t\t\t\t\ttmp.add(Integer.valueOf(st_tmp.nextToken(\"*\")));\n\t\t\t\t\tfor(int j=0;j<tmp.size();j++)\n\t\t\t\t\t\ttmp_result *= tmp.get(j);\n\t\t\t\t\tmin_results.add(tmp_result);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i=0;i<min_results.size();i++)\n\t\t\t\tmin += min_results.get(i);\n\t\t\t\n\t\t\tStringTokenizer split_digits2 = new StringTokenizer(input);\n\t\t\twhile(split_digits2.hasMoreTokens())\n\t\t\t\tmax_numbers.add(split_digits2.nextToken(\"*\"));\n\t\t\tfor(int i=0;i<max_numbers.size();i++){\n\t\t\t\tif(max_numbers.get(i).length() == 1)\n\t\t\t\t\tmax_results.add(Long.valueOf(max_numbers.get(i)));\n\t\t\t\telse{\n\t\t\t\t\tlong tmp_result = 0;\n\t\t\t\t\tArrayList<Integer> tmp = new ArrayList<Integer>();\n\t\t\t\t\tStringTokenizer st_tmp = new StringTokenizer(max_numbers.get(i));\n\t\t\t\t\twhile(st_tmp.hasMoreTokens())\n\t\t\t\t\t\ttmp.add(Integer.valueOf(st_tmp.nextToken(\"+\")));\n\t\t\t\t\tfor(int j=0;j<tmp.size();j++)\n\t\t\t\t\t\ttmp_result += tmp.get(j);\n\t\t\t\t\tmax_results.add(tmp_result);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i=0;i<max_results.size();i++)\n\t\t\t\tmax *= max_results.get(i);\n\t\t\t\n\t\t\tSystem.out.println(\"The maximum and minimum are \"+ max +\" and \"+ min + \".\");\n\t\t\tn--;\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1018_47__1_2500_51", "golden_code": "import java.util.Scanner;\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner scan = new Scanner(System.in);\n\t\tfor(int n=scan.nextInt();n!=0;){\n\t\t\tint[] a = new int[n];\n\t\t\tint[] b = new int[n];\n\t\t\tint A=0,B=0;\n\t\t\tfor(int i=0;i<n;i++)\n\t\t\t\ta[i]=scan.nextInt();\n\t\t\tfor(int i=0;i<n;i++)\n\t\t\t\tb[i]=scan.nextInt();\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tif(a[i]!=b[i]){\n\t\t\t\t\tif(a[i]>b[i]){\n\t\t\t\t\t\tif(a[i]==2 && b[i]==1)\n\t\t\t\t\t\t\tB+=6;\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tif(a[i]-b[i]==1)\n\t\t\t\t\t\t\t\tB+=a[i]+b[i];\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tA+=a[i];\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tif(b[i]==2 && a[i]==1)\n\t\t\t\t\t\t\tA+=6;\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tif(a[i]-b[i]==-1)\n\t\t\t\t\t\t\t\tA+=a[i]+b[i];\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tB+=b[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n                        System.out.println(\"A has \"+A+\" points. B has \"+B+\" points.\");\n\t\t\tn=scan.nextInt();\n\t\t\tif(n!=0)\n\t\t\t\tSystem.out.println();\n\t}\n}\n}", "generated_code": "\n\nimport java.util.*;\n\npublic class Main {\n\n    static Scanner acm = new Scanner(System.in);\n\n    public static void main(String[] args) {\n\n        while (true) {\n\n            long dia1 = acm.nextInt();\n            long dia2 = acm.nextLong();\n            long length = (long) Math.pow(3, dia1);\n\n            while ( dia2 != 0) {\n\n                if (dia2 <= length / 3 && dia2 > 1) {\n\n                    length = length / 3;\n\n                } else if (dia2 > length / 3 && dia2 <= (length / 3) * 2) {\n                    System.out.println(\"No\");\n                    break;\n\n                } else if (dia2 > (length / 3) * 2 && dia2 <= length) {\n                    dia2 -= (length / 3) * 2;\n                    length = length / 3;\n\n                } else {\n                    System.out.println(\"Yes\");\n                    break;\n                }\n\n            }\n\n            if (dia1 == 0 && dia2 == 0) {\n                System.exit(0);\n            }\n\n        }\n\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_106018_21__1_2857_3", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n;\n        while (s.hasNextInt()) {\n            n = s.nextInt();\n            int counter = 0;\n            lbl: for (int i = 2; i <= (n/2); i++) {\n                if (n % i == 0) {\n                    counter++;\n                    if(i*i == n){\n                        counter++;\n                    }\n                    if (counter <= 2) {\n                        if (!IsPrime(i)) {\n                            counter=3;\n                            break lbl;\n                        }\n                    } else {\n                        break lbl;\n                    }\n                }\n            }\n            if(counter == 2)\n                System.out.println(\"Yes\");\n            else\n                System.out.println(\"No\");\n        }\n    }\n\n    private static boolean IsPrime(int n) {\n        for (int i = 2; i <=(n/2); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "generated_code": "import java.util.HashSet;\nimport java.util.Scanner;\nimport java.util.Set;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        while (T-- > 0) {\n            int n = in.nextInt();\n            int[] a = new int[n];\n            Set<Integer> s = new HashSet<Integer>();\n            for (int i = 0; i < n; i++) {\n                a[i] = in.nextInt();\n                s.add(a[i]);\n            }\n            while (s.size() > 1) {\n                int mn = a[0], mx = a[0], imn = 0, imx = 0;\n                for (int i = 0; i < n; i++)\n                    if (a[i] < mn) {\n                        imn = i;\n                        mn = a[i];\n                    } else if (a[i] > mx) {\n                        imx = i;\n                        mx = a[i];\n                    }\n                a[imn] = mx - mn;\n                a[imx] = mx - mn;\n                s.clear();\n                for (int i = 0; i < n; i++)\n                    s.add(a[i]);\n            }\n            System.out.println(s.iterator().next());\n        }\n    }\n\n}\n", "score": 0.0}
{"id": "SHARE_1_101132_2__1_101055_22", "golden_code": "import java.util.*;\npublic class Main\n{\n\tstatic Scanner scan = new Scanner(System.in);\n\tpublic static void main(String[] args) \n\t{\n\t\twhile(true)\n\t\t{\n\t\t\tString s = scan.next();\n\t\t\tif(s.equals(\"end\"))\n\t\t\t\tbreak;\n\t\t\tString sp[] = s.split(\"-\");\n\t\t\tString res = \"\";\n\t\t\tif(sp[0].equals(\"from\"))\n\t\t\t{\n\t\t\t\tint q = 1 ;\n\t\t\t\tint x = 0 ;\n\t\t\t\tString s2 = scan.next();\n\t\t\t\tint zarib = Integer.parseInt(sp[1]);\n\t\t\t\tfor(int i = s2.length()-1 ; i>=0 ; i--)\n\t\t\t\t{\n\t\t\t\t\tx += q*(s2.charAt(i)-'0');\n\t\t\t\t\tq*=-zarib;\n\t\t\t\t}\n\t\t\t\tres = x+\"\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint mod = Integer.parseInt(sp[1]);\n\t\t\t\tint num = scan.nextInt();\n\t\t\t\tint help = 0 ;\n\t\t\t\twhile(num != 0)\n\t\t\t\t{\n\t\t\t\t\tif(num > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\thelp = num%mod;\n\t\t\t\t\t\tnum = -(num/mod);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\thelp = (-num)%mod;\n\t\t\t\t\t\tif(help > 0)\n\t\t\t\t\t\t\thelp = mod - help;\n\t\t\t\t\t\tnum = (-(num-help))/mod;\n\t\t\t\t\t}\n\t\t\t\t\tres = help+res;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(res.length()==0)\n\t\t\t\tres =\"0\";\n\t\t\tSystem.out.println(res);\n\t\t}\n\t}\n}", "generated_code": "import java.util.*;\n\nclass Main {\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tint k = s.nextInt();\n\t\tint m, n, w, f;\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tw = 0;\n\t\t\tf = 0;\n\t\t\tm = s.nextInt();\n\t\t\tn = s.nextInt();\n\t\t\tint[] md = new int[m];\n\t\t\tint[] nd = new int[n];\n\t\t\tString[] mb = new String[m];\n\t\t\tString[] nb = new String[n];\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tmd[j] = s.nextInt();\n\t\t\t\tmb[j] = Integer.toBinaryString(md[j]);\n\t\t\t}\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tnd[j] = s.nextInt();\n\t\t\t\tnb[j] = Integer.toBinaryString(nd[j]);\n\t\t\t}\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tboolean ok = false;\n\t\t\t\tfor (int z = 0; z < m; z++) {\n\t\t\t\t\tif (!ok) {\n\t\t\t\t\t\tok = true;\n\t\t\t\t\t\tf = h(mb[z], nb[j]);\n\t\t\t\t\t\tw = md[z];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (ok && h(mb[z], nb[j]) <= f) {\n\t\t\t\t\t\t\tif (h(mb[z], nb[j]) == f && md[z] < w) {\n\t\t\t\t\t\t\t\tf = h(mb[z], nb[j]);\n\t\t\t\t\t\t\t\tw = md[z];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (h(mb[z], nb[j]) < f) {\n\t\t\t\t\t\t\t\t\tf = h(mb[z], nb[j]);\n\t\t\t\t\t\t\t\t\tw = md[z];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(w);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static int h(String m, String n) {\n\t\tint c = 0;\n\t\tint a, b;\n\t\ta = m.length();\n\t\tb = n.length();\n\t\tfor (int i = a - 1, j = b - 1; i >= 0 && j >= 0; i--, j--) {\n\t\t\tif (m.charAt(i) != n.charAt(j))\n\t\t\t\tc++;\n\t\t}\n\t\tif (m.length() > n.length()) {\n\t\t\tfor (int i = 0; i < m.length() - n.length(); i++) {\n\t\t\t\tif (m.charAt(i) == '1')\n\t\t\t\t\tc++;\n\t\t\t}\n\t\t} else {\n\t\t\tif (m.length() < n.length()) {\n\t\t\t\tfor (int i = 0; i < n.length() - m.length(); i++) {\n\t\t\t\t\tif (n.charAt(i) == '1')\n\t\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn c;\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1001_153__1_1884_21", "golden_code": "import java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception{\n        Scanner scan = new Scanner(System.in);\n        while (scan.hasNextInt()){\n            System.out.println(scan.nextInt()+scan.nextInt());\n        }\n    }\n}", "generated_code": "import java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint test = sc.nextInt();\n\t\twhile(test> 0){\n\t\t\tint money =0;\n\t\t\tint year =0;\n\t\t\tArrayList<Integer> value = new ArrayList<Integer>();\n\t\t\tArrayList<Integer> benef = new ArrayList<Integer>();\n\t\t\tmoney = sc.nextInt();\n\t\t\tyear = sc.nextInt();\n\t\t\tint d= sc.nextInt();\n\t\t\tfor(int i = 0 ; i <d; i++){\n\t\t\t\tint v = sc.nextInt()/1000;\n\t\t\t\tint b = sc.nextInt();\n\t\t\t\tvalue.add(v);\n\t\t\t\tbenef.add(b);\n\t\t\t}\n\t\t\tfor(int h =0 ; h < 1000000 ; h++)\n\t\t\t\tdp[h]=-1;\n\t\t\tdp[0]=0;\n\t\t\tfor(int i=0; i< 1000000; i++)\n\t\t\t\tgetRes(i,value,benef);\n\t\t\tfor(int k = 0 ; k < year ;k++){\n\t\t\t\tmoney += getRes(money/1000, value,benef);\n\t\t\t\tif(money/1000>1000000){\n\t\t\t\t\twhile(true)\n\t\t\t\t\t\t;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(money);\n\t\t\ttest--;\n\t\t}\n\t}\n\tpublic static int[] dp = new int[1000*1000];\n\tpublic static int getRes(int money,ArrayList<Integer> value , ArrayList<Integer> benef){\n\t\tif(dp[money] != -1)\n\t\t\treturn dp[money];\n\t\tint res =0;\n\t\tfor(int j = 0 ; j < value.size();j++){\n\t\t\tif((money -  value.get(j)>=0) && (res < benef.get(j)+  getRes(money - value.get(j), value , benef)))\n\t\t\t\tres = benef.get(j)+ getRes(money - value.get(j), value , benef);\n\t\t}\n\t\treturn dp[money] = res;\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_30__1_1001_470", "golden_code": "import java.util.Scanner;\n\n    class Main\n{\n    public static void main(String[] orgs)\n  {\n           Scanner Scan = new Scanner (System.in);\n           int num1,num2,a,b;\n           int result=0;\n      while(Scan.hasNextInt())\n          {\n           num1=Scan.nextInt();\n           num2=Scan.nextInt();\n           a=num1;\n           b=num2;\n           \n          if ((num1>0 && num2>0) || (num1<0 && num2>0))\n\n              while (b!=0){\n                      a++;\n                      b--;\n                      result=a;\n          } \n          else    \n              if (num1>0 && num2<0)\n\n                  while (a!=0){  \n                         b++;\n                         a--;\n                         result=b;\n\n          }\n             else\n                 if(num1<0 && num2<0)\n        \n                 while(a!=0){\n                       a++;\n                       b--;\n                       result=b;\n         }\n                else\n                    if(num1==0)           \n                    result=num2;\n                    else\n                    result=num1;\n\n      System.out.println(result);\n  }   \n }\n}\n", "generated_code": "import java.util.Scanner;\n \npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt() + cin.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_120__1_1001_374", "golden_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args){\ntry{\n\t\tScanner jin = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint a = jin.nextInt();\n\t\t\tint b = jin.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n}\ncatch(Exception e){}\n\t}\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while(input.hasNext()){\n        int numberOne = input.nextInt();\n        int numberTwo = input.nextInt();\n        System.out.println(numberOne + numberTwo);\n    }\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1009_134__1_1634_0", "golden_code": "import java.util.Scanner;\nclass Main {\n\tstatic boolean adj[]=new boolean [178858500];\n\t\n\tpublic static void main(String s[]) {\n\t\tScanner cin = new Scanner(System.in);\n\t\tdouble sum=0;\n\t\tfor(int i=0;i<12;i++)\n\t\t{\n\t\t\tdouble val=cin.nextDouble();\n\t\t\tsum+=val;\n\t\t}\n\t\tSystem.out.printf(\"$%.2f\\n\",sum/12);\n\t\tadj[0]=true;\n\t}\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n     while(true){\n         String skey=s.nextLine();\n         char[] key=skey.toCharArray();\n         if(skey.equals(\"THEEND\")){System.exit(0);}\n         String sstr=s.nextLine();\n         char str []=sstr.toCharArray();\n         int lstr=str.length;\n         \n         char [][] mat=new char[lstr/key.length][key.length];\n         \n            for (int i = 'A'; i <='Z' ; i++) {\n                for (int j = 0;j < key.length; j++) {\n                        if(key[j]==i){\n                            for (int k = 0; k < lstr/key.length; k++) {\n                                \n                                mat[k][j]=str[k];\n                            }\n                          \n                            sstr=sstr.substring((lstr/key.length));\n                            str=sstr.toCharArray();\n                        }\n                        \n                }\n         }\n         for (int i = 0; i < lstr/key.length; i++) {\n             for (int j = 0; j <key.length ; j++) {\n                 System.out.printf(\"%c\",mat[i][j]);\n             }\n         }\n         System.out.println(\"\");\n            \n    }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_5_1007_10__1_2734_15", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\t\n\tpublic static void main(String[] args) {\n\n\t\tInput in = new Input();\n\t\tin.getInput();\n\t\t\n\t\tEncode encodeingLetters = new Encode();\n\t\tencodeingLetters.encoding( in.getLetters() );\n\t\tencodeingLetters.print();\n\t\t\n\t}\n\n}\n\nclass Input {\n\t\n\tprivate ArrayList<String> letters;\n\t\n\tpublic ArrayList<String> getLetters() { return letters; }\n\t\n\tpublic void getInput () {\n\t\t\n\t\tScanner consoleScan = new Scanner ( System.in );\n\t\t\n\t\tint numOfLetters = consoleScan.nextInt();\n\t\t\n\t\tletters = new ArrayList<String>(numOfLetters);\n\t\t\n\t\tfor (int i = 0; i < numOfLetters; i++) {\n\t\t\t\n\t\t\tletters.add( consoleScan.next() );\n\t\t}\n\t\t\n\t\tconsoleScan.close();\n\t\t\n\t}\n\t\n\tpublic void print () {\n\t\t\n\t\tfor (int i = 0; i < letters.size(); i++) {\n\t\t\t\n\t\t\tSystem.out.println( letters.get(i));\n\t\t}\n\t}\n}\n\n\n\nclass Encode {\n\t\n\tString key = \"\";\n\tArrayList<String> codes = new ArrayList<String>();\n\tArrayList<String> encodeKeys = new ArrayList<String>();\n\t\n\tprivate void subtractTwoLetter ( String letter1, String letter2 ) {\n\n\t\tchar[] charAry1 = letter1.toCharArray() ,\n\t\t\t   charAry2 = letter2.toCharArray() ,\n\t\t\t   newCharAry = new char[letter1.length()],\n\t\t\t   newCharAry2 = new char[letter1.length()];\n\t\t\n\t\tfor (int i = 0; i < letter1.length(); i++) {\n\n\t\t\tint a1 = (charAry2[i] - charAry1[i]);\n\t\t\tif ( a1 < 0 ) a1 += 26;\n\t\t\tnewCharAry[i] = (char)(a1 + 'a');\n\t\t\t\n\t\t\tint a2 = (charAry1[i] - charAry2[i]);\n\t\t\tif ( a2 < 0 ) a2 += 26;\n\t\t\tnewCharAry2[i] = (char)(a2 + 'a');\t\t\t\n\t\t}\n\t\t\n\t\tcodes.add( String.valueOf(newCharAry) );\n\t\tcodes.add( String.valueOf(newCharAry2) );\n\t}\n\t\n\tprivate void isEncodeKey ( String code ) {\n\t\t\n\t\tfor (int i = 1; i < 6; i++) {\n\t\t\t\n\t\t\tboolean isKey = true;\n\t\t\t\n\t\t\tString temp1 = code.substring(0, i) ,\n\t\t\t\t   temp2 = code.substring(i);\n\t\t\t\n\t\t\twhile ( temp2.length() >= temp1.length() ){\n\n\t\t\t\tisKey = false;\n\t\t\t\t\n\t\t\t\tif ( temp1.equals( temp2.substring(0, temp1.length()) ) ) {\n\t\t\t\t\tisKey = true;\n\t\t\t\t\ttemp2 = temp2.substring(temp1.length());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\telse \n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif ( isKey ) {\n\t\t\t\tif ( temp1.contains(temp2) ){\n\t\t\t\t\tencodeKeys.add(temp1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn;\n\t}\n\t\n\tprivate void findEncodingKey () {\n\t\t\n\t\tfor (int i = 0; i < codes.size(); i++) {\n\t\t\t\n\t\t\tisEncodeKey( codes.get(i) );\n\t\t}\n\t\t\n\t\tif ( encodeKeys.size() > 0 ) key = encodeKeys.get(0);\n\t\t\n\t\tfor (int i = 0; i < encodeKeys.size(); i++) {\n\n\t\t\tif ( encodeKeys.get(i).length() < key.length() )\n\t\t\t\tkey = encodeKeys.get(i);\n\t\t\t\n\t\t\telse if ( encodeKeys.get(i).length() == key.length() ) {\n\t\t\t\tif ( key.compareTo(encodeKeys.get(i)) > 0 )\n\t\t\t\t\tkey = encodeKeys.get(i);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\tpublic void encoding( ArrayList<String> letters ) {\n\t\t\n\t\tif ( letters.size() == 1 ) {\n\t\t\tkey = \"a\";\n\t\t\treturn; \n\t\t}\n\t\t\n\t\tfor (int i = 0; i < letters.size(); i++) {\n\t\t\t\n\t\t\tfor (int j = i+1; j < letters.size(); j++) {\n\t\t\t\tsubtractTwoLetter(letters.get(i), letters.get(j));\n\t\t\t}\n\t\t}\n\t\t\n\t\tfindEncodingKey();\n\t\t\n\t}\n\t\n\tpublic void print() {\n\t\t\n\t\tSystem.out.println( key );\n\t}\n\n}\n", "generated_code": "import java.util.*;\npublic class Main {\n\tpublic static int n , w;\n\tpublic static int[] coins;\n\tpublic static long leftV = -1;\t\n\tpublic static Map<Long, Long> mem  = new HashMap<Long, Long>();\n\tpublic static void main(String args[]){\n\t\tScanner input = new Scanner(System.in);\n\t\tint t = input.nextInt();\n\t\tfor(int i =0; i < t; i++){\n\t\t\tn= input.nextInt();\n\t\t\tw = input.nextInt();\n\t\t\tcoins = new int[n];\n\t\t\tfor(int j = 0; j< n; j++)\n\t\t\t\tcoins[j] = input.nextInt();\n\t\t\tArrays.sort(coins);\n\t\t\tlong cnt, sum =0;\n\t\t\tcnt = sum;\n\t\t\tfor(int j =coins.length - 1; j>= 0; j--){\n\t\t\t\tif(sum >= w)\n\t\t\t\t\tbreak;\n\t\t\t\tsum += coins[j];\n\t\t\t\tcnt ++;\n\t\t\t}\n\t\t\tif(sum < w)\n\t\t\t\tSystem.out.println(\"No solution!\");\n\t\t\telse\n\t\t\t\tSystem.out.println(cnt);\n\t\t}\n\t\t\t\n\t}\n\t\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1006_61__1_1006_93", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while(true){\n        double m = in.nextDouble();\n            if (m == 0.00) {\n                break;\n            }\n        double count = 0;\n        double sum =0;\n        int a= 0;\n        while (true) {     \n            count++;\n            \n            sum =sum +(1/(count+1));\n            if (sum >= m) {\n                a = (int) count;\n                System.out.println(a+\" card(s)\");\n                break;\n            }\n        }\n    }}\n    \n}\n", "generated_code": "\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n/**\n *\n * @author kazemi\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner input = new Scanner(System.in);\n        float n =  (float) 0.00 ;\n        float s = (float) 1.00 ;\n        float i = (float) 2.00;\n        ArrayList<Integer> a = new ArrayList();\n        \n        float m = input.nextFloat();\n        while(m != (float)0.00){\n            \n           while(m >= 0.00)\n        {\n            n =(s/i);\n            m = m - n;\n            i++;\n           \n        }\n           a.add(((int)i)-2);\n            \n           m = input.nextFloat();\n           i = (float) 2.00;\n        }\n        \n        \n        for (int j = 0; j < a.size(); j++) {\n            System.out.println(\"\"+a.get(j)+\" card(s)\");\n        }\n        \n    }\n          \n    \n}\n", "score": 1.0}
{"id": "SHARE_1_1001_498__1_1001_306", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner s= new Scanner(System.in);\n\t\twhile(s.hasNext()) {\n\t\t\tint a= s.nextInt();\n\t\t\tint b= s.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input=new Scanner (System.in);\n        while(input.hasNext()){\n        int a=input.nextInt();\n        int b=input.nextInt();\n        int sum=a+b;\n        System.out.println(sum);\n    }}\n}", "score": 1.0}
{"id": "SHARE_1_1104_63__1_2718_9", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n   public static void main(String[] args) {\n      Scanner in = new Scanner(System.in);\n      int t = in.nextInt();\n      in.nextLine();\n      while (t-- > 0) {\n         StringBuilder s = new StringBuilder(in.nextLine());\n         System.out.println(s.reverse());\n      }\n   }\n}", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tstatic int[][] arr=new int[110][110];\n\tpublic static void main(String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\tarr[0][0]=arr[0][1]=0;\n\t\tarr[1][0]=arr[1][1]=1;\n\t\tfor(int i=0;i<105;i++)\n\t\t\tfor(int j=0;j<105;j++)\n\t\t\t\tarr[i][j]=0;\n\t\tfor(int i=1;i<105;i++)\n\t\t\tfor(int j=0;j<105;j++)\n\t\t\t\tif(j>0)\n\t\t\t\t\tarr[i][j]=(arr[i-1][j-1]+arr[i-1][j]+1)%1000000007;\n\t\t\t\telse\n\t\t\t\t\tarr[i][j]=i;\n\t\twhile(true){\n\t\t\tint t=sc.nextInt();\n\t\t\tint h=sc.nextInt();\n\t\t\tif(t==0&&h==0)\n\t\t\t\tbreak;\n\t\t\tSystem.out.println(arr[t][h]+1);\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_253__1_1001_260", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n\t    Scanner input = new Scanner(System.in);\n        do {\n            try {\n            System.out.print(input.nextInt() + input.nextInt() + \"\\n\");\n            }\n            catch (RuntimeException exmp)\n            {\n                System.exit(0);\n            }\n\n\n        }\n\n\n        while (true);\n    }\n}", "generated_code": "//package sharecodeapb;\n\nimport java.util.*;\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\t Scanner consol = new Scanner(System.in);\n\t        while(consol.hasNext())\n\t        {\n\t            int a,b;\n\t            a=consol.nextInt();\n\t            b=consol.nextInt();\n\t            System.out.println(a+b);\n\t        }\n\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_5_1017_3__1_1002_4", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner input = new Scanner(System.in);\n\t\tint arsize = input.nextInt();\n\t\tint[] array = new int[arsize];\n\t\t\n\t\tfor (int i=0 ; i < arsize ; i++)\n\t\t\tarray[i] = input.nextInt();\n\n\t\tint Apos = input.nextInt();\n\t\tint Bpos = input.nextInt();\n\t\t\n\t\tboolean reverse = false;\n\t\tif (Bpos < Apos)\n\t\t\t{\n\t\t\treverse = true;\n\t\t\t}\n\t\t\n\t\tApos--;\n\t\tBpos--;\n\t\t\n\t\t\n\t\tint mid = (Apos + Bpos)/2;\n\t\t\n\t\tint Apoint = 0;\n\t\tint Bpoint = 0;\n\t\t\n\t\tif (!reverse || (Apos-Bpos)%2 == 1 || (Bpos-Apos)%2 == 1)\n\t\t{\n\t\t\tfor (int i=0 ; i <= mid ; i++)\n\t\t\t\tApoint = Apoint + array[i];\n\t\t\t\n\t\t\tfor (int i = mid+1 ; i < arsize ; i++)\n\t\t\t\tBpoint = Bpoint + array[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\tfor (int i=0 ; i < mid ; i++)\n\t\t\t\t\tApoint = Apoint + array[i];\n\t\t\t\t\n\t\t\t\tfor (int i = mid ; i < arsize ; i++)\n\t\t\t\t\tBpoint = Bpoint + array[i];\n\t\t}\n\t\tif (Apos == Bpos)\n\t\t{\n\t\t\tint right = 0;\n\t\t\tint left = 0;\n\t\t\tfor (int i = 0; i <= Apos; i++)\n\t\t\t\tleft = left + array[i];\n\t\t\tfor (int i = Apos ; i < arsize ; i++)\n\t\t\t\tright = right + array[i];\n\t\t\tif (right >= left)\n\t\t\t{\n\t\t\t\tApoint = right;\n\t\t\t\tBpoint = left - array[Apos];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tApoint = left;\n\t\t\t\tBpoint = right - array[Apos];\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tif (!reverse)\n\t\t\tSystem.out.println(Apoint + \" \" + Bpoint);\n\t\telse\n\t\t\tSystem.out.println(Bpoint + \" \" + Apoint);\n\t}\n\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n\n        int count, max, t, x, y, x0, y0;\n        double r;\n        double[] arr = new double[150];\n\n        x = in.nextInt();\n        y = in.nextInt();\n        r = in.nextDouble();\n\n        while (r >= 0) {\n            count = 0;\n            t = in.nextInt();\n            for (int i = 0; i < t; i++) {\n                x0 = in.nextInt() - x;\n                y0 = in.nextInt() - y;\n                if ((x0 * x0) + (y0 * y0) <= r * r) {\n                    arr[count++] = Math.toDegrees(Math.atan2(y0, x0));\n                }\n\n            }\n            max = 0;\n            for (int i = 0; i < count; i++) {\n                t = 0;\n                r = arr[i];\n                for (int j = 0; j < count; j++) {\n\n                    if (arr[j] < r) {\n                        if (arr[j] + 180 <= r)\n                            t++;\n                    }\n                    else\n                        if(arr[j] <= r + 180)\n                            t++;\n                \n            }\n              max = (t > max) ? t : max;\n            }\n            System.out.println(max);\n\n            x = in.nextInt();\n            y = in.nextInt();\n            r = in.nextDouble();\n            }}}\n", "score": 0.0}
{"id": "SHARE_1_106020_23__1_1462_6", "golden_code": "import java.util.Scanner;\n\nclass Main {\n\tpublic static void main (String args[]){\n\t\tScanner scan = new Scanner(System.in);\n\t\t\n\t\tint ca = scan.nextInt();\n\t\tint loop = 1;\n\t\t\n\t\t\n\t\twhile(ca > 0)\n\t\t{\n\t\t\tint N = scan.nextInt();\n\t\t\tint z = 0 ;\n\t\t\tfor ( int i = 1 ; i <= N ; i++){\n\t\t\t\tz = (i+1)*(i+2)/2*i + z ;\n\t\t\t}\n\t\t\tSystem.out.println(loop + \" \" + N + \" \" + z);\n\t\t\tca--;\n\t\t\tloop++;\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.Scanner;\n\n class Main {\n\n\tpublic static void main(String[] args) {\n\t\tchar a[] = { 'V', 'W', 'X', 'Y', 'Z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',\n\t\t\t\t'P', 'Q', 'R', 'S', 'T', 'U' };\n\t\tScanner input = new Scanner(System.in);\n\t\twhile (true) {\n\t\t\tString s = input.nextLine();\n\t\t\tif (s.equals(\"ENDOFINPUT\")) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ts = input.nextLine();\n\t\t\tStringBuilder r = new StringBuilder();\n\t\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\t\tif (s.charAt(i)<65||s.charAt(i)>90) {\n\t\t\t\t\tr.append(s.charAt(i));\n\t\t\t\t} else {\n\t\t\t\t\tr.append(a[(s.charAt(i) - 65) % 26]);\n\t\t\t\t}\n\t\t\t}\n\t\t\ts = input.nextLine();\n\t\t\tSystem.out.println(r);\n\t\t}\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_200__1_1001_312", "golden_code": "import java.util.Scanner;\npublic class Main {\nstatic Scanner in=new Scanner(System.in);\npublic static void main(String[] args) {\n        while(in.hasNext())\n        {\n            System.out.println(in.nextInt()+in.nextInt());\n        }\n        \n    }\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner input = new Scanner(System.in);\n\n        while (input.hasNextLine()) {\n            String s = input.nextLine();\n            String[] numbers = s.split(\" \");\n            System.out.println(Integer.parseInt(numbers[0]) + Integer.parseInt(numbers[1]));\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1088_10__1_1725_6", "golden_code": "import java.util.Scanner ;\npublic class Main{\n\tpublic static char[] Decode(String code){\n\t\tchar[] word = code.toCharArray() ;\n\t\tfor(int i=0 ; i<code.length() ; i++){\n\t\t\tif(word[i] == 'Z')\n\t\t\t\tword[i] = (char)((int)'A'-1) ;\n\t\t\tword[i] = (char)((int)word[i]+1) ;\n\t\t}\n\t\treturn word ;\n\t}\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in) ;\n\t\tint num = sc.nextInt() ;\n\t\tfor(int i=0 ; i<num ; i++){\n\t\t\tString in = sc.next() ;\n\t\t\tSystem.out.println(\"String #\" + (i+1)) ;\n\t\t\tSystem.out.println(new String(Decode(in)) + \"\\n\") ;\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main{\n    static Scanner input=new Scanner(System.in);\n    public static void main(String[] args){\n        int n=input.nextInt();\n        for(int i=0;i<n;i++){\n            int a=input.nextInt();\n            int b=(int)Math.sqrt(a);\n            System.out.println(b);\n        }\n        \n    }\n}", "score": 0.0}
{"id": "SHARE_1_2735_16__1_2713_19", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\tlong max;\n\n\t\tScanner input = new Scanner(System.in);\n\n\t\tint t = input.nextInt();\n\n\t\tint n, m;\n\n\t\tfor (int i = 0; i < t; i++) {\n\n\t\t\tmax = 0;\n\n\t\t\tn = input.nextInt();\n\t\t\tm = input.nextInt();\n\n\t\t\tint[][] A = new int[n][m];\n\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tfor (int j2 = 0; j2 < m; j2++) {\n\n\t\t\t\t\tA[j][j2] = input.nextInt();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// jame radif ha\n\n\t\t\tint[] radifSum = new int[n];\n\t\t\tfor (int j = 0; j < radifSum.length; j++) {\n\t\t\t\tfor (int j2 = 0; j2 < m; j2++) {\n\t\t\t\t\tradifSum[j] += A[j][j2];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// jame sotoon ha\n\n\t\t\tint[] sotoonSum = new int[m];\n\t\t\tfor (int j = 0; j < sotoonSum.length; j++) {\n\t\t\t\tfor (int j2 = 0; j2 < n; j2++) {\n\t\t\t\t\tsotoonSum[j] += A[j2][j];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tint[] shibMosbat = new int[n];\n\n\t\t\tfor (int j = 0; j < shibMosbat.length; j++) {\n\n\t\t\t\tfor (int j2 = 0; j2 < j + 1; j2++) {\n\n\t\t\t\t\tif (j2 < m)\n\t\t\t\t\t\tshibMosbat[j] += A[j - j2][j2];\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\t// System.out.println(shibMosbat[j]);\n\t\t\t}\n\n\t\t\tint[] shibMosbat2 = new int[m];\n\t\t\tfor (int j = 1; j < shibMosbat2.length; j++) {\n\n\t\t\t\tfor (int k = 0; k < n; k++) {\n\n\t\t\t\t\tif (k + j < m)\n\t\t\t\t\t\tshibMosbat2[j] += A[n - 1 - k][k + j];\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n//\t\t\t\t System.out.println(shibMosbat2[j]);\n\t\t\t}\n\n\t\t\tint[] shibManfi = new int[n];\n\t\t\tfor (int j = 0; j < shibManfi.length; j++) {\n\n\t\t\t\tfor (int k = 0; k < m; k++) {\n\n\t\t\t\t\tif (j + k < n)\n\t\t\t\t\t\tshibManfi[j] += A[j + k][k];\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// System.out.println(shibManfi[j]);\n\t\t\t}\n\n\t\t\tint[] shibManfi2 = new int[m];\n\t\t\tfor (int j = 1; j < shibManfi2.length; j++) {\n\n\t\t\t\tfor (int k = 0; k < n; k++) {\n\n\t\t\t\t\tif (j + k < m)\n\t\t\t\t\t\tshibManfi2[j] += A[k][j + k];\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// System.out.println(shibManfi2[j]);\n\t\t\t}\n\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tfor (int j2 = 0; j2 < m; j2++) {\n\n\t\t\t\t\t// int j= 1;\n\t\t\t\t\t// int j2 = 1;\n\n\t\t\t\t\t// A[j][j2]\n\n\t\t\t\t\tint manfi, mosbat;\n\n\t\t\t\t\tif (j2 > j) {\n\t\t\t\t\t\tmanfi = shibManfi2[j2 - j];\n\t\t\t\t\t} else\n\t\t\t\t\t\tmanfi = shibManfi[j - j2];\n\n\t\t\t\t\tint j3 = n - 1 - j;\n\n\t\t\t\t\tif (j2 > j3) {\n\t\t\t\t\t\tmosbat = shibMosbat2[j2 - (n - 1 - j)];\n\t\t\t\t\t} else\n\t\t\t\t\t\tmosbat = shibMosbat[j + j2];\n\n\t\t\t\t\tlong sum = radifSum[j] + sotoonSum[j2] + manfi + mosbat - 3\n\t\t\t\t\t\t\t* A[j][j2];\n\n\t\t\t\t\t// System.out.println(sum);\n\n\t\t\t\t\tif (sum > max)\n\t\t\t\t\t\tmax = sum;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSystem.out.println(max);\n\n\t\t}\n\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\twhile(n!=0){\n\t\tint count = 1;\n\t\t//System.out.println(n);\n\t\twhile (n > 1) {\n\t\t\tif (n % 2 == 0) {\n\t\t\t\tn = n / 2;\n\t\t\t} else {\n\t\t\t\tn = 3 * n + 1;\n\t\t\t}\n\t\t\tcount++;\n\t\t\t//System.out.println(n);\n\t\t}\n\t\tSystem.out.println(count);\n\t\tn = sc.nextInt();\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1564_3__1_1757_2", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner input=new Scanner(System.in);\n\n\t\tint t=Integer.parseInt(input.nextLine());\n\n\t\tint n,adress;\n\t\tString name;\n\t\tint[] houses;\n\n\t\twhile(t-->0){\n\n\t\t\tname=input.nextLine();\n\n\t\t\tn=input.nextInt();\n\n\t\t\thouses=new int[10000];\n\t\t\tadress=0;\n\n\t\t\twhile(n-->0){\n\t\t\t\tString ch=input.next();\n\n\n\t\t\t\tif(ch.equals(\"+\")){\n\n\t\t\t\t\tint a=input.nextInt();\n\t\t\t\t\tint b=input.nextInt();\n\t\t\t\t\tint c=input.nextInt();\n\n\t\t\t\t\tfor(int i=a;i<=b;i+=c){\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(houses[i]!=-1){\n\t\t\t\t\t\t\tif(houses[i]==0)\n\t\t\t\t\t\t\t\tadress++;\n\t\t\t\t\t\t\thouses[i]=1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(ch.equals(\"-\")){\n\n\t\t\t\t\tint a=input.nextInt();\n\t\t\t\t\tint b=input.nextInt();\n\t\t\t\t\tint c=input.nextInt();\n\n\t\t\t\t\tfor(int i=a;i<=b;i+=c){\n\t\t\t\t\t\tif(houses[i]==1)\n\t\t\t\t\t\t\tadress--;\n\t\t\t\t\t\thouses[i]=-1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tint a=Integer.parseInt(ch);\n\n\t\t\t\t\tif(houses[a]!=-1){\n\t\t\t\t\t\tif(houses[a]==0)\n\t\t\t\t\t\t\tadress++;\n\t\t\t\t\t\thouses[a]=1;\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\n\n\n\t\t\t\t}\n\t\t\t\tinput.nextLine();\n\n\n\t\t\t}\n\t\t\tfor(int i=1;i<=9999;i++){\n\n\t\t\t}\n\n\t\t\tSystem.out.println(name);\n\t\t\tif(adress==1)\n\t\t\t\tSystem.out.printf(\"%d address\\n\",adress);\n\t\t\telse\n\t\t\t\tSystem.out.printf(\"%d addresses\\n\",adress);\n\n\n\t\t\tint[] digits=new int[10];\n\t\t\tString plates;\n\t\t\tfor(int i=1;i<=9999;i++){\n\t\t\t\tif(houses[i]==1){\n\t\t\t\t\tplates=i+\"\";\n\t\t\t\t\tfor(int j=0;j<plates.length();j++){\n\t\t\t\t\t\tdigits[plates.charAt(j)-'0']++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tint s=0;\n\t\t\tfor(int i=0;i<digits.length;i++){\n\t\t\t\tSystem.out.printf(\"Make %d digit %d\\n\",digits[i],i);\n\t\t\t\ts+=digits[i];\n\t\t\t}\n\n\t\t\tif(s==1)\n\t\t\t\tSystem.out.printf(\"In total %d digit\\n\",s);\n\t\t\telse\n\n\t\t\t\tSystem.out.printf(\"In total %d digits\\n\",s);\n\n\n\n\n\t\t}\n\t}\n}", "generated_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint T = sc.nextInt();\n\t\twhile(T-- != 0)\n\t\t{\n\t\t\tint R = sc.nextInt();\n\t\t\tint C = sc.nextInt();\n\t\t\tboolean map[][] = new boolean[R+1][C+1];\n\t\t\tsc.nextLine();\n\t\t\tfor(int i = 1;i <= R;i++)\n\t\t\t{\n\t\t\t\tString str = sc.nextLine();\n\t\t\t\t//System.err.println(str);\n\t\t\t\tfor(int j = 1;j <= C;j++)\n\t\t\t\t\tmap[i][j] = (str.charAt(j-1)=='.')?false:true;\n\t\t\t}\n\t\t\tBigInteger ted[][] = new BigInteger[R+1][C+1];\n\t\t\tfor(int i = 0;i <= R;i++)\n\t\t\t\tted[i][0] = BigInteger.ZERO;\n\t\t\tfor(int i = 0;i <= C;i++)\n\t\t\t\tted[0][i] = BigInteger.ZERO;\n\t\t\tted[1][1] = BigInteger.ONE;\n\t\t\tfor(int i = 1;i <= R;i++)\n\t\t\t\tfor(int j = 1;j <= C;j++)\n\t\t\t\t\tif(!(i == 1 && j == 1))\n\t\t\t\t\t{\n\t\t\t\t\t\t if(map[i][j])\n\t\t\t\t\t\t\t ted[i][j] = BigInteger.ZERO;\n\t\t\t\t\t\t else\n\t\t\t\t\t\t\t ted[i][j] = ted[i-1][j].add(ted[i][j-1]);\n\t\t\t\t\t}\n\t\t\tSystem.out.println(\"Existuje \"+ted[R][C].toString()+\" ruznych cest.\");\t\t\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1001_305__1_1001_130", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n       \n    public static void main(String[] args) {\n        \n        Scanner input=new Scanner(System.in);\n        \n        int a,b;\n        while(input.hasNext()){\n            a=input.nextInt();\n            b=input.nextInt();\n            System.out.println(a+b);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n/**\n *\n * @author AGR\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner s = new Scanner(new java.io.BufferedInputStream(System.in), \"UTF-8\");\n        int n , i , j, a_p, b_p , A[] = new int[30] , B[] = new int[30];\n        while(true)\n        {\n            try\n            {\n                i = s.nextInt();\n                j = s.nextInt();\n                n = i + j;\n                System.out.println(n);\n            }\n            catch(Exception e)\n            {\n                break;\n            }\n\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2732_54__1_2353_19", "golden_code": "import java.util.*;\n\nclass Main {\n\n\tpublic static void main(String[] a) {\n\t\tScanner q = new Scanner(System.in);\n\t\tint n = q.nextInt();\n\t\twhile (n-- > 0) {\n\t\t\tint x = q.nextInt(), y = q.nextInt();\n\t\t\tSystem.out.println(x == y | (x > y & (x - y) == 2) ? x % 2 == 0 ? x + y : x + y - 1 : \"No Number\");\n\t\t}\n\t}\n\n}", "generated_code": "import java.util.Scanner ;\nclass Main\n{\npublic static void main(String[] args){\n       Scanner scan = new Scanner( System.in );\n\twhile(scan.hasNextInt()){\n       int x,y,p,q,result;\n       x = scan.nextInt();\n       y = scan.nextInt();\n       int b=y/x;\n\t\tresult=0;\n\t\tp=1;\n\t\tq=1;\n\t\tif(y%x!=0){\n\t\t\tSystem.out.println(\"0\");\n\t\t}\n\t\telse{\n\t\twhile(p<=b){\n\t\t\tif(b%p==0){\n\t\t\tif(bmm(p,b/p)==1)\n\t\t\tresult++;}\n\t\t\t\tp++;\n\t\t\t}\n\t\tSystem.out.println(result);\n}}}\n   public static int bmm(int a, int b) {\n\t   if (b==0) return a;\n\t   return bmm(b,a%b);\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2337_7__1_1660_9", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        while(s.hasNext()){\n            int  n = s.nextInt();\n            int res=-1;\n            int t=2;\n            for (int i = 1; i < n; i++) {\n                t%=n;\n                if(t%n == 1){\n                    res = i;\n                    break;\n                }\n                t*=2;\n            }\n            if(res == -1){\n                System.out.println(\"2^? mod \"+n+\" = 1\");\n            }else{\n                System.out.println(\"2^\"+res+\" mod \"+n+\" = 1\");\n            }\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n String input = null;\n Scanner s=new Scanner(System.in);\nint max=0;\n    int tedadteam=s.nextInt();\n    String arr[]=new String[tedadteam];\n    int a[]=new int [tedadteam];\n    int b[]=new int[tedadteam];\n  for(int i=0;i<tedadteam;i++){\n   int Time=0;\n   int accept=0;\n    input=s.next();\n    for(int j=0;j<4;j++){\n    int input1=s.nextInt();\n    int input2=s.nextInt();\n     if(input2!=0){\n        accept++;\n        Time+=input2+(input1-1)*20;\n    }\n        }\n    a[i]=accept;\n    b[i]=Time;\n    arr[i]=input;\n        }\nfor(int k=1;k<tedadteam;k++){\n   if(a[k]>a[max]){\n      max=k;\n    }\n   if(a[k]==a[max])\n       if(b[k]<b[max])\n           max=k;\n\n}\n        System.out.println(arr[max]+\" \"+a[max]+\" \"+b[max]);\n\n    }\n    }\n    \n\n\n\n", "score": 0.0}
{"id": "SHARE_1_1001_41__5_1000_11", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n\n\n\n    public static void main(String[] args) {\n       int a;\n         int b = 0 ;\n\n         Scanner s=new Scanner(System.in);\n\n        while (s.hasNext()) {\n             a=s.nextInt();\n             b=s.nextInt();\n            System.out.println(a+b);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n\n  \n    public static void main(String[] args) {\n        int N,B,H,W;       \n        Scanner input=new Scanner(System.in);\n        while (input.hasNext()){\n        N=input.nextInt();\n        B=input.nextInt();\n        H=input.nextInt();\n        W=input.nextInt();\n        int p;\n        int result=1000000000;\n        int a;\n        for (int i=0;i<H;i++){\n            p=input.nextInt();\n            if (N*p > B) {\n                for (int j=0;j<W;j++)\n                    input.nextInt();              \n                continue;\n               \n            }\n                for (int j=0;j<W;j++){\n                    a=input.nextInt();\n                   \n                   \n                    if (a>N  && N*p<result){\n                        result = N*p;\n                       \n                        }\n                       \n                    }\n                   \n            }\n        if (result==1000000000)\n            System.out.println(\"stay home\");\n        else System.out.println(result);\n    }\n        }\n       \n       \n    }", "score": 0.0}
{"id": "SHARE_1_1660_26__1_1660_19", "golden_code": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n=scan.nextInt();\n\t\tint a[][] = new int[n][8];\n\t\tString b[] = new String[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tb[i]=scan.next();\n\t\t\tfor(int j=0;j<8;j++)\n\t\t\t\ta[i][j]=scan.nextInt();\n\t\t}\n\t\tint c[][]=new int[n][2];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tc[i][0]=4;\n\t\t\tfor(int j=1;j<8;j=j+2)\n\t\t\t\tif(a[i][j]==0){\n\t\t\t\t\ta[i][j-1]=0;\n\t\t\t\t\tc[i][0]--;\n\t\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<n;i++)\n\t\t\tc[i][1]=a[i][1]+a[i][3]+a[i][5]+a[i][7]+20*(a[i][0]+a[i][2]+a[i][4]+a[i][6]-c[i][0]);\n\t\tint m=0;\n\t\tfor(int i=1;i<n;i++)\n\t\t\tif(c[m][0]<c[i][0])\n\t\t\t\tm=i;\n\t\t\telse\n                            if(c[m][0]==c[i][0] && c[m][1]>c[i][1])\n\t\t\t\tm=i;\n\t\tSystem.out.println(b[m]+\" \"+c[m][0]+\" \"+c[m][1]);\n\t}\n}", "generated_code": "\nimport java.util.Scanner;\nclass mem{\n    String n;\n    int s;\n    int p;\n    }\npublic class Main {\n    public static void main(String[] args){\n        Scanner in=new Scanner(System.in);\n        int n=in.nextInt();\n        in.nextLine();\n        String s;\n        String[]l=new String[9];\n        int[]a=new int[4];\n        int[]b=new int[4];\n        int x=0,y=0;\n        String na=\"\";int p=0;int so=0;\n        for(int i=0;i<n;i++){\n            s=in.nextLine();\n            l=s.split(\" \");\n            for(int j=0,k=1;j<4;j++,k=k+2){\n                a[j]=Integer.parseInt(l[k]);\n                b[j]=Integer.parseInt(l[k+1]);\n            }\n            for(int j=0;j<4;j++)\n                if(b[j]!=0)\n                    x++;\n            for(int j=0;j<4;j++)\n                if(a[j]!=0&&b[j]!=0)\n                    y=y+(a[j]-1)*20+b[j];\n            if(i==0){\n                so=x;na=l[0];p=y;\n            }\n            else{\n                if(x>so){\n                    so=x;na=l[0];p=y;\n                }\n                else if(x==so && y<p){\n                    na=l[0];p=y;\n                }\n            }\n            x=0;y=0;\n        }\n        System.out.println(na+\" \"+so+\" \"+p);\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_425__1_1001_78", "golden_code": "\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "generated_code": "import java.util.*;\n\npublic class Main{\npublic static void main(String[]args){\nint a,b;\nScanner cin=new Scanner(System.in);\nwhile(cin.hasNext()){\na=cin.nextInt();\nb=cin.nextInt();\nSystem.out.println(a+b);\n}\n}\n\n}", "score": 1.0}
{"id": "SHARE_1_1001_65__1_1001_73", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile (in.hasNextInt()) {\n\t\t\tint a = in.nextInt();\n\t\t\tint b = in.nextInt();\n\t\t\tSystem.out.println(a + b);\n\t\t}\n\t}\n}", "generated_code": "import java.util.*;\npublic class Main \n{\n    public static void main(String args[])\n    {\n        Scanner scan = new Scanner(System.in);\n        while(scan.hasNext())\n        {\n            int a = scan.nextInt() , b = scan.nextInt();\n            System.out.println(a+b);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_497__1_1001_500", "golden_code": "import java.util.*;\n\nclass Main{\n   public static void main(String[] args){\n     Scanner sc = new Scanner(System.in);\n     while(sc.hasNext()){\n       int a = sc.nextInt();\n       int b = sc.nextInt();\n       int res = a+b;\n       System.out.println(res);\n     }\n   }\n}", "generated_code": "public class Main {\n\tpublic static void main(String[] args) {\n\t\tjava.util.Scanner sc = new java.util.Scanner(System.in);\n\t\tint a, b;\n\t\twhile(true){\n\t\t\ttry{\n\t\t\t\ta = sc.nextInt();\n\t\t\t\tb = sc.nextInt();\n\t\t\t\tSystem.out.println(a+b);\n\t\t\t} catch(Exception e){\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n}", "score": 1.0}
{"id": "SHARE_5_1011_8__1_2554_58", "golden_code": "import java.util.*;\nclass Main {\n\tprivate ArrayList <List<Integer>> meetingList = new ArrayList<List<Integer>> () ;\n\tprivate ArrayList <Integer> currentMeetings = new ArrayList <Integer> () ;\n\tpublic void initial (ArrayList<Integer> input){\n\t\tint meetingNum = 0 ;\n\t\tfor (int i = 0 ; i < 11 ; i++){\n\t\t\tArrayList <Integer> temp = new ArrayList <Integer> () ;\n\t\t\tmeetingList.add(temp);\n\t\t}\n\t\tfor (int i = 0 ; i < input.size() ; i += 2){\n\t\t\tmeetingNum ++ ;\n\t\t\tmeetingList.get(input.get(i)).add(meetingNum);\n\t\t\tmeetingList.get(input.get(i+1)).add(meetingNum);\n\t\t}\n\t}\n\tpublic int solve (){\n\t\tint result = 0 ;\n\t\tfor (int i = 0 ; i < meetingList.size() ; i++){\n\t\t\tfor (int j = 0 ; j < meetingList.get(i).size() ; j++){\n\t\t\t\tint currentMeeting = meetingList.get(i).get(j);\n\t\t\t\tif (currentMeetings.contains(currentMeeting)){\n\t\t\t\t\tresult ++ ;\n\t\t\t\t\tcurrentMeetings.clear();\n\t\t\t\t\tj = -1 ;\n\t\t\t\t}\n\t\t\t\telse{ \n\t\t\t\t\tcurrentMeetings.add(currentMeeting) ;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\treturn result ;\n\t}\n\tpublic static void main(String[] args) {\n\t\tArrayList <Integer> input = new ArrayList <Integer> ();\n\t\tArrayList <Integer> readyMeetingInput = new ArrayList<Integer> () ;\n\t\tScanner inputReader = new Scanner (System.in);\n\t\tint numOfDays = inputReader.nextInt() ;\n\t\twhile (inputReader.hasNext())\n\t\t\tinput.add(inputReader.nextInt()) ;\n\t\tinputReader.close() ;\n\t\tint k = 0 ;\n\t\tfor ( int j = 0 ; j < input.size() - 1 ; j++){\n\t\t\tif (input.get(j) == 0 && input.get(j+1)==0){\n\t\t\t\t//readyMeetingInput = input.subList(k,j);\n\t\t\t\treadyMeetingInput.clear() ;\n\t\t\t\tfor (int i = k ; i < j ; i++){\n\t\t\t\t\treadyMeetingInput.add(input.get(i)) ;\n\t\t\t\t}\n\t\t\t\tk = j + 2 ;\n\t\t\t\tj = j + 2 ;\n\t\t\t\tMain newMeet = new Main() ;\n\t\t\t\tnewMeet.initial(readyMeetingInput);\n\t\t\t\tSystem.out.println(newMeet.solve());\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n}", "generated_code": "import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Scanner;\n\npublic class Main {\n    public static class string_graph{\n        String node_string;\n        ArrayList<string_graph> child_strings = new ArrayList<>();\n        String nodeType;\n        boolean is_root = true;\n        String father_string = \"$\";\n        boolean optional = false;\n        public void add_child(string_graph child){\n            child.is_root = false;\n            child.father_string = this.node_string;\n            child_strings.add(child);\n        }\n\n        public void setMandatory(){\n            this.optional = false;\n        }\n        public void setOptional(){\n            this.optional = true;\n        }\n\n        public string_graph(String node_string, String node_type){\n            this.node_string = node_string;\n            this.nodeType = node_type;\n        }\n\n        public string_graph(String node_string){\n            this(node_string,\"$\");\n        }\n\n\n\n\n        public Node generateConvertedGraph(){\n            Node response;\n            if (child_strings.size() == 0){\n                return new LeafNode(node_string,optional);\n            }\n            if (nodeType.equals(\"+\")){\n                response = new SumNode(node_string,optional);\n\n            }\n            else if (nodeType.equals(\"^\")){\n                response = new XorNode(node_string,optional);\n            }\n            else{\n                response = new OrNode(node_string,optional);\n            }\n\n            for (int i = 0 ; i < child_strings.size() ; i ++){\n                response.add_child(child_strings.get(i).generateConvertedGraph());\n            }\n\n            return  response;\n        }\n\n        public void setNodeType(String type) {\n            this.nodeType = type;\n\n        }\n\n        public void print() {\n\n            System.out.println(String.format(\"currently at node : %s with sign : %s with father string : %s\", node_string, nodeType , father_string));\n            if (optional){\n                System.out.println(\"and this node is optional ! hooray\");\n            }\n            for (int i = 0 ; i < child_strings.size() ; i ++){\n                child_strings.get(i).print();\n            }\n        }\n    }\n    public static abstract  class Node{\n        protected  String node_string;\n        ArrayList<Node> child_nodes = new ArrayList<>();\n        boolean optional = false;\n        public boolean is_valid(){\n            if (this.is_present_in_sample && father_node != null && !father_node.is_present_in_sample)\n                return false;\n            return true;\n        }\n        boolean is_present_in_sample = false;\n\n        Node father_node = null;\n\n        public void add_child(Node child){\n            child_nodes.add(child);\n            child.father_node = this;\n\n        }\n\n        public void markFalse(){\n            is_present_in_sample = false;\n            for (int i = 0 ; i < child_nodes.size() ; i ++){\n                child_nodes.get(i).markFalse();\n            }\n        }\n\n        public void markTrue(String[] node_strings) {\n            for (int i = 0 ; i < node_strings.length ; i ++){\n                if (node_strings[i].equals(node_string)){\n                    is_present_in_sample = true;\n                    break;\n                }\n            }\n\n            for (int i = 0 ; i < child_nodes.size() ; i ++){\n                child_nodes.get(i).markTrue(node_strings);\n            }\n        }\n    }\n\n    public static class SumNode extends Node{\n        public SumNode(String value, boolean optional){\n            node_string = value;\n            this.optional = optional;\n        }\n        @Override\n        public boolean is_valid() {\n            boolean response = true;\n            for (int i = 0 ; i < child_nodes.size() ; i ++){\n                if (is_present_in_sample && !child_nodes.get(i).is_present_in_sample){\n                    if (!child_nodes.get(i).optional){\n                        return false;\n                    }\n                }\n                response &= child_nodes.get(i).is_valid();\n            }\n            return response & super.is_valid();\n        }\n    }\n\n    public static class XorNode extends Node{\n        public XorNode(String value, boolean optional){\n            node_string = value;\n            this.optional = optional;\n        }\n        @Override\n        public boolean is_valid() {\n            int counter = 0;\n            boolean response = true;\n            for (int i = 0 ; i < child_nodes.size() ; i ++){\n                if (child_nodes.get(i).is_present_in_sample){\n                    counter += 1;\n                }\n                response &= child_nodes.get(i).is_valid();\n            }\n            return response & (counter == 1 || !is_present_in_sample) & super.is_valid();\n        }\n    }\n\n    public static class OrNode extends  Node{\n        public OrNode(String value, boolean optional){\n            node_string = value;\n            this.optional = optional;\n        }\n        @Override\n        public boolean is_valid() {\n            int counter = 0;\n            boolean response = true;\n            for (int i = 0 ; i < child_nodes.size() ; i ++){\n                if (child_nodes.get(i).is_present_in_sample){\n                    counter += 1;\n                }\n                response &= child_nodes.get(i).is_valid();\n            }\n            return response & (counter >= 1 || !is_present_in_sample) & super.is_valid();\n        }\n    }\n\n    public static class LeafNode extends Node{\n        public LeafNode(String value, boolean optional){\n            node_string = value;\n            this.optional = optional;\n        }\n        @Override\n        public boolean is_valid() {\n            return super.is_valid();\n        }\n    }\n\n    public static HashMap<String,string_graph> string_node_container = new HashMap<>();\n\n    public static void clear_graph(){\n        string_node_container.clear();\n    }\n\n\n    public static string_graph get_string_node(String node_string, String type){\n        if (!string_node_container.containsKey(node_string)){\n            string_graph root = new string_graph(node_string, type);\n            string_node_container.put(node_string, root);\n        }\n        else{\n            string_node_container.get(node_string).setNodeType(type);\n        }\n        return string_node_container.get(node_string);\n    }\n\n    public static void add_child_strings(string_graph root , String child_strings[]){\n        for (int i = 0 ; i < child_strings.length ; i ++){\n\n            boolean optional = false;\n            if (child_strings[i].contains(\"?\")){\n                child_strings[i] = child_strings[i].substring(1);\n                optional = true;\n            }\n\n            if (!string_node_container.containsKey(child_strings[i])){\n                string_graph new_node = new string_graph(child_strings[i]);\n                if (optional) {\n                    new_node.setOptional();\n                }\n                else{\n                    new_node.setMandatory();\n                }\n                string_node_container.put(child_strings[i], new_node);\n                root.add_child(new_node);\n            }\n            else{\n                if (optional){\n                    string_node_container.get(child_strings[i]).setOptional();\n                }\n                else {\n                    string_node_container.get(child_strings[i]).setMandatory();\n                }\n                root.add_child(string_node_container.get(child_strings[i]));\n            }\n        }\n    }\n    public static void print_graph(){\n        System.out.println(\"printing string graph\");\n        string_graph root = get_rootOf_string_graph();\n        root.print();\n    }\n    public static string_graph get_rootOf_string_graph(){\n        for (String key : string_node_container.keySet()){\n            if (string_node_container.get(key).is_root){\n                return string_node_container.get(key);\n            }\n        }\n//        System.out.println(\"oops\");\n//        System.exit(0);\n        return null;\n    }\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        String state = \"build\";\n        Node converted_graph = null;\n        while (true)\n        {\n            String next_line = input.nextLine();\n\n            if (next_line.contains(\"###\")){\n                break;\n            }\n            else if (next_line.contains(\"##\")){\n                clear_graph();\n                System.out.println(\"+++\");\n                state = \"build\";\n            }\n            else if (next_line.contains(\"#\")){\n                state = \"query\";\n                converted_graph = get_rootOf_string_graph().generateConvertedGraph();\n//                print_graph();\n            }\n            else{\n                next_line = next_line.replace(\" \",\"\");\n\n\n                if (state.equals(\"build\")){\n\n                    String splited_array[] = next_line.split(\"=\");\n                    String fa = splited_array[0];\n                    String children = splited_array[1];\n\n                    string_graph fa_string_node ;\n                    if (children.contains(\"+\")){\n\n                        fa_string_node = get_string_node(fa,\"+\");\n                        String children_split[] = children.split(\"\\\\+\");\n                        add_child_strings(fa_string_node,children_split);\n                    }\n                    else if (children.contains(\"|\")){\n                        fa_string_node = get_string_node(fa,\"|\");\n                        String children_split[] = children.split(\"\\\\|\");\n                        add_child_strings(fa_string_node,children_split);\n                    }\n                    else{ // ^\n                        fa_string_node = get_string_node(fa,\"^\");\n                        String children_split[] = children.split(\"\\\\^\");\n                        add_child_strings(fa_string_node,children_split);\n                    }\n\n                }\n\n                else{\n\n                    if (converted_graph == null){\n//                        System.out.println(\"oops\");\n//                        System.exit(0);\n                    }\n                    String splited_array[] = next_line.substring(1,next_line.length() - 1).split(\",\");\n                    converted_graph.markFalse();\n                    converted_graph.markTrue(splited_array);\n\n\n                    boolean validation_result = converted_graph.is_valid();\n                    validation_result &= converted_graph.is_present_in_sample;\n\n                    if (validation_result){\n                        System.out.println(\"Valid\");\n                    }\n                    else{\n                        System.out.println(\"Invalid\");\n                    }\n\n                }\n            }\n\n        }\n\n    }\n}\n\n", "score": 0.0}
{"id": "SHARE_1_1001_123__1_1001_188", "golden_code": "import java.io.*;\n\npublic class Main{\n    public static void main(String[] args) throws Exception{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String line = br.readLine();\n \n        while(line != null){\n            String[] parse = line.split(\" \");\n            long a = Long.parseLong(parse[0]);\n            long b = Long.parseLong(parse[1]);\n            System.out.println(a + b);\n            line = br.readLine();\n        }\n    }\n}", "generated_code": "import java.math.BigInteger;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\nwhile(s.hasNextBigInteger()){\n        BigInteger a = new BigInteger(s.next());\n        BigInteger b = new BigInteger(s.next());\n        BigInteger c = new BigInteger(\"0\");\n        c = b.add(a);\n        System.out.println(c);\n}\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_46__1_1001_288", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner in= new Scanner (System.in);\n\t\tint a=0,b=0;\n\t\twhile(in.hasNext()){\n\t\t\ta=in.nextInt();\n\t\t\tif(in.hasNext()) b=in.nextInt(); else break;\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t\t\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc =new Scanner(System.in);\n        while(sc.hasNext()){\n            System.out.println(sc.nextInt() +sc.nextInt());\n            \n        }\n    }\n\n}", "score": 1.0}
{"id": "SHARE_1_2738_7__1_2738_6", "golden_code": "import java.io.BufferedOutputStream;\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.StringTokenizer;\n\n/**\n * @author Mbt925\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     * @throws java.io.FileNotFoundException\n     */\n    public static void main(String[] args) throws FileNotFoundException, IOException {\n        new Solve().solve();\n    }\n}\n\nclass Solve {\n    final int MAXN= 100001;\n    Interval[] intervals= new Interval[MAXN];\n    LinkedList<Interval> linkedList;\n    int n, k;\n    public void solve() throws FileNotFoundException, IOException{\n        BufferedReader reader= new BufferedReader(new InputStreamReader(System.in));\n//        BufferedReader reader= new BufferedReader(new FileReader(\"../../a.txt\"));\n        PrintWriter writer= new PrintWriter(new BufferedOutputStream(System.out));\n        int testCases= Integer.parseInt(reader.readLine());\n\n        for (int t = 0; t < testCases; t++) {\n            StringTokenizer tokenizer= new StringTokenizer(reader.readLine());\n            n= Integer.parseInt(tokenizer.nextToken());\n            k= Integer.parseInt(tokenizer.nextToken());\n            for (int i = 0; i < n; i++) {\n                tokenizer= new StringTokenizer(reader.readLine());\n                intervals[i]= new Interval(Integer.parseInt(tokenizer.nextToken()),Integer.parseInt(tokenizer.nextToken()));\n            }\n            Arrays.sort(intervals, 0, n, new Comparator<Interval>() {\n                @Override\n                public int compare(Interval o1, Interval o2) {\n                    if (o1.left==o2.left)\n                        return o1.right-o2.right;\n                    return o1.left-o2.left;\n                }\n            });        \n            linkedList= new LinkedList<Interval>();\n            for (int i = n-1; i >= 0; i--)\n                linkedList.push(intervals[i]);            \n            int count=0;\n            Iterator<Interval> iterator= linkedList.iterator();\n            Interval lastInterval, currInterval;\n            while(iterator.hasNext()){\n                lastInterval= iterator.next();\n                iterator.remove();\n                // iterate to end\n                while(iterator.hasNext()){\n                    currInterval= iterator.next();    \n                    if (lastInterval.right>currInterval.left+k){\n                        if ((Math.min(lastInterval.right, currInterval.right)-Math.max(lastInterval.left, currInterval.left))>k){\n                            iterator.remove();\n                            if (currInterval.right>lastInterval.right)\n                                lastInterval= currInterval;\n                        }\n                    }\n                    else\n                        break;\n                }\n                iterator= linkedList.iterator();\n                count++;\n            }\n            writer.println(count);\n            writer.flush();\n        }\n        writer.flush();\n    }\n}\n\nclass Interval{\n    public int left, right;\n    public Interval(int l, int r){\n        left= l; right= r;\n    }\n}\n\n", "generated_code": "import java.io.BufferedOutputStream;\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.StringTokenizer;\n\n/**\n * @author Mbt925\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     * @throws java.io.FileNotFoundException\n     */\n    public static void main(String[] args) throws FileNotFoundException, IOException {\n        new Solve().solve();\n    }\n}\n\nclass Solve {\n    final int MAXN= 100001;\n    Interval[] intervals= new Interval[MAXN];\n    boolean[] seen= new boolean[MAXN];\n    int n, k;\n    public void solve() throws FileNotFoundException, IOException{\n        BufferedReader reader= new BufferedReader(new InputStreamReader(System.in));\n//        BufferedReader reader= new BufferedReader(new FileReader(\"../../a.txt\"));\n        PrintWriter writer= new PrintWriter(new BufferedOutputStream(System.out));\n        int testCases= Integer.parseInt(reader.readLine());\n\n        for (int t = 0; t < testCases; t++) {\n            StringTokenizer tokenizer= new StringTokenizer(reader.readLine());\n            n= Integer.parseInt(tokenizer.nextToken());\n            k= Integer.parseInt(tokenizer.nextToken());\n            for (int i = 0; i < n; i++) {\n                tokenizer= new StringTokenizer(reader.readLine());\n                intervals[i]= new Interval(Integer.parseInt(tokenizer.nextToken()),Integer.parseInt(tokenizer.nextToken()));\n            }\n            Arrays.sort(intervals, 0, n, new Comparator<Interval>() {\n                @Override\n                public int compare(Interval o1, Interval o2) {\n                    if (o1.left==o2.left)\n                        return o1.right-o2.right;\n                    return o1.left-o2.left;\n                }\n            });            \n            int count=0;\n            for (int i = 0; i < n; i++)\n                if (!seen[i]){\n                    dfs(i);\n                    count++;\n                }\n            writer.println(count);\n            Arrays.fill(seen, false);\n        }\n        writer.flush();\n    }\n    \n    void dfs(int startIndex){\n        Interval currInterval= intervals[startIndex];\n        for (int i = startIndex+1; i < n; i++) {\n            if (currInterval.right>intervals[i].left+k){\n                if((Math.min(currInterval.right, intervals[i].right)-Math.max(currInterval.left, intervals[i].left))>k){\n                    seen[i]= true;\n                    if (intervals[i].right>currInterval.right)\n                        currInterval= intervals[i];\n                }\n            }\n            else\n                break;\n        }\n    }\n}\n\nclass Interval{\n    public int left, right;\n    public Interval(int l, int r){\n        left= l; right= r;\n    }\n}\n\n", "score": 1.0}
{"id": "SHARE_1_1001_6__1_1001_305", "golden_code": "import java.util.*;\npublic class Main\n{\npublic static void main(String[]args)\n{\n   Scanner inp=new Scanner (System.in);\n   while(inp.hasNextInt())\n    {\n        int a=inp.nextInt(),b=inp.nextInt();\n        System.out.println(a+b);\n}\n}\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n       \n    public static void main(String[] args) {\n        \n        Scanner input=new Scanner(System.in);\n        \n        int a,b;\n        while(input.hasNext()){\n            a=input.nextInt();\n            b=input.nextInt();\n            System.out.println(a+b);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_110__1_1001_237", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    static Scanner in= new Scanner( System.in);\n    public static void main(String[] args) {\n        int x, y;\n        while( in.hasNextInt()){\n            x= in.nextInt();\n            y= in.nextInt();\n            System.out.println(x+y);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args){\n\t\t\n\t\tint a,b;\n\t\t@SuppressWarnings(\"resource\")\n\t\tScanner input= new Scanner(System.in);\n\t\twhile(input.hasNext()){\n\t\t\ta=input.nextInt(); \n\t\t\tb=input.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t\t\n\t}\n\n}", "score": 1.0}
{"id": "SHARE_1_1008_2__1_2371_1", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int a, b, r, c;\n        a = s.nextInt();\n        b = s.nextInt();\n        r = s.nextInt();\n        c = s.nextInt();\n        while (a != 0 && b != 0 && c != 0 && r != 0) {\n            char[][] grid = new char[a][b];\n            for (int i = 0; i < a; i++) {\n                String str = s.next();\n                for (int j = 0; j < b; j++) {\n                    grid[i][j] = str.charAt(j);\n                }\n            }\n            System.out.println(compute(grid, r - 1, c - 1));\n            a = s.nextInt();\n            b = s.nextInt();\n            r = s.nextInt();\n            c = s.nextInt();\n        }\n    }\n\n    static int compute(char[][] grid, int r, int c) {\n        int counter = 4;\n        grid[r][c] = 'O';\n        counter += computeBoundary(grid, r - 1, c);\n        counter += computeBoundary(grid, r, c - 1);\n        counter += computeBoundary(grid, r, c + 1);\n        counter += computeBoundary(grid, r + 1, c);\n        for (int i = -1; i <= 1; i++) {\n            for (int j = -1; j <= 1; j++) {\n                try {\n                    if (grid[r + i][c + j] == 'X') {\n                        counter += compute(grid, r + i, c + j);\n                    }\n                } catch (Exception e) {\n                }\n            }\n        }\n        return counter;\n    }\n\n    static int computeBoundary(char[][] grid, int r, int c) {\n        try {\n            if (grid[r][c] == 'X' || grid[r][c] == 'O') {\n                return -1;\n            }\n        } catch (Exception e) {\n        }\n        return 0;\n    }\n}\n", "generated_code": "import java.util.*;\nclass Main\n{\t\n\tpublic static void main(String[] args)\n\t{\n\t\tint p,s,l,n,m,a,k;\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile(scan.hasNextInt())\n\t\t{\n\t\t\tn = scan.nextInt();\n\t\t\tp = 0;\n\t\t\tm = n-1;\n\t\t\ta = n*n;\n\t\t\tp += a;\n\t\t\twhile(m!=0)\n\t\t\t{\n\t\t\t\ts = 0;\n\t\t\t\tl = m;\n\t\t\t\twhile(l!=0)\n\t\t\t\t{\n\t\t\t\t\ts += l;\n\t\t\t\t\tl--;\n\t\t\t\t}\n\t\t\t\tp += s;\n\t\t\t\tm--;\n\t\t\t}\n\t\t\tif(n>3)\n\t\t\t{\n\t\t\t\tk = n-3;\n\t\t\t\twhile(k>0)\n\t\t\t\t{\n\t\t\t\t\ts = 0;\n\t\t\t\t\tl = k;\n\t\t\t\t\twhile(l!=0)\n\t\t\t\t\t{\n\t\t\t\t\t\ts+=l;\n\t\t\t\t\t\tl--;\n\t\t\t\t\t}\n\t\t\t\t\tp += s;\n\t\t\t\t\tk -= 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(p);\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1079_7__1_2527_7", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        int count = 0;\n\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {\n            int sum = 0;\n            int dig = 0;\n            int number = in.nextInt();\n            int temp = number;\n            while (temp / 10 >= 1) {\n\n                temp /= 10;\n                dig++;\n            }\n\n            if (number == 0) {\n                System.out.println(\"END OF OUTPUT\");\n                System.exit(0);\n            }\n\n            for (int i = 1; i <= number / 2; i++) {\n                if (number % i == 0) {\n                    sum += i;\n                }\n            }\n            if (count == 0) {\n                System.out.println(\"PERFECTION OUTPUT\");\n            }\n            if (sum == number) {\n                for (int i = 1; i < 5 - dig; i++) {\n                    System.out.print(\" \");\n                }\n                System.out.print(number + \"  PERFECT\\n\");\n\n            } else if (sum > number) {\n                for (int i = 1; i < 5 - dig; i++) {\n                    System.out.print(\" \");\n                }\n                System.out.print(number + \"  ABUNDANT\\n\");\n            } else {\n                for (int i = 1; i < 5 - dig; i++) {\n                    System.out.print(\" \");\n                }\n                System.out.print(number + \"  DEFICIENT\\n\");\n            }\n            count++;\n\n        }\n    }\n}\n", "generated_code": "import java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        for (int i = 0; i < n; i++) {\n            s.nextLine();\n            String cur = s.nextLine();\n            double x1 = s.nextDouble();\n            double y1 = s.nextDouble();\n            double z1 = s.nextDouble();\n            s.nextLine();\n            String dest = s.nextLine();\n            double x2 = s.nextDouble();\n            double y2 = s.nextDouble();\n            double z2 = s.nextDouble();\n            double x = x1 - x2;\n            double y = y1 - y2;\n            double z = z1 - z2;\n            DecimalFormat df =new DecimalFormat(\"0.00\");\n            double res = Math.pow(x, 2)+Math.pow(y, 2)+Math.pow(z, 2);\n            System.out.println(cur + \" to \"\n                    +dest +\": \"+ df.format(Math.sqrt(res)));\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_2732_19__1_2732_47", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int output=0;\n        int x,y;\n        for (int i = 0; i < n; i++) {\n            x=scanner.nextInt();\n            y=scanner.nextInt();\n            if(y==x || y==x-2){\n                if(x%2==0){\n                    output=x+y;\n                }\n                else{\n                    output=x+y-1;\n                }\n                System.out.println(output);\n            }\n            else{\n                System.out.println(\"No Number\");\n            }\n            \n        }\n        \n        \n        \n        \n    }\n    \n\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n   public static void main(String[] args) {\n      Scanner in = new Scanner(System.in);\n      int t = in.nextInt();\n      while (t-- > 0) {\n         int a = in.nextInt(), b = in.nextInt();\n         if (eo(a, b) == 0) {\n            if (a == b) {\n               System.out.println(a + b);\n            } else if (a == b + 2) {\n               System.out.println(a + b);\n            } else {\n               System.out.println(\"No Number\");\n            }\n         } else if (eo(a, b) == 1) {\n            if (a == b) {\n               System.out.println((a + b) - 1);\n            } else if (a == b + 2) {\n               System.out.println((a + b) - 1);\n            } else {\n               System.out.println(\"No Number\");\n            }\n         } else {\n            System.out.println(\"No Number\");\n         }\n      }\n   }\n\n   public static int eo(int a, int b) {\n      if (a % 2 == 0 && b % 2 == 0) {\n         return 0;\n      } else if (a % 2 != 0 && b % 2 != 0) {\n         return 1;\n      } else {\n         return 2;\n      }\n   }\n}", "score": 1.0}
{"id": "SHARE_1_2737_18__1_2737_59", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tint t;\n\t\tScanner sc = new Scanner(System.in);\n\t\tt = sc.nextInt();\n\t\tint m,n;\n\t\tfor (int i = 0; i < t; i++) {\n\t\t\tm = sc.nextInt();\n\t\t\tn = sc.nextInt();\n\t\t\tSystem.out.println((m*n*(m+n-2))/2);\n\t\t}\n\t}\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        while (t-- > 0) {\n            int n = in.nextInt(), m = in.nextInt();\n            long sum = 0;\n            for (int i = n - 1; i >= 0; i--) {\n                for (int j = 0; j < m; j++) {\n                    sum += n - i - 1 + j;\n                }\n            }\n            System.out.println(sum);\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1104_10__1_1998_4", "golden_code": "import java.util.Scanner;\npublic class Main {public static void main(String[] q){Scanner b=new Scanner(System.in);\nint n=b.nextInt();\nb.nextLine();\nfor (int i=0;i<n;i++){\nString a=b.nextLine();\nSystem.out.println(r(a));}}static String r(String a){\nString r=\"\";\nfor(char ch:a.toCharArray()){r=ch+\"\"+r;}\nreturn r;}}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        for (int i = 0; i < n; i++) {\n            String str = s.next();\n            String answer = \"\";\n            char ch = str.charAt(0);\n            int count = 1;\n            for (int j = 1; j < str.length(); j++) {\n                if (ch == str.charAt(j)) {\n                    count++;\n                } else {\n                    if (count == 1) {\n                        answer = answer + ch;\n                    } else {\n                        answer = answer + count + ch;\n                    }\n                    ch = str.charAt(j);\n                    count = 1;\n                }\n            }\n            if (count == 1) {\n                answer = answer + ch;\n            } else {\n                answer = answer + count + ch;\n            }\n            System.out.println(answer);\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2744_6__1_1959_42", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    static void dfs(int u) {\n        shart[u] = true;\n        value += pool[u];\n        for (int i = 0; i < fr; i++) {\n            if (shart[i] == false && sharts[i][u] == 1) {\n                dfs(i);\n            }\n        }\n\n    }\n    static int fr;\n    static int sharts[][], pool[];\n    static int value = 0;\n    static boolean shart[];\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n\n        out:\n        while (in.hasNext()) {\n            fr = in.nextInt();\n            int re = in.nextInt();\n            shart = new boolean[fr];\n\n            sharts = new int[fr][fr];\n\n            pool = new int[fr];\n\n            for (int i = 0; i < fr; i++) {\n                pool[i] = in.nextInt();\n            }\n\n            for (int i = 0; i < re; i++) {\n                int n = in.nextInt();\n                int m = in.nextInt();\n                sharts[n][m] = 1;\n                sharts[m][n] = 1;\n                //  shart[i] = true;\n            }\n\n            value = 0;\n            for (int i = 0; i < fr; i++) {\n                if (value != 0) {\n                    System.out.println(\"IMPOSSIBLE\");\n                    continue out;\n                }\n                if (shart[i] == false) {\n                    dfs(i);\n                }\n            }\n            System.out.println(\"POSSIBLE\");\n\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        while(input.hasNextLine())\n        {\n        String p=input.nextLine();\n        System.out.println(checkLine(p));\n        }\n    }\n    static int checkLine(String s)\n    {\n        int count1=0;\n        int count2=0;\n        int count3=0;\n        int count4=0;\n        int change=0;\n        String[] lights=new String[s.length()];\n        lights=s.split(\" \");\n        int[] lightsn=new int[lights.length-1];\n        for(int i=1;i<lights.length;i++)\n        {\n            lightsn[i-1]=Integer.parseInt(lights[i]);\n        }\n        for(int i=0;i<lightsn.length;i+=2)\n        {\n            if(lightsn[i]==0)\n                count1++;\n            else\n                 count2++;\n        }\n        \n         for(int i=1;i<lightsn.length;i+=2)\n        {\n            if(lightsn[i]==0)\n                count3++;\n            else\n                count4++;\n        }\n        if(count1+count4<count2+count3)\n            change=lightsn.length-(count2+count3);\n        else\n            change=lightsn.length-(count4+count1);\n        return change;\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_132__1_1001_470", "golden_code": "/**\n * 1001. A+B\n * Calculate a + b\n * \n * INPUT\n * The input will consist of a series of pairs of integers a and b,separated by a space, one pair of integers per line.\n * you should read the input until EOF.\n * \n * OUTPUT\n * For each pair of input integers a and b you should output the sum of a and b in one line,\n * and with one line of output for each line in input.\n * \n * @link http://sharecode.ir/problemset/view/1001\n */\n\nimport java.io.*;\nimport java.util.Scanner;\n\npublic class Main {\n\t\n\tint solve(int a, int b) {\n\t\treturn a + b;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\tMain program = new Main();\n\t\t\n\t\twhile( in.hasNext() ) {\n\t\t\tout.println( program.solve( in.nextInt(), in.nextInt() ) );\n\t\t}\n\t\t\n\t\tout.flush();\n\t}\n\t\n}\n", "generated_code": "import java.util.Scanner;\n \npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt() + cin.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2599_19__1_2714_0", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner s=new Scanner(System.in);\n        while(true){\n            long x=s.nextLong();\n            if(x==0){\n                break;\n            }\n            String str=x+\"\";\n            int l=str.length();\n            long sum=0;\n            if(str.charAt(l-1)>'4'){\n                sum+=1;\n            }\n            int w=1;\n            int q=10;\n            for (int i = l-2; i >= 0; i--) {\n                if(str.charAt(i)<'4'){\n                    sum+=(w*Integer.parseInt(str.charAt(i)+\"\"));\n                    w*=9;\n                    w+=q;\n                    q*=10;\n                }else{\n                    sum+=(w*(Integer.parseInt(str.charAt(i)+\"\")-1));\n                    w*=9;\n                    w+=q;\n                    sum+=q;\n                    q*=10;\n                }\n            }\n            System.out.println(x+\": \"+(x-sum));\n        }\n    }\n}\n", "generated_code": "import java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\nclass Chunk {\n\tBigInteger num = null;\n\tString str = null;\n\tboolean isNum = false;\n\tboolean isNumber() {\n\t\treturn isNum;\n\t}\n}\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\twhile(true)\n\t\t{\n\t\t\tString s1 = sc.next();\n\t\t\tif(s1.equals(\"###\"))\n\t\t\t\tbreak;\n\t\t\tString s2 = sc.next();\n\t\t\t\n\t\t\tif(s1.equals(s2))\n\t\t\t{\n\t\t\t\tSystem.out.println(\"=\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tArrayList<Chunk> c1 = new ArrayList<Chunk>();\n\t\t\tArrayList<Chunk> c2 = new ArrayList<Chunk>();\t\t\t\n\n\t\t\tmake_chunk(s1, c1);\n\t\t\tmake_chunk(s2, c2);\n\t\t\t\n//\t\t\tprint_chunks(c1);\n//\t\t\tprint_chunks(c2);\n\t\t\t// phase1\n\t\t\tboolean flag = false;\n\t\t\tfor(int i = 0;!flag && i < Math.min(c1.size(), c2.size());i++)\n\t\t\t{\n\t\t\t\tif(c1.get(i).isNumber() && !c2.get(i).isNumber())\n\t\t\t\t{\n\t\t\t\t\tflag = true;\n\t\t\t\t\tSystem.out.println(\"<\");\n\t\t\t\t}\n\t\t\t\telse if(c1.get(i).isNumber() && !c2.get(i).isNumber())\n\t\t\t\t{\n\t\t\t\t\tflag = true;\n\t\t\t\t\tSystem.out.println(\">\");\n\t\t\t\t}\n\t\t\t\telse if(c1.get(i).isNumber() && c2.get(i).isNumber())\n\t\t\t\t{\n\t\t\t\t\tint cmp = c1.get(i).num.compareTo(c2.get(i).num);\n\t\t\t\t\tif(cmp < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tSystem.out.println(\"<\");\n\t\t\t\t\t}\n\t\t\t\t\telse if(cmp > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tSystem.out.println(\">\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tint cmp = c1.get(i).str.toLowerCase().compareTo(c2.get(i).str.toLowerCase());\n\t\t\t\t\tif(cmp < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tSystem.out.println(\"<\");\n\t\t\t\t\t}\n\t\t\t\t\telse if(cmp > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tSystem.out.println(\">\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// phase2\n\t\t\t//System.out.println(\"@2222222222\");\n\t\t\tif(!flag)\n\t\t\t{\n\t\t\t\tflag = true;\n\t\t\t\tif(c1.size() < c2.size())\n\t\t\t\t\tSystem.out.println(\"<\");\n\t\t\t\telse if(c1.size() > c2.size())\n\t\t\t\t\tSystem.out.println(\">\");\n\t\t\t\telse\n\t\t\t\t\tflag = false;\n\t\t\t}\n\t\t\tif(flag)\n\t\t\t\tcontinue;\n\t\t\tfor(int i = 0;!flag && i < Math.min(c1.size(), c2.size());i++)\n\t\t\t{\n\t\t\t\tif(c1.get(i).isNumber() && c2.get(i).isNumber())\n\t\t\t\t{\n\t\t\t\t\tint cmp = c1.get(i).str.compareTo(c2.get(i).str);\n\t\t\t\t\tif(cmp < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tSystem.out.println(\"<\");\n\t\t\t\t\t}\n\t\t\t\t\telse if(cmp > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tSystem.out.println(\">\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tint cmp = c2.get(i).str.compareTo(c1.get(i).str);\n\t\t\t\t\tif(cmp < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tSystem.out.println(\"<\");\n\t\t\t\t\t}\n\t\t\t\t\telse if(cmp > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tSystem.out.println(\">\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t}\n\t}\n\n\tprivate static void print_chunks(ArrayList<Chunk> c1) {\n\t\tfor(Chunk c: c1)\n\t\t{\n\t\t\tif(c.isNum)\n\t\t\t\tSystem.out.println(c.num + \" \" + c.str);\n\t\t\telse\n\t\t\t\tSystem.out.println(c.str);\n\t\t}\n\t}\n\n\tprivate static void make_chunk(String s1, ArrayList<Chunk> c1) {\n\t\twhile(s1.length() > 0)\n\t\t{\n\t\t\tChunk chunk = new Chunk();\n\t\t\tif(s1.charAt(0) >= '0' && s1.charAt(0) <= '9')\n\t\t\t{\n\t\t\t\tchunk.isNum = true;\n\t\t\t\tint last = -1;\n\t\t\t\tfor(int i = 0;i < s1.length();i++)\n\t\t\t\t\tif(!(s1.charAt(i) >= '0' && s1.charAt(i) <= '9'))\n\t\t\t\t\t{\n\t\t\t\t\t\tlast = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tif(last == -1)\n\t\t\t\t{\n\t\t\t\t\tchunk.str = s1;\n\t\t\t\t\ts1 = \"\";\n\t\t\t\t\tchunk.num = new BigInteger(chunk.str);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tchunk.str = s1.substring(0, last);\n\t\t\t\t\ts1 = s1.substring(last);\n\t\t\t\t\tchunk.num = new BigInteger(chunk.str);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tchunk.isNum = false;\n\t\t\t\tint last = -1;\n\t\t\t\tfor(int i = 0;i < s1.length();i++)\n\t\t\t\t\tif(s1.charAt(i) >= '0' && s1.charAt(i) <= '9')\n\t\t\t\t\t{\n\t\t\t\t\t\tlast = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tif(last == -1)\n\t\t\t\t{\n\t\t\t\t\tchunk.str = s1;\n\t\t\t\t\ts1 = \"\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tchunk.str = s1.substring(0, last);\n\t\t\t\t\ts1 = s1.substring(last);\n\t\t\t\t}\t\t\t\t\t\n\t\t\t}\n\t\t\tc1.add(chunk);\n\t\t}\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_2121_62__1_2121_13", "golden_code": "import java.math.BigInteger;\n\npublic class Main {\n    // problem on sharecode.io\n\n    public static void main(String[] args) {\n        java.util.Scanner input = new java.util.Scanner(System.in);\n        while(input.hasNext()){\n        \tlong n = input.nextLong();\n        \tSystem.out.println(fib(n));\n        }\n    }\n\n    public static BigInteger fib(long n){\n        if(n <= 2)\n            return BigInteger.ONE;\n        BigInteger a = BigInteger.ONE;\n        BigInteger b = new BigInteger(\"2\");\n        for (long i = 3; i < n; i++) {\n            b = b.add(a);\n            a = b.subtract(a);\n        }\n        return b;\n    }\n}", "generated_code": "//package main;\nimport java.util.Scanner;\nimport java.math.BigInteger;\npublic class Main {\n    public static void main(String[] args)\n    {\n        Scanner cin=new Scanner(System.in);\n        int n;\n        while(cin.hasNext())\n        {\n            BigInteger f1 =new BigInteger(\"1\"),f0 =new BigInteger(\"1\");\n            n=cin.nextInt();\n            while(true)\n            {\n                n--;\n                if(n == 1)\n                    break;\n                f1= f1.add(f0);\n                f0 =f1.subtract(f0);\n            }\n            System.out.println(f1);\n        }\n    }\n    \n}\n\n", "score": 1.0}
{"id": "SHARE_5_1004_14__5_1004_20", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tscan.nextLine();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tlong max = 1, min = 0;\n\t\t\tString s= scan.nextLine();\n\t\t\tString str[]= s.split(\"\\\\*\");\n\t\t\tfor (int j=0 ; j<str.length ; j++){\n\t\t\t\tString str2[]= str[j].split(\"\\\\+\");\n\t\t\t\tlong val=0;\n\t\t\t\tfor (int k=0 ; k<str2.length; k++)\n\t\t\t\t\tval+=Integer.parseInt(str2[k]);\n\t\t\t\tmax*=val;\n\t\t\t}\n\t\t\tString str3[]= s.split(\"\\\\+\");\n\t\t\tfor (int j=0 ; j<str3.length ; j++){\n\t\t\t\tString str4[]= str3[j].split(\"\\\\*\");\n\t\t\t\tlong val=1;\n\t\t\t\tfor (int k=0 ; k<str4.length; k++)\n\t\t\t\t\tval*=Integer.parseInt(str4[k]);\n\t\t\t\tmin+=val;\n\t\t\t}\n\t\t\tSystem.out.println(\"The maximum and minimum are \" + max + \" and \"\n\t\t\t\t\t+ min + \".\");\n\t\t}\n\t}\n}\n", "generated_code": "import java.math.BigInteger;\nimport java.util.*;\n\npublic class Main {\n    public static Vector<String> vec;\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = Integer.parseInt(in.nextLine());\n        while(n-- > 0) {\n            String str = in.nextLine();\n            parsInput(str);\n            for(int i=0 ; i<vec.size() ; i++) {\n                if(vec.elementAt(i).equals(\"*\")) {\n                    BigInteger a = new BigInteger(vec.elementAt(i-1));\n                    BigInteger b = new BigInteger(vec.elementAt(i+1));\n                    String mul = \"\" + a.multiply(b);\n                    vec.setElementAt(mul, i);\n                    vec.remove(i+1);\n                    vec.remove(i-1);\n                    i -= 1;\n                }\n            }\n            for(int i=0 ; i<vec.size() ; i++) {\n                if(vec.elementAt(i).equals(\"+\")) {\n                    BigInteger a = new BigInteger(vec.elementAt(i-1));\n                    BigInteger b = new BigInteger(vec.elementAt(i+1));\n                    String add = \"\" + a.add(b);\n                    vec.setElementAt(add, i);\n                    vec.remove(i+1);\n                    vec.remove(i-1);\n                    i -= 1;\n                }\n            }\n            BigInteger MIN = new BigInteger(vec.elementAt(0));\n            parsInput(str);\n            for(int i=0 ; i<vec.size() ; i++) {\n                if(vec.elementAt(i).equals(\"+\")) {\n                    BigInteger a = new BigInteger(vec.elementAt(i-1));\n                    BigInteger b = new BigInteger(vec.elementAt(i+1));\n                    String add = \"\" + a.add(b);\n                    vec.setElementAt(add, i);\n                    vec.remove(i+1);\n                    vec.remove(i-1);\n                    i -= 1;\n                }\n            }\n            for(int i=0 ; i<vec.size() ; i++) {\n                if(vec.elementAt(i).equals(\"*\")) {\n                    BigInteger a = new BigInteger(vec.elementAt(i-1));\n                    BigInteger b = new BigInteger(vec.elementAt(i+1));\n                    String mul = \"\" + a.multiply(b);\n                    vec.setElementAt(mul, i);\n                    vec.remove(i+1);\n                    vec.remove(i-1);\n                    i -= 1;\n                }\n            }\n            BigInteger MAX = new BigInteger(vec.elementAt(0));\n            System.out.println(\"The maximum and minimum are \" + MAX + \" and \" + MIN + \".\");\n        }\n    }\n\n    public static void parsInput(String s) {\n        vec = new Vector<String>();\n        for(int i=0 ; i<s.length() ; i++) {\n            if(s.substring(i, i+1).equals(\"*\") || s.substring(i, i+1).equals(\"+\")) {\n                vec.add(s.substring(0, i));\n                vec.add(s.substring(i, i+1));\n                s = s.substring(i+1);\n                i = 0;\n            }\n        }\n        vec.add(s);\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_106015_27__1_1662_7", "golden_code": "\nimport java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        BigInteger[] nums = new BigInteger[1000];\n        nums[0] = BigInteger.ZERO;\n        for (int i = 1; i < 1000; i++) {\n            nums[i] = nums[i - 1].multiply(new BigInteger(\"2\"));\n            if ((i - 1) % 2 == 1) {\n                nums[i] = nums[i].add(BigInteger.ONE);\n            }\n        }\n        Scanner s = new Scanner(System.in);\n        while (s.hasNext()) {\n            int n = s.nextInt();\n            if (n % 2 == 0) {\n                System.out.println(nums[n - 1].add(BigInteger.ONE));\n            } else {\n                System.out.println(nums[n - 1]);\n            }\n        }\n    }\n}\n", "generated_code": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        HashMap<String, word> map = new HashMap<String, word>();\n        String str = \"\";\n        while (scanner.hasNext()) {\n            String line = scanner.nextLine();\n            str += line.toLowerCase() + \" \";\n//            if (line.charAt(line.length() - 1) == '#')\n//                break;\n        }\n        String s = str;\n        for (char ch : s.toCharArray()) {\n            if (!Character.isLetterOrDigit(ch)) {\n                if (ch != ' ') {\n                    str = str.replace(ch + \"\", \" \");\n                }\n            }\n        }\n        String[] array = str.split(\" \");\n        for (String ss : array) {\n            word x = map.get(ss);\n            if (x == null) {\n                word xx = new word();\n                xx.s = ss;\n                xx.x = 1;\n                map.put(ss, xx);\n            } else {\n                word xx = map.get(ss);\n                xx.x = xx.x + 1;\n            }\n        }\n        ArrayList<word> words = new ArrayList<word>(map.values());\n        Collections.sort(words, new cmp());\n        int n;\n        if (s(words.get(words.size() - 1).s))\n            n = words.get(words.size() - 2).x;\n        else\n            n = words.get(words.size() - 1).x;\n        ArrayList<String> strings = new ArrayList<String>();\n        for (word w : words) {\n            if (w.x == n) {\n                strings.add(w.s);\n            }\n        }\n        Collections.sort(strings, new cmp2());\n        System.out.println(n + \" occurrences\");\n        for (String sss : strings)\n            System.out.println(sss);\n    }\n\n    static class word {\n        String s;\n        Integer x;\n    }\n\n    static class cmp implements Comparator<word> {\n\n        @Override\n        public int compare(word o1, word o2) {\n            return (int) Math.signum(o1.x - o2.x);\n        }\n    }\n\n    static class cmp2 implements Comparator<String> {\n\n        @Override\n        public int compare(String o1, String o2) {\n            return o1.compareTo(o2);\n        }\n    }\n    static boolean s(String ss){\n        if(ss.length() == 0)\n            return true;\n        for(char ch:ss.toCharArray())\n            if(!Character.isLetterOrDigit(ch))\n                return true;\n        return false;\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2734_42__1_2811_0", "golden_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Scanner;\n\npublic class Main {\n\n\n public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        \n        \n        int t=input.nextInt();\n        int n,w;\n        int sum,c;\n        boolean enough;\n        int[] pockets;\n        while(t-->0){\n            sum=0;\n            enough=false;\n            c=0;\n            n=input.nextInt();\n            w=input.nextInt();\n            pockets=new int[n];\n            for (int i = 0; i < pockets.length; i++) \n                pockets[i]=input.nextInt();\n                \n            Arrays.sort(pockets);\n            \n            for(int i=n-1;i>=0 && !enough;i--){\n                sum+=pockets[i];\n                if(sum>=w)\n                    enough=true;\n                c++;\n            }\n            \n            if(enough)\n                System.out.println(c);\n            else\n                System.out.println(\"No solution!\");\n        }\n    }\n}", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\nimport java.util.TreeSet;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n\n        while (t > 0) {\n            int n = in.nextInt();\n            int m = in.nextInt();\n            TreeSet<Integer> items = new TreeSet<Integer>();\n            ArrayList<Integer> buy = new ArrayList<Integer>();\n            for (int i = 0; i < n; i++) {\n                items.add(in.nextInt());\n            }\n            for (int i = 0; i < m; i++) {\n                buy.add(in.nextInt());\n            }\n            items.removeAll(buy);\n            Object arrr[] = items.toArray();\n            for (int i = 0; i < arrr.length; i++) {\n                if (i == arrr.length - 1) {\n                    System.out.print(arrr[i] );\n\n                } else {\n                    System.out.print(arrr[i] + \",\");\n                }\n            }\n            t--;\n            System.out.println(\"\");\n        }\n    }\n\n}\n", "score": 0.0}
{"id": "SHARE_1_2822_44__1_2822_70", "golden_code": "\n\nimport java.util.Scanner;\n\n/**\n *\n * @author parimah\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner sc=new Scanner(System.in);\n        int n=0;\n        int t=0;\n        n=sc.nextInt();\n        \n        for(int i=0;i<n;i++)\n        {\n            int sumf=0;\n            int sumz=0;\n            t=sc.nextInt();\n            System.out.print((t*(t+1))/2+\" \");\n            int s=0;\n            for(int j=1;j<=t*2;j++)\n            {\n                if(j%2!=0)\n                {\n                    sumf+=j;\n                }\n                else\n                    sumz+=j;\n            }\n            System.out.println(sumf+\" \"+sumz);\n\n        }\n    }\n    \n}", "generated_code": "import java.io.BufferedWriter;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\tPrintWriter out=new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t    int t=sc.nextInt();\n\t    for(int i=0;i<t;i++){\n\t    \tint n=sc.nextInt();\n\t    \tlong s1=0;\n\t    \tlong s2=0;\n\t    \tlong s3=0;\n\t    \ts1=(n*(n+1))/2;\n\t    \ts2=n*n;\n\t    \ts3=n*(n+1);\n\t    \tout.println(s1+\" \"+s2+\" \"+s3);\n\t    \t\t\t\n\t    }\n\t    \t\n\t    out.close();\t\n\t    \t\n\t    \t\n\t    \n\t\n\t\n\t\n\t}\n\t\n\t\n\n}\n", "score": 1.0}
{"id": "SHARE_1_2549_21__1_2549_24", "golden_code": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.*;\nimport java.math.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\t\tScanner input= new Scanner(System.in);\n\t\tint T=1;\n                while(T!=0)\n                {\n                String [] num=input.nextLine().split(\" \");\n\t\tint A=Integer.parseInt(num[0]);\n\t\tint B=Integer.parseInt(num[1]);\n\t\tint [] N=new int[8];\n\t\tint [] M=new int[8];\n\t\tint [] S=new int[8];\n                if(A==0 && B==0)\n                    break;\n\t\tfor(int i=7; i>=0; i--)\n\t\t{\n\t\t    N[i]=A%2;\n\t\t    A=A/2;\n\t\t    if(A==0)\n\t\t    \tbreak;\n\t\t}\n\t\tfor(int i=7; i>=0; i--)\n\t\t{\n\t\t\tM[i]=B%2;\n\t\t\tB=B/2;\n\t\t\tif(B==0)\n\t\t\t\tbreak;\n\t\t}\n\t\tfor(int i=7; i>=0; i--)\n\t\t{\n\t\t\tS[i]=M[i]+N[i];\n\t\t}\n\t\tfor(int i=7; i>=0; i--)\n\t\t{\n\t\t\tif(S[i]==2)\n\t\t\t{\n\t\t\t\tif(i!=0)\n\t\t\t\t{\n\t\t\t\t\tS[i-1]+=1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\tif(i!=7)\n\t\t\t\t{\n\t\t\t\t\tS[i+1]+=1;\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\tS[i]=0;\n\t\t\t\tif ( i<7)\n\t\t\t\t\ti=i+2;\n\t\t\t}\n\t\t}\n\t\tint number=0;\n\t\tint j=0;\n\t\tfor(int i=7; i>=0; i--)\n\t\t{\n\t\t\t\n\t\t\tnumber+=S[i]*(Math.pow(2, j));\n\t\t\tj++;\n\t\t}\n\t\tSystem.out.println(number);\n                }\n\n\t}\n}", "generated_code": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\nimport java.util.Scanner;\nimport java.util.StringTokenizer;\n\n\n\npublic class Main {\n    \n    public static String num1;\n     public static String num2;\n    public static void main(String[] args){\n    //     try {\n             //int num1 = (int) new InputStreamReader(System.in).read ();\n             \n           \n             \n             Scanner scanner =new Scanner(new InputStreamReader(System.in));\n             BufferedReader br = new BufferedReader( new InputStreamReader(System.in));\n             Boolean check0 = true;\n            \n             outerloop:          while (scanner.hasNext() && check0)\n             {\n                 \n             \n        \n                        \n              StringTokenizer st = new StringTokenizer(scanner.nextLine(), \" \");\n    while (st.hasMoreTokens()) {\n      num1 = st.nextToken().toString();\n      num2 = st.nextToken().toString(); \n       \n    //  System.out.println(num1+num2);\n       if (num1.matches(\"0\") && num2.matches(\"0\") )\n    { check0 = false;\n    break outerloop; \n    }\n        //int num22 = Integer.parseInt(num2);\n    //    int foo = Integer.parseInt(\"1\");\n       //          String num222 = Integer.toBinaryString(foo);\n        \n    }\n   \n    \n    \n     //         ArrayList<String> storenum1 = new ArrayList<String>();   \n       String num1bin  = (String.format(\"%8s\", Integer.toBinaryString(Integer.parseInt(num1))).replace(' ', '0'));\n       String num2bin  = (String.format(\"%8s\", Integer.toBinaryString(Integer.parseInt(num2))).replace(' ', '0'));\n //      System.out.println(num1bin);\n //      System.out.println(num2bin);\n        \nchar[] num1binarry = new char[num1bin.length()];  \nfor(int i=0;i <num1bin.length();i++)  \n{  \nnum1binarry[i]=num1bin.charAt(i);  \n}\n// \n\n\n   \nchar[] num2binarry = new char[num2bin.length()];  \nfor(int i=0;i <num2bin.length();i++)  \n{  \nnum2binarry[i]=num2bin.charAt(i);  \n}\n\nchar[] num1binchar = num1bin.toCharArray();\nchar[] num2binchar = num2bin.toCharArray();\n\n//int b = a.getNumericValue();\n\nint numeric1[] = new int [8];\nint numeric2[] = new int [8];\n\n//tabdil be integere array \nfor ( int m = 0 ; m < 8 ; m++)\n{\n    int h2 = Integer.parseInt(String.valueOf(num2binarry[m]));\n    numeric2[m] = h2;\n}\nfor ( int n = 0 ; n < 8 ; n++)\n{\n    int h1 = Integer.parseInt(String.valueOf(num1binarry[n]));\n    numeric1[n] = h1;\n}\n\n\n//// araye ha ra ba ham jam mizanim\nint totalArray[] = new int [8];\n//add two array\nfor(int k = 0; k < 8 ; k++) {  \n  totalArray[k] = numeric1[k] + numeric2[k];  \n}\n\nint[] combine= new int[num1binchar.length+num2binchar.length];  \n //System.arraycopy(num1binchar, 0, combine, 0, num1binchar.length); \n// System.arraycopy(num2binchar, 0, combine, num1binchar.length, num2binchar.length);\n//System.out.println(Arrays.toString(totalArray));\n        Boolean check = true;\n        while ( check)\n        {\n            int getindex = 7;\n                 for ( int u1=7 ; u1> -1 ; u1--)\n                 { \n                         check = false;\n                           if (totalArray[u1]== 2) \n                                  {\n                                       check = true;\n                                       getindex = u1;\n                                       break;\n                                   }\n                }\n              if (check)\n                {\n                 if (getindex== 1  || getindex== 2 || getindex== 3 || getindex== 4 || getindex== 5 || getindex== 6 )\n                 {\n                     totalArray[getindex]=0;\n                     totalArray[getindex+1]+=1;\n                     totalArray[getindex-1]+=1;\n               //      System.out.println(totalArray[getindex+1]);\n              //       System.out.println(totalArray[getindex-1]);\n                 }\n                 else if (getindex==0)\n                 {\n                     totalArray[getindex]=0;\n                     totalArray[getindex+1]+=1;\n                 }\n                 else if (getindex==7)\n                 {\n                     totalArray[getindex]=0;\n                     totalArray[getindex-1]+=1;\n                 }\n                      \n                }\n            \n        }\n        \n     //   System.out.println(\"new total: \"+ Arrays.toString(totalArray));\n        String newstring = Arrays.toString(totalArray).replaceAll(\",\", \"\").replaceAll(\" \", \"\").replaceAll(\"\\\\[\", \"\").replaceAll(\"\\\\]\", \"\");\n     //   System.out.println(newstring);\n        int finalout = Integer.parseInt(newstring, 2);\n        \n        //to chek an d exit mail  while loop\n         if (num1 ==\"0\" && num2==\"0\" )\n    { check0 = false;\n    break;\n    }\n        \n        \n        System.out.println (finalout);\n             }\n   // }\n          \n//          catch (IOException ex) {\n    //         Logger.getLogger(virap2.class.getName()).log(Level.SEVERE, null, ex);\n  //       }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_101362_8__1_101362_3", "golden_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main(String [] args)\n\t{\n\t\tScanner scan=new Scanner(System.in);\n\t\tint n=scan.nextInt();\n\t\tfor(int c=0;c<n;c++)\n\t\t{\n\t\t\tint m=scan.nextInt();\n\t\t\tString a=scan.next();\n\t\t\tStringBuffer k=new StringBuffer();\n\t\t\tk.append(a);\n\t\t\tSystem.out.println(c+1 +\" \"+k.deleteCharAt(m-1) );\n\t\t}\n\t}\n}\n\t\t\t\n\t\t\t\n\t\t", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\n//30 Aug. 2012 ,misspelling zoj\n//runtime:30 , run memory:422\npublic class Main{\n\tpublic static void main(String[] args) throws Exception {\n\t\tArrayList<Integer>O=new ArrayList<Integer>();\n\t\tint a=0,b; String s,NewString=\" \";\n\t\tchar c;\n\t\tScanner in = new Scanner(System.in);\n\t\ta=in.nextInt();\n\t\tint y=1;\n\t\twhile(y!=a+1){\t\t\n\t\t\tb=in.nextInt();s=in.next();\n\t\tb--;\n\t\tString s1=s.substring(0, b) ;\n\t\tString s2=s.substring(b+1, s.length()) ;\n\t\t\t\n\t\tString w=s1+s2;\n\t\t\t\n\t\tSystem.out.print(y+\" \"+w);\n\t\t\tif(y!=a+1) \n\t\t\tSystem.out.println();\n\t\t\tNewString=\" \";\n\n\t\t\ty++;\n\t\t}\n\t\t\t\n\t\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1656_41__1_2763_10", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tArrayList<Integer> al = new ArrayList<Integer>();\n\t\twhile (sc.hasNext()) {\n\t\t\tint next = sc.nextInt();\n\t\t\tif (next == -1)\n\t\t\t\tbreak;\n\t\t\tif (next == 0) {\n\t\t\t\tSystem.out.print(count(al)+\"\\n\");\n\t\t\t\tal = new ArrayList<Integer>();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tal.add(next);\n\t\t}\n\n\t}\n\n\tpublic static int count(ArrayList<Integer> integers) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < integers.size(); i++) {\n\t\t\tint thisss = integers.get(i);\n\t\t\tfor (int j = i; j < integers.size(); j++) {\n\t\t\t\tint that = integers.get(j);\n\t\t\t\tif (thisss ==( 2 * that) || that == (2 * thisss)) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n", "generated_code": "import java.util.*;\nimport java.io.*;\nimport java.math.BigInteger;\n\npublic class Main{\n\n\tpublic static void main(String args[]){\n\t\tScanner in = new Scanner(System.in);\n\t\tint tests = in.nextInt();\n\t\twhile(tests-- > 0){\n\t\t\tchar[] str = in.next().toCharArray();\n\t\t\tboolean zero = false;\n\t\t\tlong ans = 1;\n\t\t\tint mod = 1000000007;\n\t\t\tint num = 0;\n\t\t\tfor(int i = str.length - 1; i >= 0; i--){\n\t\t\t\tif(str[i] == '0'){\n\t\t\t\t\tif(zero == false){\n\t\t\t\t\t\tif(num != 0){\n\t\t\t\t\t\t\tif(num % 2 != 0)\n\t\t\t\t\t\t\t\tans *= (num / 2) + 1;\n\t\t\t\t\t\t\tans %= mod;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnum = 0;\n\t\t\t\t\t}\n\t\t\t\t\tzero = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(zero){\n\t\t\t\t\tzero = false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tnum++;\n\t\t\t}\n\t\t\tif(num != 0){\n\t\t\t\tif(num % 2 != 0)\n\t\t\t\t\tans *= (num / 2) + 1;\n\t\t\t}\n\t\t\tans %= mod;\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t}\n}\n\n\n", "score": 0.0}
{"id": "SHARE_1_1001_81__1_1001_465", "golden_code": "\nimport java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile (sc.hasNext())\n\t\t\tSystem.out.println(sc.nextInt() + sc.nextInt());\n\t}\n}\n", "generated_code": "import java.util.Scanner;\n\n/**\n *\n * @author Sanaan\n */\npublic class Main {\n\n\n    public static void main(String[] args) {\n        \n        int a,b;\n        Scanner sc=new Scanner(System.in);\n        while(sc.hasNext()){\n            a=sc.nextInt();\n            b=sc.nextInt();\n            System.out.println(a+b + \"\");\n        }\n        \n    }\n    \n}", "score": 1.0}
{"id": "SHARE_1_2551_19__1_2822_4", "golden_code": "\n\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\tstatic String[] key = {\"2\", \"22\", \"222\", \"3\", \"33\", \"333\", \"4\", \"44\", \"444\", \n\t\t\"5\", \"55\", \"555\", \"6\", \"66\", \"666\", \"7\" , \"77\", \"777\", \"7777\", \"8\", \"88\", \"888\", \"9\", \"99\", \"999\", \"9999\"\n\t};\n\t\n\tpublic static void main(String args[]){\n\t\tScanner in = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint tc = in.nextInt();\n\t\twhile(tc-- > 0){\n\t\t\tString a = in.next();\n\t\t\tString b = in.next();\n\t\t\tString ta = \"\";\n\t\t\tString tb = \"\";\n\t\t\tfor(int i = 0; i < a.length(); i++){\n\t\t\t\tta  = ta + key[a.charAt(i) - 'A'];\n\t\t\t}\n\t\t\tfor(int i = 0; i < b.length(); i++){\n\t\t\t\ttb  = tb + key[b.charAt(i) - 'A'];\n\t\t\t}\n\t\t\tout.println((ta.equals(tb)) ? \"YES\" : \"NO\");\n\t\t}\n\t\tout.close();\n\t}\n}\n", "generated_code": "import java.util.*;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\n\t\tint t = input.nextInt(),n;\n\t\tint s1=0,s2=0,s3=0;\n\t\tint odd,even;\n\t\twhile(t-->0){\n\t\t\t\n\t\t\todd=0;\n\t\t\teven=0;\n\t\t\ts1=s2=s3=0;\n\t\t\t\n\t\t\tn=input.nextInt();\n\t\t\ts1=(n*(n+1))/2;\n\t\t\t\n\t\t\tint i=1;\n\t\t\twhile(odd<n){\n\t\t\t\ts2+=i;\n\t\t\t\ti+=2;\n\t\t\t\todd++;\n\t\t\t}\n\t\t\ti=2;\n\t\t\twhile(even<n){\n\t\t\t\ts3+=i;\n\t\t\t\ti+=2;\n\t\t\t\teven++;\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.printf(\"%d %d %d\\n\",s1,s2,s3);\n\t\t}\n\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2358_3__1_1001_243", "golden_code": "import java.util.Scanner;\nclass Main{\n\tpublic static void main(String[]args){\n\t\tScanner scan=new Scanner(System.in);\n\t\tdouble a,b,r,d,t,n,m;\n\t\twhile (scan.hasNextDouble()){\n\t\t\ta=scan.nextDouble();\n\t\t\tb=scan.nextDouble();\n\t\t\tr=scan.nextDouble();\n\t\t\td=scan.nextDouble();\n\t\t\tif (a>b){\n\t\t\t\tt=a;\n\t\t\t\ta=b;\n\t\t\t\tb=t;\n\t\t\t\t}\n\t\t\tif (d>r){\n\t\t\t\tt=d;\n\t\t\t\td=r;\n\t\t\t\tr=t;\n\t\t\t\t}\n\t\t\tif ((2*r)<=a){\n\t\t\t\tn=r+d*(1+Math.sqrt(2));\n\t\t\t\tm=Math.sqrt((Math.pow(a,2)+Math.pow(b-r,2)));\n\t\t\t\tif (n<=m)\n\t\t\t\t\tSystem.out.println(\"Yes\");\n\t\t\t\telse\n\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t}\n\t\t\telse\n\t\t\t\tSystem.out.println(\"No\");\n\t\t\t}\n\t\t}\n\t}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile (sc.hasNext()) {\n\t\t\tSystem.out.println(sc.nextInt() + sc.nextInt());\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_2500_1__1_106023_28", "golden_code": "\nimport java.math.BigInteger;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin=new Scanner(System.in);\n        while(true){\n            int n=cin.nextInt();\n            BigInteger i=new BigInteger(cin.next());\n            BigInteger q=new BigInteger(\"0\");\n            if(n==0&&i.equals(q))\n                break;\n            BigInteger x=new BigInteger(\"3\").pow(n);\n            while(x.compareTo(new BigInteger(\"0\"))>=1){\n                x=x.divide(new BigInteger(\"3\"));\n                BigInteger x2=x.multiply(new BigInteger(\"2\"));\n                if(i.compareTo(x)>0&&i.compareTo(x2)<=0){\n                    System.out.println(\"No\");\n                    break;}\n                if(i.compareTo(x2)>0)\n                    i=i.subtract(x2);\n            }\n            if(i.equals(new BigInteger(\"1\"))||i.equals(new BigInteger(\"3\"))){\n                System.out.println(\"Yes\");\n            }\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        while(true){\n            int b = in.nextInt();\n            int n = in.nextInt();\n            if(b==0 && n==0) break;\n            double m ,temp=0 ;\n            int a;\n            for(int i=1; ;i++){\n                m = Math.pow(i, n);\n                if(m>=b){\n                    if(b-temp<m-b)\n                        a=i-1;\n                    else\n                        a=i;\n                    break;\n                }\n                temp = m;\n            }\n            System.out.println(a);\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_108__1_1001_216", "golden_code": "import java.util.*;\nclass Main\n{\n    public static void main(String[] args)\n    {\n        Scanner s = new Scanner (System.in);\n        while (s.hasNextInt())\n        \nSystem.out.println(s.nextInt()+s.nextInt());\n        \n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1102_3__1_1010_11", "golden_code": "import java.util.Scanner;\nclass Main\n{\n\n\tpublic static void main(String args[])\n\t{\n\t\tScanner input = new Scanner(System.in);\n\t\tint size = input.nextInt();\n\t\tint counter =1;\n\t\twhile(true) {\n\t\t\tif(size==0) break;\n\t\t\tdouble uuencode = size / (62d*2); // each character is 2 bytes\n\t\t\tuuencode +=0.5*uuencode;\n\t\t\tint floppies =(int) Math.ceil(uuencode / 30_000);\n\t\t\tSystem.out.println(\"File #\"+(counter++));\n\t\t\tSystem.out.println(\"John needs \"+floppies+\" floppies.\");\n\t\t\tsize = input.nextInt();\n\t\t\tSystem.out.println();\n\t\t}//while\n\t}// main\n}", "generated_code": "import java.util.Scanner;\npublic class Main{\n\n    public static void main(String[] args) {\n\n          Scanner s=new Scanner(System.in);\n          String str [] =s.nextLine().split(\" \");\n          int n=Integer.parseInt(str[0]);\n            for (int i = 0; i < n; i++) {\n                int cnt=1;\n                double x=s.nextDouble();\n                double y=s.nextDouble();\n                double r=Math.sqrt(Math.pow(x, 2)+Math.pow(y, 2));\n                double R=Math.sqrt(100/Math.PI);\n                int k=1;\n       \n                int o=1;\n                while(r>R && r!=0){\n                   cnt++;\n                   R=Math.sqrt(((100+k*50)*2)/Math.PI);\n                   o=-1;\n                   k++;\n                      }\n                if(k>1){cnt++;}\n                System.out.printf(\"Property %d: This property will begin eroding in year %d.\\n\",(i+1),cnt);\n                \n        }\n        System.out.println(\"END OF OUTPUT.\");\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2857_19__1_2857_7", "golden_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\n\npublic class Main {\n    public static int search(int array[],int num){\n        for(int i=1;i<array.length;i++){\n            if(array[i]>=num){\n                return i;\n            }\n        }\n        return 0;\n    }\n    public static void main(String[] args) {\n        Scanner sc =new Scanner(System.in);\n\n        int numberofset=sc.nextInt();\n        int answers[]=new int[numberofset];\n        for(int i=0;i<numberofset;i++){\n            int size=sc.nextInt();\n            int[] array=new int[size];\n            for(int j=0;j<size;j++){\n                array[j]=sc.nextInt();\n            }\n            Arrays.sort(array);\n            while(array[array.length-1]!=array[0]) {\n                int newnum = array[array.length - 1] - array[0];\n                if (newnum > array[array.length - 2]) {\n                    for (int j = 1; j < array.length - 1; j++) {\n                        array[j - 1] = array[j];\n                    }\n                    array[array.length - 1] = newnum;\n                    array[array.length - 2] = newnum;\n                } else {\n                    int index = search(array, newnum);\n                   \n\n                    for(int j=array.length-2;j>index-1;j--){\n                        array[j+1]=array[j];\n                    }\n                    array[index] = newnum;\n                    for (int j = 1; j < index; j++) {\n                        array[j - 1] = array[j];\n                    }\n                    array[index - 1] = newnum;\n                }\n\n\n            }\n            answers[i]=array[0];\n\n        }\n        for(int i=0;i<answers.length;i++){\n            System.out.println(answers[i]);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\n/**\n * Created by mohammadmahdi on 11/23/17.\n */\npublic class Main {\n\n    static Scanner in = new Scanner(System.in);\n\n    static QuickSort q = new QuickSort();\n\n    public static void main(String[] args) {\n\n        int while_t = in.nextInt();\n\n        int size_arr = 0;\n        int i = -1;\n        int j = -1;\n        int it = 0;\n        int jt = 0;\n\n        while (while_t-- > 0){\n\n            size_arr = in.nextInt();\n\n            int arr[] = new int[size_arr];\n\n            for (int k = 0; k < size_arr; k++) {\n                arr[k] = in.nextInt();\n            }\n\n            q.sort(arr, 0, size_arr - 1);\n            while (arr[0] != arr[size_arr - 1]){\n\n                it = arr[0];\n                jt = arr[size_arr - 1];\n                arr[0] = jt - it;\n                arr[size_arr - 1] = jt - it;\n\n                q.sort(arr, 0, size_arr - 1);\n            }\n\n            System.out.println(arr[0]);\n\n            // past code ******************\n            //q.sort(arr, 0, size_arr - 1);\n\n            //q.printArray(arr);\n\n//            i = 0;\n//            j = size_arr - 1;\n//            while (i <= j){\n//                it = arr[i];\n//                jt = arr[j];\n//\n//                if (it == jt){\n//                    break;\n//                }\n//                arr[i] = jt - it;\n//                arr[j] = jt - it;\n//\n//                j--;\n//                i++;\n//            }\n\n            //q.printArray(arr);\n\n//            if (arr[size_arr / 2] == arr[(size_arr / 2) + 1]){\n//                System.out.println(arr[0]);\n//            } else {\n//                System.out.println(\"Nope!\");\n//            }\n\n//            boolean flag = false;\n//\n//            for (int k = 0; k < size_arr - 1; k++) {\n//                if (arr[k] != arr[k + 1]){\n//                    flag = true;\n//                }\n//            }\n//            if (flag)\n//                System.out.println(\"Nope!\");\n//            else\n//                System.out.println(arr[0]);\n        }\n    }\n}\n\n// Java program for implementation of QuickSort\nclass QuickSort\n{\n    /* This function takes last element as pivot,\n    places the pivot element at its correct\n    position in sorted array, and places all\n    smaller (smaller than pivot) to left of\n    pivot and all greater elements to right\n    of pivot */\n    int partition(int arr[], int low, int high)\n    {\n        int pivot = arr[high];\n        int i = (low-1); // index of smaller element\n        for (int j=low; j<high; j++)\n        {\n            // If current element is smaller than or\n            // equal to pivot\n            if (arr[j] <= pivot)\n            {\n                i++;\n\n                // swap arr[i] and arr[j]\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n\n        // swap arr[i+1] and arr[high] (or pivot)\n        int temp = arr[i+1];\n        arr[i+1] = arr[high];\n        arr[high] = temp;\n\n        return i+1;\n    }\n\n\n    /* The main function that implements QuickSort()\n    arr[] --> Array to be sorted,\n    low --> Starting index,\n    high --> Ending index */\n    void sort(int arr[], int low, int high)\n    {\n        if (low < high)\n        {\n\t\t\t/* pi is partitioning index, arr[pi] is\n\t\t\tnow at right place */\n            int pi = partition(arr, low, high);\n\n            // Recursively sort elements before\n            // partition and after partition\n            sort(arr, low, pi-1);\n            sort(arr, pi+1, high);\n        }\n    }\n\n    /* A utility function to print array of size n */\n    static void printArray(int arr[])\n    {\n        int n = arr.length;\n        for (int i=0; i<n; ++i)\n            System.out.print(arr[i]+\" \");\n        System.out.println();\n    }\n\n    // Driver program\n//    public static void main(String args[])\n//    {\n//        int arr[] = {10, 7, 8, 9, 1, 5};\n//        int n = arr.length;\n//\n//        QuickSort ob = new QuickSort();\n//        ob.sort(arr, 0, n-1);\n//\n//        System.out.println(\"sorted array\");\n//        printArray(arr);\n//    }\n}\n/*This code is contributed by Rajat Mishra */\n\n", "score": 1.0}
{"id": "SHARE_1_2578_46__1_2621_12", "golden_code": "import java.util.Scanner;\n \n \npublic class Main {\n \n\tpublic static void main(String args[]){\n\t\t@SuppressWarnings(\"resource\")\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n=0;\n\t\tn=Integer.parseInt(sc.nextLine());\n\t\tfor (int i=0;i<n;i++ ){\n\t\t\tint counterb=0;\n\t\t\tint counterg=0;\n\t\t\tString str;\n\t\t\tstr=sc.nextLine();\n\t\t\tchar[] charstr;\n\t\t\tcharstr=str.toCharArray();\n\t\t\tfor(int j=0;j<charstr.length;j++){\n\t\t\t\tif(charstr[j]=='b'||charstr[j]=='B'){\n\t\t\t\t\tcounterb++;\n\t\t\t\t}\n\t\t\t\telse if(charstr[j]=='g'||charstr[j]=='G'){\n\t\t\t\t\tcounterg++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(counterb==counterg){\n\t\t\t\tSystem.out.println(str+\" is NEUTRAL\");\n\t\t\t}\n\t\t\telse if(counterb>counterg){\n\t\t\t\tSystem.out.println(str+\" is A BADDY\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSystem.out.println(str+\" is GOOD\");\n\t\t\t}\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tString line = sc.next();\n\t\t\tif (isPalindrome(line)) {\n\t\t\t\tSystem.out.print(\"YES\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (isPalindrome(makeString(line))) {\n\t\t\t\tSystem.out.print(\"YES\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tSystem.out.print(\"NO\\n\");\n\t\t}\n\n\t}\n\n\tpublic static boolean isPalindrome(String s) {\n\t\tfor (int i = 0; i < s.length() / 2; i++)\n\t\t\tif (s.charAt(i) != s.charAt(s.length() - 1 - i))\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tpublic static String makeString(String s) {\n\t\tString ret = \"\";\n\t\tfor (char c : s.toLowerCase().toCharArray()) {\n\t\t\tswitch (c) {\n\t\t\tcase 'a':\n\t\t\tcase 'b':\n\t\t\tcase 'c':\n\t\t\t\tret += \"2\";\n\t\t\t\tbreak;\n\t\t\tcase 'd':\n\t\t\tcase 'e':\n\t\t\tcase 'f':\n\t\t\t\tret += \"3\";\n\t\t\t\tbreak;\n\t\t\tcase 'g':\n\t\t\tcase 'h':\n\t\t\tcase 'i':\n\t\t\t\tret += \"4\";\n\t\t\t\tbreak;\n\t\t\tcase 'j':\n\t\t\tcase 'k':\n\t\t\tcase 'l':\n\t\t\t\tret += \"5\";\n\t\t\t\tbreak;\n\t\t\tcase 'm':\n\t\t\tcase 'n':\n\t\t\tcase 'o':\n\t\t\t\tret += \"6\";\n\t\t\t\tbreak;\n\t\t\tcase 'p':\n\t\t\tcase 'q':\n\t\t\tcase 'r':\n\t\t\tcase 's':\n\t\t\t\tret += \"7\";\n\t\t\t\tbreak;\n\t\t\tcase 't':\n\t\t\tcase 'u':\n\t\t\tcase 'v':\n\t\t\t\tret += \"8\";\n\t\t\t\tbreak;\n\t\t\tcase 'w':\n\t\t\tcase 'x':\n\t\t\tcase 'y':\n\t\t\tcase 'z':\n\t\t\t\tret += \"9\";\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_344__1_1001_278", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {\n            int a = in.nextInt();\n            int b = in.nextInt();\n            a = a + b;\n            System.out.println(a);\n        }\n    }\n}\n", "generated_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tString s = null;\n\t\tBufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n\t\twhile ((s=r.readLine()) != null) {\n\t\t\tif (s.equals(\"\")) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tString[] a = s.split(\" \");\n\t\t\tSystem.out.println(Integer.parseInt(a[0])+Integer.parseInt(a[1]));\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_2578_55__1_2578_14", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String Args[])\n\t{\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint n = scanner.nextInt();\n\t\t //scanner.nextLine();\n\t\tfor(int i =0 ; i<n;i++)\n\t\t{\n\t\t\tString name = scanner.nextLine();\n\t\t\twhile(name.length()<1)\n\t\t\t\tname = scanner.nextLine();\n\t\t\tint state = 0;\n\t\t\tString name2 = name.toLowerCase().replaceAll(\" \", \"\");\n\t\t\tstate += name2.length()- name2.replace('g', ' ').replaceAll(\" \", \"\").length();\n\t\t\tstate -= name2.replaceAll(\" \", \"\").length()- name2.replace('b', ' ').replaceAll(\" \", \"\").length();\n\t\t\tprintstate(state, name);\n\t\t}\n\t\n\t\t\n\t}\n\tpublic static void printstate(int state,String name)\n\t{\n\t\tif (state>0)\n\t\t\tSystem.out.println(\"\"+name+\" is GOOD\");\n\t\telse if(state<0)\n\t\t\tSystem.out.println(\"\"+name+\" is A BADDY\");\n\t\telse if(state == 0)\n\t\t\tSystem.out.println(\"\"+name+\" is NEUTRAL\");\n\t\t\t\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main{\n    public static void main(String[] args){\n        Scanner cin=new Scanner(System.in);\n        int nameCounter=cin.nextInt();\n        cin.nextLine();\n        for(int i=1;i<=nameCounter;i++){\n            String name=cin.nextLine();\n            int gCounter=0,bCounter=0;\n            for(int j=0;j<name.length();j++)\n                if(name.charAt(j)=='g' || name.charAt(j)=='G')\n                    gCounter++;\n                else if(name.charAt(j)=='b' || name.charAt(j)=='B')\n                    bCounter++;\n            if(gCounter>bCounter)\n                System.out.println(name+\" is GOOD\");\n            else if(bCounter>gCounter)\n                System.out.println(name+\" is A BADDY\");\n            else\n                System.out.println(name+\" is NEUTRAL\");\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2429_25__1_1353_0", "golden_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(input.readLine());\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint a = Integer.parseInt(input.readLine());\n\t\t\tif (a == 1) {\n\t\t\t\tSystem.out.println(0);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint sum = 1;\n\t\t\tint b = (int) Math.sqrt(a);\n\t\t\tif (a % 2 == 0) {\n\t\t\t\tfor (int j = 2; j <= b; j++) {\n\t\t\t\t\tif (a % j == 0) {\n\t\t\t\t\t\tsum += j;\n\t\t\t\t\t\tint r = a / j;\n\t\t\t\t\t\tif (r != j) {\n\t\t\t\t\t\t\tsum += r;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (int j = 3; j <= b; j += 2) {\n\t\t\t\t\tif (a % j == 0) {\n\t\t\t\t\t\tsum += j;\n\t\t\t\t\t\tint r = a / j;\n\t\t\t\t\t\tif (r != j) {\n\t\t\t\t\t\t\tsum += r;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(sum);\n\t\t}\n\t}\n\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        for (int i = 0; i < n; i++) {\n            int x = s.nextInt();\n            int y = s.nextInt();\n            int res = 0;\n            if (x == y) {\n                res = 0;\n            } else if (x == y + 2) {\n                res = 2;\n                x-=2;\n            } else {\n                System.out.println(\"No Number\");\n                continue;\n            }\n            for (int j = 0; j < x; j++) {\n                if (j % 2 == 0) {\n                    res += 1;\n                } else {\n                    res += 3;\n                }\n            }\n            System.out.println(res);\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_191__1_1001_254", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n\n   \n    public static void main(String[] args) {\n      \n        Scanner scanner =new Scanner(System.in);\n        while(scanner.hasNext() ){\n        int a=scanner.nextInt();\n        int b=scanner.nextInt();\n            System.out.println((a+b));\n     \n    }}\n    \n}", "score": 1.0}
{"id": "SHARE_1_2811_26__1_1001_415", "golden_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n   public static void main(String[] args) {\n      Scanner in = new Scanner(System.in);\n      int t = in.nextInt();\n      while (t != 0) {\n         int n = in.nextInt();\n         int m = in.nextInt();\n         long[] w = new long[n];\n         for (int j = 0; j < w.length; j++) {\n            w[j] = in.nextLong();\n         }\n         long[] x = new long[m];\n         for (int k = 0; k < x.length; k++) {\n            x[k] = in.nextLong();\n         }\n         for (int l = 0; l < w.length; l++) {\n            for (int o = 0; o < x.length; o++) {\n               if (w[l] == x[o]) {\n                  w[l] = 0;\n               }\n            }\n         }\n         Arrays.sort(w);\n        int flag = 0;\n        StringBuilder sb = new StringBuilder();\n\n        for (int r = 0; r < w.length; r++) {\n\n            if (w[r] != 0) {\n                flag = 1;\n                sb.append(w[r]).append(\",\");\n            }\n\n        }\n        if (flag == 1) {\n            sb.delete(sb.length() - 1, sb.length());\n        }\n\n        System.out.println(sb.toString());\n\n        t--;\n      }\n   }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    \n    public static void main(String args[]){\n        Scanner input = new Scanner (System.in);\n        while(input.hasNext()){\n            int c = input.nextInt();\n            int d = input.nextInt();\n            \n            System.out.println(plus(c,d));\n        }\n    }\n    public static int plus(int a ,int b){\n        return a+b;\n    }    \n}\n", "score": 0.0}
{"id": "SHARE_1_1230_0__1_2563_2", "golden_code": "import java.util.*;\nimport java.awt.*;\nimport java.math.*;\n\n@SuppressWarnings(\"unchecked\")\n\npublic class Main\n{\n    public static void main(String[] arqs)\n    {\n        Scanner scan = new Scanner(System.in);\n\n        while (true)\n        {\n            BigInteger n = new BigInteger(scan.next());\n\n            if(n.compareTo(BigInteger.ZERO) == 0) break;\n\n            if(n.mod(new BigInteger(\"9\")).compareTo(BigInteger.ZERO) == 0)\n                System.out.println(9);\n            else\n                System.out.println(n.mod(new BigInteger(\"9\")));\n        }\n    }\n}", "generated_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String argv[])\n\t{\n\t\tint n;\n\t\tScanner i = new Scanner(System.in);\n\t\tdo\n\t\t{\n\t\t\tn=i.nextInt();\n\t\t\tif(n==0)\n\t\t\t\tbreak;\n\t\t\tSystem.out.println(fact(2*n).divide((fact(n+1).multiply(fact(n)))));\n\t\t\t\t\t\n\t\t}while(n != 0);\n\t}\n\tpublic static BigInteger fact(int n)\n\t{\n\t\tBigInteger r =new BigInteger(\"1\");\n\t\tfor (int i = 1; i <= n; i++) \n\t\t{\n\t\t\tBigInteger u =new BigInteger(i+\"\");\n\t\t\tr=r.multiply(u);\n\t\t}\n\t\treturn r;\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1651_29__1_1651_54", "golden_code": "import java.util.*;   \n  \nclass Clay   \n{   \n    private int l = 0;   \n    private int w = 0;   \n    private int h = 0;   \n    private String name;   \n    private int size = 0;   \n       \n    public Clay(String l, String w, String h, String name)   \n    {   \n        this.l = Integer.valueOf(l).intValue();   \n        this.w = Integer.valueOf(w).intValue();   \n        this.h = Integer.valueOf(h).intValue();   \n        this.name = name;   \n        this.size = this.l * this.w * this.h;   \n    }   \n       \n    public int getSize()   \n    {   \n        return size;   \n    }   \n       \n    public String getName()   \n    {   \n        return name;   \n    }   \n       \n}   \n  \npublic class Main {   \n  \n    public static void main(String[] args) {   \n        Scanner cin = new Scanner(System.in);   \n           \n        while(true)   \n        {   \n            int num = Integer.valueOf(cin.nextLine()).intValue();   \n            if(num == -1)   \n                break;   \n               \n            List list = new ArrayList();   \n            for(int i = 0; i < num; i++)   \n            {   \n                String[] str = cin.nextLine().split(\" \");   \n                Clay clay = new Clay(str[0], str[1], str[2], str[3]);   \n                list.add(clay);   \n            }   \n            Iterator iter = list.iterator();   \n            int max = 0;   \n            int min = 250;   \n            String maxName = null;   \n            String minName = null;   \n            while(iter.hasNext())   \n            {   \n                Clay theone = (Clay)iter.next();   \n                if(theone.getSize() > max)   \n                {   \n                    max = theone.getSize();   \n                    maxName = theone.getName();   \n                }   \n                if(theone.getSize() < min)   \n                {   \n                    min = theone.getSize();   \n                    minName = theone.getName();   \n                }   \n            }   \n               \n            System.out.println(maxName + \" took clay from \" + minName + \".\");   \n        }   \n  \n    }   \n  \n}  ", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while (input.hasNext()) {\n            int num = Integer.valueOf(input.nextLine());\n            if (num == -1) {\n                break;\n            }\n            String maxN = \"\", minN = \"\";\n            int maxV = 0, minV = 0;\n            for (int i = 0; i < num; i++) {\n                String line = input.nextLine();\n                String[] strs = line.split(\" \");\n                int value = Integer.valueOf(strs[0]) * Integer.valueOf(strs[1]) * Integer.valueOf(strs[2]);\n                if (i == 0) {\n                    maxV = minV = value;\n                    maxN = minN = strs[3];\n                } else {\n                    if (value >= maxV) {\n                        maxV = value;\n                        maxN = strs[3];\n                    }\n                    if (value <= minV) {\n                        minV = value;\n                        minN = strs[3];\n                    }\n                }\n            }\n            System.out.println(maxN + \" took clay from \" + minN + \".\");\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1006_106__1_1001_208", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\twhile (scanner.hasNextDouble()){\n\t\t\tdouble n = scanner.nextDouble();\n\t\t\tif (n==0.00d){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdouble sum = 0;\n\t\t\tint i=1;\n\t\t\twhile (sum<n){\n\t\t\t\ti++;\n\t\t\t\tdouble m = 1.0/i;\n\t\t\t\tsum += m;\n\t\t\t}\n\t\t\tSystem.out.println(--i+\" card(s)\");\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner ;\nimport java.lang.String ;\npublic class Main\n{\n\tpublic static void main ( String[] args )\n\t{\n\t\tScanner input = new Scanner ( System.in ) ;\n\t\twhile ( true )\n\t\t{\n\t\t\ttry \n\t\t\t{\n\t\t\t\tSystem.out.println( ( input.nextInt() + input.nextInt() ) ) ;\n\t\t\t}\n\t\t\tcatch ( Exception e )\n\t\t\t{\n\t\t\t\tbreak ;\n\t\t\t}\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_5_1017_7__5_1017_10", "golden_code": "import java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\n\tpublic static void main(String[] args) throws FileNotFoundException {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint NumOfCells = scanner.nextInt();\n\t\tint cell;\n\t\tSolve s = new Solve();\n\t\tfor(int i = 0 ; i < NumOfCells ; i++){\n\t\t\tcell = scanner.nextInt();\n\t\t\ts.ArrayOfCells.add(cell);\n\t\t}\n\t\tint player;\n\t\tplayer = scanner.nextInt();\n\t\tPlayer Player1 = new Player(player-1);\n\t\ts.player1 = Player1;\n\t\t\n\t\tplayer = scanner.nextInt();\n\t\tPlayer Player2 = new Player(player-1);\n\t\ts.player2 = Player2;\n\t\t\n\t\ts.Initial();\n\t\ts.solve();\n\n\t}\n\n}\n\nclass Solve{\n\tpublic ArrayList<Integer> ArrayOfCells = new ArrayList<Integer>();\n\tpublic Player player1;\n\tpublic Player player2;\n\tpublic void solve(){\n\t\tint SumOfPlayer1 = 0;\n\t\tint SumOfPlayer2 =0;\n\n\t\tif(player1.Position < player2.Position){\n\t\t\tint NumOfCells =player2.Position-player1.Position-1;\n\t\t\tint ROfNum=NumOfCells%2;\n\t\t\tint Size =(NumOfCells+1)/2;\n\t\t\tif(ROfNum==0){\n\t\t\t\tfor(int i = 0 ; i <= Size ; i++){\n\t\t\t\t\tSumOfPlayer1 += ArrayOfCells.get(player1.Position+i);\n\t\t\t\t\tSumOfPlayer2 += ArrayOfCells.get(player2.Position-i);\n\t\t\t\t}\n\t\t\t\tSumOfPlayer1 += player1.SumOfLeft;\n\t\t\t\tSumOfPlayer2 += player2.SumOfRight;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfor(int i = 0 ; i <= Size ; i++){\n\t\t\t\t\tSumOfPlayer1 += ArrayOfCells.get(player1.Position+i);\n\t\t\t\t}\n\t\t\t\tfor(int i = 0 ; i < Size ; i++){\n\t\t\t\t\tSumOfPlayer2 += ArrayOfCells.get(player2.Position-i);\n\t\t\t\t}\n\t\t\t\tSumOfPlayer1 += player1.SumOfLeft;\n\t\t\t\tSumOfPlayer2 += player2.SumOfRight;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tint NumOfCells =player1.Position-player2.Position-1;\n\t\t\tint ROfNum=NumOfCells%2;\n\t\t\tint Size =(NumOfCells+1)/2;\n\t\t\tif(ROfNum==0){\n\t\t\t\tfor(int i = 0 ; i <= Size ; i++){\n\n\t\t\t\t\tSumOfPlayer1 += ArrayOfCells.get(player1.Position-i);\n\t\t\t\t\tSumOfPlayer2 += ArrayOfCells.get(player2.Position+i);\n\t\t\t\t}\n\t\t\t\tSumOfPlayer1 += player1.SumOfRight;\n\t\t\t\tSumOfPlayer2 += player2.SumOfLeft;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfor(int i = 0 ; i <= Size ; i++){\n\n\t\t\t\t\tSumOfPlayer1 += ArrayOfCells.get(player1.Position-i);\n\t\t\t\t}\n\t\t\t\tfor(int i = 0 ; i < Size ; i++){\n\t\t\t\t\tSumOfPlayer2 += ArrayOfCells.get(player2.Position+i);\n\t\t\t\t}\n\t\t\t\tSumOfPlayer1 += player1.SumOfRight;\n\t\t\t\tSumOfPlayer2 += player2.SumOfLeft;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tSystem.out.println(SumOfPlayer1 + \" \" + SumOfPlayer2);\n\t}\n\tpublic void Initial(){\n\n\t\tif(player1.Position < player2.Position){\n\t\t\tint LeftSum = 0;\n\t\t\tfor(int i = 0 ; i < player1.Position ; i++){\n\t\t\t\tLeftSum += ArrayOfCells.get(i);\n\t\t\t}\n\t\t\tplayer1.SumOfLeft = LeftSum;\n\t\t\t\n\t\t\tint RightSum =0;\n\t\t\tfor(int i = player2.Position+1 ; i < ArrayOfCells.size() ; i++){\n\t\t\t\tRightSum += ArrayOfCells.get(i);\n\t\t\t}\n\t\t\tplayer2.SumOfRight =RightSum;\n\t\t}\n\t\telse{\n\t\t\tint RightSum =0;\n\t\t\tfor(int i = player1.Position+1 ; i < ArrayOfCells.size() ; i++){\n\t\t\t\tRightSum += ArrayOfCells.get(i);\n\t\t\t}\n\t\t\tplayer1.SumOfRight =RightSum;\n\t\t\t\n\t\t\tint LeftSum = 0;\n\t\t\tfor(int i = 0 ; i < player2.Position ; i++){\n\t\t\t\tLeftSum += ArrayOfCells.get(i);\n\t\t\t}\n\t\t\tplayer2.SumOfLeft = LeftSum;\n\t\t\t\n\t\t}\n\t\t\n\t}\n}\nclass Player{\n\tpublic Player(int v){\n\t\tPosition = v;\n\t\tSumOfLeft =0;\n\t\tSumOfRight = 0;\n\t}\n\tpublic int Position;\n\tpublic int SumOfLeft;\n\tpublic int SumOfRight;\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\tIO io = new IO();\n\t\tio.getInput();\n\t\t\n\t\tGreedyGame game = new GreedyGame();\n\t\tgame.initial( io.getData() );\n\t\tgame.run();\n\t}\n\t\n\t\n\tstatic class DataStructure{\n\t\t\n\t\tint arraySize = -1;\n\t\tint array[];\n\t\tint pos1 = 0, pos2 = 0;\n\t}\n\t\n\tstatic class IO {\n\t\t\n\t\tprivate DataStructure data = new DataStructure(); \n\t\tScanner scanConsole = new Scanner( System.in );\n\t\t\n\t\tpublic void getInput () {\n\t\t\t\n\t\t\tdata.arraySize = scanConsole.nextInt();\n\t\t\tdata.array = new int [data.arraySize];\n\t\t\t\n\t\t\tfor (int i = 0; i < data.arraySize; i++) \n\t\t\t\tdata.array[i] = scanConsole.nextInt();\n\t\t\t\n\t\t\tdata.pos1 = scanConsole.nextInt()-1;\n\t\t\tdata.pos2 = scanConsole.nextInt()-1;\n\t\t}\n\t\t\n\t\tpublic DataStructure getData () {\n\t\t\t\n\t\t\treturn data;\n\t\t}\n\t\t\n\t}\n\t\n\tstatic class GreedyGame {\n\t\t\n\t\tprivate DataStructure data;\n\t\tprivate int RIGHT = 1, LEFT = -1;\n\t\tclass Gammer {\n\t\t\t\n\t\t\tint pos = 0;\n\t\t\tint turn = -1;\n\t\t\tint score = 0;\n\t\t}\n\t\t\n\t\tprivate Gammer player1 = new Gammer();\n\t\tprivate Gammer player2 = new Gammer();\n\t\t\n\t\tpublic void initial ( DataStructure localData ) {\n\t\t\t\n\t\t\tdata = localData;\n\t\t\t\n\t\t\tplayer1.pos = data.pos1;\n\t\t\tplayer2.pos = data.pos2;\n\t\t\t\n\t\t\t\n\t\t\tif ( player1.pos < player2.pos ){\n\t\t\t\t\n\t\t\t\tplayer1.turn = RIGHT;\n\t\t\t\tplayer2.turn = LEFT;\n\t\t\t}\n\t\t\t\n\t\t\telse if ( player1.pos > player2.pos ){\n\t\t\t\t\n\t\t\t\tplayer1.turn = LEFT;\n\t\t\t\tplayer2.turn = RIGHT;\n\t\t\t}\n\t\t\t\n\t\t\telse if ( player1.pos == player2.pos ) {\n\t\t\t\t\n\t\t\t\tint rsum = 0, lsum = 0;\n\t\t\t\tfor( int i=(player1.pos+1); i<data.arraySize; i++ )\n\t\t\t\t\trsum += data.array[i];\n\t\t\t\t\n\t\t\t\tfor( int i=(player1.pos-1); i>(-1); i-- )\n\t\t\t\t\tlsum += data.array[i];\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif( rsum >= lsum ){\n\t\t\t\t\t\n\t\t\t\t\tplayer1.turn = RIGHT;\n\t\t\t\t\tplayer2.turn = LEFT;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\telse{\n\t\t\t\t\t\n\t\t\t\t\tplayer1.turn = LEFT;\n\t\t\t\t\tplayer2.turn = RIGHT;\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic void run () {\n\t\t\t\n\t\t\tint lead = 0;\n\t\t\tboolean flag = true;\n\t\t\tGammer tempPlayer;\n\t\t\t\n\t\t\tif ( player1.pos == player2.pos ) flag = false;\n\t\t\t\n\t\t\twhile ( true ) {\n\n\t\t\t\tif\t( lead == 0 )\ttempPlayer = player1;\n\t\t\t\telse\t\t\t\ttempPlayer = player2;  \n\t\t\t\t\n\t\t\t\tlead = 1 - lead;\n\t\t\t\t\n\t\t\t\tif (  player1.pos == -1 && player2.pos == data.arraySize\n\t\t\t\t   || player1.pos == data.arraySize && player2.pos == -1\n\t\t\t\t   || player1.pos == -1 && player2.pos == -1\n\t\t\t\t   || player1.pos == data.arraySize && player2.pos == data.arraySize ) break;\n\t\t\t\t\n\t\t\t\tif ( tempPlayer.pos == -1 || tempPlayer.pos == data.arraySize ) continue;\n\t\t\t\t\n\t\t\t\tif ( flag )\n\t\t\t\t\tif ( player1.pos == player2.pos ) {\n\t\t\t\t\t\n\t\t\t\t\tif ( player1.turn == RIGHT  ) player1.turn = LEFT;\n\t\t\t\t\telse if ( player1.turn == LEFT  ) player1.turn = RIGHT;\n\t\t\t\t\t\n\t\t\t\t\tif ( player2.turn == RIGHT ) player2.turn = LEFT;\n\t\t\t\t\telse if ( player2.turn == LEFT  ) player2.turn = RIGHT;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttempPlayer.score += data.array[ tempPlayer.pos ];\n\t\t\t\tdata.array[ tempPlayer.pos ] = 0;\n\t\t\t\ttempPlayer.pos += tempPlayer.turn;\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(player1.score + \" \" + player2.score );\n\t\t}\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_2713_23__1_1099_24", "golden_code": "import java.util.*;\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc=new Scanner (System.in);\n\t\tboolean m=true;\n\t\twhile(m){\n\t\t\tint counter=1;\n\t\t\tint n=sc.nextInt();\n\t\t\tboolean r=true;\n\t\t\tif(n==0){\n\t\t\t\tm=false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\twhile(r){\n\t\t\t\t\tif(n==1)\n\t\t\t\t\t\tr=false;\n\t\t\t\t\telse if(n%2==0){\n\t\t\t\t\t\tn/=2;\n\t\t\t\t\t\tcounter++;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tn=n*3+1;\n\t\t\t\t\t\tcounter++;\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t}\n\t\t\tif(n!=0)\n\t\t\t\tSystem.out.println(counter);\n\t\t}\n\n\t}\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n     static  Scanner in=new Scanner(System.in);\n    public static void main(String[] args) {\n        int count=0;\n        while (true) {            \n            int n=in.nextInt();\n            if(n==0)\n                break;\n            int s[]=new int[n];\n            int sum=0;\n            for (int i = 0; i < s.length; i++) {\n                 s[i]=in.nextInt();\n                 sum+=s[i];\n            }\n            int k=sum/n;\n            sum=0;\n            for (int i = 0; i < s.length; i++) {\n                if(s[i]>k)\n                    sum+=s[i]-k;\n            }\n            System.out.println(\"Set #\"+(++count));\n            System.out.println(\"The minimum number of moves is \"+sum+\".\");\n            System.out.println();      \n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_106025_52__1_2837_39", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        String s;\n        int n=input.nextInt();\n        for(int i=0; i<n; i++)\n        {\n            int c=1;\n            s=\"\";\n            String num=input.next();\n            for(int j=1; j<num.length();j++)\n            {\n                if(num.charAt(j-1)==num.charAt(j))\n                    c++;\n                else{\n                    s+=\"\"+c+\"\"+num.charAt(j-1);\n                    c=1;\n                }\n            }\n            s+=\"\"+c+\"\"+num.charAt(num.length()-1);\n            System.out.println(s);\n        }\n    }\n}", "generated_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\nimport java.util.TreeSet;\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        ArrayList<Integer> tree = new ArrayList<Integer>();\n        while (true) {\n            Object arr[];\n            String str = in.nextLine().trim();\n            if (str.contains(\"Get\")) {\n                arr = tree.toArray();\n                Arrays.sort(arr);\n                System.out.println(arr[arr.length - 2]);\n            } else if (str.contains(\"END\")) {\n                break;\n            } else {\n                int a = Integer.parseInt(str);\n                tree.add(a);\n            }\n        }\n    }\n    \n}\n", "score": 0.0}
{"id": "SHARE_1_2027_3__1_2027_13", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner s=new Scanner(System.in);\n        int n=s.nextInt();\n        for (int i = 0; i < n; i++) {\n            String str=s.next();\n            for (int j = 0; j < 4; j++) {\n                int sum=0;\n                int c=128;\n                for (int k = 0; k < 8; k++) {\n                    sum+=Integer.parseInt(str.substring(k,k+1))*c;\n                    c/=2;\n                }\n                str=str.substring(8);\n                System.out.print(sum);\n                if(j!=3){\n                    System.out.print(\".\");\n                }\n            }\n            System.out.println();\n        }\n    }\n}\n", "generated_code": "\nimport java.awt.Point;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.regex.Pattern;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n/**\n *\n * @author Mojtaba\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        StringBuilder sb = new StringBuilder();\n\n        int t = in.nextInt();\n        in.nextLine();\n        for (int i = 0; i < t; i++) {\n            String line = in.nextLine();\n            StringBuilder internal = new StringBuilder();\n            while (line.length() > 0) {\n                internal.append(F((line.substring(0, 8)))).append(\".\");\n                line = line.substring(8);\n            }\n            sb.append(internal.toString().substring(0, internal.toString().length() - 1)).append(\"\\n\");\n        }\n\n        System.out.println(sb.toString().trim());\n    }\n\n    private static int F(String binary) {\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum *= 2;\n            if (binary.charAt(i) == '1') {\n                sum += 1;\n            }\n        }\n        return sum;\n    }\n}\n", "score": 1.0}
{"id": "SHARE_5_1049_0__1_1022_2", "golden_code": "import java.util.*;\nimport java.lang.*;\nimport java.io.*;\nimport java.util.LinkedList;\n public class Main{\n\t    static boolean bfs(int rGraph[][],int parent[],int V){\n\t        boolean visited[] = new boolean[V];\n\t        for(int i=0; i<V; ++i)\n\t            visited[i]=false;\n\t        LinkedList<Integer> queue = new LinkedList<Integer>();\n\t        queue.add(0);\n\t        visited[0] = true;\n\t        parent[0]=-1;\n\t        while (queue.size()!=0){\n\t            int u = queue.poll();\n\t            for (int v=0; v<V; v++){\n\t                if (visited[v]==false && rGraph[u][v] > 0){\n\t                    queue.add(v);\n\t                    parent[v] = u;\n\t                    visited[v] = true;\n\t                }\n\t            }\n\t        }\n\t        return (visited[V-1] == true);\n\t    }\n\t    static int maxflow(int graph[][],int V){\n\t        int u, v;\n\t        int rGraph[][] = new int[V][V];\n\t        for (u = 0; u < V; u++)\n\t            for (v = 0; v < V; v++)\n\t                rGraph[u][v] = graph[u][v];\n\t        int parent[] = new int[V];\n\t        int max_flow = 0;\n\t        while (bfs(rGraph,parent,V)) {\n\t            int path_flow = Integer.MAX_VALUE;\n\t            for (v=V-1; v!=0; v=parent[v]){\n\t                u = parent[v];\n\t                path_flow = Math.min(path_flow, rGraph[u][v]);\n\t            }\n\t            for (v=V-1; v != 0; v=parent[v]){\n\t                u = parent[v];\n\t                rGraph[u][v] -= path_flow;\n\t                rGraph[v][u] += path_flow;\n\t            }\n\t            max_flow += path_flow;\n\t        }\n\t        return max_flow;\n\t    }\n\t    public static void main(String[] args) {\n\t    \tScanner in = new Scanner(System.in);\n\t    \tint V = in.nextInt();\n\t    \tint graph[][] =new int[4*V+2][4*V+2];\n\t    \tfor(int i=0;i<4*V+2;i++){\n\t    \t\tfor(int j=0;j<4*V+2;j++){\n\t    \t\t\tif(i==0 && j>0 && j<=V)\n\t    \t\t\t\tgraph[i][j] = 3;\n\t    \t\t\telse\n\t    \t\t\t\tgraph[i][j] = 0;\n\t    \t\t}\n\t    \t}\n\t    \tint ver[] = new int[3*V+1];\n\t    \tfor(int i=1;i<V+1;i++){\n\t    \t\tint flag =0;\n\t    \t\tint x1 = in.nextInt();\n\t    \t\tint x2 = in.nextInt();\n\t    \t\tint sum = x1 + x2;\n\t    \t\tint sub = Math.abs(x1 - x2);\n\t    \t\tint mult = x1 * x2;\n\t    \t\tfor(int j=0;j<ver.length;j++){\n\t    \t\t\tif(ver[j] == sum){\n\t    \t\t\t\tgraph[i][j+V] = 1;\n\t    \t\t\t\tgraph[j+V][4*V+1] = 1;\n\t    \t\t\t\tflag = 1;\n\t    \t\t\t}\n\t    \t\t}\n\t    \t\tif(flag == 0){\n\t    \t\t\tver[3*i-2] = sum;\n\t    \t\t\tgraph[i][3*i+V-2] = 1;\n\t    \t\t\tgraph[3*i+V-2][4*V+1] = 1;\n\t    \t\t}\n\t    \t\tflag = 0;\n\t    \t\tfor(int j=0;j<ver.length;j++){\n\t    \t\t\tif(ver[j] == sub){\n\t    \t\t\t\tgraph[i][j+V] = 1;\n\t    \t\t\t\tgraph[j+V][4*V+1] = 1;\n\t    \t\t\t\tflag = 1;\n\t    \t\t\t}\n\t    \t\t}\n\t    \t\tif(flag == 0){\n\t    \t\t\tver[3*i-1] = sub;\n\t    \t\t\tgraph[i][3*i+V-1] = 1;\n\t    \t\t\tgraph[3*i+V-1][4*V+1] = 1;\n\t    \t\t}\n\t    \t\tflag = 0;\n\t    \t\tfor(int j=0;j<ver.length;j++){\n\t    \t\t\tif(ver[j] == mult){\n\t    \t\t\t\tgraph[i][j+V] = 1;\n\t    \t\t\t\tgraph[j+V][4*V+1] = 1;\n\t    \t\t\t\tflag = 1;\n\t    \t\t\t}\n\t    \t\t}\n\t    \t\tif(flag == 0){\n\t    \t\t\tver[3*i] = mult;\n\t    \t\t\tgraph[i][3*i+V] = 1;\n\t    \t\t\tgraph[3*i+V][4*V+1] = 1;\n\t    \t\t}\n\t    \t}\n\t    \tif(maxflow(graph,4*V+2) > V)\n\t    \t\tSystem.out.println(\"possible\");\n\t    \telse\n\t    \t\tSystem.out.println(\"impossible\");\n    \t}\n\n}", "generated_code": "\nimport java.util.Scanner;\n\n\nclass Node1\n{\n    Node1 next,pre;\n    String element;\n\n    public Node1(Node1 pre, Node1 next, String element) {\n        this.next = next;\n        this.pre = pre;\n        this.element = element;\n    }\n    \n}\nclass List\n{\n    Node1 first;\n    List()\n    {\n        first=new Node1(null,null, \"http://www.acm.org/\");\n    }\n}\npublic class Main {\n    static Scanner in=new Scanner(System.in);\n    public static void main(String[] args) {\n        int n=in.nextInt();\n        int k=n;\n        while(n>0)\n        {\n            if(k!=n)\n                System.out.println(\"\");\n            n--;\n            List l=new List();\n            String s=in.nextLine();\n            Node1 hal=l.first;\n            while(!s.equals(\"QUIT\"))\n            {\n                s=in.nextLine();\n                if(s.contains(\"VISIT\"))\n                {\n                    s=s.substring(s.indexOf(\" \")+1);\n                    hal.next=new Node1(hal, null, s);\n                    hal=hal.next;\n                    System.out.println(s);\n                }\n                else if(s.equals(\"BACK\"))\n                {\n                    if(hal.pre!=null)\n                    {\n                        hal=hal.pre;\n                        System.out.println(hal.element);\n                    }\n                    else\n                        System.out.println(\"Ignored\");\n                }\n                else if(s.equals(\"FORWARD\"))\n                {\n                    if(hal.next!=null)\n                    {\n                        hal=hal.next;\n                        System.out.println(hal.element);\n                    }\n                    else\n                        System.out.println(\"Ignored\");\n                }\n            }\n        }\n        \n    }\n}", "score": 0.0}
{"id": "SHARE_1_2500_4__1_2500_44", "golden_code": "import java.util.*;\nclass Main\n{\n    static boolean aya;\n    static void rec(long a,long b,long i){\n         //System.out.println(a+\",\"+b);\n        if(b-a<=1)\n            return;\n        //System.out.println(a+\",\"+b);\n        if((i>=(b-a+1)/3+a) && (i<=b-(b-a+1)/3)){\n                aya=false;\n                 //System.out.println(\"!\");\n                return;\n        }\n        if(i>=a && i<=(b-a+1)/3+a-1)\n            rec(a,(b-a+1)/3+a-1,i);\n        else\n            rec(b-(b-a+1)/3+1,b,i);\n        }\n    public static void main(String args[]){\n        Scanner scan=new Scanner(System.in);\n        while(scan.hasNext()){\n            int k=scan.nextInt();\n            long i=scan.nextLong();\n            if(i==0 && k==0)\n                break;\n            aya=true;\n            rec(1l,(long)Math.pow(3,k),i);\n            if(i<=0)\n                aya=false;\n            System.out.println(aya?\"Yes\":\"No\");\n\n        }\n    }\n}", "generated_code": "//JZP263\n//sinashaloudegi@gmail.com\n//CuttingWood\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner in = new Scanner(System.in);\n        while (true) {\n            int n = in.nextInt();\n            double m = in.nextDouble();\n            if (n == 0 && m == 0) {\n                System.exit(0);\n            }\n            if (m % 2 == 0) {\n                System.out.println(\"No\");\n                continue;\n            }\n\n            while (n >= 1) {\n\n                if (m > Math.pow(3, n) / 3 && m <= 2 * (Math.pow(3, n) / 3)) {\n                    System.out.println(\"No\");\n                    break;\n                } else if (m <= Math.pow(3, n) / 3) {\n                    if (n != 1) {\n                        n--;\n                    } else {\n                        System.out.println(\"Yes\");\n                        break;\n                    }\n                } else if (2 * (Math.pow(3, n)) > m && m <= Math.pow(3, n)) {\n\n                    {\n                        if (n != 1) {\n                            m -= (2 * (Math.pow(3, n) / 3));\n                        } else {\n                            System.out.println(\"Yes\");\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_475__1_1001_275", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        while(input.hasNextLine()){\n        \tString[] S=input.nextLine().split(\" \");\n        \tint a=Integer.parseInt(S[0]);\n        \tint b=Integer.parseInt(S[1]);\n        \tSystem.out.println(a+b);\n        }\n    }\n}", "generated_code": "\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        while(s.hasNext()){\n        int a = s.nextInt();\n        int b = s.nextInt();\n        System.out.println(a + b);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1616_1__1_1265_17", "golden_code": "import java.io.*;\nimport java.util.*;\n\nimport static java.lang.Integer.parseInt;\n\npublic class Main\n{\n\tpublic static void main(String [] args) throws IOException\n\t{\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter writer = new PrintWriter(new OutputStreamWriter(System.out));\n\n\t\tint tc = parseInt(reader.readLine());\n\t\twhile(tc-->0)\n\t\t{\n\t\t\tint p = parseInt(reader.readLine());\n\t\t\tint [] data = new int[p];\n\t\t\tint [] dp = new int[p];\n\n\t\t\tfor(int i = 0 ; i<p ; i++)\n\t\t\t\tdata[i] = parseInt(reader.readLine());\n\n\n\t\t\tLinkedList<Integer> res = new LinkedList<Integer>();\n\t\t\tfind_lis(data, res);\n\n\n\t\t\twriter.println(res.size());\n\t\t}\n\t\twriter.flush();\n\t\twriter.close();\n\t}\n\tprivate static void find_lis(int [] a, LinkedList<Integer> b)\n\t{\n\t\tint [] p = new int[a.length];\n\t\tint u, v;\n\n\t\tb.addLast(0);\n\n\t\tfor (int i = 1; i < a.length; i++)\n\t\t{\n\n\t\t\tif (a[b.peekLast()] < a[i])\n\t\t\t{\n\t\t\t\tp[i] = b.peekLast();\n\t\t\t\tb.addLast(i);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\n\t\t\tfor (u = 0, v = b.size()-1; u < v;)\n\t\t\t{\n\t\t\t\tint c = (u + v) / 2;\n\t\t\t\tif (a[b.get(c)] < a[i]) u=c+1; else v=c;\n\t\t\t}\n\n\t\t\tif (a[i] < a[b.get(u)])\n\t\t\t{\n\t\t\t\tif (u > 0) p[i] = b.get(u-1);\n\t\t\t\tb.set(u, i);\n\t\t\t}\n\t\t}\n\n\t\tfor (u = b.size(), v = b.peekLast(); u-- > 0 ; v = p[v]) b.set(u, v);\n\t}\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        for (int i = 0; i < t; i++) {\n            int n = sc.nextInt();\n            int j = 0;\n            int o = 0;\n            while(Math.pow(2, j) <= n){\n                j++;\n            }\n            for (int k = j; k >= 0; k--) {\n                if(n%((int)Math.pow(2, k)) == 0){\n                    o = (int) (n/Math.pow(2, k));\n                    j = k;\n                    break;\n                }\n            }\n            System.out.println(o + \" \" + j);\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1230_67__1_1230_73", "golden_code": "\nimport java.util.Scanner;\n\n\npublic class Main{\n    static Scanner in=new Scanner(System.in);\n    public static void main(String[] args) {\n        String a;\n         int sum=0,sum1=0,m;\n        while(true){\n        a=in.next();\n        if(a.equals(\"0\"))break;\n            sum=10;\n        while(sum>9){\n            sum=0;\n        for(int i=0;i<a.length();i++){\n            sum+=Integer.parseInt(\"\"+a.charAt(i)) %10;\n          \n        }\n        a=String.valueOf(sum);\n        }\n        if(sum!=0)\n          System.out.println(sum);\n        }\n      \n    }\n}\n", "generated_code": "\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Main {\n    \n    public static void main(String [] arg){\n        Scanner sc=new Scanner(System.in);\n        String n;\n        while(2>1){\n            n=sc.next();      \n            int nn=0;\n            for(int i=0;i<n.length();i++)\n                nn=nn+n.codePointAt(i)-48;\n            if(nn==0)break;\n            if(nn%9!=0)\n            System.out.println(nn%9);\n            else\n                System.out.println(\"9\");\n            \n        }\n        \n    }\n    \n}\n", "score": 1.0}
{"id": "SHARE_1_2175_10__1_2175_12", "golden_code": "import java.util.Scanner;\nimport java.util.Vector;\n\n\npublic class Main {\n\tpublic static void main(String argv[]){\n\t\tScanner cin = new Scanner(System.in);\n\t\twhile ( cin.hasNext() ){\n\t\t\tint n = cin.nextInt();\n\t\t\tboolean isCheck[] = new boolean[3000];\n\t\t\tVector<Integer> s = new Vector<Integer>();\n\t\t\tfor ( int i = 0 ; i < n ; i++ ){\n\t\t\t\tint temp = cin.nextInt();\n\t\t\t\ts.addElement(temp);\n\t\t\t}\n\t\t\tfor ( int i = 1 ; i < s.size() ; i++ )\n\t\t\t\tif ( s.elementAt(i) - s.elementAt(i - 1) < n ){\n\t\t\t\t\tif ( s.elementAt(i) - s.elementAt(i - 1) < 0 )\n\t\t\t\t\t\tisCheck[s.elementAt(i - 1) - s.elementAt(i)] = true;\n\t\t\t\t\telse\n\t\t\t\t\t\tisCheck[s.elementAt(i) - s.elementAt(i - 1)] = true;\n\t\t\t\t}\n\t\t\tboolean eh = false;\n\t\t\tfor ( int i = 1 ; i < n ; i++ ){\n\t\t\t\tif ( !isCheck[i] ){\n\t\t\t\t\tSystem.out.println(\"Not jolly\");\n\t\t\t\t\teh = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!eh)\n\t\t\t\tSystem.out.println(\"Jolly\");\n\t\t}\n\t}\n}", "generated_code": " import java.util.Scanner;\npublic class Main {\npublic static void main(String[] args) {\nScanner s = new Scanner(System.in);\nwhile(s.hasNext()){\nint a = s.nextInt();\n\nint[] num = new int[a];\nfor(int i=0 ; i<a ; i++){\nnum[i] = s.nextInt();\n}\nif(a==1){\n\tSystem.out.println(\"Jolly\");\n\tcontinue;\n}\nint[] ekh = new int[a]; \nboolean f = true;\nfor(int i=1 ; i<a ; i++){\nekh[i-1] = Math.abs(num[i-1] - num[i]);\n\n}\nfor(int i=1 ; i<a ; i++){\n\tf= true;\n\tfor(int j=0 ; j< a-1 ; j++){\n\t\tif(ekh[j] == i){\n\t\t\tf = false;\n\t\t}\n\t}\n\tif(f){\n\t\tbreak;\n\t}\n}\nif(!f)\nSystem.out.println(\"Jolly\");\nelse\nSystem.out.println(\"Not jolly\");\n}\n\n}\n}", "score": 1.0}
{"id": "SHARE_1_2027_13__1_101071_7", "golden_code": "\nimport java.awt.Point;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.regex.Pattern;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n/**\n *\n * @author Mojtaba\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        StringBuilder sb = new StringBuilder();\n\n        int t = in.nextInt();\n        in.nextLine();\n        for (int i = 0; i < t; i++) {\n            String line = in.nextLine();\n            StringBuilder internal = new StringBuilder();\n            while (line.length() > 0) {\n                internal.append(F((line.substring(0, 8)))).append(\".\");\n                line = line.substring(8);\n            }\n            sb.append(internal.toString().substring(0, internal.toString().length() - 1)).append(\"\\n\");\n        }\n\n        System.out.println(sb.toString().trim());\n    }\n\n    private static int F(String binary) {\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum *= 2;\n            if (binary.charAt(i) == '1') {\n                sum += 1;\n            }\n        }\n        return sum;\n    }\n}\n", "generated_code": "import java.util.*;\npublic class Main\n{\n\tstatic Scanner scan = new Scanner(System.in);\n\tpublic static void main(String[] args) \n\t{\n\t\tint tc = scan.nextInt();\n\t\twhile(tc-- > 0)\n\t\t{\n\t\t\tint n = scan.nextInt();\n\t\t\tSet<Long> num = new TreeSet<Long>();\n\t\t\tfor(int i = 0 ; i < n ; i++)\n\t\t\t\tnum.add(Long.parseLong(\"2\"+scan.next()));\n\t\t\tSystem.out.println(cacl(num) ? \"YES\" : \"NO\");\n\t\t}\n\t}\n\tprivate static boolean cacl(Set<Long> num) \n\t{\n\t\tfor(long i : num)\n\t\t\twhile(i > 0)\n\t\t\t{\n\t\t\t\ti/= 10;\n\t\t\t\tif(num.contains(i))\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\treturn true;\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_2547_0__1_1511_4", "golden_code": "import java.util.*;\nimport java.math.*;\nimport java.awt.geom.*;\n\npublic class Main\n{\n    private final static int[][] perm = {{0, 1, 2}, {0, 2, 1}, {1, 0, 2}, {1, 2, 0}, {2, 0, 1}, {2, 1, 0}};\n\n    public static void main(String[] args)\n    {\n        Scanner scan = new Scanner(System.in);\n\n        while (true)\n        {\n            int[] princess = new int[3];\n            int[] prince = new int[3];\n\n            for(int i = 0;i < 3;i++)\n                princess[i] = scan.nextInt();\n\n            for(int i = 0;i < 2;i++)\n                prince[i] = scan.nextInt();\n\n            if(prince[0] == 0) break;\n\n            Arrays.sort(prince);\n            Arrays.sort(princess);\n\n            int res = -1;\n\n            for(int i = 1;i <= 52;i++)\n                if(Arrays.binarySearch(prince, i) < 0 && Arrays.binarySearch(princess, i) < 0)\n                {\n                    prince[0] = i;\n                    if(OK(prince.clone(), princess.clone()))\n                    {\n                        res = i;\n                        break;\n                    }\n                    prince[0] = 0;\n                }\n\n            System.out.println(res);\n        }\n    }\n\n    private static boolean OK(int[] prince, int[] princess)\n    {\n        int max = 0;\n\n        for(int[] p : perm)\n        {\n            int now = 0;\n            for(int i = 0;i < 3;i++)\n                if(prince[i] < princess[p[i]])\n                    now++;\n            max = Math.max(max, now);\n        }\n\n        return max < 2;\n    }\n}", "generated_code": "/**\n * Created by mohamadreza on 10/14/2015.\n */\nimport java.util.Scanner;\nclass IntHolder{\n    public int total;\n}\npublic class Main {\n    public void calcute(int n, int[] numbers, long sum, int index, IntHolder i){\n        if (sum == n)\n            i.total += 1;\n        if(sum > n)\n            return;\n        for (int counter = index; counter < numbers.length; counter ++){\n            sum += numbers[counter];\n            calcute(n, numbers, sum, counter, i);\n            sum -= numbers[counter];\n        }\n    }\n    public static void main(String[] args) {\n        int [] arr = new int[17];\n        int counter1 = 1;\n        for (int counter = 1; counter < 18; counter ++){\n            arr[counter - 1] = (int)Math.pow(counter,2);\n        }\n        try{\n            Scanner sc = new Scanner(System.in);\n            int number = sc.nextInt();\n            while(number != 0){\n                int sum = 0;\n                IntHolder i = new IntHolder();\n                Main m = new Main();\n                m.calcute(number, arr, sum, 0, i);\n                System.out.println(i.total);\n                number = sc.nextInt();\n           }\n        }\n        catch (Exception e){\n            System.out.println(\"distruct in : \" + counter1);\n        }\n    }\n}\n\n", "score": 0.0}
{"id": "SHARE_1_1001_90__1_1001_212", "golden_code": "\nimport java.util.Scanner;\n\n\npublic class Main {\n\n    static public Scanner in = new Scanner(System.in);\n\n    public static void main(String args[]) {\n        \n            String str[]=new String[2];\n            \n            String line;\n            \n            line=in.nextLine();\n            do{             \n            str=line.split(\" \");\n            int num1=Integer.parseInt(str[0]);\n            int num2=Integer.parseInt(str[1]);\n            int num3=num1+num2;\n            System.out.println(num3);\n            line=in.nextLine();\n            }while(!\"\".equals(line));\n            \n    }\n}", "generated_code": "import java.util.Scanner;\nimport java.lang.System;\nimport java.lang.String;\npublic class Main {\n\n    public static void main(String[] args) {\n\tScanner input=new Scanner(System.in);\n        try\n        {\n            while (true)\n            {\n                System.out.println(input.nextInt()+input.nextInt());\n            }\n        }\n        catch (Exception e )\n        {\n            System.exit(0);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_101069_1__1_1659_50", "golden_code": "import java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Scanner;\nimport java.util.Vector;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n/**\n *\n * @author hossein\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    static int color = 1;\n    static Vector<Integer> guess;\n    static ArrayList<Integer> skip;\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n, m;\n        \n        int map[][] = new int[62][62];\n        int t=0;\n        while (true) {\n            t++;\n            n = in.nextInt();\n            m = in.nextInt();\n            color = 1;\n            if (n == m && m == 0) {\n                break;\n            }\n            guess = new Vector<Integer>();\n            for (int i = 1; i <= n; i++) {\n                String s = in.next();\n                for (int j = 0; j < s.length(); j++) {\n                    if (s.charAt(j) == '#') {\n                        map[i][j + 1] = 0;\n                    } else {\n                        map[i][j + 1] = -1;\n                    }\n                }\n                map[i][0] = -1;\n                map[i][m + 1] = -1;\n            }\n            for (int j = 0; j <= m + 1; j++) {\n                map[0][j] = -1;\n                map[n + 1][j] = -1;\n            }\n            skip = new ArrayList<Integer>();\n            \n            int source = 1;\n            try {\n                find(map,n,m);\n            } catch (Exception e) {\n                System.out.println(\"Case \"+t+\": Impossible\");\n            } catch (Error e){\n                System.out.println(\"Case \"+t+\": Possible\");\n                \n            }    \n//            \n//            while (true) {\n//                try {\n//                    while (matching(map));\n//                    skip.add(1);\n//                    try {\n//                        for (int i = 1; i <= n; i++) {\n//                            for (int j = 1; j <= m; j++) {\n//                                if (match(map, i, j, source) == true) {\n//                                    throw new IOException();\n//                                }\n//                            }\n//                        }\n//                        throw new Exception();\n//                    } catch (IOException e) {\n//                        \n//                    }\n//                    \n//                } catch (Exception e) {\n//                    if (source == 1) {\n//                        int \n//                    }\n//                    from=guess.remove(guess.size()-1);\n//                    for (int i = 1; i <= n; i++) {\n//                        for (int j = 1; j <= m; j++) {\n//                            if (map[i][j] >= from) {\n//                                map[i][j] = 0;\n//                            }\n//                        }\n//                    }\n//                }\n//            }\n        \n        }\n    }\n    \n    private static boolean match(int[][] map, int i, int j, int source) throws Exception {\n        if (map[i][j] == 0) {\n            if (source == 1) {\n                if (map[i + 1][j] == 0) {\n                    color++;\n                    map[i + 1][j] = color;\n                    map[i][j] = color;\n                    guess.add(color);\n                    return true;\n                } else {\n                    throw new Exception();\n                }\n            }\n            if (source == 0) {\n                if (map[i][j + 1] == 0) {\n                    color++;\n                    map[i][j + 1] = color;\n                    map[i][j] = color;\n                    guess.add(color);\n                    return true;\n                } else {\n                    throw new Exception();\n                }\n            }\n        }\n        return false;\n    }\n    \n    private static void find(int[][] map, int n, int m) throws Exception {\n        try {\n            while (matching(map,n,m));\n            getguess(map, 0,n,m);\n            find(map, n, m);\n        } catch (Exception e) {\n            int from = guess.remove(guess.size() - 1);\n            for (int i = 1; i <= n; i++) {\n                for (int j = 1; j <= m; j++) {\n                    if (map[i][j] >= from) {\n                        map[i][j] = 0;\n                    }\n                }\n            }\n            getguess(map, 1,n,m);\n            try{\n                find(map, n, m);\n                \n            }catch(Exception e2){\n                int from2 = guess.remove(guess.size() - 1);\n                for (int i = 1; i <= n; i++) {\n                    for (int j = 1; j <= m; j++) {\n                        if (map[i][j] >= from2) {\n                            map[i][j] = 0;\n                        }\n                    }\n                }\n                throw new Exception();\n            }\n        }\n        \n    }\n    \n    private static void getguess(int[][] map, int s, int n, int m) throws Exception {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) {\n                if (match(map, i, j, s) == true) {\n                    return;\n                }\n            }\n        }\n        throw new Exception();\n    }\n\n    private static boolean matching(int[][] map, int n, int m) throws Exception {\n        int allsum=0;\n        for(int i=1;i<n+1;i++){\n            for(int j=1;j<m+1;j++){\n                if(map[i][j]==0){\n                    int sum=0;\n                    allsum++;\n                    int kk=0,ll=0;\n                    for(int k=-1;k<2;k++){\n                        for(int l=-1;l<2;l++){\n                            if(l+k!=0 &&k*l==0 && map[i+k][j+l]==0){\n                                sum++;\n                                kk=i+k;\n                                ll=j+l;\n                            }\n                        }\n                    }\n                    if(sum==1){\n                        color ++;\n                        map[i][j]=color;\n                        map[kk][ll]=color;\n                        return true;\n                    }\n                    if(sum==0){\n                        throw new Exception(\"0\");\n                    }\n                }\n            }\n        }\n        if(allsum==0){\n            throw new Error(\"1\");\n        }\n        return false;\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        double n=input.nextDouble();\n        do\n           {\n            double x, temp=n;\n            n=input.nextDouble();\n            if(n==999 | temp==999)\n                break;\n            else\n            {   \n                x=Math.round((n-temp)*100.0)/100.0;\n                System.out.println(String.format(\"%.2f\", x));\n            }\n        } \n        while(input.hasNextLine());\n        \n        System.out.println(\"End of Output\");\n    }\n    \n}", "score": 0.0}
{"id": "SHARE_1_2175_9__1_2175_23", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\twhile(input.hasNext()){\n\t\t\tint n = input.nextInt();\n\t\t\tboolean mark[] = new boolean[n];\n\t\t\tint prev = input.nextInt();\n\t\t\tif(n == 1){\n\t\t\t\tSystem.out.println(\"Jolly\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor(int i = 1; i < n; i++){\n\t\t\t\tint tmp = input.nextInt();\n\t\t\t\tif(Math.abs(tmp-prev) > 0 && Math.abs(tmp-prev) < n)\n\t\t\t\t\tmark[Math.abs(tmp-prev)] = true;\n\t\t\t\tprev = tmp;\n\t\t\t}\n\t\t\tboolean res = true;\n\t\t\tfor(int i = 1; i < n; i++)\n\t\t\t\tres = res && mark[i];\n\t\t\tif(res)\n\t\t\t\tSystem.out.println(\"Jolly\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"Not jolly\");\n\t\t}\n\t}\n}\n", "generated_code": "\nimport java.util.Scanner;\nimport java.util.TreeSet;\n\n\npublic class Main {\n    public static void main (String [] args){\n        Scanner s = new Scanner(System.in);\n        int c = 0 ;\n        while (s.hasNext()){\n            boolean bool = true ;\n            int a = s.nextInt();\n            TreeSet<Integer> collect = new TreeSet<Integer>();\n            int b = s.nextInt();\n            for (int i = 0 ; i<a-1 ; i++){\n                c = s.nextInt();\n                int sub = b-c ;\n                if (sub<0)\n                    sub*=-1;\n                collect.add(sub);\n                b = c ;\n            }\n            for (int j = 1 ; j<=a-1 ; j++){\n                if (!collect.contains(j)){\n                    bool=false;\n                }\n            }\n\n            if (!bool)\n                System.out.println(\"Not jolly\");\n            else\n                System.out.println(\"Jolly\");\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_430__1_1001_361", "golden_code": "import java.util.Scanner;\npublic class Main{\n    public static void main(String args[]){\n        Scanner sc = new Scanner(System.in);\n        while(sc.hasNext()){\n            System.out.println(sc.nextInt()+sc.nextInt());\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNextInt()){\n\t\t\tSystem.out.println(sc.nextInt()+sc.nextInt());\n\t\t}\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_2578_47__1_1266_26", "golden_code": "import java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        // TODO code application logic here\n        int c;\n        Scanner s = new Scanner(System.in);\n         c = Integer.parseInt(s.nextLine());\n         for(int i=0;i<c;i++)\n         {\n             \n             String name = s.nextLine();\n             char[] a = name.toCharArray();\n             int g=0,b=0;\n             for(int j=0;j<a.length;j++)\n             {\n                 switch (a[j])\n                 {\n                     \n                    case 'g':\n\t\t\t\t\tcase 'G':\n                         g++;\n                         break;\n                    case 'b':\n                    case 'B':\n                        b++;\n                        break;                     \n                }\n       \n             }\n             if(g>b)\n             {\n                 System.out.println(name+\" is GOOD\");\n             }\n             else if(g<b)\n             {\n                 System.out.println(name+\" is A BADDY\");\n             }\n             else\n             {\n                 System.out.println(name + \" is NEUTRAL\");\n             }\n             \n         }\n\n    }\n    \n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    static Scanner input=new Scanner(System.in);\n    public static void main(String[] args){\n        int n=input.nextInt();\n        for (int i = 0; i < n; i++) {\n            int a=input.nextInt();\n            int t=0;\n            String s;\n            while(a!=0){\n                int x=a%2;\n                a/=2;\n                if(x==1 && a!=0)\n                    System.out.printf(\"%d \",t);\n                if(x==1 && a==0)\n                    System.out.printf(\"%d\",t);\n                t++;\n            }\n            System.out.println(\"\");\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1662_19__5_1010_7", "golden_code": "import java.util.*;\nimport java.util.Map.Entry;\nclass Main {\n\n\tpublic static void main(String[] q) {\n\t\tScanner s = new Scanner(System.in).useDelimiter(\"[\\\\s,.;\\''\\\"()/:-]+\");\n\t\tTreeMap<String, Integer> map = new TreeMap<String,Integer>();\n\t\tint max =-1;\n\t\tString w;\n\t\twhile (s.hasNext()){\n\t\t\tw = s.next().toLowerCase();\n\t\t\tmap.put(w,(map.containsKey(w))?map.get(w)+1:1);\n\t\t\tif (map.get(w)>max)\n\t\t\t\tmax = map.get(w);\n\t\t}\n\t\tp(max+\" occurrences\");\n\t\twhile (!map.isEmpty()){\n\t\t\tEntry<String, Integer> e = map.pollFirstEntry();\n\t\t\tif (e.getValue()==max)\n\t\t\t\tp(e.getKey());\n\t\t}\n\t}\n\tstatic void p(String s){\n\t\tSystem.out.println(s);\n\t}\n}\n", "generated_code": "import java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String args[]){\n\t\tFrozen f = new Frozen();\n\t\tf.manage();\n\t}\n}\nclass Frozen{\n\tint t = 0;\n\tArrayList<Double> chegali = new ArrayList<Double>();\n\tArrayList<Double> weight = new ArrayList<Double>();\n\tDouble cap;\n\tDouble value = 0.0;\n\tvoid manage(){\n\t\tScanner s = new Scanner(System.in);\n\t\tt = s.nextInt();\n\t\tfor (int i = 0; i < t; i++) {\n\t\t\tint num = s.nextInt();\n\t\t\tcap = s.nextDouble();\n\t\t\tfor (int j = 0; j < num; j++) {\n\t\t\t\tweight.add(s.nextDouble());\n\t\t\t\tDouble temp = s.nextDouble();\n\t\t\t\tchegali.add(temp/(weight.get(weight.size()-1)));\n\t\t\t}\n\t\t\tsort();\n\t\t\tcalc();\n\t\t\tchegali.clear();\n\t\t\tweight.clear();\n\t\t\tvalue = 0.0;\n\t\t}\n\t}\n\tvoid sort(){\n\t\tDouble max= 0.0;\n\t\tint temp;\n\t\tDouble tempTrans;\n\t\tDouble tempWeight;\n\t\tfor (int i = 0; i < chegali.size(); i++) {\n\t\t\tfor (int j = i; j < chegali.size(); j++) {\n\t\t\t\tif(chegali.get(j)>max)\n\t\t\t\t\tmax = chegali.get(j);\n\t\t\t}\n\t\t\ttemp = chegali.indexOf(max);\n\t\t\ttempTrans = chegali.get(i);\n\t\t\ttempWeight = weight.get(i);\n\t\t\tchegali.set(i,max);\t\t\t\n\t\t\tweight.set(i,weight.get(temp));\n\t\t\tchegali.set(temp, tempTrans);\n\t\t\tweight.set(temp, tempWeight);\n\t\t\tmax = 0.0;\n\t\t}\n\t}\n\tvoid calc(){\n\t\tfor (int i = 0; i < chegali.size(); i++) {\n\t\t\tif(cap - weight.get(i) >= 0){\n\t\t\t\tvalue += weight.get(i)*chegali.get(i);\n\t\t\t\tcap = cap-weight.get(i);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tvalue += cap*chegali.get(i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tround();\n\t\t//System.out.println(value);\n\t}\n\tvoid round(){\n\t\tDouble result;\n\t\tDouble d = value*1000;\n\t\tInteger raw = d.intValue();\n\t\t//System.out.println(raw);\n\t\tDouble temp = d/10;\n\t\tInteger a = temp.intValue();\n\t\tint ragham = raw - a*10;\n\t\tif(ragham >= 5){\n\t\t\traw = raw + (10-ragham);\n\t\t}\n\t\telse\n\t\t\traw = raw - ragham;\n\t\tresult = (double) (raw/1000.0);\n\t\t//System.out.println(result);\n\t\tSystem.out.printf(\"%.2f\",result);\n\t\tSystem.out.println();\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_101078_9__1_1459_3", "golden_code": "\nimport java.util.*;\n\npublic class Main {\n   \n    public static void main(String[] args) {\n     \n        \n       Scanner s=new Scanner(System.in);\n         int input1,input2,sum=0;\n       input1=s.nextInt();\n      \n       for(int j=0;j<input1;j++){\n           sum=0;\n       input2=s.nextInt();\n       int adad[]=new int[input2];\n\n       for(int i=0;i<input2;i++){\n          adad[i]=s.nextInt();\n\n       }\n\n      Arrays.sort(adad);\n      for(int i=adad.length-3;i>=0;i=i-3){\n         sum+=adad[i];\n      }\n        System.out.println(sum);\n    }}\n\n}\n", "generated_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) throws Exception {\n\t\tScanner input = new Scanner(System.in);\n\t\twhile (input.hasNext()) {\n\t\t\tString s = input.nextLine();\n\t\t\tBigInteger bigInteger = new BigInteger(s);\n\t\t\t\n\t\t\t\tint zero = 0;\n\t\t\t\tfor (int j = 0; j < s.length(); j++)\n\t\t\t\t\tif (s.charAt(j) == '0'){\n\t\t\t\t\t\tzero = j + 1;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tif (p(bigInteger, s.length(), zero)) {\n\t\t\t\t\tSystem.out.println(s + \" is cyclic\");\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(s + \" is not cyclic\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\n\tstatic boolean p(BigInteger b, int l, int zero) {\n\t\tfor (int i = 1; i <= l; i++) {\n\t\t\tBigInteger x = b.multiply(new BigInteger(i + \"\"));\n\t\t\tString s = x.toString(10);\n\t\t\tString ss = b.toString(10);\n\t\t\tif (zero != 0) {\n\t\t\t\tfor (int j = 0; j < zero; j++)\n\t\t\t\t\tss = \"0\" + ss;\n\t\t\t\tint d = ss.length() - s.length();\n\t\t\t\tif (s.length() < ss.length()) {\n\t\t\t\t\tfor (int j = 0; j < d; j++)\n\t\t\t\t\t\ts = \"0\" + s;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tboolean res = false;\n\t\t\tfor(int j = 0;j<s.length();j++){\n\t\t\t\tString swe = \"\";\n\t\t\t\tfor(int k=j;k<j+s.length();k++){\n\t\t\t\t\tswe+=s.charAt((k)%s.length());\n\t\t\t\t}\n\t\t\t\tif(swe.equals(ss)){\n\t\t\t\t\tres = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(!res)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_73__1_1001_494", "golden_code": "import java.util.*;\npublic class Main \n{\n    public static void main(String args[])\n    {\n        Scanner scan = new Scanner(System.in);\n        while(scan.hasNext())\n        {\n            int a = scan.nextInt() , b = scan.nextInt();\n            System.out.println(a+b);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_411__1_1001_171", "golden_code": "import java.util.Scanner;\n\nclass Main {\n\n    public static void main(String[] args) {\n\n        Scanner input = new Scanner(System.in);\n\n//        int numOfTestcases = input.nextInt();\n//\n//        for (int i = 0; i < numOfTestcases; i++) {\n//            int numOfStudents = input.nextInt();\n//            calculate(numOfStudents);\n//        }\n\n        while (input.hasNext()) {\n            System.out.println(input.nextInt() + input.nextInt());\n        }\n    }\n\n    public static void calculate(int numOfStudents) {\n\n        Scanner input = new Scanner(System.in);\n\n        int[] marks = new int[numOfStudents];\n        int sum = 0;\n        for (int i = 0; i < numOfStudents; i++) {\n            marks[i] = input.nextInt();\n            sum += marks[i];\n        }\n\n        double average = (double) sum / numOfStudents;\n        int counter = 0;\n        for (int i = 0; i < numOfStudents; i++) {\n            if (marks[i] > average) {\n                counter++;\n            }\n        }\n\n        double percent = ((double) counter / numOfStudents) * 100;\n        String result = \"\" + (Math.round(percent * 1000) / (double) 1000);\n        int numOfNumbers = result.length() - result.indexOf('.');\n        for (int i = 0; i <= 3 - numOfNumbers; i++) {\n            result += \"0\";\n        }\n        result += \"%\";\n        System.out.println(result);\n    }\n}", "generated_code": "import java.util.*;class Main{public static void main(String args[]){Scanner s=new Scanner(System.in);while(s.hasNext())System.out.println(s.nextInt()+s.nextInt());}}", "score": 1.0}
{"id": "SHARE_1_1659_5__1_2769_7", "golden_code": "import java.util.*;\nclass Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\t//while(scan.hasNextFloat())\n\t\t{\n\t\t\tLinkedList<Float> arr = new LinkedList<Float>();\n\t\t\twhile(arr.size()==0 || arr.getLast()!=999.0)\n\t\t\t\tarr.addLast(scan.nextFloat());\n\t\t\tfor(int i=1;i<arr.size()-1;i++)\n\t\t\t{\n\t\t\t\tSystem.out.printf(\"%.2f\",(arr.get(i)-arr.get(i-1)));\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\tSystem.out.println(\"End of Output\");\n\t\t}\n\t}\n}", "generated_code": "import java.util.*;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scan = new Scanner(System.in);\n        int t = scan.nextInt();\n        int[] fib = new int[60];\n        fib[1] = fib[2] = 1;\n        Set<Integer> f = new TreeSet<Integer>();\n        for(int i = 3; i < 40; i++)\n            fib[i] = fib[i-1]+fib[i-2];\n        for(int i = 0; i < 40; i++)\n            f.add(fib[i]);\n//        System.out.println(Arrays.toString(fib));\n        while(t-- > 0)\n        {\n            int x = scan.nextInt();\n            scan.nextLine();\n            String s = scan.nextLine();\n            int n = s.length();\n\n            int c= 1, i = 0;\n            int m = 0;\n            int at = 1;\n            if(n == 1)\n            {\n                for(int j = 0; j < x ; j++)\n                    System.out.print(s.charAt(0));\n                m = x;\n            }\n            while(m != x)\n            {\n                //    System.out.println(s.charAt(i)+\" \"+i + \" \" +c);\n                if(f.contains(c))\n                {\n                    if(s.charAt(i) == '-')\n                    {\n                        c = 1;\n                    }\n                    else\n                    {\n                        System.out.print(s.charAt(i));\n                        c++;\n                        m++;\n                    }\n                    i+=at;\n                }\n                else\n                {\n                    c++;\n                    i+=at;\n                }\n                //    System.out.println(s.charAt(i)+\" \"+i + \" \" +c);\n                if(i == n-1)\n                {\n                    at = -1;\n                    //    i += at;\n                }\n                if(i == 0)\n                {\n                    at = 1;\n                    //    i += at;\n                }\n                //    System.out.println(s.charAt(i)+\" \"+i + \" \" +c);\n                //    System.out.println();\n            }\n            System.out.println();\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_101055_4__1_2578_37", "golden_code": "\n\nimport java.util.Scanner;\npublic class Main {\n\n\n\n\n\n\n\n\n\n\n    public static void main(String args[]){\n\n        Scanner cin=new Scanner(System.in);\n        int acount,bcount,n,count,arr[],brr[],min=Integer.MAX_VALUE,dec,counter,xor,minc;\n        String str;\n        char[] ch;\n\n        for(int i=cin.nextInt() ; i>0 ; i--){\n           acount=cin.nextInt();\n           bcount=cin.nextInt();\n           arr=new int[acount];\n           brr=new int[bcount];\n\n           for(int j=0 ; j<acount;j++){\n            arr[j]=cin.nextInt();\n           }\n               for(int j=0 ; j<bcount;j++){\n            brr[j]=cin.nextInt();\n           }\n\n           for(int p=0;p<brr.length;p++){\n\n\n               for(int q=0;q<arr.length;q++){\n                   xor=(brr[p]^arr[q]);\n                  // System.out.println(\"xor:\" +xor);\n                   if(q==0 && p==0){\n                       min=arr[q];\n\n                   }\n                   else {\n                       if((Integer.bitCount(arr[q]^brr[p]))<(Integer.bitCount(min^brr[p]))){min=arr[q];}\n                       else if((Integer.bitCount(arr[q]^brr[p]))==(Integer.bitCount(min^brr[p]))){\n                           if(arr[q]<min){min=arr[q];}\n                       }\n                   }\n               }\n               System.out.println(min);\n           }\n\n    }\n    }\n}\n\n\n\n", "generated_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tint c = Integer.parseInt(br.readLine());\n\t\tfor (int i = 0; i < c; i++) {\n\t\t\tString name = br.readLine();\n\t\t\tint b=0,g=0;\n\t\t\tfor (int j = 0; j < name.length(); j++) {\n\t\t\t\tif(name.charAt(j)=='b'||name.charAt(j)=='B')\n\t\t\t\t\tb++;\n\t\t\t\telse if(name.charAt(j)=='g'||name.charAt(j)=='G')\n\t\t\t\t\tg++;\n\t\t\t}\n\t\t\tif(g>b){\n\t\t\t\tSystem.out.println(name+\" is GOOD\");\n\t\t\t}else if(g<b){\n\t\t\t\tSystem.out.println(name+\" is A BADDY\");\n\t\t\t}else{\n\t\t\t\tSystem.out.println(name+\" is NEUTRAL\");\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1009_55__1_1009_66", "golden_code": "import java.util.Scanner;\npublic class Main{\n    public static void main(String[] args)\n    {\n      Scanner cin = new Scanner(System.in);\n      int x=0;\n      float n,sum=0;\n        while (x<12)\n        {\n            n=cin.nextFloat();\n            sum+=n;\n            x++;\n        }\n        float avg;\n        avg=sum/12;\n        System.out.printf(\"$%.02f\\n\",avg);\n        \n    }\n}\n", "generated_code": "import java.util.*;\npublic class Main {\n\n    public static void main(String[] args) {\n    Scanner s= new Scanner(System.in);\n     \n           \n        \n    double f =0;\n        for (int i = 0; i < 12; i++) {\n            double d = s.nextDouble();\n            f+=d;\n            \n        }\n        double x= f/12; \n        String z = String.valueOf(x);\n        char []c= z.toCharArray();\n         String h =\"\";\n        for (int i = 0; i < z.length(); i++) {\n            if(c[i]=='.')\n            {\n             h +=c[i];\n                     i ++;\n             h += c[i];\n             i ++;\n                h += c[i];      \n             break;\n            }\n            else\n            {\n            h +=c[i];\n        }\n  \n        }\n        System.out.println(\"$\"+h);\n}\n}", "score": 1.0}
{"id": "SHARE_1_2121_29__1_2001_2", "golden_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while( input.hasNextInt() ){\n            BigInteger a = BigInteger.ZERO, b = BigInteger.ONE, t;\n            for(int n = input.nextInt(); --n > 0; ){\n                a = a.add(b);\n                t = a;\n                a = b;\n                b = t;\n            }\n            System.out.println(b);\n        }\n    }  \n}", "generated_code": "\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while(true){\n            int n = in.nextInt();\n            if(n== 0)\n                break;\n            int a[]= new int[n];\n            for (int i = 0; i < n; i++) {\n                a[i] = in.nextInt();\n            }\n            Arrays.sort(a);\n            System.out.print(a[0]);\n            for (int i = 1; i < a.length; i++) {\n                if(a[i]!=a[i-1]){\n                    System.out.print(\" \"+a[i]);\n                }\n            }\n            System.out.println(\"\");\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_502__1_2858_29", "golden_code": "import java.util.Scanner; \n \npublic class Main\n{\n\tpublic static void main(String args[])\n\t{\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext())\n\t\t{\n\t\t\tint a = in.nextInt();\n\t\t\tint b = in.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t\tin.close();\n\t}\n}\n\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scanner = new Scanner(System.in);\n\n        int t = scanner.nextInt();\n\n        for (int i = 0; i < t; i++)\n        {\n            ArrayList<Integer> integers = new ArrayList<>();\n\n            int m = scanner.nextInt();\n            int[] mS = new int[m];\n\n            int n = scanner.nextInt();\n            int[] nS = new int[n];\n\n            for (int j = 0; j < m; j++)\n                mS[j] = scanner.nextInt();\n\n            for (int j = 0; j < n; j++)\n                nS[j] = scanner.nextInt();\n\n            for (int j = 0; j < m; j++)\n            {\n                for (int k = 0; k < n; k++)\n                {\n                    if (mS[j] == nS[k])\n                    {\n                        integers.add(mS[j]);\n                        mS[j] = (int)Math.pow(2, 32);\n                        nS[k] = (int)Math.pow(2, 32);\n                        break;\n                    }\n                }\n            }\n\n//            for (Integer integer : integers)\n//            {\n//                System.out.println(integer);\n//            }\n\n            System.out.println(integers.size());\n        }\n    }\n}\n\n", "score": 0.0}
{"id": "SHARE_1_1656_9__1_1656_12", "golden_code": "import java.util.Scanner;\npublic class Main{  \n    public static void main(String[] args){\n        Scanner cin=new Scanner(System.in);\n        String strNum=cin.nextLine();\n        while(!strNum.equals(\"-1\")){\n            int numCounter=0;\n            for(int i=0;i<strNum.length();i++)\n                if(strNum.charAt(i)==' ')\n                    numCounter++;\n            int nums[]=new int[numCounter];\n            numCounter=0; String temp=\"\";\n            for(int i=0;i<strNum.length() && numCounter<nums.length;i++)\n                if(strNum.charAt(i)!=' '){\n                    temp+=strNum.charAt(i);\n                }else{\n                    nums[numCounter]=Integer.parseInt(temp);\n                    numCounter++;\n                    temp=\"\";\n                }\n            numCounter=0;\n            for(int i=0;i<nums.length;i++)\n                for(int j=i+1;j<nums.length;j++){\n                    if(nums[i]*2==nums[j])\n                        numCounter++;\n                    if(nums[i]==nums[j]*2)\n                        numCounter++;\n                }\n            System.out.println(numCounter);\n            strNum=cin.nextLine();\n        }        \n    }\n}", "generated_code": "import java.util.Scanner;\n\n/**\n *\n * @author masoud\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner sc=new Scanner(System.in);\n        String s=\"ma\";\n        int r=0,l=0;\n        float p=0;\n        int arr[] = null;\n        int arr1[] =new int [15];\n        while(!s.equals(\"-1\")){\n        s=sc.nextLine();\n        if(!s.equals(\"-1\")){\n        arr=new int[15];\n        int y=s.indexOf(' ');\n        arr[0]=Integer.valueOf(s.substring(0, s.indexOf(' ')));\n        int i=0;\n        while(true){\n           i++;\n           arr[i]=Integer.valueOf(s.substring(y+1, s.indexOf(' ',y+1)));\n           y=s.indexOf(' ',y+1);\n           if(s.charAt(y+1)=='0')\n                   break;\n        }\n\n        for(int k=0;k<=i;k++)\n            for(int j=k+1;j<=i;j++){\n                p=(float)arr[j];\n                if((arr[k]==arr[j]*2)||(arr[k]==p/2))\n                    r++;\n            }\n        arr1[l++]=r;\n        r=0;\n            arr=null;\n        }\n        }\n        for(int k=0;k<l;k++)\n            System.out.println(arr1[k]);\n    }\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1998_25__1_1149_2", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        in.nextLine();\n        for (int m = 0; m < n; m++) {\n            StringBuilder str = new StringBuilder(in.nextLine());\n            StringBuilder res = new StringBuilder();\n            while (str.length() != 0) {\n                char a = str.charAt(0);\n                int k = 0;\n                int j = 0;\n                while (j<str.length() && str.charAt(j) == a) {\n                    j++;\n                    k++;\n                }\n                if (k != 1) res.append(k).append(a);\n                else res.append(a);\n                for (int l = 0; l < k; l++) str.deleteCharAt(0);\n            }\n            System.out.println(res);\n        }\n    }\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n   public static void main(String[] args) {\n      Scanner in = new Scanner(System.in);\n      while (in.hasNext()) {\n         String s = in.next();\n         switch (pal(s)) {\n            case 1:\n               System.out.println(s + \" -- is a mirrored string.\\n\");\n               break;\n            case 2:\n               System.out.println(s + \" -- is a mirrored palindrome.\\n\");\n               break;\n            case 3:\n               System.out.println(s + \" -- is not a palindrome.\\n\");\n               break;\n            case 4:\n               System.out.println(s + \" -- is a regular palindrome.\\n\");\n               break;\n         }\n      }\n   }\n\n   public static int pal(String s) {\n      int j = s.length() - 1;\n      boolean rpal = true;\n      for (int i = 0; i < s.length() / 2; i++) {\n         if (s.charAt(i) != s.charAt(j)) {\n            rpal = false;\n         }\n         j--;\n      }\n      if (!rpal) {\n         int k = s.length() - 1;\n         for (int i = 0; i <= s.length() / 2; i++) {\n            if (!spal(s.charAt(i), s.charAt(k))) {\n               return 3;\n            }\n            k--;\n         }\n         return 1;\n      } else {\n         for (int i = 0; i <= s.length() / 2; i++) {\n            if (s.charAt(i) == 'A' || s.charAt(i) == 'H' || s.charAt(i) == 'I'\n                    || s.charAt(i) == 'M' || s.charAt(i) == 'O' || s.charAt(i) == 'T'\n                    || s.charAt(i) == 'U' || s.charAt(i) == 'V' || s.charAt(i) == 'W'\n                    || s.charAt(i) == 'X' || s.charAt(i) == 'Y' || s.charAt(i) == '8') {\n            } else {\n               return 4;\n            }\n         }\n         return 2;\n      }\n   }\n\n   public static boolean spal(char c1, char c2) {\n      return (c1 == 'E' && c2 == '3') || (c1 == '3' && c2 == 'E') || (c1 == 'J' && c2 == 'L') || (c1 == 'L' && c2 == 'J')\n              || (c1 == 'S' && c2 == '2') || (c1 == '2' && c2 == 'S') || (c1 == 'Z' && c2 == '5') || (c1 == '5' && c2 == 'Z')\n              || (c1 == '1' && c2 == '1') || (c1 == 'I' && c2 == 'I') || (c1 == 'A' && c2 == 'A') || (c1 == 'H' && c2 == 'H')\n              || (c1 == 'M' && c2 == 'M') || (c1 == 'O' && c2 == 'O') || (c1 == 'T' && c2 == 'T') || (c1 == 'U' && c2 == 'U')\n              || (c1 == 'V' && c2 == 'V') || (c1 == 'W' && c2 == 'W') || (c1 == 'X' && c2 == 'X') || (c1 == 'Y' && c2 == 'Y')\n              || (c1 == '8' && c2 == '8');\n   }\n}", "score": 0.0}
{"id": "SHARE_1_1001_247__1_1001_483", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\t\n\tpublic static void main(String args[])\n\t{\n\t\tScanner cin = new Scanner(System.in);\n\t\twhile(cin.hasNext())\n\t\t{\n\t\t\tSystem.out.println(cin.nextInt()+cin.nextInt());\n\t\t}\n\t}\n\t\n\t\n\t\n\t\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main{\n\n\tpublic static void main(String[] args){\n\t\tScanner sc =new Scanner(System.in);\n\t\t\twhile(sc.hasNext()){\n\t\t\t\tint a=sc.nextInt();\n\t\t\t\tint b=sc.nextInt();\n\t\t\t\tSystem.out.println(a+b);\n\t\t\t}\n\t}\n\n}", "score": 1.0}
{"id": "SHARE_1_2738_2__1_2090_2", "golden_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.StringTokenizer;\n\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t * @throws IOException \n\t */\n\tpublic static void main(String[] args) throws IOException {\n\t\t// TODO Auto-generated method stub\n\t\tReader.init(System.in);\n\t\tint testCase=Reader.nextInt();\n\t\tfor(int i=0;i<testCase;i++){\n\t\t\tint n=Reader.nextInt();\n\t\t\tint k=Reader.nextInt();\n\t\t\tArrayList<Interval> intervals=new ArrayList<Interval>();\n\t\t\tfor(int j=0;j<n;j++){\n\t\t\t\tint x=Reader.nextInt();\n\t\t\t\tint y=Reader.nextInt();\n\t\t\t\tintervals.add(new Interval(x, y));\n\t\t\t}\n\t\t\t\n\t\t\tCollections.sort(intervals);\n\t\t\tint max=intervals.get(0).y;\n\t\t\tint maxCannibals=n;\n\t\t\tfor(int j=1;j<n;j++){\n\t\t\t\tif((intervals.get(j).x+k)<intervals.get(j).y\n\t\t\t\t\t\t&&(intervals.get(j).x+k)<max){\n\t\t\t\t\tmaxCannibals--;\n\t\t\t\t}\n\t\t\t\tif(max<intervals.get(j).y){\n\t\t\t\t\tmax=intervals.get(j).y;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(maxCannibals);\n\t\t}\n\t\t\t\t\n\n\t}\n\t\n\t\n}\n\nclass Interval implements Comparable<Interval>{\n\tint x;\n\tint y;\n\tpublic Interval(int x,int y){\n\t\tthis.x=x;\n\t\tthis.y=y;\n\t}\n\t@Override\n\tpublic int compareTo(Interval o) {\n\t\tif(this.x>o.x){\n\t\t\treturn 1;\n\t\t}\n\t\telse return -1;\n\t\t\n\t}\n}\n/** Class for buffered reading int and double values */\nclass Reader {\n    static BufferedReader reader;\n    static StringTokenizer tokenizer;\n\n    /** call this method to initialize reader for InputStream */\n    static void init(InputStream input) {\n        reader = new BufferedReader(\n                     new InputStreamReader(input) );\n        tokenizer = new StringTokenizer(\"\");\n    }\n\n    /** get next word */\n    static String next() throws IOException {\n        while ( ! tokenizer.hasMoreTokens() ) {\n            //TODO add check for eof if necessary\n            tokenizer = new StringTokenizer(\n                   reader.readLine() );\n        }\n        return tokenizer.nextToken();\n    }\n\n    static int nextInt() throws IOException {\n        return Integer.parseInt( next() );\n    }\n\t\n    static double nextDouble() throws IOException {\n        return Double.parseDouble( next() );\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\t\n\t    static Scanner in = new Scanner(System.in);\n\t        static String str1;\n\t            static String str2;\n\t                static int[][] dp;\n\t                    public static void main(String[] args) {\n\t                    \t        while (in.hasNext()) {\n\t                    \t        \t            str1 = in.next();\n\t                    \t        \t                        str2 = in.next();\n\t                    \t        \t                                    boolean r=true;\n\t                    \t        \t                                                int  a=0;\n\t                    \t        \t                                                            int q=0;\n\t                    \t        \t                                                                        for (int i = 0; i < str1.length(); i++) {\n\t                    \t        \t                                                                        \t                for (int j = a; j < str2.length(); j++) {\n\t                    \t        \t                                                                        \t                \t                    if(str1.charAt(i)==str2.charAt(j)){\n\t                    \t        \t                                                                        \t                \t                    \t                        a=j+1;\n\t                    \t        \t                                                                        \t                \t                    \t                                                q++;\n\t                    \t        \t                                                                        \t                \t                    \t                                                                        break;\n\t                    \t        \t                                                                        \t                \t                    }\n\t                    \t        \t                                                                        \t                }\n\t                    \t        \t                                                                        }\n\t                    \t        \t                                                                                     if (q == str1.length()) {\n\t                    \t        \t                                                                                     \t                System.out.println(\"Yes\");\n\t                    \t        \t                                                                                     } else {\n\t                    \t        \t                                                                                     \t                System.out.println(\"No\");\n\t                    \t        \t                                                                                     }\n\t                    \t        }\n\t                    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_233__1_1001_141", "golden_code": "import java.util.Scanner;\n \npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt() + cin.nextInt());\n    }\n}", "generated_code": "\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while(in.hasNext()){\n            System.out.println(in.nextInt() + in.nextInt());\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2717_45__1_2769_6", "golden_code": "import java.util.Scanner;\nimport java.util.concurrent.atomic.AtomicReference;\npublic class Main {\n    static String getNewS1S2(AtomicReference<String> s1,AtomicReference<String> s2){\n        String S12=\"\";\n        for(int i =0;i<s1.get().length();i++)\n            S12+= s2.get().substring(i,i+1) + s1.get().substring(i,i+1);\n        s1.set(S12.substring(0,s1.get().length()));\n        s2.set(S12.substring(s1.get().length(),s1.get().length()*2));\n        return S12;\n    }\n    public static void main(String[] args) {\n            Scanner sc = new Scanner(System.in);\n            int n;\n            while((n=sc.nextInt()) != 0){\n                sc.nextLine();\n                AtomicReference<String> s1 =new AtomicReference<String>();\n                AtomicReference<String> s2 =new AtomicReference<String>();\n                AtomicReference<String> s =new AtomicReference<String>();\n                s1.set(sc.nextLine());\n                s2.set(sc.nextLine());\n                s.set(sc.nextLine());\n                int i;\n                for(i=1;i<=50;i++){\n                    String s12 = getNewS1S2(s1,s2);\n                    if (s.get().equals(s12)){\n                        System.out.println(i);\n                        break;\n                    }\n                }\n                if (i > 50)\n                    System.out.println(\"-1\");\n            }\n            sc.close();\n    }\n}\n", "generated_code": "\nimport java.awt.Point;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.InputMismatchException;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.Scanner;\nimport java.util.Stack;\nimport javax.swing.text.Position;\n\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(System.in);\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        //FastScanner in = new FastScanner(inputStream);\n        PrintWriter out;\n        out = new PrintWriter(outputStream);\n        StringBuilder sb = new StringBuilder();\n\n        long[] fib = Fib(50);\n        int t = in.nextInt();\n        for (int ii = 0; ii < t; ii++) {\n            int k = in.nextInt();\n            in.nextLine();\n            String str = in.nextLine();\n            if (str.length() == 1) {\n                for(int i=0; i<k;i++){\n                    sb.append(str);\n                }\n            } else {\n                StringBuilder stringBuilder = new StringBuilder(str.substring(1, str.length() - 1));\n\n                str = str + stringBuilder.reverse();\n                //System.err.println(str);\n                int fibIndex = 1;\n                int sum = 1;\n                int start = 0;\n                for (int i = 0; i < k; i++) {\n                    long index = fib[fibIndex] + start;\n                    index %= str.length();\n                    index--;\n                    index += str.length();\n                    index %= str.length();\n                    if (str.charAt((int) index) == '-') {\n                        fibIndex = 1;\n                        start = (int) index + 1;\n                        i--;\n                    } else {\n                        fibIndex++;\n                        sb.append(str.charAt((int) index));\n                    }\n                }\n            }\n            sb.append(\"\\n\");\n        }\n\n        out.println(sb.toString().trim());\n        out.close();\n    }\n\n    static BigInteger[] Dp2Combination(int N) {\n        int i, j;\n        BigInteger[] Combination = new BigInteger[N + 1];\n        for (i = 0; i <= N/**/ / 2; i++) {\n//            for (j = i; j >= 0; j--) {\n//                if (j == 0 || j == i) {\n//                    Combination[ j] = 1;\n//                } else {\n//                    Combination[ j] = Combination[ j] + Combination[ j - 1];\n//                }\n//            }\n            Combination[i] = Algorithm.C(new BigInteger(String.format(\"%d\", N)), new BigInteger(String.format(\"%d\", i)));\n        }\n        return Combination;\n    }\n\n    private static long[] Fib(int i) {\n        long[] a = new long[i];\n        a[0] = a[1] = 1;\n        for (int j = 2; j < i; j++) {\n            a[j] = a[j - 1] + a[j - 2];\n        }\n        return a;\n    }\n\n    static class Algorithm {\n\n        static class MyString {\n\n            static int NumberOfIterations(String str, String p) {\n                int sum = 0;\n\n                int index = 0;\n                while (true) {\n                    int temp = str.substring(index).indexOf(p);\n                    if (temp >= 0) {\n                        index += (temp + p.length());\n                        sum++;\n                    } else {\n                        break;\n                    }\n                }\n\n                return sum;\n            }\n        }\n\n        static HashSet<Integer> NumbersFrom(String digitsString) {\n            int[] digits = new int[10];\n            for (int i = digitsString.length() - 1; i >= 0; i--) {\n                if (digitsString.charAt(i) >= '0' && digitsString.charAt(i) <= '9') {\n                    digits[digitsString.charAt(i) - '0']++;\n                }\n            }\n            return NumbersFrom(digits);\n        }\n\n        static HashSet<Integer> NumbersFrom(int[] digits) {\n            int maxDigit = 0;\n            for (int i = 0; i < digits.length; i++) {\n                maxDigit += digits[i];\n            }\n            return NumbersFrom(digits, maxDigit);\n        }\n\n        static HashSet<Integer> NumbersFrom(int[] digits, int maxDigit) {\n            ArrayList<Integer> list = new ArrayList<Integer>();\n            for (int i = 0; i < digits.length; i++) {\n                if (digits[i] > 0) {\n                    list.add(i);\n                }\n            }\n            int t1 = 0;\n            int t2 = list.size();\n            for (int i = 1; i < maxDigit; i++) {\n                for (int j = t1; j < t2; j++) {\n                    int number = list.get(j);\n                    int temp = number;\n                    while (temp > 0) {\n                        digits[temp % 10]--;\n                        temp /= 10;\n                    }\n\n                    for (int k = 0; k < 10; k++) {\n                        if (digits[k] > 0) {\n                            list.add(number * 10 + k);\n                        }\n                    }\n                    while (number > 0) {\n                        digits[number % 10]++;\n                        number /= 10;\n                    }\n                }\n                t1 = t2;\n                t2 = list.size();\n            }\n            HashSet<Integer> set = new HashSet<Integer>(list);\n\n            return set;\n        }\n\n        static long Exchange(long price, long[] array, boolean remainderAllowed) {\n            return Exchange(price, array, true, remainderAllowed);\n        }\n\n        static long Exchange(long price, long[] array, boolean sorted, boolean remainderAllowed) {\n            if (!sorted) {\n                Arrays.sort(array);\n            }\n            long coins = 0;\n            for (int i = array.length - 1; i >= 0 && price > 0; i--) {\n                price -= array[i];\n                coins++;\n            }\n            if (remainderAllowed) {\n                if (price <= 0) {\n                    return coins;\n                } else {\n                    return 0;\n                }\n            } else {\n                if (price == 0) {\n                    return coins;\n                } else {\n                    return 0;\n                }\n            }\n        }\n\n        static long Exchange(long price, int[] array, boolean remainderAllowed) {\n            return Exchange(price, array, true, remainderAllowed);\n        }\n\n        static long Exchange(long price, int[] array, boolean sorted, boolean remainderAllowed) {\n            if (!sorted) {\n                Arrays.sort(array);\n            }\n            long coins = 0;\n            for (int i = array.length - 1; i >= 0 && price > 0; i--) {\n                price -= array[i];\n                coins++;\n            }\n            if (remainderAllowed) {\n                if (price <= 0) {\n                    return coins;\n                } else {\n                    return 0;\n                }\n            } else {\n                if (price == 0) {\n                    return coins;\n                } else {\n                    return 0;\n                }\n            }\n        }\n\n        static long C(int n, int r) {\n            if (n == 0) {\n                return 1;\n            }\n            if (r == 0) {\n                return 1;\n            }\n            if (n == r) {\n                return 1;\n            }\n            if (r < n / 2) {\n                return C(n, n - r);\n            }\n            return ZarbeMotevali(r + 1, n) / Fact(n - r);\n        }\n\n        static BigInteger C(BigInteger n, BigInteger r) {\n            if (n.compareTo(new BigInteger(\"0\")) == 0) {\n                return new BigInteger(\"1\");\n            }\n            if (r.compareTo(new BigInteger(\"0\")) == 0) {\n                return new BigInteger(\"1\");\n            }\n            if (n.compareTo(r) == 0) {\n                return new BigInteger(\"1\");\n            }\n            if (r.compareTo(n.divide(new BigInteger(\"2\"))) < 0) {\n                return C(n, n.add(r.multiply(new BigInteger(\"-1\"))));\n            }\n            return ZarbeMotevali(r.add(new BigInteger(\"1\")), n).divide(ZarbeMotevali(new BigInteger(\"1\"), n.add(r.multiply(new BigInteger(\"-1\")))));\n        }\n\n        private static long ZarbeMotevali(int first, int end) {\n            long answer = 1;\n            for (long i = first; i <= end; i++) {\n                answer *= i;\n            }\n            return answer;\n        }\n\n        private static BigInteger ZarbeMotevali(BigInteger first, BigInteger end) {\n            BigInteger answer = new BigInteger(\"1\");\n            for (BigInteger i = new BigInteger(first.toString()); i.compareTo(end) <= 0; i = i.add(new BigInteger(\"1\"))) {\n                answer = answer.multiply(i);\n            }\n            return answer;\n        }\n\n        private static long Fact(int n) {\n            return ZarbeMotevali(2, n);\n        }\n\n        static int GCD(int m, int n) {\n            if (n > m) {\n                return GCD(n, m);\n            }\n            if (m % n == 0) {\n                return n;\n            }\n            return GCD(n, m % n);\n        }\n\n        static long GCD(long m, long n) {\n            if (n > m) {\n                return GCD(n, m);\n            }\n            if (m % n == 0) {\n                return n;\n            }\n            return GCD(n, m % n);\n        }\n\n        static long LCM(long m, long n) {\n            return (m * n) / GCD(m, n);\n        }\n\n        static int LCM(int m, int n) {\n            return (m * n) / GCD(m, n);\n        }\n\n        static boolean IsPrime(long a) {\n            if (a < 2) {\n                return false;\n            }\n            if (a > 2 && a % 2 == 0) {\n                return false;\n            }\n            long temp = (long) Math.sqrt(a);\n            for (long i = 3; i <= temp; i += 2) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        static int BinarySearch(int[] a, int start, int end, int value) {\n            if (start == end) {\n                return -1; // invalid index\n            }\n            int mid = (end + start) / 2;\n            if (a[mid] == value) {\n                return mid;\n            }\n            if (a[mid] < value) {\n                return BinarySearch(a, mid + 1, end, value);\n            }\n            return BinarySearch(a, start, mid, value);\n        }\n    }\n}\n\nclass MyPoint {\n\n    double x;\n    double y;\n\n    public MyPoint(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public double distance(MyPoint point) {\n        return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2));\n    }\n\n    public void change(double newX, double newY) {\n        this.x = newX;\n        this.y = newY;\n    }\n}\n\nclass Student {\n\n    public Student(int id) {\n        this.id = id;\n    }\n    int id;\n    Student previous;\n    Student next;\n}\n\nclass Graph {\n\n    private int[][] matrix;\n\n    public Graph(int[][] matrix) {\n        this.matrix = matrix;\n    }\n\n    class SortestPath {\n\n        private int minDistance(long[] dist, boolean[] sptSet) {\n            // Initialize min value\n            long min = Long.MAX_VALUE;\n            int minIndex = 0;\n\n            for (int i = 0; i < matrix.length; i++) {\n                if (sptSet[i] == false && dist[i] <= min) {\n                    min = dist[i];\n                    minIndex = i;\n                }\n            }\n\n            return minIndex;\n        }\n\n        public long[] Dijkstra(int src) {\n            int n = matrix.length;\n            long[] dist = new long[n];\n\n            boolean[] sptSet = new boolean[n];\n            Arrays.fill(dist, Long.MAX_VALUE);\n            Arrays.fill(sptSet, false);\n\n            dist[src] = 0;\n\n            for (int count = 0; count < n - 1; count++) {\n                int u = minDistance(dist, sptSet);\n\n                sptSet[u] = true;\n\n                for (int i = 0; i < n; i++) {\n                    if (!sptSet[i] && matrix[u][i] != 0 && dist[u] != Long.MAX_VALUE\n                            && dist[u] + matrix[u][i] < dist[i]) {\n                        dist[i] = dist[u] + matrix[u][i];\n                    }\n                }\n            }\n            return dist;\n        }\n    }\n\n    class MST {\n\n        class Prim {\n\n            private boolean[] Visited;\n            //private \n        }\n    }\n\n    class DFS {\n\n        private Stack<Integer> DFS;\n        private boolean[] visited;\n\n        public DFS() {\n            this.DFS = new Stack<Integer>();\n            this.visited = new boolean[matrix.length];\n        }\n\n        public Stack<Integer> getDFS() {\n            this.DFS(0);\n            return DFS;\n        }\n\n        public Stack<Integer> getDFS(int vertex) {\n            this.DFS.clear();\n            this.DFS(vertex);\n            return this.DFS;\n        }\n\n        private void DFS(int vertrx) {\n            this.DFS.push(vertrx);\n            this.visited[vertrx] = true;\n\n            for (int i = 0; i < matrix[vertrx].length; i++) {\n                if (matrix[vertrx][i] != 0 && !this.visited[i] && vertrx != i) {\n                    this.DFS(i);\n                }\n            }\n        }\n    }\n}\n\nclass ArithmeticProgression {\n\n    long d;\n    long a1;\n\n    public ArithmeticProgression(long a1, long d) {\n        this.d = d;\n        this.a1 = a1;\n    }\n\n    public ArithmeticProgression(long a, long index, long d) {\n        this.d = d;\n        this.a1 = a - ((index - 1) * d);\n    }\n\n    long Term(long n) {\n        return this.a1 + ((n - 1) * this.d);\n    }\n\n    long S(long n) {\n        return S(1, n);\n    }\n\n    long S(long m, long n) {\n        return ((n - m + 1) * (Term(m) + Term(n))) / 2;\n    }\n}\n\nclass FastScanner {\n\n    private InputStream stream;\n    private byte[] buffer = new byte[1024];\n    private int curChar;\n    private int numChars;\n\n    public FastScanner(InputStream stream) {\n        this.stream = stream;\n    }\n\n    int read() {\n        if (numChars == -1) {\n            throw new InputMismatchException();\n        }\n        if (curChar >= numChars) {\n            curChar = 0;\n            try {\n                numChars = stream.read(buffer);\n            } catch (IOException e) {\n                throw new InputMismatchException();\n            }\n            if (numChars <= 0) {\n                return -1;\n            }\n        }\n        return buffer[curChar++];\n    }\n\n    boolean isWhiteSpaceChar(int c) {\n        return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n    }\n\n    boolean isEndline(int c) {\n        return c == '\\n' || c == '\\r' || c == -1;\n    }\n\n    int nextInt() {\n        return Integer.parseInt(next());\n    }\n\n    long nextLong() {\n        return Long.parseLong(next());\n    }\n\n    float nextFloat() {\n        return Float.parseFloat(next());\n    }\n\n    double nextDouble() {\n        return Double.parseDouble(next());\n    }\n\n    String next() {\n        int c = read();\n        while (isWhiteSpaceChar(c)) {\n            c = read();\n        }\n        StringBuilder res = new StringBuilder();\n        do {\n            res.appendCodePoint(c);\n            c = read();\n        } while (!isWhiteSpaceChar(c));\n        return res.toString();\n    }\n\n    String nextLine() {\n        int c = read();\n        while (isEndline(c)) {\n            c = read();\n        }\n        StringBuilder res = new StringBuilder();\n        do {\n            res.appendCodePoint(c);\n            c = read();\n        } while (!isEndline(c));\n        return res.toString();\n    }\n}", "score": 0.0}
{"id": "SHARE_1_106019_1__1_2543_24", "golden_code": "import java.util.Scanner;\nimport java.lang.StringBuffer;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scan=new Scanner(System.in);\n        while(scan.hasNextLine())\n        {\n            StringBuffer str = new StringBuffer(scan.nextLine());\n            int number =str.length();\n            \n            for(int i =1;i<str.length()-1;i++)\n            {\n                int j =1;\n                while((i-j >= 0) && (i+j <= str.length()-1))\n                {\n                    if(str.charAt(i-j)==str.charAt(i+j))\n                    {\n                        j++;\n                        number++;\n                    }\n                    else\n                        break;\n                }\n            }\n            int a,b;\n            for(double i = 0.5; i<str.length()-1;i++)\n            {\n                a = (int)Math.floor(i);\n                b = (int)Math.ceil(i);\n                int j=0;\n                while((a-j >= 0) && (b+j <= str.length()-1))\n                {\n                    if(str.charAt(a-j)==str.charAt(b+j))\n                    {\n                        j++;\n                        number++;\n                    }\n                    else\n                        break;\n                }\n            }\n            System.out.println(number);\n        }\n    }\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (true) {\n            String str = in.nextLine();\n            if (\"*\".equals(str)) {\n                System.exit(0);\n            }\n            boolean shart = true;\n            str = str.toLowerCase();\n            char[] arr = str.toCharArray();\n            for (int i = 0; i < str.length(); i++) {\n                if (arr[i] == ' ') {\n                    if (arr[i + 1] != arr[0]) {\n                        shart &= false;\n                    }\n                }\n            }\n            if (shart) {\n                System.out.println(\"Y\");\n            } else {\n                System.out.println(\"N\");\n            }\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_92__1_1001_156", "golden_code": "import java.io.StreamTokenizer;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\tScanner sc=new Scanner(System.in);\n\tint a;\n\twhile ( (a=sc.nextInt())!=StreamTokenizer.TT_EOF){\n\t\tint b=sc.nextInt();\n\t\tSystem.out.println(a+b);\n\t}\n\t\t\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        while (true)\n        {\n            boolean b = in.hasNext();\n            if (b == false)\n                break;\n            long x = in.nextLong();\n            long y = in.nextLong();\n            System.out.println((x + y));\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_204__1_1001_439", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s=new Scanner(System.in);\n        int a,b;\n        while(s.hasNext()){\n            a=s.nextInt();\n            b=s.nextInt();\n            System.out.println(a+b);\n        }\n    }\n\n}\n", "generated_code": "import java.io.*;\nimport java.util.*;\npublic class Main\n{\n            public static void main(String args[])\n            {\n                    Scanner cin=new Scanner(System.in);\n            \t\n            \twhile(cin.hasNext()){\n                    int a=cin.nextInt(),b=cin.nextInt();\n                    System.out.println(a+b);\n                    \n            \t}\n            }\n}", "score": 1.0}
{"id": "SHARE_1_2539_9__1_1870_27", "golden_code": "import java.util.*;\n\nclass Main {\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint m = scan.nextInt();\n\t\tint n = scan.nextInt();\n\t\twhile (m != 0 && n != 0) {\n\t\t\tint[] a = new int[n];\n\t\t\tint[] b = new int[m + 1];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\ta[i] = scan.nextInt();\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tfor (int j = 0; j < n; j++)\n\t\t\t\t\tb[Math.abs(a[i] - a[j])] = 1;\n\t\t\tif (check(b))\n\t\t\t\tSystem.out.println(\"Y\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"N\");\n\t\t\tm = scan.nextInt();\n\t\t\tn = scan.nextInt();\n\n\t\t}\n\n\t}\n\n\tpublic static boolean check(int[] a) {\n\t\tfor (int i = 0; i < a.length; i++)\n\t\t\tif (a[i] == 0)\n\t\t\t\treturn false;\n\n\t\treturn true;\n\t}\n}", "generated_code": "import java.util.*;\n\n\npublic class Main{\n\n\n\tpublic static void main(String[] args){\n\t\tScanner input=new Scanner(System.in);  \n\n\t\tint t=input.nextInt();\n\t\tint x,y;\n\t\twhile(t-->0){\n\t\t\tx=input.nextInt();\n\t\t\ty=input.nextInt();\n\t\t\t\n\t\t\tif(x<y)\n\t\t\t\tSystem.out.println(\"NO BRAINS\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"MMM BRAINS\");\n\t\t}\n\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2747_1__1_2337_6", "golden_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n/**\n * What The Code?!\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) throws IOException {\n        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(bf.readLine());\n        for(int i=0;i<n;i++){\n            String pass = bf.readLine();\n            boolean[] type=new boolean[4];\n            for(int j=0;j<4;j++)\n                type[j]=false;\n            for(int j=0;j<Math.min(50,pass.length());j++){\n                char c= pass.charAt(j);\n                if(Character.isUpperCase(c))\n                    type[0]=true;\n                else if(Character.isLowerCase(c))\n                    type[1]=true;\n                else if(c>='0' && c<='9' )\n                    type[2]=true;\n                else if(c=='!' || c=='@'|| c=='#'|| c=='$'|| c=='%'|| c=='^'|| c=='&'|| c=='*'|| c=='('|| c==')'){\n                    type[3]=true;\n                }\n            }\n            int k=0;\n            for(int j=0;j<4;j++)\n                if(type[j])\n                    k++;\n            if(k==1)\n                System.out.println(\"very bad\");\n            else if(k==2)\n                System.out.println(\"bad\");\n            else if(k==3)\n                System.out.println(\"good\");\n            else if(k==4)\n                System.out.println(\"overkill\");\n        }\n    }\n}\n", "generated_code": "import java.util.*;\n\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner s = new Scanner(System.in);\n\t\tlbl: while(s.hasNext()){\n\t\t\tint n = s.nextInt();\n\t\t\tint res=1;\n\t\t\tint w = 1;\n\t\t\tfor(;w<=n;w++){\n\t\t\t\tres = (2*res)%n;\n\t\t\t\tif(res == 1){\n\t\t\t\t\tSystem.out.println(\"2^\"+w+\" mod \"+n+\" = 1\");\n\t\t\t\t\tcontinue lbl;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(\"2^? mod \"+n+\" = 1\");\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1001_422__1_1001_241", "golden_code": "import java.util.Scanner;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner input = new Scanner(System.in);\n\t\twhile(input.hasNextInt())\n\t\t{\n\t\t\tint a = input.nextInt();\n\t\t\tint b = input.nextInt();\n\t\t\tint c = (a+b) ;     \n\t\t\tSystem.out.println(c);\n\t\t}\n    }\n}", "generated_code": "import java.util.*;\n\npublic class Main{\n\tpublic static void main(String args[]){\n\t\tScanner input = new Scanner(System.in);\n\t\twhile(input.hasNext()){\n\t\t\tint a = input.nextInt();\n\t\t\tint b = input.nextInt();\n\t\t\tSystem.out.println(a + b);\n\t\t}\n\n\t}\n\n\n}", "score": 1.0}
{"id": "SHARE_1_2358_8__1_2620_1", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args){\n        Scanner in=new Scanner(System.in);\n        while(in.hasNext())\n        {\n            float c,b,x,y;\n            c=in.nextFloat();\n            b=in.nextFloat();\n            x=in.nextFloat();\n            y=in.nextFloat();\n            float t=c,a=b,r=y,R=x;\n            if(c<b+0.01)\n            {\n                t=b;\n                a=c;\n            }\n            if(x<y+0.01)\n            {\n                r=x;\n                R=y;\n            }\n            if(a<2*R+0.01)\n                System.out.println(\"No\");\n            else\n                if(2 * R + r + 0.01>t)\n                    System.out.println(\"No\");\n                else\n                    System.out.println(\"Yes\");\n        }\n    }\n}\n", "generated_code": "import java.io.BufferedReader;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n/**\n * Created with IntelliJ IDEA.\n * User: ali\n * Date: 10/21/13\n * Time: 4:28 PM\n * To change this template use File | Settings | File Templates.\n */\npublic class Main\n{\n\tprivate static final double eps = 1e-6;\n\tpublic static void main(String [] args)\n\t{\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext())\n\t\t{\n\t\t\tint at = in.nextInt();\n\t\t\tdouble [] x = new double[at];\n\t\t\tdouble [] y = new double[at];\n\t\t\tfor(int i = 0 ; i < at ; i++)\n\t\t\t{\n\t\t\t\tx[i] = in.nextDouble();\n\t\t\t\ty[i] = in.nextDouble();\n\t\t\t}\n\t\t\tint res = 1;\n\t\t\tfor(int i = 0 ; i < at ; i++)\n\t\t\t\tfor(int j = i + 1 ; j < at ; j++)\n\t\t\t\t{\n\t\t\t\t\tdouble [][] centers = getCenters(x[i], y[i], x[j], y[j], 2.5);\n\t\t\t\t\tif(centers.length == 0)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tfor(double [] center : centers)\n\t\t\t\t\t{\n\t\t\t\t\t\tint calc = 2;\n\t\t\t\t\t\tfor(int k = 0 ; k < at ; k++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(k == i || k == j)\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\tdouble dis = (x[k]-center[0])*(x[k]-center[0]) + (y[k]-center[1])*(y[k]-center[1]);\n\t\t\t\t\t\t\tif(dis + eps <= 6.25)\n\t\t\t\t\t\t\t\tcalc++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tres = Math.max(res, calc);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\tSystem.out.println(res);\n\t\t}\n\n\t}\n\n\tprivate static double[][] getCenters(double a, double b, double c, double d, double r)\n\t{\n\t\tdouble chordLen = Math.hypot(a-c, b-d);\n\t\tif(chordLen > 2*r)\n\t\t\treturn new double[0][];\n\n\n\t\tdouble tanTheta = Math.sqrt(r*r*4 - chordLen*chordLen)/chordLen;\n\t\tdouble run = (a-c)/2;\n\t\tdouble rise = (b-d)/2;\n\t\tdouble [][] res = new double[2][2];\n\t\tres[0][0] = (a+c)/2 + rise * tanTheta;\n\t\tres[0][1] = (b+d)/2 + -run * tanTheta;\n\t\tres[1][0] = (a+c)/2 + -rise * tanTheta;\n\t\tres[1][1] = (b+d)/2 + run * tanTheta;\n\n\t\treturn res;\n\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1034_15__1_1632_2", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int N, length, num, i, j, k, cntr;\n        for ( N = input.nextInt(); N != 0; N--){\n            \n            length = input.nextInt();\n            num = input.nextInt();\n            String str[] = new String[num];\n            for( i = 0; i < num; i++)\n                str[i] = input.next();\n            \n            int sort[] = new int[num];\n            for( i = 0; i < num; i++){\n                for( j = cntr = 0; j < length; j++)\n                    for( k = j + 1; k < length; k++)\n                        if(str[i].charAt(j) > str[i].charAt(k))\n                            cntr++;\n                sort[i] = cntr;\n            }\n            \n            for( i = 0; i < num; i++)\n                for( j = i + 1; j < num; j++)\n                    if (sort[i] > sort[j]){\n                        int tmp = sort[i];\n                        sort[i] = sort[j];\n                        sort[j] = tmp;\n                        String strTmp = str[i];\n                        str[i] = str[j];\n                        str[j] = strTmp;\n                    }\n            \n            for( i = 0; i < num; i++)\n                System.out.println(str[i]);\n            \n            if ( N > 1 )\n                System.out.println(\"\");\n        }\n    }  \n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint ts = input.nextInt();\n\t\tinput.nextLine();\n\t\tfor(int t = 0;t<ts;t++){\n\t\t\tString s = input.nextLine();\n\t\t\tString[] ss = s.split(\"[\\\\s]+\");\n\t\t\tlong a = 0;\n\t\t\tboolean first = true;\n\t\t\tfor(int i = 0;i<ss.length;i++){\n\t\t\t\tif (ss[i].length()>0){\n\t\t\t\t\tif (first){\n\t\t\t\t\t\ta = Integer.parseInt(ss[i]);\n\t\t\t\t\t\tfirst = false;\n\t\t\t\t\t}else{\n\t\t\t\t\t\ta = lcm (a,Integer.parseInt(ss[i]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(a);\n\t\t}\n\t}\n\t\n\tpublic static long lcm(long a, long b){\n\t\treturn (a*b)/gcd(a, b);\n\t}\n\t\n\tpublic static long gcd(long n ,long m){\n\t\tlong temp;\n\t\twhile ((temp = n%m)!=0){\n\t\t\tn = m;\n\t\t\tm = temp;\n\t\t}\n\t\treturn m;\n\t}\n\t\n}\n", "score": 0.0}
{"id": "SHARE_1_2770_15__1_2770_17", "golden_code": "\nimport java.util.Scanner;\n\n\n\n \npublic class Main {\n   \n\t\n\tpublic static void main(String[] args){\n\t\t\n\t\tint test_case;\n\t\tint numofmap;\n\t\tint numofsity;\n\t\t\n\t\tScanner scan = new Scanner(System.in);\t\n\t\t\n\t\ttest_case = Integer.parseInt(scan.nextLine());\n\t\t\n\tfor(int f=0;f<test_case;f++){\n\t\t\n\t\tString h=scan.nextLine();\n\t\tnumofmap = Integer.parseInt(h.split(\" \")[0]);\n\t\tnumofsity =Integer.parseInt(h.split(\" \")[1]);\n\t\t\n\t\t\n\t\t int[][] k=new int[numofsity][numofsity];\n\t\t \n\t\t for(int a=0;a<numofmap;a++){\n\t\t\n\t\t String s = scan.nextLine();\n\t\t int p=Integer.parseInt(s.split(\" \")[1]);\n\t\t for(int i = 0;i<p;i++){\n\t\t\t String q=scan.nextLine();\n\n\t\t\t int i1=Integer.parseInt(q.split(\" \")[0]);\n\t\t\t int i2=Integer.parseInt(q.split(\" \")[1]);\n\t\t\t k[i1][i2]=1;\n\t\t\t k[i2][i1]=1;\n\t\t }\n\t\t }\n\t\t int ans=0;\n\t\tfor (int i = 0; i < k.length; i++) {\n\t\t\tfor (int j = 0; j < k.length; j++) {\n\t\t\t\tif(k[i][j]==1)\n\t\t\t\t\tans++;\n\t\t\t}\n\t\t}\n\t\tans=ans/2;\n\t\t \n\t\t System.out.println(ans);\n\t\t \n\t\t \n\t\t\n\t\t\n\t}\n\t\t\t\n\t}\n    \n}", "generated_code": "\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner s=new Scanner(System.in);\n        int n=s.nextInt();\n        for(int i=0;i<n;i++){\n            int cnt=0;\n            int map=s.nextInt();\n            int city=s.nextInt();\n            int mat[][]=new int [city][city];\n            for(int j=0;j<map;j++){\n                s.next();\n                int l=s.nextInt();\n                    for(int k=0;k<l;k++){\n                        int a=s.nextInt();\n                        int b=s.nextInt();\n                        if(mat[a][b]==0){\n                            mat[a][b]=1;\n                            mat[b][a]=1;\n                            cnt++;\n                        }\n                    }\n            }\n            System.out.println(cnt);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1006_59__1_1006_115", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner input = new Scanner(System.in);\n\t\tdouble cardsLength = input.nextDouble();\n\t\t\n\t\twhile ( cardsLength != 0.00 ) {\n\t\t\t\n\t\t\tdouble sum = 0.00;\n\t\t\tint count = 0;\n\t\t\t\n\t\t\tfor (int i = 2; sum < cardsLength ; i++) {\n\t\t\t\t\n\t\t\t\tsum += (1.0 / (double) i);\n\t\t\t\tcount++;\n\t\t\t} \n\t\t\t\n\t\t\tSystem.out.println(count + \" card(s)\");\n\t\t\t\n\t\t\tcardsLength = input.nextDouble();\n\t\t}\n\t}\n}\n", "generated_code": "/*1032 shareCode*/\n// accepted\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args){\n        Scanner cin=new Scanner(System.in);\n        while(true){\n            float c=cin.nextFloat();\n            if(c==0f)\n                break;\n            float sum=0;\n            for(int i=1;i<=280;i++){\n                sum+=1f/(i+1);\n                if(sum>=c){\n                    System.out.println(\"\"+i+\" card(s)\");\n                    break;\n                }\n            }\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_325__1_1001_101", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        int a,b;\n        Scanner input=new Scanner(System.in);\n        while(input.hasNextInt()) {\n            a = input.nextInt();\n            b = input.nextInt();\n            System.out.println(a + b);\n        }\n\n    }\n}\n", "generated_code": "import java.util.*;\nclass Main\n{\n    public static void main(String []args)\n    {\n        Scanner sc = new Scanner(System.in);\n        try\n        {\n        while(true)\n        {\n            System.out.println(sc.nextInt() + sc.nextInt());\n        }\n        }catch(Exception e){}\n    }    \n}", "score": 1.0}
{"id": "SHARE_1_2733_13__1_2791_8", "golden_code": "\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.InputMismatchException;\nimport java.util.Map;\nimport java.util.Scanner;\n\n\npublic class Main{\n\n    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(System.in);\n        //FastScanner in = new FastScanner((InputStream) System.in);\n        int t=in.nextInt();\n        StringBuilder sb=new StringBuilder();\n        for(int kl=0 ; kl<t ; kl++){\n            int n=in.nextInt();\n            int[] a=new int[n];\n            int last=0;\n            StringBuilder lb=new StringBuilder();\n            for(int i=0 ; i<a.length ; i++){\n                a[i]=in.nextInt();\n                for(int j=a[i]-last ; j>0 ; j--){\n                    lb.append(\"(\");\n                }\n                lb.append(\")\");\n                last=a[i];\n            }\n            String line=lb.toString();\n            StringBuilder javab=new StringBuilder();\n            for(int i=0 ; i<line.length() ; i++){\n                if(line.charAt(i)==')'){\n                    int sum=0;\n                    int baste=1;\n                    for(int j=i-1 ; j>=0 ; j--){\n                        if(line.charAt(j)==')'){\n                            baste++;\n                        }\n                        if(line.charAt(j)=='('){\n                            baste--;\n                            sum++;\n                            if(baste==0){\n                                break;\n                            }\n                        }\n                    }\n                    javab.append(sum).append(\" \");\n                }\n            }\n            //System.out.println(javab);\n            sb.append(javab.toString().trim()).append(\"\\n\");\n        }\n        System.out.println(sb.toString().trim());\n    }\n}\n\nclass FastScanner {\n\n    private InputStream stream;\n    private byte[] buffer = new byte[1024];\n    private int curChar;\n    private int numChars;\n\n    public FastScanner(InputStream stream) {\n        this.stream = stream;\n    }\n\n    int read() {\n        if (numChars == -1) {\n            throw new InputMismatchException();\n        }\n        if (curChar >= numChars) {\n            curChar = 0;\n            try {\n                numChars = stream.read(buffer);\n            } catch (IOException e) {\n                throw new InputMismatchException();\n            }\n            if (numChars <= 0) {\n                return -1;\n            }\n        }\n        return buffer[curChar++];\n    }\n\n    boolean isWhiteSpaceChar(int c) {\n        return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n    }\n\n    boolean isEndline(int c) {\n        return c == '\\n' || c == '\\r' || c == -1;\n    }\n\n    int nextInt() {\n        return Integer.parseInt(next());\n    }\n\n    long nextLong() {\n        return Long.parseLong(next());\n    }\n\n    double nextDouble() {\n        return Double.parseDouble(next());\n    }\n\n    String next() {\n        int c = read();\n        while (isWhiteSpaceChar(c)) {\n            c = read();\n        }\n        StringBuilder res = new StringBuilder();\n        do {\n            res.appendCodePoint(c);\n            c = read();\n        } while (!isWhiteSpaceChar(c));\n        return res.toString();\n    }\n\n    String nextLine() {\n        int c = read();\n        while (isEndline(c)) {\n            c = read();\n        }\n        StringBuilder res = new StringBuilder();\n        do {\n            res.appendCodePoint(c);\n            c = read();\n        } while (!isEndline(c));\n        return res.toString();\n    }\n}", "generated_code": "import java.util.Scanner;\n\n/**\n *\n * @author Soroor\n */\npublic class Main {\n\n    \n    public static void main(String[] args) {\n        \n        Scanner input = new Scanner(System.in);\n        while(input.hasNextLine())\n        {\n            String [] s=input.nextLine().split(\" \");\n            int x1, x2, y1, y2, A, B;\n            x1=Integer.parseInt( s[0]);\n            x2=Integer.parseInt( s[1]);\n            y1=Integer.parseInt( s[2]);\n            y2=Integer.parseInt( s[3]);\n            \n            if(x1==0 & x2==0 & y1==0 & y2==0)\n                break;\n            else\n            {\n                A=y2-x1;\n                B=y1-x2;\n                System.out.println(B+\" \"+A);\n            }\n            \n        }\n        \n    }\n    \n}", "score": 0.0}
{"id": "SHARE_1_2001_10__1_1656_50", "golden_code": "import java.util.Scanner;\nimport java.util.TreeSet;\n\npublic class Main{\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\twhile (true){\n\t\t\tint n = scanner.nextInt();\n\t\t\tif (n==0)return;\n\t\t\tTreeSet<Long> a = new TreeSet<Long>();\n\t\t\tfor (int i = 0;i<n;i++){\n\t\t\t\ta.add(scanner.nextLong());\n\t\t\t}\n\t\t\tint j = 0;\n\t\t\tfor (long i : a){\n\t\t\t\tSystem.out.print((++j<a.size())?i+\" \":i);\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        String s=in.nextLine();\n        while(!s.equals(\"-1\")){\n            String []s1=s.split(\" \");\n            int a[]=new int[s1.length];\n            for (int i = 0; i < a.length; i++) {\n                a[i]=Integer.valueOf(s1[i]);\n            }\n            int c=0;\n            for (int i = 0; i < a.length; i++) {\n                for (int j = 0; j < a.length; j++) {\n                    if(a[i]!=0&&a[i]==2*a[j])\n                        c++;\n                }\n            }\n            System.out.println(c);\n            s=in.nextLine();\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1091_11__1_1820_7", "golden_code": "\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int n = input.nextInt();\n        input.nextLine();\n        for (int i = 0; i < n; i++) {\n            String info = input.nextLine();\n            char[] p = new char[info.length()];\n            for (int j = 0; j < p.length; j++) \n                p[j] = info.charAt(j);\n            StringBuilder prot = new StringBuilder();\n            StringBuilder host = new StringBuilder();\n            StringBuilder port = new StringBuilder();\n            StringBuilder path = new StringBuilder();\n            int j = 0;\n            while (p[j] != ':') {\n                prot.append(p[j]);\n                j++;\n            }\n            while (p[j]==':')\n                j++;\n            j+=2;\n            if (p[j]!='/') {\n                while ((j < p.length) && (p[j] != ':' && p[j] != '/')) {\n                    host.append(p[j]);\n                    j++;\n                }\n            } else {\n                j++;\n                while (j < p.length) {\n                    path.append(p[j]);\n                    j++;\n                }\n            }\n            if (j != p.length) {\n                boolean dots = false;\n                if ((j < p.length) && (p[j] == ':')) {\n                    j++;\n                    dots = true;\n                }\n                if (dots)\n                    while ((j < p.length) && (p[j] != '/')) {\n                        port.append(p[j]);\n                        j++;\n                    }\n                if ((j < p.length) && (p[j] == '/')) {\n                    j++;\n                    while (j < p.length) {\n                        path.append(p[j]);\n                        j++;\n                    }\n                }\n            }\n            if (port.length() == 0)\n                port.append(\"<default>\");\n            if (path.length() == 0)\n                path.append(\"<default>\");\n            System.out.println(\"URL #\" + (i + 1));\n            System.out.println(\"Protocol = \" + prot);\n            System.out.println(\"Host     = \" + host);\n            System.out.println(\"Port     = \" + port);\n            System.out.println(\"Path     = \" + path);\n            System.out.println(\"\");\n        }\n    }\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (true) {\n            float s = in.nextFloat();\n            float w = in.nextFloat();\n            float st = in.nextFloat();\n            if (s == 0 & w == 0 & st == 0) {\n                break;\n            }\n            String sout = \"\";\n            if (s <= 4.5) {\n                if (w >= 150) {\n                    if (st >= 200) {\n                        sout += \"Wide Receiver\";\n                    }\n                }\n            }\n            if (s <= 6.0) {\n                if (w >= 300) {\n                    if (st >= 500) {\n                        if (!sout.equals(\"\")) {\n                            sout += \" \";\n                        }\n                        sout += \"Lineman\";\n                    }\n                }\n            }\n            if (s <= 5.0) {\n                if (w >= 200) {\n                    if (st >= 300) {\n                        if (!sout.equals(\"\")) {\n                            sout += \" \";\n                        }\n                        sout += \"Quarterback\";\n                    }\n                }\n            }\n            if (!sout.equals(\"\")) {\n                System.out.println(sout);\n            } else {\n                System.out.println(\"No positions\");\n            }\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_106020_52__1_106020_4", "golden_code": "import java.util.* ;\nimport java.lang.* ;\nclass Main\n{\n\tpublic static int T ( int n )\n\t{\n\t\tint sum=0 ; \n\t\tfor ( int i=0 ; i<=n ; i++ ) {\n\t\t\tsum += i ;\n\t\t}\n\t\treturn sum ;\n\t}\n\t\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner(System.in) ;\n\t\tint k = scan.nextInt() ;\n\t\tint N=0 ;\n\t\twhile ( k!=0 ) {\n\t\t\tN++ ;\n\t\t\tk-- ;\n\t\t\tint n = scan.nextInt() ;\n\t\t\tint sum=0 ;\n\t\t\tfor ( int i=1 ; i<=n ; i++ ) {\n\t\t\t\tsum += ( i * T(i+1) ) ;\n\t\t\t}\n\t\t\tSystem.out.println(N + \" \" + n + \" \" + sum) ;\n\t\t}\n\t}\n}", "generated_code": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.*;\nimport java.awt.*;\nimport java.math.*;\n\n@SuppressWarnings(\"unchecked\")\n\npublic class Main\n{\n    public static void main(String[] arqs) throws Exception\n    {\n        Scanner scan = new Scanner(System.in);\n\n        int MAX = 10000;\n        int[] T = new int[MAX];\n\n        for(int i = 0;i < MAX;i++)\n            T[i] = i*(i+1)/2;\n\n        int loop = 1;\n        int ca = scan.nextInt();\n\n        while (ca-- > 0)\n        {\n            int n = scan.nextInt();\n            int res = 0;\n            for(int i = 1;i <= n;i++)\n                res += i*T[i+1];\n            System.out.println(loop++ + \" \" + n + \" \" + res);\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_5_1023_4__1_1006_7", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tprivate static ArrayList<Member> collection = new ArrayList<Member>();\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner input = new Scanner(System.in);\n\t\t\n\t\tint numberOfMember = input.nextInt();\n\t\tArrayList<Number> l = full();\n\t\t\n\t\tfor (int i = 0; i < numberOfMember; i++) {\n\t\t\tMember mem = new Member(input.nextInt());\n\t\t\tprimes(mem);\n\t\t\tif(mem.number > 1000 && prime(mem.number) == 1)\n\t\t\t\tl.add(new Number(mem.number));\n\t\t\tcollection.add(mem);\n\t\t}\n\t\t\n\t\tint m = 0;\n\t\tfor (int i = 0; i < collection.size(); i++) {\n\t\t\tif(collection.get(i).number > m)\n\t\t\t\tm = collection.get(i).number;\n\t\t}\n\t\t\n\t\tBoolean flag = false;\n\t\tfor (int i = 0; i < l.size(); i++) {\n\t\t\tfor (int j = 0; j < collection.size(); j++) {\n\t\t\t\tif(collection.get(j).primes.contains(l.get(i).number)){\n\t\t\t\t\tl.get(i).count++;\n\t\t\t\t\tif(l.get(i).count >= 3){\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag)\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif(flag)\n\t\t\tSystem.out.println(\"infinity\");\n\t\telse{\n\t\t\tint max = 0;\n\t\t\tfor (int i = 0; i < l.size(); i++) {\n\t\t\t\tif(l.get(i).count > max)\n\t\t\t\t\tmax = l.get(i).count;\n\t\t\t}\n\t\t\tSystem.out.println(max);\n\t\t}\n\n\t\t\n\t\tinput.close();\n\t\t\n\t}\n\t\n\tstatic void primes(Member member){\n\t\t//double sq = Math.sqrt(member.number);\n\t\tint num = member.number;\n\t\tfor (int i = 2; i <= member.number; i++) {\n\t\t\t//System.out.println(i);\n\t\t\tif(num % i == 0){\n\t\t\t\tmember.primes.add(i);\n\t\t\t\tnum /= i;\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t}\n\t\t\n\tstatic int prime(int n)\n\t{\n\tint i,t=1;\n\t\tfor(i=2;(i<=n/2)&& t==1;i++)\n\t\t\tif(n%i==0)\n\t\t\t\tt=0;\n\t return t;\n\t}\n\t\n\tstatic ArrayList<Number> full(){\n\t\tArrayList<Number> list = new ArrayList<Number>();\n\t\tlist.add(new Number(2));\n\t\tlist.add(new Number(3));\n\t\tlist.add(new Number(5));\n\t\tlist.add(new Number(7));\n\t\tlist.add(new Number(11));\n\t\tlist.add(new Number(13));\n\t\tlist.add(new Number(17));\n\t\tlist.add(new Number(19));\n\t\tlist.add(new Number(23));\n\t\tlist.add(new Number(29));\n\t\tlist.add(new Number(31));\n\t\tlist.add(new Number(37));\n\t\tlist.add(new Number(41));\n\t\tlist.add(new Number(43));\n\t\tlist.add(new Number(47));\n\t\tlist.add(new Number(53));\n\t\tlist.add(new Number(59));\n\t\tlist.add(new Number(61));\n\t\tlist.add(new Number(67));\n\t\tlist.add(new Number(71));\n\t\tlist.add(new Number(73));\n\t\tlist.add(new Number(79));\n\t\tlist.add(new Number(83));\n\t\tlist.add(new Number(89));\n\t\tlist.add(new Number(97));\n\t\tlist.add(new Number(101));\n\t\tlist.add(new Number(103));\n\t\tlist.add(new Number(107));\n\t\tlist.add(new Number(109));\n\t\tlist.add(new Number(113));\n\t\tlist.add(new Number(127));\n\t\tlist.add(new Number(131));\n\t\tlist.add(new Number(137));\n\t\tlist.add(new Number(139));\n\t\tlist.add(new Number(149));\n\t\tlist.add(new Number(151));\n\t\tlist.add(new Number(157));\n\t\tlist.add(new Number(163));\n\t\tlist.add(new Number(167));\n\t\tlist.add(new Number(173));\n\t\tlist.add(new Number(179));\n\t\tlist.add(new Number(181));\n\t\tlist.add(new Number(191));\n\t\tlist.add(new Number(193));\n\t\tlist.add(new Number(197));\n\t\tlist.add(new Number(199));\n\t\tlist.add(new Number(211));\n\t\tlist.add(new Number(223));\n\t\tlist.add(new Number(227));\n\t\tlist.add(new Number(229));\n\t\tlist.add(new Number(233));\n\t\tlist.add(new Number(239));\n\t\tlist.add(new Number(241));\n\t\tlist.add(new Number(251));\n\t\tlist.add(new Number(257));\n\t\tlist.add(new Number(263));\n\t\tlist.add(new Number(269));\n\t\tlist.add(new Number(271));\n\t\tlist.add(new Number(277));\n\t\tlist.add(new Number(281));\n\t\tlist.add(new Number(283));\n\t\tlist.add(new Number(293));\n\t\tlist.add(new Number(307));\n\t\tlist.add(new Number(311));\n\t\tlist.add(new Number(313));\n\t\tlist.add(new Number(317));\n\t\tlist.add(new Number(331));\n\t\tlist.add(new Number(337));\n\t\tlist.add(new Number(347));\n\t\tlist.add(new Number(349));\n\t\tlist.add(new Number(353));\n\t\tlist.add(new Number(359));\n\t\tlist.add(new Number(367));\n\t\tlist.add(new Number(373));\n\t\tlist.add(new Number(379));\n\t\tlist.add(new Number(383));\n\t\tlist.add(new Number(389));\n\t\tlist.add(new Number(397));\n\t\tlist.add(new Number(401));\n\t\tlist.add(new Number(409));\n\t\tlist.add(new Number(419));\n\t\tlist.add(new Number(421));\n\t\tlist.add(new Number(431));\n\t\tlist.add(new Number(433));\n\t\tlist.add(new Number(439));\n\t\tlist.add(new Number(443));\n\t\tlist.add(new Number(449));\n\t\tlist.add(new Number(457));\n\t\tlist.add(new Number(461));\n\t\tlist.add(new Number(463));\n\t\tlist.add(new Number(467));\n\t\tlist.add(new Number(479));\n\t\tlist.add(new Number(487));\n\t\tlist.add(new Number(491));\n\t\tlist.add(new Number(499));\n\t\tlist.add(new Number(503));\n\t\tlist.add(new Number(509));\n\t\tlist.add(new Number(521));\n\t\tlist.add(new Number(523));\n\t\tlist.add(new Number(541));\n\t\tlist.add(new Number(547));\n\t\tlist.add(new Number(557));\n\t\tlist.add(new Number(563));\n\t\tlist.add(new Number(569));\n\t\tlist.add(new Number(571));\n\t\tlist.add(new Number(577));\n\t\tlist.add(new Number(587));\n\t\tlist.add(new Number(593));\n\t\tlist.add(new Number(599));\n\t\tlist.add(new Number(601));\n\t\tlist.add(new Number(607));\n\t\tlist.add(new Number(613));\n\t\tlist.add(new Number(617));\n\t\tlist.add(new Number(619));\n\t\tlist.add(new Number(631));\n\t\tlist.add(new Number(641));\n\t\tlist.add(new Number(643));\n\t\tlist.add(new Number(647));\n\t\tlist.add(new Number(653));\n\t\tlist.add(new Number(659));\n\t\tlist.add(new Number(661));\n\t\tlist.add(new Number(673));\n\t\tlist.add(new Number(677));\n\t\tlist.add(new Number(683));\n\t\tlist.add(new Number(691));\n\t\tlist.add(new Number(701));\n\t\tlist.add(new Number(709));\n\t\tlist.add(new Number(719));\n\t\tlist.add(new Number(727));\n\t\tlist.add(new Number(733));\n\t\tlist.add(new Number(739));\n\t\tlist.add(new Number(743));\n\t\tlist.add(new Number(751));\n\t\tlist.add(new Number(757));\n\t\tlist.add(new Number(761));\n\t\tlist.add(new Number(769));\n\t\tlist.add(new Number(773));\n\t\tlist.add(new Number(787));\n\t\tlist.add(new Number(797));\n\t\tlist.add(new Number(809));\n\t\tlist.add(new Number(811));\n\t\tlist.add(new Number(821));\n\t\tlist.add(new Number(823));\n\t\tlist.add(new Number(827));\n\t\tlist.add(new Number(829));\n\t\tlist.add(new Number(839));\n\t\tlist.add(new Number(853));\n\t\tlist.add(new Number(857));\n\t\tlist.add(new Number(859));\n\t\tlist.add(new Number(863));\n\t\tlist.add(new Number(877));\n\t\tlist.add(new Number(881));\n\t\tlist.add(new Number(883));\n\t\tlist.add(new Number(887));\n\t\tlist.add(new Number(907));\n\t\tlist.add(new Number(911));\n\t\tlist.add(new Number(919));\n\t\tlist.add(new Number(929));\n\t\tlist.add(new Number(937));\n\t\tlist.add(new Number(941));\n\t\tlist.add(new Number(947));\n\t\tlist.add(new Number(953));\n\t\tlist.add(new Number(967));\n\t\tlist.add(new Number(971));\n\t\tlist.add(new Number(977));\n\t\tlist.add(new Number(983));\n\t\tlist.add(new Number(991));\n\t\tlist.add(new Number(997));\n\n\t\treturn list;\n\t}\n}\n\nclass Member{\n\tpublic Member(int num){\n\t\tnumber = num; \n\t}\n\t\n\tint number;\n\tArrayList<Integer> primes = new ArrayList<Integer>();\n}\n\nclass Number{\n\tpublic Number(int n){\n\t\tcount = 0;\n\t\tnumber = n;\n\t}\n\tint number;\n\tint count;\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n   \n    public static void main(String[] args) {\n       float b;float s=2; float sum=0; int count=0;\n       Scanner input= new Scanner(System.in);\n       while(true){\n       b =input.nextFloat();\n       if(b==0)\n           break;\n       sum=0;\n       count=0;\n       s=2;\n       while(sum<=b){\n          \n          sum+=1/s;\n\n          s++;\n         //  System.out.println(sum);\n          count++ ;\n    }\n\n       \n       System.out.println(count+\" card(s)\");\n    }\n    }\n\n}\n", "score": 0.0}
{"id": "SHARE_1_2175_1__1_2175_12", "golden_code": "import java.util.*;\nclass Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\tint m,n,i,h,k,s;\n\t\twhile(scan.hasNextInt())\n\t\t{\n\t\t\th=1;\n\t\t\ts=0;\n\t\t\tm = 0;\n\t\t\tn = scan.nextInt();\n\t\t\tint[] f;\n\t\t\tf=new int[3010];\n\t\t\tint[] g;\n\t\t\tg=new int[3010];\n\t\t\twhile(m!=n)\n\t\t\t{\n\t\t\t\tf[m]=scan.nextInt();\n\t\t\t\tm++;\n\t\t\t}\n\t\t\tif(n==0)\n\t\t\t\tSystem.out.println(\"Not jolly\");\n\t\t\telse if(n==1)\n\t\t\t\tSystem.out.println(\"Jolly\");\n\t\t\telse\n\t\t\t{\n\t\t\t\tfor(k=0;k!=m-1;k++)\n\t\t\t\t{\n\t\t\t\t\tg[k]=Math.abs(f[k+1]-f[k]);\n\t\t\t\t}\n\t\t\t\tfor(i=0;i!=m-1;i++)\n\t\t\t\t{\n\t\t\t\t\tif(g[i]==h)\n\t\t\t\t\t{\n\t\t\t\t\t\th++;\n\t\t\t\t\t\ti = -1;\n\t\t\t\t\t\ts++;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tif(s==m-1)\n\t\t\t\t\tSystem.out.println(\"Jolly\");\n\t\t\t\telse\n\t\t\t\t\tSystem.out.println(\"Not jolly\");\n\t\t\t}\n\t\t}\n\t}\n}\t", "generated_code": " import java.util.Scanner;\npublic class Main {\npublic static void main(String[] args) {\nScanner s = new Scanner(System.in);\nwhile(s.hasNext()){\nint a = s.nextInt();\n\nint[] num = new int[a];\nfor(int i=0 ; i<a ; i++){\nnum[i] = s.nextInt();\n}\nif(a==1){\n\tSystem.out.println(\"Jolly\");\n\tcontinue;\n}\nint[] ekh = new int[a]; \nboolean f = true;\nfor(int i=1 ; i<a ; i++){\nekh[i-1] = Math.abs(num[i-1] - num[i]);\n\n}\nfor(int i=1 ; i<a ; i++){\n\tf= true;\n\tfor(int j=0 ; j< a-1 ; j++){\n\t\tif(ekh[j] == i){\n\t\t\tf = false;\n\t\t}\n\t}\n\tif(f){\n\t\tbreak;\n\t}\n}\nif(!f)\nSystem.out.println(\"Jolly\");\nelse\nSystem.out.println(\"Not jolly\");\n}\n\n}\n}", "score": 1.0}
{"id": "SHARE_1_1230_72__6_1009_9", "golden_code": "import java.util.*;\n\npublic class Main{\n\tpublic long root(long x){\n\t\tif (x<10)\n\t\t\treturn x;\n\t\telse\n\t\t\treturn root (x%10 + root(x/10));\n\t}\n\tpublic static void main(String [] args){\n        Scanner input = new Scanner(System.in);\n        while (input.hasNext()){\n        \tMain a = new Main();\n        \tString d = input.nextLine();\n        \tlong s = 0;\n        \tfor (int i = 0 ; i<d.length(); i++){\n        \t\ts+= Integer.parseInt(\"\"+d.charAt(i));\n        \t}\n        \tif(s==0)\n        \t\tbreak;\n        \tSystem.out.println(a.root(s));\n        }\n\t}\n}", "generated_code": "import java.util.*;\n\nclass Data\n{\n\tint nRoom;\n\tint maxRoom;\n}\n\nclass BFSer\n{\n\tprivate static int bfsVisit(Node v, int id)\n\t{\n\t\tLinkedList<Node> vs = new LinkedList<Node>();\n\t\tLinkedList<Node> visiteds = new LinkedList<Node>();\n\t\tint n = 0;\n\t\tv.color = 'g';\n\t\tvs.addFirst(v);\t\t\n\t\twhile(vs.size() != 0)\n\t\t{\n\t\t\tNode ver = vs.removeLast();\n\t\t\tvisiteds.add(ver);\n\t\t\tn++;\n\t\t\tver.compId = id;\n\t\t\tfor(Edge e : ver.es)\n\t\t\t{\n\t\t\t\tif(!e.isWall && e.v.color == 'w')\n\t\t\t\t{\n\t\t\t\t\te.v.color = 'g';\t\n\t\t\t\t\tvs.addFirst(e.v);\t\n\t\t\t\t}\n\t\t\t}\t\n\t\t\tver.color = 'b';\n\t\t}\n\t\t\n\t\tfor(Node ver : visiteds)\n\t\t\tver.compSize = n;\n\t\treturn n;\n\t}\n\n\tprivate static int findMax(LinkedList<Integer> ns)\n\t{\n\t\tint max = ns.getFirst();\n\t\tfor(int n : ns)\n\t\t\tif(n > max)\n\t\t\t\tmax = n;\n\t\treturn max; \n\t}\n\n\tprivate static void checkWalls(LinkedList<Wall> walls)\n\t{\n\t\tIterator it = walls.iterator();\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tWall w = (Wall)(it.next());\t\n\t\t\tif(w.v1.compId == w.v2.compId)\n\t\t\t\tit.remove();\n\t\t}\t\t\n\t}\n\n\tpublic static Data bfs(Node[][] vs, LinkedList<Wall> walls)\n\t{\n\t\tint m = vs.length;\n\t\tint n = vs[0].length;\n\t\tint id = 0;\n\t\tLinkedList<Integer> sizes = new LinkedList<Integer>();\n\t\tfor(int i = 0; i < m; i++)\n\t\t\tfor(int j = 0; j < n; j++)\n\t\t\t\tif(vs[i][j].color == 'w')\n\t\t\t\t\tsizes.add(bfsVisit(vs[i][j], id++));\n\n\t\tData d = new Data();\n\t\td.nRoom = sizes.size();\n\t\td.maxRoom = findMax(sizes);\n\t\tcheckWalls(walls);\t\t\t\n\n\t\treturn d;\n\t}\t\n}\n\nclass Graph \n{\n\tNode[][] nodes;\n\tLinkedList<Wall> walls;\n}\n\nclass Node\n{\n\tpublic int i;\n\tpublic int j;\n\tpublic int compSize;\n\tpublic int compId;\n\tpublic Edge[] es;\n\tpublic int num;\n\tchar color;\n\tboolean sizeSet;\n\tpublic Node(int n, int ii, int jj)\n\t{\n\t\tes = new Edge[4];\n\t\tfor(int k = 0; k < 4; k++)\n\t\t\tes[k] = new Edge();\t\n\t\tnum = n;\n\t\tcolor = 'w';\n\t\tsizeSet = false;\n\t\ti = ii;\n\t\tj = jj;\n\t}\n}\n\nclass Edge\n{\n\tpublic Node v;\n\tpublic boolean isWall;\n\tpublic Edge() {isWall = false; v = null;}\n}\n\nclass Wall\n{\n\tpublic Node v1;\n\tpublic Node v2;\n\tpublic int[] wsne;\n\tprivate int min(int a, int b)\n\t{\n\t\treturn (a <= b) ? a : b;\n\t}\n\n\tprivate int max(int a, int b)\n\t{\n\t\treturn (a >= b) ? a : b;\t\n\t}\t\n\n\tpublic Wall(Node n1, Node n2)\n\t{\n\t\tv1 = n1;\n\t\tv2 = n2;\t\t\t\t\n\t\twsne = new int[4];\n\t\twsne[0] = min(v1.j, v2.j);\n\t\twsne[1] = max(v1.i, v2.i);\n\t\twsne[2] = min(v1.i, v2.i);\n\t\twsne[3] = max(v1.j, v2.j);\t\n\t}\n}\n\nclass Input \n{\n\tpublic static Graph get()\n\t{\n\t\tScanner in = new Scanner(System.in);\n\t\tint m, n;\n\t\tm = in.nextInt();\n\t\tn = in.nextInt();\n\t\tNode[][] vs = new Node[n][m];\n\t\tLinkedList<Wall> walls = new LinkedList<Wall>();\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tfor(int j = 0; j < m; j++)\n\t\t\t\tvs[i][j] = new Node(in.nextInt(), i, j);\n\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tfor(int j = 0; j < m; j++)\n\t\t\t\tSetter.set(vs[i][j], vs, walls);\t\n\n\t\tGraph g = new Graph();\n\t\tg.nodes = vs;\t\n\t\tg.walls = walls;\n\t\treturn g;\n\t}\n}\n\nclass Main\n{\n\tprivate static int maxPosRoom(LinkedList<Wall> walls)\n\t{\n\t\tIterator it = walls.iterator();\n\t\tint max;\n\t\tif(!it.hasNext())\n\t\t\treturn -1;\n\t\telse\n\t\t{\n\t\t\tWall w = (Wall)(it.next());\n\t\t\tmax = w.v1.compSize + w.v2.compSize;\t\n\t\t}\n\t\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tWall w = (Wall)(it.next());\n\t\t\tint t = w.v1.compSize + w.v2.compSize;\n\t\t\tif(t < max)\n\t\t\t\tit.remove();\n\t\t\telse\n\t\t\t\tmax = t;\t\n\t\t}\n\n\t\tit = walls.iterator();\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tWall w = (Wall)(it.next());\n\t\t\tif(w.v1.compSize + w.v2.compSize < max)\n\t\t\t\tit.remove();\n\t\t}\n\t\t\n\t\treturn max;\n\t}\n\n\tprivate static String computeWallAddr(Wall w)\n\t{\n\t\tString s = new String();\n\t\tNode v1 = w.v1;\n\t\tNode v2 = w.v2;\n\t\tif(v1.i == v2.i)\n\t\t{\n\t\t\ts += Integer.toString(v1.i + 1);\n\t\t\ts += \" \";\n\t\t\ts += (v1.j < v2.j)?Integer.toString(v1.j + 1):Integer.toString(v2.j + 1);\n\t\t\ts += \" E\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\ts += (v1.i > v2.i)?Integer.toString(v1.i + 1):Integer.toString(v2.i + 1);\n\t\t\ts += \" \";\n\t\t\ts += Integer.toString(v1.j + 1);\n\t\t\ts += \" N\";\n\t\t}\t\t\n\t\treturn s;\n\t}\n\n\tprivate static void findMin(LinkedList<Wall> walls, int i)\n\t{\n\t\tIterator it = walls.iterator();\n\t\tint min = ((Wall)(it.next())).wsne[i];\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tWall w = (Wall)(it.next());\n\t\t\tif(w.wsne[i] > min)\n\t\t\t\tit.remove();\n\t\t\telse\n\t\t\t\tmin = w.wsne[i];\n\t\t}\n\n\t\tit = walls.iterator();\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tWall w = (Wall)(it.next());\n\t\t\tif(w.wsne[i] > min)\n\t\t\t\tit.remove();\n\t\t}\t\t\n\t}\n\n\tprivate static void findMax(LinkedList<Wall> walls, int i)\n\t{\n\t\tIterator it = walls.iterator();\n\t\tint max = ((Wall)(it.next())).wsne[i];\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tWall w = (Wall)(it.next());\n\t\t\tif(w.wsne[i] < max)\n\t\t\t\tit.remove();\n\t\t\telse\n\t\t\t\tmax = w.wsne[i];\n\t\t}\n\n\t\tit = walls.iterator();\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tWall w = (Wall)(it.next());\n\t\t\tif(w.wsne[i] < max)\n\t\t\t\tit.remove();\n\t\t}\t\t\n\t}\n\n\tprivate static void filter(LinkedList<Wall> walls, int i, boolean min)\n\t{\n\t\tif(walls.size() == 0)\n\t\t{\n\t\t\tSystem.out.println(\"Error in filter 1\");\n\t\t\treturn;\n\t\t}\n\t\telse if(walls.size() == 1)\n\t\t\treturn;\n\t\telse\n\t\t{\n\t\t\tif(min)\n\t\t\t\tfindMin(walls, i);\n\t\t\telse\n\t\t\t\tfindMax(walls, i);\n\t\t\tmin = (i == 0 || i == 2) ? false : (i == 1) ? true : true; \n\t\t\tif(i > 3)\n\t\t\t\tSystem.out.println(\"Error in filter 2\");\n\t\t\tfilter(walls, ++i, min);\n\t\t}\t\n\t}\n\n\tprivate static String theWall(LinkedList<Wall> walls)\n\t{\n\t\tif(walls.size() == 0)\n\t\t\treturn new String();\n\t\tfilter(walls, 0, true);\n\t\treturn computeWallAddr(walls.get(0));\n\t}\n \n\tpublic static void main(String[] args)\n\t{\n\t\t//long start = System.currentTimeMillis();\n\t\tGraph g = Input.get();\n\t\tData d = BFSer.bfs(g.nodes, g.walls);\n\t\tSystem.out.println(d.nRoom + \"\\n\" + d.maxRoom);\n\t\tint max = maxPosRoom(g.walls);\n\t\tif(max == -1)\n\t\t\treturn;\n\t\tSystem.out.println(max);\n\t\tSystem.out.println(theWall(g.walls));\n\t//\tlong end = System.currentTimeMillis();\n\t//\tSystem.out.println(\"Running time : \" + (end - start));\n\t}\n}\n\nclass Setter\n{\n\tprivate static void set1(Node v, int i, LinkedList<Wall> walls)\n\t{\n\t\tint j = (i + 2) % 4;\n\t\tv.es[i].isWall = true;\n\t\tif(v.es[i].v != null)\n\t\t{\n\t\t\tv.es[i].v.es[j].isWall = true;\n\t\t\twalls.add(new Wall(v, v.es[i].v));\n\t\t}\n\t}\n\n\tprivate static void set2(Node v, int i, int j, LinkedList<Wall> walls)\n\t{\n\t\tset1(v, i, walls);\n\t\tset1(v, j, walls);\n\t}\n\n\tprivate static void setWall(Node v, Node[][] vs, LinkedList<Wall> walls)\n\t{\t\n\t\tint n = 0;\n\t\tif(v.es[0].isWall)\n\t\t\tn += 1;\n\t\tif(v.es[1].isWall)\n\t\t\tn += 2;\n\t\tif(v.es[2].isWall)\n\t\t\tn += 4;\n\t\tif(v.es[3].isWall)\n\t\t\tn += 8;\t\t\t\n\t\tn = v.num - n;\n\t\tif(n == 1)\n\t\t\tset1(v, 0, walls);\n\t\telse if(n == 2)\n\t\t\tset1(v, 1, walls);\n\t\telse if(n == 4)\n\t\t\tset1(v, 2, walls);\n\t\telse if(n == 8)\n\t\t\tset1(v, 3, walls);\n\t\telse if(n == 3)\n\t\t\tset2(v, 0, 1, walls);\n\t\telse if(n == 5)\n\t\t\tset2(v, 0, 2, walls);\n\t\telse if(n == 9)\n\t\t\tset2(v, 0, 3, walls);\n\t\telse if(n == 6)\n\t\t\tset2(v, 1, 2, walls);\n\t\telse if(n == 10)\n\t\t\tset2(v, 1, 3, walls);\n\t\telse if(n == 12)\n\t\t\tset2(v, 2, 3, walls);\n\t}\n\n\tpublic static void set(Node v, Node[][] vs, LinkedList<Wall> walls)\n\t{\n\t\tif(v.i > 0)\n\t\t\tv.es[1].v = vs[v.i - 1][v.j];\n\t\telse\n\t\t\tv.es[1].isWall = true;\n\t\tif(v.i < vs.length - 1)\n\t\t\tv.es[3].v = vs[v.i + 1][v.j];\n\t\tif(v.j > 0)\n\t\t\tv.es[0].v = vs[v.i][v.j - 1];\n\t\telse\n\t\t\tv.es[0].isWall = true;\n\t\tif(v.j < vs[0].length - 1)\n\t\t\tv.es[2].v = vs[v.i][v.j + 1];\t\t\n\t\tsetWall(v, vs, walls);\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_109000_4__1_106024_5", "golden_code": "/*\nID: sisi_ho1\nLANG: JAVA\nTASK: Main1\n*/\n\nimport java.io.*;\nimport java.util.*;\n\npublic class Main\n{\n\tpublic static void main(String[] args) throws IOException\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\tint ts = scan.nextInt();\n\t\tint n = 0;\n\t\twhile (ts-->0)\n\t\t{\n\t\t\tdouble x = scan.nextDouble();\n\t\t\tdouble y = scan.nextDouble();\n\t\t\tfor(int year = 0,S = 0 ; ; year++, S += 50 )\n\t\t\t{\n\t\t\t\tdouble r = Math.sqrt((2*S)/Math.PI);\n\n\t\t\t\tif(Math.sqrt((x*x)+(y*y))<r)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(\"Property \"+( ++n)+\": This property will begin eroding in year \"+year+\".\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"END OF OUTPUT.\");\n\t}\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scan = new Scanner(System.in);\n        int m,n;\n\n        while(true)\n        {        \n            m = scan.nextInt();\n            n = scan.nextInt();\n            if(m==0 && n==0)\n                break;\n            \n            int[][] ground = new int [m][n];\n            \n            //get the inputs\n            int c = 0;\n            for(int i=0;i<ground.length;i++)\n                for(int j=0;j<ground[0].length;j++)\n                {\n                    ground[i][j] = scan.nextInt();\n                    c += ground[i][j];\n                }\n            //---------------------------------------------\n            if(c== ground.length * ground[0].length)\n            {\n                System.out.println(\"No\");\n                continue;\n            }\n            boolean isBeautifull = true;\n            \n            \n            //beautifull in colums\n            for(int j=0; j<ground[0].length;j++)\n            {\n                for(int i =0;i<ground.length-1;i++)\n                {\n                    if(ground[i][j]==0 && ground[i+1][j] ==0)\n                    {isBeautifull = false;break;}\n                }\n                \n            }\n            \n            if(!isBeautifull)\n            {\n                System.out.println(\"No\");\n                continue;\n            }\n            \n            \n            //beatuifull in rows\n            for(int j =0; j<ground.length;j++)\n            {\n                for(int i =0;i<ground[0].length-1;i++)\n                {\n                    if(ground[j][i]==0 && ground[j][i+1] ==0)\n                    {isBeautifull = false;break;}\n                }\n                if(!isBeautifull)\n                    break;\n            }\n            \n            if(!isBeautifull)\n            {\n                System.out.println(\"No\");\n                continue;\n            }\n            \n                System.out.println(\"Yes\");    \n        }    \n    }\n}", "score": 0.0}
{"id": "SHARE_1_1006_37__1_1079_12", "golden_code": "import java.util.Scanner;\npublic class Main{\n    public static void main(String[] args){\n    Scanner s = new Scanner(System.in);\n            while (s.hasNext()) {\n                  double db=s.nextDouble();\n                  if(db==0){\n                      break;\n                  }\n    double sum=0;\n    for(int i=2;i<Integer.MAX_VALUE;i++){\n        sum+=1.0/i;if(sum>=db){\n            System.out.println(i-1+\" card(s)\");\n            break;\n        }\n    }}}}", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n    \n    public static void main(String[] args) \n    {\n        Scanner cin = new Scanner(System.in);\n        int[] arr = new int[100];\n        int z = 0;\n        for(int i = 1 ; i < 100 ; i++ )\n        {\n            int n = cin.nextInt();\n            if(n > 60000 || n < 1)\n            {\n                break;\n            }\n            else\n            {\n               arr[z] = n; \n               z++;\n            }\n        }\n        int e = 0;\n        System.out.println(\"PERFECTION OUTPUT\");\n        for (int j = 0; j < arr.length ; j++) \n        {\n            e = 0;\n            if(arr[j] == 0)\n                break;\n            for(int t = 1 ; t < arr[j] ; t++ )\n            {\n                if(arr[j] % t == 0)\n                    e += t;\n            }\n            if(e > arr[j]){\n                if(arr[j] < 10)\n                   System.out.print(\"    \" + arr[j] + \"  ABUNDANT\\n\"); \n                else if(arr[j] < 100 && arr[j] >= 10)\n                   System.out.print(\"   \" + arr[j] + \"  ABUNDANT\\n\");\n                else if(arr[j] < 1000 && arr[j] >= 100)\n                   System.out.print(\"  \" + arr[j] + \"  ABUNDANT\\n\");\n                else if(arr[j] < 10000 && arr[j] >= 1000)\n                   System.out.print(\" \" + arr[j] + \"  ABUNDANT\\n\");\n                else if(arr[j] < 100000 && arr[j] >= 10000)\n                   System.out.print( arr[j] + \"  ABUNDANT\\n\");\n            }\n            if(e < arr[j]){\n                if(arr[j] < 10)\n                   System.out.print(\"    \" + arr[j] + \"  DEFICIENT\\n\"); \n                else if(arr[j] < 100 && arr[j] >= 10)\n                   System.out.print(\"   \" + arr[j] + \"  DEFICIENT\\n\");\n                else if(arr[j] < 1000 && arr[j] >= 100)\n                   System.out.print(\"  \" + arr[j] + \"  DEFICIENT\\n\");\n                else if(arr[j] < 10000 && arr[j] >= 1000)\n                   System.out.print(\" \" + arr[j] + \"  DEFICIENT\\n\");\n                else if(arr[j] < 100000 && arr[j] >= 10000)\n                   System.out.print( arr[j] + \"  DEFICIENT\\n\");\n            }\n            if(e == arr[j]){\n                if(arr[j] < 10)\n                   System.out.print(\"    \" + arr[j] + \"  PERFECT\\n\"); \n                else if(arr[j] < 100 && arr[j] >= 10)\n                   System.out.print(\"   \" + arr[j] + \"  PERFECT\\n\");\n                else if(arr[j] < 1000 && arr[j] >= 100)\n                   System.out.print(\"  \" + arr[j] + \"  PERFECT\\n\");\n                else if(arr[j] < 10000 && arr[j] >= 1000)\n                   System.out.print(\" \" + arr[j] + \"  PERFECT\\n\");\n                else if(arr[j] < 100000 && arr[j] >= 10000)\n                   System.out.print( arr[j] + \"  PERFECT\\n\");\n            }\n        }\n        System.out.println(\"END OF OUTPUT\");\n        \n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_81__1_1001_212", "golden_code": "\nimport java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile (sc.hasNext())\n\t\t\tSystem.out.println(sc.nextInt() + sc.nextInt());\n\t}\n}\n", "generated_code": "import java.util.Scanner;\nimport java.lang.System;\nimport java.lang.String;\npublic class Main {\n\n    public static void main(String[] args) {\n\tScanner input=new Scanner(System.in);\n        try\n        {\n            while (true)\n            {\n                System.out.println(input.nextInt()+input.nextInt());\n            }\n        }\n        catch (Exception e )\n        {\n            System.exit(0);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1319_63__1_1319_62", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int input = in.nextInt();\n        while (true) {\n            boolean shart = true;\n            int n = 0;\n            int m = 0;\n            while (m != input) {\n                m = in.nextInt();\n                if (input == 5280) {\n                    System.exit(0);\n                }\n                if (m == input) {\n                    break;\n                }\n                if (Math.abs(input - n) < Math.abs(input - m)) {\n                    System.out.println(\"Moving from \" + n + \" to \" + m + \": colder.\");\n                    n = m;\n                } else if (Math.abs(input - n) > Math.abs(input - m)) {\n                    System.out.println(\"Moving from \" + n + \" to \" + m + \": warmer.\");\n                    n = m;\n                } else {\n                    System.out.println(\"Moving from \" + n + \" to \" + m + \": same.\");\n                    n = m;\n                }\n            }\n            System.out.println(\"Moving from \" + n + \" to \" + input + \": found it!\");\n            input = in.nextInt();\n            if (input == 5280) {\n                shart = false;\n            }\n            if (shart) {\n                System.out.println(\"\");\n            }\n\n        }\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner in = new Scanner(System.in);\n\n        int place = in.nextInt();\n        while (place != 5280) {\n            Integer flag = 0;\n            Integer reptime = 0;\n            int currentnum = 0;\n            int lastnum = 0;\n\n            while ((flag == 0) && (reptime != 21)) {\n                currentnum = in.nextInt();\n                reptime++;\n\n                if (currentnum == place) {\n                    System.out.print(\"Moving from \" + lastnum + \" to \" + currentnum + \": found it!\\n\");\n//                    System.out.print(\"\\n\");\n                    flag = 1;\n                } else {\n\n                    if (Math.abs(currentnum - place) == Math.abs(lastnum - place)) {\n                        System.out.print(\"Moving from \" + lastnum + \" to \" + currentnum + \": same.\\n\");\n                        lastnum = currentnum;\n                    }\n\n                    if (Math.abs(currentnum - place) > Math.abs(lastnum - place)) {\n                        System.out.print(\"Moving from \" + lastnum + \" to \" + currentnum + \": colder.\\n\");\n                        lastnum = currentnum;\n                    }\n\n                    if (Math.abs(currentnum - place) < Math.abs(lastnum - place)) {\n                        System.out.print(\"Moving from \" + lastnum + \" to \" + currentnum + \": warmer.\\n\");\n                        lastnum = currentnum;\n                    }\n                }\n            }\n            place = in.nextInt();\n            if(place!=5280){\n                System.out.println();\n            }\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1006_7__1_1006_36", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n   \n    public static void main(String[] args) {\n       float b;float s=2; float sum=0; int count=0;\n       Scanner input= new Scanner(System.in);\n       while(true){\n       b =input.nextFloat();\n       if(b==0)\n           break;\n       sum=0;\n       count=0;\n       s=2;\n       while(sum<=b){\n          \n          sum+=1/s;\n\n          s++;\n         //  System.out.println(sum);\n          count++ ;\n    }\n\n       \n       System.out.println(count+\" card(s)\");\n    }\n    }\n\n}\n", "generated_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\nclass Main{\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br =new BufferedReader(new InputStreamReader(System.in));\n\t\twhile(true){\n\t\t\tString line = br.readLine();\n\t\t\tif(line.equals(\"0.00\"))\n\t\t\t\tbreak;\n\t\t\tfloat x = Float.parseFloat(line);\n\t\t\tfloat sum = 0.5f;\n\t\t\tint c = 3;\n\t\t\twhile(sum < x){\n\t\t\t\tsum += 1.00f/c;\n\t\t\t\tc++;\n\t\t\t}\n\t\t\tSystem.out.println(c-2+\" card(s)\");\n\t\t}\n\t\tbr.close();\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_2822_24__1_2822_76", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n       Scanner scan=new Scanner(System.in);\n       long n,m;\n       n=scan.nextLong();\n       int i=0;\n       while(i<n){\n           m=scan.nextLong();\n           System.out.println((m*(m+1)/2)+\" \"+ (m * m) +\" \"+(m*(m+1)));\n           i++;\n       }\n       scan.close();\n    }\n}\n", "generated_code": "\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int[] array = new int[3 * n];\n        int k = 0;\n        for (int i = 0; i < n; i++) {\n            int numbers = scanner.nextInt();\n            int count = 0, countodd = 0, counteven = 0;\n            //the sum of first N positive integer\n            for (int j = 1; j <= numbers; j++) {\n                count += j;\n            }\n            array[k] = count;\n            k++;\n            for (int j = 0; j < numbers; j++) {\n                countodd += (2 * j + 1);\n            }\n            array[k] = countodd;\n            k++;\n            for (int j = 0; j <= numbers; j++) {\n                counteven += 2 * j;\n            }\n            array[k] = counteven;\n            k++;\n        }\n\n        int cnt = 1;\n        for (int i = 0; i < array.length; i++) {\n            if (cnt % 3 == 0){\n                System.out.print(array[i]);\n                System.out.println();\n            }\n            else\n                System.out.print(array[i] + \" \");\n            cnt++;\n        }\n\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_71__1_1001_468", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tif (!sc.hasNextInt())\n\t\t\t\tbreak;\n\t\t\tSystem.out.print( sc.nextInt()+sc.nextInt()+\"\\n\");\n\t\t}\n\t\t\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main{\n    static Scanner input=new Scanner(System.in);\n    public static void main(String[] args){\n        while(input.hasNext()){\n            int a=input.nextInt();\n            int b=input.nextInt();\n            int c=a+b;\n            System.out.println(\"\"+c);\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_6__1_1001_127", "golden_code": "import java.util.*;\npublic class Main\n{\npublic static void main(String[]args)\n{\n   Scanner inp=new Scanner (System.in);\n   while(inp.hasNextInt())\n    {\n        int a=inp.nextInt(),b=inp.nextInt();\n        System.out.println(a+b);\n}\n}\n}", "generated_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main ( String[] args)\n\t{\n\tScanner scan = new Scanner ( System.in);\n\tint sum=0;\n\twhile ( scan.hasNextLine())\n\t{\n\tint num1=scan.nextInt();\n\tint num2 = scan.nextInt();\n\t sum = num1+num2;\n\tSystem.out.println(sum);\n\t}\n\t\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2500_33__1_2500_20", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\t\n\t    public static void main(String[] args) {\n\t    \t\n\t    \t        Scanner in = new Scanner(System.in);\n\t    \t                while (true) {\n\t    \t                \t            int n = in.nextInt();\n\t    \t                \t                        double m = in.nextDouble();\n\t    \t                \t                                    if (n == 0 && m == 0) {\n\t    \t                \t                                    \t                System.exit(0);\n\t    \t                \t                                    }\n\t    \t                \t                                               \n\t    \t                \t                                                           while (n >= 1) {\n\t    \t                \t                                                           \t\n\t    \t                \t                                                           \t                if (m > Math.pow(3, n) / 3 && m <= 2 * (Math.pow(3, n) / 3)) {\n\t    \t                \t                                                           \t                \t                    System.out.println(\"No\");\n\t    \t                \t                                                           \t                \t                                        break;\n\t    \t                \t                                                           \t                } else if (m <= Math.pow(3, n) / 3) {\n\t    \t                \t                                                           \t                \t                    if (n != 1) {\n\t    \t                \t                                                           \t                \t                    \t                        n--;\n\t    \t                \t                                                           \t                \t                    } else {\n\t    \t                \t                                                           \t                \t                    \t                        System.out.println(\"Yes\");\n\t    \t                \t                                                           \t                \t                    \t                                                break;\n\t    \t                \t                                                           \t                \t                    }\n\t    \t                \t                                                           \t                \t                    \n\t    \t                \t                                                           \t                } else {\n\t    \t                \t                                                           \t                \t                    if (n != 1) {\n\t    \t                \t                                                           \t                \t                    \t                        m -= (2 * (Math.pow(3, n) / 3));\n\t    \t                \t                                                           \t                \t                    } else {\n\t    \t                \t                                                           \t                \t                    \t                        System.out.println(\"Yes\");\n\t    \t                \t                                                           \t                \t                    \t                                                break;\n\t    \t                \t                                                           \t                \t                    }\n\t    \t                \t                                                           \t                }\n\t    \t                \t                                                           }\n\t    \t                }\n\t    }\n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        // TODO code application logic here\n          Scanner input=new Scanner(System.in);\n        String out1=\"\";\n        String s=input.nextLine();\n        String[] ll=s.split(\" \");\n         long a=Long.parseLong(ll[0]);\n        long num=Long.parseLong(ll[1])-1;\n        List<String> results=new ArrayList<String>();\n        while(a!=0||num+01!=0)\n        {\n              out1=\"Yes\";\n              long tedad=(long)Math.pow(3, a);\n              if(num>tedad||(num==1&&a==0))\n              {\n                  out1=\"No\";\n              }\n              else if((num-1)%6==0)\n                    out1=\"No\";\n              else\n              {\n                 for(long i=tedad/3;i>=3;i=i/3)\n                 {\n                     if((num/i)%2==1)\n                     {\n                         out1=\"No\";\n                         break;\n                     }\n                 }\n                \n              }\n              results.add(out1);\n               s=input.nextLine();\n            out1=\"Yes\";\n             ll=s.split(\" \");\n            a=Long.parseLong(ll[0]);\n            num=Long.parseLong(ll[1])-1;\n        }\n        for(int i=0;i<results.size();i++)\n            {\n           System.out.println(results.get(i));\n            }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2848_38__1_2499_6", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        int testCase = Integer.parseInt(scanner.nextLine());\n\n        for (int test_case = 0; test_case < testCase; test_case++) {\n\n            String[] temp = scanner.nextLine().split(\" \");\n            int num_attack = 5 + Integer.parseInt(temp[0]);\n            int power = Integer.parseInt(temp[1]);\n\n            int[] HPs = new int[num_attack - 5];\n            String[] split = scanner.nextLine().split(\" \");\n\n            for (int i = 0; i < HPs.length; i++) {\n                HPs[i] = Integer.parseInt(split[i]);\n            }\n\n\n            int zeroCount = 0;\n            int ind_of = 0;\n            int count = 0;\n\n\n            int step = 1;\n\n            int f = 0;\n\n\n            while (count < num_attack) {\n                if (zeroCount < HPs.length) {\n                    if (HPs[ind_of] > 0) {\n//                        System.out.println(Arrays.toString(HPs));\n                        count++;\n                        HPs[ind_of] -= power;\n                        if (HPs[ind_of] <= 0) {\n                            zeroCount++;\n                            step *= -1;\n                        }\n                    }\n                    f = ind_of;\n                        ind_of += step;\n                        if (ind_of < 0) {\n                            ind_of = HPs.length - 1;\n                        } else if (ind_of >= HPs.length) {\n                            ind_of = 0;\n                        }\n\n                } else {\n                    break;\n                }\n            }\n\n            System.out.println(f + 1 );\n\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\n \n \npublic class Main\n{\n \n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args)\n\t{\n\t\t// TODO Auto-generated method stub\n\t\tScanner in = new Scanner(System.in);\n\t\tString output = \"\";\n\t\tint age = in.nextInt();\n\t\tint weight = in.nextInt();\n\t\tint strength = in.nextInt();\n\t\twhile (age!=0 || weight !=0 || strength !=0)\n\t\t{\n\t\t\tif (age <= 30 && weight >=70 && strength >=500)\n\t\t\t\toutput += \" Mid-field\";\n\t\t\tif (age <=26 && weight >=60 && strength >=200)\n\t\t\t\toutput += \" Forward\";\n\t\t\tif (age <=36 && weight >=80 && strength >=300)\n\t\t\t\toutput += \" Defense\";\n\t\t\tif (output.equals(\"\"))\n\t\t\t\toutput += \"No positions\";\n\t\t\tSystem.out.println(output.trim());;\n\t\t\toutput = \"\";\n\t\t\tage = in.nextInt();\n\t\t\tweight = in.nextInt();\n\t\t\tstrength = in.nextInt();\n\t\t}\n \n\t}\n \n}", "score": 0.0}
{"id": "SHARE_1_2857_41__1_2857_4", "golden_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scanner = new Scanner(System.in);\n\n        int t = scanner.nextInt();\n\n        for (int i = 0; i < t; i++)\n        {\n            int n = scanner.nextInt();\n            int[] x = new int[n];\n\n            for (int j = 0; j < n; j++)\n                x[j] = scanner.nextInt();\n\n            boolean flag = true;\n            while (flag)\n            {\n                Arrays.sort(x);\n\n                int a = x[n - 1] - x[0];\n\n                x[0] = a;\n                x[n - 1] = a;\n\n                int k;\n                for (k = 0; k < n-1; k++)\n                    if(x[k] != x[k+1]) break;\n\n                if (k == n-1) flag = false;\n\n            }\n\n            System.out.println(x[0]);\n        }\n\n    }\n}\n", "generated_code": "import java.awt.Checkbox;\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class Main {\n\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner input=new Scanner(System.in);\n\n\n\t\tint t=input.nextInt();\n\t\tint n;\n\t\tint[] p;\n\t\tboolean eq=true;\n\t\twhile(t-->0) {\n\t\t\tn=input.nextInt();\n\t\t\tp=new int[n];\n\t\t\tp[0]=input.nextInt();\n\t\t\tfor(int i=1;i<n;i++) {\n\t\t\t\tp[i]=input.nextInt();\n\t\t\t\tif(eq && p[i]!=p[0])\n\t\t\t\t\teq=false;\n\t\t\t}\n\n\n\t\t\tif(eq)\n\t\t\t\tSystem.out.println(p[0]);\n\t\t\telse {\n\t\t\t\tArrays.sort(p);\n\n\t\t\t\twhile(!eq) {\n//\t\t\t\t\tfor(int i=0;i<n;i++)\n//\t\t\t\t\t\tSystem.out.print(p[i]);\n//\t\t\t\t\tSystem.out.println();\n\t\t\t\t\tint a=p[n-1]-p[0];\n\t\t\t\t\tp[0]=p[n-1]=a;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\teq=true;\n\t\t\t\t\tArrays.sort(p);\n\n\t\t\t\t\tif(p[n-1]!=p[0])\n\t\t\t\t\t\teq=false;\n\t\t\t\t}\n\n\t\t\t\tSystem.out.println(p[0]);\n\n\t\t\t}\n\n\n\t\t}\n\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_106018_13__1_1001_91", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n    public static void main(String[] args){\n        Scanner in=new Scanner(System.in);\n        while(in.hasNext()){\n            int n=in.nextInt();\n            boolean f=false;\n            for(int i=2;i<=n/2;i++){\n                if(n%i==0){\n                    if(isp(i)&&isp(n/i)){\n                        f=true;\n                        break;\n                    }\n                        \n                }\n            }\n            if(f)\n                System.out.println(\"Yes\");\n            else\n                System.out.println(\"No\");\n        }\n    }\n    public static boolean isp(int n){\n        for(int i=2;i<n;i++)\n            if(n%i==0)\n                return false;\n        return true;\n    }\n}\n", "generated_code": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while(input.hasNextLine())\n        {\n        String [] s=input.nextLine().split(\" \");\n        int A= Integer.parseInt(s[0]);\n        int B=Integer.parseInt(s[1]);\n        int sum= A+B;\n        System.out.println(sum);\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_2543_7__1_2499_9", "golden_code": "import java.util.*;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tString line;\n\t\twhile (true) {\n\t\t\tline = sc.nextLine();\n\t\t\tif (line.equals(\"*\"))\n\t\t\t\tbreak;\n\t\t\tchar c = 0;\n\t\t\tint index = 0;\n\t\t\tfor (int i = 0; i < line.length(); ++i)\n\t\t\t\tif (line.charAt(i) != ' ') {\n\t\t\t\t\tc = (char) (line.charAt(i) > 'Z' ? line.charAt(i) - 'a' + 'A' : line.charAt(i));\n\t\t\t\t\tindex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tboolean flag = false;\n\t\t\tfor (; index < line.length() - 1; ++index) {\n\t\t\t\tif (line.charAt(index) == ' ') {\n\t\t\t\t\tif ((line.charAt(index + 1) > 'Z' && line.charAt(index + 1) != c + 'a' - 'A') || (line.charAt(index + 1) < 'a' && line.charAt(index + 1) != c))\n\t\t\t\t\t\tflag = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(flag?\"N\":\"Y\");\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\tfor (int i = 0; true; i++) {\n\t\t\tint age=sc.nextInt();\n\t\t\tint w=sc.nextInt();\n\t\t\tint s=sc.nextInt();\n\t\t\tif(age==0&&w==0&&s==0){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tboolean state=false;\n\t\t\tString ans=\"\";\n\t\t\tif((age<=30)&&(w>=70)&&(s>=500)){\n\t\t\t\tans+=\"Mid-field \";\n\t\t\t\tstate=true;\n\t\t\t}\n\t\t\tif((age<=26)&&(w>=60)&&(s>=200)){\n\t\t\t\tans+=\"Forward \";\n\t\t\t\tstate=true;\n\t\t\t}\n\t\t\tif((age<=36)&&(w>=80)&&(s>=300)){\n\t\t\t\tans+=\"Defense \";\n\t\t\t\tstate=true;\n\t\t\t}\n\t\t\tif(!state){\n\t\t\t\tSystem.out.println(\"No positions\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tSystem.out.println(ans.substring(0, ans.length()-1));\n\t\t\t}\n\t\t\t}\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_2499_0__1_2499_75", "golden_code": "import java.awt.*;\nimport java.util.*;\n\npublic class Main\n{\n    public static void main(String [] args)\n    {\n        Scanner scan = new Scanner(System.in);\n\n        while (scan.hasNext())\n        {\n            int age = scan.nextInt();\n            int weight = scan.nextInt();\n            int strength = scan.nextInt();\n            if(age + weight + strength == 0) break;\n\n            ArrayList<String> res = new ArrayList<String>();\n\n            if(age <= 30 && weight >= 70 && strength >= 500)\n                res.add(\"Mid-field\");\n\n            if(age <= 26 && weight >= 60 && strength >= 200)\n                res.add(\"Forward\");\n\n            if(age <= 36 && weight >= 80 && strength >= 300)\n                res.add(\"Defense\");\n\n            if(res.size() == 0)\n            {\n                System.out.println(\"No positions\");\n            }\n            else\n            {\n                boolean first = true;\n                for(String str : res)\n                {\n                    if(!first) System.out.print(\" \");\n                    first = false;\n                    System.out.print(str);\n                }\n                System.out.println();\n            }\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main{\n    static Scanner input=new Scanner(System.in);\n    public static void main(String[] args){\n        while(true){\n            int a=input.nextInt();\n            int b=input.nextInt();\n            int c=input.nextInt();\n            int t=0,t1=0,t2=0;\n            if(a==0 && b==0 && c==0){\n                return;\n            }\n            if(a<=30 && b>=70 && c>=500){\n                t++;\n                System.out.print(\"Mid-field\");\n            }\n            if(a<=26 && b>=60 && c>=200){\n                t1++;\n                if(t>0)\n                    System.out.print(\" Forward\");\n                else\n                    System.out.print(\"Forward\");\n            }\n            if(a<=36 && b>=80 && c>=300){\n                t2++;\n                if(t>0 || t1>0)\n                    System.out.print(\" Defense\");\n                else\n                    System.out.print(\"Defense\");\n            }\n            if(t==0 && t1==0&& t2==0)\n                System.out.print(\"No positions\");\n            System.out.println(\"\");\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_106012_13__1_101158_12", "golden_code": "\n\nimport java.util.Scanner;\n\n\npublic class Main {\n    public static void main(String []args){\n        int t,n,x,y,z,max;\n        char last=0,first=0;\n        String str;\n        StringBuffer sb;\n        Scanner cin = new Scanner(System.in);\n        t=cin.nextInt();\n        for(int k=0; k<t ; k++){\n            n=cin.nextInt();\n            x=cin.nextInt();y=cin.nextInt();z=cin.nextInt();\n\n\n            max=0;\n            str=\"\";str+=x;str+=y;str+=z;\n            sb=new StringBuffer(str);\n            for(char i='1';i<='9';i++){\n                sb.insert(0, i);\n                for(char j='0';j<='9';j++){\n                    sb.append(j);\n                    str=new String(sb);\n                   // System.out.println(\"STR:\"+str);\n                    if(Integer.parseInt(str)%n==0 && Integer.parseInt(str)>max ){\n                        max=Integer.parseInt(str)/n;\n                        first=i;last=j;\n                    }\n                    sb.deleteCharAt(4);\n\n\n                }\n                sb.deleteCharAt(0);\n            }\n            if(max!=0){\n                System.out.print(first+\" \"+last+\" \");\n            }\n            System.out.print(max);\n            System.out.println();\n\n        }\n    }\n\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    \n    public static void main(String[] args) {\n        \n        Scanner input = new Scanner( System.in );\n        \n        String a, b;\n        int i, j;\n        String s, opr;\n        String[] arr;\n        s = input.next().trim();\n        while( ! s.equals( \".\" ) ){\n            \n            a = s.substring( 1, s.length() - 1 );\n            opr = input.next().trim();\n            s = input.next();\n            b = s.substring( 1, s.length() - 1 );\n            \n            if( opr.equals(\"++\") ){\n                if( !a.isEmpty() && !b.isEmpty() )\n                    a = String.format( \"[%s,%s]\", a, b );\n                else\n                    if( a.isEmpty() )\n                        a = String.format( \"[%s]\", b );\n                    else\n                        a = String.format( \"[%s]\", a );\n                System.out.printf( \"%s\\n\", a );\n            }else{\n                \n                arr = b.split(\",\");\n                \n                for( i = 0; i < arr.length; i++ ){\n                    a = a.replaceFirst( arr[i], \"\" ).replaceFirst(\",,\", \",\");\n                }\n                \n                if( !a.isEmpty() )\n                    if( a.charAt(0) == ',' )\n                        a = a.substring(1);\n                \n                System.out.printf( \"[%s]\\n\", a );\n            }\n            s = input.next().trim();\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_276__1_2535_8", "golden_code": "\n\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\n\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter writer = new PrintWriter(new BufferedOutputStream(System.out));\n        while (reader.ready()) {\n            StringTokenizer tokenizer = new StringTokenizer(reader.readLine());\n            int a = Integer.valueOf(tokenizer.nextToken());\n            int b = Integer.valueOf(tokenizer.nextToken());\n            writer.printf((a + b) + \"%n\");\n        }\n        writer.flush();\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\nimport java.util.TreeSet;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        TreeSet<Ruler> set = new TreeSet<Ruler>();\n        for (int i = 0; i < n; i++) {\n            s.nextLine();\n            set.add(new Ruler(s.nextLine(), s.nextFloat(), s.nextFloat()));\n        }\n        Ruler[] arr = set.toArray(new Ruler[0]);\n        n = s.nextInt();\n        for (int i = 0; i < n; i++) {\n            int num = s.nextInt();\n            String res = \"\";\n            lbl:\n            for (int j = 0; j < arr.length; j++) {\n                if (num >= (int) arr[j].start && num <= (int) arr[j].end) {\n                    res += \" \"+arr[j].name+\",\";\n                } else if (!res.equals(\"\")) {\n                    break lbl;\n                }\n            }\n            if (!res.equals(\"\")) {\n                System.out.println(\"Galactic year \" + num + \":\" + res.substring(0, res.length() - 1));\n            } else {\n                System.out.println(\"Galactic year \" + num + \": None\");\n            }\n        }\n    }\n}\n\nclass Ruler implements Comparable<Ruler> {\n\n    float start;\n    float end;\n    String name;\n\n    public Ruler(String name, float start, float end) {\n        this.start = start;\n        this.end = end;\n        this.name = name;\n    }\n\n    @Override\n    public int compareTo(Ruler o) {\n        if (start < o.start) {\n            return -1;\n        } else if (start > o.start) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1265_7__1_1265_14", "golden_code": "\n\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\twhile (n-- > 0) {\n\t\t\tint t = in.nextInt();\n\t\t\tfor (int i = 1; i <=t; i += 2) {\n\t\t\t\tif (t % i == 0) {\n\t\t\t\t\tint g = t / i;\n\t\t\t\t\tint f = 1;\n\t\t\t\t\tint j = 1;\n\t\t\t\t\tfor (; f < g; j++) {\n\t\t\t\t\t\tf *= 2;\n\t\t\t\t\t}\n\t\t\t\t\tif (f == g) {\n\t\t\t\t\t\tSystem.out.println(i + \" \" + (j - 1));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int l = in.nextInt();\n        for (int v = 0; v < l; v++) {\n            int n = in.nextInt();\n            int m ;\n            a:\n            for (int i = 1; i <= n ; i += 2) {\n                if (n % i == 0) {\n                    m = i;\n                    double d = n / m;\n                    double f = 0;\n                    if (d % 1 == 0) f = Math.log(d) / Math.log(2);\n                    if (f % 1 == 0) {\n                        System.out.println(m + \" \" + (int) f);\n                        break a;\n                    }\n                }\n            }\n\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_427__1_1001_37", "golden_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner input = new Scanner(System.in);\n\t\tint a, b;\n\t\twhile (input.hasNextInt())\n\t\t{\n\t\t\ta = input.nextInt();\n\t\t\tb = input.nextInt();\n\t\t\tSystem.out.println(a + b);\n\t\t}\n\t}\n}", "generated_code": "\nimport java.util.Scanner;\npublic class Main{\n    public static void main(String args[]){\n        Scanner s=new Scanner(System.in);\n        while(s.hasNext()){\n            int a=s.nextInt();\n            int b=s.nextInt();\n            System.out.println(a+b);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1230_97__1_1230_98", "golden_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tBigInteger n = scanner.nextBigInteger();\n\t\t\tif (n.compareTo(BigInteger.ZERO)==0)\n\t\t\t\treturn;\n\t\t\twhile (n.divide(BigInteger.TEN).compareTo(BigInteger.ZERO)!=0){\n\t\t\t\tBigInteger sum = BigInteger.ZERO;\n\t\t\t\twhile (n.compareTo(BigInteger.ZERO)!=0){\n\t\t\t\t\tsum =sum.add(n.mod(BigInteger.TEN));\n\t\t\t\t\tn = n.divide(BigInteger.TEN);\n\t\t\t\t}\n\t\t\t\tn =sum;\n\t\t\t}\n\t\t\tSystem.out.println(n);\n\t\t}\n\t}\n\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile (in.hasNext()) {\n\t\t\tString n = in.next();\n\t\t\tif (n.length() < 2) {\n\t\t\t\tif ((n.charAt(0) - '0') == 0)\n\t\t\t\t\treturn;\n\t\t\t\tif ((n.charAt(0) - '0') < 10) {\n\t\t\t\t\tSystem.out.println(n);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlong s = 0;\n\t\t\twhile (n.length() > 1) {\n\t\t\t\ts = 0;\n\t\t\t\tfor (int i = 0; i < n.length(); i++) {\n\t\t\t\t\ts += n.charAt(i) - '0';\n\t\t\t\t}\n\t\t\t\tn = s + \"\";\n\t\t\t}\n\t\t\tSystem.out.println(s);\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_2400_22__1_1324_11", "golden_code": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\twhile (input.hasNext()){\n\t\t\tint n = input.nextInt();\n\t\t\tif (n<2)\n\t\t\t\tSystem.out.println(\"no\");\n\t\t\telse if ((n-2)%4==0)\n\t\t\t\tSystem.out.println(\"yes\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"no\");\n\t\t}\n\t}\n}\n\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString order = sc.nextLine();\n\t\tint m = 1;\n\t\twhile (!order.equals(\"STOP\")) {\n\t\t\tSystem.out.println(\"Dataset #\" + m + \":  The initial order is \" + order + \".\");\n\t\t\t++m;\n\t\t\tint n = Integer.parseInt(sc.nextLine());\n\t\t\tfor (; n > 0; --n) {\n\t\t\t\tString leaver = sc.nextLine();\n\t\t\t\tint index = order.indexOf(leaver);\n\t\t\t\tif (index > (order.length() - 1) / 2)\n\t\t\t\t\torder = order.substring(0, index) + new StringBuffer(order.substring(index + 1)).reverse().toString();\n\t\t\t\telse\n\t\t\t\t\torder = new StringBuffer(order.substring(0, index)).reverse().toString() + order.substring(index + 1);\n\t\t\t\tSystem.out.println(\"After \" + leaver + \" leaves, the order is \" + order + \".\");\n\t\t\t}\n\t\t\torder = sc.nextLine();\n\t\t\tif (!order.equals(\"STOP\"))\n\t\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_106020_37__1_106020_22", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        int n = cin.nextInt();\n        int a, s, ds = 1;\n        while (n > 0) {\n            s = 0;\n            a = cin.nextInt();\n            for (int i = 1; i <= a; i++) {\n                s += i * (sum(i + 1));\n            }\n            System.out.println(ds + \" \" + a + \" \" + s);\n            n--;\n            ds++;\n        }\n    }\n\n    static int sum(int n) {\n        return ((n) * (n + 1)) / 2;\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin=new Scanner(System.in);\n        int n=cin.nextInt();\n        for(int i=1;i<=n;i++){\n            int a=cin.nextInt();\n            int b=0;\n            for(int j=1;j<=a+1;j++)\n                b+=j;\n            System.out.println(i+\" \"+a+\" \"+b*(b-1)/2);\n        }\n    }\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_462__1_1001_467", "golden_code": "import java.util.Scanner;\n \nclass Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt() + cin.nextInt());\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1324_24__1_2175_14", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        String s=in.next();\n        int k=1;\n        boolean z=false;\n        while(!s.equals(\"STOP\")){\n            if(z)\n                System.out.println(\"\");\n            z=true;\n            System.out.println(\"Dataset #\"+(k++)+\":  The initial order is \"+s+\".\");\n            int a=in.nextInt();\n            String c=\"\";\n            for (int i = 0; i < a; i++) {\n                c=in.next();\n                if(s.contains(c)){\n                    int e=s.indexOf(c);\n                    if(Math.abs(s.length()-(e+1))<Math.abs(1-(e+1))){\n                        String t=\"\";\n                        for (int j = 0; j < s.length()-e-1; j++) {\n                           t=s.substring(e+1, s.length()).charAt(j)+t; \n                        }\n                        s=s.substring(0, e)+t;\n                        System.out.println(\"After \"+c+\" leaves, the order is \"+s+\".\");\n                    }\n                    else{\n                        String t=\"\";\n                        for (int j = 0; j < e; j++) {\n                           t=s.substring(0, e).charAt(j)+t; \n                        }\n                        s=t+s.substring(e+1, s.length());\n                        System.out.println(\"After \"+c+\" leaves, the order is \"+s+\".\");\n                    }\n                }\n            }\n            s=in.next();\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic  static  void  main(String[] args) \n\t{\n\t\tScanner inp = new  Scanner(System.in);\n\t\twhile(inp.hasNext())\n\t\t{\n\t\t\tint n = inp.nextInt();\n\t\t\tint[] num = new int[n];\n\t\t\tboolean[] stat = new boolean[n];\n\t\t\tfor(int i=0;i<n;i++)\n\t\t\t\tnum[i]=inp.nextInt();\n\t\t\tboolean st = true;\n\t\t\tfor(int i=0;i<num.length-1;i++)\n\t\t\t{\n\t\t\t\tint def = Math.abs(num[i]-num[i+1]);\n\t\t\t\t\n\t\t\t\tif(def<1 || def>n-1)\n\t\t\t\t{\n\t\t\t\t\tst = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(stat[def])\n\t\t\t\t{\n\t\t\t\t\tst = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tstat[def]=true;\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(st? \"Jolly\" : \"Not jolly\");\n\t\t}\n\t}\n}\n\n", "score": 0.0}
{"id": "SHARE_1_2717_14__1_2717_37", "golden_code": "import java.lang.reflect.Array;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n\npublic class Main{\n\n\tstatic char[] str;\n\tpublic static void main(String[] args) {\n\t\t\n\t\t\n\t\tScanner scanner=new Scanner(System.in);\n\t\t\n\t\twhile(true)\n\t\t{\n\t\tString zzzz=scanner.nextLine();\n\t\tif(Integer.parseInt(zzzz)==0)\n\t\t\tbreak;\n\t\t\n\t\tString first=scanner.nextLine();\n\t\tString second=scanner.nextLine();\n\t\tMain.str=scanner.nextLine().toCharArray();\n\t\t\n\t\tSystem.out.println(calc(first.toCharArray(), second.toCharArray()));\n\t\t}\n\t}\n\t\n\t\n\tpublic static int calc(char[] f,char[] sec)\n\t{\n\t\n\t\t//System.out.println(s1);\n\t\t//System.out.println(s2);\n\t\t\n\t\tchar[] s1=f;\n\t\tchar[] s2=sec;\n\n\t\t\n\t\tchar[] tempArr=new char[Main.str.length];\n\t\tfor(int i=0;i<Main.str.length;i++)\n\t\t\ttempArr[i]=Main.str[i];\n\t\t\n//\t\tSystem.out.println(tempArr.length);\n\t\tint steps=1;\n\t\t\n\t\tint pt=0;\n\t\t\n\t\twhile(steps<=49)\n\t\t{\n\t\t\n\t\tpt=0;\t\n//\t\tSystem.out.println(s1);\n//\t\tSystem.out.println(s2);\n//\t\tSystem.out.println(\"bye\");\n\t\tfor(int i=0;i<s2.length;i++)\n\t\t{\t\t\n\t\ttempArr[pt]=s2[i];\n\t\tpt++;\n\t\ttempArr[pt]=s1[i];\n\t\tpt++;\n\t\t}\n\t\n\t\tint counter=0;\n\t\tfor(int z=0;z<Main.str.length;z++)\n\t\t\tif(tempArr[z]==Main.str[z])\n\t\t\t\tcounter++;\n\t\t\n\t\tif(counter==Main.str.length)\n\t\t{\n\t//\t\tSystem.out.println(\"END\");\n\t\t\treturn steps;\n\t\t}\n\t\telse\n\t\t{\n\t//\t\tSystem.out.println(s1);\n\t//\t\tSystem.out.println(s2);\n\t//\t\tSystem.out.println(tempArr);\n\t//\t\tSystem.out.println(Main.str);\n\t//\t\tSystem.out.println(\"--------\");\n\t\t}\n\t\t\n\t\tsteps++;\n\t\t\n\t\tfor(int k=0;k<s1.length;k++)\n\t\t\ts1[k]=tempArr[k];\n\t\tfor(int k=0;k<s2.length;k++)\n\t\t\ts2[k]=tempArr[k+s1.length];\n\t\t\n\t\t}\n\t\treturn -1;\n\t}\n}\n", "generated_code": "import java.util.*;\npublic class Main {\n\tpublic static void main(String[]args){\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\t\n\t\t\n\t\twhile(n!=0){\n\t\t\tboolean state=false;\n\t\t\tString str=\"\";\n\t\t\tint counter=1;\n\t\t\tString s1= sc.next();\n\t\t\tString s2= sc.next();\n\t\t\tString s= sc.next();\n\t\t\twhile(counter<=50){\n\t\t\t\tchar [] S1=new char[n];\n\t\t\t\tchar [] S2=new char[n];\n\t\t\t\tchar [] S=new char[n];\n\t\t\t\tString [] S12=new String[2*n];\n\t\t\t\tstr=\"\";\n\t\t\t\tfor( int i=0;i<n;i++){\n\t\t\t\t\tS1[i]=s1.charAt(i);\n\t\t\t\t\tS2[i]=s2.charAt(i);\n\t\t\t\t\tstr=str+S2[i]+S1[i];\n\t\t\t\t}\n\t\t\t\tif(str.equals(s)){\n\t\t\t\t\tSystem.out.println(counter);\n\t\t\t\t\tcounter=50;\n\t\t\t\t\tstate=true;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tS1=str.substring(0, n).toCharArray();\n\t\t\t\t\tS2=str.substring(n, 2*n).toCharArray();\n\t\t\t\t\ts1=str.substring(0, n);\n\t\t\t\t\ts2=str.substring(n, 2*n);\n\t\t\t\t}\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t\tif(!state){\n\t\t\t\tSystem.out.println(\"-1\");\n\t\t\t}\n\t\t\tn=sc.nextInt();\n\t\t}\n\t}\n}\n\n\n", "score": 1.0}
{"id": "SHARE_1_2735_9__1_2734_45", "golden_code": "\n\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tsc.nextLine();\n\t\tint max = 0;\n\t\tint total;\n\t\tint row = 0;\n\t\tint column = 0;\n\t\tint array[][] = null;\n\t\tint rows[] = null;\n\t\tint columns[] = null;\n\t\tfor (int x = 0; x < n; x++) {\n\t\t\tmax = 0;\n\t\t\ttotal = 0;\n\t\t\trow = sc.nextInt();\n\t\t\tcolumn = sc.nextInt();\n\t\t\tarray = new int[row][column];\n\t\t\trows = new int[row];\n\t\t\tcolumns = new int[column];\n\t\t\tfor (int j = 0; j < row; j++) {\n\t\t\t\tfor (int k = 0; k < column; k++) {\n\t\t\t\t\tarray[j][k] = sc.nextInt();\n\t\t\t\t}\n\t\t\t\tsc.nextLine();\n\t\t\t}\n\n\t\t\tfor (int p = 0; p < row; p++) {\n\t\t\t\tfor (int q = 0; q < column; q++) {\n\t\t\t\t\trows[p] += array[p][q];\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int p = 0; p < column; p++) {\n\t\t\t\tfor (int q = 0; q < row; q++) {\n\t\t\t\t\tcolumns[p] += array[q][p];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (int i = 0; i < row; i++)\n\t\t\t\tfor (int j = 0; j < column; j++) {\n\t\t\t\t\t// int total = 0;\n\t\t\t\t\ttotal = 0;\n\t\t\t\t\tfor (int p = 1; p < row; p++) {\n\t\t\t\t\t\t// for(int q=0;q<row;q++){\n\t\t\t\t\t\tif (i + p == row || j + p == column)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\ttotal += array[i + p][j + p];\n\t\t\t\t\t\tif (i + p == row - 1 || j + p == column - 1)\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\t\t\t\t\tfor (int p = 1; p < row; p++) {\n\t\t\t\t\t\t// for(int q=0;q<row;q++){\n\t\t\t\t\t\tif (i - p < 0 || j - p < 0)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\ttotal += array[i - p][j - p];\n\t\t\t\t\t\tif (i - p == 0 || j - p == 0)\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\t\t\t\t\tfor (int p = 1; p < row; p++) {\n\t\t\t\t\t\t// for(int q=0;q<row;q++){\n\t\t\t\t\t\tif (i - p < 0 || j + p == column)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\ttotal += array[i - p][j + p];\n\t\t\t\t\t\tif (i - p == 0 || j + p == column - 1)\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\t\t\t\t\tfor (int p = 1; p < row; p++) {\n\t\t\t\t\t\t// for(int q=0;q<row;q++){\n\t\t\t\t\t\tif (j - p < 0 || i + p == row)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\ttotal += array[i + p][j - p];\n\t\t\t\t\t\tif (i + p == row - 1 || j - p == 0)\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\t\t\t\t\ttotal -= array[i][j];\n\t\t\t\t\ttotal += rows[i];\n\t\t\t\t\ttotal += columns[j];\n\t\t\t\t\tif (total > max) {\n\t\t\t\t\t\tmax = total;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tSystem.out.println(max);\n\t\t}\n\t\t// System.out.println(rows[1]);\n\t\t// System.out.println(columns[1]);\n\t}\n}\n", "generated_code": "\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        while (t-- > 0) {\n            int n = in.nextInt(), w = in.nextInt(), s = 0, c = 0;\n            int[] a = new int[n];\n            for (int i = 0; i < n; i++) {\n                s += a[i] = in.nextInt();\n            }\n            if (s < w) {\n                System.out.println(\"No solution!\");\n            } else {\n                Arrays.sort(a);\n                s = 0;\n                for (int i = n - 1; i >= 0; i--) {\n                    s += a[i];\n                    c++;\n                    if (s >= w) {\n                        System.out.println(c);\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1959_39__1_1959_80", "golden_code": "import java.util.Scanner;\nimport java.util.StringTokenizer;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile (in.hasNextLine()) {\n\t\t\tStringTokenizer stk = new StringTokenizer(in.nextLine());\n\t\t\tstk.nextToken();\n\t\t\tint l = 0;\n\t\t\tint r = 0;\n\t\t\tint n = 0;\n\t\t\twhile (stk.hasMoreTokens()) {\n\t\t\t\tn++;\n\t\t\t\tif (n % 2 == 0) {\n\t\t\t\t\tl += Integer.parseInt(stk.nextToken());\n\t\t\t\t} else {\n\t\t\t\t\tr += Integer.parseInt(stk.nextToken());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (r > l) {\n\t\t\t\tSystem.out.println(((n + 1) / 2 - r) + l);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(n / 2 - l + r);\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n", "generated_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile (in.hasNext()) {\n\t\t\tbyte[] a = new byte[in.nextByte()];\n\t\t\tbyte m1 = 0, m2 = 0;\n\t\t\tfor (byte i = 0; i < a.length; i++) {\n\t\t\t\ta[i] = in.nextByte();\n\t\t\t\tif (i % 2 == 0) {\n\t\t\t\t\tif (a[i] == 1)\n\t\t\t\t\t\tm1++;\n\t\t\t\t\telse\n\t\t\t\t\t\tm2++;\n\t\t\t\t} else {\n\t\t\t\t\tif (a[i] == 0)\n\t\t\t\t\t\tm1++;\n\t\t\t\t\telse\n\t\t\t\t\t\tm2++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(m1 > m2 ? m2 : m1);\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_2737_21__1_2736_9", "golden_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint total = scanner.nextInt();\n\t\tfor (int i = 0; i < total; i++) {\n\t\t\tint n = scanner.nextInt();\n\t\t\tint m = scanner.nextInt();\n\t\t\tSystem.out.println(m * n * (m + n - 2) / 2);\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\nimport org.omg.CORBA.PUBLIC_MEMBER;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint inputnumber = scan.nextInt();\n\t\tlong n = 0;\n\t\tlong m = 0;\n\t\tlong p = 0;\n\t\tlong sum;\n\t\tfor (int i = 0; i < inputnumber; i++) {\n\t\t\tn = scan.nextInt();\n\t\t\tm = scan.nextInt();\n\t\t\tp = scan.nextInt();\n\t\t\tsum = 0;\n\t\t\tlong s = 0;\n\t\t\tfor (long j = 1; j <= n; j++) {\n\t\t\t\tfor (long k = 1; k <= m; k++) {\n\t\t\t\t\tif (j > k) {\n\t\t\t\t\t\ts = BMM(j, k);\n\t\t\t\t\t\tsum += s * p;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ts = BMM(k, j);\n\t\t\t\t\t\tsum += s * p;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(sum);\n\n\t\t}\n\t}\n\n\tpublic static long BMM(long a, long b) {\n\t\tlong s = 0;\n\t\tlong h = 1;\n\t\twhile (h != 0) {\n\t\t\ts = a / b;\n\t\t\th = a - s * b;\n\t\t\ta = b;\n\t\t\tif (h != 0) {\n\t\t\t\tb = h;\n\t\t\t}\n\t\t}\n\t\treturn b;\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_101077_1__1_2740_9", "golden_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main\n{\n\tstatic BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\tstatic PrintWriter writer = new PrintWriter(System.out);\n    public static void main(String[] args) throws Exception\n    {\n        int tc = Integer.parseInt(reader.readLine());\n        while (tc-- > 0)\n        {\n        \tint n = Integer.parseInt(reader.readLine());\n        \tRect[] rect = new Rect[n];\n        \tStringTokenizer st = new StringTokenizer(reader.readLine());\n        \tfor(int i = 0 ; i < n ; i++)\n        \t\trect[i] = new Rect(Integer.parseInt(st.nextToken()),Integer.parseInt(st.nextToken()));\n        \tArrays.sort(rect);\n        \tboolean ok[] = new boolean[n];\n        \tint x = rect[0].x , y = rect[0].y;\n        \tint res = 0 ;\n        \twhile(true)\n        \t{\n    \t\t\tint i = 0 ;\n    \t\t\tfor( ; i < n && ok[i] ; i++);\n    \t\t\tif(i == n)\n    \t\t\t\tbreak;\n    \t\t\tok[i] = true;\n    \t\t\tfor(int j = i+1 ; j < n ; j++)\n    \t\t\t\tif(!ok[j] && rect[i].x < rect[j].x && rect[i].y < rect[j].y)\n    \t\t\t\t{\n    \t\t\t\t\ti = j ;\n    \t\t\t\t\tok[j] = true;\n    \t\t\t\t}\n    \t\t\tres++;\n        \t}\n        \twriter.println(res);\n        }\n        writer.flush();\n        writer.close();\n    }\n    static class Rect implements Comparable<Rect>\n    {\n    \tint x , y;\n    \tpublic Rect(int x , int y)\n    \t{\n    \t\tthis.x = x;\n    \t\tthis.y = y;\n    \t}\n    \tpublic int compareTo(Rect a)\n    \t{\n    \t\tif(a.y == y)\n    \t\t\treturn a.x-x;\n    \t\treturn y-a.y;\n    \t}\n    }\n}", "generated_code": "\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\tint t = in.nextInt();\n\t\tString s = new String();\n\t\t\n\t\tin.nextLine();\n\t\t\n\t\tfor (int i = 0; i < t; i++) {\n\t\t\t\n\t\t\t s = in.nextLine();\n\t\t\t String [] s1 = s.split(\" \");\n\n\t\t\t if(s1[0].isEmpty() || s1[1].isEmpty()){\n\t\t\t\t System.out.println(\"Scenario #\"+(i+1)+\":\");\n\t\t\t\t System.out.println(\"impossible\");\n\t\t\t\t }\n\t\t\t \n\t\t\t int n = Integer.parseInt(s1[1]);\n\t\t\t int w = Integer.parseInt(s1[0]);\n\t\t\t\n\t\t\t s=in.nextLine();\n\t\t\t String []s2= s.split(\" \");\n\t\t\t \n\t\t\t int []num = new int[n];\n\t\t\t \n\t\t\t for (int j = 0; j < n; j++) \n\t\t\t\t \tnum[j] = Integer.parseInt(s2[j]);\n\t\t\t \n\t\t\n\t\t\t\n\t\t\t Arrays.sort(num);\n\t\t\n\t\t\t \n\t\t\tint maxnum = 0;\n\t\t\tint max = 0;\n\t\t\t\n\t\t\tfor (int j = 0; j < n; j++){\n\t\t\t\t\n\t\t\t \t\tif(maxnum<w){\n\t\t\t \t\t\tmaxnum+=num[n-1-j];\n\t\t\t \t\t\tmax++;\n\t\t\t \t\t\t//System.out.println(max);\n\t\t\t \t\t\t//System.out.println(num[n-1-j]);\n\t\t\t \t\t\t\n\t\t\t \t\t}\n\t\t\t \t\tif(maxnum>=w){\n\t\t\t \t\t\tSystem.out.println(\"Scenario #\"+(i+1)+\":\");\n\t\t\t\t\t\tSystem.out.println(max);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\t\t\n\t\t\t}\n\t\t\t \n\t\t\t \n\t\t\t if((max == n && maxnum<w ) || max ==0 ){\n\t\t\t\t System.out.println(\"Scenario #\"+(i+1)+\":\");\n\t\t\t\t System.out.println(\"impossible\");\n\t\t\t\t\n\t\t\t }\n\t\t\n\t\t}\n\t\t\n\t}\n\n}\n\n\n", "score": 0.0}
{"id": "SHARE_1_1006_127__1_1079_11", "golden_code": "import java.util.Scanner;\nimport java.util.ArrayList;\n\npublic class Main {\n\tpublic static void main(String argv[]) {\n\t\tArrayList<Double> sums = new ArrayList<Double>();\n\t\tsums.add(0.0);\n\t\tfor(int i =1; i < 521; i ++)\n\t\t\tsums.add(sums.get(i-1) + (1.0/(i + 1)));\n\t\tDouble val;\n\t\tScanner in = new Scanner(System.in);\n\t\tval = in.nextDouble();\n\t\twhile(val != 0){\n\t\t\tfor(int i =0; i < 521; i ++)\n\t\t\t\tif(sums.get(i) >= val){\n\t\t\t\t\tSystem.out.println(Integer.toString(i) + \" card(s)\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tval = in.nextDouble();\n\t\t}\n\t \n\t}\n}", "generated_code": "//1079\nimport java.util.Scanner;\n\n\npublic class Main {\n    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        int a[] = new int[100];\n        int x,j=0;\n        for(;true;){\n            x = in.nextInt();\n            if(x==0)\n                break;\n            a[j++] = x;\n        }\n        System.out.println(\"PERFECTION OUTPUT\");\n        for(int i = 0;i<j;i++){\n            int res = 0;\n            for(int p = 1;p<=a[i]/2;p++)\n                res += a[i]%p==0?p:0;\n            System.out.println(String.format(\"%5d  %s\", a[i],res==a[i]?\"PERFECT\":res<a[i]?\"DEFICIENT\":\"ABUNDANT\"));\n        }\n        System.out.println(\"END OF OUTPUT\");\n        \n    }\n    \n}\n", "score": 0.0}
{"id": "SHARE_1_1001_276__1_1001_457", "golden_code": "\n\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\n\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter writer = new PrintWriter(new BufferedOutputStream(System.out));\n        while (reader.ready()) {\n            StringTokenizer tokenizer = new StringTokenizer(reader.readLine());\n            int a = Integer.valueOf(tokenizer.nextToken());\n            int b = Integer.valueOf(tokenizer.nextToken());\n            writer.printf((a + b) + \"%n\");\n        }\n        writer.flush();\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\n/**\n *\n * @author ali\n */\npublic class Main {\n    \n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        \n        int a , b;\n        while(s.hasNext()){\n        a = s.nextInt();\n        b = s.nextInt();\n        \n        System.out.println((a+b) + \"\");\n        }\n        \n    }\n    \n    \n    \n}\n", "score": 1.0}
{"id": "SHARE_1_2822_44__1_2822_40", "golden_code": "\n\nimport java.util.Scanner;\n\n/**\n *\n * @author parimah\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner sc=new Scanner(System.in);\n        int n=0;\n        int t=0;\n        n=sc.nextInt();\n        \n        for(int i=0;i<n;i++)\n        {\n            int sumf=0;\n            int sumz=0;\n            t=sc.nextInt();\n            System.out.print((t*(t+1))/2+\" \");\n            int s=0;\n            for(int j=1;j<=t*2;j++)\n            {\n                if(j%2!=0)\n                {\n                    sumf+=j;\n                }\n                else\n                    sumz+=j;\n            }\n            System.out.println(sumf+\" \"+sumz);\n\n        }\n    }\n    \n}", "generated_code": "\n\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc = new Scanner(System.in);\n\t\tint cases = sc.nextInt();\n\t\tfor(int i = 0 ; i<cases ; i++)\n\t\t\tnormal(sc.nextInt());\n\t}\n\t\n\tpublic static void normal(int n){\n\t\tlong res = (n*(n+1))/2;\n\t\tSystem.out.print(res);\n\t\tlong resodd = (n*(n+1))-n;\n\t\tSystem.out.print(\" \"+resodd);\n\t\tlong reeven = (n*(n+1));\n\t\tSystem.out.print(\" \"+reeven);\n\t\tSystem.out.println();\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_2499_73__1_2499_68", "golden_code": "import java.util.Scanner;\npublic class Main {\n    static Scanner in= new Scanner( System.in);\n    public static void cal( int age, int weight, int strength){\n        String st=\"\";\n        if(age> 0 && age<= 30&& weight>= 70 && strength>= 500)\n               st+= \"Mid-field \";\n        if( age> 0 && age<= 26 && weight>= 60 && strength>= 200)\n            st+= \"Forward \";\n        if( age> 0 && age<= 36&& weight>= 80 && strength>= 300)\n            st+= \"Defense \";\n        if( st == null ? \"\" == null : st.equals(\"\"))\n            st+= \"No positions \";\n        String st2=\"\";\n        for( int i= 0; i< st.length()-1; i++)\n            st2+= st.charAt(i);\n        System.out.println(st2);\n    }\n    public static void main(String[] args) {\n        int age= 5, weight= 5, strength= 5;\n        while( age!= 0 || weight!= 0 || strength!= 0){\n            age= in.nextInt();\n            weight= in.nextInt();\n            strength= in.nextInt();\n            if( age!= 0 || weight!= 0 || strength!= 0)\n            cal(age, weight, strength);\n        }        \n    }\n}\n", "generated_code": "\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in=new Scanner(System.in);\n        while(true)\n        {\n            int a=in.nextInt();\n            int w=in.nextInt();\n            int g=in.nextInt();\n            if(a==0&&w==0&&g==0)\n                return;\n            ArrayList<String> f=new ArrayList<String>();\n            if(a<=30 && w>=70 && g>=500)\n                f.add(\"Mid-field\");\n            if(a<=26 && w>=60 && g>=200)\n                f.add(\"Forward\");\n            if(a<=36 && w>=80 && g>=300)\n                f.add(\"Defense\");\n            if (f.size()<1) {\n                System.out.println(\"No positions\");\n            }else\n            {\n                for (int i = 0; i < f.size(); i++) {\n                    if(i!=0)\n                        System.out.print(\" \");\n                    System.out.print(f.get(i));\n                }\n                System.out.println();\n            }\n            \n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_127__1_1001_455", "golden_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main ( String[] args)\n\t{\n\tScanner scan = new Scanner ( System.in);\n\tint sum=0;\n\twhile ( scan.hasNextLine())\n\t{\n\tint num1=scan.nextInt();\n\tint num2 = scan.nextInt();\n\t sum = num1+num2;\n\tSystem.out.println(sum);\n\t}\n\t\n\t}\n}", "generated_code": "import java.util.*;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner cin = new Scanner(System.in);\n\t\twhile(cin.hasNext()){\n\t\t\tlong a = cin.nextLong();\n\t\t\tlong b = cin.nextLong();\n\t\t\tSystem.out.println(a + b);\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_143__1_1001_465", "golden_code": "import java.util.Scanner;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scan = new Scanner(System.in);\n        while(scan.hasNext())\n            System.out.println(scan.nextInt()+scan.nextInt());\n    }\n}", "generated_code": "import java.util.Scanner;\n\n/**\n *\n * @author Sanaan\n */\npublic class Main {\n\n\n    public static void main(String[] args) {\n        \n        int a,b;\n        Scanner sc=new Scanner(System.in);\n        while(sc.hasNext()){\n            a=sc.nextInt();\n            b=sc.nextInt();\n            System.out.println(a+b + \"\");\n        }\n        \n    }\n    \n}", "score": 1.0}
{"id": "SHARE_1_2590_7__1_1228_16", "golden_code": "import java.io.IOException;\nimport java.util.Arrays;\nimport java.util.PriorityQueue;\nimport java.util.Scanner;\nimport java.util.StringTokenizer;\n\npublic class Main\n{\n\tpublic static void main(String [] args) throws IOException\n\t{\n\t\tScanner scanner = new Scanner(System.in);\n\n\t\twhile(true)\n\t\t{\n\t\t\tint v = scanner.nextInt();\n\t\t\tint e = scanner.nextInt();\n\n\t\t\tint [][] graph = new int[v][v];\n\t\t\tfor(int i = 0 ; i < e ; i++)\n\t\t\t{\n\t\t\t\tStringTokenizer st = new StringTokenizer(scanner.next(), \"(, )\");\n\t\t\t\tfor(int j = 0 ; st.hasMoreElements() ; j++)\n\t\t\t\t{\n\t\t\t\t\tint a = Integer.parseInt(st.nextToken());\n\t\t\t\t\tint b = Integer.parseInt(st.nextToken());\n\n\t\t\t\t\tgraph[a][b] = ++graph[b][a];\n\t\t\t\t\te--;\n\t\t\t\t}\n\t\t\t\te++;\n\t\t\t}\n\t\t\tint [][][] tmp =new int[v][v][v];\n\t\t\tfor(int i = 0 ; i < v ; i++)\n\t\t\t\ttmp[i] = copy(graph, v);\n\n\t\t\tint res = Integer.MAX_VALUE/2;\n\n\t\t\tfor(int i = 1 ; i < v ; i++)\n\t\t\t\t\tres = Math.min(res, Max_Flow.find(tmp[i], i, 0));\n\n\t\t\tSystem.out.println(v <= 1 ? 0 : res);\n\t\t}\n\t}\n\n\tprivate static int[][] copy(int[][] graph, int v)\n\t{\n\t\tint [][] res = new int[v][v];\n\n\t\tfor(int i = 0 ; i < v ; i++)\n\t\t\tfor(int j = 0 ; j < v ; j++)\n\t\t\t\tres[i][j] = graph[i][j];\n\n\t\treturn res;\n\t}\n}\nclass Max_Flow\n{\n\tpublic static int find(int[][] graph, int SOURCE, int SINK)\n\t{\n\t\tint res = 0;\n\t\tint tmp;\n\t\twhile ((tmp = path(graph, SOURCE, SINK)) != 0) res += tmp;\n\t\treturn res;\n\t}\n\n\tprivate static int path(int[][] graph, int source, int sink)\n\t{\n\t\tint n = graph.length;\n\t\tint[] value = new int[n];\n\t\tint[] prev = new int[n];\n\t\tboolean[] visited = new boolean[n];\n\t\tArrays.fill(prev, -1);\n\n\t\tPriorityQueue<Node> queue = new PriorityQueue<Node>();\n\t\tqueue.add(new Node(source, Integer.MAX_VALUE/2));\n\t\tvalue[source] = Integer.MAX_VALUE/2;\n\n\t\twhile (!queue.isEmpty())\n\t\t{\n\t\t\tNode at = queue.poll();\n\t\t\tif(visited[at.at]) continue;\n\t\t\tvisited[at.at] = true;\n\t\t\tif(at.at == sink) break;\n\n\t\t\tfor(int i = 0;i < n;i++)\n\t\t\t\tif(graph[at.at][i] != 0)\n\t\t\t\t\tif(!visited[i])\n\t\t\t\t\t\tif(value[i] < Math.min(value[at.at], graph[at.at][i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvalue[i] = Math.min(value[at.at], graph[at.at][i]);\n\t\t\t\t\t\t\tprev[i] = at.at;\n\t\t\t\t\t\t\tqueue.add(new Node(i, value[i]));\n\t\t\t\t\t\t}\n\t\t}\n\n\t\tif(prev[sink] == -1) return 0;\n\t\tint at = sink;\n\t\twhile (at != source)\n\t\t{\n\t\t\tgraph[prev[at]][at] -= value[sink];\n\t\t\tgraph[at][prev[at]] += value[sink];\n\t\t\tat = prev[at];\n\t\t}\n\t\treturn value[sink];\n\t}\n\n\tstatic class Node implements Comparable<Node>\n\t{\n\t\tint at;\n\t\tint flow;\n\n\t\tpublic Node(int a, int b)\n\t\t{\n\t\t\tat = a;\n\t\t\tflow = b;\n\t\t}\n\n\t\tpublic int compareTo(Node a)\n\t\t{\n\t\t\treturn a.flow-flow;\n\t\t}\n\t}\n}\n\n", "generated_code": "import java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n//this is for the problem u Calculate e\npublic class Main {\n\tpublic static void main(String argv[]) {\n\t\tDecimalFormat df = new DecimalFormat(\"#.#########\");\n\t\tScanner in = new Scanner(System.in);\n\t\tArrayList<Integer> factorial = new ArrayList<>();\n\t\tArrayList<Double> e_values = new ArrayList();\n\t\tfactorial.add(1);\n\t\te_values.add(1.0);\n\t\tSystem.out.println(\"n e\");\n\t\tSystem.out.println(\"- -----------\");\n\t\tSystem.out.println(\"0 1\");\n\t\tfor(int i=1; i<10; i ++) {\n\t\t\tfactorial.add(factorial.get(i-1) * i);\n\t\t\te_values.add(e_values.get(i-1) + (1.0/factorial.get(i)));\n\t\t\tif(i != 8)\n\t\t\t\tSystem.out.println(Integer.toString(i) + ' ' + df.format(e_values.get(i)));\t\t\n\t\t\telse\n\t\t\t\tSystem.out.println(\"8 2.718278770\");\n\t\t}\n\t\t\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_5_1013_27__5_1013_15", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\nclass Points {\n\tpublic Integer x = 0;\n\tpublic Integer y = 0;\n}\n\nclass testcase{\n\tprivate Integer testcasenumber;\n\tpublic void setTestcaseNumber( Integer t){\n\t\ttestcasenumber = t;\n\t}\n\tpublic Integer getTestcaseNumber(){\n\t\treturn testcasenumber;\n\t}\n\tprivate ArrayList<Points> samplepoints = new ArrayList<Points>();\n\tpublic void setSamplePoints( ArrayList<Points> t){\n\t\tsamplepoints = t;\n\t}\n\tpublic ArrayList<Points> getSamlePoints(){\n\t\treturn samplepoints;\n\t}\n}\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner cin = new Scanner(System.in);\n\t\tArrayList<testcase> testcases = new ArrayList<testcase>();\n\t\tArrayList<Integer> numoftestcase = new ArrayList<Integer>();\n\t\tInteger numOfTestcases = 0;\n\t\t//numOfTestcases = cin.nextInt();\n\t\tnumOfTestcases = 1;\n\t\twhile ( numOfTestcases != 0){\n\t\t\tnumOfTestcases += -1;\n\t\t\tInteger testcaseNumber = 1;\n\t\t\tInteger testcasesize = 0;\n\t\t\t//testcaseNumber = cin.nextInt();\n\t\t\tnumoftestcase.add(testcaseNumber);\n\t\t\ttestcasesize = cin.nextInt();\n\t\t\tArrayList<Points> vectorofpoints = new ArrayList<Points>();\n\t\t\tfor(int i=0;i<testcasesize;i++){\n\t\t\t\tPoints newpoint = new Points();\n\t\t\t\tnewpoint.x = cin.nextInt();\n\t\t\t\tnewpoint.y = cin.nextInt();\n\t\t\t\tvectorofpoints.add(newpoint);\n\t\t\t}\n\t\t\t//System.out.println(\"vectorofpoints.size: \"+vectorofpoints.size());\n\t\t\ttestcase tc = new testcase();\n\t\t\ttc.setTestcaseNumber(testcaseNumber);\n\t\t\ttc.setSamplePoints(vectorofpoints);\n\t\t\t//System.out.println(\"tc.samplepoints.size: \"+tc.getSamlePoints().size());\n\t\t\ttestcases.add(tc);\n\t\t\ttc = null;\n\t\t}\n\t\tfor(int i=0;i<testcases.size();i++){\n\t\t\t//System.out.println(\"testcases.get(i).size: \"+testcases.get(i).getSamlePoints().size());\n\t\t\tArrayList<Integer>result = convexHull(testcases.get(i).getSamlePoints());\n\t\t\t//System.out.println(testcases.get(i).getTestcaseNumber()  +\" \"+result.size());\n\t\t\tArrayList<Points> finalPoints = new ArrayList<Points>();\n\t\t\tint counter = 0;\n\t\t\tfor(int j=0;j<result.size()-2;j++){\n\t\t\t\tif(!(slope(testcases.get(i).getSamlePoints().get(result.get(j)),\n\t\t\t\t\t\t\ttestcases.get(i).getSamlePoints().get(result.get(j+1)), \n\t\t\t\t\t\t\t testcases.get(i).getSamlePoints().get(result.get(j+2))))){\n\t\t\t\t\tcounter ++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tcounter = 0;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor(int j=0;j<result.size();j++){\n\t\t\t\t//System.out.println(testcases.get(i).getSamlePoints().get(result.get(j)).x + \",\" + testcases.get(i).getSamlePoints().get(result.get(j)).y);\n\t\t\t\tif(counter == result.size()-2){\n\t\t\t\t\tfinalPoints.add(testcases.get(i).getSamlePoints().get(result.get(0)));\n\t\t\t\t\tdouble maxlength = 0.0; \n\t\t\t\t\tint id = 0;\n\t\t\t\t\tfor(int z=0;z<result.size();z++){\n\t\t\t\t\t\tdouble x = Math.sqrt(Math.pow((testcases.get(i).getSamlePoints().get(result.get(0)).y-\n\t\t\t\t\t\t\t\ttestcases.get(i).getSamlePoints().get(result.get(z)).y),2)+\n\t\t\t\t\t\t\t\tMath.pow((testcases.get(i).getSamlePoints().get(result.get(0)).x-\n\t\t\t\t\t\t\t\ttestcases.get(i).getSamlePoints().get(result.get(z)).x),2));\n\t\t\t\t\t\tif(x > maxlength){\n\t\t\t\t\t\t\tmaxlength = x;\n\t\t\t\t\t\t\tid = z;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfinalPoints.add(testcases.get(i).getSamlePoints().get(result.get(id)));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif( j == 0){\n\t\t\t\t\tfinalPoints.add(testcases.get(i).getSamlePoints().get(result.get(j)));\n\t\t\t\t}\n\t\t\t\tif( j == result.size()-1 ){\n\t\t\t\t\t//System.out.println(testcases.get(i).getSamlePoints().get(result.get(j)).x + \",\" + testcases.get(i).getSamlePoints().get(result.get(j)).y);\n\t\t\t\t\tif(!(slope(testcases.get(i).getSamlePoints().get(result.get(j)),\n\t\t\t\t\t\t\ttestcases.get(i).getSamlePoints().get(result.get(j-1)),\n\t\t\t\t\t\t\t\t\ttestcases.get(i).getSamlePoints().get(result.get(j-2))))){\n\t\t\t\t\t\t\n\t\t\t\t\t\tdouble x = Math.sqrt(Math.pow((testcases.get(i).getSamlePoints().get(result.get(j-2)).y-\n\t\t\t\t\t\t\t\ttestcases.get(i).getSamlePoints().get(result.get(j-1)).y),2)+\n\t\t\t\t\t\t\t\tMath.pow((testcases.get(i).getSamlePoints().get(result.get(j-2)).x-\n\t\t\t\t\t\t\t\ttestcases.get(i).getSamlePoints().get(result.get(j-1)).x),2));\n\t\t\t\t\t\tdouble y = Math.sqrt(Math.pow((testcases.get(i).getSamlePoints().get(result.get(j)).y-\n\t\t\t\t\t\t\t\ttestcases.get(i).getSamlePoints().get(result.get(j-2)).y),2)+\n\t\t\t\t\t\t\t\tMath.pow((testcases.get(i).getSamlePoints().get(result.get(j)).x-\n\t\t\t\t\t\t\t\ttestcases.get(i).getSamlePoints().get(result.get(j-2)).x),2));\n\t\t\t\t\t\tif (x > y){\n\t\t\t\t\t\t\tfinalPoints.add(testcases.get(i).getSamlePoints().get(result.get(j-1)));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tfinalPoints.add(testcases.get(i).getSamlePoints().get(result.get(j)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tfinalPoints.add(testcases.get(i).getSamlePoints().get(result.get(j)));\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse if(0<j && j<result.size()-1){\n\t\t\t\t\tif(slope(testcases.get(i).getSamlePoints().get(result.get(j-1)),\n\t\t\t\t\t\t\ttestcases.get(i).getSamlePoints().get(result.get(j)),\n\t\t\t\t\t\t\t\t\ttestcases.get(i).getSamlePoints().get(result.get(j+1)))){\n\t\t\t\t\t\tfinalPoints.add(testcases.get(i).getSamlePoints().get(result.get(j)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\tSystem.out.println(result.size());\n\t\t\t//for(int k=0;k<finalPoints.size();k++){\n\t\t\t//\tSystem.out.println(finalPoints.get(k).x + \" \" + finalPoints.get(k).y );\n\t\t\t//}\n\t\t\tresult.clear();\n\t\t\tfinalPoints.clear();\n\t\t}\n\t\tcin.close();\n\t}\n\t\n\tstatic ArrayList<Integer> convexHull (ArrayList<Points> poInts){\n\t\t\tif (poInts.size()<3){\n\t\t\t\treturn null ;\n\t\t\t}\n\t\t\tArrayList<Integer> Results = new ArrayList<Integer>();\n\t\t\t\n\t\t\tint b = 0;\n\t\t\tfor(int i=1;i<poInts.size();i++){\n\t\t\t\tif(poInts.get(i).x == poInts.get(b).x ){\n\t\t\t\t\tif(poInts.get(i).y < poInts.get(b).y ){\n\t\t\t\t\t\tb = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(poInts.get(i).x < poInts.get(b).x ){\n\t\t\t\t\tb = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tint a=b,c=0;\n\t\t\tdo{\n\t\t\t\tc =(a+1)% poInts.size();\n\t\t\t\tfor(int i=0;i<poInts.size();i++){\n\t\t\t\t\tif(Turning(poInts.get(a),poInts.get(i),poInts.get(c))==1){\n\t\t\t\t\t\tc = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tResults.add(a);\n\t\t\t\ta = c;\n\t\t\t}while(a!=b);\n\t\t\t\n\t\t\treturn Results;\n\t}\n\tstatic int Turning(Points a,Points b,Points c){\n\t\tint val = (b.y - a.y)*(c.x - b.x) - (b.x - a.x)*(c.y - b.y);\n\t\tif(val == 0){\n\t\t\treturn 0;\n\t\t}\n\t\telse if(val > 0){\n\t\t\treturn 1;\n\t\t}\n\t\telse{\n\t\t\treturn 2;\n\t\t}\n\t}\n\tstatic boolean slope(Points a,Points b,Points c){\n\t\tif((c.x == b.x) && (b.x == a.x)){\n\t\t\t//System.out.println(\"Point a \"+a.x+\" \"+a.y);\n\t\t\t//System.out.println(\"Point b \"+b.x+\" \"+b.y);\n\t\t\t//System.out.println(\"Point c \"+c.x+\" \"+c.y);\n\t\t\t//System.out.println(a.x+\" \"+b.x+\" \"+c.x);\n\t\t\treturn false;\n\t\t}\n\t\tif((c.x == b.x) && (a.x != b.x)){\n\t\t\t\n\t\t\t//System.out.println(\"Point a \"+a.x+\" \"+a.y);\n\t\t\t//System.out.println(\"Point b \"+b.x+\" \"+b.y);\n\t\t\t//System.out.println(\"Point c \"+c.x+\" \"+c.y);\n\t\t\treturn true;\n\t\t}\n\t\tif((c.x != b.x) && (a.x == b.x)){\n\t\t\t//System.out.println(\"Point a \"+a.x+\" \"+a.y);\n\t\t\t//System.out.println(\"Point b \"+b.x+\" \"+b.y);\n\t\t\t//System.out.println(\"Point c \"+c.x+\" \"+c.y);\n\t\t\t//System.out.println(a.x+\" \"+b.x+\" \"+c.x);\n\t\t\treturn true;\n\t\t}\n\t\t//System.out.println(\"Point a \"+a.x+\" \"+a.y);\n\t\t//System.out.println(\"Point b \"+b.x+\" \"+b.y);\n\t\t//System.out.println(\"Point c \"+c.x+\" \"+c.y);\n\t\tDouble x = (double)((double)(b.y - a.y)/(double)(b.x - a.x));\n\t\t//System.out.println(\"X: \"+x);\n\t\tDouble y = (double)((double)(c.y - b.y)/(double)(c.x - b.x));\n\t\t//System.out.println(x+\" \"+y);\n\t\t//System.out.println(\"Y: \"+y);\n\t\tif (x.equals(y)){\n\t\t\t//System.out.println(\"Yes\");\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t\t//System.out.println(\"No\");\n\t\t\treturn true;\n\t\t\n\t}\n}\n", "generated_code": "import java.security.AllPermission;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tArrayList<Tuple> ALLInfo=new ArrayList<Tuple>();\n\t\tReadData(ALLInfo);\n\t\tArrayList<Tuple> ConvexHull=new ArrayList<Tuple>();\n\t\tif(ALLInfo.size()==1||ALLInfo.size()==2){\n\t\t\tfor(int i=0;i<ALLInfo.size();i++)\n\t\t\t\taddSingleTuple(ALLInfo.get(i),ConvexHull);\n\t\t}\n\t\tboolean allinline=false;\n\t\tfor(int i=0;i<ALLInfo.size();i++)\n\t\t\tfor(int j=i+1;j<ALLInfo.size();j++){\n\t\t\t\tint[] constants = new int[3];\n\t\t\t\tconstants=determineConstants(ALLInfo.get(i),ALLInfo.get(j));\t\t\t\t\t\t\t\t\n\t\t\t\tint posetive=0;\n\t\t\t\tint negetive=0;\n\t\t\t\tint zero=0;\n\t\t\t\tboolean OK=true;\n\t\t\t\tfor(int k=0;k<ALLInfo.size();k++){\n\t\t\t\t\tif(k==i||k==j)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tint forswitch=determineSign(constants,ALLInfo.get(k));\n\t\t\t\t\tswitch( forswitch){\n\t\t\t\t\tcase 1: posetive++; break;\n\t\t\t\t\tcase 0: zero++; break;\n\t\t\t\t\tcase -1: negetive++; break;\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tif(negetive==ALLInfo.size()-2 || posetive==ALLInfo.size()-2){\n\t\t\t\t\t\n\t\t\t\t\taddTheseTuples(ALLInfo.get(i),ALLInfo.get(j),ConvexHull);\n\t\t\t\t}\n\t\t\t\tif(zero==ALLInfo.size()-2)\n\t\t\t\t\tallinline=true;\n\t\t\t}\n\t\tif(allinline)\n\t\t\taddTheseTuples(ALLInfo.get(0), ALLInfo.get(1), ConvexHull);\n\t\tSystem.out.println(ConvexHull.size());\n\n\t}\n\tprivate static Tuple[] determineEdge(ArrayList<Tuple> ALLInfo) {\n\t\tTuple[] foreturn=new Tuple[2];\n\t\tdouble maxdistance = java.lang.Math.sqrt((\n\t\t\t\tjava.lang.Math.pow(ALLInfo.get(0).CoordinateY-ALLInfo.get(1).CoordinateY\n\t\t\t\t\t\t, 2))+(java.lang.Math.pow(ALLInfo.get(0).CoordinateX-ALLInfo.get(1).CoordinateX\n\t\t\t\t\t\t\t\t, 2)));\n\t\tfor(int i=0;i<ALLInfo.size();i++)\n\t\t\tfor(int j=i+1;j<ALLInfo.size();j++){\n\t\t\t\tdouble tempdis=java.lang.Math.sqrt((\n\t\t\t\t\t\tjava.lang.Math.pow(ALLInfo.get(i).CoordinateY-ALLInfo.get(j).CoordinateY\n\t\t\t\t\t\t\t\t, 2))+(java.lang.Math.pow(ALLInfo.get(i).CoordinateX-ALLInfo.get(j).CoordinateX\n\t\t\t\t\t\t\t\t\t\t, 2)));\n\t\t\t\tif(maxdistance<tempdis){\n\t\t\t\t\tforeturn[0]=ALLInfo.get(i);\n\t\t\t\t\tforeturn[1]=ALLInfo.get(j);\n\t\t\t\t}\n\t\t\t}\n\t\treturn foreturn;\n\t\t\n\t\t\n\t}\n\tprivate static void addSingleTuple(Tuple input,ArrayList<Tuple> ConvexHull){\n\t\tConvexHull.add(input);\n\t}\n\tprivate static void addTheseTuples(Tuple tuple, Tuple tuple2,\n\t\t\tArrayList<Tuple> convexHull) {\n\t\tboolean firstFound=false;\n\t\tboolean secondFound=false;\n\t\t// TODO Auto-generated method stub\n\t\tfor(int i=0;i<convexHull.size();i++){\n\t\t\tif(tuple.CoordinateX==convexHull.get(i).CoordinateX &&\n\t\t\t\t\ttuple.CoordinateY==convexHull.get(i).CoordinateY)\n\t\t\t\tfirstFound=true;\n\t\t\tif(tuple2.CoordinateX==convexHull.get(i).CoordinateX &&\n\t\t\t\t\ttuple2.CoordinateY==convexHull.get(i).CoordinateY)\n\t\t\t\tsecondFound=true;\n\t\t}\n\t\tif(!firstFound)\n\t\t\tconvexHull.add(tuple);\n\t\tif(!secondFound)\n\t\t\tconvexHull.add(tuple2);\n\t\t\n\t}\n\tprivate static int determineSign(int[] constants, Tuple tuple) {\n\t\t// TODO Auto-generated method stub\n\t\tint meghdar=(constants[0]*tuple.CoordinateX)+\n\t\t\t\t(constants[1]*tuple.CoordinateY)+\n\t\t\t\tconstants[2];\n\t\treturn (int)Math.signum(meghdar\n\t\t\t\t);\n\t}\n\tprivate static int[] determineConstants(Tuple pointOne, Tuple pointTwo) {\n\t\t// TODO Auto-generated method stub\n\t\tint[] constants = new int[3];\n\t\tconstants[0]=pointTwo.CoordinateY-pointOne.CoordinateY;\n\t\tconstants[1]=pointOne.CoordinateX-pointTwo.CoordinateX;\n\t\tconstants[2]=pointOne.CoordinateY*pointTwo.CoordinateX-\n\t\t\t\tpointOne.CoordinateX*pointTwo.CoordinateY\n\t\t\t\t;\n\t\treturn constants;\n\t\t\t\t\n\t}\n\tprivate static void ReadData(ArrayList<Tuple> ALLInfo){\n\t\tScanner scanner = new Scanner(System.in);\n\t\tString points=scanner.nextLine();\n\t\tint pointsNumber=Integer.parseInt(points);\n\t\tString buffer;\n\t\tfor(int i=0;i<pointsNumber;i++){\n\t\t\tbuffer=scanner.nextLine();\n\t\t\tTuple temp=ChangeToTuple(buffer);\n\t\t\tALLInfo.add(temp);\n\t\t}\n\t\tscanner.close();\n\t}\n\tprivate static class Tuple{\n\t\tpublic int CoordinateX,CoordinateY;\n\t}\n\tprivate static Tuple ChangeToTuple(String buffer) {\n\t\t// TODO Auto-generated method stub\n\t\tString[] strstp=buffer.split(\" \");\n\t\tTuple foreturn = new Tuple();\n\t\tforeturn.CoordinateX=Integer.parseInt(strstp[0]);\n\t\tforeturn.CoordinateY=Integer.parseInt(strstp[1]);\n\t\treturn foreturn;\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1230_47__1_1104_80", "golden_code": "import java.util.Scanner;\npublic class Main //esmessh bayad in jori bashe\n{\n\tpublic static int add(int n)\n\t{\n\t\tint m=0;\n\t\twhile(n!=0)\n\t\t{\n\t\t\tm+=n%10;\n\t\t\tn=n/10;\n\t\t}\n\t\treturn(m);\n\t}\n//say kon har chi kam tar tabe tarif koni con sorato migire(albate to ACM vali to barname haye karbordi in jori neveshtan behtare)\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan=new Scanner(System.in);\n          // int n=scan.nextInt(); //ba long ham nemishe!   ???? goftam ke adad toye Long ham ja nemish!\n\t\tString a=scan.next();\n\t\twhile(a.charAt(0)!='0')  //chon dari az ro file ta sefr mikhoni\n\t\t{\n       \tint m=0;\n       \tint i=0;\n       \twhile(i<a.length())\n       \t{\n       \t\tm+=a.charAt(i)-'0'; ///tabdil String be adad \n       \t\ti++;\n       \t}\n       \tint s=add(m);\n       \twhile(s>=10)\n       \t\ts=add(s);\n\t\t\tSystem.out.println(s);\n\t\t\ta=scan.next();\n\t  }\n\t}\n}\n// kolan say kon fasele az samte chap ro ro ba Tab bezani na ba Space! injuri moratab tare! kolan say kon moratab tar benevisi yani jori ke khodet badan befahmi chi kar kardi", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc = new Scanner(System.in);\n\t\tint cases = Integer.parseInt(sc.nextLine());\t\t\n\t\tfor (int i = 0; i < cases; i++) {\n\t\t\tString line = sc.nextLine();\n\t\t\tfor (int j = line.length() -1 ; j >= 0 ; j--) {\n\t\t\t\tSystem.out.print(line.charAt(j));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1662_18__1_1353_3", "golden_code": "import java.util.*;\nimport java.util.Map.Entry;\nclass Main {\n\n\tpublic static void main(String[] q) {\n\t\tScanner s = new Scanner(System.in).useDelimiter(\"[\\\\s,.;\\''\\\"()/:-]+\");\n\t\tTreeMap<String, Integer> map = new TreeMap<String,Integer>();\n\t\tint max =-1;\n\t\tString w;\n\t\twhile (s.hasNext()){\n\t\t\tw = s.next().toLowerCase();\n\t\t\tmap.put(w,(map.containsKey(w))?map.get(w)+1:1);\n\t\t\tif (map.get(w)>max)\n\t\t\t\tmax = map.get(w);\n\t\t}\n\t\tSystem.out.println(max+\" occurrences\");\n\t\twhile (!map.isEmpty()){\n\t\t\tEntry<String, Integer> e = map.pollFirstEntry();\n\t\t\tif (e.getValue()==max)\n\t\t\t\tSystem.out.println(e.getKey());\n\t\t}\n\t}\n}\n", "generated_code": "import java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner in = new Scanner(System.in);\n        int testcase = in.nextInt();\n        for (int i = 0; i < testcase; i++) {\n\n            int x = in.nextInt();\n            int y = in.nextInt();\n            if (x == y || x - y == 2) {\n                if (x % 2 == 0) {\n                    System.out.println((x + y));\n\n                } else {\n                    System.out.println(((x + y)) - 1);\n                }\n\n            } else {\n                System.out.println(\"No Number\");\n            }\n\n        }\n\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_132__1_1001_72", "golden_code": "/**\n * 1001. A+B\n * Calculate a + b\n * \n * INPUT\n * The input will consist of a series of pairs of integers a and b,separated by a space, one pair of integers per line.\n * you should read the input until EOF.\n * \n * OUTPUT\n * For each pair of input integers a and b you should output the sum of a and b in one line,\n * and with one line of output for each line in input.\n * \n * @link http://sharecode.ir/problemset/view/1001\n */\n\nimport java.io.*;\nimport java.util.Scanner;\n\npublic class Main {\n\t\n\tint solve(int a, int b) {\n\t\treturn a + b;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\tMain program = new Main();\n\t\t\n\t\twhile( in.hasNext() ) {\n\t\t\tout.println( program.solve( in.nextInt(), in.nextInt() ) );\n\t\t}\n\t\t\n\t\tout.flush();\n\t}\n\t\n}\n", "generated_code": "import java.util.Scanner;\n\n\n\npublic class Main {\n\t  public static void main(String args[]) throws Exception{\n\t    Scanner scan = new Scanner(System.in);\n\t    while(true){\n\t\t    String pairOfStrings = scan.nextLine();\n\t\t    if( pairOfStrings.equals(\"EOF\") )\n\t\t    \tbreak;\n\t        String[] pairOfString = pairOfStrings.split(\" \");\n\t        \n\t        int result  = 0;\n\t        for(int i = 0 ; i < pairOfString.length ; i++){\n\t        result = result + Integer.parseInt(pairOfString[i]);\n\t\t  }\n\t        System.out.println(result);\n\t    }\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1009_52__1_1009_84", "golden_code": "import java.util.*;\nimport java.lang.Math;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner (System.in);\n\t\tdouble sum = 0;\n\t\tfor( int i = 0 ; i < 12 ; i++){\n\t\t\tdouble n = input.nextDouble();\n\t\t\tsum += n; \n\t\t}\n\t\tsum = sum/12;\n\t\tsum = Math.round (sum*100.0);\n\t\tsum = (double) (sum/100.0);\n\t\tSystem.out.println(\"$\"+sum);\n\t}\n}", "generated_code": "import java.text.DecimalFormat;\nimport java.util.Scanner;\n\n\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tdouble avg=0;\n\t\tfor(int i=0;i<12;i++){\n\t\t\tavg+=scanner.nextDouble();\n\t\t}\n\t\tavg/=12;\n\t\tSystem.out.println(\"$\"+new DecimalFormat(\"#.00\").format(avg));\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1099_7__1_106018_29", "golden_code": "\nimport java.util.Scanner;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author sait\n */\nimport java.util.*;\nimport java.util.ArrayList;\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n\n        Scanner scn=new Scanner(System.in);\n        int n;\n        ArrayList<Integer> lst=new ArrayList<Integer>();\n        while((n=scn.nextInt())!=0)\n        {\n\n        int[] arr=new int[n];\n        for (int i= 0; i < n; i++) {\n            arr[i]=scn.nextInt();\n        }\n        int avr=0;\n        for (int i= 0; i < n; i++) {\n            avr+=arr[i];\n        }\n        avr/=n;\n        int count=0;\n        while(!done(arr,avr))\n        {\n            for (int i= 0; i < arr.length; i++)\n            {\n                if (arr[i]>avr)\n                {\n                    for (int j= 0; j < arr.length; j++)\n                    {\n                        if (arr[j]<avr)\n                        {\n                            count++;\n                            arr[i]--;\n                            arr[j]++;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        lst.add(count);\n        }\n        for (int i= 0; i < lst.size(); i++) {\n            System.out.println(\"Set #\"+(i+1));\n            System.out.println(\"The minimum number of moves is \"+lst.get(i)+\".\");\n            System.out.println();\n        }\n\n    }\n\n    static boolean done(int[] arr,int avr)\n    {\n        boolean d=true;\n        for (int i= 0; i < arr.length; i++) {\n            if (arr[i]!=avr)\n            {\n                d=false;\n            }\n        }\n        return d;\n    }\n\n}\n", "generated_code": "import java.util.Scanner ;\npublic class Main\n{\n\tpublic static boolean primnum(int i)\n\t{   boolean B=true;\n            for(int j=2;B==true && j<i;j++)\n                if(i%j==0) B=false;\n            return(B);\n\t}\n\n   public static void main(String[] args)\n   {\n        Scanner scan = new Scanner ( System.in );\n\twhile(scan.hasNext()){\n\tint N = scan.nextInt();\n        String p=\"No\";\n        for (int i=2;i<=Math.sqrt(N);i++)\n            if(N%i==0 && primnum(i)==true && primnum(N/i)==true)\n                p=\"Yes\";\n                System.out.println(p);}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1001_388__1_1001_44", "golden_code": "import java.util.*;\nclass Main{\n\tpublic static void main(String[]a){\n\t\tScanner i=new Scanner(System.in);\n\t\twhile(i.hasNext()){\n\t\tSystem.out.println(i.nextInt()+i.nextInt());\n\t}\n}}", "generated_code": "\nimport java.util.Scanner;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author Emad\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner in = new Scanner(System.in);\n        while(in.hasNext()){\n            int a;\n            int b;\n            a=in.nextInt();\n            b=in.nextInt();\n            System.out.println(a+b);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_408__1_1001_315", "golden_code": "\n\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        int x1,x2;\n        while(input.hasNext())\n        {\n            x1=input.nextInt();\n            x2=input.nextInt();\n            x1+=x2;\n            System.out.println(x1);\n        }\n    }\n    \n}", "score": 1.0}
{"id": "SHARE_1_1104_79__1_1959_41", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        s.nextLine();\n        for (int i = 0; i < n; i++) {\n            String str = s.nextLine();\n            for (int j = str.length()-1; j >= 0; j--) {\n                System.out.print(str.charAt(j));\n            }\n            System.out.println();\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\nimport java.util.StringTokenizer;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile (in.hasNextLine()) {\n\t\t\tStringTokenizer stk = new StringTokenizer(in.nextLine());\n\t\t\tstk.nextToken();\n\t\t\tint l = 0;\n\t\t\tint r = 0;\n\t\t\tint n = 0;\n\t\t\twhile (stk.hasMoreTokens()) {\n\t\t\t\tn++;\n\t\t\t\tif (n % 2 == 0) {\n\t\t\t\t\tl += Integer.parseInt(stk.nextToken());\n\t\t\t\t} else {\n\t\t\t\t\tr += Integer.parseInt(stk.nextToken());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (r > l) {\n\t\t\t\tSystem.out.println(((n + 1) / 2 - r) + l);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(n / 2 - l + r);\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1208_1__1_1209_6", "golden_code": "\n\nimport java.util.Scanner;\n\n/**\n *\n * @author AGC\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner it = new Scanner(System.in);\n       \n        \n        int n1=it.nextInt();\n        \n        for (int i = 0; i < n1; i++) {\n            if(i>0){\n                System.out.println();\n                System.out.println();\n            }\n            int n2=it.nextInt();\n            it.nextLine();\n            for (int j = 0; j < n2; j++) {\n                if(j>0){\n                System.out.println();\n                }\n                String s[]=it.nextLine().split(\" \");\n                for (int k = 0; k < s.length; k++) {\n                    s[k]=new StringBuilder(s[k]).reverse().toString();\n                }\n                for (int k = 0; k < s.length-1; k++) {\n                    System.out.print(s[k]+\" \");\n                }\n                System.out.print(s[s.length-1]);\n                \n                \n            }\n        }\n        System.out.println();\n        \n    }\n    \n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int k = s.nextInt();\n        for (int j = 0; j < k; j++) {\n            for (int i=1;true;i++) {\n                int n = s.nextInt();\n                int m = s.nextInt();\n                if (n == 0 && m == 0) {\n                    break;\n                }\n                int res=0;\n                for (int a = 1; a < n; a++) {\n                    for (int b = a+1; b < n; b++) {\n                        double tmp = (Math.pow(a, 2)+Math.pow(b, 2)+m)/(a*b);\n                        if(Math.floor(tmp) == tmp)\n                            res++;\n                    }\n                }\n                System.out.println(\"Case \"+i+\": \" +res);\n            }\n            if(j != k-1)\n                System.out.println();\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_493__1_1001_251", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\nstatic Scanner in=new Scanner(System.in);\n    public static void main(String[] args) {\nint a,b;\nwhile(in.hasNext()){\na=in.nextInt(); \nb=in.nextInt();\n        System.out.println(a+b);\n    }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_466__1_1001_212", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "generated_code": "import java.util.Scanner;\nimport java.lang.System;\nimport java.lang.String;\npublic class Main {\n\n    public static void main(String[] args) {\n\tScanner input=new Scanner(System.in);\n        try\n        {\n            while (true)\n            {\n                System.out.println(input.nextInt()+input.nextInt());\n            }\n        }\n        catch (Exception e )\n        {\n            System.exit(0);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1230_12__1_1230_116", "golden_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\n\npublic class Main {\n\t\n\tpublic static void main(String []argv){\n\t\tScanner cin = new Scanner(System.in);\n\t\twhile (true){\n\t\t\tBigInteger zero = new BigInteger(\"0\");\n\t\t\tBigInteger number = cin.nextBigInteger();\n\t\t\tif ( number.equals(zero))\n\t\t\t\treturn;\n\t\t\tBigInteger result = new BigInteger(\"0\");\n\t\t\tBigInteger a = new BigInteger(\"10\");\n\t\t\twhile ( true ){\n\t\t\t\twhile ( true ){\n\t\t\t\t\tif (number.equals(zero))\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tresult = result.add(number.mod(a));\n\t\t\t\t\tnumber = number.divide(a);\n\t\t\t\t}\n\t\t\t\tif ( result.compareTo(a) == 1 || result.compareTo(a) == 0){\n\t\t\t\t\tnumber = result;\n\t\t\t\t\tresult = zero;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tSystem.out.println(result);\n\t\t}\n\t}\n}\n", "generated_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class Main {\n\npublic static void main(String[] args) {\n    Scanner s= new Scanner(System.in);\n    while(true) {\n        String line= s.nextLine();\n\n        if(line.equals(\"0\")) {\n          break;\n        }\n        int a = 0;\n        for(int i=0;i<line.length();i++){\n            a+= (line.charAt(i) - '0');\n        }\n\n        int m = maj(a);\n        while (m>9) {\n           m = maj(m);\n        }\n        System.out.println(m);\n    }\n}\npublic static int maj(int a) {\n    if (a<10) {\n        return a;\n    }\n    int yekan = a%10;\n    int baghi=a/10;\n    return yekan + maj(baghi);\n}\n}", "score": 1.0}
{"id": "SHARE_1_2740_8__1_2791_9", "golden_code": "import java.util.*;\npublic class Main {\n\tpublic static Integer[] arr;\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint t = input.nextInt();\n\t\tfor(int i = 1; i <= t; i++){\n\t\t\tlong money = input.nextLong();\n\t\t\tint f = input.nextInt();\n\t\t\tarr = new Integer[f];\n\t\t\tfor(int j =0; j < f; j++)\n\t\t\t\tarr[j] = input.nextInt();\n\t\t\tint temp = count(money, arr);\n\t\t\tif(temp != -1)\n\t\t\t\tSystem.out.println(\"Scenario #\"+i+\":\\n\"+temp);\n\t\t\telse\n\t\t\t\tSystem.out.println(\"Scenario #\"+i+\":\\nimpossible\");\n\t\t}\n\t}\n\tpublic static int count(long money, Integer[] a){\n\t\tArrays.sort(a);\n\t\tlong cnt = 0;\n\t\tint ret = 0;\n\t\tfor(int i =a.length-1; i >=0; i--){\n\t\t\tif(cnt < money){\n\t\t\t\tcnt += a[i];\n\t\t\t\tret ++;\n\t\t\t}\n\t\t\telse\n\t\t\t\tbreak;\n\t\t\t}\n\t\tif(cnt < money)\n\t\t\treturn -1;\n\t\telse\n\t\t\treturn ret;\n\t\t\n\t\t\n\t}\n\n}\n", "generated_code": "\nimport java.util.*;\npublic class Main {\n\tpublic static void main(String []args){\n\t\t\tScanner input=new Scanner(System.in);\n\t\t\t\tint a=input.nextInt();\n\t\t\t\t\tint b=input.nextInt();\n\t\t\t\t\t\tint c=input.nextInt();\n\t\t\t\t\t\t\tint d=input.nextInt();\n\t\t\t\t\t\t\t\tboolean f=true;\n\t\t\t\t\t\t\t\t\t if(a==0 && b==0 && c==0 && d==0)\n\t\t\t\t\t\t\t\t\t \t\t f=false;\n\t\t\t\t\t\t\t\t\t \t\t \twhile(f){\n\t\t\t\t\t\t\t\t\t \t\t \t\t\t\tSystem.out.print((c-b)+\" \");\n\t\t\t\t\t\t\t\t\t \t\t \t\t\t\t\t\tSystem.out.println(d-a);\n\t\t\t\t\t\t\t\t\t \t\t \t\t\t\t\t\t\t\t a=input.nextInt();\n\t\t\t\t\t\t\t\t\t \t\t \t\t\t\t\t\t\t\t \t\t b=input.nextInt();\n\t\t\t\t\t\t\t\t\t \t\t \t\t\t\t\t\t\t\t \t\t \t\t c=input.nextInt();\n\t\t\t\t\t\t\t\t\t \t\t \t\t\t\t\t\t\t\t \t\t \t\t \t\t d=input.nextInt();\n\t\t\t\t\t\t\t\t\t \t\t \t\t\t\t\t\t\t\t \t\t \t\t \t\t \t\t if(a==0 && b==0 && c==0 && d==0)\n\t\t\t\t\t\t\t\t\t \t\t \t\t\t\t\t\t\t\t \t\t \t\t \t\t \t\t \t\t\t f=false;\n\t\t\t\t\t\t\t\t\t \t\t \t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1216_4__1_106015_12", "golden_code": "import java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.text.BreakIterator;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Hashtable;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.Queue;\nimport java.util.Scanner;\nimport java.io.BufferedReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.io.InputStream;\n\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tScanner scan = new Scanner(System.in);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n}\n\nclass TaskC {\n\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tHashMap<Character, Integer> key = new HashMap<Character, Integer>();\n\t\tkey.put('A', 2);\n\t\tkey.put('B', 2);\n\t\tkey.put('C', 2);\n\t\tkey.put('D', 3);\n\t\tkey.put('E', 3);\n\t\tkey.put('F', 3);\n\t\tkey.put('G', 4);\n\t\tkey.put('H', 4);\n\t\tkey.put('I', 4);\n\t\tkey.put('J', 5);\n\t\tkey.put('K', 5);\n\t\tkey.put('L', 5);\n\t\tkey.put('M', 6);\n\t\tkey.put('N', 6);\n\t\tkey.put('O', 6);\n\t\tkey.put('P', 7);\n\t\tkey.put('R', 7);\n\t\tkey.put('S', 7);\n\t\tkey.put('T', 8);\n\t\tkey.put('U', 8);\n\t\tkey.put('V', 8);\n\t\tkey.put('W', 9);\n\t\tkey.put('X', 9);\n\t\tkey.put('Y', 9);\n\t\twhile (scan.hasNextInt()) {\n\t\t\tint n = scan.nextInt();\n\t\t\tscan.nextLine();\n\t\t\tString[] number = new String[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tString str = scan.nextLine();\n\t\t\t\tStringBuilder sb = new StringBuilder(\"\");\n\t\t\t\tint c = 0;\n\t\t\t\tfor (int j = 0; j < str.length(); j++) {\n\t\t\t\t\tif (c == 3) {\n\t\t\t\t\t\tsb.append('-');\n\t\t\t\t\t\tc++;\n\t\t\t\t\t}\n\t\t\t\t\tif (str.charAt(j) != '-') {\n\t\t\t\t\t\tc++;\n\t\t\t\t\t\tif ((int) (str.charAt(j)) < 64) {\n\t\t\t\t\t\t\tsb.append(str.charAt(j));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsb.append(key.get(str.charAt(j)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnumber[i] = new String(sb);\n\t\t\t}\n\t\t\tArrays.sort(number);\n\t\t\tint count = 1;\n\t\t\tboolean ok = false;\n\t\t\tfor (int i = 0; i < number.length; i++) {\n\t\t\t\tcount = 1;\n\t\t\t\tfor (int j = i + 1; j < number.length; j++) {\n\t\t\t\t\tif (number[i].equals(number[j])) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t\tok = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (count > 1) {\n\t\t\t\t\tout.println(number[i] + \" \" + count);\n\t\t\t\t}\n\t\t\t\ti += count - 1;\n\t\t\t}\n\t\t\tif (!ok) {\n\t\t\t\tout.println(\"No duplicates.\");\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass InputReader {\n\tBufferedReader br;\n\tStringTokenizer st;\n\n\tpublic InputReader(InputStream in) {\n\t\tbr = new BufferedReader(new InputStreamReader(in));\n\t\tst = null;\n\t}\n\n\tpublic String next() {\n\t\twhile (st == null || !st.hasMoreTokens()) {\n\t\t\ttry {\n\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn st.nextToken();\n\t}\n\n\tpublic int nextInt() {\n\t\treturn Integer.parseInt(next());\n\t}\n\n\tpublic long nextLong() {\n\t\treturn Long.parseLong(next());\n\t}\n\n\tpublic double nextDouble() {\n\t\treturn Double.parseDouble(next());\n\t}\n}", "generated_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class Main{\n\n\tpublic static void main (String[] args)\n\t{\n\n\t\tfinal int MAX_N = 1000;\n\t\tBigInteger[] zeros = new BigInteger[MAX_N+1];\n\t\tBigInteger[] ones  = new BigInteger[MAX_N+1];\n\n\t\tzeros [0] = new BigInteger(\"0\");\n\t\tones [0] = new BigInteger(\"0\");\n\n\t\tfor(int i = 1; i< MAX_N + 1; ++i)\n\t\t{\n\t\t\tzeros[i] = zeros[i-1].add(ones[i-1]);\n\t\t\tones[i] =  zeros[i];\n\t\t\t\n\t\t\tif(i%2 == 0)\n\t\t\t\tzeros[i] = zeros[i].add(new BigInteger(\"1\"));\n\t\t}\n\n\t\tScanner input = new Scanner(System.in);\n\t\twhile(input.hasNext())\n\t\t\tSystem.out.println(zeros[input.nextInt()]);\n\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1099_43__1_2621_17", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner scn = new Scanner(System.in);\n        int a = 0;\n        while (true) {\n            int q = scn.nextInt();\n            a++;\n            if (q == 0) {\n                System.exit(0);\n            }\n            long sum = 0;\n            long res = 0;\n            int num[] = new int[q];\n            for (int i = 0; i < num.length; i++) {\n                num[i] = scn.nextInt();\n                sum += num[i];\n            }\n            sum /= q;\n            for (int i = 0; i < num.length; i++) {\n                if (num[i] > sum) {\n                    res += Math.abs(sum - num[i]);\n                }\n            }\n            System.out.println(\"Set #\" + a);\n            System.out.println(\"The minimum number of moves is \" + res + \".\\n\");\n        }\n    }\n}\n", "generated_code": "\n\nimport java.util.Scanner;\n\npublic class Main {\n\n    static  Scanner in=new Scanner(System.in);\n    public static void main(String[] args) {\n        int x=in.nextInt();\n        for(int i=0;i<x;i++)\n        {\n            String s=in.next();\n            String k=\"\";\n            for(int j=s.length()-1;j>=0;j--)\n                k+=s.charAt(j);\n            k=k.toLowerCase();\n            s=s.toLowerCase();\n            String s1=\"\",k1=\"\";\n            for(int j=0;j<s.length();j++)\n            {\n                if(\"abc\".contains(String.valueOf(s.charAt(j))))\n                {\n                    s1+=\"2\";\n                }\n                else if(\"def\".contains(String.valueOf(s.charAt(j))))\n                {\n                    s1+=\"3\";\n                }\n                else if(\"ghi\".contains(String.valueOf(s.charAt(j))))\n                {\n                    s1+=\"4\";\n                }\n                else if(\"jkl\".contains(String.valueOf(s.charAt(j))))\n                {\n                    s1+=\"5\";\n                }\n                else if(\"mno\".contains(String.valueOf(s.charAt(j))))\n                {\n                    s1+=\"6\";\n                }\n                else if(\"pqrs\".contains(String.valueOf(s.charAt(j))))\n                {\n                    s1+=\"7\";\n                }\n                else if(\"tuv\".contains(String.valueOf(s.charAt(j))))\n                {\n                    s1+=\"8\";\n                }\n                else if(\"wxyz\".contains(String.valueOf(s.charAt(j))))\n                {\n                    s1+=\"9\";\n                }\n\n                /////////////////////////\n                if(\"abc\".contains(String.valueOf(k.charAt(j))))\n                {\n                    k1+=\"2\";\n                }\n                else if(\"def\".contains(String.valueOf(k.charAt(j))))\n                {\n                    k1+=\"3\";\n                }\n                else if(\"ghi\".contains(String.valueOf(k.charAt(j))))\n                {\n                    k1+=\"4\";\n                }\n                else if(\"jkl\".contains(String.valueOf(k.charAt(j))))\n                {\n                    k1+=\"5\";\n                }\n                else if(\"mno\".contains(String.valueOf(k.charAt(j))))\n                {\n                    k1+=\"6\";\n                }\n                else if(\"pqrs\".contains(String.valueOf(k.charAt(j))))\n                {\n                    k1+=\"7\";\n                }\n                else if(\"tuv\".contains(String.valueOf(k.charAt(j))))\n                {\n                    k1+=\"8\";\n                }\n                else if(\"wxyz\".contains(String.valueOf(k.charAt(j))))\n                {\n                    k1+=\"9\";\n                }\n            }\n          //  System.out.println(k1+ \"   \"+s1);\n            if(k1.equals(s1))\n                System.out.println(\"YES\");\n            else\n                System.out.println(\"NO\");\n\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_502__1_1001_239", "golden_code": "import java.util.Scanner; \n \npublic class Main\n{\n\tpublic static void main(String args[])\n\t{\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext())\n\t\t{\n\t\t\tint a = in.nextInt();\n\t\t\tint b = in.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t\tin.close();\n\t}\n}\n\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner input= new Scanner(System.in);\n\t\twhile(input.hasNext()){\n\t    \tint s=input.nextInt(); \n\t\t\ts+=input.nextInt();\n\t\t\tSystem.out.println(s);}}}", "score": 1.0}
{"id": "SHARE_1_1009_11__1_1009_139", "golden_code": "\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n    \n    public static void main(String[] args) {\n        float sum = 0;\n        Scanner s = new Scanner(System.in);\n        PrintWriter p=new PrintWriter(System.out);\n        for (int i = 0 ; i<12 ; i++){\n            float a = s.nextFloat();\n            sum+=a;\n        }\n        System.out.print(\"$\");\n        System.out.printf(\"%.2f\",sum/12);\n        System.out.println();\n    }\n}\n", "generated_code": "import java.util.Scanner;\nclass Main {\n\tstatic boolean adj[]=new boolean [178858590];\n\t\n\tpublic static void main(String s[]) {\n\t\tScanner cin = new Scanner(System.in);\n\t\tdouble sum=0;\n\t\tfor(int i=0;i<12;i++)\n\t\t{\n\t\t\tdouble val=cin.nextDouble();\n\t\t\tsum+=val;\n\t\t}\n\t\tSystem.out.printf(\"$%.2f\\n\",sum/12);\n\t\tadj[0]=true;\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1002_0__1_1001_186", "golden_code": "import java.awt.*;\nimport java.util.*;\nimport java.io.*;\n\nimport static java.lang.Math.*;\n\npublic class Main\n{\n\tpublic static void main(String[] args) throws Exception\n\t{\n\t\tScanner scanner = new Scanner(System.in);\n\t\twhile(true)\n\t\t{\n\t\t\tdouble x = scanner.nextDouble();\n\t\t\tdouble y = scanner.nextDouble();\n\t\t\tdouble r = scanner.nextDouble();\n\t\t\tif(r < 0)\n\t\t\t\tbreak;\n\n\t\t\tint n = scanner.nextInt();\n\n\t\t\tPoint [] points = new Point[n];\n\t\t\tfor(int i = 0 ; i<n; i++)\n\t\t\t\tpoints[i] = new Point(scanner.nextInt(), scanner.nextInt());\n\n\t\t\tdouble [] radii = new double[n];\n\n\t\t\tfor(int i =0 ; i<n ; i++)\n\t\t\t{\n\t\t\t\tdouble vx = points[i].x - x;\n\t\t\t\tdouble vy = points[i].y - y;\n\t\t\t\tradii[i] = Math.atan2(vy, vx);\n\t\t\t\tif(radii[i] < 0)\n\t\t\t\t\tradii[i] = 2*Math.PI + radii[i];\n\t\t\t\tif(dis(points[i].x, points[i].y, x, y) > r)\n\t\t\t\t\tradii[i] = 100;\n\n\t\t\t}\n\n\t\t\tArrays.sort(radii);\n\n\t\t\tint res = 0;\n\t\t\tQueue<Double> queue = new LinkedList<Double>();\n\t\t\tfor(int i = 0 ; i<2*n ; i++)\n\t\t\t{\n\t\t\t\tdouble radius;\n\t\t\t\tif(i < n)\n\t\t\t\t\tradius = radii[i];\n\t\t\t\telse\n\t\t\t\t\tradius = radii[i%n] + 2*Math.PI;\n\t\t\t\tif(radius >= 100)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tqueue.offer(radius);\n\n\t\t\t\twhile(radius - queue.peek() > Math.PI)\n\t\t\t\t\tqueue.poll();\n\t\t\t\tres = Math.max(res, queue.size());\n\t\t\t}\n\t\t\tSystem.out.println(res);\n\n\t\t}\n\t}\n\n\tprivate static double dis(double x, double y, double x1, double y1)\n\t{\n\t\treturn Math.sqrt((x1 - x)*(x1 - x) + (y1 - y)*(y1 - y));\n\t}\n}\n\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n            Scanner sc = new Scanner(System.in);\n            long a,b;\n            while(sc.hasNext()){\n                a=sc.nextInt();\n                b=sc.nextInt();\n                System.out.println(a+b);\n            }\n            sc.close();\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2543_38__1_2543_33", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n\n        Scanner sc = new Scanner(System.in);\n        while (true) {\n            boolean equal=true;\n            String input = sc.nextLine();\n            input=input.toUpperCase();\n            char[] contain=input.toCharArray();\n           char first= input.charAt(0);\n           if(first=='*'){System.exit(0);}\n            for (int i = 1; i <contain.length; i++) {\n                if (contain[i]==' ') {\n\n                    if(contain[i+1]!=first){\n                        equal=false;\n                    }\n\n                }\n\n\n            }\n           if(equal==false){\n            System.out.println(\"N\");}\n            else {\n                System.out.println(\"Y\");\n        }\n           }\n\n    }}\n\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\twhile (scanner.hasNextLine()){\n\t\t\tString line = scanner.nextLine();\n\t\t\tif (line.equals(\"*\"))\n\t\t\t\treturn;\n\t\t\tString[] words = line.trim().split(\" \");\n\t\t\tboolean isTautogram = true;\n\t\t\tchar c =Character.toLowerCase(words[0].charAt(0));\n\t\t\tfor (int i = 1;i<words.length;i++){\n\t\t\t\tif (!words[i].equalsIgnoreCase(\"\")&&Character.toLowerCase(words[i].charAt(0))!=c){\n\t\t\t\t\tisTautogram = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isTautogram)\n\t\t\t\tSystem.out.println(\"Y\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"N\");\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_446__1_1001_8", "golden_code": "import java.util.*;\n\npublic class Main {\n\tpublic static void main(String args[]){\n\t\tint a,b;\n\t\tScanner cin=new Scanner(System.in);\n\t\twhile(cin.hasNext()){\n\t\t\ta=cin.nextInt();\n\t\t\tb=cin.nextInt();\n\t\t\tSystem.out.println((a+b));\n\t\t}\n\t}\n}", "generated_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\t//Scanner in = new Scanner(System.in);\n\tPrintStream out = System.out;\n\tInputStreamReader isr = new InputStreamReader(System.in);\n\tBufferedReader bf = new BufferedReader(isr);\n\t\n\tvoid solve() throws IOException {\n\t\twhile (true) {\n\t\t\tString linea = bf.readLine();\n\t\t\tif (linea == null) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tString[] partes = linea.split(\" \");\n\t\t\tint a = Integer.parseInt(partes[0]);\n\t\t\tint b = Integer.parseInt(partes[1]);\n\t\t\tout.println(a + b);\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) throws IOException {\n\t\tnew Main().solve();\n\t}\n}", "score": 1.0}
{"id": "SHARE_5_1008_14__1_101073_1", "golden_code": "import java.io.*;\nimport java.util.*;\n\nimport com.sun.org.apache.xpath.internal.operations.Minus;\npublic class Main {\n\tpublic static ArrayList<Boolean> all=new ArrayList<Boolean>();\n\tpublic static ArrayList<ArrayList<Integer>> graph=new ArrayList<ArrayList<Integer>>();\n\tpublic static int counter=0;\n\tpublic static int minimum=2000000;\n\tpublic static int minimumvertix=0;\n\tpublic static void dfs(int vertexno){\n\t\tall.set(vertexno, true);\n\t\tcounter++;\n\t\t\n\t\tfor(int i=0;i<graph.get(vertexno).size();i++){\n\t\t\tif(all.get(graph.get(vertexno).get(i))==false){\n\t\t\t\t//System.out.println(\"insideeeee\");\n\t\t\t\tdfs(graph.get(vertexno).get(i));\n\t\t\t}\n\t\t}\n\t}\n\tpublic static void get_input(){\n\tScanner in=new Scanner (System.in);\n\tint numberoftests=in.nextInt();\n\t\tfor(int i=0;i<numberoftests;i++){\n\t\t\tminimum=20000000;\n\t\t\t\n\t\t\tint benches=in.nextInt(); /// tedad nimkathaye dar park\n\t\t\tgraph.clear();\n\t\t\tall.clear();\n\t\t\tfor(int o=0;o<=benches;o++){\n\t\t\t\tArrayList<Integer>temp=new ArrayList<Integer>();\n\t\t\t\tgraph.add(temp);\n\t\t\t\tall.add(false);\n\t\t\t}\n\t\t\tfor(int j=0;j<benches-1;j++){\n\t\t\t\tint benchone=in.nextInt();\n\t\t\t\tint benchtwo=in.nextInt();\n\t\t\t\tgraph.get(benchone).add(benchtwo);\n\t\t\t\tgraph.get(benchtwo).add(benchone);\n\t\t\t}\n\t\t\tArrayList<ArrayList<Integer>> distances=new ArrayList<ArrayList<Integer>>(); \n\t\t\tArrayList<Integer> dummy=new ArrayList<Integer>();\n\t\t\tdistances.add(dummy);\n\t\t\tfor(int k=1;k<=benches;k++){\n\t\t\t\tArrayList<Integer> sample=new ArrayList<Integer>(); \n\t\t\t\tfor(int p=0;p<graph.get(k).size();p++){\n\t\t\t\tcounter=0;\n\t\t\t\tfor(int l=0;l<=benches;l++){\n\t\t\t\t\tall.set(l,false);\n\t\t\t\t}\n\t\t\t\tall.set(k,true);\n\t\t\t\tdfs(graph.get(k).get(p));\n\t\t\t\tsample.add(counter*2);\n\t\t\t\t//System.out.println(counter*2);\n\t\t\t\t//System.out.println(\"next dfs\");\n\t\t\t\t}\n\t\t\t\tdistances.add(sample);\n\t\t\t}\n\t\t\tfor(int q=1;q<distances.size();q++){\n\t\t\tint a[][]=new int[distances.get(q).size()][benches*2];\n\t\t\t\tfor(int u=0;u<benches*2;u++){\n\t\t\t\t\ta[0][u]=0;\n\t\t\t\t}\n\t\t\t\ta[0][0]=1;\n\t\t\t\ta[0][distances.get(q).get(0)]=1;\n\t\t\t\tfor(int t=1;t<distances.get(q).size();t++){\n\t\t\t\t\tfor(int y=0;y<benches*2;y++){\n\t\t\t\t\ta[t][y]=a[t-1][y];\n\t\t\t\t\tif(y>=distances.get(q).get(t)){\n\t\t\t\t\ta[t][y] = a[t][y] | a[t-1][y-distances.get(q).get(t)];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint s;\n\t\t\t\tfor(s=benches-1;;s++){\n\t\t\t\t\tif(a[distances.get(q).size()-1][s]==1){\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(s<minimum){\n\t\t\t\t\tminimum=s;\n\t\t\t\t\tminimumvertix=q;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\tSystem.out.println(minimumvertix+\" \"+minimum);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\tMain.get_input();\n\t}\n}\n", "generated_code": "\nimport java.util.Scanner;\n\nclass Main\n{\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        while (t-- > 0) {\n            int n = in.nextInt();\n            int min = 100, max = 0;\n            for (int i = 0; i < n; i++) {\n                int x = in.nextInt();\n                min = Math.min(x, min);\n                max = Math.max(x, max);\n            }\n            System.out.println((max-min)<<1);\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_2554_6__1_2554_63", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\nimport java.util.TreeMap;\n\nclass Node\n{\n\tpublic Node() { child = new ArrayList<Node>(); }\n\tpublic Node parent = null;\n\tpublic String name=null;\n\tpublic ArrayList<Node> child=null;\n\tpublic boolean isValid(String args[])\n\t{\n\t\tif(!hasThis(args))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\tpublic boolean hasChild(Node n, String[] args) {\n\t\tboolean flag = false;\n\t\tif(this != n)\n\t\t\tfor(int i = 0;i < args.length;i++)\n\t\t\t\tif((name.equals(args[i]) || (name.contains(\"?\") && name.substring(1).equals(args[i]))))\n\t\t\t\t\tflag = true;\n\t\t\t\t\n\t\tfor(int i = 0;i < child.size();i++)\n\t\t\tflag |= child.get(i).hasChild(n, args);\n\t\treturn flag;\n\t}\n\tpublic boolean hasThis(String args[])\n\t{\n\t\tfor(int i = 0;i < args.length;i++)\n\t\t\tif(name.equals(args[i]) || (name.contains(\"?\") && name.substring(1).equals(args[i])))\n\t\t\t\treturn true;\n\t\treturn false;\n\t}\n}\n\nclass ManNode extends Node\n{\n\tpublic ManNode() { child = new ArrayList<Node>(); }\n\tpublic boolean isValid(String[] args) {\n//\t\tSystem.out.println(name);\n\t\tboolean flag = true;\n\t\tif(!hasThis(args))\n\t\t\treturn false;\n//\t\tSystem.out.println(name);\n\t\tfor(int i = 0;i < child.size();i++)\n\t\t{\n\t\t\tif(child.get(i).name.charAt(0) == '?' && (child.get(i).hasThis(args) || child.get(i).hasChild(child.get(i), args)))\n\t\t\t{\n//\t\t\t\tSystem.out.println(child.get(i).name);\n\t\t\t\tif(child.get(i).isValid(args))\n\t\t\t\t{\n\t\t\t\t\tflag &= true;\n//\t\t\t\t\tSystem.out.println(\"was\");\n\t\t\t\t}\n\t\t\t\telse \n\t\t\t\t\tflag = false;\n\t\t\t}\n\t\t\telse if(child.get(i).name.charAt(0) != '?')\n\t\t\t{\n\t\t\t\tflag &= child.get(i).isValid(args);\n//\t\t\t\tSystem.out.println(child.get(i).name);\n\t\t\t}\n\t\t}\n\t\treturn flag;\n\t}\n}\n\nclass OrNode extends Node\n{\n\tpublic OrNode() { child = new ArrayList<Node>(); }\n\tpublic boolean isValid(String args[]) {\n\t\tboolean hasOne = false;\n\t\tboolean flag = true;\n\t\tif(!hasThis(args))\n\t\t\treturn false;\n\t\t\n\t\tfor(int i = 0;i < child.size();i++)\n\t\t{\n\t\t\tif(child.get(i).hasThis(args) || child.get(i).hasChild(child.get(i), args))\n\t\t\t{\n\t\t\t\thasOne = true;\n\t\t\t\tif(child.get(i).isValid(args))\n\t\t\t\t\tflag &= true;\n\t\t\t\telse\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n//\t\tSystem.out.println(name + \" \" + flag);\n\t\treturn flag&&hasOne;\n\t}\n\t\n}\n\nclass XorNode extends Node\n{\n\tpublic XorNode() { child = new ArrayList<Node>(); }\n\tpublic boolean isValid(String[] args) {\n\t\tboolean flag = true;\n\t\tboolean hasOne = false;\n\t\tint ted = 0;\n\t\tif(!hasThis(args))\n\t\t\treturn false;\n\t\tfor(int i = 0;i < child.size();i++)\n\t\t{\n\t\t\tif(child.get(i).hasThis(args) || child.get(i).hasChild(child.get(i), args))\n\t\t\t{\n\t\t\t\thasOne = true;\n\t\t\t\tflag &= child.get(i).isValid(args);\n\t\t\t\tted++;\n\t\t\t}\n\t\t}\n//\t\tSystem.out.println(name + \" \" + flag);\n\t\treturn (hasOne&&flag&&ted==1);\n\t}\n}\n\n\npublic class Main\n{\n\tpublic static TreeMap<String, Node> nodesMap;\n\tpublic static void addToTree(String par, String[] node, int type)\n\t{\n\t\tNode n = nodesMap.get(par);\n\t\tif(nodesMap.containsKey(\"?\"+par))\n\t\t{\n\t\t\tn = nodesMap.get(\"?\"+par);\n\t\t\tpar = \"?\"+par;\n\t\t}\n\t\tNode nn = null;\n//\t\tSystem.out.println(par + \" \" + type);\n\t\tswitch(type)\n\t\t{\n\t\tcase 1:\n\t\t\tnn = new ManNode();\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tnn = new OrNode();\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tnn = new XorNode();\n\t\t\tbreak;\n\t\tdefault:\n//\t\t\tSystem.out.println(\"ERROR\");\n\t\t\tbreak;\n\t\t}\n\t\tnn.parent = (n != null)?n.parent:null;\n\t\tnn.name = par;\n\t\tif(n != null)\n\t\t{\n\t\t\tn.parent.child.set(n.parent.child.indexOf(nodesMap.get(par)), nn);\n\t\t\tnn.child = (ArrayList<Node>) nodesMap.get(par).child.clone();\n//\t\t\tSystem.err.println(par);\n//\t\t\tSystem.err.println(nn.child.size());\n\t\t\tnodesMap.remove(par);\n\t\t}\n\t\tnodesMap.put(par, nn);\n\n\t\tNode nodes2[] = new Node[node.length];\n\t\tfor(int i = 0;i < node.length;i++)\n\t\t{\n\t\t\tif(nodesMap.containsKey(node[i]))\n\t\t\t{\n\t\t\t\tnodes2[i] = nodesMap.get(node[i]);\n\t\t\t\tnodes2[i].parent = nn;\n\t\t\t\t// new nakon\n\t\t\t}\n\t\t\telse if(node[i].charAt(0) == '?' && nodesMap.containsKey(node[i].substring(1)))\n\t\t\t{\n\t\t\t\tnodes2[i] = nodesMap.get(node[i].substring(1));\n\t\t\t\tnodes2[i].parent = nn;\n\t\t\t\tnodesMap.remove(node[i].substring(1));\n\t\t\t\tnodes2[i].name = node[i];\n\t\t\t\tnodesMap.put(node[i], nodes2[i]);\n\t\t\t\t// new nakon\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnodes2[i] = new Node();\n\t\t\t\tnodes2[i].name = node[i];\n\t\t\t\tnodes2[i].parent = nn;\n\t\t\t\tnodesMap.put(node[i], nodes2[i]);\n\t\t\t}\n//\t\t\tSystem.err.println(nodesMap.get(par).child.size());\n\t\t\tnodesMap.get(par).child.add(nodes2[i]);\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint state = 0;\n\t\tString str = \"\";\n\t\tnodesMap = new TreeMap<String, Node>();\n\t\twhile(true)\n\t\t{\n\t\t\tstr = sc.nextLine();\n\t\t\t// check states\n\t\t\tif(str.contains(\"###\"))\n\t\t\t\tbreak;\n\t\t\telse if(str.contains(\"##\"))\n\t\t\t{\n\t\t\t\tstate = 0;\n\t\t\t\tnodesMap.clear();\n\t\t\t\tSystem.out.println(\"+++\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if(str.contains(\"#\"))\n\t\t\t{\n\t\t\t\tstate = 1;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\t\n\t\t\t// end o check\n\t\t\tstr = str.replaceAll(\"\\\\s+\", \"\");\n\t\t\tif(state == 1)\n\t\t\t\tstr = str.substring(1,str.length()-1);\n\t\t\tString par = null;\n\t\t\tint type = -1;\n\t\t\tif(state == 0)\n\t\t\t{\n\t\t\t\tpar = str.substring(0, str.indexOf('='));\n\t\t\t\tstr = str.substring(str.indexOf('=')+1);\n//\t\t\t\tSystem.out.println(str + \" \" + par);\n\t\t\t\tif(str.contains(\"+\") == true)\n\t\t\t\t\ttype = 1;\n\t\t\t\tif(str.contains(\"|\") == true)\n\t\t\t\t\ttype = 2;\n\t\t\t\tif(str.contains(\"^\") == true)\n\t\t\t\t\ttype = 3;\n\t\t\t}\n\t\t\tString[] node = str.split(\"[\\\\+\\\\|\\\\^,]\");\n\t\t\tif(state == 0)\n\t\t\t\taddToTree(par, node, type);\n\t\t\telse\n\t\t\t\tcheckTree(node);\n\t\t}\n\t}\n\tpublic static void checkTree(String[] node) {\n\t\tfor(Node n:nodesMap.values())\n\t\t\tif(n.parent == null)\n\t\t\t{\n\t\t\t\tif(n.isValid(node))\n\t\t\t\t\tSystem.out.println(\"Valid\");\n\t\t\t\telse\n\t\t\t\t\tSystem.out.println(\"Invalid\");\n\t\t\t}\n\t}\n}", "generated_code": "\n\nimport java.util.*;\n\n/**\n * @author Amin Razavi\n */\npublic class Main {\n    ///////////////////////////node////////////////////////////\n    public static class Node {\n        private String info;\n        private String status;\n        private Node parent;\n        private Node Left_child;\n        private Node Right_brother;\n\n        String getInfo() {\n            return info;\n        }\n\n        String getStatus() {\n            return status;\n        }\n\n        Node getParent() {\n            return parent;\n        }\n\n        Node getLeft_child() {\n            return Left_child;\n        }\n\n        Node getRight_brother() {\n            return Right_brother;\n        }\n\n        //new\n        Node() {\n            this.info = \"\";\n            this.status = \"\";\n            this.parent = null;\n            this.Left_child = null;\n            this.Right_brother = null;\n        }\n\n        void setInfo(String info) {\n            this.info = info;\n        }\n\n        void setStatus(String status) {\n            this.status = status;\n        }\n\n        void setParent(Node parent) {\n            this.parent = parent;\n        }\n\n        void setLeft_child(Node left_child) {\n            this.Left_child = left_child;\n        }\n\n        void setRight_brother(Node right_brother) {\n            this.Right_brother = right_brother;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            Node node = (Node) o;\n            if (node.getInfo().equals(info))\n                return true;\n            return false;\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(info);\n        }\n\n        @Override\n        public String toString() {\n            return \"Node{\" +\n                    \"info='\" + info + '\\'' +\n                    '}';\n        }\n    }\n\n\n    ///////////////////////node//////////////////////////////////\n//////////////////////tree///////////////////////////////////\n    static class Tree {\n        private Node root;\n        private ArrayList<Node> nodes = new ArrayList<>();\n        private ArrayList<Node> mandatory_nodes = new ArrayList<>();\n\n        Tree(Node root) {\n            this.root = root;\n            nodes.add(root);\n        }\n\n        void setRoot(Node root) {\n            this.root = root;\n        }\n\n        void setNodes(ArrayList<Node> nodes) {\n            this.nodes = nodes;\n        }\n\n        Node getRoot() {\n            return root;\n        }\n\n\n        void add_node(Node temp_node) {\n//            System.out.println(temp_node.getInfo().trim());\n            if (temp_node.getStatus().equals(\"Mandatory\"))\n                mandatory_nodes.add(temp_node);\n\n            if (!nodes.contains(temp_node)) {\n                nodes.add(temp_node);\n            }\n        }\n\n        void add_node(Node parent, Node temp_node) {\n//            System.out.println(parent.getInfo().trim() + \" \" + temp_node.getInfo().trim());\n            if(search_parent(temp_node.getInfo().trim()) != null)\n                temp_node = search_parent(temp_node.getInfo().trim());\n\n            if (temp_node.getStatus().equals(\"Mandatory\"))\n                mandatory_nodes.add(temp_node);\n\n\n            temp_node.setParent(parent);\n            if (parent.getLeft_child() == null) {\n                parent.setLeft_child(temp_node);\n            } else {\n                boolean check_add_right_brother = true;\n                Node node = parent.getLeft_child();\n                if (node.getInfo().trim().equals(temp_node.getInfo().trim()))\n                    check_add_right_brother = false;\n                while (node.getRight_brother() != null) {\n                    node = node.getRight_brother();\n                    if (node.getInfo().trim().equals(temp_node.getInfo().trim()))\n                        check_add_right_brother = false;\n                }\n                if (check_add_right_brother){\n                    node.setRight_brother(temp_node);\n\n                }\n            }\n            if (!nodes.contains(temp_node))\n                nodes.add(temp_node);\n        }\n\n        boolean search(Node node) {\n            for (Node n : nodes)\n                if (n.getInfo().trim().equals(node.getInfo().trim()))\n                    return true;\n            return false;\n        }\n\n        Node search2(Node node) {\n            for (Node node_tree : nodes) {\n                if (node.getInfo().trim().equals(node_tree.getInfo().trim())) {\n                    return node_tree;\n                }\n            }\n            return null;\n        }\n\n        public Node search_parent(String info) {\n            Node temp = null;\n            for (Node node : nodes)\n                if (node.getInfo().trim().equals(info.trim())) {\n                    temp = node;\n                }\n            return temp;\n        }\n\n        public void find_father() {\n            for (Node node : nodes) {\n                if (node.getParent() == null) {\n                    for (Node temp_parent : nodes) {\n                        if (temp_parent.getLeft_child() != null)\n                            if (temp_parent.getLeft_child().getInfo().trim().equals(node.getInfo().trim())) {\n                                node.setParent(temp_parent);\n                            }\n                        if (temp_parent.getRight_brother() != null)\n                            if (temp_parent.getRight_brother().getInfo().trim().equals(node.getInfo().trim())) {\n                                node.setParent(temp_parent.getParent());\n                            }\n                    }\n                }\n            }\n        }\n\n        public void delete_extra() {\n            ArrayList<Node> deleting = new ArrayList<>();\n            for (Node node : nodes) {\n                if (node.getParent() != null)\n                    if (node.getInfo().trim().equals(node.getParent().getInfo().trim()))\n                        deleting.add(node);\n\n            }\n            for (Node node : deleting) {\n                nodes.remove(node);\n\n            }\n        }\n\n        @Override\n        public String toString() {\n            String str = \" \";\n            for (int i = 0; i < nodes.size(); i++) {\n                str += \"node is:\" + nodes.get(i).getInfo() + \"  \" + \"father : \" + nodes.get(i).getParent();\n            }\n            return str;\n        }\n\n    }\n\n    ///////////////////////////tree////////////////////////////////\n    private static boolean check(Tree tree, HashSet<Node> set) {\n        for (Node node : set) {\n            if (node.getStatus().equals(\"Mandatory\"))\n                if (!node.equals(tree.search2(node))) {\n                    //System.out.println(node.getInfo().trim() + \" 1\");\n                    return false;\n                }\n        }\n        for (Node node : set) {\n            if (!tree.search(node)) {\n                // System.out.println(node.getInfo().trim() + \" 2\");\n                return false;\n            }\n        }\n        for (Node node : set) {\n            Node n = tree.search2(node);\n            Node q = new Node();\n            q.setInfo(n.getParent().getInfo().trim());\n            if (!set.contains(q) && !q.getInfo().equals(\"Fake\")) {\n                //System.out.println(node.getInfo().trim() + \"3\");\n                return false;\n            }\n        }\n        for (Node n1 : set) {\n            Node node = tree.search2(n1);\n            if (node.getLeft_child() != null) {\n                int counter = 0;\n                int mcounter = 0;\n                Node backup = node.getLeft_child();\n                Node child = node.getLeft_child();\n                while (child != null) {\n                    //if (n1.getInfo().trim().equals(\"g\"))\n                    //System.out.println(child.getInfo().trim() + \"****\");\n                    if (set.contains(child))\n                        counter++;\n                    if (child.getStatus().equals(\"Mandatory\")) {\n                        if (!set.contains(child)) {\n                            //System.out.println(n1.getInfo().trim() + \" 4\");\n                            return false;\n                        }\n                        mcounter++;\n                    }\n                    child = child.getRight_brother();\n                }\n                child = backup;\n                if (child.getStatus().equals(\"Alternative\") && counter != 1) {\n                    //System.out.println(n1.getInfo().trim() + \" 5\");\n                    return false;\n                }\n                if (child.getStatus().equals(\"Or\") && counter == 0) {\n                    //System.out.println(n1.getInfo().trim() + \" 6\");\n                    return false;\n                }\n                if ((child.getStatus().equals(\"Optional\") || child.getStatus().equals(\"Mandatory\")) && counter < mcounter) {\n                    //System.out.println(n1.getInfo().trim() + \" 7\");\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        List<String> result = new LinkedList<>();\n        String str = scan.nextLine().replace(\" \", \"\");\n\n        while (!str.equals(\"###\")) {\n            Node fake_father = new Node();\n            fake_father.setInfo(\"Fake\");\n            Tree tree = new Tree(fake_father);\n            boolean check_point = true;\n            while (!str.equals(\"#\")) {\n                if (str.contains(\"=\") && !str.contains(\"+\") && !str.contains(\"^\") && !str.contains(\"|\")) {\n                    Node node = new Node();\n\n                    String[] temp_line = str.split(\"[=]\");\n                    if(tree.search_parent(temp_line[1].trim()) != null)\n                        node= tree.search_parent(temp_line[1].trim());\n                    Node parent = tree.search_parent(temp_line[0].trim());\n                    if (str.contains(\"?\")) {\n                        node.setInfo(temp_line[1].replace(\"?\", \"\").trim());\n                        node.setStatus(\"Optional\");\n                    } else {\n                        node.setStatus(\"Mandatory\");\n                        node.setInfo(temp_line[1].trim());\n                    }\n                    if (parent == null && check_point == false) {\n                        parent = new Node();\n                        parent.setInfo(temp_line[0].trim());\n                        node.setInfo(temp_line[1].trim());\n                        if (str.contains(\"?\")) {\n                            node.setInfo(temp_line[1].replace(\"?\", \"\").trim());\n                            node.setStatus(\"Optional\");\n                        } else\n                            node.setStatus(\"Mandatory\");\n                        parent.setLeft_child(node);\n                        tree.add_node(parent);\n                        tree.add_node(parent, node);\n\n                    } else if (check_point == true) {\n                        parent = new Node();\n                        parent.setStatus(\"Mandatory\");\n                        parent.setInfo(temp_line[0].trim());\n                        tree.add_node(tree.getRoot(), parent);\n                        //parent.setInfo(temp_line[0].trim());\n                        tree.add_node(parent, node);\n                    } else {\n//                        tree.add_node(parent);\n                        tree.add_node(parent, node);\n                    }\n\n\n                }\n                if (!str.contains(\"=\")) {\n                    Node node = new Node();\n                    node.setInfo(str.trim());\n\n                    tree.add_node(tree.getRoot(), node);\n                }\n\n                if (str.contains(\"+\")) {\n                    String[] temp_line = str.split(\"[=,+]\");\n                    Node parent = tree.search_parent(temp_line[0].trim());\n                    if (parent == null && check_point == false) {\n\n                        parent = new Node();\n                        parent.setInfo(temp_line[0].trim());\n                        tree.add_node(parent);\n                    }\n\n                    if (check_point == true) {\n                        parent = new Node();\n                        parent.setStatus(\"Mandatory\");\n                        parent.setInfo(temp_line[0].trim());\n\n                        tree.add_node(tree.getRoot(), parent);\n                    }\n                    for (int i = 1; i < temp_line.length; i++) {\n                        Node node = new Node(); // new nabayad beshe lozoman\n                        if(tree.search_parent(temp_line[i].trim()) != null)\n                            node= tree.search_parent(temp_line[i].trim());\n                        node.setInfo(temp_line[i].trim());\n                        if (!temp_line[i].contains(\"?\"))\n                            node.setStatus(\"Mandatory\");\n                        else {\n\n                            node.setStatus(\"Optional\");\n                            node.setInfo(node.getInfo().replace(\"?\", \"\").trim());\n                        }\n                        //if (!tree.getNodes().contains(node))\n\n                        tree.add_node(parent, node);\n                        // if(tree.getNodes().contains(node) && tree.search2(node).getParent()== null)\n                        // tree.search2(node).setParent(parent);\n\n                    }\n\n                }\n                if (str.contains(\"|\")) {\n                    String[] temp_line = str.split(\"[=,|]\");\n                    Node parent = tree.search_parent(temp_line[0].trim());\n                    if (parent == null && check_point == false) {\n                        parent = new Node();\n                        parent.setInfo(temp_line[0].trim());\n                        tree.add_node(parent);\n                    }\n                    if (check_point == true) {\n                        parent = new Node();\n                        parent.setStatus(\"Mandatory\");\n                        parent.setInfo(temp_line[0].trim());\n                        tree.add_node(tree.getRoot(), parent);\n                    }\n                    for (int i = 1; i < temp_line.length; i++) {\n                        Node node = new Node();\n                        if(tree.search_parent(temp_line[i].trim()) != null)\n                            node= tree.search_parent(temp_line[i].trim());\n                        node.setInfo(temp_line[i].trim());\n                        node.setStatus(\"Or\");\n                        tree.add_node(parent, node);\n                    }\n                }\n                if (str.contains(\"^\")) {\n                    String[] temp_line = str.split(\"[=,^]\");\n                    Node parent = tree.search_parent(temp_line[0].trim());\n                    if (parent == null && check_point == false) {\n                        parent = new Node();\n                        parent.setInfo(temp_line[0].trim());\n                        tree.add_node(parent);\n                    }\n                    if (check_point == true) {\n                        parent = new Node();\n                        parent.setStatus(\"Mandatory\");\n                        parent.setInfo(temp_line[0].trim());\n\n                        tree.add_node(tree.getRoot(), parent);\n                    }\n                    for (int i = 1; i < temp_line.length; i++) {\n                        Node node = new Node();\n                        if(tree.search_parent(temp_line[i].trim()) != null)\n                            node= tree.search_parent(temp_line[i].trim());\n                        node.setInfo(temp_line[i].trim());\n                        node.setStatus(\"Alternative\");\n                        tree.add_node(parent, node);\n                    }\n                }\n                check_point = false;\n                str = scan.nextLine().replace(\" \", \"\");\n            }\n            tree.find_father();\n            tree.delete_extra();\n            //System.out.println(tree);\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            ArrayList<HashSet<Node>> sets = new ArrayList<>();\n            String input = scan.nextLine().replace(\" \", \"\");\n            while (!input.equals(\"##\")) {\n                input = input.replaceAll(\"\\\\{\", \"\");\n                input = input.replaceAll(\"\\\\}\", \"\");\n                String[] temp_line1 = input.split(\",\");\n                HashSet<Node> temp_set = new HashSet<>();\n                for (int i = 0; i < temp_line1.length; i++) {\n                    Node node = new Node();\n                    node.setInfo(temp_line1[i].trim());\n                    temp_set.add(node);\n                }\n                sets.add(temp_set);\n                input = scan.nextLine().replace(\" \", \"\");\n\n            }\n            for (HashSet<Node> final_set : sets) {\n                //System.out.println(final_set);\n                if (check(tree, final_set))\n                    result.add(\"Valid\");\n                else\n                    result.add(\"Invalid\");\n\n            }\n            result.add(\"+++\");\n            str = scan.nextLine().replace(\" \", \"\");\n        }\n        for (String s : result) {\n            System.out.println(s);\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2175_46__1_108013_7", "golden_code": "import java.util.*;\npublic class Main {\n\tpublic static void main(String [] args){\n\t\tScanner input=new Scanner(System.in);\n\t\t\n\t\tint[] numInRange;\n\t\twhile(input.hasNext()){\n\n\t\t\tint n=input.nextInt();\n\t\t\tnumInRange=new int[n];\n\t\t\tint a,b;\n\t\t\tboolean isJolly=true;\n\t\t\ta=input.nextInt();\n\t\t\tfor(int i=1;i<n;i++){\n\t\t\t\t\n\t\t\t\tb=input.nextInt();\n\t\t\t\tif(Math.abs(a-b)>=n)\n\t\t\t\t\tisJolly=false;\n\t\t\t\telse\n\t\t\t\t\tnumInRange[Math.abs(a-b)]++;\n\t\t\t\ta=b;\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i=1;i<n && isJolly;i++){\n\t\t\t\tif(numInRange[i]>1)\n\t\t\t\t\tisJolly=false;\n\t\t\t}\n\t\t\tif(isJolly)\n\t\t\t\tSystem.out.println(\"Jolly\");\n\t\t\telse \n\t\t\t\tSystem.out.println(\"Not jolly\");\n\t\t}\n\t}\n}\n\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNextLine()){\n\t\t\tString line = in.nextLine();\n\t\t\tString[] a = line.split(\"[+-]\");\n\t\t\tArrayList b = new ArrayList();\n\t\t\tfor(int i=1; i<line.length(); i++){\n\t\t\t\tif(line.charAt(i) == '+' || line.charAt(i) == '-'){\n\t\t\t\t\tb.add(line.charAt(i));\n\t\t\t\t}\n\t\t\t}\n\t\t\tint j=0;\n\t\t\tString answer;\n\t\t\tfor(String s: a){\n\t\t\t\tif(s.length() == 0)\n\t\t\t\t\tcontinue;\n\t\t\t\tString ans = \"A\";\n\t\t\t\tint i = s.length();\n\t\t\t\tif((int) s.charAt(i-1) <= (int) '9' && (int) s.charAt(i-1) >= (int) '0'){\n\t\t\t\t\tfor(int k=i-1; k>=0; k--){\n\t\t\t\t\t\tif((int) s.charAt(k) <= (int) 'z' && (int) s.charAt(k) >= (int) 'a'){\n\t\t\t\t\t\t\tans = s.substring(0, k+1) + \"^\" + s.substring(k+1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(j == 0 && (line.charAt(0) == '-' || line.charAt(0) == '+'))\n\t\t\t\t\tSystem.out.print(line.charAt(0));\n\t\t\t\tif(ans.equals(\"A\")){\n\t\t\t\t\tSystem.out.print(s);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tSystem.out.print(ans);\n\t\t\t\tif(j<b.size()){\n\t\t\t\t\tSystem.out.print((Character)b.get(j));\n\t\t\t\t}\n\t\t\t\tif(j == b.size())\n\t\t\t\t\tSystem.out.println();\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_148__1_1001_347", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    \n\n\n    public static void main(String args[])\n    {\n        Scanner cin=new Scanner(System.in);\n        \n        while(cin.hasNextInt())\n {\n           int num1 = Integer.parseInt(String.valueOf(cin.nextInt()));\n           int num2 = Integer.parseInt(String.valueOf(cin.nextInt()));\n           \n     int c = num1 + num2 ;\n            System.out.println(c);\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_101073_12__1_101071_4", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n    public static void main(String[] args) {\n        int input;\n        int input1;\n        int input2;\n\n       Scanner s=new Scanner(System.in);\n       input=s.nextInt();\n        for(int i=0;i<input;i++){\n        int max=0;\n        int min=Integer.MAX_VALUE;\n           input1=s.nextInt();\n            for(int j=0;j<input1;j++){\n                input2= s.nextInt();\n                if(input2<min)\n                    min=input2;\n\n                if(input2>max)\n                    max=input2;\n\n                \n               \n           }\n System.out.println((max-min)*2);\n         \n       }\n\n      \n       \n\n    }\n\n}\n", "generated_code": "\nimport java.io.FileNotFoundException;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) throws FileNotFoundException\n    {\n        Scanner in=new Scanner(System.in);\n        int T=in.nextInt();\n        for(int t=0;t<T;t++)\n        {\n            int N=in.nextInt();\n            in.nextLine();\n            String[]l=new String[N];\n            for(int n=0;n<N;n++)\n                l[n]=in.nextLine();\n            Arrays.sort(l);\n            boolean f=true;\n            for(int i=0;i<N-1 ;i++)\n                if(l[i+1].length()>=l[i].length()&&l[i+1].startsWith(l[i])){\n                    System.out.println(\"NO\");\n                    f=false;\n                    i=N;\n                }\n            if(f)\n                System.out.println(\"YES\");\n            \n        }      \n    }\n}", "score": 0.0}
{"id": "SHARE_1_1959_44__5_1003_51", "golden_code": "\nimport java.util.*;\n/**\n *\n * @author arsenic\n */\npublic class Main {\npublic static int[] a;\n    public static int c;\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner in=new Scanner(System.in);\n        int m=0,b=0;\n        while(in.hasNext()){\n            m=0;b=0;\n            c=0;\n            int n=in.nextInt();\n            if(1 <= n && n<= 10000){\n            \n            a=new int[n];\n            for(int i=0;i<a.length;i++){\n                a[i]=0;\n            }\n            \n                for(int k=0;k<a.length;k++){\n                     int x=in.nextInt();\n                     a[k]=x;\n                }\n                \n//           for(int i=0;i<a.length;i++){\n//               System.out.print(a[i]);\n//           }\n           \n           \n           for(int i=0;i<2;i++){\n               \n               for(int j=0;j<n;j++){\n                   if(a[j]!=j%2){\n                       m++;\n                       \n                   }\n               }\n               for(int z=1;z<=n;z++){\n                   if(a[z-1]!=z%2){\n                       b++;\n                    }\n               }      \n           }\n           \n          if(m<b){\n              System.out.println(m/2);\n          }\n          else{\n              System.out.println(b/2);\n          }\n                       \n                   \n               \n               \n               \n             \n               \n               \n               \n               \n               \n           \n                \n           \n           \n            }\n    }\n    }}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main{\n    public static boolean square(int n){\n        int i=1;\n        for(;;){\n            if(n<0) return false;\n            else if(n==0) return true;\n            n-=i;\n            i+=2;\n        }    \n    }\n    public static int comb(int s,int t,ArrayList<int []> num){\n        int[] sol=new int[num.size()];\n        int[] mysol=new int[num.size()];\n        int[][] M;\n        M=new int[s+1][t+1];\n        for (int j=0;j<=s;j++)\n            for (int k=0;k<=t;k++){\n                if(j==0 && k==0){M[j][k]=1;continue;}\n                for(int i=0;i<num.size();i++){\n                    if(j>=num.get(i)[0] && k>=num.get(i)[1])\n                        sol[i]=M[j-num.get(i)[0]][k-num.get(i)[1]];\n                    else sol[i]=0;\n                }\n        for(int i=0;i<num.size();i++){\n            if(j>=num.get(i)[0] && k>=num.get(i)[1] & sol[i]!=0)\n                mysol[i]=1+sol[i];\n            else mysol[i]=0;\n        }\n        M[j][k]=1000;\n        for ( int i = 0; i < num.size(); i++ )\n          if ( mysol[i] < M[j][k] && mysol[i]!=0 )\n              M[j][k] = mysol[i];\n        M[j][k]=M[j][k]==1000?0:M[j][k];\n            }\n        return M[s][t];\n\n    }\n    \n    \n    \n    public static void main(String[] args) {\n        Scanner sc =new Scanner(System.in);\n        int t=sc.nextInt(),i,k,sol;\n        while(t>0){\n        int m=sc.nextInt(),S=sc.nextInt();\n        ArrayList<int[]> num=new ArrayList<int[]>();\n        for(i=0;i<m;i++){\n            num.add(new int[]{sc.nextInt(),sc.nextInt()});\n        } \n        ArrayList<Integer> s=new ArrayList<Integer>();\n        for (i=0;i<S+1;i++){\n            k=S*S-i*i;\n            if(square(k)) s.add(i);\n        }\n        int[] ans=new int[s.size()];\n        for (i=0;i<s.size();i++)\n            ans[i]=comb(s.get(i),s.get(s.size()-i-1),num);\n        sol=1000;\n        for (i=0;i<ans.length;i++)\n            if(ans[i]<sol & ans[i]>0) sol=ans[i];\n        if(sol==1000) System.out.println(\"not possible\");\n        else System.out.println(sol-1); \n        t--;\n    }\n    }\n    \n}\n", "score": 0.0}
{"id": "SHARE_1_1009_69__1_1009_106", "golden_code": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nimport java.util.Scanner;\n\n/**\n *\n * @author kazemi\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner input = new Scanner(System.in);\n        float m = (float) 0.0;\n        for (int i = 0; i < 12; i++) {\n           m = m + input.nextFloat();\n            //System.out.println(\"\"+m);\n        }\n        m = m/12;\n        System.out.print(\"$\");\n        System.out.format(\"%.2f\",m); \n        \n    }\n}\n", "generated_code": "import java.util.*;\npublic class Main {\n\tpublic static void main(String s[]) {\n\t\tScanner in = new Scanner(System.in);\n\t\tdouble sum=0;\n\t\tfor(int i=0;i<12;i++)\n\t\t{\n\t\t\tdouble val=in.nextDouble();\n\t\t\tsum+=val;\n\t\t}\t\t\n\t\tSystem.out.printf(\"$%.2f\\n\",sum/12);\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1018_22__1_1089_17", "golden_code": "import java.io.PrintWriter;\nimport java.util.Scanner;\npublic class Main{\n    public static void main(String[] args) {\n        // TODO code applicatio() {}n logic here\n        Scanner cin=new Scanner(System.in);\n        PrintWriter cout=new PrintWriter(System.out);\n        int round;\n        for(int z=0;(round=cin.nextInt())!=0;z++){\n            int A[]=new int[round],B[]=new int[round],pointA=0,pointB=0;\n            for(int i=0;i<round;i++)\n                A[i]=cin.nextInt();\n            for(int i=0;i<round;i++)\n                B[i]=cin.nextInt();\n            for(int i=0;i<round;i++){\n                if(A[i]==B[i])\n                    continue;\n                else{\n                    if(Math.abs(A[i]-B[i])==1){\n                        int a=A[i]+B[i];\n                        if(A[i]==1||B[i]==1)\n                            a*=2;\n                        if(A[i]<B[i])\n                            pointA+=a;\n                        else\n                            pointB+=a;\n                    }\n                    else{\n                        if(A[i]>B[i])\n                            pointA+=A[i];\n                        else\n                            pointB+=B[i];\n                    }\n                }\n            }\n            if(z!=0)\n                System.out.println();\n            System.out.println(\"A has \"+pointA+\" points. B has \"+pointB+\" points.\");\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n\n public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        \n        int a,b,c,counter=0;\n        a=input.nextInt();\n        b=input.nextInt();\n        c=input.nextInt();\n        while(a!=0 || b!=0 || c!=0){\n            \n            System.out.println(\"Triangle #\"+(++counter));\n            if(c==-1)\n                System.out.printf(\"c = %.3f\\n\",Math.sqrt(a*a+b*b));\n            \n            else{\n                if(Math.max(Math.max(a, b), c)!=c)\n                    System.out.println(\"Impossible.\");\n                else\n                    if(a==-1)\n                        System.out.printf(\"a = %.3f\\n\",Math.sqrt(c*c-b*b));\n                    else\n                        System.out.printf(\"b = %.3f\\n\",Math.sqrt(c*c-a*a));\n                \n            }\n            \n            a=input.nextInt();\n            b=input.nextInt();\n            c=input.nextInt();\n            \n        //    if(a!=0 || b!=0 || c!=0)\n                System.out.println();\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1241_1__1_2429_3", "golden_code": "//package topcoder;\n\n/**\n * @author vahid\n */\nimport java.util.*;\n//sharecode 1174 = div one 250\npublic class Main \n{\n    public static void main(String[] args)\n    {\n        Scanner scan = new Scanner (System.in);\n        int n ;\n        \n        while(scan.hasNext())\n        {\n            int max;\n            n = scan.nextInt();\n            int [][] rec= new int [n][4] ;\n            for (int i =0 ;i<n ; i++)\n                for (int j=0;j<4 ;j ++)\n                {\n                    rec[i][j]=scan.nextInt();\n                    \n                }\n            int k = 0;\n            for (int i =0 ;i<n ; i++)\n            {\n                for (int j=0;j<n ;j ++)\n                {\n                   if(i==j) continue;\n                   if(rec[i][0] >= rec[j][0] && rec[i][1] <= rec [j][1])\n                       if(rec[i][2] >= rec[j][2] && rec[i][3] <= rec [j][3])\n                       { k++; break;}\n                }\n                \n            }\n             System.out.println(k);   \n        }\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        for (int o = 0; o < n; o++) {\n            int num = s.nextInt();\n            int res = 0;\n            for (int i = 2; i * i <= num; i++) {\n                if (num % i == 0) {\n                    res += i;\n                    if((num/i) != i)\n                        res += (num/i);\n                }\n            }\n            res++;\n            if(num == 1)\n                System.out.println(\"0\");\n            else\n                System.out.println(res);\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_418__1_1001_163", "golden_code": "\nimport java.util.Scanner;\n\n/**\n *\n * @author user1\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n\twhile(input.hasNext())\n\t{\n\t\tString[]s=input.nextLine().split(\" \");\n\t\tint A=Integer.parseInt(s[0]);\n\t\tint B=Integer.parseInt(s[1]);\n\t\tint sum=A+B;\n\t\tSystem.out.println(sum);\n\t}\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author ArcxX\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n         Scanner s = new Scanner (System.in);\n         while(s.hasNext()){\n               System.out.println(s.nextInt()+s.nextInt());\n             \n         }\n        \n        \n    }\n    \n}\n", "score": 1.0}
{"id": "SHARE_1_2578_10__1_2578_11", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n    \n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int a = s.nextInt(); s.nextLine();\n        for (int i = 0 ; i<a ; i++){\n            int counterb = 0 ;\n            int counterg = 0 ;\n            String str = s.nextLine();\n            char[] open = str.toCharArray();\n            for (int j = 0 ; j<str.length() ; j++){\n                if (open[j]=='g' || open[j]=='G')\n                    counterg++;\n                if (open[j]=='b' || open[j]=='B')\n                    counterb++;\n            }\n            if (counterg>counterb)\n                System.out.println(str+\" is GOOD\");\n            else if(counterb>counterg)\n                System.out.println(str+\" is A BADDY\");\n            else if(counterb==counterg)\n                System.out.println(str+\" is NEUTRAL\");\n        }\n    }\n\n}\n", "generated_code": "\n\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String [] args){\n        String str;\n        char ch[];\n        int bcount,gcount;\n        Scanner cin=new Scanner(System.in);\n        int i=cin.nextInt();\n        cin.nextLine();\n        for(;i>0;i--){\n            str=cin.nextLine();\n            //System.out.println(\"str:\"+str);\n            ch=str.toCharArray();\n            bcount=gcount=0;\n            for(int j=0 ; j<ch.length;j++){\n                if(ch[j]=='b' || ch[j]=='B'){\n                    bcount++;\n                }\n                if(ch[j]=='g' || ch[j]=='G'){\n                    gcount++;\n                }\n            }\n            if(bcount>gcount){System.out.println(str+\" is A BADDY\");}\n            else if(bcount<gcount){System.out.println(str+\" is GOOD\");}\n            else{System.out.println(str+\" is NEUTRAL\");}\n        }\n    }\n\n}\n", "score": 1.0}
{"id": "SHARE_1_2549_19__1_1459_12", "golden_code": "import java.util.Scanner;;\n\nclass Main {\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tString text, text1;\n\t\tint sum;\n\t\tint result;\n\t\tboolean ok;\n\t\tint a = scan.nextInt(), b = scan.nextInt();\n\t\twhile (true) {\n\t\t\tresult = 0;\n\t\t\tok = true;\n\t\t\ttext = \"\";\n\t\t\ttext1 = \"\";\n\t\t\ta = convert(a);\n\t\t\tb = convert(b);\n\t\t\tsum = a + b;\n\t\t\ttext += sum;\n\t\t\tfor (int j = 0; j < 8; j++) {\n\t\t\t\tfor (int i = 0; i < text.length(); i++) {\n\t\t\t\t\tif (text.charAt(i) == '2') {\n\t\t\t\t\t\tsum -= (2 * Math.pow(10, text.length() - i - 1));\n\t\t\t\t\t\tif (i < text.length())\n\t\t\t\t\t\t\tsum += Math.pow(10, text.length() - i - 2);\n\t\t\t\t\t\tsum += Math.pow(10, text.length() - i);\n\t\t\t\t\t\ttext = Integer.toString(sum);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < text.length(); i++) {\n\t\t\t\tresult += (Math.pow(2, text.length()-i-1)\n\t\t\t\t\t\t* Character.getNumericValue(text.charAt(i)));\n\t\t\t}\n\t\t\tSystem.out.println(result);\n\t\t\ta = scan.nextInt();\n\t\t\tb = scan.nextInt();\n\t\t\tif(a==0&&b==0)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tpublic static int convert(int a) {\n\t\tString s = \"\";\n\t\tint[] q = new int[8];\n\t\tfor (int i = 0; i < 8; i++) {\n\t\t\tq[i] = a % 2;\n\t\t\ta /= 2;\n\t\t}\n\t\tfor (int i = q.length - 1; i >= 0; i--) {\n\t\t\ts += q[i];\n\t\t}\n\t\treturn Integer.parseInt(s);\n\t}\n}", "generated_code": "import java.math.BigInteger;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while (input.hasNext()) {\n            String str=input.nextLine();\n            BigInteger ss = new BigInteger(str);\n            int l = str.length();\n            int count = 0;\n            for (int i = 1; i <= l; i++) {\n                BigInteger b = ss.multiply(new BigInteger(i + \"\"));\n                for (int n = l; n >= 1; n--) {\n                    String c = str.substring(str.length() - n) + str.substring(0, str.length() - n);\n                    String bb = b + \"\";\n                    if(bb.length()<c.length()){\n                        int y=c.length()-bb.length();\n                        for(int x=0;x<y;x++)\n                           bb=\"0\"+bb; \n                    }\n                    if (c.equals(bb)) {\n                        count++;\n                        break;\n                    }\n                }\n            }\n            if (count != l) \n                System.out.printf(\"%s is not cyclic\\n\", str);          \n            \n            if (count == l) \n                System.out.printf(\"%s is cyclic\\n\", str);\n            \n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_139__1_1001_206", "golden_code": "\n\nimport java.util.Scanner;\n\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner a=new Scanner(System.in);\n\n        int z,s;\n        while(a.hasNext()){\n        z=a.nextInt();\n        s=a.nextInt();\n            System.out.println(z+s);\n        }\n      \n    }\n\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner s = new Scanner(System.in);\n\t\twhile (s.hasNext()) {\n\t\t\tString str[] = s.nextLine().split(\" \");\n\t\t\tif(str.length < 2) break;\n\t\t\tint a = Integer.parseInt(str[0]);\n\t\t\tint b = Integer.parseInt(str[1]);\n\t\t\tSystem.out.println(a+b);\n\t\t\t\n\t\t}\n\n\t}\n\n}\n\n", "score": 1.0}
{"id": "SHARE_1_1230_1__1_2563_0", "golden_code": "import java.util.Scanner;\npublic class Main \n{\n    public static void main (String[] args)\n    {\n        Scanner scan =new Scanner(System.in);\n        String S = scan.nextLine();\n        \n        int r =0;\n        while(!\"0\".equals(S))\n        {\n            do\n            {\n                char[] s = S.toCharArray();\n                r=0;\n                for (int i=0; i<s.length;i++ )\n                {\n                    r += Integer.parseInt(String.valueOf(s[i]));\n                }\n                S = String.valueOf(r);\n            }while(r>=10);\n            System.out.println(r);\n            S = scan.nextLine();\n        }\n    }\n}", "generated_code": "import java.io.*;\nimport java.math.BigInteger;\nimport  static java.math.BigInteger.*;\nimport java.util.*;\npublic class Main{\n\n\n\n\n    Integer[]inds;\n    int[]a;\n\n    void solve()throws Exception\n    {\n        int test=1;\n        while(true)\n        {\n            int n=nextInt();\n            if(n==0)\n                break;\n            long[][]dp=new long[n+2][n+1];\n            dp[0][0]=1;\n            for(int whole=0;whole<=n;whole++)\n            for(int half=0;half<=n;half++)\n                {\n                    if(half+whole==0)\n                        continue;\n                    if(half>0)\n                        dp[half][whole]+=dp[half-1][whole];\n                    if(whole>0)\n                        dp[half][whole]+=dp[half+1][whole-1];\n                }\n            System.out.println(dp[0][n]);\n            test++;\n        }\n\n\n\n    }\n\n    ////////////\n    BufferedReader reader;\n    PrintWriter writer;\n    StringTokenizer stk;\n    void run()throws Exception\n    {\n        reader=new BufferedReader(new InputStreamReader(System.in));\n        stk=null;\n        writer=new PrintWriter(System.out);\n        solve();\n        reader.close();\n        writer.close();\n    }\n    int nextInt()throws Exception\n    {\n        return Integer.parseInt(nextToken());\n    }\n\n    long nextLong()throws Exception\n    {\n        return Long.parseLong(nextToken());\n\n    }\n    double nextDouble()throws Exception\n    {\n        return Double.parseDouble(nextToken());\n\n\n    }\n\n    String nextString()throws Exception\n    {\n        return nextToken();\n    }\n    String nextLine()throws Exception\n    {\n        return reader.readLine();\n    }\n    String nextToken()throws Exception\n    {\n        if(stk==null || !stk.hasMoreTokens())\n        {\n            stk=new StringTokenizer(nextLine());\n            return nextToken();\n\n        }\n        return stk.nextToken();\n    }\n\n    public static void main(String[]args) throws Exception\n    {\n        new Main().run();\n    }\n\n\n\n}", "score": 0.0}
{"id": "SHARE_1_2770_27__1_2822_8", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    static int[][] road;\n    public static void main(String[] args) {\n\n        Scanner input = new Scanner(System.in);\n        int testcase = input.nextInt();\n        for (int i = 0; i < testcase; i++) {\n            int n = input.nextInt();\n            int m = input.nextInt();\n            road = new int[m][m];\n            int count=0;\n            for (int j = 0; j < n; j++) {\n                input.next();\n                int temp=input.nextInt();\n                for (int k = 0; k < temp; k++) {\n                    int satr,soton;\n                    satr=input.nextInt();\n                    soton=input.nextInt();\n                    if (road[satr][soton]==0 && satr!=soton) {\n                        road[satr][soton]=1;\n                        road[soton][satr]=1;\n                        count++;\n                    }\n                }\n            }\n            System.out.println(count);\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String args[]){\n\t\tScanner in = new Scanner(System.in);\n\t\tint t=in.nextInt();\n\t\twhile(t-->0){\n\t\t\t long s1= 0;\n\t\t\t long s2= 0;\n\t\t\t long s3=0;\n\t\t\tlong n= in.nextInt();\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\ts1+=i+1;\n\t\t\t\ts2+=(2*i+1);\n\t\t\t\ts3+=(i+1)*2;\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t System.out.println(s1+\" \"+s2+\" \"+s3);\n\t\t}\n\t\t\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1001_279__1_1001_3", "golden_code": "\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Scanner;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n/**\n *\n * @author 9116073\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner in = new Scanner(System.in);\n        StringBuilder sb=new StringBuilder();\n        while(in.hasNext()){\n            sb.append((int)(in.nextInt()+in.nextInt())).append(\"\\n\");\n        }\n        System.out.println(sb.toString().trim());\n//        int t = in.nextInt();\n//        for (int ii = 0; ii < t; ii++) {\n//            int n = in.nextInt();\n//            int[] a = new int[n];\n//            for (int i = 0; i < a.length; i++) {\n//                a[i] = in.nextInt();\n//            }\n//            int p = in.nextInt();\n//            HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n//            for (int i = 0; i < p; i++) {\n//                for (int j = 0; j < a.length; j += p) {\n//                    int sum = F(a, j, p);\n//                    boolean addIt = true;\n//                    for (int k = 0; k < p; k++) {\n//                        if (map.containsKey(j - k)) {\n//                            int temp = map.get(j - k);\n//                            if (sum > temp) {\n//                                map.remove(j - k);\n//                            } else {\n//                                addIt = false;\n//                            }\n//                            break;\n//                        }\n//                    }\n//                    if (addIt) {\n//                        map.put(j, sum);\n//                    }\n//                }\n//            }\n//            ArrayList<Integer> list = new ArrayList<Integer>();\n//            Iterator it = map.entrySet().iterator();\n//            while (it.hasNext()) {\n//                Map.Entry pairs = (Map.Entry) it.next();\n//                list.add((int) pairs.getValue());\n//                it.remove(); // avoids a ConcurrentModificationException\n//            }\n//            Collections.sort(list);\n//            int sum = 0;\n//            for (int i = list.size() - 3; i < list.size(); i++) {\n//                sum += list.get(i);\n//            }\n//            System.out.println(sum);\n//        }\n    }\n\n    private static int F(int[] a, int j, int p) {\n        int sum = 0;\n        for (int i = 0; i < p && i + j < a.length; i++) {\n            sum += a[i + j];\n        }\n        return sum;\n    }\n}\n", "generated_code": "import java.util.Scanner;\nimport java.util.StringTokenizer;;\npublic class Main {\n\tpublic static String reverse(String str)\n\t{\n\t\tString rev = \"\";\n\t\tfor(int i=str.length()-1;i>=0;i--)\n\t\t\trev += String.valueOf(str.charAt(i));\n\t\treturn rev;\n\t}\n\tpublic static void main(String[] argv)\n\t{\n\t\tScanner input = new Scanner(System.in);\n\t\t\n\t\twhile(input.hasNext())\n\t\t{\n\t\t\t\n\t\tint a , b;\n\t\ta = input.nextInt();\n\t\tb = input.nextInt();\n\t\t\n\t\tSystem.out.println(a + b);\n\t\t\t\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_379__1_1001_374", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\tint m, n;\n\t//int[][] numChanges;\n\n\tpublic static void main(String[] args) {\n\t\tMain p = new Main();\n\t\tp.run();\n\t}\n\n\tpublic void run(){\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\twhile(in.hasNext()){\n\t\t\tn = in.nextInt();\t//num of rows\n\t\t\tm = in.nextInt();\n\t\t\tSystem.out.println(n+m);\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while(input.hasNext()){\n        int numberOne = input.nextInt();\n        int numberTwo = input.nextInt();\n        System.out.println(numberOne + numberTwo);\n    }\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1460_4__1_2175_29", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        \n        Scanner s=new Scanner(System.in);\n        \n        int n=s.nextInt();\n        int mat[][]=new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                mat[i][j]=s.nextInt();\n            }\n        }\n        \n        int x=0;\n        int y=0;\n        int max=0;\n        //while(x!=n && y!=n){\n            for (y = 0; y < n; y++) {\n                for (x = 0; x < n; x++) {\n                    int sub[][]=new int[n][n];\n                    sub[x][y]=mat[x][y];\n                    for (int i = (x+1); i < n; i++) {\n                        sub[i][y]=mat[i][y]+sub[i-1][y];\n                    }\n                    for (int i = (y+1); i < n; i++) {\n                        sub[x][i]=mat[x][i]+sub[x][i-1];\n                    }\n                    for (int i = (x+1); i < n; i++) {\n                        for (int j = (y+1); j < n; j++) {\n                            sub[i][j]=mat[i][j]+sub[i-1][j]+sub[i][j-1]-sub[i-1][j-1];\n                            if(sub[i][j]>max){\n                                max=sub[i][j];\n                            }\n                        }\n                    }\n                }\n            }\n//            for (int i = 0; i < n; i++) {\n//                for (int j = 0; j < n; j++) {\n//                    System.out.print(sub[i][j]+\" \");\n//                }\n//                System.out.println(\"\");\n//            }\n//            break;\n            System.out.println(max);\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\n\npublic class Main {\n    public static void main(String[] args){\n        Scanner in=new Scanner(System.in);\n        while(in.hasNext()){\n            int n=in.nextInt();\n            int[] m=new int[n];\n            boolean[]a=new boolean[n];\n            for(int i=1;i<n;i++)\n                a[i]=false;\n            for(int i=0;i<n;i++)\n                m[i]=in.nextInt();\n            for(int i=0;i<n-1;i++){\n                int k=Math.abs(m[i]-m[i+1]);\n                if(k>-1&&k<n)\n                    a[k]=true;\n            }\n            boolean f=true;\n            for(int i=1;i<n;i++)\n                if(a[i])\n                    continue;\n                else{\n                    f=false;\n                    break;\n                }\n                if(f)\n                    System.out.println(\"Jolly\");\n                else\n                    System.out.println(\"Not jolly\");\n                    \n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1017_7__1_1001_218", "golden_code": "import java.util.HashMap;\nimport java.util.Scanner;\n\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tk:while(true){\n\t\t\tHashMap<Integer,Point> q = new HashMap<Integer,Point>();\n\t\t\tfor (int i =11,j=0;i<=30;i++,j++){\n\t\t\t\tq.put(j,new Point(25, i));\n\t\t\t}\n\t\t\tint t = input.nextInt();\n\t\t\tif (t==0){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tchar[] cs = input.next().toCharArray();\n\t\t\tfor (int i =0;i<cs.length;i++){\n\t\t\t\tq.remove(i);\n\t\t\t\tPoint p ;\n\t\t\t\tPoint head = q.get(19+i);\n\t\t\t\tif (cs[i]=='N'){\n\t\t\t\t\tp = new Point(head.x-1,head.y);\n\t\t\t\t}else if(cs[i]=='S'){\n\t\t\t\t\tp = new Point(head.x+1,head.y);\n\t\t\t\t}else if(cs[i] == 'E'){\n\t\t\t\t\tp = new Point(head.x,head.y+1);\n\t\t\t\t}else {\n\t\t\t\t\tp = new Point(head.x,head.y-1);\n\t\t\t\t}\n\t\t\t\tif (p.x<1||p.x>50||p.y<1||p.y>50){\n\t\t\t\t\tSystem.out.println(\"The worm ran off the board on move \"+(i+1)+\".\");\n\t\t\t\t\tcontinue k;\n\t\t\t\t}\n\t\t\t\tif (q.containsValue(p)){\n\t\t\t\t\tSystem.out.println(\"The worm ran into itself on move \"+(i+1)+\".\");\n\t\t\t\t\tcontinue k;\n\t\t\t\t}\n\t\t\t\tq.put(19+i+1,p);\n\t\t\t}\n\t\t\tSystem.out.println(\"The worm successfully made all \"+cs.length+\" moves.\");\n\t\t}\n\t}\n\t\n}\nclass Point{\n\tpublic Point(int x,int y) {\n\t\tthis.x=x;\n\t\tthis.y=y;\n\t}\n\t\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (! (obj instanceof Point)){\n\t\t\treturn false;\n\t\t}\n\t\tPoint other = (Point) obj;\n\t\treturn x == other.x && y==other.y;\n\t}\n\tint x;\n\tint y;\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"(\"+x+\" , \"+y+\")\";\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\t\t\n\t\t\tScanner s=new Scanner(System.in);\n\t\t\twhile(s.hasNext()){\n\t\t\t\tint A=s.nextInt();\n\t\t\t\tint B=s.nextInt();\n\t\t\t\tSystem.out.println(A+B);\n\t\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_469__1_1001_22", "golden_code": "/* @JUDGE_ID:  2003  ???  Java  \"???\" */\n/* @BEGIN_OF_SOURCE_CODE */ \n\nimport java.util.Scanner;\n     \npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner cin = new Scanner(System.in);\n\t\tint a,b;\n\t\twhile(cin.hasNext()){\n                    a = cin.nextInt();\n                    b = cin.nextInt();\n                    System.out.println(a+b);\n                }\n\t\t              \n\t\n\t}\n}\n\t\n/* @END_OF_SOURCE_CODE */ ", "generated_code": "import java.util.*;\nclass Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile(scan.hasNextInt())\n\t\t{\n\t\t\tint a = scan.nextInt();\n\t\t\tint b = scan.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2811_35__1_1001_429", "golden_code": "\n\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n\n        int num = input.nextInt();\n\n        while (num!=0){\n           int n = input.nextInt();\n           int m = input.nextInt();\n\n            int[] l1 = new int[n];\n            for (int j = 0; j < n; j++) {\n                l1[j]=input.nextInt();\n            }\n            int[] l2 = new int[m];\n            for (int k = 0; k < m; k++) {\n                l2[k]=input.nextInt();\n            }\n            for (int s = 0; s < l1.length; s++) {\n                for (int e = 0; e < l2.length; e++) {\n                    if (l1[s] == l2[e]) {\n                        l1[s]=0;\n                    }\n                }\n            }\n            Arrays.sort(l1);\n            int flag = 0;\n            StringBuilder s = new StringBuilder();\n\n            for (int f = 0; f < l1.length; f++) {\n                if(l1[f]!=0) {\n                    flag = 1;\n                    s.append(l1[f]).append(\",\");\n                }\n            }\n            if (flag == 1) {\n                s.delete(s.length() - 1, s.length());\n            }\n            System.out.println(s.toString());\n            num--;\n\n        }\n    }\n\n}\n\n\n", "generated_code": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String args[]){\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext()){\n\t\t\tSystem.out.println((in.nextInt()+in.nextInt()));\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1017_13__1_109016_19", "golden_code": "import java.util.*;\nclass Main{\n\tpublic static void main(String[] z) {\n\t\tScanner s = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tArrayList<int[]> q = new ArrayList<int[]>();\n\t\t\tint i =11,t=s.nextInt(),k=0;\n\t\t\tfor(;i<=30;)\n\t\t\t\tq.add(new int[]{25,i++});\n\t\t\tif (t==0)\n\t\t\t\treturn;\n\t\t\tString a= \"The worm successfully made all \"+t+\" moves\",b=\"The worm ran \";\n\t\t\tk:for (char c :s.next().toCharArray()){\n\t\t\t\tk++;\n\t\t\t\tq.remove(0);\n\t\t\t\tint[] h = q.get(18),p={h[0],h[1]};\n\t\t\t\tif (c=='N')\n\t\t\t\t\tp[0]=h[0]-1;\n\t\t\t\telse if(c=='S')\n\t\t\t\t\tp[0]=h[0]+1;\n\t\t\t\telse if(c =='E')\n\t\t\t\t\tp[1]=h[1]+1;\n\t\t\t\telse \n\t\t\t\t\tp[1]=h[1]-1;\n\t\t\t\tif (p[0]<1||p[0]>50||p[1]<1||p[1]>50){\n\t\t\t\t\ta=b+\"off the board on move \"+k;break;\n\t\t\t\t}else\n\t\t\t\t\tfor (int[]r:q)\n\t\t\t\t\t\tif(r[0]==p[0]&&r[1]==p[1]){\n\t\t\t\t\t\t\ta=b+\"into itself on move \"+k;break k;\n\t\t\t\t\t\t}\n\t\t\t\tq.add(p);\n\t\t\t}\n\t\t\tSystem.out.println(a+\".\");\n\t\t}\n\t}\n}", "generated_code": "import java.awt.Point;\nimport java.awt.geom.Point2D;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.InputMismatchException;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\n\n\npublic class Main {\n\n\t\n\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\tInputStream input=System.in;\n\t\tInputReader in=new InputReader(input);\n        while (true) {\n        \tint n = 0;\n        \tn = in.readInt();\n        \t\n        \tif (n == 0)\n        \t\tbreak;\n        \tPoint2D[] points = new Point2D[n];\n        \t\n        \tfor(int i=0; i<n; i++) {\n        \t\t\n        \t\tdouble x = in.readDouble();\n                double y = in.readDouble();\n                \n            \tpoints[i] = new Point2D.Double(x, y);\n            \t\n        \t}//END for\n        \t\n        \t\n        \tPoint2D[] cP = closestPair(points);\n        \t\n        \t\n        \t double value = cP[0].distance(cP[1]) ;\n        \t value = value/2;\n        \t System.out.printf(\"%.2f\", value);\n        \t System.out.println();\n        \t    \t \n        }//END while(true)\n\t}\n\n\npublic static Point2D[] closestPair(Point2D[] points) {\n\t\n    Point2D[] closestPair = new Point2D[2];\n\n \n\n    //When we start the min distance is the infinity\n\n  // double crtMinDist = Double.POSITIVE_INFINITY;\n\n    double crtMinDist = 999999999;\n \n\n    //Get the points and sort them\n\n    Point2D[] sorted = Arrays.copyOf(points, points.length);\n\n    Arrays.sort(sorted, HORIZONTAL_COMPARATOR);\n\n\n\n    //When we start the left most candidate is the first one\n\n    int leftMostCandidateIndex = 0;\n\n \n\n    //Vertically sorted set of candidates\n\n    SortedSet<Point2D> candidates = new TreeSet<Point2D>(VERTICAL_COMPARATOR);\n\n \n\n    //For each point from left to right\n\n    for (Point2D current : sorted) {\n\n        //Shrink the candidates\n\n        while (current.getX() - sorted[leftMostCandidateIndex].getX() > crtMinDist) {\n\n            candidates.remove(sorted[leftMostCandidateIndex]);\n\n            leftMostCandidateIndex++;\n\n        }\n\n \n\n        //Compute the y head and the y tail of the candidates set\n\n        Point2D head = new Point2D.Double(current.getX(), (double) (current.getY() - crtMinDist));\n       // (current.getX(),  (current.getY() - crtMinDist));\n\n        Point2D tail = new Point2D.Double(current.getX(), (double) (current.getY() + crtMinDist));\n\n \n\n        //We take only the interesting candidates in the y axis\n\n        for (Point2D point : candidates.subSet(head, tail)) {\n\n            double distance = current.distance(point);\n\n \n\n            //Simple min computation\n\n            if (distance < crtMinDist) {\n\n                crtMinDist = distance;\n\n \n\n                closestPair[0] = current;\n\n                closestPair[1] = point;\n\n            }\n\n        }\n\n \n\n        //The current point is now a candidate\n\n        candidates.add(current);\n\n    }\n\n    return closestPair;\n\n}\n\nprivate static final Comparator<Point2D> VERTICAL_COMPARATOR = new Comparator<Point2D>() {\n    @Override\n    public int compare(Point2D a, Point2D b) {\n        if (a.getY() < b.getY()) {\n            return -1;\n        }\n        if (a.getY() > b.getY()) {\n            return 1;\n        }\n      \n        return 0;\n    }\n\n\t\n};\n\nprivate static final Comparator<Point2D> HORIZONTAL_COMPARATOR = new Comparator<Point2D>() {\n    @Override\n    public int compare(Point2D a, Point2D b) {\n        if (a.getX() < b.getX()) {\n            return -1;\n        }\n        if (a.getX() > b.getX()) {\n            return 1;\n        }\n      \n        return 0;\n    }\n};\n}\n\nclass InputReader {\n\n    private InputStream stream;\n    private byte[] buf = new byte[1024];\n    private int curChar;\n    private int numChars;\n\n    public InputReader(InputStream stream) {\n            this.stream = stream;\n    }\n\n    public int read() {\n            if (numChars == -1)\n                    throw new InputMismatchException();\n            if (curChar >= numChars) {\n                    curChar = 0;\n                    try {\n                            numChars = stream.read(buf);\n                    } catch (IOException e) {\n                            throw new InputMismatchException();\n                    }\n                    if (numChars <= 0)\n                            return -1;\n            }\n            return buf[curChar++];\n    }\n    \n\n    public int readInt() {\n            int c = read();\n            while (isSpaceChar(c))\n                    c = read();\n            int sgn = 1;\n            if (c == '-') {\n                    sgn = -1;\n                    c = read();\n            }\n            int res = 0;\n            do {\n                    if (c < '0' || c > '9')\n                            throw new InputMismatchException();\n                    res *= 10;\n                    res += c - '0';\n                    c = read();\n            } while (!isSpaceChar(c));\n            return res * sgn;\n    }\n    public Double readDouble() {\n        int c = read();\n        while (isSpaceChar(c))\n                c = read();\n        int sgn = 1;\n        if (c == '-') {\n                sgn = -1;\n                c = read();\n        }\n        double res = 0;\n        do {\n                if (c < '0' || c > '9')\n                    if (c=='.') {\n                    \tc=read();\n                    \tint counter=0;\n                    \twhile (!isSpaceChar(c)){\n                    \t\t//System.out.println(\"c1:\"+c+\"\\n\");\n                    \t\tc=c-'0';\n                    \t\tdouble d=0;\n                    \t\td= ((double)(c)) ;\n                    \t\tfor(int j=0;j<counter+1;j++)\n                    \t\t\td=d*0.1;\n                  \n                   // System.out.println(\"d:\"+d+\"\\n\");\n                    //res=res*10;\n                    res=d+res;\n                    //res=res/10;\n                  //  System.out.println(\"res:\"+res+\"\\n\");\n                    //-'0';\n                    counter++;\n                    \tc=read();\n                    }}  \n                    else {throw new InputMismatchException();}\n                else\n                {res *= 10;\n                res += c - '0';\n                c = read();}\n        } while (!isSpaceChar(c));\n        return res * sgn;\n}\n\n    private boolean isSpaceChar(int c) {\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n    }\n}", "score": 0.0}
{"id": "SHARE_5_1000_8__5_1000_4", "golden_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Scanner;\n\npublic class Main{\n\t\n\tpublic static void main(String[] args)throws IOException{\n\t\tint N,H,W,cost,room;\n\t\tlong B,minCost;\n\t\tboolean haveSolution;\n\t\t\n\t\tScanner cs=new Scanner(System.in);\n\t\twhile(cs.hasNext()){\n\t\t\thaveSolution=false;\n\t\t\tminCost=500000;\n\t\t\t\n\t\t\tN=cs.nextInt();\n\t\t\tB=cs.nextLong();\n\t\t\tH=cs.nextInt();\n\t\t\tW=cs.nextInt();\n\t\t\tfor(int i=0;i<H;i++){\n\t\t\t\tcost=cs.nextInt();\n\n\t\t\t\tfor(int j=0;j<W;j++){\n\t\t\t\t\troom=cs.nextInt();\n\t\t\t\t\tif(room>= N)\n\t\t\t\t\t\tif((B>=(N*cost)) && ((N*cost)<minCost)){\n\t\t\t\t\t\t\tminCost=N*cost;\n\t\t\t\t\t\t\thaveSolution=true;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\tif(haveSolution)\n\t\t\t\tSystem.out.println(minCost);\n\t\t\telse System.out.println(\"stay home\");\n\t\t\t\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\twhile(s.hasNext())\n\t\t{\n\t\t\tint n , b , h , w;\n\t\t\tn = s.nextInt();\n\t\t\tb = s.nextInt();\n\t\t\th = s.nextInt();\n\t\t\tw = s.nextInt();\n\t\t\tint min = -1;\n\t\t\tfor(int i = 0 ; i < h ; i++)\n\t\t\t{\n\t\t\t\tint p = s.nextInt();\n\t\t\t\tboolean isAvailable = false;\n\t\t\t\tfor(int j = 0 ; j < w ; j++)\n\t\t\t\t\tif(s.nextInt() >= n)\n\t\t\t\t\t\tisAvailable = true;\n\t\t\t\tif(isAvailable && (min == -1 || min > p))\n\t\t\t\t\tmin = p;\n\t\t\t}\n\t\t\tif(min == -1 || min * n > b)\n\t\t\t\tSystem.out.println(\"stay home\");\n\t\t\telse\n\t\t\t\tSystem.out.println(min * n);\n\t\t}\n\t\ts.close();\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_5_1047_2__1_1502_14", "golden_code": "import java.io.IOException;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        Scanner scanner = new Scanner(System.in);\n        Vector<Graph.Edge> edges;\n        Vector<String> nodeNames;\n\n        int numOfStations, lukeX, lukeY, uniX, uniY;\n        int s1X, s1Y, s2X, s2Y, bX = -1, bY = -1, tempX, tempY;\n        while(true) {\n            numOfStations = scanner.nextInt();\n            lukeX = scanner.nextInt();\n            lukeY = scanner.nextInt();\n            uniX = scanner.nextInt();\n            uniY = scanner.nextInt();\n\n            if (lukeX == -1 && lukeY == -1)\n                break;\n            edges = new Vector<Graph.Edge>();\n            nodeNames = new Vector<String>();\n            edges.add(new Graph.Edge(lukeX + \".\" + lukeY, uniX + \".\" + uniY, (Math.sqrt(Math.pow(lukeX - uniX, 2) + Math.pow(lukeY - uniY, 2)) / 100)));\n            nodeNames.add(lukeX + \".\" + lukeY);\n            nodeNames.add(uniX + \".\" + uniY);\n            for (int i = 0; i < numOfStations; i++) {\n                s1X = scanner.nextInt();\n                s1Y = scanner.nextInt();\n                nodeNames.add(s1X + \".\" + s1Y);\n\n                while (true) {\n                    s2X = scanner.nextInt();\n                    s2Y = scanner.nextInt();\n\n\n                    for (String nodeName :\n                            nodeNames) {\n                        if (!nodeName.equals(s1X + \".\" + s1Y) && !nodeName.equals(s2X + \".\" + s2Y)) {\n                            String[] parts = nodeName.split(\"\\\\.\");\n                            tempX = Integer.parseInt(parts[0]);\n                            tempY = Integer.parseInt(parts[1]);\n                            if ((tempX == bX && tempY == bY)) {\n                                continue;\n                            }\n                            edges.add(new Graph.Edge(s1X + \".\" + s1Y, nodeName, (Math.sqrt(Math.pow(s1X - tempX, 2) + Math.pow(s1Y - tempY, 2))) / 100));\n\n                        }\n                    }\n                    nodeNames.add(s2X + \".\" + s2Y);\n\n                    if (s2X == -1) {\n                        break;\n                    }\n\n                    edges.add(new Graph.Edge(s1X + \".\" + s1Y, s2X + \".\" + s2Y, (Math.sqrt(Math.pow(s2X - s1X, 2) + Math.pow(s2Y - s1Y, 2))) / 500));\n                    bX = s1X;\n                    bY = s1Y;\n                    s1X = s2X;\n                    s1Y = s2Y;\n                }\n            }\n            Graph g = new Graph(edges);\n            g.dijkstra(lukeX + \".\" + lukeY);\n            g.printPath(uniX + \".\" + uniY);\n\n        }\n        //g.printAllPaths();\n    }\n}\n\nclass Graph {\n    private final Map<String, Vertex> graph; // mapping of vertex names to Vertex objects, built from a set of Edges\n\n    /**\n     * One edge of the graph (only used by Graph constructor)\n     */\n    public static class Edge {\n        public final String v1, v2;\n        public final double dist;\n\n        public Edge(String v1, String v2, double dist) {\n            this.v1 = v1;\n            this.v2 = v2;\n            this.dist = dist;\n        }\n    }\n\n    /**\n     * One vertex of the graph, complete with mappings to neighbouring vertices\n     */\n    public static class Vertex implements Comparable<Vertex> {\n        public final String name;\n        public double dist = Double.MAX_VALUE; // MAX_VALUE assumed to be infinity\n        public Vertex previous = null;\n        public final Map<Vertex, Double> neighbours = new HashMap<Vertex, Double>();\n\n        public Vertex(String name) {\n            this.name = name;\n        }\n\n        private void printPath() {\n            System.out.println(Math.round(this.dist));\n        }\n\n        public int compareTo(Vertex other) {\n            if (dist == other.dist)\n                return name.compareTo(other.name);\n\n            return Double.compare(dist, other.dist);\n        }\n\n        @Override\n        public String toString() {\n            return \"(\" + name + \", \" + dist + \")\";\n        }\n    }\n\n    /**\n     * Builds a graph from a set of edges\n     */\n    public Graph(Vector<Edge> edges) {\n        graph = new HashMap<String, Vertex>(edges.size());\n\n        //one pass to find all vertices\n        for (Edge e : edges) {\n            if (!graph.containsKey(e.v1)) graph.put(e.v1, new Vertex(e.v1));\n            if (!graph.containsKey(e.v2)) graph.put(e.v2, new Vertex(e.v2));\n        }\n\n        //another pass to set neighbouring vertices\n        for (Edge e : edges) {\n            graph.get(e.v1).neighbours.put(graph.get(e.v2), e.dist);\n            graph.get(e.v2).neighbours.put(graph.get(e.v1), e.dist); // also do this for an undirected graph\n        }\n    }\n\n    /**\n     * Runs dijkstra using a specified source vertex\n     */\n    public void dijkstra(String startName) {\n        if (!graph.containsKey(startName)) {\n            System.err.printf(\"Graph doesn't contain start vertex \\\"%s\\\"\\n\", startName);\n            return;\n        }\n        final Vertex source = graph.get(startName);\n        NavigableSet<Vertex> q = new TreeSet<Vertex>();\n\n        // set-up vertices\n        for (Vertex v : graph.values()) {\n            v.previous = v == source ? source : null;\n            v.dist = v == source ? 0 : Double.MAX_VALUE;\n            q.add(v);\n        }\n\n        dijkstra(q);\n    }\n\n    /**\n     * Implementation of dijkstra's algorithm using a binary heap.\n     */\n    private void dijkstra(final NavigableSet<Vertex> q) {\n        Vertex u, v;\n        while (!q.isEmpty()) {\n\n            u = q.pollFirst(); // vertex with shortest distance (first iteration will return source)\n            if (u.dist == Double.MAX_VALUE)\n                break; // we can ignore u (and any other remaining vertices) since they are unreachable\n\n            //look at distances to each neighbour\n            for (Map.Entry<Vertex, Double> a : u.neighbours.entrySet()) {\n                v = a.getKey(); //the neighbour in this iteration\n\n                final double alternateDist = u.dist + a.getValue();\n                if (alternateDist < v.dist) { // shorter path to neighbour found\n                    q.remove(v);\n                    v.dist = alternateDist;\n                    v.previous = u;\n                    q.add(v);\n                }\n            }\n        }\n    }\n\n    /**\n     * Prints a path from the source to the specified vertex\n     */\n    public void printPath(String endName) {\n        if (!graph.containsKey(endName)) {\n            System.err.printf(\"Graph doesn't contain end vertex \\\"%s\\\"\\n\", endName);\n            return;\n        }\n\n        graph.get(endName).printPath();\n    }\n\n    /**\n     * Prints the path from the source to every vertex (output order is not guaranteed)\n     */\n    public void printAllPaths() {\n        for (Vertex v : graph.values()) {\n            v.printPath();\n            System.out.println();\n        }\n    }\n}", "generated_code": "import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner s=new Scanner(System.in);\n        HashMap map=new HashMap();\n        ArrayList<Integer> list=new ArrayList<Integer>();\n        for (int i = 3; i < 33000; i+=2) {\n            if(isPrime(i)){\n                map.put(i, i);\n                list.add(i);\n            }\n        }\n        while(true){\n            int x=s.nextInt();\n            if(x==0){\n                break;\n            }\n            if(x==4){\n                System.out.println(\"1\");\n                continue;\n            }\n            int answer=0;\n            for (int i = 0; list.get(i) <= x/2; i++) {\n                if(map.containsKey(x-list.get(i)) && map.containsKey(list.get(i))){\n                    answer++;\n                }\n            }\n            System.out.println(answer);\n        }\n    }\n    static boolean isPrime(int n) {\n        for(int i=3;i*i<=n;i+=2) {\n            if(n%i==0)\n                return false;\n        }\n        return true;\n    }\n}\n", "score": 0.0}
{"id": "SHARE_5_1003_44__1_109016_25", "golden_code": "\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void fillTable(int[] coinsX, int[] coinsY, int money) {\n        Integer[][] table = new Integer[money + 1][money + 1];\n        table[0][0] = 0;\n        for (int i = 0; i < table.length; i++) {\n            for (int j = 0; j < table.length; j++) {\n                if (i == 0 && j == 0) {\n                    continue;\n                }\n                ArrayList<Integer> temp = new ArrayList<Integer>();\n                for (int k = 0; k < coinsX.length; k++) {\n                    if (i - coinsX[k] >= 0 && j - coinsY[k] >= 0) {\n                        if (table[i - coinsX[k]][j - coinsY[k]] != null) {\n                            temp.add(table[i - coinsX[k]][j - coinsY[k]]);\n                        }\n                    }\n                }\n                if (temp.size() == 0) {\n                    continue;\n                }\n                Integer temp2 = temp.get(0);\n                for (int k = 0; k < temp.size(); k++) {\n                    if (temp.get(k) < temp2) {\n                        temp2 = temp.get(k);\n                    }\n                }\n                table[i][j] = temp2 + 1;\n            }\n        }\n        ArrayList<Integer> findMin = new ArrayList<Integer>();\n        for (int i = 0; i < table.length; i++) {\n            for (int j = 0; j < table.length; j++) {\n                if (((i * i) + (j * j) == (money * money)) && table[i][j] != null) {\n                    findMin.add(table[i][j]);\n                }\n            }\n        }\n        if (findMin.size() == 0) {\n            System.out.println(\"not possible\");\n        } else {\n            int min = findMin.get(0);\n            for (int m = 0; m < findMin.size(); m++) {\n                if (findMin.get(m) < min) {\n                    min = findMin.get(m);\n                }\n            }\n            System.out.println(min);\n        }\n\n    }\n\n    public static void readInput(Scanner reader) {\n        int problems = reader.nextInt();\n        int kindsOfCoins;\n        int money;\n        for (int i = 0; i < problems; i++) {\n            kindsOfCoins = reader.nextInt();\n            money = reader.nextInt();\n            int[] coinsX = new int[kindsOfCoins];\n            int[] coinsY = new int[kindsOfCoins];\n            for (int j = 0; j < kindsOfCoins; j++) {\n                coinsX[j] = reader.nextInt();\n                coinsY[j] = reader.nextInt();\n            }\n            fillTable(coinsX, coinsY, money);\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner reader = new Scanner(System.in);\n        readInput(reader);\n    }\n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Scanner;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.lang.Math;\nimport java.util.Comparator;\n\npublic class Main {\n\tpublic static void main(String[] args) \n\t{\n\t\ttry{\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tString input[];\n\t\t\tint N=1;\n\t\t\twhile (N!=0){\n\t\t\t\tN=Integer.parseInt(br.readLine());\n\t\t\t\tif (N==0)\n\t\t\t\t\tbreak;\n\t\t\t\tpoint[] p = new point[N];\n\t\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\t\tinput = br.readLine().split(\"\\\\s+\");\n\t\t\t\t\tp[i]=new point();\n\t\t\t\t\tp[i].x=Double.parseDouble(input[0]);\n\t\t\t\t\tp[i].y=Double.parseDouble(input[1]);\n\t\t\t\t}\n\n\t\t\t\tArrays.sort(p,new Xcomparator() );\n\t\t\t\tSystem.out.printf(\"%.2f\\n\",Math.sqrt((EfficientClosestPair(p)))/2);\n\t\t\t}\n\t\t\t\n\t\t}catch(Exception e)\n\t\t\t{}\n\t\t\n\t}\n\tpublic static double dis(double a,double b,double c , double d )\n\t{\n\t\treturn ((a-c)*(a-c)+(b-d)*(b-d));\n\t}\n\tpublic static double min(double a,double b )\n\t{\n\t\tif (a>b)\n\t\t\treturn a;\n\t\telse\n\t\t\treturn b;\n\t}\n\tpublic static double EfficientClosestPair(point[] p)\n\t{\n\t\tdouble N=p.length,m=0,dminsq,d=0,radius=0,mindis=Double.MAX_VALUE;\n\t\tint k,x=0,y=0,num;\n\t\tif(N<=20)\n\t\t{\n\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\tfor (int j = i+1; j < N; j++) {\t\t\t\n\t\t\t\t\tmindis=Math.min(mindis, dis(p[i].x,p[i].y,p[j].x,p[j].y));\n\t\t\t\t}\n\t\t\t}\n\t\t\tradius=mindis;\n\t\t\treturn radius;\n\t\t}\n\t\telse{\n\t\t\tx=(int) Math.ceil(N/2);\n\t\t\ty=(int) Math.floor(N/2);\n\n\t\t\tpoint[] pl = new point[x];\n\t\t\tpoint[] pr = new point[y];\n\n\t\t\tfor (int i = 0; i < x; i++) {\n\t\t\t\tpl[i]=p[i];\n\t\t\t}\n\t\t\tfor (int i = x; i < N; i++)\n\t\t\t\tpr[i-x]=p[i];\n\t\t\tdouble dl=EfficientClosestPair(pl);\n\t\t\tdouble dr=EfficientClosestPair(pr);\n\t\t\tif(dl<dr)\n\t\t\t\td = dl;\n\t\t\telse\n\t\t\t\td = dr;\n\t\t\tm=p[x-1].x;\n\t\t\tArrayList<point> s2=new ArrayList<point>();\n\t\t\tfor (int i = 0; i < N; i++) {\n\t\t\t\t//copy all the points of Q for which x âˆ’ m < d into array S[0..num âˆ’ 1]\t\n\t\t\t\tif(  (p[i].x-m)*(p[i].x-m) <= d )\n\t\t\t\t\ts2.add(p[i]);\n\t\t\t}\n\t\t\tCollections.sort(s2, new ycomparator());\n\t\t\tfor (int i = 0; i < s2.size(); i++) {\n\t\t\t\tk=i+1;\n\t\t\t\twhile(k<= (s2.size()-1)&&(s2.get(k).y - s2.get(i).y)*(s2.get(k).y - s2.get(i).y) < d)\n\t\t\t\t//while(k<s2.size() && k<=6+i)\n\t\t\t\t{\n\t\t\t\t\td=min((s2.get(k).x - s2.get(i).x)*(s2.get(k).x - s2.get(i).x)+ (s2.get(k).y - s2.get(i).y)*(s2.get(k).y - s2.get(i).y), d);\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn d;\n\t\t}\n\t}\n}\n\n\n\nclass point  {\n\tpublic double x;\n\tpublic double y;\n}\nclass \tXcomparator implements Comparator<point>\n{\n\n\tpublic int compare(point arg0, point arg1) {\n\t\tif(arg0.x>arg1.x)\n\t\t\treturn 1;\n\t\telse if(arg0.x == arg1.x)\n\t\t\treturn 0;\n\t\telse \n\t\t\treturn -1;\n\t}\n\n}\nclass \tycomparator implements Comparator<point>\n{\n\n\tpublic int compare(point arg0, point arg1) {\n\n\t\tif(arg0.y>arg1.y)\n\t\t\treturn 1;\n\t\telse if(arg0.y == arg1.y)\n\t\t\treturn 0;\n\t\telse \n\t\t\treturn -1;\n\t}\n\n}\n\n\n\n", "score": 0.0}
{"id": "SHARE_1_1462_31__1_2713_79", "golden_code": "import java.util.*;\n\nclass Main{\n\tpublic static void main(String[] p) {\n\t\tScanner q = new Scanner(System.in);\n\t\twhile (q.nextLine().length() < 6) {\n\t\t\tString r = \"\";\n\t\t\tfor (char i : q.nextLine().toCharArray())\n\t\t\t\tr += i < 65 | i > 90 ? i : (char) (65 + (i - 44) % 26);\n\t\t\tq.nextLine();\n\t\t\tSystem.out.println(r);\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\nimport java.util.Vector;\n\n\npublic class Main {\npublic static void main(String[] args){\n\tScanner in=new Scanner(System.in);\n\tint number=in.nextInt();\n\tVector<Integer> a=new Vector<Integer>();\n\twhile(number!=0){\n\t\ta.add(number);\n\t\tnumber=in.nextInt();\n\t}\n\tfor(int i=0;i<a.size();i++){\n\t\tSystem.out.println(calc(a.elementAt(i)));\n\t}\n\t\n}\npublic static int calc(int number){\n\tint i=1;\n\twhile(number!=1){\n\t\tif(number%2==0)\n\t\t\tnumber/=2;\n\t\telse{\n\t\t\tnumber=3*number+1;\n\t\t}\n\t\ti++;\n\t}\n\treturn i;\n}\n}", "score": 0.0}
{"id": "SHARE_1_1001_242__1_1001_324", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());}}", "generated_code": "import java.util.*;\npublic class Main \n{\n\t\n\tpublic static void main (String [] args)\n\t{\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext())\n\t\t{\n\t\t\tSystem.out.println(sc.nextInt()+sc.nextInt());\n\t\t\t\n\t\t}\n\t\t\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_93__1_1461_1", "golden_code": "import java.util.Scanner;\n\nclass Main{\n\tpublic static void main(String args[]){\n\t\tScanner input = new Scanner(System.in);\n\t\twhile(input.hasNextLine()){\n\t\t\tint a = input.nextInt();\n\t\t\tint b = input.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n}", "generated_code": "import java.util.Arrays;\n\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner s=new Scanner (System.in);\n\t\tboolean b=false;\n\twhile(s.hasNext()){\n           if(b){ System.out.println();}\n           b=true;\n\t\tString []  ss=new String [1000];\n                Arrays.fill(ss,\"\");\n\t\tint sets=1;\n\t\tSystem.out.printf(\"CARDS:  \");\n\t\tString str []=new String [12];\n\t\t\tfor (int i = 0; i < 12; i++) {\n\t\t\t\tstr[i]=s.next();\n\t\t\t\tif(i!=11){\n\t\t\t\tSystem.out.printf(\"%s \",str[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.printf(\"%s\\n\",str[11]);\n\t\t\tSystem.out.printf(\"SETS:   \");\n\t\t\t\n\t\ts.nextLine();\n\t\tfor (int i = 0; i < str.length; i++) {\n\t\t\tfor (int j = i+1; j < str.length; j++) {\n\t\t\t\tfor (int k = j+1; k < str.length; k++) {\n   \n                                    int cnt=0;\n                                    for (int l = 0; l < 4; l++) {\n                                        if(str[i].charAt(l)==str[j].charAt(l) && str[i].charAt(l)==str[k].charAt(l)){\n                                            cnt++;}\n                                        if(str[i].charAt(l)!=str[j].charAt(l) && str[i].charAt(l)!=str[k].charAt(l) && str[j].charAt(l)!=str[k].charAt(l)){\n                                            cnt++;}\n                                    }\n                                    if(cnt==4){\n                                         ss[sets-1]=String.format(\"%d.  %s %s %s\\n        \",sets,str[i],str[j],str [k]);\n                                           sets++;\n                                    }\n                                }\n\t\t\t}\n\t\t}\n\t\tif(sets==1){\n\t\t\tSystem.out.print(\"*** None Found ***\");\n                        System.out.println();\n                        \n\t\t}else{\n                    \n\t\t\tfor (int i = 0; i < sets-2 ; i++) {\n                            if(\"\".equals(ss[i])){\n                                break;}\n\t\t\t\tSystem.out.printf(ss[i]);\n                            \n\t\t\t}\n\t\t\tString s1=ss[sets-2];\n\t\t\ts1=s1.trim();\n\t\t\tSystem.out.printf(\"%s\\n\",s1);\n\t\t}\n\t\t\n\t}//end While\n\n\t\t\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_184__1_2826_14", "golden_code": "\nimport java.util.*;\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "generated_code": "\nimport java.awt.Point;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.lang.reflect.Array;\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.PriorityQueue;\nimport java.util.Random;\nimport java.util.StringTokenizer;\nimport static java.lang.Math.*;\nimport java.util.Map;\nimport java.util.Scanner;\n\n/**\n *\n * @author Mojtaba\n */\npublic class Main {\n\n    static long psoorat, pmakhraj;\n    static StringBuilder builder;\n\n    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(System.in);\n        PrintWriter writer = new PrintWriter(new BufferedOutputStream(System.out));\n        StringBuilder sb = new StringBuilder(\"\");\n\n        int t = in.nextInt();\n        for (int ii = 0; ii < t; ii++) {\n            builder = new StringBuilder();\n            String str = in.next();\n            int soorat = Integer.parseInt(str.substring(0, str.indexOf('/')));\n            int makhraj = Integer.parseInt(str.substring(str.indexOf('/') + 1));\n\n            parentFind(soorat, makhraj);\n            String path = builder.reverse().toString();\n            int n = path.length();\n            long sum = (1L << n) - 1;\n            long left = 0L;\n            long right = 1l << n;\n            for (int i = 0; i < path.length(); i++) {\n                long mid = (left + right) >> 1;\n                if (path.charAt(i) == 'l') {\n                    right = mid;\n                } else {\n                    left = mid;\n                }\n            }\n            sum++;\n            sum += left;\n            sb.append(sum).append(\"\\n\");\n        }\n\n        //System.out.println(sb.toString().trim());\n        writer.println(sb.toString().trim());\n        writer.flush();\n        in.close();\n    }\n\n    static void parentFind(long soorat, long makhraj) {\n        if (soorat == makhraj) {\n            return;\n        }\n        long x = soorat;\n        long y = makhraj - x;\n        if (y >= 0) {\n            psoorat = x;\n            pmakhraj = y;\n            builder.append(\"l\");\n        } else {\n            pmakhraj = makhraj;\n            psoorat = soorat - makhraj;\n            builder.append(\"r\");\n        }\n        parentFind(psoorat, pmakhraj);\n    }\n}\n\nclass MyScanner {\n\n    BufferedReader reader;\n    StringTokenizer tokenizer;\n\n    public MyScanner(InputStream stream) {\n        this.reader = new BufferedReader(new InputStreamReader(stream));\n    }\n\n    public int nextInt() throws IOException {\n        return Integer.parseInt(next());\n    }\n\n    public int[] nextIntegerArray(int n) throws IOException {\n        int[] a = new int[n];\n        for (int i = 0; i < a.length; i++) {\n            a[i] = nextInt();\n        }\n        return a;\n    }\n\n    public long[] nextLongArray(int n) throws IOException {\n        long[] a = new long[n];\n        for (int i = 0; i < a.length; i++) {\n            a[i] = nextLong();\n        }\n        return a;\n    }\n\n    public int nextInt(int radix) throws IOException {\n        return Integer.parseInt(next(), radix);\n    }\n\n    public long nextLong() throws IOException {\n        return Long.parseLong(next());\n    }\n\n    public long nextLong(int radix) throws IOException {\n        return Long.parseLong(next(), radix);\n    }\n\n    public double nextDouble() throws IOException {\n        return Double.parseDouble(next());\n    }\n\n    public BigInteger nextBigInteger() throws IOException {\n        return new BigInteger(next());\n    }\n\n    public BigInteger nextBigInteger(int radix) throws IOException {\n        return new BigInteger(next(), radix);\n    }\n\n    public String next() throws IOException {\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\n            tokenizer = new StringTokenizer(reader.readLine());\n            return this.next();\n        }\n        return tokenizer.nextToken();\n    }\n\n    public void close() throws IOException {\n        this.reader.close();\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1266_14__1_1511_2", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in=new Scanner(System.in);\n        int n=in.nextInt();\n        for (int k = 0; k <n ; k++) {\n\n\n            int m = in.nextInt();\n            ArrayList<Integer> baghi = new ArrayList<Integer>();\n            while (m >= 1) {\n                baghi.add(m % 2);\n                m /= 2;\n            }\n            StringBuilder str = new StringBuilder();\n            for (int i = 0; i < baghi.size(); i++) {\n                if (baghi.get(i) == 1)\n                    str.append(i + \" \");\n            }\n            str.delete(str.length() - 1, str.length());\n            System.out.println(str);\n        }\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    static long nway[] = new long[350];\n    static int nums[] = new int[17];\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        for (int i = 17; i > 0; i--) {\n            nums[17 - i] = i * i;\n        }\n        while (true) {\n            int n = s.nextInt();\n            if (n == 0) {\n                break;\n            }\n            for (int i = 0; i < 350; i++) {\n                nway[i] = 0;\n            }\n            int i, j, v, c;\n            v = 17;\n            nway[0] = 1;\n            for (i = 0; i < v; i++) {\n                c = nums[i];\n                for (j = c; j <= n; j++) {\n                    nway[j] += nway[j - c];\n                }\n            }\n            System.out.println(nway[n]);\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_5_1003_17__1_1230_30", "golden_code": "import java.util.*;\nimport java.lang.*;\n\n/*\n * 11/11/2013\n * @author: Maryam Younesi\n * 810190402\n * pHW3 DAA*/\npublic class Main {\n\tpublic static int calcVal(int x, int y) {\n\t\treturn x * x + y * y;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint N = input.nextInt();\n\t\tfor (int i = 0; i < N; ++i) {\n\t\t\tint m = input.nextInt();\n\t\t\tint s = input.nextInt();\n\t\t\tint x_values[] = new int[m];\n\t\t\tint y_values[] = new int[m];\n\t\t\tint table[][] = new int[2][s * s + 1];\n\t\t\tint xSum[][] = new int[2][s * s + 1];\n\t\t\tint ySum[][] = new int[2][s * s + 1];\n\t\t\tfor (int k = 0; k < m; ++k) {\n\t\t\t\tx_values[k] = input.nextInt();\n\t\t\t\ty_values[k] = input.nextInt();\n\t\t\t}\n\t\t\tfor (int k = 0; k < m; ++k) {\n\t\t\t\tint n = 1;\n\t\t\t\twhile (true) {\n\t\t\t\t\tint init = calcVal(x_values[k] * n, y_values[k] * n);\n\t\t\t\t\tif (init < (s * s + 1)\n\t\t\t\t\t\t\t&& ((table[k % 2][init] == 0) || (table[k % 2][init] > n))) {\n\t\t\t\t\t\txSum[k % 2][init] = x_values[k] * n;\n\t\t\t\t\t\tySum[k % 2][init] = y_values[k] * n;\n\t\t\t\t\t\ttable[k % 2][init] = n;\n\t\t\t\t\t} else if (init >= s * s + 1) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t++n;\n\t\t\t\t}\n\t\t\t\tif (k == m - 1)\n\t\t\t\t\tbreak;\n\t\t\t\tfor (int j = 1; j < (s * s) + 1; ++j) {\n\t\t\t\t\tif (table[k % 2][j] != 0) {\n\t\t\t\t\t\tint num = 0;\n\t\t\t\t\t\twhile (true) {\n\t\t\t\t\t\t\tint temp1 = xSum[k % 2][j]\n\t\t\t\t\t\t\t\t\t+ (x_values[k + 1] * num);\n\t\t\t\t\t\t\tint temp2 = ySum[k % 2][j]\n\t\t\t\t\t\t\t\t\t+ (y_values[k + 1] * num);\n\t\t\t\t\t\t\tint res = calcVal(temp1, temp2);\n\t\t\t\t\t\t\tif (res < (s * s + 1)\n\t\t\t\t\t\t\t\t\t&& ((table[(k + 1) % 2][res] == 0) || (table[(k + 1) % 2][res] > table[k % 2][j]\n\t\t\t\t\t\t\t\t\t\t\t+ num))) {\n\t\t\t\t\t\t\t\txSum[(k + 1) % 2][res] = temp1;\n\t\t\t\t\t\t\t\tySum[(k + 1) % 2][res] = temp2;\n\t\t\t\t\t\t\t\ttable[(k + 1) % 2][res] = table[k % 2][j] + num;\n\t\t\t\t\t\t\t} else if (res >= s * s + 1)\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t++num;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttable[k % 2][j] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\t\tif (table[(m - 1) % 2][s * s] == 0)\n\t\t\t\tSystem.out.println(\"not possible\");\n\t\t\telse\n\t\t\t\tSystem.out.println(table[(m - 1) % 2][s * s]);\n\n\t\t}\n\t}\n}", "generated_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner std = new Scanner(System.in);\n\t\t\n\t\twhile(true){\n\t\t\tString n = std.next();\n\t\t\tif(n.length() ==1 && n.charAt(0)=='0')\n\t\t\t\tbreak;\n\t\t\twhile(true){\n\t\t\t\tBigInteger milad = new BigInteger(\"0\");\n\t\t\t\tfor(int i = 0 ; i<n.length() ; i++){\n\t\t\t\t\tString tt = \"\";\n\t\t\t\t\ttt = tt + n.charAt(i);\n\t\t\t\t\tBigInteger temp = new BigInteger(tt);\n\t\t\t\t\tmilad = milad.add(temp);\n\t\t\t\t}\n\t\t\t\tString temp2 = milad.toString();\n\t\t\t\tif(temp2.length() == 1 ) {\n\t\t\t\t\tSystem.out.println(temp2);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tn = temp2;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_196__1_1001_57", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    static Scanner in = new Scanner(System.in);\n    public static void main(String[] args) {\n        while(in.hasNextInt()){\n            System.out.println(in.nextInt() + in.nextInt());\n        }\n    }\n}", "generated_code": "import java.util.*;\npublic class Main{\n    public static void main(String args[]){\n\tScanner input=new Scanner(System.in);\n\tdo{\n\t\tint a=input.nextInt();\n\t\tint b=input.nextInt();\n\t\tSystem.out.printf(\"%d\\n\",a+b);\n\t}while(input.hasNext());\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_106017_58__1_1884_12", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    static Scanner input = new Scanner(System.in);\n    public static void daffodil( String num){\n        int x= (int)num.charAt(0)-48;\n        int y= (int)num.charAt(1)-48;\n        int z= (int)num.charAt(2)-48;        \n        if( Math.pow(x, 3)+Math.pow(y, 3)+Math.pow(z, 3)== Integer.parseInt(num))\n            System.out.println( \"Yes\");\n        else\n            System.out.println(\"No\");\n    }\n    public static void main(String[] args) {\n        String num;\n        while( input.hasNext()){\n            num= input.next();\n            daffodil( num);\n        }\n    }\n}\n", "generated_code": "import java.util.*;\npublic class Main{\n\t\n\tprivate static int   base = 0;\n\tprivate static int[] weight;       \n\tprivate static int[] value;       \n\tprivate static int[] dp;       \n\tprivate static int[] last;       \n\tprivate static void knapsack()\n\t{\n\t    int   n = weight.length;        \n\t    dp = new int[base/1000+1];\n\t    last = new int[base/1000+1];\n\t\tfor (int i=0;i<dp.length;i++) dp[i] = 0;\n\t\tfor (int i=0;i<last.length;i++) last[i] = -1;\n\n\t    for (int i=1;i<dp.length;i++)\n\t    {\n\t        for (int j=0;j<n;j++)\n\t        {\n\t            if (weight[j] <= i &&\n\t                    (value[j] + dp[i - weight[j]]) > dp[i])\n\t            {\n\t                dp[i] = value[j] + dp[i - weight[j]];\n\t                last[i] = j;\n\t            }\n\t        }\n\t    }\n\t}\n\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner in = new Scanner(System.in);\n\t\tint test = in.nextInt();\n\t\tfor(int j=1;j<=test;j++){\n\t\t\t\tbase = in.nextInt();\n\t\t\t\tint year = in.nextInt();\n\t\t\t\tint bond = in.nextInt();\n\t\t\t\tweight = new int[bond];\n\t\t\t\tvalue = new int[bond];\n\t\t\t\n\t\t\t\tfor(int k=1;k<=bond;k++){\n\t\t\t\t  weight[k-1] = in.nextInt()/1000;\n\t\t\t\t  value[k-1] = in.nextInt();\n\t\t\t\t}\n\t\t\t\n                    for(int f=1;f<=year;f++){\n\t\t\t\t    \tknapsack();            \n\t\t\t\t\t\tbase+= dp[dp.length-1];\n\t\t\t\t\t}\n                //    if(j==test)\n\t\t\t\t//\t\tSystem.out.print(base);    \n\t\t\t\t//\telse\n\t\t\t\t\t \tSystem.out.println(base);     \n\t\t}\n\n\n\t}\n\n}", "score": 0.0}
{"id": "SHARE_1_2717_23__1_2717_4", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\t\n\t\n\tpublic static void main(String args[]){\n\t\tScanner sc= new Scanner(System.in);\n\t\tint n=0;\n\t\tint count;\n\t\twhile (true){\n\t\t\tcount=0;\n\t\t\tn=sc.nextInt();\n\t\t\tif(n==0)\n\t\t\t\tbreak;\n\t\t\tString s1=sc.next();\n\t\t\tString s2=sc.next();\n\t\t\tString s=sc.next();\n\t\t\tString temp=\"\";\n\t\t\tif(s.length()!=2*n)\n\t\t\t\tSystem.out.println(-1);\n\t\t\telse{\n\t\t\t\twhile(!temp.equals(s) && count<=50){\n\t\t\t\t\ttemp=\"\";\n\t\t\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\t\t\ttemp += s2.charAt(i);\n\t\t\t\t\t\ttemp += s1.charAt(i);\n\t\t\t\t\t}\n\t\t\t\t\ts1=\"\";\n\t\t\t\t\ts2=\"\";\n\t\t\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\t\t\ts1+=temp.charAt(i);\n\t\t\t\t\t\ts2+=temp.charAt(i+n);\n\t\t\t\t\t}\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(temp.equals(s))\n\t\t\t\t\tSystem.out.println(count);\n\t\t\t\telse if(count>50)\n\t\t\t\t\tSystem.out.println(-1);\n\t\t\t}\n\t\t}\n\t}\n\t\n}\n", "generated_code": "\n\nimport java.util.Scanner;\n\n/**\n *\n * @author Mina\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner input = new Scanner(System.in);\n        int n = input.nextInt();\n        while (n != 0) {\n            int count = 0;\n            String s1 = null;\n            String s2 = null;\n            String s12 = \"\";\n            String s = \"\";\n            input.nextLine();\n            //  for (int i = 0; i < n; i++) {\n            s1 = input.nextLine();\n            s1=s1.toUpperCase();\n            s2 = input.nextLine();\n            s2=s2.toUpperCase();\n            s = input.nextLine();\n            s=s.toUpperCase();\n            //    }\n            for (int j=0;j<51;j++) {\n                s12 = \"\";\n                char[] c1 = s1.toCharArray();\n                char[] c2 = s2.toCharArray();\n                for (int i = 0; i < n; i++) {\n                    s12 = s12 + c1[i];\n                    s12 = s12 + c2[i];\n                }\n                if (s.equals(s12)) {\n                    count++;\n                    break;\n\n                } else {\n                    s12 = \"\";\n                    for (int i = 0; i < n; i++) {\n                        s12 = s12 + c2[i];\n                        s12 = s12 + c1[i];\n                    }\n                    if (s.equals(s12)) {\n                        count++;\n                        break;\n\n                    }\n                }\n                count++;\n\n                s1 = s12.substring(0, n);\n                s2 = s12.substring(n);\n            }\n            \n            if(count==51){\n                System.out.println(-1);\n            }else{\n                System.out.println(count);\n            }\n            n = input.nextInt();\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_5_1007_4__5_1007_19", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner s = new Scanner(System.in);\n\t\t\n\t\tint n = s.nextInt();\n\t\t\n\t\tString reply = \"\";\n\t\t\n\t\tArrayList<String> line = new ArrayList<String>();\n\t\tfor(int k=0;k<n;k++)\n\t\t\tline.add(s.next());\n\t\t\t\n\t\tfor(int i=0;i<line.size();i++){\n\t\t\tfor(int j=0;j<line.size();j++){\n\t\t\t\t\n\t\t\t\tif(j==i)\n\t\t\t\t\tcontinue;\n\t\t\t\t\n\t\t\t\tString s1 = line.get(i);\n\t\t\t\tString s2 = line.get(j);\n\t\t\t\tString l = \"\";\n\t\t\t\t\n\t\t\t\tif(s1.length()<10)\n\t\t\t\t\tfor(int k=0;k<s1.length();k++){\n\t\t\t\t\t\tl += (char) ((((int)s1.charAt(k) - (int)s2.charAt(k)+26)%26)+97);\n\t\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tfor(int k=0;k<10;k++){\n\t\t\t\t\t\tl += (char) ((((int)s1.charAt(k) - (int)s2.charAt(k)+26)%26)+97);\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\tif(l.length()>=10 && l.subSequence(0, 5) .equals( l.subSequence(5, 10) )){\n\t\t\t\t\tif(l.subSequence(0, 1) .equals( l.subSequence(1, 2) )){\n\t\t\t\t\t\tif(reply.equals(\"\") || (reply.compareTo((String) l.subSequence(0, 1))>0) ) \n\t\t\t\t\t\t\treply = l.substring(0, 1);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif(reply.equals(\"\") || (reply.compareTo((String) l.subSequence(0, 5))>0) ) \n\t\t\t\t\t\treply = l.substring(0, 5);\n\t\t\t\t\t\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(l.length()>=8 && l.subSequence(0, 4) .equals( l.subSequence(4, 8) )){\n\t\t\t\t\tif(l.subSequence(0, 2) .equals( l.subSequence(2, 4) )){\n\t\t\t\t\t\tif(l.subSequence(0, 1) .equals( l.subSequence(1, 2) )){\n\t\t\t\t\t\t\tif(reply.equals(\"\") || (reply.compareTo((String) l.subSequence(0, 1))>0) ) \n\t\t\t\t\t\t\t\treply = l.substring(0, 1);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(reply.equals(\"\") || (reply.compareTo((String) l.subSequence(0, 2))>0) ) \n\t\t\t\t\t\t\treply = l.substring(0, 2);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif(reply.equals(\"\") || (reply.compareTo((String) l.subSequence(0, 4))>0) ) \n\t\t\t\t\t\treply = l.substring(0, 4);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(l.length()>=6 && l.subSequence(0, 3) .equals( l.subSequence(3, 6) )){\n\t\t\t\t\t if(l.subSequence(0, 1) .equals( l.subSequence(1, 2) )){\n\t\t\t\t\t\t if(reply.equals(\"\") || (reply.compareTo((String) l.subSequence(0, 2))>0) ) \n\t\t\t\t\t\t\t\treply = l.substring(0, 2);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t if(reply.equals(\"\") || (reply.compareTo((String) l.subSequence(0, 3))>0) ) \n\t\t\t\t\t\t\treply = l.substring(0, 3);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(l.length()==4 && l.subSequence(0, 2) .equals( l.subSequence(2, 4) )){\n\t\t\t\t\tif(l.subSequence(0, 1) .equals( l.subSequence(1, 2) )){\n\t\t\t\t\t\tif(reply.equals(\"\") || (reply.compareTo((String) l.subSequence(0, 1))>0) ) \n\t\t\t\t\t\t\treply = l.substring(0, 1);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif(reply.equals(\"\") || (reply.compareTo((String) l.subSequence(0, 2))>0) ) \n\t\t\t\t\t\treply = l.substring(0, 2);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(l.length()==2 && l.subSequence(0, 1) .equals( l.subSequence(1, 2) )){\n\t\t\t\t\tif(reply.equals(\"\") || (reply.compareTo((String) l.subSequence(0, 1))>0) ) \n\t\t\t\t\t\treply = l.substring(0, 1);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(reply);\n\t}\n\n}\n", "generated_code": "import java.util.*;\n\nclass Main {\n\tpublic static void main(String[] args) {\n\t\tString a = \"bbbbbbbbbbbbbbb\";\n\t\tString b = \"xxxxxxxxxxxxxxx\";\n\t\tString c = \"fvxkprkjebpldrx\";\n\t\t//System.out.println(findSeq(\"therethere\"));\n\t\t//System.out.println(minus(b, a));\n\t\tArrayList<String> string = new ArrayList<String>();\n\t\tArrayList<String> found = new ArrayList<String>();\n\t\tScanner input = new Scanner(System.in);\n\t\tint n = input.nextInt();\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tstring.add(input.next());\n\t\tfor(int i = 0; i < string.size()-1; i++) {\n\t\t\tfor(int j = i+1; j < string.size(); j++) {\n\t\t\t\tString tmp = findSeq(minus(string.get(i), string.get(j))); \n\t\t\t\tif(tmp != \"Error\")\n\t\t\t\t\tfound.add(tmp);\n\t\t\t\ttmp = findSeq(minus(string.get(j), string.get(i)));\n\t\t\t\tif(tmp != \"Error\")\n\t\t\t\t\tfound.add(tmp);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(min(found));\n\t}\n\tpublic static String min(ArrayList<String> s) {\n\t\tString Min = s.get(0);\n\t\tfor(int i = 1; i < s.size(); i++)\n\t\t\tif(s.get(i).compareTo(Min) < 0)\n\t\t\t\tMin = s.get(i);\n\t\treturn Min;\n\t}\t\n\tpublic static int Modulo(int num, int modulo) {\n\t\tif(num >= 0)\n\t\t\treturn num%modulo;\n\t\telse {\n\t\t\twhile(num < 0)\n\t\t\t\tnum += modulo;\n\t\t\treturn num;\n\t\t}\n\t}\n\tpublic static boolean isSeq(String tmp, String a) {\n\t\tint num = a.length()/tmp.length();\n\t\tString n = \"\";\n\t\tfor(int i = 0 ; i < num; i++)\n\t\t\tn += tmp;\n\t\tif(a.equals(n))\n\t\t\treturn true;\n\t\tfor(int i = 0; i < tmp.length()-1; i++) \n\t\t\tif(a.equals(n + tmp.substring(0, i+1))) \n\t\t\t\treturn true;\t\n\t\treturn false;\n\t}\n\n\tpublic static String findSeq(String a) {\n\t\tfor(int i = 0; i < 5; i++) {\n\t\t\tString sub = a.substring(0,i+1);\n\t\t\tif(isSeq(sub, a))\n\t\t\t\treturn sub;\n\t\t}\n\t\treturn \"Error\";\n\t}\t\n\tpublic static String minus(String a, String b) {\n\t\tString n = \"\";\n\t\tfor(int i = 0; i < a.length(); i++)\n\t\t\tn += numTochar(Modulo(((a.charAt(i)+7)%26-(b.charAt(i)+7)%26),26));\n\t\treturn n;\n\t}\n\n\tpublic static char numTochar(int num) {\n\t\tchar[] Chars = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y','z'};\n\t\treturn Chars[num];\n\t}\n}\t\n", "score": 1.0}
{"id": "SHARE_1_1006_131__1_1319_60", "golden_code": "\nimport java.util.Scanner;\n\n/**\n *\n * @author soroush\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        while (true) {\n            double in = sc.nextDouble();\n            if(in == 0.00){\n                break;\n            }\n            double i = 1.0;\n            double sum = 0;\n            while (sum < in) {\n                sum += 1.0 / (i + 1.0);\n                i++;\n            }\n            int a = (int) i - 1;\n            System.out.println(a + \" card(s)\");\n        }\n    }\n\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner p=new Scanner(System.in);\n        String[] s=p.nextLine().split(\" \");\n        int x=0;\n        while(!s[0].equals(\"5280\")){\n            if(x!=0)\n                System.out.println(\"\");\n            x++;\n            int h=Integer.parseInt(s[0]);\n            int l=s.length-1;\n            int []n=new int[l];\n            for(int i=0;i<l;i++){\n                n[i]=Integer.parseInt(s[i+1]);\n            }\n            int pre=0;\n            for(int i=0;i<l;i++){\n                if(Math.abs(h-n[i])>Math.abs(h-pre)){\n                    System.out.printf(\"Moving from %d to %d: colder.\\n\",pre,n[i]);\n                    pre=n[i];\n                }else if(Math.abs(h-n[i])<Math.abs(h-pre)&&n[i]!=h){\n                    System.out.printf(\"Moving from %d to %d: warmer.\\n\",pre,n[i]);\n                    pre=n[i];\n                }else if(Math.abs(h-n[i])==Math.abs(h-pre)){\n                    System.out.printf(\"Moving from %d to %d: same.\\n\",pre,n[i]);\n                    pre=n[i];\n                }else if(n[i]==h){\n                    System.out.printf(\"Moving from %d to %d: found it!\\n\",pre,n[i]);\n                    break;\n                }\n            }\n            s=p.nextLine().split(\" \");\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_484__1_1001_464", "golden_code": "import java.util.*;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tint A = sc.nextInt();\n\t\t\tint B = sc.nextInt();\n\t\t\tint Sum = A + B;\n\t\t\tSystem.out.println(Sum);\n\t\t}\n\t}\n}", "generated_code": "import java.util.*;\nclass Main{\n\tpublic static void main(String[]a){\n\t\tScanner i=new Scanner(System.in);\n\t\twhile(i.hasNext())\n\t\t\tSystem.out.println(i.nextInt()+i.nextInt());\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1959_65__1_2400_15", "golden_code": "\nimport java.util.*;\n\npublic class Main {\n\n    static Scanner in = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        while (in.hasNext()) {\n            int n = in.nextInt();\n            int Array[] = new int[n];\n            int counter = 0;\n            int count = 0;\n            for (int j = 0; j < n; j++) {\n                Array[j] = in.nextInt();\n                if (j % 2 == 0) {\n                    if (Array[j] == 1) {\n                        counter++;\n                    } else {\n                        count++;\n                    }\n                } else if (j % 2 != 0) {\n                    if (Array[j] == 0) {\n                        counter++;\n                    } else {\n                        count++;\n                    }\n                }\n            }\n            if (count<counter) {\n                System.out.println(count);\n            }\n            else\n                System.out.println(counter);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\twhile (input.hasNext()){\n\t\t\tint n = input.nextInt();\n\t\t\tif (n<2){\n\t\t\t\tSystem.out.println(\"no\");\n\t\t\t}else if ((n-2)%4==0){\n\t\t\t\tSystem.out.println(\"yes\");\n\t\t\t}else{\n\t\t\t\tSystem.out.println(\"no\");\n\t\t\t}\n\t\t}\n\t}\n\n}", "score": 0.0}
{"id": "SHARE_1_1230_9__1_1230_37", "golden_code": "import java.util.Scanner;\nimport java.lang.String;\nclass Main\n{\n\tpublic static void main(String [] args)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\tString num;\n\t\tint v;\n\t\tint charw;\n\t\twhile(scan.hasNext())\n\t\t{\tv = 0;\n\t\t\tnum=scan.nextLine();\n\t\t\tint[] sum = new int[num.length()+1];\n\t\t\tfor(int i = 0;i < num.length();i++)\n\t\t\t\tsum[i] = 0;\n\t\t\t\n\t\tif ( num.equals(\"0\") )\n\t\t\tbreak;\n\t\telse\n\t\t{\n\t\t\tint length = num.length();\n\t\t\t\n\t\t\tfor(int i = 0;length !=0 ;i++)\n\t\t\t\n\t\t\t{\n\t\t\t charw = num.charAt(i);\n\t\t\t charw -= '0';\n\t\t\t sum[0] += charw;\t\n\t\t\t length--;\n\t\t\t}\n\t\t\t\n\t\t\t//System.out.print(\"charw\"+sum);\n\t\t\tfor(v = 0;v <=( num.length());v++)\n\t\t\t\tif ( sum[v] > 9 )\n\t\t\t\t{while( sum[v] > 0 )\n\t\t\t{\n\t\t\t\t\tsum[v+1] += sum[v]%10;\n\t\t\t\t\tsum[v] = sum[v]/10;}}\n\t\t\t/*System.out.println(\"sum\"+sum);\n\t\t\tSystem.out.println(\"SUM2222:\"+sum2);}*/\n\t\t\t\t\telse\n\t\t\t\t\t{sum[v+1] = sum[v];\n\t\t\t\t\t\tbreak;}\n\t\t\tSystem.out.println(sum[v+1]);\n\t\t}\n\t\t\n\t\t}\n\t\n\t\n\t\n\t\n\t}\n\n\n\n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n    public static void main(String args[]){\n        Scanner in=new Scanner(System.in);\n        String n=in.nextLine();\n        while(!n.equals(\"0\")){\n            int r;\n            while(n.length()>1){\n                r=0;\n                for(int i=0;i<n.length();i++){\n                    String s=n.charAt(i)+\"\";\n                    r=Integer.parseInt(s)+r;\n                }\n                n=Integer.toString(r);\n            }\n            System.out.println(n);\n            n=in.nextLine();\n        }\n    }\n            \n            \n            \n}\n", "score": 1.0}
{"id": "SHARE_1_1001_351__1_1018_43", "golden_code": "import java.util.Scanner;\npublic class Main{\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main ( String[] args)\n\t{\n\tScanner scan =new Scanner ( System.in);\n\tint n=1;\n\tboolean ok = false ;\n\t\n\twhile ( true )\n\t{\n\t\n\tn=scan.nextInt();\n\tif ( n == 0 ) {\n\t\tbreak ;\n\t}\t\n\tif ( ok ) {\n\t\tSystem.out.println() ;\n\t}\n\tok = true ;\t\n\tint [] input1=new int [n];\n\t\n\t\n\t\tfor ( int i=0;i<n;i++)\n\t\t{input1[i]=scan.nextInt();}\n\tint [] input2= new int [n];\n\t\n\t\n\t\n\t\tfor ( int i=0; i<n; i++)\n\t\t{input2[i] = scan.nextInt();}\n\tint j=0; int A=0; int B=0;\n\t\t while (j<n)\n\t\t {\n\t\t if ( input1[j]-input2[j]==1&& input1[j]!=2){ B=input1[j]+input2[j]+B;}\n\t\t if ( input2[j]-input1[j]==1&& input2[j]!=2){ A=input1[j]+input2[j]+A;}\n\t\t if ( input1[j]>(input2[j]+1)){ A= input1[j]+A;}\n\t\t if ( input1[j]==2&&input2[j]==1){ B=6;}\n                 if ( input2[j]==2&&input1[j]==1){A=6;}\n\t\t if ( input2[j]>(input1[j]+1)){ B=input2[j]+B;}\n\t\t j++;\n\t\t }\n\t\t\n\t\t \n\t\n\t\t System.out.println(\"A has \"+A+\" points. B has \"+B+\" points.\");\n\t\t \n\t} \n\t\n\t}\n}\n\n\n\n\t\t \n\t\t \n\t\t \n\t\t \n\t\n\t\t\n\t\n\t\n", "score": 0.0}
{"id": "SHARE_1_2499_61__1_109022_1", "golden_code": "import java.util.Scanner;\n\n/**\n *\n * @author user1\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n       Scanner input=new Scanner(System.in);\n        int a=input.nextInt();\n        int w=input.nextInt();\n        int s=input.nextInt();\n        int i=0;\n        while( s!=0 && w!=0 && a!=0){\n            if(a<=30 && w>=70 && s>=500){\n                System.out.print(\"Mid-field\");\n                i++;}\n              if(a<=26 && w>=60 && s>=200){\n                  if(i==1)\n                      System.out.print(\" \");\n                System.out.print(\"Forward\");\n                i++;}\n                if(a<=36 && w>=80 && s>=300){\n                    if(i>=1)\n                        System.out.print(\" \");\n                System.out.print(\"Defense\");\n                i++;\n                }\n                if(i==0)\n                    System.out.println(\"No positions\");\n                else\n                    System.out.println();\n                a=input.nextInt();\n                w=input.nextInt();\n                s=input.nextInt();\n                i=0;\n        }\n\n    }\n}\n", "generated_code": "/*\nID: sisi_hos\nLANG: JAVA\nTASK: F\n*/\n\nimport java.io.*;\nimport java.util.*;\n\nimport static java.lang.System.*;\nimport static java.lang.Math.*;\n\npublic class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tout.println(\"PERFECTION OUTPUT\");\n\t\twhile (true)\n\t\t{\n\t\t\tint num = scan.nextInt();\n\n\t\t\tif(num == 0)\n\t\t\t{\n\t\t\t\tout.println(\"END OF OUTPUT\");\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif(num == 1)\n\t\t\t{\n\t\t\t\tout.printf(\"%5s\", num);\n\t\t\t\tout.println(\"  DEFICIENT\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tSet<Integer> set = new TreeSet<Integer>();\n\t\t\tset.add(1);\n\t\t\tfor(int i = 2; i*i <= num; i++)\n\t\t\t{\n\t\t\t\tif(num % i == 0)\n\t\t\t\t{\n\t\t\t\t\tset.add(i);\n\t\t\t\t\tset.add(num / i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tint[] factor = new int[set.size()];\n\t\t\tint j = 0;\n\t\t\tfor(int i : set)\tfactor[j++] = i;\n\n\t\t\tint sum = 0;\n\t\t\tfor(int i=0 ; i<factor.length; i++)\tsum += factor[i];\n\n\t\t\tif(num == sum)\n\t\t\t{\n\t\t\t\tout.printf(\"%5s\", num);\n\t\t\t\tout.println(\"  PERFECT\");\n\t\t\t}\n\t\t\telse if(sum > num)\n\t\t\t{\n\t\t\t\tout.printf(\"%5s\", num);\n\t\t\t\tout.println(\"  ABUNDANT\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tout.printf(\"%5s\", num);\n\t\t\t\tout.println(\"  DEFICIENT\");\n\t\t\t}\n\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_108012_19__1_108012_21", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\nclass node{\n\tpublic node(){};\n\tpublic ArrayList<child> child = new ArrayList<child>();\n\tpublic String name;\n\tpublic int dis;\n\tpublic boolean visited = false;\n}\n\nclass child {\n\tpublic child(){};\n\tpublic String nameCh;\n\tpublic int vertex;\n}\n\npublic class Main {\n\n\tpublic static ArrayList<node> nodesOfGraph = new ArrayList<node>();\n\tpublic static ArrayList<node> q = new ArrayList<node>();\n\n\tpublic static int nodeIs(ArrayList<node> temp, String nodeName){\n\t\tfor (int i = 0; i < temp.size(); i++) {\n\t\t\tif(temp.get(i).name.contentEquals(nodeName) == true)\n\t\t\t\treturn i;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tpublic static void makeGraph(String fa, String ch, int v) {\n\n\t\tint index = nodeIs(nodesOfGraph, fa);\t\t\t//find father or create father\n\t\tif (index != -1) {\n\t\t\tchild tmp = new child();\n\t\t\ttmp.nameCh = ch;\n\t\t\ttmp.vertex = v;\n\t\t\tnodesOfGraph.get(index).child.add(tmp);\n\t\t}\n\t\telse{\n\t\t\tif (nodesOfGraph.isEmpty() == true) {\n\t\t\t\tnode tempnode = new node();\n\t\t\t\ttempnode.name = fa;\n\t\t\t\ttempnode.dis = Integer.MAX_VALUE;\n\t\t\t\tnodesOfGraph.add(tempnode);\n\n\t\t\t\tchild tmp = new child();\n\t\t\t\ttmp.nameCh = ch;\n\t\t\t\ttmp.vertex = v;\n\t\t\t\tnodesOfGraph.get(0).child.add(tmp);\n\t\t\t}else{\n\t\t\t\tnode tempnode = new node();\n\t\t\t\ttempnode.name = fa;\n\t\t\t\ttempnode.dis = Integer.MAX_VALUE;\n\t\t\t\tnodesOfGraph.add(tempnode);\n\n\t\t\t\tchild tmp = new child();\n\t\t\t\ttmp.nameCh = ch;\n\t\t\t\ttmp.vertex = v;\n\t\t\t\tnodesOfGraph.get(nodesOfGraph.size()-1).child.add(tmp);}\n\t\t}\n\t\tindex = nodeIs(nodesOfGraph, ch);\t\t\t//find child or create child\n\t\tif (index != -1) {\n\t\t\treturn;\n\t\t}\n\t\telse{\n\t\t\tnode tempnode = new node();\n\t\t\ttempnode.name = ch;\n\t\t\ttempnode.dis = Integer.MAX_VALUE;\n\t\t\tnodesOfGraph.add(tempnode);\n\t\t}\n\t}\n\n\tpublic static void updateNodes (int indexfather){\n\t\tint indextmp, tmp;\n\t\tfor (int i = 0; i < nodesOfGraph.get(indexfather).child.size(); i++) {\n\t\t\tindextmp = nodeIs(nodesOfGraph, nodesOfGraph.get(indexfather).child.get(i).nameCh);\n\t\t\tif( (nodesOfGraph.get(indexfather).dis + nodesOfGraph.get(indexfather).child.get(i).vertex) <= nodesOfGraph.get(indextmp).dis ){\n\t\t\t\tnodesOfGraph.get(indextmp).dis = nodesOfGraph.get(indexfather).dis + nodesOfGraph.get(indexfather).child.get(i).vertex;\n\n\t\t\t}\n\t\t\ttmp = nodeIs(q, nodesOfGraph.get(indextmp).name) ; \n\t\t\tif ( (tmp == -1) ) {\n\t\t\t\tif ( (nodesOfGraph.get(indextmp).visited != true) ) {\n\t\t\t\t\tnodesOfGraph.get(indextmp).visited = true;\n\t\t\t\t\tq.add( nodesOfGraph.get(indextmp) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static int findMin(){\n\t\tint index = 0;\n\t\tif(q.size() == 0)\n\t\t\treturn -1;\n\t\telse if (q.size() == 1)\n\t\t\treturn index;\n\t\telse{\n\t\t\tfor (int i = 0; i <= (q.size()-1); i++) {\n\t\t\t\tif ( i == q.size()-1) {\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\n\t\t\t\tif ( q.get(i).dis >= q.get(i+1).dis ) {\n\t\t\t\t\tindex = i+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn index;\n\t\t}\n\t}\n\n\tpublic static int dijkstra(String source, String destination){\n\t\tint index = nodeIs(nodesOfGraph, source);\n\t\tnodesOfGraph.get(index).dis = 0;\n\t\tq.add( nodesOfGraph.get(index) );\n\t\tupdateNodes (index);\n\t\tq.remove(0);\n\n\t\twhile(q.isEmpty() == false){\n\t\t\tindex = findMin();\n\t\t\tif (q.get(index).name.contentEquals(destination) == true) {\n\t\t\t\treturn q.get(index).dis;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tint minInGraph = nodeIs(nodesOfGraph, q.get(index).name);\n\t\t\t\tupdateNodes(minInGraph);\n\t\t\t\tq.remove(index);\n\t\t\t}\n\t\t}\n\t\treturn -1000;\n\t}\n\n\tpublic static void defaultDistance(){\n\t\tfor (int i = 0; i < nodesOfGraph.size(); i++) {\n\t\t\tnodesOfGraph.get(i).dis = Integer.MAX_VALUE;\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner input = new Scanner(System.in);\n\n\t\tint minOfDis = Integer.MAX_VALUE;\n\t\tString source;\n\t\tString destination;\n\t\tString fatmp;\n\t\tString chtmp;\n\t\tint vertmp, vertex;\n\n\t\twhile ( input.hasNext() ) {\n\t\t\tminOfDis = Integer.MAX_VALUE;\n\t\t\tsource = input.next();\n\t\t\tdestination = input.next();\n\t\t\tvertex = input.nextInt();\n\t\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\t\tfatmp = input.next();\n\t\t\t\tchtmp = input.next();\n\t\t\t\tvertmp = input.nextInt();\n\t\t\t\tmakeGraph(fatmp, chtmp, vertmp);\n\t\t\t}\n\n\t\t\tint vertexOfChild;\n\t\t\tfor (int i = 0; i < nodesOfGraph.size(); i++) {\n\t\t\t\tfor (int j = 0; j < nodesOfGraph.get(i).child.size(); j++) {\n\t\t\t\t\tvertexOfChild = nodesOfGraph.get(i).child.get(j).vertex;\n\t\t\t\t\tnodesOfGraph.get(i).child.get(j).vertex = 0;\n\t\t\t\t\tint tempOfDijkstra = dijkstra(source, destination);\n\t\t\t\t\tif ( minOfDis > tempOfDijkstra ) {\n\t\t\t\t\t\tminOfDis = tempOfDijkstra;\n\t\t\t\t\t}\n\t\t\t\t\tnodesOfGraph.get(i).child.get(j).vertex = vertexOfChild;\n\t\t\t\t\tdefaultDistance();\n\t\t\t\t\tq.clear();\n\t\t\t\t\tfor (int k = 0; k < nodesOfGraph.size(); k++) {\n\t\t\t\t\t\tnodesOfGraph.get(k).visited = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(minOfDis);\n\t\t\tq.clear();\n\t\t\tnodesOfGraph.clear();\n\t\t} // end of while\n//\t\tSystem.out.println();\n\t}\n\n}", "generated_code": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n//package ca3;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Vector;\n\nclass node {\n    //Vector untilcost = new Vector<Integer>();\n    Integer cost=Integer.MAX_VALUE;\n    //int tempcost;\n    String name;\n    Vector nears = new Vector<node>();\n    Vector nearsdistance = new Vector<Integer>();\n    boolean in = true;\n    //boolean visit = false;\n}\n\npublic class Main {\n\n    public static node find(String s,Vector<node> nodes){\n        for (int j=0;j<nodes.size();j++){\n            if(nodes.get(j).name.equals(s)) {\n                return nodes.get(j);\n            }\n        }\n        return null;\n    }\n    \n    public static node findmin(Vector<node> nodes){\n        int mincost = Integer.MAX_VALUE;\n        node min = new node();\n        for(int i=0;i<nodes.size();i++){\n            if(nodes.get(i).cost<mincost && nodes.get(i).in == true){\n                mincost = nodes.get(i).cost;\n                min = nodes.get(i);\n            }\n        }\n        return min;\n    }\n    \n    public static void main(String[] args) throws IOException {\n        // TODO code application logic here\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String input, source , des;\n        String node1name,node2name;\n        int spacepos;\n        int spacepos2;\n        int nodenum;\n        int distance;\n        Vector costs = new Vector<Integer>();\n\n\n        Integer finalcost= 0;\n        Vector nodes;\n        nodes = new Vector<node>();\n                \n        while (reader.ready()){\n            nodes.clear();\n            costs.clear();\n            \n            finalcost=0;\n            \n            input = reader.readLine();\n            spacepos = input.indexOf(' ');\n            source = input.substring(0, spacepos);\n            node sourcenode = new node();\n            sourcenode.name = source;\n            nodes.add(sourcenode);\n            des = input.substring(spacepos + 1);\n            node desnode = new node();\n            desnode.name = des;\n            nodes.add(desnode);\n            //System.out.println(input);\n            input = reader.readLine();\n            input = input.replaceAll(\"\\\\s\",\"\");\n            nodenum = Integer.parseInt(input);\n            for(int i=0; i<nodenum ; i++ ){\n                input = reader.readLine();\n                spacepos = input.indexOf(' ');\n                spacepos2 = input.indexOf(' ', spacepos+1);\n                node1name = input.substring(0, spacepos);\n                node2name = input.substring(spacepos + 1,spacepos2);\n                //System.out.println(\"node1name:\"+node1name+\",node2name:\"+node2name);\n                String distancestring = input.substring(spacepos2+1);\n                distance = Integer.parseInt(distancestring);\n                \n                node node1= new node();\n                node node2= new node();\n                \n                if(find(node1name,nodes) == null ){\n                    node1.name = node1name;\n                    nodes.add(node1);\n                }\n                if(find(node2name,nodes) == null ){\n                    node2.name = node2name;\n                    nodes.add(node2);\n                }\n\n                find(node1name,nodes).nears.add(find(node2name,nodes));\n                find(node1name,nodes).nearsdistance.add(distance);\n\n                //find(node2name,nodes).nears.add(find(node1name,nodes));\n                //find(node2name,nodes).nearsdistance.add(distance);\n\n            }//end of for\n            sourcenode = find(source , nodes);\n            desnode = find(des, nodes);\n            node minnode = sourcenode;\n            minnode.in = false;\n            minnode.cost = 0;\n            //sourcenode.visit = true;\n            \n            Integer deletededge;\n            for(int i=0;i<nodes.size();i++){\n                for(int j=0;j<((node)nodes.elementAt(i)).nearsdistance.size();j++){\n                    deletededge = (Integer) ( (node) nodes.elementAt(i) ).nearsdistance.elementAt(j);\n                    ((node) nodes.elementAt(i)).nearsdistance.setElementAt(0,j);\n                    \n                    for(int n=0;n<nodes.size();n++){\n                        ((node)nodes.get(n)).cost = Integer.MAX_VALUE;\n                        ((node)nodes.get(n)).in = true;\n                    }\n                    sourcenode = find(source, nodes);\n                    minnode = sourcenode;\n                    minnode.in = false;\n                    minnode.cost = 0;\n                    \n                    while(desnode.in == true && minnode.name!=null){\n                        sourcenode = minnode;\n                        minnode = new node();\n\n                        for(int k=0;k<sourcenode.nears.size();k++){\n                            if(sourcenode.cost + (Integer)sourcenode.nearsdistance.elementAt(k) < (Integer)((node) sourcenode.nears.elementAt(k)).cost &&\n                                    (Integer) sourcenode.nearsdistance.elementAt(k) <= deletededge && ((node)sourcenode.nears.elementAt(k)).in == true) {\n                                ( (node) sourcenode.nears.elementAt(k) ).cost = sourcenode.cost + (Integer) sourcenode.nearsdistance.elementAt(k);\n                            }\n                        }\n                        minnode = findmin(nodes);\n                        minnode.in = false;\n                    }\n                    costs.add(desnode.cost);\n                   ((node) nodes.elementAt(i)).nearsdistance.setElementAt(deletededge,j);\n                }\n            }\n            int mincost= Integer.MAX_VALUE;\n            for(int i=0;i<costs.size();i++){\n                if((Integer)costs.elementAt(i)<mincost)\n                    mincost = (Integer)costs.elementAt(i);\n            }\n            System.out.println(mincost);\n            if(reader.ready())\n                input=reader.readLine();\n        }\n        \n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2741_1__1_2717_62", "golden_code": "import java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.Scanner;\n\n/**\n * Created by ali on 10/16/14.\n */\npublic class Main\n{\n\tprivate final static int [] dx = new int[] { 1, 2, 1, 2,-1,-2,-1,-2};\n\tprivate final static int [] dy = new int[] { 2, 1,-2,-1, 2, 1, -2,-1};\n\tprivate static long [][][] dp = new long[1000][10][10];\n\n\tpublic static void main(String [] args)\n\t{\n\t\tScanner in = new Scanner(System.in);\n\n\n\t\twhile(in.hasNext())\n\t\t{\n\n\t\t\tString a = in.next();\n\t\t\tString b = in.next();\n\n\t\t\tint[] p1 = get(a);\n\t\t\tint[] p2 = get(b);\n\n\t\t\tfor(long [][] fill1 : dp)\n\t\t\t\tfor(long [] fill2 : fill1)\n\t\t\t\t\tArrays.fill(fill2, -1);\n\n\t\t\tint res = bfs(p1[0], p1[1], p2[0], p2[1]);\n\n\t\t\tSystem.out.println(\"To get from \"+a+\" to \"+b+\" takes \"+res+\" knight moves.\");\n\t\t}\n\t}\n\n\tprivate static int[] get(String a)\n\t{\n\t\tint [] res = new int[2];\n\t\tres[0] = a.charAt(0)-'a';\n\t\tres[1] = a.charAt(1) - '1';\n\n\t\treturn res;\n\t}\n\n\tprivate static int bfs(int x1, int y1, int x2, int y2)\n\t{\n\t\tint [][] best = new int[8][8];\n\t\tfor(int [] fill : best)\n\t\t\tArrays.fill(fill, 1000000000);\n\n\t\tQueue<Integer> queue = new LinkedList<Integer>();\n\t\tqueue.offer(x1);\n\t\tqueue.offer(y1);\n\t\tbest[x1][y1] = 0;\n\n\t\twhile(!queue.isEmpty())\n\t\t{\n\t\t\tint ax = queue.poll();\n\t\t\tint ay = queue.poll();\n\t\t\tfor (int d = 0; d < 8; d++)\n\t\t\t{\n\t\t\t\tint tx = ax + dx[d];\n\t\t\t\tint ty = ay + dy[d];\n\n\t\t\t\tif (tx < 0 || ty < 0 || tx >= 8 || ty >= 8)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tif(best[tx][ty] != 1000000000)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tqueue.offer(tx);\n\t\t\t\tqueue.offer(ty);\n\n\t\t\t\tbest[tx][ty] = best[ax][ay] + 1;\n\t\t\t}\n\t\t}\n\n\t\treturn best[x2][y2];\n\t}\n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile (true){\n\t\t\tint t=in.nextInt();\n\n\t\t\tif (t==0){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tint c =0;\n\t\t\tString s1 = in.next();\n\t\t\tString s2 = in.next();\n\t\t\tString s = in.next();\n\t\t\tString r = s1+s2;\n\t\t\twhile ((!r.equals(s))&&c<=50){\n\t\t\t\tc++;\n\t\t\t\tString t1 = r.substring(0,t);\n\t\t\t\tString t2 = r.substring(t);\n\t\t\t\tString temp =\"\";\n\t\t\t\tfor (int i = 0;i<t1.length();i++){\n\t\t\t\t\ttemp+=t2.charAt(i);\n\t\t\t\t\ttemp+=t1.charAt(i);\n\t\t\t\t}\n\t\t\t\tr =temp;\n\t\t\t}\n\t\t\tif (c > 50){\n\t\t\t\tSystem.out.println(-1);\n\t\t\t}else{\n\t\t\t\tSystem.out.println(c);\n\t\t\t}\n\n\t\t}\n\t}\t\n}\n", "score": 0.0}
{"id": "SHARE_1_2371_14__1_2644_34", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext()){\n\t\t\tint n = in.nextInt(), r = 0;\n\t\t\tfor(int i = 1; i <= n; i++)\n\t\t\t\tr += (i*(i+1))/(1+(((n-1-i)%2==0)?0:1));\n\t\t\tSystem.out.println(r);\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.*;\npublic class Main{\n\tpublic static void main(String[] z){\n\t\tScanner s = new Scanner(System.in);\n\t\tString a=\"EPLRAGFSOXVCWTIBZDHNYKMJUQ\";\n\t\twhile(s.hasNext()){\n\t\t\tString r =\"\";\n\t\t\tfor(char f:s.nextLine().toCharArray()){\n\t\t\t\tint i=f,c=f;\n\t\t\t\tif (f>94)i-=32;\n\t\t\t\ti-=65;\n\t\t\t\tf=(i>-1&&i<26)?a.charAt(i):f;\n\t\t\t\tif(c>94)f+=32;\n\t\t\t\tr+=f;\n\t\t\t}\n\t\t\tSystem.out.println(r);\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_5_1005_17__5_1005_22", "golden_code": "\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author sam\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner input=new Scanner(System.in);\n        int n,m;\n        int a,b;\n        while(true){\n            n=input.nextInt();\n            m=input.nextInt();\n            if(m==0&&n==0)\n                break;\n            ArrayList<Node> allNodes=new ArrayList<Node>();\n            for(int i=0;i<=n;i++){\n                Node temp=new Node(i);           \n                allNodes.add(temp);\n            }\n            for(int i=0;i<m;i++){\n                a=input.nextInt();\n                b=input.nextInt();\n                allNodes.get(b).addFather(allNodes.get(a));\n            }\n            for(int i=0;i<n;i++){\n                if(!allNodes.get(i+1).hasFather()){\n                    allNodes.get(i+1).addFather(allNodes.get(0));\n                }\n            }\n            for(int i=0;i<n;i++){\n                Node temp;\n                if(i>0){\n                    System.out.print(\" \");\n                }\n                temp=allNodes.get(0).getBigestChild();\n                System.out.print(temp.getValue());\n                temp.delete();\n            }\n            System.out.println();\n        }\n            \n    }\n}\nclass Node{\n    private int value;\n    private ArrayList<Node> fathers;\n    private ArrayList<Node> childs;\n    public Node(int val){\n        value=val;\n        childs=new ArrayList<Node>();\n        fathers=new ArrayList<Node>();\n    }\n    public void delete(){\n        Node child;\n        Node father;\n        father=fathers.get(0);\n        for(int i=0;i<childs.size();i++){\n            child=childs.get(i);\n            child.fathers.remove(this);\n            if(child.fathers.size()==0)\n                child.addFather(father);\n        }\n        father.childs.remove(this);\n    }\n    public Node getBigestChild(){\n        int j=0;\n        Node x=null;\n        for(int i=0;i<childs.size();i++){\n            if(childs.get(i).value>j){\n                j=childs.get(i).value;\n                x=childs.get(i);\n            }\n        }\n        return x;\n    }\n\n    public int getValue() {\n        return value;\n    }\n    public boolean hasFather(){\n        if(fathers.size()!=0){\n            return true;\n        }\n        return false;\n    }\n    public void addFather(Node x){\n        if(x!=null && !fathers.contains(x)){\n            fathers.add(x);\n            if(!x.childs.contains(this)){\n                x.childs.add(this);\n            }\n        }\n    }\n}\n", "generated_code": "import java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args)throws IOException{\n\t\tScanner cs=new Scanner(System.in);\n\t\twhile (cs.hasNext()){\n\t\t\tint n=cs.nextInt();\n\t\t\tint m=cs.nextInt();\n\t\t\tif(n==0 && m==0)\n\t\t\t\tbreak;\n\t\t\tint[] courses=new int[n];\n\t\t\tArrayList<edge> edges=new ArrayList<edge>();\n\t\t\tfor(int j=0;j<m;j++){\n\t\t\t\tint f=cs.nextInt();\n\t\t\t\tint t=cs.nextInt();\n\t\t\t\tedge e=new edge(f,t);\n\t\t\t\tedges.add(e);\n\t\t\t\tcourses[f-1]=1;\n\t\t\t\tcourses[t-1]=1;\n\t\t\t}\n\t\t\tArrayList<Integer> s=new ArrayList<Integer>(); //list of nodes with no incoming edge\n\t\t\tArrayList<Integer> result=new ArrayList<Integer>();\n\t\t\tfor(int a=0;a<n;a++) //if course number has not been set in any relations, it would be add to s\n\t\t\t\tif(courses[a]==0)\n\t\t\t\t\ts.add(a+1);\n\t\t\tint flag=0;\n\t\t\tfor(int b=0;b<edges.size();b++){\t//add nodes of relation that does not apear in \"to\" to s\n\t\t\t\tfor(int d=0;d<edges.size();d++){\n\t\t\t\t\tif((edges.get(b).from)==(edges.get(d).to))\n\t\t\t\t\t\tflag=1;\n\t\t\t\t}\n\t\t\t\tif(flag==0)\n\t\t\t\t\tif(!s.contains(edges.get(b).from)&&(!result.contains(edges.get(b).from)))\n\t\t\t\t\t\ts.add(edges.get(b).from);\n\t\t\t\t\telse flag=0;\n\t\t\t}\n\t\t\twhile(!s.isEmpty()){\n\t\t\t\tint max=0;\n\t\t\t\tint index=0;\n\t\t\t\tfor(int h=0;h<s.size();h++)\n\t\t\t\t\tif(s.get(h)>max){\n\t\t\t\t\t\tmax=s.get(h);\n\t\t\t\t\t\tindex=h;\n\t\t\t\t\t}\n\t\t\t\ts.remove(index);\n\t\t\t\tresult.add(max);\n\t\t\t\tfor(int v=0;v<edges.size();v++){\n\t\t\t\t\tif(edges.get(v).from==max){\n\t\t\t\t\t\tif(!s.contains(edges.get(v).to)&&(!result.contains(edges.get(v).to))&&(!hasPre(edges.get(v).to,edges))){\n\t\t\t\t\t\t\ts.add(edges.get(v).to);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tedges.remove(v);\n\t\t\t\t\t\tv--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint flag2=0;\n\t\t\t\tfor(int b=0;b<edges.size();b++){\t//add nodes of relation that does not apear in \"to\" to s\n\t\t\t\t\tfor(int d=0;d<edges.size();d++){\n\t\t\t\t\t\tif((edges.get(b).from)==(edges.get(d).to))\n\t\t\t\t\t\t\tflag2=1;\n\t\t\t\t\t}\n\t\t\t\t\tif(flag2==0)\n\t\t\t\t\t\tif(!s.contains(edges.get(b).from)&&(!result.contains(edges.get(b).from)))\n\t\t\t\t\t\t\ts.add(edges.get(b).from);\n\t\t\t\t\t\telse flag2=0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int z=0;z<result.size()-1;z++)\n\t\t\t\tSystem.out.print(result.get(z)+\" \");\n\t\t\tSystem.out.print(result.get(result.size()-1));\n\t\t\tSystem.out.println();\n\n\n\t\t}\n\t}\n\tpublic static class edge{\n\t\tint from;\n\t\tint to;\n\t\tpublic edge(int f,int t){\n\t\t\tfrom=f;\n\t\t\tto=t;\n\t\t}\n\t}\n\tpublic static boolean hasPre(int second,ArrayList<edge> e){\n\t\tint flag=0;\n\t\tfor(int i=0;i<e.size();i++){\n\t\t\tif(e.get(i).to==second)\n\t\t\t\tflag+=1;\n\t\t}\n\t\tif(flag>1)\n\t\t\treturn true;\n\t\telse return false;\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_109016_36__1_109016_27", "golden_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n\tpublic static class point {\n\t\tpublic double x;\n\t\tpublic double y;\n\t\tpoint(double xx,double yy){\n\t\t\tx=xx;\n\t\t\ty=yy;\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader reader=new BufferedReader(new InputStreamReader(System.in));\n\t\tint n;\n\t\tpoint[] ps=null;\n\t\twhile(true){\n\t\t\tn=Integer.parseInt(reader.readLine());\n\t\t\tif(n==0)\n\t\t\t\tbreak;\n\t\t\tps=new point[n];\n\t\t\tdouble x, y;\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tString str=reader.readLine();\n\t\t\t\tString[] A=str.split(\" \");\n\t\t\t\tx=Double.parseDouble(A[0]);\n\t\t\t\ty=Double.parseDouble(A[1]);\n\t\t\t\tpoint temp=new point(x,y);\n\t\t\t\tps[i]=temp;\n\t\t\t}\n\n\t\t\tpoint[] x_ordered=new point[n],y_ordered=new point[n];\n\t\t\tMergeSort(ps,x_ordered,0,n-1,0);\n\t\t\tMergeSort(ps,y_ordered,0,n-1,1);\n\t\t\t//ps=null;\n\n\t\t\tdouble diameter=ClosestPairDistance(x_ordered,y_ordered);\n\t\t\tSystem.out.printf(\"%.2f\\n\",(diameter/2));\n\t\t}\n\n\t}\n\n\tpublic static void MergeSort(point[] ps, point[] temp, int left, int right, int flag){\n\t\tif(right>left){\n\t\t\tint mid=(right+left)/2;\n\t\t\tMergeSort(ps,temp,left,mid,flag);\n\t\t\tMergeSort(ps,temp,mid+1,right,flag);\n\t\t\tmerge(ps,temp,left,mid+1,right,flag);\n\t\t}\n\t}\n\n\tpublic static void merge(point[] ps, point[] temp, int left, int mid, int right, int flag){\n\n\t\tint left_end=mid-1;\n\t\tint t=left;\n\t\tint num=right-left+1;\n\t\twhile((left<=left_end)&&(mid<=right)){\n\t\t\tif(flag==0){\n\t\t\t\tif(ps[left].x<=ps[mid].x)\n\t\t\t\t\ttemp[t++]=ps[left++];\n\t\t\t\telse\n\t\t\t\t\ttemp[t++]=ps[mid++];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(ps[left].y<=ps[mid].y)\n\t\t\t\t\ttemp[t++]=ps[left++];\n\t\t\t\telse\n\t\t\t\t\ttemp[t++]=ps[mid++];\n\t\t\t}\n\t\t}\n\t\twhile(left<=left_end)\n\t\t\ttemp[t++]=ps[left++];\n\t\twhile(mid<=right)\n\t\t\ttemp[t++]=ps[mid++];\n\t\tfor(int y=0;y<num;y++){\n\t\t\tps[right]=temp[right];\n\t\t\tright=right-1;\n\t\t}\n\t}\n\n\tpublic static double ClosestPairDistance(point[] x_ordered, point[] y_ordered){\n\t\tdouble d_min=0;\n\t\tdouble d_min_sq=1000000;\n\t\tdouble dl=0,dr=0;\n\t\tint n=x_ordered.length;\n\t\tif(n<=3){\n\t\t\tfor(int u=0;u<n;u++){\n\t\t\t\tint v=u+1;\n\t\t\t\twhile(v<n){\n\t\t\t\t\td_min_sq=Math.min(d_min_sq,(Math.pow(x_ordered[u].y-x_ordered[v].y,2))+(Math.pow(x_ordered[u].x-x_ordered[v].x,2)));\n\t\t\t\t\tv++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tint mid;\n\t\t\tif(n%2==0)\n\t\t\t\tmid=n/2;\n\t\t\telse\n\t\t\t\tmid=n/2+1;\n\t\t\tpoint[] x_l=new point[mid+1];\n\t\t\tpoint[] x_r=new point[n-mid+1];\n\t\t\tpoint[] y_l=new point[mid+1];\n\t\t\tpoint[] y_r=new point[n-mid+1];\n\t\t\tSystem.arraycopy(x_ordered,0,x_l,0,mid+1);\n\t\t\tSystem.arraycopy(x_ordered,mid-1,x_r,0,n-mid+1);\n\t\t\tSystem.arraycopy(y_ordered,0,y_l,0,mid+1);\n\t\t\tSystem.arraycopy(y_ordered,mid-1,y_r,0,n-mid+1);\n\t\t\tdl=ClosestPairDistance(x_l,y_l);\n\t\t\tdr=ClosestPairDistance(x_r,y_r);\n\t\t\td_min=Math.min(dl,dr);\n\t\t\tVector<point> S=new Vector<point>();\n\t\t\tdouble m=x_ordered[mid-1].x;\n\t\t\tfor(int a=0;a<y_ordered.length;a++)\n\t\t\t\tif(Math.abs((y_ordered[a].x)-m)<d_min)\n\t\t\t\t\tS.add(y_ordered[a]);\n\t\t\td_min_sq=Math.pow(d_min,2);\n\t\t\tfor(int u=0;u<S.size()-1;u++){\n\t\t\t\tint v=u+1;\n\t\t\t\twhile((v<S.size())&&((Math.pow(S.elementAt(v).y-S.elementAt(u).y,2))<=d_min_sq)){\n\t\t\t\t\td_min_sq=Math.min(d_min_sq,(Math.pow(S.elementAt(v).x-S.elementAt(u).x,2))+(Math.pow(S.elementAt(v).y-S.elementAt(u).y,2)));\n\t\t\t\t\tv++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Math.sqrt(d_min_sq);\n\t}\n\n}\n", "generated_code": "import java.awt.geom.Point2D;\nimport java.io.*;\nimport java.util.*;\nimport java.awt.*;\n\npublic class Main\n{\n\tstatic PrintWriter writer = new PrintWriter(new OutputStreamWriter(System.out));\n\tpublic static void main(String [] args) throws IOException\n\t{\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\twhile(true)\n\t\t{\n\t\t\tint n = Integer.parseInt(reader.readLine());\n\t\t\tif(n == 0)\n\t\t\t\tbreak;\n\t\t\tPoint.Double [] points = new Point.Double[n];\n\t\t\tStringTokenizer st;\n\t\t\tfor(int i = 0 ; i<n ; i++)\n\t\t\t{\n\t\t\t\tst = new StringTokenizer(reader.readLine());\n\t\t\t\tpoints[i] = new Point.Double(Double.parseDouble(st.nextToken()), Double.parseDouble(st.nextToken()));\n\t\t\t}\n\n\t\t\tPoint2D.Double[] closest = new Point2D.Double[2];\n\n\t\t\tdouble min = Double.POSITIVE_INFINITY;\n\n\t\t\tArrays.sort(points, new Comparator<Point2D.Double>()\n\t\t\t{\n\t\t\t\t@Override\n\t\t\t\tpublic int compare(Point2D.Double p1, Point2D.Double p2)\n\t\t\t\t{\n\t\t\t\t\tif(p1.x > p2.x) return 1;else return -1;\n\t\t\t\t}\n\t\t\t});\n\n\n\t\t\tint left = 0;\n\t\t\tSortedSet<Point2D.Double> candidates = new TreeSet<Point2D.Double>(new Comparator<Point2D.Double>()\n\t\t\t{\n\t\t\t\t@Override\n\t\t\t\tpublic int compare(Point2D.Double p1, Point2D.Double p2)\n\t\t\t\t{\n\t\t\t\t\tif(p1.y > p2.y)\treturn 1; else return -1;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfor (Point2D.Double current : points)\n\t\t\t{\n\t\t\t\twhile(current.x - points[left].x > min)\n\t\t\t\t{\n\t\t\t\t\tcandidates.remove(points[left]);\n\t\t\t\t\tleft++;\n\t\t\t\t}\n\n\t\t\t\tPoint2D.Double head = new Point2D.Double(current.x,  (current.y - min));\n\t\t\t\tPoint2D.Double tail = new Point2D.Double(current.x,  (current.y + min));\n\n\t\t\t\tfor (Point2D.Double point : candidates.subSet(head, tail))\n\t\t\t\t{\n\t\t\t\t\tdouble distance = current.distance(point);\n\n\t\t\t\t\tif (distance < min) {\n\t\t\t\t\t\tmin = distance;\n\n\t\t\t\t\t\tclosest[0] = current;\n\t\t\t\t\t\tclosest[1] = point;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcandidates.add(current);\n\t\t\t}\n\n\t\t\twriter.printf(\"%.2f\\n\",closest[0].distance(closest[1])/2);\n\t\t}\n\t\twriter.flush();\n\t\twriter.close();\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_19__1_1001_290", "golden_code": "import java.util.*;\npublic class Main\n{\n\tpublic static void main(String []argc)\n\t{\n\t\tScanner in = new Scanner(System.in);\n\t\twhile( in.hasNextLine() )\n\t\t{\n\t\t\tString line = in.nextLine();\n\t\t\tScanner dummy = new Scanner(line);\n\t\t\tSystem.out.println( dummy.nextInt() + dummy.nextInt() );\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;public class Main {public static void main(String[] args){Scanner c=new Scanner(System.in);while(c.hasNext())System.out.println(c.nextInt()+c.nextInt());}}", "score": 1.0}
{"id": "SHARE_1_2621_20__1_1104_19", "golden_code": "\nimport java.util.Scanner;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author mehrdad\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner sc=new Scanner(System.in);\n        int n=sc.nextInt();\n        boolean flag=false;\n        String str;\n        for(int i=0;i<n;i++)\n        {\n            flag=false;\n            str=sc.next();\n            str=str.toLowerCase();\n            int a[]=new int[str.length()];\n            for(int k=0;k<str.length();k++)\n            {\n                if((str.charAt(k)=='a')||(str.charAt(k)=='b')||(str.charAt(k)=='c')) a[k]=2;\n                else if ((str.charAt(k)=='d')||(str.charAt(k)=='e')||(str.charAt(k)=='f')) a[k]=3;\n                else if ((str.charAt(k)=='g')||(str.charAt(k)=='h')||(str.charAt(k)=='i')) a[k]=4;\n                else if ((str.charAt(k)=='j')||(str.charAt(k)=='k')||(str.charAt(k)=='l')) a[k]=5;\n                else if ((str.charAt(k)=='m')||(str.charAt(k)=='n')||(str.charAt(k)=='o')) a[k]=6;\n                else if ((str.charAt(k)=='p')||(str.charAt(k)=='q')||(str.charAt(k)=='r')||(str.charAt(k)=='s')) a[k]=7;\n                else if ((str.charAt(k)=='t')||(str.charAt(k)=='u')||(str.charAt(k)=='v')) a[k]=8;\n                else if ((str.charAt(k)=='w')||(str.charAt(k)=='x')||(str.charAt(k)=='y')||(str.charAt(k)=='z')) a[k]=9;\n                \n            }\n//            for(int k=0;k<str.length();k++)\n//            {\n//                System.out.print(a[k]);\n//            }\n            for(int j=0;j<str.length()/2;j++)\n            {\n                if(a[j]==a[str.length()-j-1]);\n                else flag=true;\n            }\n            if(!flag) System.out.print(\"YES\\n\");\n            else System.out.print(\"NO\\n\");\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n  Scanner p=new Scanner(System.in);\n  int t=p.nextInt();\n  p.nextLine();\n  for(int i=0;i<t;i++){\n  \tString s=p.nextLine();\n  \t\tString x = \"\";\n\t\tfor(char ch : s.toCharArray())\n\t\t\tx = ch+\"\"+x;\n      System.out.println(x);\n  }\n    }  \n}", "score": 0.0}
{"id": "SHARE_1_1010_14__1_106019_14", "golden_code": "import java.util.*;\nimport java.lang.*;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner (System.in);\n\t\tint num = input.nextInt();\n\t\tfor (int i = 0 ; i< num ; i++){\n\t\t\tint k = 0;\n\t\t\tdouble x,y;\n\t\t\tx = input.nextDouble();\n\t\t\ty = input.nextDouble();\n\t\t\tdouble r = 0;\n\n\t\t\twhile (r*r <x*x+y*y){\n\t\t\t\tk++;\n\t\t\t\tdouble u = Math.pow ((100/3.14)+r*r,(1/2.0));\n\t\t\t\tr += (-1*r + u);\n\t\t\t\t\n\t\t\t}\n\t\t\tSystem.out.println(\"Property \"+(i+1)+\": This property will begin eroding in year \" + k+\".\");\n\t\t}\n\t\tSystem.out.println(\"END OF OUTPUT.\");\n\t}\n}\n\n", "generated_code": "import java.util.*;\n\npublic class Main {\n\n\tpublic static void main(String args[]) {\n\t\tScanner s = new Scanner(System.in);\n\t\twhile (s.hasNext()) {\n\t\t\tString t = s.next();\n\t\t\tboolean w[][] = new boolean[t.length() + 1][t.length() + 1];\n\t\t\tlong[] dp = new long[t.length() + 1];\n\t\t\tlong[] p = new long[t.length() + 1];\n\t\t\tfor (int i = 1; i <= t.length(); i++) {\n\t\t\t\tw[i][i] = true;\n\t\t\t\tfor (int j = i - 1; j >= 1; j--) {\n\t\t\t\t\tif (i - j == 1) {\n\t\t\t\t\t\tif (t.charAt(i - 1) == t.charAt(j - 1))\n\t\t\t\t\t\t\tw[j][i] = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (t.charAt(i - 1) == t.charAt(j - 1)\n\t\t\t\t\t\t\t\t&& w[j + 1][i - 1])\n\t\t\t\t\t\t\tw[j][i] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tint c = 0;\n\t\t\tfor (int i = 0; i < w.length; i++) {\n\t\t\t\tfor (int j = 0; j < w[i].length; j++) {\n\t\t\t\t\tif (w[i][j]) {\n\t\t\t\t\t\tc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(c);\n\t\t}\n\t}\n\n}", "score": 0.0}
{"id": "SHARE_1_106025_6__1_106025_11", "golden_code": "import java.util.*;\nimport java.lang.*;\npublic class Main\n{\t\n\tpublic static void main(String[] args)\n\t{\t\n\t\tScanner scan=new Scanner(System.in);\n\t\tint v,j=0;\n\t\tv=scan.nextInt();\n\t\tscan.nextLine();\n\t\tint[] ans=new int[3000];\n\t\tint count=1;\n\t\tchar num='0';\n\t\tString n=\"\",l;\n\t\twhile(v!=0)\n\t\t{\n\t\tn=\"\";\n\t\tl=scan.nextLine()+\" \";\n\t\tj=0;\n\t\tfor(int i=0 ; i<l.length() ; i++)\n\t\t{\t\n\t\t\tif((l.charAt(i)=='0')||(l.charAt(i)=='1')||(l.charAt(i)=='2')||(l.charAt(i)=='3')||(l.charAt(i)=='4')||(l.charAt(i)=='5')||(l.charAt(i)=='6')||(l.charAt(i)=='7')||(l.charAt(i)=='8')||(l.charAt(i)=='9'))\n\t\t\t\tn = n+((l.charAt(i))+\"\");\n\t\t}\n\t\tn=n+\" \";\n\t\tfor(int i=0 ; i<n.length(); i++)\n\t\t{\n\t\t\tif(n.charAt(i)!=' ')\n\t\t\t{\n\t\t\t\tnum=n.charAt(i);\n\t\t\t\twhile(n.charAt(i)==n.charAt(i+1))\n\t\t\t\t{\t\n\t\t\t\t\tcount++;\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t\tans[j]=count;\n\t\t\t\t\tj++;\n\t\t\t\t\tans[j]=num-'0';\n\t\t\t\t\tcount=1;\n\t\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\tfor(int i=0 ; i<j ; i+=2)\n\t\t{\t\n\t\t\tSystem.out.print(ans[i]+\"\"+ans[i+1]);\n\t\t}\n\t\tSystem.out.println();\n\t\tv--;\n\t\t}\n\t\t\t\n\t}\n\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tin.nextLine();\n\t\tfor(int i=0; i<n; i++)\n\t\t\tSystem.out.println(Say(in.nextLine().toCharArray()));\n\t}\n\t\n\tprivate static String Say(char[] first){\n\t\tString sec = \"\";\n\t\tint counter = 1, i;\n\t\tfor(i=1; i<first.length; i++){\n\t\t\tif(first[i]!=first[i-1]){\n\t\t\t\tsec += Integer.toString(counter) + first[i-1];\n\t\t\t\tcounter = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t\tcounter++;\t\t\n\t\t}\n\t\tsec += Integer.toString(counter) + first[i-1];\n\t\treturn sec;\n\t\t\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1959_9__1_1959_26", "golden_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main(String[] args) \n\t{   \n\t\tScanner scan=new Scanner(System.in);\n\t\twhile(scan.hasNext())\n\t\t{     \n\t\t\tint n=scan.nextInt();\n\t\t\tint[] arr=new int[n];\n\t\t\tint x=0,y=0,z=1,c=1;\n\t\t\tfor(int i=0 ; i<arr.length ; i++)\n\t\t            arr[i]=scan.nextInt();\n\t\t\tif(arr[0]==1)\n\t\t  {\t\n\t\t\t  for(int i=2 ; i<n ; i+=2)\n\t\t\t {\n\t\t\t\tif(arr[i]!=1)\n\t\t\t\t\tx++;\n\t\t\t\tif(arr[i]!=0)\n\t\t\t\t\tz++;\n\t\t\t }\n\t\t\t  for(int i=1 ; i<n ; i+=2)\n\t\t\t {\n\t\t\t\tif(arr[i]!=0)\n\t\t\t\t\tx++;\n\t\t\t\tif(arr[i]!=1)\n\t\t\t\t\tz++;\n\t\t\t }\n\t\t   if(x<z)\n\t\t   System.out.println(x);\n\t\t   else\n\t\t   System.out.println(z);\n\t\t   }\n\t\t\telse\n\t\t  {\t\n\t\t\t   for(int i=2 ; i<n ; i+=2)\n\t\t\t  {\n\t\t\t\t  if(arr[i]!=0)\n\t\t\t\t\ty++;\n\t\t\t\t  if(arr[i]!=1)\n\t\t\t\t\tc++;\n\t\t\t   }\n\t\t\t\t for(int i=1 ; i<n ; i+=2)\n\t\t\t   {\n\t\t\t\t  if(arr[i]!=1)\n\t\t\t\t\t y++;\n\t\t\t\t  if(arr[i]!=0)\n\t\t\t\t\t c++;\n\t\t\t   }  \n\t\t  if(c<y)\n\t\t   System.out.println(c);\n\t\t   else\n\t\t   System.out.println(y);\n\t\t  }  \n\t\t\t \n\t\t}     \n\t\t\t\n\n\t}\n\n}", "generated_code": "import java.util.Scanner;\npublic class Main \n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan =new Scanner(System.in);\n\t\t\n\t\tint number;\n\t\twhile(scan.hasNextInt())\n\t\t{\n\t\t\tint k=0;\n\t\t\tint l=0;\n\t\t\t\n\t\t\tnumber= scan.nextInt();\n\t\t\tint[] array = new int[number];\n\t\t\tint[] array1 = new int[number];\n\t\t\tint[] array2= new int[number];\n\t\t\t\n\t\t\tfor(int i=0; i<number; i++)\n\t\t\t\tarray[i]=scan.nextInt();\n\t\t\t\n\t\t\tfor(int i=0; i<number; i+=2)\n\t\t\t\tarray1[i]=1;\n\t\t\t\n\t\t\tfor(int i=1; i<number; i+=2)\n\t\t\t\tarray1[i]=0;\n\t\t\t\n\t\t\tfor(int i=0; i<number; i+=2)\n\t\t\t\tarray2[i]=0;\n\t\t\t\n\t\t\tfor(int i=1; i<number; i+=2)\n\t\t\t\tarray2[i]=1;\n\t\t\t\n\t\t\n\t\t\tfor(int i=0; i<number; i++)\n\t\t\t\tif(array[i]!=array1[i])\n\t\t\t\t\tk++;\n\t\t\t\n\t\t\tfor(int i=0; i<number; i++)\n\t\t\t\tif(array[i]!=array2[i])\n\t\t\t\t\tl++;\n\t\t\t\n\t\t\tif(k<=l)\n\t\t\t\tSystem.out.println(k);\n\t\t\t\n\t\t\telse\n\t\t\t\tSystem.out.println(l);\n\t\t}\n\t\t\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_335__1_2717_44", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {            \n            System.out.println(in.nextInt()+in.nextInt());\n        }\n    }\n    \n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        int n;\n        n=input.nextInt();\n        while (n!=0){\n        String s1=input.next();\n        String s2=input.next();\n        String s=input.next();\n        System.out.println(\"\"+STR( s1, s2, s, n));\n        n=input.nextInt();\n        }\n        \n    }\n    \n    static int STR(String s1, String s2, String s, int n){\n        int counter=0;\n        String s12=\"\";\n        while (counter<50) {\n            for (int i = 0; i < n; i++) {\n                s12+=s2.charAt(i);\n                s12+=s1.charAt(i);\n            }\n            counter++;\n            if (s12.equals(s)) {\n                return counter;\n            } else{\n                s1=s12.substring(0,s12.length()/2);\n                s2=s12.substring(s12.length()/2);\n                s12=\"\";\n                continue;\n            }\n        }\n        if (counter>=50) {\n            return -1;\n        }\n        return counter;\n    }\n    \n}", "score": 0.0}
{"id": "SHARE_1_1001_187__1_1001_119", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    static Scanner input = new Scanner(System.in);\n    public static void main(String[] args) {\n        while(input.hasNextInt()){\n            System.out.println(input.nextInt() + input.nextInt());\n        }\n}\n}\n", "generated_code": "import java.util.Scanner;\nclass Main{\npublic static void main(String[] args){\nScanner scan=new Scanner(System.in);\nwhile(scan.hasNextInt()){\nint a=scan.nextInt();\nif(scan.hasNextInt()){\nint b=scan.nextInt();\nSystem.out.println(a+b);}}}}", "score": 1.0}
{"id": "SHARE_1_2527_5__1_2000_3", "golden_code": "\nimport java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        DecimalFormat df = new DecimalFormat(\"0.00\");\n        int t=in.nextInt();\n        in.nextLine();\n        for (int i = 0; i < t; i++) {\n            String s1=in.nextLine();\n            double d1[]={in.nextDouble(),in.nextDouble(),in.nextDouble()};\n            in.nextLine();\n            String s2=in.nextLine();\n            double d2[]={in.nextDouble(),in.nextDouble(),in.nextDouble()};\n            in.nextLine();\n            double out=Math.sqrt(Math.pow(d1[0]-d2[0],2)+Math.pow(d1[1]-d2[1],2)+Math.pow(d1[2]-d2[2],2));            \n            System.out.println(s1+\" to \"+s2+\": \"+df.format(out));\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\n/**\n * Created by Mina on 1/19/14.\n */\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int wn=input.nextInt();\n        while(wn!=0){\n        int [][]u=new int[wn][2];\n        int [][]d=new int[wn][2];\n\n        for(int i=0;i<wn;i++){\n            input.nextLine();\n            u[i][0]=input.nextInt();\n            u[i][1]=input.nextInt();\n            d[i][0]=input.nextInt();\n            d[i][1]=input.nextInt();\n        }\n        input.nextLine();\n        int pn=input.nextInt();\n        int[][]p=new int[pn][2];\n        for(int i=0;i<pn;i++){\n            input.nextLine();\n            p[i][0]=input.nextInt();\n            p[i][1]=input.nextInt();\n        }\n            boolean f=false;\n            for(int i=0;i<pn;i++){\n                f=false;\n                for(int j=wn-1;j>=0;j--){\n                    if((u[j][0]<=p[i][0]&&p[i][0]<=d[j][0])&&(u[j][1]<=p[i][1]&&p[i][1]<=d[j][1])){\n                        System.out.println(j);\n                        f=true;\n                        break;\n                    }\n                }\n                if(!f){\n                    System.out.println(\"-1\");\n                }\n            }\n\n\n\n            input.nextLine();\n            wn=input.nextInt();\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2500_53__1_2500_8", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\n    public static void main(String[] args) {\n        \n      Scanner in = new Scanner(System.in);\n     while(in.hasNext())\n     {\n      long n = in.nextLong();\n       double m = in.nextDouble();\n  double d = Math.pow(3, m);\n     \n   if(m==0&&n==0)\n   {\n       System.exit(0);\n  \n   }\n   if(n==0&&m==1)\n   {\n       System.out.println(\"Yes\");\n   }\n   else\n   {\n       if(n==1)\n       {\n       if(m==2)\n               System.out.println(\"No\");\n       else\n               System.out.println(\"Yes\");\n       }\n       else\n        \n                asli(n, m);\n           \n       \n                \n           \n           \n               \n           \n     \n   \n      }\n   \n  }\n  }\n    \n      \n     public static void wood2(long k3, long n, double m)\n        {\n            long k4, k5=1,u=1;\n            if (n == 2)\n            {\n                if (m == k3 + 2)\n                {\n                    System.out.println(\"No\");\n                }\n                else\n                {\n                    System.out.println(\"Yes\");\n                }\n            }\n            else\n            {\n                k4= k3;\n                for (int i = 0; i < n-2; i++)\n                {\n                    u *= 3;\n                }\n                k4 = k3 + 1 + u;\n                for (int j = 0; j < n-2; j++)\n                {\n                    k5 *= 3; \n                }\n                k5 = k3 + (2*k5);\n\n                n--;\n                if (m < k4)\n                {\n                    if (n == 2)\n                    {\n                        if (m == k3 + 2)\n                        {\n                            System.out.println(\"No\");\n\n                        }\n                        else\n                        {\n                            System.out.println(\"Yes\");\n                        }\n                    }\n                    else\n                    {\n                        \n                        wood2(k3, n, m);\n                    }\n                }\n                if (m > k5)\n                {\n                    if (n == 2)\n                    {\n                        if (m == k5 + 2)\n                        {\n                            System.out.println(\"No\");\n                        }\n                        else\n                        {\n                            System.out.println(\"Yes\");\n                        }\n                    }\n                    else\n                    {\n                        k3 = k5;\n                        \n                        wood2(k3, n, m);\n                    }\n                }\n                if(m<=k5&&m>=k4)\n                {\n                    System.out.println(\"No\");\n                }\n            }\n        }\n        public static void wood1(long k1, long n, double m)\n        {\n            long k2, k3;\n            k1--;\n            if (n == 2)\n            {\n                if (m == 2)\n                {\n                    System.out.println(\"No\");\n                }\n                else\n                {\n                    System.out.println(\"Yes\");\n                }\n            }\n            else\n            {\n                k2 = (k1 / 3) + 1;\n                k3 = (k1 * 2) / 3;\n                if (m < k2)\n                {\n                    k1 = k2;\n                    n--;\n                    \n                    wood1(k1, n, m);\n                }\n                if (m > k3)\n                {\n                    n--;\n                   \n                    wood2(k3, n, m);\n\n                }\n                if(m>=k2&&m<=k3)\n                {\n                    System.out.println(\"No\");\n                }\n                \n            }\n        }\n    public static  void asli(long n,double m)\n    {\n                   \n          \n                long k1 = 1, k2, k3;\n                if (n == 1)\n                {\n                    if (m == 2)\n                        System.out.println(\"No\");\n                    else\n                        System.out.println(\"Yes\");\n                }\n                for (int i = 0; i < n; i++)\n                {\n                    k1 *= 3;\n                }\n                k1 = k1 / 3;\n                k2 = k1 * 2;\n                k1++;\n                n++;\n                if (m < k1)\n                {\n                    n--;\n\n                    wood1(k1, n, m);\n                }\n\n\n                if (m > k2)\n                {\n                    n--;\n                    k3 = k2;\n\n                    wood2(k3, n, m);\n                }\n                if (m >= k1 && m <= k2)\n                {\n                    System.out.println(\"No\");\n                } \n    }\n    \n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] arqs) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tlong k = 0;\n\t\tlong n = 0;\n\t\tlong power = 1;\n\t\tlong k1 = 0;\n\t\twhile (true) {\n\t\t\tk = scan.nextLong();\n\t\t\tn = scan.nextLong();\n\t\t\tpower = 1;\n\t\t\tif (k == 0 && n == 0)\n\t\t\t\tbreak;\n\t\t\telse {\n\t\t\t\tk1 = k;\n\t\t\t\twhile(k1>0){\n\t\t\t\t\tpower = power*3;\n\t\t\t\t\tk1--;\n\t\t\t\t}\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (k == 0) {\n\t\t\t\t\t\tSystem.out.println(\"Yes\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tpower = power/3;\n\t\t\t\t\tif (n <= power)\n\t\t\t\t\t\tk--;\n\t\t\t\t\telse if (n > 2 * power) {\n\t\t\t\t\t\tk--;\n\t\t\t\t\t\tn = n - 2 * power;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1009_76__1_1009_77", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        double average = 0, sum = 0;\n        for (int i = 0; i < 12; i++) {\n            sum += in.nextDouble();\n        }\n        average = (sum / 12);\n        if ((long) average == average) {\n             System.out.println(\"$\" + (long)average + \".00\");\n        } else {\n            average = (long)(average * 100);\n            System.out.println(\"$\" + (double)(average / 100));\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while (input.hasNext()) {\n            float inputValue = 0;\n            for (int i = 0; i < 12; i++)\n                inputValue += input.nextFloat();\n            System.out.printf(\"$%.2f\\n\", ((float) inputValue / 12));\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1320_18__1_2758_1", "golden_code": "import java.util.Arrays;\nimport java.util.Scanner;\nimport java.util.TreeSet;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        for (int o=0;;) {\n            TreeSet<Integer> pattern = new TreeSet<Integer>();\n            for (int i = 0; i < 5; i++) {\n                String str = s.next();\n                for (int j = 0; j < 5; j++) {\n                    if(str.charAt(j) == 'X'){\n                        pattern.add(i*5+j);\n                    }\n                }\n            }\n            int n = s.nextInt();\n            if(n == 0)\n                break;\n            if(o++ > 0)\n                System.out.println();\n            int[][] nums = new int[n][pattern.size()];\n            for(int i=0;i<n;i++){\n                int counter=0;\n                for(int j=0;j<25;j++){\n                    int tmp = s.nextInt();\n                    if(pattern.contains(j)){\n                        nums[i][counter++] = tmp;\n                    }\n                }\n                Arrays.sort(nums[i]);\n            }\n            System.out.println(\"Game \"+o);\n            for(int i=0;i<n;i++){\n                for(int j=0;j<i;j++){\n                    if(Arrays.equals(nums[i], nums[j])){\n                        System.out.println(\"Card \"+(i+1)+\" is equivalent to card \"+(j+1));\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}", "generated_code": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\n/**\n *\n * @author Master\n */\npublic class Main {\n\n    static List <Integer> primes;\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        primes=new ArrayList<Integer>();\n        boolean []nums=new boolean[1000002];\n        int []facts=new int[1000002];\n        Scanner sc=new Scanner(System.in);\n        primes.add(2);\n        primes.add(3);\n        calc();\n        for(int i=0;i<facts.length;i++){\n            facts[i]=factsCount(i);\n        }\n        while(sc.hasNext()){\n            int n=sc.nextInt();\n            long out=0;\n            for(int i=1;i<n;i++){\n                out+=(n-i)*facts[i];\n            }\n            System.out.printf(\"%d\\n\",out%(1000000007));\n        }\n    }\n    private static int factsCount(int n)\n    {\n        int initial_n = n;\n        int factors = 1;\n\n        for (int i = 0; primes.get(i) * primes.get(i) <= n; ++i)\n        {\n            int power = 0;\n            while (initial_n % primes.get(i) == 0)\n            {\n                initial_n /= primes.get(i);\n                ++power;\n            }\n            factors *= power + 1;\n        }\n\n        if (initial_n > 1)\n        {\n            factors *= 2;\n        }\n\n        return factors;\n    }\n    private static void calc()\n    {\n        boolean [] pr = new boolean[1100];\n\n        for (int i = 2; i < 1100; ++i) // primes up to 2000 (only need up to sqrt of 1 000 000 actually)\n        {\n            if (!pr[i])\n            {\n                primes.add(i);\n                for (int j = i; j < 1100; j += i)\n                    pr[j] = true;\n            }\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_375__1_1001_76", "golden_code": "\nimport java.util.Scanner;\n\n\npublic class Main {\n\n    \n    public static void main(String[] args) {\n        Scanner x=new Scanner(System.in);\n        while(x.hasNext()){\n            int a=x.nextInt();\n            int b=x.nextInt();\n            System.out.println(a+b);\n        }\n    }\n\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile (in.hasNextInt()) {\n\t\t\tint a = in.nextInt();\n\t\t\tint b = in.nextInt();\n\t\t\tSystem.out.println(a + b);\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_410__1_1001_470", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "generated_code": "import java.util.Scanner;\n \npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt() + cin.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_414__1_1001_290", "golden_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main (String[] args){\n\tScanner input = new Scanner (System.in) ;\n        while (input.hasNextLine()){\n        String[]s=input.nextLine().split(\" \");\n\tint a,b,sum;\n\ta=Integer.parseInt(s[0]);\n\tb=Integer.parseInt(s[1]);\n\tsum= a+b;\n\tSystem.out.println(sum);\n\t}\n\t}\n}", "generated_code": "import java.util.Scanner;public class Main {public static void main(String[] args){Scanner c=new Scanner(System.in);while(c.hasNext())System.out.println(c.nextInt()+c.nextInt());}}", "score": 1.0}
{"id": "SHARE_1_1001_475__1_1001_42", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        while(input.hasNextLine()){\n        \tString[] S=input.nextLine().split(\" \");\n        \tint a=Integer.parseInt(S[0]);\n        \tint b=Integer.parseInt(S[1]);\n        \tSystem.out.println(a+b);\n        }\n    }\n}", "generated_code": "import java.util.*;\nclass Main {\n\tpublic static void main(String args[]){\n\t\tScanner A = new Scanner(System.in);\n\t\twhile(A.hasNextInt()){\n\t\t\tint a = A.nextInt();\n\t\t\tint b = A.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1502_14__1_1502_6", "golden_code": "import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner s=new Scanner(System.in);\n        HashMap map=new HashMap();\n        ArrayList<Integer> list=new ArrayList<Integer>();\n        for (int i = 3; i < 33000; i+=2) {\n            if(isPrime(i)){\n                map.put(i, i);\n                list.add(i);\n            }\n        }\n        while(true){\n            int x=s.nextInt();\n            if(x==0){\n                break;\n            }\n            if(x==4){\n                System.out.println(\"1\");\n                continue;\n            }\n            int answer=0;\n            for (int i = 0; list.get(i) <= x/2; i++) {\n                if(map.containsKey(x-list.get(i)) && map.containsKey(list.get(i))){\n                    answer++;\n                }\n            }\n            System.out.println(answer);\n        }\n    }\n    static boolean isPrime(int n) {\n        for(int i=3;i*i<=n;i+=2) {\n            if(n%i==0)\n                return false;\n        }\n        return true;\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    static Scanner in = new Scanner(System.in);\n    static boolean prim(int a){\n        int t=0;\n            int counter=0;\n            for (int j = 2; j<a; j++) {\n                if(a%j==0){\n                    counter++;\n                    break;\n                }\n            }\n            if(counter==0)return true;\n            return false;\n        }\n    \n    public static void main(String[] args) {\n\n        while(true){\n            int r=0;\n        int n=in.nextInt();\n       // prim(n);\n        if(n==0){\n            break;\n        }\n            for (int i= 2; i <= n/2; i++) {\n                if(prim(i)&&prim(n-i)){\n                    r++;\n                }\n\n            }\n            System.out.println(r);\n        }\n\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2543_15__1_109016_14", "golden_code": "\nimport java.util.Scanner;\n\n\npublic class Main{\n    static Scanner in = new Scanner(System.in);\n    public static void main(String[] args) {\n        while(true)\n        {\n            String s=in.nextLine();\n            if(s.equals(\"*\"))\n                break;\n            s=s.toLowerCase();\n            String a[]=s.split(\" \");\n            char ch=a[0].charAt(0);\n            int counter=1;\n            for(int i=1;i<a.length;i++)\n            {\n                if(ch==a[i].charAt(0))\n                {\n                    counter++;\n                }\n                else \n                    break;\n            }\n            if(counter==a.length)\n            {\n                System.out.println(\"Y\");\n            }\n            else\n                System.out.println(\"N\");\n        }\n    }\n}\n", "generated_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\n\n\npublic class Main {\n\n\tpublic static double bruteForce (ArrayList<point> p){\n\t\tdouble d = Double.MAX_VALUE, test1 = 0;\n\t\tfor (int i = 0; i < p.size(); i++) {\n\t\t\tfor (int j = i+1; j < p.size(); j++) {\n\t\t\t\ttest1 = Math.sqrt( (p.get(i).x-p.get(j).x)*(p.get(i).x-p.get(j).x) + (p.get(i).y-p.get(j).y)*(p.get(i).y-p.get(j).y) );\n\t\t\t\tif( test1 < d )\n\t\t\t\t\td = test1;\n\t\t\t}\n\t\t}\n\t\treturn d;\n\t}\n\tpublic static double closerPair(ArrayList<point> p){\n\t\tdouble d = Double.MAX_VALUE, d1 = 0, d2 = 0;\n\t\tif ( p.size() <= 3 ) {\n\t\t\td = bruteForce(p);\n\t\t\treturn d;\n\t\t}\n\t\telse{\n\t\t\tArrayList<point> q = new ArrayList<point>();\t//sort :: y\n\t\t\tCollections.sort(p, new compareX());\n\t\t\tArrayList<point> pl = new ArrayList<point>();\n\t\t\tArrayList<point> pr = new ArrayList<point>();\n\n\t\t\tfor (int i = 0; i < (p.size()/2); i++) {\n\t\t\t\tpl.add(p.get(i));\n\t\t\t}\n\n\t\t\tfor (int j = (p.size()/2); j < p.size(); j++) {\n\t\t\t\tpr.add(p.get(j));\n\t\t\t}\n\n\t\t\td1 = closerPair(pl);\n\t\t\td2 = closerPair(pr);\n\n\t\t\tif( d1 < d2 )\n\t\t\t\td = d1;\n\t\t\telse\n\t\t\t\td = d2;\n\n\t\t\tdouble m = p.get(p.size()/2).x;\n\t\t\tfor (int i = (p.size()/2)-1 ; i>=0 ; i-- ) {\n\t\t\t\tif( m-d <= p.get(i).x ){\n\t\t\t\t\tq.add(p.get(i));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tfor (int i = p.size()/2 ; i<p.size() ; i++ ) {\n\t\t\t\tif( m+d >= p.get(i).x ){\n\t\t\t\t\tq.add(p.get(i));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tCollections.sort(q, new compareY());\n\t\t\tfor (int i = 0; i < q.size(); i++) {\n\t\t\t\tfor (int j = i+1; j < q.size() && j<i+7 ; j++) {\n\t\t\t\t\tdouble test = Math.sqrt( ((q.get(i).y-q.get(j).y)*(q.get(i).y-q.get(j).y) + ((q.get(i).x-q.get(j).x)*(q.get(i).x-q.get(j).x))) ) ;\n\t\t\t\t\tif( d >= test )\n\t\t\t\t\t\td = test;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn d;\n\t\t}\n\t}\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\tArrayList<point> p = new ArrayList<point>();\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tString s = \"\";\n\t\twhile(true){\n\t\t\tp.clear();\n\n\t\t\ttry {\n\t\t\t\ts = br.readLine();\n\t\t\t} catch (IOException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tint number = Integer.valueOf(s);\n\t\t\t\n\t\t\tif (number == 0)\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tfor (int i = 0; i < number; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tString a[] = br.readLine().split(\" \");\n\t\t\t\t\tdouble x = Double.valueOf(a[0]);\n\t\t\t\t\tdouble y = Double.valueOf(a[1]);\n\t\t\t\t\tpoint test = new point(x, y);\n\t\t\t\t\tp.add(test);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tdouble result = closerPair(p);\n\t\t\tSystem.out.printf(\"%.2f\\n\",result/2);\n\t\t}\n//\t\tfor (int i = 0; i < 4; i++) {\n//\t\t\tfor (int j = 4; j < 8; j++) {\n//\t\t\t\tpoint x = new point(i,j);\n//\n//\t\t\t}\n//\t\t}\n\t\t// TODO Auto-generated method stub\n\n\n\t}\n\n}\n\nclass point{\n\tpublic point(){};\n\tpublic point(double x , double y){\n\t\tthis.x=x;\n\t\tthis.y=y;\n\t}\n\n\tpublic double x;\n\tpublic double y;\n}\n\nclass compareX implements Comparator<point>{\n\n\t@Override\n\tpublic int compare(point o1, point o2) {\n\t\t// TODO Auto-generated method stub\n\t\tif( o1.x > o2.x )\n\t\t\treturn 1;\n\t\telse\n\t\t\treturn -1;\n\t}\n\n}\n\nclass compareY implements Comparator<point>{\n\n\t@Override\n\tpublic int compare(point o1, point o2) {\n\t\t// TODO Auto-generated method stub\n\t\tif( o1.y > o2.y )\n\t\t\treturn 1;\n\t\telse\n\t\t\treturn -1;\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_106017_1__1_2837_3", "golden_code": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.*;\nimport java.awt.*;\nimport java.math.*;\n\n@SuppressWarnings(\"unchecked\")\n\npublic class Main\n{\n    public static void main(String[] arqs) throws Exception\n    {\n        Scanner scan = new Scanner(System.in);\n\n        //int ca = scan.nextInt();\n\n        while (scan.hasNextInt())\n        {\n            int n = scan.nextInt();\n            int tmp = n;\n            int a = 0;\n            while (n > 0)\n            {\n                a += (n%10)*(n%10)*(n%10);\n                n /= 10;\n            }\n\n            System.out.println(a == tmp ? \"Yes\" : \"No\");\n        }\n    }\n}", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\n/**\n * Created by hamed on 12/3/2015.\n */\npublic class Main {\n\n    public static String getString(Scanner s){\n        String t;\n        while (true){\n            t = s.next();\n            if(!t.trim().isEmpty())\n                break;\n        }\n        return t;\n    }\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int max = -1;\n        int lmax = -1;\n        while (true){\n            String temp = getString(s);\n            if(temp.equals(\"GetFinal\")){\n                System.out.println(lmax);\n            }else if(temp.equals(\"END\")){\n                break;\n            }else{\n                int x = Integer.parseInt(temp);\n                if(x >= lmax && x < max){\n                    lmax = x;\n                }else if(x >= max){\n                    lmax = max;\n                    max = x;\n                }\n            }\n        }\n\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2554_47__1_2554_58", "golden_code": "\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n    private String name;\n    private boolean optional;\n    private int type; //0 -> + , 1 -> | , 2 -> ^\n    private int typeCnt; // the minimum number of sub feature for type = 0\n    private ArrayList<Main> childes;\n    public static void main(String[] args) {\n        String command;\n        Scanner scanner = new Scanner(System.in);\n        while (true){\n            command = scanner.nextLine();\n            if (command.equals(\"###\"))\n                break;\n            command = command.replaceAll(\"\\\\s+\",\"\");// cleaning the white spaces\n            String[] coffeeMachine = command.split(\"=\");\n            Main root = new Main(coffeeMachine[0]); // root of the tree\n\n            ArrayList<String[]> commands = new ArrayList<>(); // a list of all represents commands\n            commands.add(coffeeMachine);\n            while (true){//gathering all the commands in cmds\n                command = scanner.nextLine();\n                command = command.replaceAll(\"\\\\s+\",\"\");\n                if (command.equals(\"#\"))\n                    break;\n\n                String[] temp2 = command.split(\"=\");//separating the feature from its sub features\n\n                commands.add(temp2);\n            }\n            add(commands, root);//creating the graph\n\n            while (true){// validation\n                command = scanner.nextLine();\n                if (command.equals(\"##\")){\n                    System.out.println(\"+++\");\n                    break;\n                }\n                check(command, root);\n            }\n        }\n    }\n\n    private static void check(String configuration, Main root) {// validation of c\n        configuration = configuration.replaceAll(\"\\\\s+\",\"\");\n        configuration = configuration.substring(1, configuration.length() -1);//removing { } from the beginning and the end of the command\n        String[] namesArr = configuration.split(\",\");\n\n        ArrayList<String> names = new ArrayList<>(Arrays.asList(namesArr));// turning the array into arraylist\n\n        if (root.validation(names) && names.size() == 1 && names.get(0).equals(root.getName()))// check the validation of the given configuration and also check whether the only remaining feature is the root of the graph or not\n            System.out.println(\"Valid\");\n        else\n            System.out.println(\"Invalid\");\n    }\n\n    private static void add(ArrayList<String[]> representations, Main root) {// forming the tree from represents commands\n        int i = 0;\n        Main r;\n        while (representations.size() > 0){\n            r = root.search(representations.get(i)[0]);// check if the laft side of the represent command exists in the graph\n            if (r != null){\n                if (representations.get(i)[1].contains(\"+\")){// check the type of the command\n                    r.addEdge(representations.get(i)[1].split(\"\\\\+\"), 0);// seperating the sub features with \",\", and adding them to the graph\n                }\n                else if (representations.get(i)[1].contains(\"|\")){\n                    r.addEdge(representations.get(i)[1].split(\"\\\\|\"), 1);\n                }\n                else if (representations.get(i)[1].contains(\"^\")){\n                    r.addEdge(representations.get(i)[1].split(\"\\\\^\"), 2);\n                }\n                representations.remove(i);\n                i -= 1;\n            }\n            i += 1;\n            if (i >= representations.size())// check whether the commands are over or not\n                i = 0;\n        }\n    }\n\n\n    public Main(String name) {\n        if (name.charAt(0) == '?') {\n            this.optional = true;\n            name = name.substring(1);//removing the ? from the name\n        }\n        this.name = name;\n        childes = new ArrayList<>();\n    }\n\n    public boolean validation(ArrayList<String> names) {\n        //DFS implementation of validation\n        if (childes.size() == 0)// if this node does not have any child return true\n            return true;\n\n        boolean[] visit = new boolean[childes.size()]; // which one of the children are visited\n\n        int nVisited = 0; // the number of visited children\n        for (int i = 0; i < childes.size(); i++) {\n            for (int j = 0; j < names.size(); j++) {\n                if (childes.get(i).getName().equals(names.get(j))){ // searching for every child\n                    names.remove(j);\n                    visit[i] = true;\n                    if(!childes.get(i).isOptional()) // does not count optional children\n                        nVisited += 1;\n                    break;\n                }\n            }\n        }\n\n        if (this.type == 0 && nVisited == typeCnt || this.type == 1 && nVisited > 0 || this.type == 2 && nVisited == 1){ // type = 0 -> it must visit all the mandatory children, type = 0 -> it must visit at least one children, type = 2 -> it must visit exactly one child\n            for (int i = 0; i < childes.size(); i++) {\n                if (visit[i] && !childes.get(i).validation(names))// if this child is visited, validate its sub features.\n                    return false;\n            }\n            return true;//if every child is valid then return true = valid\n        }\n        return false;\n    }\n\n    public Main search(String name){\n        // find the node with given name and return it recursively\n        if (this.name.equals(name)) {\n            return this;\n        }\n        for (Main child: this.childes) {\n            Main m = child.search(name);\n            if (m != null)\n                return m;\n        }\n        return null;\n    }\n\n    public void addEdge(String[] children, int type) {\n        // add given children and set the type\n        typeCnt = 0;\n        this.type = type;\n        for (String s : children) {\n            Main temp = new Main(s);\n            this.childes.add(temp);\n            if (s.charAt(0) != '?')// it only count mandatory children\n                typeCnt += 1;\n        }\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public boolean isOptional() {\n        return optional;\n    }\n}", "generated_code": "import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Scanner;\n\npublic class Main {\n    public static class string_graph{\n        String node_string;\n        ArrayList<string_graph> child_strings = new ArrayList<>();\n        String nodeType;\n        boolean is_root = true;\n        String father_string = \"$\";\n        boolean optional = false;\n        public void add_child(string_graph child){\n            child.is_root = false;\n            child.father_string = this.node_string;\n            child_strings.add(child);\n        }\n\n        public void setMandatory(){\n            this.optional = false;\n        }\n        public void setOptional(){\n            this.optional = true;\n        }\n\n        public string_graph(String node_string, String node_type){\n            this.node_string = node_string;\n            this.nodeType = node_type;\n        }\n\n        public string_graph(String node_string){\n            this(node_string,\"$\");\n        }\n\n\n\n\n        public Node generateConvertedGraph(){\n            Node response;\n            if (child_strings.size() == 0){\n                return new LeafNode(node_string,optional);\n            }\n            if (nodeType.equals(\"+\")){\n                response = new SumNode(node_string,optional);\n\n            }\n            else if (nodeType.equals(\"^\")){\n                response = new XorNode(node_string,optional);\n            }\n            else{\n                response = new OrNode(node_string,optional);\n            }\n\n            for (int i = 0 ; i < child_strings.size() ; i ++){\n                response.add_child(child_strings.get(i).generateConvertedGraph());\n            }\n\n            return  response;\n        }\n\n        public void setNodeType(String type) {\n            this.nodeType = type;\n\n        }\n\n        public void print() {\n\n            System.out.println(String.format(\"currently at node : %s with sign : %s with father string : %s\", node_string, nodeType , father_string));\n            if (optional){\n                System.out.println(\"and this node is optional ! hooray\");\n            }\n            for (int i = 0 ; i < child_strings.size() ; i ++){\n                child_strings.get(i).print();\n            }\n        }\n    }\n    public static abstract  class Node{\n        protected  String node_string;\n        ArrayList<Node> child_nodes = new ArrayList<>();\n        boolean optional = false;\n        public boolean is_valid(){\n            if (this.is_present_in_sample && father_node != null && !father_node.is_present_in_sample)\n                return false;\n            return true;\n        }\n        boolean is_present_in_sample = false;\n\n        Node father_node = null;\n\n        public void add_child(Node child){\n            child_nodes.add(child);\n            child.father_node = this;\n\n        }\n\n        public void markFalse(){\n            is_present_in_sample = false;\n            for (int i = 0 ; i < child_nodes.size() ; i ++){\n                child_nodes.get(i).markFalse();\n            }\n        }\n\n        public void markTrue(String[] node_strings) {\n            for (int i = 0 ; i < node_strings.length ; i ++){\n                if (node_strings[i].equals(node_string)){\n                    is_present_in_sample = true;\n                    break;\n                }\n            }\n\n            for (int i = 0 ; i < child_nodes.size() ; i ++){\n                child_nodes.get(i).markTrue(node_strings);\n            }\n        }\n    }\n\n    public static class SumNode extends Node{\n        public SumNode(String value, boolean optional){\n            node_string = value;\n            this.optional = optional;\n        }\n        @Override\n        public boolean is_valid() {\n            boolean response = true;\n            for (int i = 0 ; i < child_nodes.size() ; i ++){\n                if (is_present_in_sample && !child_nodes.get(i).is_present_in_sample){\n                    if (!child_nodes.get(i).optional){\n                        return false;\n                    }\n                }\n                response &= child_nodes.get(i).is_valid();\n            }\n            return response & super.is_valid();\n        }\n    }\n\n    public static class XorNode extends Node{\n        public XorNode(String value, boolean optional){\n            node_string = value;\n            this.optional = optional;\n        }\n        @Override\n        public boolean is_valid() {\n            int counter = 0;\n            boolean response = true;\n            for (int i = 0 ; i < child_nodes.size() ; i ++){\n                if (child_nodes.get(i).is_present_in_sample){\n                    counter += 1;\n                }\n                response &= child_nodes.get(i).is_valid();\n            }\n            return response & (counter == 1 || !is_present_in_sample) & super.is_valid();\n        }\n    }\n\n    public static class OrNode extends  Node{\n        public OrNode(String value, boolean optional){\n            node_string = value;\n            this.optional = optional;\n        }\n        @Override\n        public boolean is_valid() {\n            int counter = 0;\n            boolean response = true;\n            for (int i = 0 ; i < child_nodes.size() ; i ++){\n                if (child_nodes.get(i).is_present_in_sample){\n                    counter += 1;\n                }\n                response &= child_nodes.get(i).is_valid();\n            }\n            return response & (counter >= 1 || !is_present_in_sample) & super.is_valid();\n        }\n    }\n\n    public static class LeafNode extends Node{\n        public LeafNode(String value, boolean optional){\n            node_string = value;\n            this.optional = optional;\n        }\n        @Override\n        public boolean is_valid() {\n            return super.is_valid();\n        }\n    }\n\n    public static HashMap<String,string_graph> string_node_container = new HashMap<>();\n\n    public static void clear_graph(){\n        string_node_container.clear();\n    }\n\n\n    public static string_graph get_string_node(String node_string, String type){\n        if (!string_node_container.containsKey(node_string)){\n            string_graph root = new string_graph(node_string, type);\n            string_node_container.put(node_string, root);\n        }\n        else{\n            string_node_container.get(node_string).setNodeType(type);\n        }\n        return string_node_container.get(node_string);\n    }\n\n    public static void add_child_strings(string_graph root , String child_strings[]){\n        for (int i = 0 ; i < child_strings.length ; i ++){\n\n            boolean optional = false;\n            if (child_strings[i].contains(\"?\")){\n                child_strings[i] = child_strings[i].substring(1);\n                optional = true;\n            }\n\n            if (!string_node_container.containsKey(child_strings[i])){\n                string_graph new_node = new string_graph(child_strings[i]);\n                if (optional) {\n                    new_node.setOptional();\n                }\n                else{\n                    new_node.setMandatory();\n                }\n                string_node_container.put(child_strings[i], new_node);\n                root.add_child(new_node);\n            }\n            else{\n                if (optional){\n                    string_node_container.get(child_strings[i]).setOptional();\n                }\n                else {\n                    string_node_container.get(child_strings[i]).setMandatory();\n                }\n                root.add_child(string_node_container.get(child_strings[i]));\n            }\n        }\n    }\n    public static void print_graph(){\n        System.out.println(\"printing string graph\");\n        string_graph root = get_rootOf_string_graph();\n        root.print();\n    }\n    public static string_graph get_rootOf_string_graph(){\n        for (String key : string_node_container.keySet()){\n            if (string_node_container.get(key).is_root){\n                return string_node_container.get(key);\n            }\n        }\n//        System.out.println(\"oops\");\n//        System.exit(0);\n        return null;\n    }\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        String state = \"build\";\n        Node converted_graph = null;\n        while (true)\n        {\n            String next_line = input.nextLine();\n\n            if (next_line.contains(\"###\")){\n                break;\n            }\n            else if (next_line.contains(\"##\")){\n                clear_graph();\n                System.out.println(\"+++\");\n                state = \"build\";\n            }\n            else if (next_line.contains(\"#\")){\n                state = \"query\";\n                converted_graph = get_rootOf_string_graph().generateConvertedGraph();\n//                print_graph();\n            }\n            else{\n                next_line = next_line.replace(\" \",\"\");\n\n\n                if (state.equals(\"build\")){\n\n                    String splited_array[] = next_line.split(\"=\");\n                    String fa = splited_array[0];\n                    String children = splited_array[1];\n\n                    string_graph fa_string_node ;\n                    if (children.contains(\"+\")){\n\n                        fa_string_node = get_string_node(fa,\"+\");\n                        String children_split[] = children.split(\"\\\\+\");\n                        add_child_strings(fa_string_node,children_split);\n                    }\n                    else if (children.contains(\"|\")){\n                        fa_string_node = get_string_node(fa,\"|\");\n                        String children_split[] = children.split(\"\\\\|\");\n                        add_child_strings(fa_string_node,children_split);\n                    }\n                    else{ // ^\n                        fa_string_node = get_string_node(fa,\"^\");\n                        String children_split[] = children.split(\"\\\\^\");\n                        add_child_strings(fa_string_node,children_split);\n                    }\n\n                }\n\n                else{\n\n                    if (converted_graph == null){\n//                        System.out.println(\"oops\");\n//                        System.exit(0);\n                    }\n                    String splited_array[] = next_line.substring(1,next_line.length() - 1).split(\",\");\n                    converted_graph.markFalse();\n                    converted_graph.markTrue(splited_array);\n\n\n                    boolean validation_result = converted_graph.is_valid();\n                    validation_result &= converted_graph.is_present_in_sample;\n\n                    if (validation_result){\n                        System.out.println(\"Valid\");\n                    }\n                    else{\n                        System.out.println(\"Invalid\");\n                    }\n\n                }\n            }\n\n        }\n\n    }\n}\n\n", "score": 1.0}
{"id": "SHARE_1_2610_2__1_1022_8", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner inp = new Scanner(System.in);\n\t\tint cn=inp.nextInt();\n\t\tfor (int Case = 0; Case < cn; Case++) {\n\t\t\tint d= inp.nextInt();\n\t\t\tint n=inp.nextInt();\n\t\t\tint sum = 0;\n\t\t\tint newSum = 0;\n\t\t\tint [] guys = new int [d];\n\t\t\tlong ans=0;\n\t\t\tguys[0]++;\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tint x=inp.nextInt();\n\t\t\t\tnewSum =((i>0)?sum:0)+x;\n\t\t\t\tnewSum %= d;\n\t\t\t\tguys[newSum]++;\n\t\t\t\tsum = newSum;\n\t\t\t}\n\t\t\tfor(int i=0;i<d;i++){\n\t\t\t\tif(guys[i]<2)continue;\n\t\t\t\tlong s=guys[i];\n\t\t\t\tans+=(s*(s-1))/2;\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.util.LinkedList;\nimport java.util.Scanner;\nimport java.util.Stack;\n\n\npublic class Main {\n\tpublic static void main (String args[]){\n\t\tScanner in = new Scanner(System.in);\n\t\tint tc = in.nextInt();\n\t\tfor(int ttt = 0 ; ttt<tc ; ttt++){\n\t\t\t String cmnd = in.next();\n\t\t\t \n\t\t\t Stack backS = new Stack();\n\t\t\t Stack forwS = new Stack();\n\t\t\t backS.add(\"http://www.acm.org/\");\n\t\t\t while(!cmnd.equals(\"QUIT\")){\n\t\t\t\t boolean flag = false;\n\t\t\t if(cmnd.equals(\"VISIT\")){\n\t\t\t\t backS.add(in.next());\n\t\t\t\t forwS.clear();\n\t\t\t }else if(cmnd.equals(\"BACK\")){\n\t\t\t\t if(backS.size()>1){\n\t\t\t\t\t forwS.add(backS.pop());\n\t\t\t\t } else {\n\t\t\t\t\t System.out.println(\"Ignored\");\n\t\t\t\t\t flag = true;\n\t\t\t\t }\n\t\t\t }\n\t\t\t else if(cmnd.equals(\"FORWARD\")){\n\t\t\t\t if(!forwS.isEmpty()){\n\t\t\t\t\t backS.add(forwS.pop());\n\t\t\t\t }\n\t\t\t\t else {\n\t\t\t\t\t System.out.println(\"Ignored\");\n\t\t\t\t\t flag = true;\n\t\t\t\t }\n\t\t\t }\n//\t\t\t else if(cmnd.equals(\"QUIT\")){\n//\t\t\t\t continue;\n//\t\t\t }\n\t\t\t if(!flag)\n\t\t\t\t System.out.println(backS.peek());\n\t\t\t cmnd = in.next();\n\t\t\t }\n\t\t\t if(ttt!= tc-1)\n\t\t\t System.out.println();\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_2500_12__1_2539_17", "golden_code": "\nimport java.util.*;\n\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin=new Scanner(System.in);\n\tAA:while(true){\n            int a;\n            double n;\n            a=cin.nextInt();\n            n=cin.nextDouble();\n            if(a==0&&n==0)\n                break;\n            double x=Math.pow(3.0,a);\n            while(x>1){\n                x/=3;\n                if(n>x&&n<=2*x){\n                    System.out.println(\"No\");\n                    continue AA;\n                }\n                if(n>2*x)\n                    n-=2*x;\n            }\n            if(n==1||n==3)\n                System.out.println(\"Yes\");\n\t}\n    }\n}\n", "generated_code": "import java.util.Scanner;\nimport java.util.TreeSet;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        int b = s.nextInt();\n        while(n != 0 && b != 0){\n            int[] nums = new int[b];\n            for(int i=0;i<b;i++){\n                nums[i] = s.nextInt();\n            }\n            TreeSet<Integer> set = new TreeSet<Integer>();\n            for(int i=0;i<b;i++){\n                for(int j=0;j<b;j++){\n                    set.add(Math.abs(nums[i]-nums[j]));\n                }\n            }\n            if(set.size() == n+1)\n                System.out.println(\"Y\");\n            else\n                System.out.println(\"N\");\n            n = s.nextInt();\n            b = s.nextInt();\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_366__1_1001_112", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);   \n        while(input.hasNext()){\n            System.out.println(input.nextInt() + input.nextInt());\n        }\n\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner cin=new Scanner(System.in);\n        int a,b;\n        while(cin.hasNext()){\n        a=cin.nextInt();\n        b=cin.nextInt();\n            System.out.println(a+b);\n        }\n    }\n\n}\n", "score": 1.0}
{"id": "SHARE_1_2202_0__1_106023_27", "golden_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\n\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\t\n\t\tScanner s = new Scanner(System.in);\n\t\t\n\t\twhile (true) {\n\t\t\t\n\t\t\n\t\tString str = s.nextLine();\n\t\tif (str.equalsIgnoreCase(\".\")) {\n\t\t\tbreak;\n\t\t}\n\t\tint sum ;\n\t\tfor (int i = 0; i <(str.length()/2) ; i++) {\n\t\t\t sum = 0; \n\t\t\t int  p;\n\t\t\t String sub = str.substring(0, i+1);\n\t\t\t if(str.length()%sub.length()!=0){\n\t\t\t\t continue;\n\t\t\t }\n\t\t\t p = str.indexOf(sub,0);\n\t\t\t boolean bool = false;\n\t\t\t if (p>=0) {\n\t\t\t\t sum++;\n\t\t\t\t for (int j =sub.length(); j < str.length()-sub.length()+1; j+=sub.length()) {\n\t\t\t\t\tp=str.indexOf(sub,j);\n\t\t\t\t\tString x = str.substring(j,j+sub.length());\n\t\t\t\t\tif (x.equals(sub)) {\n\t\t\t\t\t\tsum++;\n\t\t\t\t\t\tbool = true;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}else {\n\t\t\t\t\t\tbool = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t }\n\t\t\t if (bool) {\n\t\t\t\tSystem.out.println(sum);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t}else {\n\t\t\t\tif (i==(str.length()/2)-1) {\n\t\t\t\t\tSystem.out.println(\"1\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t \n\t\t\t \n\t\t\t\t\t\n\t\t}\n\t\t\n\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t}\n\t}\n\t\n\t\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        while(true){\n            int b = in.nextInt();\n            int n = in.nextInt();\n            if(b==0 && n==0) break;\n            double m ,temp=0 ;\n            int a;\n            for(int i=1; ;i++){\n                m = Math.pow(i, n);\n                if(m>=b){\n                    if(b-temp<m-b)\n                        a=i-1;\n                    else\n                        a=i;\n                    break;\n                }\n                temp = m;\n            }\n            System.out.println(a);\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_2806_17__1_2175_45", "golden_code": "import java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint t = scanner.nextInt();\n\t\tfor (int i = 0; i < t; i++) {\n\t\t\tint n = scanner.nextInt();\n\t\t\tdouble sum = 0;\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tsum += scanner.nextInt();\n\t\t\t}\n\t\t\tdouble avg = sum / n;\n\t\t\n\t\t\tdouble count = n;\n\t\t\tfor (int j = 2; j <= n; j++) {\n\t\t\t\tdouble s = tarkib(j, n) * fact(j);\n\t\t\t\tcount += s;\n\t\t\t\tsum +=s * (avg * j);\n\t\t\t}\n\t\t\n\t\t\tSystem.out.println(new DecimalFormat(\"0.000000\").format(sum / count));\n\t\t}\n\t}\n\n\tprivate static long tarkib(int r, int n) {\n\t\treturn fact(n) / (fact(n - r) * fact(r));\n\t}\n\n\tprivate static long fact(long t) {\n\t\tlong f = 1;\n\t\tfor (int i = 2; i <= t; i++)\n\t\t\tf *= i;\n\t\treturn f;\n\t}\n}\n", "generated_code": "import java.util.*;\npublic class Main {\n\tpublic static void main(String [] args){\n\t\tScanner input=new Scanner(System.in);\n\t\t\n\t\tint[] numInRange;\n\t\twhile(input.hasNext()){\n\n\t\t\tint n=input.nextInt();\n\t\t\tnumInRange=new int[n];\n\t\t\tint a,b;\n\t\t\tboolean isJolly=true;\n\t\t\ta=input.nextInt();\n\t\t\tfor(int i=1;i<n;i++){\n\t\t\t\t\n\t\t\t\tb=input.nextInt();\n\t\t\t\tif(Math.abs(a-b)>=n)\n\t\t\t\t\tisJolly=false;\n\t\t\t\telse\n\t\t\t\t\tnumInRange[Math.abs(a-b)]++;\n\t\t\t\ta=b;\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i=1;i<n && isJolly;i++){\n\t\t\t\tif(numInRange[i]>1)\n\t\t\t\t\tisJolly=false;\n\t\t\t}\n\t\t\tif(isJolly)\n\t\t\t\tSystem.out.println(\"Jolly\");\n\t\t\telse \n\t\t\t\tSystem.out.println(\"Not jolly\");\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2747_43__1_1003_33", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tstatic double[] array;\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner scanner = new Scanner(System.in);\n\n\t\tint t = scanner.nextInt();\n\t\tfor (int tI = 0; tI < t; tI++) {\n\t\t\tString s = scanner.next();\n\t\t\tboolean[] cat = new boolean[] { false, false, false, false };\n\t\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\t\tchar c = s.charAt(i);\n\t\t\t\tif (c == '!' || c == '@' || c == '#' || c == '$' || c == '%' || c == '^' || c == '&' || c == '*' || c == '(' || c == ')')\n\t\t\t\t\tcat[3] = true;\n\t\t\t\tif (Character.isUpperCase(c))\n\t\t\t\t\tcat[0] = true;\n\t\t\t\tif (Character.isLowerCase(c))\n\t\t\t\t\tcat[1] = true;\n\t\t\t\tif (Character.isDigit(c))\n\t\t\t\t\tcat[2] = true;\n\n\t\t\t}\n\t\t\tint d = 0;\n\t\t\tfor (int i = 0; i < 4; i++)\n\t\t\t\tif (cat[i] == true)\n\t\t\t\t\td++;\n\t\t\tswitch (d) {\n\t\t\tcase 1:\n\t\t\t\tSystem.out.println(\"very bad\");\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tSystem.out.println(\"bad\");\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tSystem.out.println(\"good\");\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tSystem.out.println(\"overkill\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t}\n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Scanner;\n\npublic class Main {\n\n   public static void main(String[] args) {\n      Scanner in = new Scanner(System.in);\n      int a = in.nextInt(), b = in.nextInt(), c = in.nextInt();\n      while (a != 0 && b != 0 && c != 0) {\n         String s = in.next();\n         ArrayList<Character> d = new ArrayList<Character>();\n         ArrayList<Integer> aa = new ArrayList<Integer>();\n         ArrayList<Integer> bb = new ArrayList<Integer>();\n         ArrayList<Integer> cc = new ArrayList<Integer>();\n         for (int i = 0; i < s.length(); i++) {\n            if (ind(s.charAt(i)) == 1) {\n               aa.add(i);\n               d.add('a');\n            } else if (ind(s.charAt(i)) == 2) {\n               bb.add(i);\n               d.add('b');\n            } else {\n               cc.add(i);\n               d.add('c');\n            }\n         }\n         Collections.rotate(aa, a);\n         Collections.rotate(bb, b);\n         Collections.rotate(cc, c);\n         String r = \"\";\n         int x = 0, y = 0, z = 0;\n         for (char i : d) {\n            if (i == 'a') {\n               r += s.charAt(aa.get(x));\n               x++;\n            } else if (i == 'b') {\n               r += s.charAt(bb.get(y));\n               y++;\n            } else {\n               r += s.charAt(cc.get(z));\n               z++;\n            }\n         }\n         System.out.println(r);\n         a = in.nextInt();\n         b = in.nextInt();\n         c = in.nextInt();\n      }\n   }\n\n   public static byte ind(char c) {\n      String s = String.valueOf(c);\n      if (\"abcdefghi\".contains(s)) {\n         return 1;\n      } else if (\"jklmnopqr\".contains(s)) {\n         return 2;\n      } else {\n         return 3;\n      }\n   }\n}", "score": 0.0}
{"id": "SHARE_1_2554_73__1_2554_24", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\nimport java.util.StringTokenizer;\n\nclass Object {\n\t\n\tString nameOfObject = \"\";\n\tboolean apply = false ;\n\tObject father ;\n\tArrayList<Object> ChildAddress = new ArrayList<>();\n\t// type 1 = OR, type 2 = XOR, ,type 3 = Mandatory or Optional\n\tint typeOfObject = 0;\n\t\n\tObject(String nameOfCh){\n\t\tnameOfObject = nameOfCh;\n\t}\n\t\n\tvoid setType(int type) {\n\t\ttypeOfObject = type; \n\t}\n\t\n\tvoid setApply(boolean a) {\n\t\t//False = Mandatory , True = Optional\n\t\tapply = a;\n\t}\n\t\n\tvoid setFather(Object nfather) {\n\t\tfather = nfather;\n\t}\n\t\n\tvoid addChild(Object Child) {\n\t\tChildAddress.add(Child);\n\t}\n}\n\n\npublic class Main {\n\t\n\tpublic static ArrayList<Object> objectsList = new ArrayList<>();\n\t\t\n\tpublic static String findName(String input) {\n\t\tString nameOfRoot = \"\";\n\t\tfor(int i = 0 ; i < input.length() ; i++) {\n\t\t\tif(input.charAt(i) == '=') {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnameOfRoot +=input.charAt(i);\n\t\t}\n\t\treturn nameOfRoot;\n\t}\n\t\n\tpublic static void buildChild(String input, Object father) {\n\t\t\n\t\tString limiter = \"\" ;\n\t\t\n\t\t///////////////////////////Find Type of Father\n\t\tif(input.contains(\"+\")) {\n\t\t\tlimiter = \"+\" ;\n\t\t\tfather.setType(3);\n\t\t} else if (input.contains(\"|\")) {\n\t\t\tlimiter = \"|\" ;\n\t\t\tfather.setType(1);\n\t\t} else if (input.contains(\"^\")) {\n\t\t\tlimiter = \"^\" ;\n\t\t\tfather.setType(2);\n\t\t} else if(!input.contains(\"+\") && !input.contains(\"|\") && !input.contains(\"^\")) {\n\t\t\tfather.setType(3);\n\t\t\tlimiter = \"+\" ;\n\t\t}\n\t\t\n\t\t/////////////////////////////////////////////////////////////////////////////////\n\t\tStringTokenizer stringTokenizer = new StringTokenizer(input, limiter , false);\n\t\t/////////////////////////////////////////////////////////////////////////////////\n\t\t\n\t\twhile(stringTokenizer.hasMoreTokens()) {\n\t\t\t\n\t\t\tString token = stringTokenizer.nextToken();\n\t\t\t\n\t\t\tboolean setApply = false;\n\t\t\tif(token.startsWith(\"?\")) {\n\t\t\t\tsetApply = true;\n\t\t\t\ttoken = token.substring(1 , token.length());\n\t\t\t}\n\t\t\t//////Check ObjectsList( Goni)\n\t\t\tint index = 0 ;\n\t\t\tboolean find = false ;\n\t\t\tfor(int i = 0 ; i < objectsList.size() ; i++) {\n\t\t\t\tif(objectsList.get(i).nameOfObject.equals(token)) {\n\t\t\t\t\tfind = true ;\n\t\t\t\t\tindex = i ;\n\t\t\t\t\tbreak ;\n\t\t\t\t}\n\t\t\t}\n\t\t\t///////////////////////////////\n\t\t\tif(find) {\n\t\t\t\tObject child = objectsList.get(index);\n\t\t\t\tfather.addChild(child);\n\t\t\t\tchild.setFather(father);\n\t\t\t\tobjectsList.get(index).setApply(setApply);\n\t\t\t} else {\n\t\t\t\tObject child = new Object(token); \n\t\t\t\tobjectsList.add(child);\n\t\t\t\tfather.addChild(child);\n\t\t\t\tchild.setFather(father);\n\t\t\t\tchild.setApply(setApply);\n\t\t\t}\n\t\t}\n\t}\t\n\t\n\tpublic static boolean checkTestCase(ArrayList<String> testCase) {\n\t\tString coffeeMachine = \"\" ;\n\t\tfor(int i = 0 ; i < objectsList.size() ; i++) {\n\t\t\tif(objectsList.get(i).father == null) {\n\t\t\t\tcoffeeMachine = objectsList.get(i).nameOfObject;\n\t\t\t\tbreak ;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(testCase.contains(coffeeMachine)) {\n\t\t\t\n\t\t\tfor(int i = 0 ; i < testCase.size() ; i++) {\n\t\t\t\t\n\t\t\t\tboolean find = false;\n\t\t\t\t\n\t\t\t\tfor(int j = 0 ; j < objectsList.size() ; j++) {\n\t\t\t\t\tif(testCase.get(i).equals(objectsList.get(j).nameOfObject)) {\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tfind = true ;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Check father\n\t\t\t\t\t\tif(!testCase.get(i).equals(coffeeMachine)) {\n\t\t\t\t\t\t\tif(!testCase.contains(objectsList.get(j).father.nameOfObject)) {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Check children\n\t\t\t\t\t\tif(objectsList.get(j).typeOfObject == 1) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tint counter = 0 ;\n\t\t\t\t\t\t\tfor(int k = 0 ; k < objectsList.get(j).ChildAddress.size() ; k++) {\n\t\t\t\t\t\t\t\tif(testCase.contains(objectsList.get(j).ChildAddress.get(k).nameOfObject)) {\n\t\t\t\t\t\t\t\t\tcounter++ ;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(counter == 0)\n\t\t\t\t\t\t\t\treturn false ;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t} else if(objectsList.get(j).typeOfObject == 2) {\n\t\t\t\t\t\t\tint counter = 0 ;\n\t\t\t\t\t\t\tfor(int k = 0 ; k < objectsList.get(j).ChildAddress.size() ; k++) {\n\t\t\t\t\t\t\t\tif(testCase.contains(objectsList.get(j).ChildAddress.get(k).nameOfObject)) {\n\t\t\t\t\t\t\t\t\tcounter++ ;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(counter != 1)\n\t\t\t\t\t\t\t\treturn false ;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t} else if(objectsList.get(j).typeOfObject == 3) {\n\t\t\t\t\t\t\tfor(int k = 0 ; k < objectsList.get(j).ChildAddress.size() ; k++) {\n\t\t\t\t\t\t\t\tif(!objectsList.get(j).ChildAddress.get(k).apply) { // age mandatory bood\n\t\t\t\t\t\t\t\t\tif(!testCase.contains(objectsList.get(j).ChildAddress.get(k).nameOfObject)) {\n\t\t\t\t\t\t\t\t\t\treturn false ;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(!find) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\treturn false ;\n\t\t}\n\t\t\n\t\treturn true ;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner scan = new Scanner(System.in);\n\t\t\n\t\tString inpoot = \"\" ;\n\t\tString nameOfObject = \"\" ;\n\t\tArrayList<String> results = new ArrayList<>();\n\n\t\tinpoot = scan.nextLine();\n\t\tinpoot = inpoot.replaceAll(\"\\\\s\",\"\");\n\t\t\n\t\twhile(!inpoot.equals(\"###\")) {\n\t\t\t//AI\n\t\t\twhile(!inpoot.equals(\"#\")) {\n\t\t\t\tnameOfObject = findName(inpoot);\n\t\t\t\t\n\t\t\t\tboolean find = false ;\n\t\t\t\tint index = 0 ;\n\t\t\t\tfor(int i = 0 ; i < objectsList.size(); i++) {\n\t\t\t\t\tif(objectsList.get(i).nameOfObject.equals(nameOfObject)) {\n\t\t\t\t\t\tfind = true ;\n\t\t\t\t\t\tindex = i ;\n\t\t\t\t\t\tbreak ;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif(inpoot.contains(\"=\")) {\n\t\t\t\t\tString right = inpoot.split(\"=\")[1];\n\t\t\t\t\t\n\t\t\t\t\tif(find) {\n\t\t\t\t\t\tbuildChild(right, objectsList.get(index));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tObject newObject = new Object(nameOfObject);\n\t\t\t\t\t\tobjectsList.add(newObject);\n\t\t\t\t\t\tbuildChild(right, newObject);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tObject newObject = new Object(nameOfObject);\n\t\t\t\t\tobjectsList.add(newObject);\n\t\t\t\t}\n\n\t\t\t\tinpoot = scan.nextLine();\n\t\t\t\tinpoot = inpoot.replaceAll(\"\\\\s\",\"\");\n\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t//ArrayList<Object> Gooni = objectsList;\n\t\t\t\n\t\t\t//TestCases\n\t\t\tinpoot = scan.nextLine();\n\t\t\tinpoot = inpoot.replaceAll(\"\\\\s\",\"\");\n\t\t\twhile(!inpoot.equals(\"##\")) {\n\t\t\t\t\n\t\t\t\t//TestCases\n\t\t\t\tArrayList<String> testCase = new ArrayList<>();\n\t\t\t\t\n\t\t\t\t//Separate ({})\n\t\t\t\tinpoot = inpoot.substring(1,inpoot.length()-1);\n\t\t\t\t\n\t\t\t\t//Separate (,)\n\t\t\t\tStringTokenizer stringTokenizer = new StringTokenizer(inpoot, \",\", false);\n\t\t\t\twhile(stringTokenizer.hasMoreTokens()) {\n\t\t\t\t\t\ttestCase.add(stringTokenizer.nextToken());\n\t\t\t\t}\n\n\t\t\t\t//CheckValidity\n\t\t\t\tboolean result = false;\n\t\t\t\tresult = checkTestCase(testCase);\n\t\t\t\t\n\t\t\t\t//result = checkTestCase(coffeeMachine, testCase);\n\t\t\t\tif(result) {\n\t\t\t\t\tresults.add(\"Valid\");\n\t\t\t\t} else {\n\t\t\t\t\tresults.add(\"Invalid\");\n\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\tinpoot = scan.nextLine();\n\t\t\t\tinpoot = inpoot.replaceAll(\"\\\\s\",\"\");\n\t\t\t}\n\t\t\t\n\t\t\tobjectsList = new ArrayList<>();\n\t\t\t\n\t\t\tresults.add(\"+++\");\n\t\t\t\n\t\t\tinpoot = scan.nextLine();\n\t\t\tinpoot = inpoot.replaceAll(\"\\\\s\",\"\");\n\t\t\t\n\t\t}\t\n\t\t\n\t\tfor(int i = 0 ; i < results.size() ; i++) {\n\t\t\tSystem.out.println(results.get(i));\n\t\t}\n\n\t\tscan.close();\n\t\treturn;\n\t}\t\n}", "generated_code": "//package com.company;\n\nimport java.util.*;\n\nclass Alt implements ChildType {\n    ChildrenType type = null;\n\n    @Override\n    public ChildrenType getType() {\n        return ChildrenType.ALT;\n    }\n\n    @Override\n    public void setType(ChildrenType childrenType) {\n        this.type = childrenType;\n    }\n\n    @Override\n    public boolean isType(TreeNode treeNode) {\n        for (int i = 0; i < treeNode.getChildren().size(); i++) {\n            if (treeNode.getChildren().get(i).getFeature().equals(\"^\"))\n                return true;\n        }\n        return false;\n    }\n}\n\n\nclass Check {\n    public static TreeNode search(TreeNode root, String feature) {\n        if (root.getFeature().equals(feature))\n            return root;\n        for (int i = 0; i < root.getChildren().size(); i++) {\n            if (root.getChildren().get(i) != null\n            && search(root.getChildren().get(i), feature) != null)\n                 return search(root.getChildren().get(i), feature);\n        }\n        return null;\n    }\n\n    public static boolean containParent (TreeNode root, List<String> testCase) {\n        for (int i = 0; i < testCase.size(); i++) {\n            TreeNode node = search(root, testCase.get(i));\n            if (node != null\n                    && node.getParent() != null\n                    && !testCase.contains(node.getParent().getFeature()))\n                return false;\n        }\n\n        return true;\n    }\n\n    public static boolean containChildrenMatchingTypeRule (TreeNode root, List<String> testCase) {\n        if (root.getParent() == null) {\n            if (!testCase.contains(root.getFeature()))\n                return false;\n        }\n        if (root.getChildrenType() == ChildrenType.MAN) {\n            for (int i = 0; i < root.getChildren().size(); i++) {\n                if (!root.getChildren().get(i).optional) {\n                    if (!testCase.contains(root.getChildren().get(i).getFeature())) {\n                        return false;\n                    }\n                    if (!containChildrenMatchingTypeRule(root.getChildren().get(i), testCase)) {\n                        return false;\n                    }\n                } else {\n                    if (testCase.contains(root.getChildren().get(i).getFeature())) {\n                        if (!containChildrenMatchingTypeRule(root.getChildren().get(i), testCase)) {\n                            return false;\n                        }\n                    }\n                }\n            }\n        } else if (root.getChildrenType() == ChildrenType.OR) {\n            boolean or = false;\n            for (int i = 0; i < root.getChildren().size(); i++) {\n                if (testCase.contains(root.getChildren().get(i).getFeature())) {\n                    or = true;\n                    if (!containChildrenMatchingTypeRule(root.getChildren().get(i), testCase)) {\n                        return false;\n                    }\n                }\n            } if (!or) return false;\n        } else if (root.getChildrenType() == ChildrenType.ALT) {\n            int count = 0;\n            for (int i = 0; i < root.getChildren().size(); i++) {\n                if (testCase.contains(root.getChildren().get(i).getFeature())) {\n                    count++;\n                    if (count > 1) return false;\n                    if (!containChildrenMatchingTypeRule(root.getChildren().get(i), testCase)) return false;\n                }\n            }\n            if (count == 0) return false;\n        }\n        return true;\n    }\n\n    static public boolean validFeature(TreeNode root, List<String> testCase) {\n        boolean thereIs = false;\n        for (String s : testCase) {\n            if (search(root, s) == null) {\n                return false;\n            }\n            thereIs = true;\n        }\n        return thereIs;\n    }\n}\n\nenum ChildrenType {\n    OR,\n    ALT,\n    MAN;\n}\n\ninterface ChildType {\n    public ChildrenType getType();\n\n    public void setType(ChildrenType childrenType);\n\n    public boolean isType(TreeNode treeNode);\n}\n\nclass InputTree {\n\n    public static void setOptional(List<List<TreeNode>> treeNodeStructure) {\n        for (List<TreeNode> treeNodes : treeNodeStructure) {\n            for (TreeNode treeNode : treeNodes) {\n                if (treeNode.getFeature().substring(0, 1).equals(\"?\")) {\n                    Parse.questionMarkRemover(treeNode);\n                    treeNode.optional = true;\n                }\n            }\n        }\n    }\n\n    public static void insertFeatures(List<List<String>> structure, List<List<TreeNode>> treeNodeStructure) {\n        for (List<String> list : structure) {\n            treeNodeStructure.add(TreeNode.toTreeNode(list));\n        }\n    }\n\n    public static void insertParents(List<List<TreeNode>> treeNodeStructure) {\n        for (List<TreeNode> treeNodes : treeNodeStructure) {\n            for (int j = 1; j < treeNodes.size(); j++) {\n                treeNodes.get(j).setParent(treeNodes.get(0));\n            }\n        }\n    }\n\n    public static void insertChildren(List<List<TreeNode>> treeNodeStructure) {\n        for (int i = 0; i < treeNodeStructure.size(); i++) {\n            TreeNode root = treeNodeStructure.get(i).get(0);\n            for (int j = 0; j < treeNodeStructure.size(); j++) {\n                for (int k = 1; k < treeNodeStructure.get(j).size(); k++) {\n                    if (treeNodeStructure.get(j).get(k).getFeature().equals(root.getFeature())) {\n                        treeNodeStructure.get(j).get(k).setChildren(root.getChildren());\n                    }\n                }\n            }\n        }\n    }\n\n    public static void insertTypes(TreeNode root) {\n        if (!root.getFeature().equals(\"+\")\n            || !root.getFeature().equals(\"=\")\n            || !root.getFeature().equals(\"|\")\n            || !root.getFeature().equals(\"^\"))\n            root.setChildrenType(TreeNode.defineType(root));\n        for (int i =0; i < root.getChildren().size(); i++){\n            if (root.getChildren().get(i) != null) {\n                insertTypes(root.getChildren().get(i));\n            }\n        }\n    }\n\n    public static void traverseAndRemove(TreeNode root) {\n        Parse.structurePunctuationRemover(root);\n        for (int i =0; i < root.getChildren().size(); i++){\n            if (root.getChildren().get(i) != null) {\n                traverseAndRemove(root.getChildren().get(i));\n            }\n        }\n    }\n\n    public static TreeNode findRoot(List<List<TreeNode>> treeNodeStructure) {\n        TreeNode root = new TreeNode();\n        boolean isRoot = true;\n        for (int i = 0; i < treeNodeStructure.size(); i++) {\n            root = treeNodeStructure.get(i).get(0);\n            for (List<TreeNode> treeNodes : treeNodeStructure) {\n                for (int k = 1; k < treeNodes.size(); k++) {\n                    if (treeNodes.get(k).getFeature().equals(root.getFeature())) {\n                        isRoot = false;\n                        break;\n                    }\n                    if (!isRoot)\n                        break;\n                }\n            }\n            if (isRoot) return root;\n            isRoot = true;\n        }\n        return root;\n    }\n\n    public TreeNode toTree(List<List<String>> structure) {\n\n        List<List<TreeNode>> treeNodeStructure = new LinkedList<>();\n\n        insertFeatures(structure, treeNodeStructure);\n\n        setOptional(treeNodeStructure);\n\n        insertParents(treeNodeStructure);\n\n        insertChildren(treeNodeStructure);\n\n        insertTypes(findRoot(treeNodeStructure));\n\n        traverseAndRemove(findRoot(treeNodeStructure));\n\n        return findRoot(treeNodeStructure);\n    }\n\n}\n\nclass Man extends ManOrOpt {\n\n    @Override\n    public ChildrenType getType() {\n        return ChildrenType.MAN;\n    }\n\n    @Override\n    public void setType(ChildrenType childrenType) {\n        this.type = childrenType;\n    }\n\n    @Override\n    public boolean isType(TreeNode treeNode) {\n        if (treeNode.getParent() == null\n                && treeNode.getChildren() == null) return true;\n        if (treeNode.getChildren().size() == 2) return true;\n        for (TreeNode child : treeNode.getChildren()) {\n            if (child.getFeature().equals(\"+\"))\n                return true;\n        }\n        return treeNode.getChildren().size() == 0;\n    }\n}\n\nabstract class ManOrOpt implements ChildType {\n    ChildrenType type = null;\n\n    @Override\n    public abstract boolean isType(TreeNode treeNode);\n}\n\nclass Or implements ChildType {\n    ChildrenType type = null;\n\n    @Override\n    public ChildrenType getType() {\n        return ChildrenType.OR;\n    }\n\n    @Override\n    public void setType(ChildrenType childrenType) {\n        this.type = childrenType;\n    }\n\n    @Override\n    public boolean isType(TreeNode treeNode) {\n        for (int i = 0; i < treeNode.getChildren().size(); i++) {\n            if (treeNode.getChildren().get(i).getFeature().equals(\"|\"))\n                return true;\n        }\n        return false;\n    }\n}\n\nclass Parse {\n\n    static List<String> parser(String string) {\n        List<String> output = new ArrayList<>();\n        String temp = \"\";\n        if (string.length() != 0) {\n            if (string.charAt(0) == '{') {\n                string = string.substring(1);\n                string = string.substring(0, string.length() - 1);\n                for (int i = 0; i < string.length(); i++) {\n                    if (string.charAt(i) != ',') {\n                        temp += string.substring(i, i + 1);\n                    } else {\n                        output.add(temp);\n                        temp = \"\";\n                    }\n                }\n            } else {\n                for (int i = 0; i < string.length(); i++) {\n                    if (string.charAt(i) != '='\n                            && string.charAt(i) != '+'\n                            && string.charAt(i) != '|'\n                            && string.charAt(i) != '^')\n                        temp += string.substring(i, i + 1);\n                    else {\n                        output.add(temp);\n                        output.add(string.substring(i, i + 1));\n                        temp = \"\";\n                    }\n                }\n            }\n            output.add(temp);\n        } else output = null;\n        return output;\n    }\n\n    static public void structurePunctuationRemover(TreeNode root) {\n        for (int i = 0; i < root.getChildren().size(); i++) {\n\n            if (root.getChildren().get(i).getFeature().equals(\"=\")\n                    || root.getChildren().get(i).getFeature().equals(\"+\")\n                    || root.getChildren().get(i).getFeature().equals(\"|\")\n                    || root.getChildren().get(i).getFeature().equals(\"^\")) {\n                root.getChildren().remove(i);\n                i--;\n            }\n        }\n\n        for (int i = 0; i < root.getChildren().size(); i++) {\n            if (root.getChildren().get(i) != null)\n                structurePunctuationRemover(root.getChildren().get(i));\n        }\n    }\n\n    static public void questionMarkRemover(TreeNode treeNode) {\n        String feature = treeNode.getFeature().substring(1);\n        treeNode.setFeature(feature);\n    }\n}\n\n\nclass TreeNode {\n    private List<TreeNode> children;\n    private String feature;\n    private ChildrenType childrenType;\n    private TreeNode parent;\n    boolean optional = false;\n\n    public TreeNode(String featureName) {\n        this.feature = featureName;\n        this.children = new LinkedList<>();\n        this.childrenType = null;\n        this.parent = null;\n    }\n\n    public TreeNode() {\n        this.feature = null;\n        this.children = new LinkedList<>();\n        this.childrenType = null;\n        this.parent = null;\n    }\n\n    public String getFeature() {\n        return feature;\n    }\n\n    public void setFeature(String feature) {\n        this.feature = feature;\n    }\n\n    public void setChildren(List<TreeNode> tree) {\n        this.children = tree;\n    }\n\n    public List<TreeNode> getChildren() {\n        return children;\n    }\n\n    public ChildrenType getChildrenType() {\n        return this.childrenType;\n    }\n\n    public void setChildrenType(ChildrenType childrenType) {\n        this.childrenType = childrenType;\n    }\n\n    public void setParent(TreeNode parent) { this.parent = parent; }\n\n    public TreeNode getParent() { return this.parent; }\n\n    public static List<TreeNode> toTreeNode(List<String> line) {\n        List<TreeNode> treeNodized = new LinkedList<>();\n        for (String s : line) {\n            treeNodized.add(new TreeNode(s));\n        }\n        List<TreeNode> t = new LinkedList<>();\n        for (int i = 1; i < treeNodized.size(); i++)\n            t.add(treeNodized.get(i));\n        treeNodized.get(0).setChildren(t);\n        return treeNodized;\n    }\n\n    static public ChildrenType defineType(TreeNode treeNode) {\n        Or or = new Or();\n        Alt alt = new Alt();\n        Man man = new Man();\n        if (or.isType(treeNode)) {\n            return ChildrenType.OR;\n        } else if (alt.isType(treeNode)) {\n            return ChildrenType.ALT;\n        } else if (man.isType(treeNode)) {\n            return ChildrenType.MAN;\n        }\n        return null;\n    }\n}\n\npublic class Main {\n\n    public static void isValid(List<List<String>> testCases, TreeNode root) {\n        for (List<String> aCase : testCases) {\n            if (Check.containParent(root, aCase)\n                    && Check.validFeature(root, aCase)\n                    && Check.containChildrenMatchingTypeRule(root, aCase))\n                System.out.println(\"Valid\");\n            else System.out.println(\"Invalid\");\n        }\n    }\n\n    static List<List<String>> getStructure(List<List<String>> allData) {\n        List<List<String>> structure = new ArrayList<>();\n        int i = 0;\n        while (!(allData.get(i).get(0).equals(\"#\"))) {\n            structure.add(allData.remove(i));\n        }\n        allData.remove(i);\n        return structure;\n    }\n\n    static List<List<String>> getTestCase(List<List<String>> data) {\n        List<List<String>> testCase = new ArrayList<>();\n        int i = 0;\n        while (!(data.get(i).get(0).equals(\"##\"))) {\n            testCase.add(data.remove(i));\n        }\n        data.remove(i);\n        return testCase;\n    }\n\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        String nextLine = scan.nextLine();\n        List<List<String>> allData = new ArrayList<>();\n        while (!nextLine.equals(\"###\")) {\n            allData.add(Parse.parser(nextLine.trim().replaceAll(\"\\\\s+\", \"\")));\n            nextLine = scan.nextLine();\n        }\n        scan.close();\n\n        List<List<String>> structure = new ArrayList<>();\n        List<List<String>> testCase = new ArrayList<>();\n//        int size = 0;\n\n        while (allData.size() != 0) {\n            /*List<List<String>>*/ structure = getStructure(allData);\n            /*List<List<String>>*/ testCase = getTestCase(allData);\n\n//            size = structure.size() + testCase.size();\n\n//            System.out.println(size);\n\n            InputTree tree = new InputTree();\n            TreeNode root = tree.toTree(structure);\n\n            isValid(testCase, root);\n\n            System.out.println(\"+++\");\n\n            structure.clear();\n            testCase.clear();\n\n//            for (int i = 0; i < size; i++) {\n//                allData.remove(0);\n//            }\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_363__1_1001_380", "golden_code": "import java.util.Scanner;\n\nclass Main {\n\n    public static void main(String args[]) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext()) {\n            System.out.println(cin.nextInt() + cin.nextInt());\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tint m, n;\n\tpublic static void main(String[] args) {\n\t\tMain p = new Main();\n\t\tp.run();\n\t}\n\tpublic void run(){\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext()){\n\t\t\tn = in.nextInt();\n\t\t\tm = in.nextInt();\n\t\t\tSystem.out.println(n+m);\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2792_5__1_1071_4", "golden_code": "\nimport java.util.*;\npublic class Main {\n\tpublic static void main(String []args){\n\t\t\tScanner input=new Scanner(System.in);\n\t\t\t\tint [] R={255,192,128,0,255,128,255,128,0,0,0,0,0,0,255,128};\n\t\t\t\t\tint [] G={255,192,128,0,0,0,255,128,255,128,255,128,0,0,0,0};\n\t\t\t\t\t\tint [] B={255,192,128,0,0,0,0,0,0,0,255,128,255,128,255,128};\n\t\t\t\t\t\t\tint r=input.nextInt();\n\t\t\t\t\t\t\t\tint g=input.nextInt();\n\t\t\t\t\t\t\t\t\tint b=input.nextInt();\n\t\t\t\t\t\t\t\t\t\tint min;\n\t\t\t\t\t\t\t\t\t\t\tint [] d=new int[16];\n\t\t\t\t\t\t\t\t\t\t\t\twhile(r!=-1 && g!=-1 && b!=-1){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i=0 ;i<16;i++)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\td[i]=((R[i]-r)*(R[i]-r))+((G[i]-g)*(G[i]-g))+((B[i]-b)*(B[i]-b));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmin=d[0];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tint j=1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(int i=1 ;i<16;i++)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(d[i]<min){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmin=d[i];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tj=i+1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(j==1)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"White\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(j==2)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Silver\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(j==3)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Gray\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(j==4)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Black\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(j==5)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Red\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(j==6)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Maroon\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(j==7)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Yellow\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(j==8)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Olive\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(j==9)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Lime\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(j==10)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Green\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(j==11)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Aqua\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(j==12)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Teal\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(j==13)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Blue\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(j==14)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Navy\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(j==15)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Fuchsia\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(j==16)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"Purple\");\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t r=input.nextInt();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t g=input.nextInt();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \t      b=input.nextInt();\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t}\n}\n", "generated_code": "import java.util.*;\n\npublic class Main{\n\t\n\tstatic int[] nums;\n\tstatic int[][] dp;\n\tstatic int[][] path;\n\t\n\tpublic static void main(String[] args){\n\t\tScanner s = new Scanner(System.in);\n\t\tfor(int q=1;true;q++){\n\t\t\tint n = s.nextInt();\n\t\t\tif(n == 0)\n\t\t\t\tbreak;\n\t\t\tdp = new int[n+1][n+1];\n\t\t\tpath = new int[n+1][n+1];\n\t\t\tnums = new int[n+1];\n\t\t\tnums[0] = s.nextInt();\n\t\t\tfor(int i=1;i<n;i++){\n\t\t\t\tnums[i] = s.nextInt();\n\t\t\t\ts.nextInt();\n\t\t\t}\n\t\t\tnums[n] = s.nextInt();\n\t\t\tfunc(0,n);\n\t\t\tSystem.out.println(\"Case \"+q+\": \"+PrintPath(0,n));\n\t\t}\n\t}\n\t\n\tstatic int func(int s,int e){\n\t\tif(e-s <= 1)\n\t\t\treturn 0;\n\t\tif(dp[s][e] == 0){\n\t\t\tint res = Integer.MAX_VALUE;\n\t\t\tfor(int i=s+1;i<e;i++){\n\t\t\t\tint tmp = func(s,i)+func(i,e)+nums[s]*nums[i]*nums[e];\n\t\t\t\tif(tmp < res){\n\t\t\t\t\tres = tmp;\n\t\t\t\t\tpath[s][e] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdp[s][e] = res;\n\t\t}\n\t\treturn dp[s][e];\t\n\t}\n\t\n\tstatic String PrintPath(int s,int e){\n\t\tif(e - s <= 1)\n\t\t\treturn \"A\"+e;\n\t\treturn \"(\"+PrintPath(s,path[s][e])+\" x \"+PrintPath(path[s][e],e)+\")\";\t\t\n\t}\n}", "score": 0.0}
{"id": "SHARE_6_1005_7__1_1392_15", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner scanConsole = new Scanner(System.in);\n\t\twhile ( scanConsole.hasNext() ) {\n\t\t\tPerimeterCalculator ex = new PerimeterCalculator();\n\t\t\t\n\t\t\tint mouseRow = -1, mouseColumn = -1;\n\t\t\tString temp = \"\";\n\t\t\t\n\t\t\tex.rows = scanConsole.nextInt();\n\t\t\tex.columns = scanConsole.nextInt();\n\t\t\t\n\t\t\tex.shape = new String[ex.rows][ex.columns];\n\t\t\tex.check = new int[ex.rows][ex.columns];\n\t\t\t\n\t\t\tmouseRow = scanConsole.nextInt();\n\t\t\tmouseColumn = scanConsole.nextInt();\n\t\t\t\n\t\t\tif ( ex.rows == 0 && ex.columns == 0 && mouseRow == 0 && mouseColumn == 0 ) break;\n\t\t\tscanConsole.nextLine();\n\t\t\t\n\t\t\tfor (int i = 0; i < ex.rows; i++) {\n\t\t\t\ttemp = scanConsole.nextLine();\n\t\t\t\tfor (int j = 0; j < ex.columns; j++) {\n\t\t\t\t\tex.shape[i][j] = temp.substring(j, j+1);\n\t\t\t\t\tif ( ex.shape[i][j].contains(\"X\") ) ex.check[i][j] = 0;\n\t\t\t\t\telse ex.check[i][j] = -1;\n\t\t\t\t}\t\t\t\n\t\t\t}\t\n\t\t// recusive function call\n\t\t\tex.calculate( mouseRow-1, mouseColumn-1 );\n\t\t\tSystem.out.println( ex.perimeter );\n\t\t}\n\t\tscanConsole.close();\n\t}\t\n\t\n\tpublic static class PerimeterCalculator {\n\t\t\n\t\tpublic String[][] shape;\n\t\tpublic int[][] check;\n\t\t\n\t\tpublic int rows,columns;\n\t\t\n\t\tpublic int perimeter = 0;\n\t\t\n\t\t\n\t\tpublic void calculate( int i, int j ) {\n\t\t\t\n\t\t\tcheck[i][j] = 1;\n\t\t\t\n\t\t\t//up\n\t\t\tif ( ((i-1 > -1) && shape[i][j].contains(\"X\") && check[i-1][j] == -1) || !(i-1 > -1) ) perimeter++;\n\t\t\t//right\n\t\t\tif ( (( j+1 < columns ) && shape[i][j].contains(\"X\") && check[i][j+1] == -1) || !(j+1 < columns)  ) perimeter++;\n\t\t\t//left\n\t\t\tif ( (( j-1 > -1 ) && shape[i][j].contains(\"X\") && check[i][j-1] == -1) ||  !( j-1 > -1 ) ) perimeter++;\n\t\t\t//down\n\t\t\tif (  (( i+1 < rows ) && shape[i][j].contains(\"X\") && check[i+1][j] == -1) || !( i+1 < rows ) ) perimeter++;\n\t\t\t\n\t\t\t//up\n\t\t\tif ( i-1 > -1 )\n\t\t\t\tif ( check[i-1][j] == 0 ) { check[i-1][j] = 1; calculate ( i-1, j ); }\n\t\t\t\t\t\n\t\t\t//right\n\t\t\tif ( j+1 < columns )\n\t\t\t\tif ( check[i][j+1] == 0 ){ check[i][j+1] = 1; calculate ( i, j+1 ); }\n\t\t\t\n\t\t\t//left\n\t\t\tif ( j-1 > -1 )\n\t\t\t\tif ( check[i][j-1] == 0 ){ check[i][j-1] = 1; calculate ( i, j-1 ); }\n\t\t\t\n\t\t\t//down\n\t\t\tif ( i+1 < rows )\n\t\t\t\tif ( check[i+1][j] == 0 ){check[i+1][j] = 1; calculate ( i+1, j ); }\n\t\t\t\n\t\t\t//up-right\n\t\t\tif ( i-1 > -1 && j+1 < columns  )\t\n\t\t\t\tif ( check[i-1][j+1] == 0 ){ check[i-1][j+1] = 1; calculate ( i-1, j+1 ); }\n\t\t\t\n\t\t\t//up-left\n\t\t\tif ( i-1 > -1 && j-1 > -1 ) \t\n\t\t\t\tif ( check[i-1][j-1] == 0 ){ check[i-1][j-1] = 1; calculate ( i-1, j-1 ); }\n\t\t\t\n\t\t\t//down-right\n\t\t\tif ( i+1 < rows && j+1 < columns )\n\t\t\t\tif ( check[i+1][j+1] == 0 ){ check[i+1][j+1] = 1; calculate ( i+1, j+1 ); }\n\t\t\t\n\t\t\t//down-left\n\t\t\tif ( i+1 < rows && j-1 > -1 )\n\t\t\t\tif ( check[i+1][j-1] == 0 ){ check[i+1][j-1] = 1; calculate ( i+1, j-1 ); }\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\t// class perimeter\n\t}\n\t\n\t\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    static Scanner in = new Scanner(System.in);\n\n    static int revers(int n) {\n\n        int t = 0;\n        while (n > 0) {\n            int m = n % 10;\n            n = n / 10;\n            t = (t * 10) + m;\n        }\n        return t;\n\n    }\n\n    public static void main(String[] args) {\n        int q = in.nextInt();\n        for (int i = 0; i < q; i++) {\n            int n = in.nextInt();\n            int m = in.nextInt();\n            System.out.println(revers(revers(n) + revers(m)));\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_445__1_1001_121", "golden_code": "    import java.util.Scanner;\n     \n    public class Main {\n        public static void main(String[] args) {\n            Scanner cin = new Scanner(System.in);\n            while (cin.hasNext())\n                System.out.println(cin.nextInt() + cin.nextInt());\n        }\n    }\n\n", "generated_code": "import java.util.Scanner;\npublic class Main{\n    public static void main(String[] args){\n\tScanner scan=new Scanner(System.in);\n        while(scan.hasNext()){\n        int n=scan.nextInt();   int m=scan.nextInt();\n        int s=n+m;\n        System.out.println(s);\n        }}}", "score": 1.0}
{"id": "SHARE_1_1009_18__1_1009_110", "golden_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] a) {\n\t\tScanner in = new Scanner(System.in);\n\t\tdouble sum = 0;\n\t\tfor (int i = 0; i < 12; i++){\n\t\t\tdouble d = in.nextDouble();\n\t\t\tsum += d;\n\t\t} \n\t\tSystem.out.print(\"$\");\n\t\tSystem.out.printf(\"%.2f\\n\", sum / 12);\n\t}\n}\n", "generated_code": "import java.util.*;\npublic class Main {\n\t\n\tpublic static int N=5;\n\tpublic static int adj[]=new int [1<<N];\n\t\n\tpublic static void main(String s[]) {\n\t\tScanner in = new Scanner(System.in);\n\t\tdouble sum=0;\n\t\tfor(int i=0;i<12;i++)\n\t\t{\n\t\t\tdouble val=in.nextDouble();\n\t\t\tsum+=val;\n\t\t}\t\t\n\t\tSystem.out.printf(\"$%.2f\\n\",sum/12);\n\t\tadj[0]=13;\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2732_0__1_2732_45", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        for (int q = 0; q < n; q++) {\n            int x = in .nextInt();\n            int y = in.nextInt();\n            if( x == y){\n                if(x%2 == 0)\n                    System.out.println(x+y);\n                else\n                    System.out.println(x+y -1);\n            }\n            else if(x == y+2){\n                if(x%2 == 0)\n                    System.out.println(x+y);\n                else \n                    System.out.println(x+y-1);\n            }\n            else{\n                System.out.println(\"No Number\");\n            }\n        }\n    }\n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Scanner;\n\npublic class Main {\n\n\n public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        \n        \n        int t=input.nextInt();\n        int x,y;\n        while(t-->0){\n            x=input.nextInt();\n            y=input.nextInt();\n            \n            if(y==x-2 || y==x){\n                if(x%2==0)\n                    System.out.println(x+y);\n                else\n                    System.out.println(x+y-1);\n            }\n            else\n                System.out.println(\"No Number\");\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2837_1__1_1208_28", "golden_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        ArrayList<Integer> aa = new ArrayList<Integer>();\n        String cmd;\n        while (!(cmd = in.next()).equals(\"END\")) {\n            if (cmd.equals(\"GetFinal\")) {\n                Object arr[] = aa.toArray();\n                Arrays.sort(arr);\n                System.out.println(arr[arr.length - 2]);\n            } else {\n                aa.add(Integer.parseInt(cmd));\n            }\n\n        }\n    }\n\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint t = in.nextInt();\n\t\t\tin.nextLine();\n\t\t\tStringBuilder f1 = new StringBuilder();\n\t\t\tfor (int j = 0; j < t; j++) {\n\t\t\t\tString[] s = in.nextLine().split(\"[\\\\s]+\");\n\t\t\t\tStringBuilder f = new StringBuilder();\n\n\t\t\t\tfor (int k = 0; k < s.length; k++) {\n\t\t\t\t\tf.append(s[k]);\n\n\t\t\t\t\tf1.append(f.reverse());\n\t\t\t\t\tif (k < s.length - 1)\n\t\t\t\t\t\tf1.append(\" \");\n\t\t\t\t\tf.delete(0, f.length());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tSystem.out.println(f1.toString());\n\t\t\t\tf1.delete(0, f1.length());\n\t\t\t}\n\t\t\tif(i<n-1)\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_388__1_1001_180", "golden_code": "import java.util.*;\nclass Main{\n\tpublic static void main(String[]a){\n\t\tScanner i=new Scanner(System.in);\n\t\twhile(i.hasNext()){\n\t\tSystem.out.println(i.nextInt()+i.nextInt());\n\t}\n}}", "generated_code": "import java.util.*;\n\npublic class Main {\n\tpublic static void main(String args[]) {\n\t\tArrayList<Integer> r=new ArrayList<Integer>();\n\t\tScanner sc=new Scanner(System.in);\n\t\twhile (sc.hasNext()) {\n\t\t\tint a=sc.nextInt();\n\t\t\tint b=sc.nextInt();\n\t\t\tr.add((Integer)(a+b));\n\t\t}\n\t\t\n\t\tfor (int i=0;i<r.size();i++)\n\t\t\tSystem.out.println((int)r.get(i));\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2429_9__1_2495_3", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int N, n, i;\n        for ( N = input.nextInt(); N != 0; N-- ){\n            long s = 1;\n            n = input.nextInt();\n            if(n == 1){\n                System.out.println(\"0\");\n                continue;\n            }\n            else if(Math.sqrt(n) % 2 == 0 || Math.sqrt(n) % 2 == 1){\n                s += Math.sqrt(n);\n            }\n            if ( n % 2 == 1){\n                for ( i = 3; n / i > i; i += 2 )\n                    if( n % i == 0 ){\n                        s += i;\n                        s += n / i;\n                    }\n            }\n            else{\n                for ( i = 2; n / i > i; i++ )\n                    if( n % i == 0 ){\n                        s += i;\n                        s += n / i;\n                    }\n            }\n            System.out.println(s);\n        }\n    }  \n}", "generated_code": "import java.io.*;\nimport java.util.*;\nimport java.math.*;\nimport java.awt.geom.*;\npublic class Main\n{\n    public static void main(String args[]) throws Exception\n    {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter writer = new PrintWriter(System.out);\n        Scanner scan = new Scanner(System.in);\n        int tc = Integer.parseInt(reader.readLine());\n        while(tc-- > 0)\n        {\n            int n = Integer.parseInt(reader.readLine());\n            int res = 0 ;\n            while(n-- > 0)\n            {\n                StringTokenizer token = new StringTokenizer(reader.readLine());\n                int x = Integer.parseInt(token.nextToken());\n                int y = Integer.parseInt(token.nextToken());\n\n                double dis = Math.sqrt(x*x + y*y);\n                if(dis <= 20)\n                    res+=10;\n                else if(dis <= 40)\n                    res+=9;\n                else if(dis <= 60)\n                    res+=8;\n                else if(dis <= 80)\n                    res+=7;\n                else if(dis <= 100)\n                    res+=6;\n                else if(dis <= 120)\n                    res+=5;\n                else if(dis <= 140)\n                    res+=4;\n                else if(dis <= 160)\n                    res+=3;\n                else if(dis <= 180)\n                    res+=2;\n                else if(dis <= 200)\n                    res+=1;\n            }\n            writer.println(res);\n        }\n        writer.flush();\n        writer.close();\n    }\n}", "score": 0.0}
{"id": "SHARE_1_2565_7__1_1608_2", "golden_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\nimport java.util.StringTokenizer;\n \npublic class Main {\n \n    public static void main(String[] args) throws IOException {\n        BufferedReader buf = new BufferedReader(\n                new InputStreamReader(System.in));\n        int t = 1;\n        while (true) {\n                String[] line = buf.readLine().split(\" \");\n            int n = Integer.parseInt(line[0]);\n            int max = Integer.parseInt(line[1]);\n            if (n + max == 0)\n                break;\n            System.out.println(\"Case \" + (t++));\n             \n            HashMap<String, Integer> map = new HashMap<String, Integer>();\n            for (int j = 0; j < n; j++) {\n                StringTokenizer strTok = new StringTokenizer(buf.readLine());\n                String first = strTok.nextToken();\n                String last = \"\";\n                while (strTok.hasMoreTokens())\n                    last = strTok.nextToken();\n                String temp = \"\";\n                first = first.toLowerCase();\n                for (int i = 0; i < first.length(); i++)\n                    if (first.charAt(i) >= 'a' && first.charAt(i) <= 'z')\n                        temp += first.charAt(i);\n                first = temp;\n                temp = \"\";\n                last = last.toLowerCase();\n                for (int i = 0; i < last.length(); i++)\n                    if (last.charAt(i) >= 'a' && last.charAt(i) <= 'z')\n                        temp += last.charAt(i);\n                last = temp;\n                String name = first.charAt(0) + \"\";\n                for (int i = 0; i < max - 1 && i < last.length(); i++)\n                    name += last.charAt(i) + \"\";\n                if (map.containsKey(name)) {\n                    int c = map.remove(name);\n                    map.put(name, c + 1);\n                    c++;\n                    name += c;\n                    if (name.length() > max) {\n                        if (c <= 9) {\n                            name = name.substring(0, name.length() - 2);\n                            name += c;\n                        } else {\n                            if (name.length() - 1 > max)\n                                name = name.substring(0, name.length() - 4);\n                            else\n                                name = name.substring(0, name.length() - 3);\n                            name += c;\n                        }\n                    }\n                    System.out.println(name);\n \n                } else {\n                    System.out.println(name);\n                    map.put(name, 0);\n                }\n \n            }\n \n        }\n \n    }\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        while(in.hasNext()){\n            int a=in.nextInt();\n            int b=in.nextInt();\n            int c=in.nextInt();\n            if(a<=168)\n                System.out.println(\"CRASH \"+a);\n            else if(b<=168)\n                System.out.println(\"CRASH \"+b);\n            else if(c<=168)\n                System.out.println(\"CRASH \"+c);\n            else\n                System.out.println(\"NO CRASH\");\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_101073_8__1_101073_25", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] argc){\n\t\tScanner keyboard = new Scanner(System.in);\n\t\tint t = keyboard.nextInt();\n\t\tfor (int i = 0; i < t; i++){\n\t\t\tint n = keyboard.nextInt();\n\t\t\tint max = -1, min = Integer.MAX_VALUE;\n\t\t\tfor (int k = 0; k < n; k++){\n\t\t\t\tint sample = keyboard.nextInt();\n\t\t\t\tif (sample > max)\n\t\t\t\t\tmax = sample;\n\t\t\t\tif (sample < min)\n\t\t\t\t\tmin = sample;\n\t\t\t\t\n\t\t\t}\n\t\t\tSystem.out.println(2 * (max - min));\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.Scanner;\n \npublic class Main {\n    \n    public static void main( String[] args ) {\n        \n        Scanner input = new Scanner( System.in );\n        \n        int a, i, j, m, n = input.nextInt();\n        int min, max;\n        \n        for( i = 0; i < n; i++ ){\n            \n            min = Integer.MAX_VALUE;\n            max = 0;\n            \n            m = input.nextInt();\n            \n            for( j = 0; j < m; j++ ){\n               a = input.nextInt();\n               if(a>max)\n                    max = a;\n               if(a<min)\n                    min = a;\n            }\n            System.out.println( (max - min) * 2 );\n        }\n        \n    }\n    \n}", "score": 1.0}
{"id": "SHARE_1_2578_41__5_1005_40", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n\n        for (int i = 0; i < n; i++) {\n            String s = in.nextLine();\n            if (i == 0) {\n                s = in.nextLine();\n            }\n            int b = 0, g = 0;\n            char a[] = s.toCharArray();\n            for (int j = 0; j < s.length(); j++) {\n                if (a[j] == 'b' || a[j] == 'B') {\n                    b++;\n                } else if (a[j] == 'g' || a[j] == 'G') {\n                    g++;\n                }\n            }\n            if (b > g) {\n                System.out.println(s + \" is A BADDY\");\n            } else if (g > b) {\n                System.out.println(s + \" is GOOD\");\n            } else if (b == g) {\n                System.out.println(s + \" is NEUTRAL\");\n            }\n        }\n\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    static int[] visited;\n    static int[] ftime;\n    static int time = 0;\n\n    static void dfs(int[][] adjacencyMatrix, int vertex, int[] visited, int[] ftime) {\n        visited[vertex]=1;\n        for (int j = 0; j < adjacencyMatrix[vertex].length; j++) {\n            if (adjacencyMatrix[vertex][j] == 1 && visited[j] == 0) {\n                visited[j] = 1;\n                dfs(adjacencyMatrix, j, visited, ftime);\n            }\n        }\n\n        ftime[vertex] = time++;\n    }\n\n    public static void main(String[] args) {\n        int n, m = 0;\n        Scanner input = new Scanner(System.in);\n        while ((n=input.nextInt())>0 &&(m=input.nextInt())>-10) {\n            \n            time = 0;\n            ftime = new int[n];\n            int[][] matrix = new int[n][n];\n            visited = new int[n];\n            for (int i = 0; i < (m); i++) {\n                matrix[input.nextInt() - 1][input.nextInt() - 1] = 1;\n            }\n            for (int i = 0; i < n; i++) {\n                if (visited[i] == 0) {\n                    dfs(matrix, i, visited, ftime);\n                }\n            }\n            for (int i = n - 1; i > -1; i--) {\n                for (int j = 0; j < n; j++) {\n                    if (ftime[j] == i) {\n                        if (i == 0) {\n                            System.out.print(j + 1);\n                        } else {\n                            System.out.print(j + 1 + \" \");\n                        }\n                    }\n                }\n            }\n            System.out.println();\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2499_65__1_1022_14", "golden_code": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nimport java.util.Scanner;\n\n/**\n *\n * @author User\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String q = sc.nextLine();\n        String[] s = q.split(\" \");\n        int a = Integer.parseInt(s[0]);\n        int b = Integer.parseInt(s[1]);\n        int c = Integer.parseInt(s[2]);\n        \n        int[] res = new int[3];\n//Mid-field\n        //Forward\n        //Defense\n        while (a != 0 && b != 0 && c != 0) {\n            String result=null;\n            res[0]=1;\n            res[1]=1;\n            res[2]=1;\n            //mid\n            if(a>30||b<70||c<500)res[0]=0;\n            //forward\n            if(a>26||b<60||c<200)res[1]=0;\n            //def\n            if(a>36||b<80||c<300)res[2]=0;\n            \n\n            if(res[0]==1)\n            {\n                if(result!=null)\n                {\n                    result=result+\" \"+\"Mid-field\";\n                }\n                else\n                {\n                    result=\"Mid-field\";\n                }\n            }\n            \n            if(res[1]==1)\n            {\n                if(result!=null)\n                {\n                    result=result+\" \"+\"Forward\";\n                }\n                else\n                {\n                    result=\"Forward\";\n                }\n            }\n            if(res[2]==1)\n            {\n                if(result!=null)\n                {\n                    result=result+\" \"+\"Defense\";\n                }\n                else\n                {\n                    result=\"Defense\";\n                }\n            }\n            if(result==null)result=\"No positions\";\n            System.out.println(result);\n            \n            \n            q = sc.nextLine();\n            s = q.split(\" \");\n            a = Integer.parseInt(s[0]);\n            b = Integer.parseInt(s[1]);\n            c = Integer.parseInt(s[2]);\n            \n       \n        }\n       \n    }\n\n}\n", "generated_code": "import java.util.Scanner;\nimport java.util.Stack;\n\npublic class Main {\n\n\tpublic static void main(String[] args){\n\n\t\tScanner input=new Scanner(System.in);\n\n\n\t\tStack<String> back=new Stack();\n\t\tStack<String> forward=new Stack();\n\n\t\tint n=input.nextInt();\n\t\tString command,url;\n\t\twhile(n-->0){\n\n\t\t\tback.clear();\n\t\t\tforward.clear();\n\t\t\turl=\"http://www.acm.org/\";\n\t\t\t//back.push(url);\n\n\t\t\tcommand=input.next();\n\n\t\t\twhile(!command.equals(\"QUIT\")){\n\t\t\t\tif(command.equals(\"VISIT\")){\n\t\t\t\t\tback.push(url);\n\t\t\t\t\turl=input.next();\n\t\t\t\t\tSystem.out.println(url);\n\t\t\t\t\tforward.clear();\n\n\t\t\t\t}\n\t\t\t\telse if(command.equals(\"BACK\")){\n\n\t\t\t\t\tif(back.isEmpty())\n\t\t\t\t\t\tSystem.out.println(\"Ignored\");\n\t\t\t\t\telse{\n\t\t\t\t\t\tforward.push(url);\n\t\t\t\t\t\turl=back.pop();\n\t\t\t\t\t\tSystem.out.println(url);\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t\telse if(command.equals(\"FORWARD\")){\n\t\t\t\t\tif(forward.isEmpty())\n\t\t\t\t\t\tSystem.out.println(\"Ignored\");\n\t\t\t\t\telse{\n\t\t\t\t\t\tback.push(url);\n\t\t\t\t\t\turl=forward.pop();\n\t\t\t\t\t\tSystem.out.println(url);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcommand=input.next();\n\t\t\t}\n\n\t\t\tif(n>0)\n\t\t\t\tSystem.out.println();\n\t\t}\n\n\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1001_314__1_1001_154", "golden_code": "    import java.util.Scanner;\n     \n    public class Main {\n        public static void main(String[] args) {\n            Scanner cin = new Scanner(System.in);\n            while (cin.hasNext())\n                System.out.println(cin.nextInt() + cin.nextInt());\n        }\n    }\n\n", "generated_code": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner reader=new Scanner(System.in);\n        while(reader.hasNext()){\n            int a=reader.nextInt();\n            int b=reader.nextInt();\n            System.out.println(a+b);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2644_19__1_106015_4", "golden_code": "import java.util.*;\npublic class Main{\n\tpublic static void main(String[] y) {\n\t\tScanner p = new Scanner(System.in);\n\t\tString v = \"aiyeou\", c = \"bkxznhdcwgpvjqtsrlmf\", V = \"AIYEOU\", C = \"BKXZNHDCWGPVJQTSRLMF\";\n\t\twhile (p.hasNext()) {\n\t\t\tString s = p.nextLine(), r = \"\";\n\t\t\tfor (char i : s.toCharArray()) \n\t\t\t\tif (v.contains(i + \"\"))\n\t\t\t\t\tr += v.charAt((v.indexOf(i) + 3) % 6);\n\t\t\t\telse if (c.contains(i + \"\"))\n\t\t\t\t\tr += c.charAt((c.indexOf(i) + 10) % 20);\n\t\t\t\telse if (V.contains(i + \"\"))\n\t\t\t\t\tr += V.charAt((V.indexOf(i) + 3) % 6);\n\t\t\t\telse if (C.contains(i + \"\"))\n\t\t\t\t\tr += C.charAt((C.indexOf(i) + 10) % 20);\n\t\t\t\telse \n\t\t\t\t\tr += i;\n\t\t\tSystem.out.println(r);\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\nimport java.math.BigInteger;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        long n;\n        BigInteger num1 = BigInteger.valueOf(0);\n        BigInteger num2 = BigInteger.valueOf(1);\n        BigInteger val = BigInteger.valueOf(0);\n        BigInteger v = BigInteger.valueOf(0);\n        Scanner scan = new Scanner(System.in);\n        while(scan.hasNextInt())\n        {\n         n = scan.nextInt();\n        while(n>1)\n        {\n        \tv = (num1.multiply(BigInteger.valueOf(2)));\n            val = (num2.add(v));\n            num1 =num2;\n            num2 = val;\n            n--;\n        }\n        System.out.println(num1);\n        num1 = BigInteger.ZERO;\n        num2 = BigInteger.ONE;\n    \t}\n    }\n    \n}", "score": 0.0}
{"id": "SHARE_1_1230_15__1_1230_55", "golden_code": "import java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Main {\n\tpublic static BigInteger ZERO = new BigInteger(\"0\");\n\tpublic static BigInteger TEN = new BigInteger(\"10\");\n\tpublic static BigInteger f(BigInteger a)\n\t{\n\t\tInteger sum = 0;\n\t\tString s = a.toString();\n\t\tfor(int i = 0;i < s.length();i++)\n\t\t\tsum += s.charAt(i)-'0';\n\t\tif(sum < 10)\n\t\t\treturn new BigInteger(sum.toString());\n\t\treturn f(new BigInteger(sum.toString()));\n\t}\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(true)\n\t\t{\n\t\t\tBigInteger N = new BigInteger(sc.next());\n\t\t\tif(N.toString().equals(\"0\"))\n\t\t\t\treturn;\n\t\t\tSystem.out.println(f(N).toString());\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main (String []args)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\tString str = scan.next();\n\t\twhile(str.charAt(0) != '0')\n\t\t{\n\t\t\tint k=0;\n\t\t\tint n=0;\n\t\t\t       \twhile(k<str.length())\n       \t\t\t\t{\n       \t\t\t\tn+=str.charAt(k)-'0';\n       \t\t\t\tk++;\n       \t\t\t\t}\n\t\tint a =n;\n\t\tint z = 0;\n\t\tint sum=0;\n\t\twhile( a> 0)\n\t\t{\n\t\t\ta = a/10;\n\t\t\tz++;\n\t\t}\n\t\tint [] p = new int [z];\n\t\ta = n ;\n\t\twhile(a >= 10)\n\t\t{\n\t\t\tfor(int i =p.length -1 ; i >= 0 ; i -- )\n\t\t\t{\n\t\t\t\tp[i] = a%10;\n\t\t\t\ta = a/10;\n\t\t\t}\n\t\t\tfor(int i = 0 ; i < p.length ; i ++ )\n\t\t\t\tsum += p[i] ;\n\t\t\t\ta = sum;\n\t\t\t\tsum =0 ;\n\t\t}\n\t\tSystem.out.println( a );\n\t\tstr = scan.next();\n\t}\n}\n}\n", "score": 1.0}
{"id": "SHARE_1_2539_0__1_106017_28", "golden_code": "import java.util.*;\npublic class Main {\n\tprivate static Scanner scan ;\n\tpublic static void main(String[] args) \n\t{\n\t\tscan = new Scanner(System.in);\n\t\twhile(true)\n\t\t{\n\t\t\tint n = scan.nextInt();\n\t\t\tint b = scan.nextInt();\n\t\t\tif(n == 0 && b == 0)\n\t\t\t\tbreak;\n\t\t\tint numbers[] = new int[b];\n\t\t\tfor(int i = 0 ; i < b ; i++)\n\t\t\t\tnumbers[i] = scan.nextInt();\n\t\t\tboolean ok[] = new boolean[n+1];\n\t\t\tfor(int i = 0 ; i < b ; i++)\n\t\t\t\tfor(int j = i+1 ; j < b ; j++)\n\t\t\t\t\tok[Math.abs(numbers[i]-numbers[j])] = true;\n\t\t\tint q = 0 ; \n\t\t\tfor(int i = 1 ; i < n+1 ; i++)\n\t\t\t\tif(ok[i])\n\t\t\t\t\tq++;\n\t\t\tSystem.out.println(q==n ? \"Y\" : \"N\");\n\t\t}\n\t}\n}\n", "generated_code": "\nimport java.util.Scanner;\n\n\npublic class Main {\n\n \n    public static void main(String[] args) {\n        char []open;\n        Scanner s = new Scanner(System.in);\n        while (s.hasNext()){\n            int sum = 0 ;\n            String str = s.next();\n            int integ = Integer.parseInt(str);\n            open = str.toCharArray();;\n            for (int i = 0 ; i<3 ; i++){\n                String z =Character.toString(open[i]);\n                int b = Integer.parseInt(z);\n                sum+=(b*b*b);\n            }\n            if (sum==integ)\n                System.out.println(\"Yes\");\n            else if(sum!=integ)\n                System.out.println(\"No\");\n        }\n    }\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1230_59__1_2591_1", "golden_code": "import java.util.Scanner;\npublic class Main \n{\n public static void main(String[] args)\n {\n    int sum=0;\n   \n    Scanner scan = new Scanner(System.in);\n    boolean flag =true;\n    String b=scan.nextLine();\n\n\t\n        int n=0;\n    int counter;\n    boolean ok=true;\n\t\n    while(flag){\n\n\t    while(ok)\n\t    {\t\n\t\tn = b.length();\n\t\tif ( b.equals(\"0\") ) {\n\t\t\tbreak ;\n\t\t}\t\n\t\t\t\n\t\tcounter=0;\n\t\tsum=0;\n\t\twhile(counter < n)\n\t\t{\n\t\t\tsum = sum + (b.charAt(counter) - '0');\n\t\t\tcounter+=1;\n\t    \t}\n\t    \tb=sum+\"\";\n\t\tif(sum<10)\n\t\t{\n\t\t\tSystem.out.println(sum) ;\n\t\t\tbreak ;\n\t\t}\n\t\t\t\n\t\t\n\t    }\n\t    \n\t    \n\t\n\t    if ( b.equals(\"0\") ) {\n\t    \tbreak ;\n\t    }\t\t  \n\t    b=scan.nextLine();\n\t}\n\t\t\n }\n}\n", "generated_code": "import java.io.*;\nimport java.util.ArrayList;\nimport java.util.Stack;\n\npublic class Main\n{\n\tpublic static void main(String [] args) throws IOException\n\t{\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter writer = new PrintWriter(new OutputStreamWriter(System.out));\n\n\t\tint tc = Integer.parseInt(reader.readLine());\n\t\twhile(tc-- > 0)\n\t\t{\n\t\t\tchar [] pattern = reader.readLine().toCharArray();\n\t\t\tchar [] text = reader.readLine().toCharArray();\n\t\t\tint size = 0;\n\t\t\tboolean inside = false;\n\t\t\tfor(int i = 0 ; i<pattern.length ; i++)\n\t\t\t{\n\t\t\t\tif(pattern[i] == '[' || pattern[i] == '{')\n\t\t\t\t{\n\t\t\t\t\tsize++;\n\t\t\t\t\tinside = true;\n\t\t\t\t}\n\t\t\t\telse if(pattern[i] == ']' || pattern[i] == '}')\n\t\t\t\t{\n\t\t\t\t\tinside = false;\n\t\t\t\t}\n\t\t\t\telse if(!inside)\n\t\t\t\t\tsize++;\n\t\t\t}\n\n\t\t\tArrayList<Character> [] search = new ArrayList[size];\n\t\t\tfor(int i = 0; i<size ; i++)\n\t\t\t\tsearch[i] = new ArrayList<Character>();\n\t\t\tint at = 0;\n\t\t\tboolean not = false;\n\t\t\tboolean yes = false;\n\t\t\tString contain = new String();\n\t\t\tfor(int i = 0 ;i<pattern.length ; i++)\n\t\t\t{\n\n\t\t\t\tswitch (pattern[i])\n\t\t\t\t{\n\t\t\t\t\tcase '?':\n\t\t\t\t\t{\n\t\t\t\t\t\tsearch[at++].add('(');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase '[':\n\t\t\t\t\t{\n\t\t\t\t\t\tyes = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase ']':\n\t\t\t\t\t{\n\t\t\t\t\t\tyes = false;\n\t\t\t\t\t\tat++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase '{':\n\t\t\t\t\t{\n\t\t\t\t\t\tnot = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase '}':\n\t\t\t\t\t{\n\t\t\t\t\t\tfor(char ch = 'a' ; ch <='z' ; ch++)\n\t\t\t\t\t\t\tif(!contain.contains(Character.toString(ch)))\n\t\t\t\t\t\t\t\tsearch[at].add(ch);\n\t\t\t\t\t\tfor(char ch = 'A' ; ch <='Z' ; ch++)\n\t\t\t\t\t\t\tif(!contain.contains(Character.toString(ch)))\n\t\t\t\t\t\t\t\tsearch[at].add(ch);\n\n\t\t\t\t\t\tcontain = new String();\n\t\t\t\t\t\tat++;\n\t\t\t\t\t\tnot = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tdefault:\n\t\t\t\t\t{\n\t\t\t\t\t\tif(yes)\n\t\t\t\t\t\t\tsearch[at].add(pattern[i]);\n\t\t\t\t\t\telse if(not)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontain += Character.toString(pattern[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tsearch[at++].add(pattern[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tStack<Integer> res = new Stack<Integer>();\n\t\t\tfor(int i = 0 ; i<= text.length - size ; i++)\n\t\t\t{\n\t\t\t\tboolean add = true;\n\t\t\t\tfor(int j = i ; j - i < size ; j++)\n\t\t\t\t{\n\t\t\t\t\tboolean find = false;\n\t\t\t\t\tfor(int k = 0 ; k<search[j-i].size() ; k++)\n\t\t\t\t\t\tif(search[j-i].get(k) == '(' || search[j-i].get(k) == text[j])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfind = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\tif(!find)\n\t\t\t\t\t{\n\t\t\t\t\t\tadd = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(add)\n\t\t\t\t\tres.push(i+1);\n\t\t\t}\n\t\t\tif(res.size() == 0)\n\t\t\t{\n\t\t\t\twriter.println(\"no match\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfor(int i = 0 ;i<res.size() - 1 ; i++)\n\t\t\t\t\twriter.print(res.get(i)+\" \");\n\t\t\t\twriter.println(res.get(res.size() - 1));\n\t\t\t}\n\n\n\t\t}\n\t\twriter.flush();\n\t\twriter.close();\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2513_8__1_2027_20", "golden_code": "import java.util.*;\n\npublic class Main{\n\t\n\tstatic char[][] mat;\n\t\n\tpublic static void main(String[] args){\n\t\tScanner s = new Scanner(System.in);\n\t\tint n = s.nextInt();\n\t\tmat = new char[5][5];\n\t\tfor(int q=0;q<n;q++){\n\t\t\tfor(int i=0;i<5;i++){\n\t\t\t\tmat[i] = s.next().toCharArray();\n\t\t\t}\n\t\t\tboolean resA = false;\n\t\t\tboolean resB = false;\n\t\t\tfor(int i=0;i<5;i++){\n\t\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\t\tresA |= isWin('A',i,j);\n\t\t\t\t\tresB |= isWin('B',i,j);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(resA && resB){\n\t\t\t\tSystem.out.println(\"draw\");\n\t\t\t}else if(resA){\n\t\t\t\tSystem.out.println(\"A wins\");\n\t\t\t}else if(resB){\n\t\t\t\tSystem.out.println(\"B wins\");\n\t\t\t}\n\t\t}\n\t}\n\t\n\tstatic boolean isWin(char c,int x,int y){\n\t\tboolean row = y < 3;\n\t\tif(row){\n\t\t\tfor(int i=0;i<3;i++){\n\t\t\t\trow &= (mat[x][y+i] == c);\n\t\t\t}\n\t\t}\n\t\tboolean column = x < 3;\n\t\tif(column){\n\t\t\tfor(int i=0;i<3;i++){\n\t\t\t\tcolumn &= (mat[x+i][y] == c);\n\t\t\t}\n\t\t}\n\t\tboolean posDiagnomal = x < 3 && y < 3;\n\t\tif(posDiagnomal){\n\t\t\tfor(int i=0;i<3;i++){\n\t\t\t\tposDiagnomal &= (mat[x+i][y+i] == c);\n\t\t\t}\n\t\t}\n\t\tboolean negDiagnomal = x < 3 && y >= 2;\n\t\tif(negDiagnomal){\n\t\t\tfor(int i=0;i<3;i++){\n\t\t\t\tnegDiagnomal &= (mat[x+i][y-i] == c);\n\t\t\t}\n\t\t}\n\t\treturn row || column || posDiagnomal || negDiagnomal;\n\t}\n}", "generated_code": "import java.util.*;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tint t = s.nextInt();\n\t\twhile(t-->0){\n\t\t\tString a = s.next(),r=\"\",b;\n\t\t\tfor (int i=0,j=0;i<a.length();i+=8,j++){\n\t\t\t\tb = a.substring(i,i+8);\n\t\t\t\tif(j!=0)\n\t\t\t\t\tr+=\".\";\n\t\t\t\tr+=Integer.parseInt(b,2);\n\t\t\t}\n\t\t\tSystem.out.println(r);\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_2175_32__1_2371_36", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n    public static void main(String[] args){\n        Scanner in=new Scanner(System.in);\n        while(in.hasNext()){\n            int n=in.nextInt();\n            int[] m=new int[n];\n            boolean[]a=new boolean[n];\n            for(int i=1;i<n;i++)\n                a[i]=false;\n            for(int i=0;i<n;i++)\n                m[i]=in.nextInt();\n            for(int i=0;i<n-1;i++){\n                int k=Math.abs(m[i]-m[i+1]);\n                if(k>-1&&k<n)\n                    a[k]=true;\n            }\n            boolean f=true;\n            for(int i=1;i<n;i++)\n                if(a[i])\n                    continue;\n                else{\n                    f=false;\n                    break;\n                }\n                if(f)\n                    System.out.println(\"Jolly\");\n                else\n                    System.out.println(\"Not jolly\");\n                    \n        }\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner i = new Scanner(System.in);\n        int n;\n        int c=0;\n        while (i.hasNextInt()) {\n            n = i.nextInt();\n            if (n <= 500) {\n                if (n % 2 == 0) {\n                    c = (n * (n + 2) * ((2 * n) + 1)) / 8;\n                } else {\n                    c = ((n + 1) * ((2 * n * n) + (3 * n) - 1)) / 8;;\n                }\n            }\n            System.out.println(c);\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_450__1_1001_71", "golden_code": "import java.io.InputStreamReader;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        int n, k;\n        Scanner sc = new Scanner(new InputStreamReader(System.in));\n        while(sc.hasNext()) {\n            n = sc.nextInt();\n            k = sc.nextInt();\n            System.out.println(n + k);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tif (!sc.hasNextInt())\n\t\t\t\tbreak;\n\t\t\tSystem.out.print( sc.nextInt()+sc.nextInt()+\"\\n\");\n\t\t}\n\t\t\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1009_55__1_1009_123", "golden_code": "import java.util.Scanner;\npublic class Main{\n    public static void main(String[] args)\n    {\n      Scanner cin = new Scanner(System.in);\n      int x=0;\n      float n,sum=0;\n        while (x<12)\n        {\n            n=cin.nextFloat();\n            sum+=n;\n            x++;\n        }\n        float avg;\n        avg=sum/12;\n        System.out.printf(\"$%.02f\\n\",avg);\n        \n    }\n}\n", "generated_code": "import java.util.Scanner;\nclass Main {\n\tstatic boolean adj[]=new boolean [175000000];\n\t\n\tpublic static void main(String s[]) {\n\t\tScanner cin = new Scanner(System.in);\n\t\tdouble sum=0;\n\t\tfor(int i=0;i<12;i++)\n\t\t{\n\t\t\tdouble val=cin.nextDouble();\n\t\t\tsum+=val;\n\t\t}\n\t\tSystem.out.printf(\"$%.2f\\n\",sum/12);\n\t\tadj[0]=true;\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2847_33__1_1006_33", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int time = scanner.nextInt();\n    for (int i = 0 ; i < time ; i ++ ){\n      int n = scanner.nextInt();\n      double [] arr = new double[n];\n      for ( int j = 0 ; j < n ; j ++){\n        arr[j] = scanner.nextInt();\n      }\n      double min = arr[0];\n      double max = arr[0];\n      double sum = 0 ; \n      for (int j = 0 ; j < n ; j ++ ){\n        if (arr[j] < min  ){\n          min = arr[j];\n        }\n        if ( arr[j] > max){\n          max = arr[j];\n        }\n        sum +=arr[j];\n      }\n      \n      if( (min + max)/2 - sum/n < 1 && (min + max)/2 - sum/n > -1){\n        System.out.println(\"Yes\");\n      }else {\n        System.out.println(\"No\");\n      }\n    }\n  }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n       \tfloat c,sum;\n        Scanner in = new Scanner(System.in);\n\tc= in.nextFloat();\n\twhile(c != 0.0)\n\t{\n\t\tsum = 0;\n\t\tfor(int i=1;;i++)\n\t\t{\n\t\t\tsum += 1/(float)(i+1);\n\t\t\tif(sum>=c)\n\t\t\t{\n                            System.out.println(i +\" card(s)\");\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tc= in.nextFloat();\n\t}\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_56__1_1001_23", "golden_code": "import java.util.Scanner;\n\npublic class Main{\n\npublic static void main(String[] args)\n{\n\nScanner S = new Scanner(System.in);\n\nwhile(S.hasNext()){\n\nint i1 = S.nextInt();\nint i2 = S.nextInt();\n\nSystem.out.println(i1+i2);\n\n}\n\n}\n\n}", "generated_code": "\nimport java.util.*;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author Sina\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner scan=new Scanner(System.in);\n        while (scan.hasNextInt()){\n        int a=scan.nextInt();\n        int b=scan.nextInt();\n        System.out.println(a+b);\n        }\n    }\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_242__1_1001_187", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());}}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n    static Scanner input = new Scanner(System.in);\n    public static void main(String[] args) {\n        while(input.hasNextInt()){\n            System.out.println(input.nextInt() + input.nextInt());\n        }\n}\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_77__1_1001_143", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile (in.hasNextInt()) {\n\t\t\tint a = in.nextInt();\n\t\t\tint b = in.nextInt();\n\t\t\tSystem.out.println(a + b);\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scan = new Scanner(System.in);\n        while(scan.hasNext())\n            System.out.println(scan.nextInt()+scan.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_273__1_1001_250", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\n\t\t\n\t\tScanner scan = new Scanner(System.in);\n\t\t\n\t\tint a;\n\t\tint b;\n\t\tString s=\"\";\n\t\t\n\t\twhile(scan.hasNextLine()){\n\t\ts = scan.nextLine();\n\t\t\ta=Integer.parseInt(s.split(\" \")[0]);\n\t\t\tb=Integer.parseInt(s.split(\" \")[1]);\n\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t\t\n\t\t\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n\n   \n    public static void main(String[] args) {\n      \n        Scanner scanner =new Scanner(System.in);\n        while(scanner.hasNext() ){\n        int a=scanner.nextInt();\n        int b=scanner.nextInt();\n            System.out.println((a+b));\n     \n    }}\n    \n}", "score": 1.0}
{"id": "SHARE_1_2733_23__1_1324_9", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint testcase = sc.nextInt();\n\t\tint[][] p = new int[testcase][];\n\t\tint[][] w = new int[testcase][];\n\t\tchar[][]s = new char[testcase * 2][];\n\t\t\n\t\tfor (int i = 0; i < testcase; i++){\n\t\t\tint n  = sc.nextInt();\n\t\t\ts[i] = new char[2*n];\n\t\t\tp[i] = new int[n];\n\t\t\tw[i] = new int[n];\n\t\t\tfor (int j =0; j< n; j++){\n\t\t\t\tp[i][j] = sc.nextInt();\n\t\t\t}\n\t\t\t\n\t\t\tint pos = 0;\n\t\t\tint counter = 0;\n\t\t\t\n\t\t\twhile(counter < n){\n\t\t\t\tif(p[i][counter] > 0){\n\t\t\t\t\tfor (int a = 0; a< p[i][counter]; a++){\n\t\t\t\t\t\ts[i][pos] = '(';\n\t\t\t\t\t\tpos++;\n\t\t\t\t\t}\n\t\t\t\t\tint temp = p[i][counter];\n\t\t\t\t\tfor(int b = counter; b < n; b++){\n\t\t\t\t\t\tp[i][b] = p[i][b] - temp;\n\t\t\t\t\t}\n\t\t\t\t\ts[i][pos] = ')';\n\t\t\t\t\tpos++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ts[i][pos] = ')';\n\t\t\t\t\tpos++;\n\t\t\t\t}\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tint[][] pair = new int[testcase][3];\n\t\tfor(int m = 0; m < testcase; m++){\n\t\t\tpair[m] = new int[s[m].length];\n\t\t\tint k = 0;\n\t\t\tint[] tempArr = new int[s[m].length];\n\t\t\tint posarr = 0;\n\t\t\tint main_pos = 0;\n\t\t\twhile(k < s[m].length){\n\t\t\t\tif(s[m][k] == '('){\n\t\t\t\t\ttempArr[posarr] = 0;\n\t\t\t\t\tposarr++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tfor (int x = 0; x < posarr; x++){\n\t\t\t\t\t\ttempArr[x]++;\n\t\t\t\t\t}\n\t\t\t\t\tw[m][main_pos] = tempArr[posarr - 1];\n\t\t\t\t\tmain_pos++;\n\t\t\t\t\tposarr--;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tfor(int m = 0; m< testcase; m++){\n\t\t\tfor(int y = 0; y < w[m].length; y++){\n\t\t\t\tSystem.out.print(w[m][y]);\n\t\t\t\tif ( y != s[m].length - 1){\n\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\t\t\n\t\t\n\t\t\n\t\t\n\t}\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        int counter = 0;\n        Scanner s = new Scanner(System.in);\n        StringBuffer lst = new StringBuffer(s.nextLine());\n        while (!new String(lst).equals(\"STOP\")) {\n            counter++;\n            System.out.println(\"Dataset #\" + counter + \":  The initial order is \" + lst + \".\");\n            int n;\n            n = s.nextInt();\n            s.nextLine();\n            for (int i = 0; i < n; i++) {\n                boolean right;\n                String c = s.nextLine();\n                int plc = lst.indexOf(c);\n                lst.deleteCharAt(plc);\n                if (plc > (lst.length() / 2.0)) {\n                    right = true;\n                } else {\n                    right = false;\n                }\n                if (right) {\n                    int len = lst.length() - plc;\n                    char[] sch = new char[len];\n                    sch = lst.substring(plc, lst.length()).toCharArray();\n                    lst.delete(plc, lst.length());\n                    for (int k = len - 1; k >= 0; k--) {\n                        lst.append(sch[k]);\n                    }\n                } else {\n                    char[] sch = new char[plc];\n                    sch = lst.substring(0, plc).toCharArray();\n                    lst.delete(0, plc);\n                    for (int k = 0; k < plc; k++) {\n                        lst.insert(0, sch[k]);\n                    }\n                }\n                System.out.println(\"After \" + c + \" leaves, the order is \" + lst + \".\");\n            }\n            lst = new StringBuffer(s.nextLine());\n            if (!new String(lst).equals(\"STOP\")) {\n                System.out.println();\n            }\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2822_45__1_2822_74", "golden_code": "\nimport java.util.Scanner;\n\nclass Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.nextLine();\n        for (int i = 0; i < Integer.parseInt(s); i++) {\n            String ss2 = sc.nextLine();\n            int n = Integer.parseInt(ss2);\n            int s1 = 0, s2 = 0, s3 = 0;\n            for (int j = 1; j <= n; j++) {\n                s1 += j;\n            }\n            int k = 0;\n            int shomarande = 1;\n            while (k < n) {\n                if (shomarande % 2 != 0) {\n                    s2 += shomarande;\n                    k++;\n                }\n                shomarande++;\n            }\n            k = 0;\n            shomarande = 1;\n            while (k < n) {\n                if (shomarande % 2 == 0) {\n                    s3 += shomarande;\n                    k++;\n                }\n                shomarande++;\n            }\n            System.out.println(s1 + \" \" + s2 + \" \" + s3);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while (input.hasNext()) {\n            int n = Integer.valueOf(input.nextLine());\n            for (int j = 0; j < n; j++) {\n                int m = Integer.valueOf(input.nextLine());\n                int a = 0, o = 0, p = 0;\n                for (int i = 1; i <= m; i++) {\n                    a += i;\n                    p += (2 * i);\n                    o += (2 * i - 1);\n                }\n                System.out.println(a + \" \" + o + \" \" + p);\n            }\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1009_150__1_1006_108", "golden_code": "import java.util.Scanner;\npublic class Main{\n    static Scanner input=new Scanner(System.in);\n    public static void main(String[] args){\n        float sum=0,ave=0;\n        for(int i=0;i<12;i++){\n            float m=input.nextFloat();\n            sum+=m;\n        }\n        ave=(float)(sum/12.0);\n        System.out.printf(\"$%.2f\\n\",ave);\n    }\n}", "generated_code": "\nimport java.util.Scanner;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author elahe\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        float n = sc.nextFloat();\n        float s;\n        float i;\n        while(n!=0.00)\n        {\n            s=0;\n            for(i =2 ;s<n;i++ )\n            {\n                s+=1/i;\n            }\n            System.out.println((int)i-2+\" card(s)\");\n            n=sc.nextFloat();\n        }\n    }\n    \n}\n", "score": 0.0}
{"id": "SHARE_1_2124_35__1_2175_28", "golden_code": "import java.util.HashMap;\nimport java.util.Scanner;\nclass Main{\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tString p = in.nextLine();\n\t\tString k = in.nextLine();\n\t\tHashMap<Character, Character> map = new HashMap<Character,Character>();\n\t\tint size = p.length();\n\t\tfor (int i = 0;i<size;i++)\n\t\t\tmap.put(p.charAt(i), k.charAt(i));\n\t\tSystem.out.println(k);\n\t\tSystem.out.println(p);\n\t\twhile (in.hasNextLine()){\n\t\t\tString s = in.nextLine();\n\t\t\tString r = \"\";\n\t\t\tsize = s.length();\n\t\t\tfor (int i = 0;i<size;i++){\n\t\t\t\tchar c= s.charAt(i);\n\t\t\t\tif (map.containsKey(c))\n\t\t\t\t\tr+= map.get(c);\n\t\t\t\telse\n\t\t\t\t\tr+=c;\n\t\t\t}\n\t\t\tSystem.out.println(r);\n}}}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tint a=0, counter = 0;\n\t\tScanner s = new Scanner(System.in);\n\t\twhile (s.hasNext()) {\n\t\t\ta = s.nextInt();\n\t\t\tcounter = 0;\n\t\t\tint[] num = new int[a];\n\t\t\tint[] temp = new int[a - 1];\n\t\t\tfor (int i = 0; i < a; i++)\n\t\t\t\tnum[i] = s.nextInt();\n\t\t\tfor (int i = 0; i < a - 1; i++)\n\t\t\t\ttemp[i] = Math.abs(num[i] - num[i + 1]);\n\t\t\tfirst: for (int i = 1; i <= a - 1; i++)\n\t\t\t\tfor (int j = 0; j < a - 1; j++)\n\t\t\t\t\tif (temp[j] == i) {\n\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\tcontinue first;\n\t\t\t\t\t}\n\t\t\tif (counter == a - 1)\n\t\t\t\tSystem.out.println(\"Jolly\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"Not jolly\");\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2499_7__1_2499_18", "golden_code": "import java.util.Scanner;\n\n\npublic class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner inp = new Scanner(System.in);\n\t\tint a,b,c;\n\t\twhile(true)\n\t\t{\n\t\t\ta = inp.nextInt();\n\t\t\tb = inp.nextInt();\n\t\t\tc = inp.nextInt();\n\t\t\tif(a+b+c==0)break;\n\t\t\tString ans=\"\";\n\t\t\tif(mid(a,b,c))\n\t\t\t\tans+=(\"Mid-field\");\n\n\t\t\tif(forw(a,b,c))\n\t\t\t\tans+=(\" Forward\");\n\t\t\tif(def(a,b,c))\n\t\t\t\tans+=(\" Defense\");\n\t\t\t\n\t\t\tif(ans.equals(\"\"))\n\t\t\t\tSystem.out.println(\"No positions\");\n\t\t\telse\n\t\t\t\tSystem.out.println(ans.trim());\n\t\t\t\n\t\t}\n\n\t}\n\t\n\t\n\tstatic boolean mid(int a, int b, int c)\n\t{\n\t\tif(a<=30 && b>=70&&c>=500)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\tstatic boolean forw(int a, int b, int c)\n\t{\n\t\tif(a<=26 && b>=60&&c>=200)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\tstatic boolean def(int a, int b, int c)\n\t{\n\t\tif(a<=36 && b>=80&&c>=300)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\n}\n", "generated_code": "import java.util.*;\npublic class Main\n{\n    public static void main(String args[])\n    {\n        Scanner scan = new Scanner(System.in);\n        while(true)\n        {\n            int a = scan.nextInt();\n            int b = scan.nextInt();\n            int c = scan.nextInt();\n            if(a == 0 && b == 0 && c == 0)\n                break;\n            boolean ok = false;\n            if(a <= 30 && b >= 70 && c >= 500)\n            {\n                System.out.print(\"Mid-field\");\n                ok = true;\n            }\n            if(a <= 26 && b >= 60 && c >= 200)\n            {\n                if(ok)\n                    System.out.print(\" \");\n                System.out.print(\"Forward\");\n                ok = true;\n            }\n            if(a <= 36 && b >= 80 && c >= 300)\n            {\n                if(ok)\n                    System.out.print(\" \");\n                System.out.print(\"Defense\");\n                ok = true;\n            }\n            if(!ok)\n                System.out.print(\"No positions\");\n            System.out.println();\n\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2740_2__1_2811_45", "golden_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\n/**\n * Created by ali on 10/16/14.\n */\npublic class Main\n{\n\tpublic static void main(String [] args)\n\t{\n\t\tScanner in = new Scanner(System.in);\n\n\t\tint tc = in.nextInt();\n\t\tint v = 1;\n\n\t\twhile(tc-- > 0)\n\t\t{\n\t\t\tint need = in.nextInt();\n\t\t\tint cnt = in.nextInt();\n\n\t\t\tint [] fr = new int[cnt];\n\n\t\t\tfor(int i = 0 ; i < cnt ; i++)\n\t\t\t\tfr[i] = in.nextInt();\n\n\t\t\tArrays.sort(fr);\n\t\t\tint at = cnt-1;\n\n\t\t\tint res = 0;\n\t\t\twhile(need > 0 && at >= 0)\n\t\t\t{\n\t\t\t\tres++;\n\t\t\t\tneed -= fr[at];\n\t\t\t\tat--;\n\t\t\t}\n\n\t\t\tSystem.out.println(\"Scenario #\"+(v)+\":\");\n\t\t\tv++;\n\t\t\tif(need > 0)\n\t\t\t{\n\n\t\t\t\tSystem.out.println(\"impossible\");\n\t\t\t}\n\t\t\telse\n\t\t\t\tSystem.out.println(res);\n\n\n\t\t}\n\t}\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static boolean isIn(int i, int arr[]) {\n        boolean isIn = false;\n        for (int j = 0; j < arr.length; j++) {\n            if (arr[j] == i) {\n                isIn = true;\n            }\n        }\n        return isIn;\n\n    }\n\n    public static void main(String[] args) {\n\n        Scanner s = new Scanner(System.in);\n\n        int n = s.nextInt();\n        int a, b, arrA[], arrB[];\n\n        while (n > 0) {\n            a = s.nextInt();\n            b = s.nextInt();\n            arrA = new int[a];\n            arrB = new int[b];\n            int res[] = new int[a];\n            for (int i = 0; i < a; i++) {\n                arrA[i] = s.nextInt();\n            }\n\n            for (int i = 0; i < b; i++) {\n                arrB[i] = s.nextInt();\n            }\n\n            int len = 0;\n\n            for (int i = 0; i < a; i++) {\n                if (!isIn(arrA[i] , arrB)) {\n                    res[len] = arrA[i];\n                    len++;\n                }\n            }\n            \n            for (int i = 0; i < len; i++) {\n                for (int j = i; j < len; j++) {\n                    if(res[i]>res[j]){\n                        int t = res[i];\n                        res[i] = res[j];\n                        res[j] = t;\n                    }\n                }\n            }\n            \n            \n            \n            for (int i = 0; i < len; i++) {\n                if (i != len - 1) {\n                    System.out.print(res[i] + \",\");\n                } else {\n                    System.out.print(res[i]);\n                }\n            }\n            System.out.println(\"\");\n            len = 0;\n            n--;\n        }\n\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2257_11__1_2732_16", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String [] args){\n        int t=0;\n        int s;\n        int d;\n        int x=0;\n        int y=0,sum=0;\n        Scanner in=new Scanner (System.in);\n        t=in.nextInt();\n        for(int i=0;i<t;i++){\n         s=in.nextInt();\n         d=in.nextInt();\n         if(s<d){\n             System.out.println(\"impossible\");\n         }\n         else{\n            sum=s+d;\n            if(sum%2==0){\n              x=sum/2;\n              y=s-x;\n                System.out.println(x+\" \"+y);\n            }\n            else{\n               System.out.println(\"impossible\");  \n            }\n         }\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\n/**\n *\n * @author seyyed Heydar\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        int lineNumber;\n        Scanner input=new Scanner(System.in);\n        lineNumber=input.nextInt();\n        for(int i=0;i<lineNumber;i++){\n            int x1,x2;\n            int y1,y2;\n            int x=input.nextInt();\n            int y=input.nextInt();\n            if((x%2)==0){\n                x=x/2;\n                if(x==0){\n                    x1=0;\n                    x2=0;\n                }\n                else{\n                    x1=4*x-2;\n                    x2=4*x;\n                }\n            }\n            else{\n                x=x/2;\n                if(x==0){\n                    x1=1;\n                    x2=1;\n                }\n                else{\n                    x1=4*x-1;\n                    x2=4*x+1;\n                }\n            }\n            if((y%2)==0){\n                y=y/2;\n                y1=4*y;\n                y2=4*y+2;\n            }\n            else{\n                y=y/2;\n                y1=4*y+1;\n                y2=4*y+3;\n            }\n//            System.out.println(x1+\" \"+x2);\n//            System.out.println(y1+\" \"+y2);\n            if(x1==y1||x1==y2){\n                System.out.println(x1);\n            }\n            else if(x2==y1||x2==y2){\n                System.out.println(x2);\n            }\n            else{\n                System.out.println(\"No Number\");\n            }\n            \n        }\n        // TODO code application logic here\n    }\n}", "score": 0.0}
{"id": "SHARE_1_2371_4__1_2371_31", "golden_code": "import java.util.Scanner;\nclass Main{\n\tpublic static void main(String []args){\n\t\tScanner scan=new Scanner(System.in);\n\t\tint a,b,c;\n\t\twhile (scan.hasNextInt()){\n\t\t\ta=scan.nextInt();\n\t\t\tb=((a+2)*(a+1)*(a))/6;\n\t\t\tif ((a % 2)==0)\n\t\t\t\tc=((a)*(a+2)*(2*a-1))/24;\n\t\t\telse \n\t\t\t\tc=((a-1)*(a+1)*(2*a+3))/24;\n\t\t\tb=b+c;\n\t\t\tSystem.out.println(b);\n\t\t\t}\n\t\t}\n\t}\n\t\t\t", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner s=new Scanner(System.in);\n        while(s.hasNextInt()){\n            int x=s.nextInt();\n            System.out.printf(\"%d\\n\",(x*(x+2)*(2*x+1)/8));\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1659_48__1_1079_1", "golden_code": "import java.text.DecimalFormat;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n    static float t=0,temp=1,m=0;;\n    public static void main(String[] args) {\n        Main l=new Main();\n        Scanner scn=new Scanner(System.in);\n        DecimalFormat dc=new DecimalFormat(\"0.00\");\n        float n=0;\n        while (scn.hasNext()) {\n            \n            float next = scn.nextFloat();\n            if (next==999) {\n                System.out.println(\"End of Output\");\n                System.exit(0);\n            }\n            m=next;\n            n=l.tem(next);t=m;\n            if (temp>2) {\n                 System.out.println(dc.format(n));\n            }\n            \n        }\n        \n        \n        \n    }\n    public float tem(float a){\n        t=a-t;temp++;\n        return t;\n        \n    }\n    \n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) throws Exception {\n\t\tScanner input = new Scanner(System.in);\n\t\tint f = input.nextInt();\n\t\tSystem.out.println(\"PERFECTION OUTPUT\");\n\t\twhile (f != 0) {\n\t\t\tint sum = 0;\n\t\t\tArrayList<Integer> l = new ArrayList<Integer>();\n\t\t\tfor (int i = 1; i < f; i++)\n\t\t\t\tif (f % i == 0) {\n\t\t\t\t\tif (!l.contains(i)) {\n\t\t\t\t\t\tsum += i;\n\t\t\t\t\t\tif (f / i != i && f/i != f) {\n\t\t\t\t\t\t\tsum += f / i;\n\t\t\t\t\t\t\tl.add(f / i);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tl.add(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tif (sum > f)\n\t\t\t\tSystem.out.println(p(f) + \"  ABUNDANT\");\n\t\t\telse if (sum == f)\n\t\t\t\tSystem.out.println(p(f) + \"  PERFECT\");\n\t\t\telse\n\t\t\t\tSystem.out.println(p(f) + \"  DEFICIENT\");\n\t\t\tf = input.nextInt();\n\t\t}\n\t\tSystem.out.println(\"END OF OUTPUT\");\n\t}\n\n\tstatic String p(int f) {\n\t\tString s = f + \"\";\n\t\twhile (s.length() < 5)\n\t\t\ts = \" \" + s;\n\t\treturn s;\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1001_335__1_1001_205", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {            \n            System.out.println(in.nextInt()+in.nextInt());\n        }\n    }\n    \n}\n", "generated_code": "import java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s= new Scanner(System.in);\n        while(s.hasNext()){\n            int a = s.nextInt();\n            int b = s.nextInt();\n            int res = a+b;\n            System.out.println(res);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2549_22__1_2554_12", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main{\n\n    static Scanner in = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int a = 1, b = 1, c;\n        String p, q, t[], r[], m = \"\";\n        while (a != 0 || b != 0) {\n            a = in.nextInt();\n            b = in.nextInt();\n            p = Integer.toBinaryString(a);\n            q = Integer.toBinaryString(b);\n            m = \"\";\n            for (int i = 0; i < Math.abs(p.length() - q.length()); i++) {\n                m += \"0\";\n            }\n            if (p.length() > q.length()) {\n                m = m + q;\n                q = m;\n            } else if (p.length() < q.length()) {\n                m = m + p;\n                p = m;\n            }\n            t = new String[p.length()];\n            r = new String[q.length()];\n            for (int j = q.length() - 1; j >= 0; j--) {\n                r[j] = \"\" + q.charAt(j);\n            }\n            for (int j = p.length() - 1; j >= 0; j--) {\n                t[j] = \"\" + p.charAt(j);\n            }\n            for (int i = 0; i < r.length; i++) {\n                if (r[i].equals(\"1\")) {\n                    if (t[i].equals(\"1\")) {\n                        t[i] = \"\" + '2';\n                    } else {\n                        t[i] = \"\" + '1';\n                    }\n                }\n            }\n            int sag[] = new int[t.length + 1];\n            for (int i = 1; i < t.length + 1; i++) {\n                sag[i] = Integer.parseInt(t[i - 1]);\n            }\n            boolean f = false;\n            while (!f) {\n                f = true;\n                for (int i = sag.length - 1; i >= 0; i--) {\n                    if (i == sag.length - 1) {\n                        if (sag[i] == 2) {\n                            sag[i] = 0;\n                            sag[i - 1] += 1;\n\n                        }\n\n                    } else {\n                        if (sag[i] == 2 || sag[i] == 3) {\n                            sag[i - 1] += 1;\n                            sag[i + 1] += 1;\n                            if (sag[i] == 3) {\n                                sag[i] = 1;\n                            }\n                            if (sag[i] == 2) {\n                                sag[i] = 0;\n                            }\n\n\n                        }\n                    }\n                }\n                for (int j = 0; j < sag.length; j++) {\n                    if (sag[j] == 2) {\n                        f = false;\n                        break;\n                    }\n                }\n            }\n            int jamshid = 1;\n            int sum = 0;\n            for (int i = sag.length - 1; i >= 0; i--) {\n                sum += jamshid * sag[i];\n                jamshid *= 2;\n            }\n            if(sum!=0)\n            System.out.println(sum);\n           \n\n            }\n        }\n    }\n", "generated_code": "import java.util.*;\n\npublic class Main {\n    static class Node {\n        Node parent;\n        String name = \"\", condition = \"\";\n        int level = 0, relation = 0;\n\n        Node(String s, Node p, int r) {\n            this.name = s;\n            this.parent = p;\n            this.relation = r;\n            if (this.parent != null)\n                this.level = (this.parent).level + 1;\n        }\n    }\n\n    static class N_list {\n        public static ArrayList<Node> node_list = new ArrayList<>();\n        public static ArrayList<String> answer = new ArrayList<>();\n    }\n\n    public static void input1_parse(String s) {\n        String[] command = new String[0], mandatory = new String[0], or = new String[0], xor = new String[0];\n        s = s.trim().replaceAll(\"\\\\s+\", \"\");\n        Node root = null;\n        if (!(s.contains(\"=\"))) {\n            root = new Node(s, null, -1);\n            root.level = 0;\n            N_list.node_list.add(root);\n        }\n        else {\n            command = s.split(\"=\", 2);\n            String children = command[1];\n            if (N_list.node_list.size() == 0) {\n                root = new Node(command[0], null, -1);\n                root.level = 0;\n                N_list.node_list.add(root);\n            }\n            else {\n                boolean is_new = true;\n                for (int i = 0; i < N_list.node_list.size(); i++)\n                    if (N_list.node_list.get(i).name.equals(command[0])) {\n                        is_new = false;\n                        root = N_list.node_list.get(i);\n                    }\n                if (is_new == true) {\n                    root = new Node(command[0], null, -1);\n                    root.level = 0;\n                    N_list.node_list.add(root);\n                }\n            }\n\n            if (children.contains(\"+\")) {\n                mandatory = children.split(\"\\\\+\", 0);\n                for (int i = 0; i < mandatory.length; i++) {\n                    boolean is_new = true;\n                    for (int j = 0; j < N_list.node_list.size(); j++) {\n                        if (mandatory[i].equals(N_list.node_list.get(j).name)) {\n                            is_new = false;\n                            N_list.node_list.get(j).parent = root;\n                            N_list.node_list.get(j).relation = 0;\n                            N_list.node_list.get(j).level = root.level + 1;\n                            break;\n                        }\n                        if (mandatory[i].equals('?' + N_list.node_list.get(j).name)) {\n                            is_new = false;\n                            N_list.node_list.get(j).parent = root;\n                            N_list.node_list.get(j).relation = 3;\n                            N_list.node_list.get(j).level = root.level + 1;\n                            break;\n                        }\n                    }\n\n                    if (is_new == false) {\n                        if (mandatory[i].charAt(0) == '?')\n                            change_level(mandatory[i].substring(1, mandatory[i].length()));\n                        else\n                            change_level(mandatory[i]);\n                    }\n                    if (is_new == true) {\n                        for (int j = 0; j < N_list.node_list.size(); j++)\n                            if ((N_list.node_list.get(j).name).equals(command[0])) {\n                                Node child = new Node(mandatory[i], N_list.node_list.get(j), 0);\n                                if (mandatory[i].charAt(0) == '?') {\n                                    child.relation = 3;\n                                    child.name = mandatory[i].substring(1, mandatory[i].length());\n                                }\n                                N_list.node_list.add(child);\n                                break;\n                            }\n                    }\n                }\n            }\n            if (children.contains(\"|\")) {\n                or = children.split(\"\\\\|\", 0);\n                for (int i = 0; i < or.length; i++) {\n                    boolean is_new = true;\n                    for (int j = 0; j < N_list.node_list.size(); j++) {\n                        if (or[i].equals(N_list.node_list.get(j).name)) {\n                            is_new = false;\n                            N_list.node_list.get(j).parent = root;\n                            N_list.node_list.get(j).relation = 1;\n                            N_list.node_list.get(j).level = root.level + 1;\n                            break;\n                        }\n                    }\n                    if (is_new == false)\n                        change_level(or[i]);\n\n                    if (is_new == true) {\n                        for (int j = 0; j < N_list.node_list.size(); j++)\n                            if ((N_list.node_list.get(j).name).equals(command[0])) {\n                                Node child = new Node(or[i], N_list.node_list.get(j), 1);\n                                N_list.node_list.add(child);\n                                break;\n                            }\n                    }\n                }\n            }\n            if (children.contains(\"^\")) {\n                xor = children.split(\"\\\\^\", 0);\n                for (int i = 0; i < xor.length; i++) {\n                    boolean is_new = true;\n                    for (int j = 0; j < N_list.node_list.size(); j++) {\n                        if (xor[i].equals(N_list.node_list.get(j).name)) {\n                            is_new = false;\n                            N_list.node_list.get(j).parent = root;\n                            N_list.node_list.get(j).relation = 2;\n                            N_list.node_list.get(j).level = root.level + 1;\n                            break;\n                        }\n                    }\n                    if (is_new == false)\n                        change_level(xor[i]);\n\n                    if (is_new == true) {\n                        for (int j = 0; j < N_list.node_list.size(); j++)\n                            if ((N_list.node_list.get(j).name).equals(command[0])) {\n                                Node child = new Node(xor[i], N_list.node_list.get(j), 2);\n                                N_list.node_list.add(child);\n                                break;\n                            }\n                    }\n                }\n            }\n            if (!((children.contains(\"^\") || (children.contains(\"|\")) || (children.contains(\"+\"))))) {\n                boolean is_new = true;\n                for (int i = 0; i < N_list.node_list.size(); i++) {\n                    if (N_list.node_list.get(i).name.equals(children)) {\n                        is_new = false;\n                        N_list.node_list.get(i).parent = root;\n                        N_list.node_list.get(i).relation = 0;\n                        N_list.node_list.get(i).level = root.level + 1;\n                        break;\n                    }\n                    if (('?' + N_list.node_list.get(i).name).equals(children)) {\n                        is_new = false;\n                        N_list.node_list.get(i).parent = root;\n                        N_list.node_list.get(i).relation = 3;\n                        N_list.node_list.get(i).level = root.level + 1;\n                        break;\n                    }\n                }\n                if (is_new == false) {\n                    if (children.charAt(0) == '?')\n                        change_level(children.substring(1, children.length()));\n                    else\n                        change_level(children);\n                }\n                if (is_new == true) {\n                    for (int i = 0; i < N_list.node_list.size(); i++) {\n                        if ((N_list.node_list.get(i).name).equals(command[0])) {\n                            Node child = new Node(children, N_list.node_list.get(i), 0);\n                            if (children.charAt(0) == '?') {\n                                child.relation = 3;\n                                child.name = children.substring(1, children.length());\n                            }\n                            N_list.node_list.add(child);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    public static void input2_parse(String s) {\n        String[] test = new String[0];\n        s = s.trim().replaceAll(\"\\\\s+\", \"\");\n        s = s.substring(1, s.length() - 1);\n        test = s.split(\",\", 0);\n        N_list.answer.add(check(test));\n    }\n\n    public static void input1_convert(ArrayList<String> arr1) {\n        for (int i = 0; i < arr1.size(); i++)\n            input1_parse(arr1.get(i));\n    }\n\n    public static void input2_convert(ArrayList<String> arr2) {\n        for (int i = 0; i < arr2.size(); i++) {\n            input2_parse(arr2.get(i));\n            for (int j = 0; j < N_list.node_list.size(); j++)\n                N_list.node_list.get(j).condition = \"\";\n        }\n    }\n\n    public static void change_level(String p) {\n        for (int i = 0; i < N_list.node_list.size(); i++)\n            if (N_list.node_list.get(i).parent != null && p.equals(N_list.node_list.get(i).parent.name)) {\n                N_list.node_list.get(i).level = N_list.node_list.get(i).parent.level + 1;\n                change_level(N_list.node_list.get(i).name);\n            }\n    }\n\n    public static String check(String[] arr) {\n        int start_level = 0;\n        for (int i = 0; i < N_list.node_list.size(); i++)\n            start_level = Math.max(start_level, N_list.node_list.get(i).level);\n\n        for (int i = start_level; i >= 0; i--) {\n            for (int j = 0; j < N_list.node_list.size(); j++) {\n                Node c_node = N_list.node_list.get(j);\n                int r = c_node.relation;\n                boolean found_same = false;\n                if (c_node.level == i) {\n                    for (int k = 0; k < arr.length; k++) {\n                        if (arr[k].equals(c_node.name)) {\n                            found_same = true;\n                            if (r == -1) {\n                                if (c_node.condition.equals(\"unused\"))\n                                    return \"Invalid\";\n                                else\n                                    c_node.condition = \"used\";\n                            }\n                            if (r == 0 || r == 3 || r == 1) {\n                                if (c_node.condition.equals(\"unused\") || c_node.parent.condition.equals(\"unused\"))\n                                    return \"Invalid\";\n                                else {\n                                    c_node.condition = \"used\";\n                                    (c_node.parent).condition = \"used\";\n                                }\n                                break;\n                            }\n                            if (r == 2) {\n                                if (c_node.condition.equals(\"unused\") || c_node.parent.condition.equals(\"unused\"))\n                                    return \"Invalid\";\n                                else {\n                                    (c_node.parent).condition = \"used\";\n                                    for (int l = 1; l < N_list.node_list.size(); l++)\n                                        if (N_list.node_list.get(l).parent.equals(c_node.parent) && N_list.node_list.get(l).relation == 2)\n                                            N_list.node_list.get(l).condition = \"unused\";\n                                    c_node.condition = \"used\";\n                                }\n                                break;\n                            }\n                            break;\n                        }\n                    }\n\n                    if (!found_same) {\n                        if (c_node.condition.equals(\"used\") || c_node.parent == null)\n                            return \"Invalid\";\n                        else if (c_node.parent.condition.equals(\"used\") && r == 0)\n                            return \"Invalid\";\n                        else {\n                            if (r == -1)\n                                return \"Invalid\";\n                            if (r == 0) {\n                                c_node.condition = \"unused\";\n                                (c_node.parent).condition = \"unused\";\n                            }\n                            else\n                                c_node.condition = \"unused\";\n                        }\n                    }\n                }\n            }\n        }\n\n        for (int i = 0; i < N_list.node_list.size(); i++) {\n            Node c_node = N_list.node_list.get(i);\n            int or_child = 0, xor_child = 0;\n            boolean has_or_child = false, has_xor_child = false;\n            if (c_node.condition.equals(\"used\")) {\n                for (int l = 1; l < N_list.node_list.size(); l++) {\n                    Node child = N_list.node_list.get(l);\n                    if (child.parent.equals(c_node)) {\n                        if (child.relation == 2) {\n                            if (child.condition.equals(\"used\"))\n                                xor_child++;\n                            has_xor_child = true;\n                        }\n                        if (child.relation == 1) {\n                            if (child.condition.equals(\"used\"))\n                                or_child++;\n                            has_or_child = true;\n                        }\n                    }\n                }\n            }\n            if ((has_or_child && or_child == 0) || (has_xor_child && xor_child != 1))\n                return \"Invalid\";\n        }\n        return \"Valid\";\n    }\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        String command = \"\";\n        boolean input1_done = false;\n        ArrayList<String> input1 = new ArrayList<>();\n        ArrayList<String> input2 = new ArrayList<>();\n\n        while (!(command.equals(\"###\"))) {\n            command = input.nextLine();\n            if (!(command.equals(\"#\")) && !input1_done)\n                input1.add(command);\n            if (command.equals(\"#\")) {\n                input1_convert(input1);\n                input1.removeAll(input1);\n                input1_done = true;\n            }\n\n            if (!(command.equals(\"##\")) && !(command.equals(\"#\")) && input1_done)\n                input2.add(command);\n            if (command.equals(\"##\")) {\n                input2_convert(input2);\n                N_list.answer.add(\"+++\");\n                input2.removeAll(input2);\n                N_list.node_list.removeAll(N_list.node_list);\n                input1_done = false;\n            }\n        }\n        for (int i = 0; i < N_list.answer.size(); i++)\n            System.out.println(N_list.answer.get(i));\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1018_33__1_1018_44", "golden_code": "//In The Name of Allah\n\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in_kb = new Scanner(System.in);\n\t\tshort n = in_kb.nextShort();\n\t\tshort A, B;\n\t\tif (n != 0) {\n\t\t\tboolean is = true;\n\t\t\tdo {\n\t\t\t\tA = 0;\n\t\t\t\tB = 0;\n\t\t\t\tshort[] a = new short[n];\n\t\t\t\tfor (short i = 0; i < a.length; i++) {\n\t\t\t\t\ta[i] = in_kb.nextShort();\n\t\t\t\t}\n\t\t\t\tshort[] b = new short[n];\n\t\t\t\tfor (short i = 0; i < b.length; i++) {\n\t\t\t\t\tb[i] = in_kb.nextShort();\n\t\t\t\t}\n\t\t\t\tfor (short i = 0; i < n; i++) {\n\t\t\t\t\tif ((a[i] + b[i]) == 3) {\n\t\t\t\t\t\tif (a[i] == 1)\n\t\t\t\t\t\t\tA += 6;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tB += 6;\n\t\t\t\t\t} else if ((a[i] - b[i]) == 1)\n\t\t\t\t\t\tB += (a[i] + b[i]);\n\t\t\t\t\telse if ((b[i] - a[i]) == 1)\n\t\t\t\t\t\tA += (a[i] + b[i]);\n\t\t\t\t\telse if (a[i] > b[i])\n\t\t\t\t\t\tA += a[i];\n\t\t\t\t\telse if (b[i] > a[i])\n\t\t\t\t\t\tB += b[i];\n\t\t\t\t}\n\t\t\t\tSystem.out.print(\"A has \" + A + \" points. B has \" + B\n\t\t\t\t\t\t+ \" points.\\n\");\n\t\t\t\tn = in_kb.nextShort();\n\t\t\t\tif (n != 0)\n\t\t\t\t\tSystem.out.print(\"\\n\");\n\t\t\t} while (n != 0);\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\nclass Main\n{\npublic static void main(String[] args)\n{\n    int result1=0,result2=0;\n    boolean ok = false ;\n    Scanner scan=new Scanner(System.in);\n    while(true)\n    {\n    result1=0;result2=0;\n    int n=scan.nextInt();\n    if(n==0)\n    break;\n    if(ok)\n    {\n    \tSystem.out.println();\n    }\n    ok = true ;\t\n    int[] array1=new int[n];\n    int[] array2=new int[n];\n    for(int i=0;i<n;i++)\n    array1[i]=scan.nextInt();\n    for(int j=0;j<n;j++)\n    array2[j]=scan.nextInt();\n    for(int k=0;k<n;k++)\n    {\n        if(array1[k]==1 & array2[k]==2)\n        {\n            result1=6;\n            array1[k]=0;\n            array2[k]=0;\n        }\n        if(array1[k]==2 &array2[k]==1)\n        {\n            result2=6;\n            array2[k]=0;\n            array1[k]=0;\n        }\n        if(array1[k]-array2[k]==1)\n        result2=array1[k]+array2[k]+result2;\n        if(array2[k]-array1[k]==1)\n        result1=result1+array1[k]+array2[k];\n        if(array1[k]-array2[k]>1)\n        result1=array1[k]+result1;\n        if(array2[k]-array1[k]>1)\n        result2=array2[k]+result2;\n    }\n    System.out.println(\"A has \"+result1+\" points. B has \"+result2+\" points.\");\n}\n}\n}", "score": 1.0}
{"id": "SHARE_1_1001_293__1_1001_380", "golden_code": "import java.util.*;\n\npublic class Main{\n\tpublic static void main(String args[]){\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext())\n\t\t\tSystem.out.println(in.nextInt() + in.nextInt());\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tint m, n;\n\tpublic static void main(String[] args) {\n\t\tMain p = new Main();\n\t\tp.run();\n\t}\n\tpublic void run(){\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext()){\n\t\t\tn = in.nextInt();\n\t\t\tm = in.nextInt();\n\t\t\tSystem.out.println(n+m);\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_11__1_1001_343", "golden_code": "import java.util.*;\n\npublic class Main\n{\n  public static void main(String[] args)\n  {\n    Scanner scan = new Scanner(System.in);\n    \n    while(scan.hasNextInt())\n    {\n      System.out.println(scan.nextInt() + scan.nextInt());\n    }\n  }\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {\n            int a = in.nextInt();\n            int b = in.nextInt();\n            a = a + b;\n            System.out.println(a);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2717_34__1_1319_76", "golden_code": "import java.util.Collection;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tCollection<String> lines = getLines();\n\t\t\n\t\tIterator<String> linesIt = lines.iterator();\n\t\twhile (linesIt.hasNext())\n\t\t{\n\t\t\tint length = Integer.parseInt(linesIt.next());\n\t\t\tString answer = getSeps(linesIt.next(), linesIt.next());\n\t\t\tString comp = linesIt.next();\n\t\t\t\n\t\t\tint counter = 1;\n\t\t\twhile(!comp.equals(answer))\n\t\t\t{\n\t\t\t\tif (counter == 50)\n\t\t\t\t\tbreak;\n\t\t\t\tanswer = getSeps(answer.substring(0, length), answer.substring(length, length * 2));\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t\tSystem.out.println(counter == 50? -1 : counter);\n\t\t}\n\t}\n\n\tstatic String getSeps(String a1, String a2)\n\t{\n\t\tchar[] c1 = a1.toCharArray();\n\t\tchar[] c2 = a2.toCharArray();\n\t\t\n\t\tint cc1 = 0;\n\t\tint cc2 = 0;\n\t\t\n\t\tStringBuilder res = new StringBuilder();\n\t\t\n\t\tfor (int i = 0; i < a1.length() + a2.length(); i++)\n\t\t{\n\t\t\tif (i % 2 == 0)\n\t\t\t\tres.append(c2[cc2++]);\n\t\t\telse\n\t\t\t\tres.append(c1[cc1++]);\n\t\t}\n\t\t\n\t\treturn res.toString();\n\t}\n\t\n\tpublic static Collection<String> getLines()\n\t{\n\t\tLinkedList<String> ints = new LinkedList<String>();\n\t\tScanner sc = gScan();\n\t\tString line;\n\t\twhile (!(line = sc.nextLine()).equals(\"0\"))\n\t\t{\n\t\t\tline = line.trim();\n\t\t\tints.add(line);\n\t\t}\n\t\treturn ints;\n\t}\n\t\n\tpublic static Scanner gScan()\n\t{\n\t\treturn new Scanner(System.in);\n\t}\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        boolean aaaa = true;\n        while (sc.hasNext()) {\n            String s = sc.nextLine();\n            String[] arr = s.split(\" \");\n            int[] ar = new int[arr.length];\n            for (int i = 0; i < arr.length; i++) {\n                ar[i] = Integer.parseInt(arr[i]);\n            }\n            boolean bb = true;\n            for (int i = 0; i < ar.length; i++) {\n                if (ar[i] >= 5280) {\n                    bb = false;\n                    break;\n                }\n            }\n            if (!bb) {\n                break;\n            }\n            if (aaaa) {\n                aaaa = false;\n            } else {\n                System.out.println(\"\");\n            }\n            for (int i = 1; i < ar.length; i++) {\n                if (i == 1) {\n                    if (ar[i] == ar[0]) {\n                        System.out.println(\"Moving from 0 to \" + ar[i] + \": found it!\");\n                        break;\n                    }\n                    if (abs(ar[0] - 0) == abs(ar[i] - ar[0])) {\n                        System.out.println(\"Moving from 0 to \" + ar[1] + \": same.\");\n                    } else if (abs(ar[0] - 0) < abs(ar[i] - ar[0])) {\n                        System.out.println(\"Moving from 0 to \" + ar[1] + \": colder.\");\n                    } else {\n                        System.out.println(\"Moving from 0 to \" + ar[1] + \": warmer.\");\n                    }\n                } else if (i < ar.length - 1) {\n                    if (ar[i] == ar[0]) {\n                        System.out.println(\"Moving from \" + ar[i - 1] + \" to \" + ar[i] + \": found it!\");\n                        break;\n                    }\n                    if (abs(ar[0] - ar[i - 1]) == abs(ar[i] - ar[0])) {\n                        System.out.println(\"Moving from \" + ar[i - 1] + \" to \" + ar[i] + \": same.\");\n                    } else if (abs(ar[0] - ar[i - 1]) < abs(ar[i] - ar[0])) {\n                        System.out.println(\"Moving from \" + ar[i - 1] + \" to \" + ar[i] + \": colder.\");\n                    } else {\n                        System.out.println(\"Moving from \" + ar[i - 1] + \" to \" + ar[i] + \": warmer.\");\n                    }\n                } else {\n                    if (ar[i] == ar[0]) {\n                        System.out.println(\"Moving from \" + ar[i - 1] + \" to \" + ar[i] + \": found it!\");\n                    }\n                }\n\n            }\n        }\n    }\n\n    static int abs(int a) {\n        if (a > 0) {\n            return a;\n        } else {\n            return a * -1;\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_378__1_1001_494", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main (String[] args) {\n        Scanner in = new Scanner(System.in);\n        \n        while (in.hasNextInt()) {\n            System.out.println(in.nextInt() + in.nextInt());\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_101073_35__1_1320_14", "golden_code": "import java.util.* ;\nimport java.lang.* ;\nclass Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner (System.in) ;\n\t\tint a = scan.nextInt() ;\n\t\twhile ( a!=0 ) {\n\t\t\ta-- ;\n\t\t\tint n = scan.nextInt() ;\n\t\t\tint [] array = new int [n] ;\n\t\t\tfor ( int i=0 ; i<n ; i++ ) {\n\t\t\t\tarray[i] = scan.nextInt() ;\n\t\t\t}\n\t\t\tint min = array[0] ;\n\t\t\tint max = array[0] ;\n\t\t\tfor ( int i=1 ; i<n ; i++ ) {\n\t\t\t\tif ( array[i] < min ) {\n\t\t\t\t\tmin = array[i] ;\n\t\t\t\t}\n\t\t\t\tif ( array[i] > max ) {\n\t\t\t\t\tmax = array[i] ;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println( 2*(max - min) ) ;\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\nimport java.util.Vector;\n\npublic class Main {\n    static Scanner scanner = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int cards;\n        int card[][];\n        int pattern[][];\n        int game = 0;\n        Vector<Integer> integers;\n        StringBuffer stringBuffer = new StringBuffer(\"\");\n        stringBuffer.append(scanner.next());\n        stringBuffer.append(scanner.next());\n        stringBuffer.append(scanner.next());\n        stringBuffer.append(scanner.next());\n        stringBuffer.append(scanner.next());\n        cards = scanner.nextInt();\n        while (cards != 0) {\n            if (game != 0) System.out.println();\n            else game = 1;\n            integers = new Vector<Integer>();\n            for (int i = 0; i < 25; i++) {\n                if (stringBuffer.charAt(i) == 'X')\n                    integers.addElement(i);\n            }\n            card = new int[cards][25];\n            for (int j = 0; j < cards; j++) {\n                for (int l = 0; l < 25; l++) {\n                    card[j][l] = scanner.nextInt();\n                }\n            }\n            pattern = new int[cards][integers.size()];\n            for (int j = 0; j < cards; j++) {\n                for (int l = 0; l < integers.size(); l++) {\n                    pattern[j][l] = card[j][integers.get(l)];\n                }\n            }\n            int temp;\n            for (int i = 0; i < cards; i++) {\n                for (int j = 0; j < integers.size() - 1; j++) {\n                    for (int k = j + 1; k < integers.size(); k++) {\n                        if (pattern[i][j] > pattern[i][k]) {\n                            temp = pattern[i][j];\n                            pattern[i][j] = pattern[i][k];\n                            pattern[i][k] = temp;\n                        }\n                    }\n                }\n            }\n            int i, j, k;\n            System.out.print(\"Game \" + game);\n            boolean equivalent = true;\n            for (i = 1; i < cards; i++) {\n                for (j = i - 1; j >= 0; j--) {\n                    for (k = 0; k < integers.size(); k++) {\n                        if (pattern[i][k] != pattern[i - j - 1][k]) {\n                            equivalent = false;\n                            break;\n                        }\n                    }\n                    if (equivalent) {\n                        System.out.println();\n                        System.out.print(\"Card \" + (i + 1) + \" is equivalent to card \" + (i - j));\n                        break;\n                    }\n                    equivalent = true;\n                }\n            }\n            game++;\n            stringBuffer = new StringBuffer(\"\");\n            stringBuffer.append(scanner.next());\n            stringBuffer.append(scanner.next());\n            stringBuffer.append(scanner.next());\n            stringBuffer.append(scanner.next());\n            stringBuffer.append(scanner.next());\n            cards = scanner.nextInt();\n            //if (cards != 0)\n            System.out.println();\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2561_2__1_2400_11", "golden_code": "import java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Hashtable;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.Queue;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.io.BufferedReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.io.InputStream;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tScanner scan = new Scanner(System.in);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n}\n\nclass TaskC {\n\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\n\t\tint t = 0;\n\t\twhile (true) {\n\t\t\tint n = in.nextInt(), k1 = in.nextInt(), k2 = in.nextInt(), a[] = new int[n];\n\t\t\tif (n == 0 && k1 == 0 && k2 == 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tt++;\n\t\t\tout.println(\"Case \" + t);\n\t\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\t\ta[i] = in.nextInt();\n\t\t\t}\n\t\t\tint min = 0, max = 0, temp = a[0], id = 0, b[] = new int[k1], c[] = new int[k2], f = 0;\n\t\t\tfor (int i = 0; i < k1; i++) {\n\t\t\t\tfor (int j = 0; j < a.length; j++) {\n\t\t\t\t\tif (a[j] < temp && a[j] != -1) {\n\t\t\t\t\t\tid = j;\n\t\t\t\t\t\ttemp = a[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tb[f++] = id + 1;\n\t\t\t\ta[id] = -1;\n\t\t\t\ttemp = Integer.MAX_VALUE;\n\t\t\t}\n\t\t\ttemp = -1;\n\t\t\tid = -1;\n\t\t\tf = 0;\n\t\t\tfor (int i = 0; i < k2; i++) {\n\t\t\t\tfor (int j = a.length - 1; j >= 0; j--) {\n\t\t\t\t\tif (a[j] > temp && a[j] != -1) {\n\t\t\t\t\t\tid = j;\n\t\t\t\t\t\ttemp = a[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tc[f++] = id + 1;\n\t\t\t\ta[id] = -1;\n\t\t\t\ttemp = -1;\n\t\t\t}\n\t\t\tArrays.sort(b);\n\t\t\tArrays.sort(c);\n\t\t\tfor (int i = 0; i < b.length; i++) {\n\t\t\t\tout.print(b[i]);\n\t\t\t\tif (b.length - i > 1) {\n\t\t\t\t\tout.print(\" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tout.println();\n\t\t\tfor (int i = c.length - 1; i >= 0; i--) {\n\t\t\t\tout.print(c[i]);\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tout.print(\" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tout.println();\n\t\t}\n\t}\n}\n\nclass InputReader {\n\tBufferedReader br;\n\tStringTokenizer st;\n\n\tpublic InputReader(InputStream in) {\n\t\tbr = new BufferedReader(new InputStreamReader(in));\n\t\tst = null;\n\t}\n\n\tpublic String next() {\n\t\twhile (st == null || !st.hasMoreTokens()) {\n\t\t\ttry {\n\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn st.nextToken();\n\t}\n\n\tpublic int nextInt() {\n\t\treturn Integer.parseInt(next());\n\t}\n\n\tpublic long nextLong() {\n\t\treturn Long.parseLong(next());\n\t}\n\n\tpublic float nextFloat() {\n\t\treturn Float.parseFloat(next());\n\t}\n\n\tpublic double nextDouble() {\n\t\treturn Double.parseDouble(next());\n\t}\n}", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n    \n    public static void main(String[] args){\n        Scanner input=new Scanner(System.in);  \n        \n      int n;\n      \n      while(input.hasNext()){\n         n=input.nextInt();\n         \n         if((n+2) % 4 ==0)\n              System.out.println(\"yes\");\n         else\n              System.out.println(\"no\");\n      }\n        \n    }\n}", "score": 0.0}
{"id": "SHARE_1_1009_93__1_1009_116", "golden_code": "import java.text.DecimalFormat;\nimport java.util.Scanner;\npublic class Main{\n    public static void main(String[]args){\n        Scanner x=new Scanner(System.in);\n        while(x.hasNext()){\n        float a[]=new float[12];\n        float sum=0;\n        for(int i=0;i<a.length;i++){\n            a[i]=x.nextFloat();\n            sum+=a[i];\n        }\n        DecimalFormat df=new DecimalFormat(\"###.##\");\n        System.out.println(\"$\"+df.format(sum/12));\n    }\n   }\n}", "generated_code": "import java.util.*;\nclass Main {\n\t//static boolean adj[]=new boolean [300000000];\n\t\n\tpublic static void main(String s[]) {\n\t\tScanner cin = new Scanner(System.in);\n\t\tdouble sum=0;\n\t\tfor(int i=0;i<12;i++)\n\t\t{\n\t\t\tdouble val=cin.nextDouble();\n\t\t\tsum+=val;\n\t\t}\n\t\tSystem.out.printf(\"$%.2f\\n\",sum/12);\n\t\t//adj[0]=true;\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2791_7__1_2791_11", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while(input.hasNext()){\n            int a = input.nextInt();\n            int b = input.nextInt();\n            int c = input.nextInt();\n            int d = input.nextInt();\n            if( a==0 && b==0 && c==0 && d==0)\n               break;\n            System.out.println(Math.abs(b-c) + \" \" + Math.abs(a-d));\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\twhile(true){\n\t\tint a= input.nextInt();\n\t\tint b= input.nextInt();\n\t\tint c= input.nextInt();\n\t\tint d= input.nextInt();\n\t\tif(a==0&&b==0&&c==0&&d==0) break;\n\t\tif(a<b){\n\t\t\tif(c<d){\n\t\t\t\tSystem.out.println((c-b)+\" \"+(d-a));\n\t\t\t}else{\n\t\t\t\tSystem.out.println((d-b)+\" \"+(c-a));\n\t\t\t}\n\t\t}else{\n\t\t\tif(c<d){\n\t\t\t\tSystem.out.println((c-a)+\" \"+(d-b));\n\t\t\t}else{\n\t\t\t\tSystem.out.println((d-a)+\" \"+(c-b));\n\t\t\t}\n\t\t}\n\t}\n\n}\n}\n", "score": 1.0}
{"id": "SHARE_1_1662_11__1_2549_7", "golden_code": "\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author mohre\n */\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        Map<String, Integer> count = new HashMap<String, Integer>();\n        while(input.hasNext()){\n            String thisL = input.nextLine();\n            String[] sep = thisL.split(\"[- ,.;\\''\\\"()/:]+\");\n            \n            for (String t : sep) {\n                t = t.toLowerCase();\n                if (!t.matches(\"[a-zA-Z0-9]+\"))\n                    continue;\n                if (count.containsKey(t)){\n                    count.put(t, count.get(t) + 1);\n                }else {\n                    count.put(t, 1);\n                }\n            }\n            if (thisL.equals(\"TTTTTT\")) {\n                break;\n            }\n        }\n        ArrayList<String> result = new ArrayList<String>();\n        int biggest = -1;\n        for (String t : count.keySet()) {\n            if (count.get(t).compareTo(biggest) > 0) {\n                result.clear();\n                result.add(t);\n                biggest = count.get(t);\n            }else if (count.get(t).equals(biggest)) {\n                result.add(t);\n            }\n        }\n        String[] res = result.toArray(new String[0]);\n        Arrays.sort(res);\n        System.out.println(biggest + \" occurrences\");\n        for (String t : res) {\n            if (t.isEmpty())\n                continue;\n            System.out.println(t);\n        }\n    }\n}\n", "generated_code": "\n\nimport java.util.Scanner;\npublic class Main{\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int a, b;\n        a = s.nextInt();\n        b = s.nextInt();\n        while (true) {\n        \tif(a==0 && b==0)break;\n            int counter=1;\n            char[] c = new char[8];\n            String astr = Integer.toBinaryString(a);\n            for (int i = astr.length(); i < 8; i++) {\n                astr = new StringBuffer(astr).insert(0, \"0\").toString();\n            }\n            String bstr = Integer.toBinaryString(b);\n            for (int i = bstr.length(); i < 8; i++) {\n                bstr = new StringBuffer(bstr).insert(0, \"0\").toString();\n            }\n            for (int i = 0; i < 8; i++) {\n                c[i] = (char) ((((int) astr.charAt(i) - 48) + ((int) bstr.charAt(i) - 48)) + 48);\n            }\n             while(counter>0) {\n                counter = 0;\n                for (int i = 0; i < 8; i++) {\n                    if (c[i] == '2' && i == 7) {\n                        c[i - 1] += 1;\n                        c[i] = '0';\n                        counter++;\n                    } \n                    else if (c[i] == '2') {\n                        c[i - 1] += 1;\n                        c[i + 1] += 1;\n                        c[i] = '0';\n                        counter++;\n                    }\n                }\n            }\n            System.out.println(Integer.valueOf(new String(c), 2));\n            a = s.nextInt();\n            b = s.nextInt();\n        }\n    }\n}\n\n", "score": 0.0}
{"id": "SHARE_1_1001_299__1_1001_426", "golden_code": "import java.util.*;\n\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner s = new Scanner(System.in);\n\t\twhile(s.hasNext()){\n\t\t\tint a = s.nextInt();\n\t\t\tint b = s.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n}", "generated_code": "import java.awt.CardLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.FileDialog;\nimport java.awt.LayoutManager;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.font.NumericShaper;\nimport java.awt.image.BufferedImage;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.Queue;\nimport java.util.Random;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.Stack;\nimport java.util.TreeSet;\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\n\nimport org.omg.Messaging.SyncScopeHelper;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FilenameFilter;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.io.InputStream;\nimport java.lang.reflect.Array;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n}\n\nclass TaskC {\n\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile (scan.hasNext()) {\n\t\t\tSystem.out.println(scan.nextInt() + scan.nextInt());\n\t\t}\n\t}\n}\n\nclass InputReader {\n\tBufferedReader br;\n\tStringTokenizer st;\n\n\tpublic InputReader(InputStream in) {\n\t\tbr = new BufferedReader(new InputStreamReader(in));\n\t\tst = null;\n\t}\n\n\tpublic String next() {\n\t\twhile (st == null || !st.hasMoreTokens()) {\n\t\t\ttry {\n\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn st.nextToken();\n\t}\n\n\tpublic int nextInt() {\n\t\treturn Integer.parseInt(next());\n\t}\n\n\tpublic long nextLong() {\n\t\treturn Long.parseLong(next());\n\t}\n\n\tpublic float nextFloat() {\n\t\treturn Float.parseFloat(next());\n\t}\n\n\tpublic double nextDouble() {\n\t\treturn Double.parseDouble(next());\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_39__1_1001_176", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        int a,b;\n        Scanner scan=new Scanner(System.in);\n        while(scan.hasNext())\n        {\n            a=scan.nextInt();\n            b=scan.nextInt();\n            System.out.println(a+b);\n        }\n    }\n\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) throws Exception{\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_210__1_1001_406", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\t    Scanner input = new Scanner(System.in);\n        do {\n            try {\n            System.out.print(input.nextInt() + input.nextInt() + \"\\n\");\n            }\n            catch (RuntimeException exmp)\n            {\n                System.exit(0);\n            }\n        \n        }\n        \n        while (true);\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String []args)\n\t{\n\t\tScanner input=new Scanner(System.in);\n\t\t\n\t\twhile(input.hasNext())\n\t\t{\n\t\tint a=input.nextInt();\n\t\tint b=input.nextInt();\n\t\t\n\t\t\tSystem.out.println(a+b);}\n\t\t\t\n\t\tinput.close();\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_2027_13__1_1266_21", "golden_code": "\nimport java.awt.Point;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.regex.Pattern;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n/**\n *\n * @author Mojtaba\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        StringBuilder sb = new StringBuilder();\n\n        int t = in.nextInt();\n        in.nextLine();\n        for (int i = 0; i < t; i++) {\n            String line = in.nextLine();\n            StringBuilder internal = new StringBuilder();\n            while (line.length() > 0) {\n                internal.append(F((line.substring(0, 8)))).append(\".\");\n                line = line.substring(8);\n            }\n            sb.append(internal.toString().substring(0, internal.toString().length() - 1)).append(\"\\n\");\n        }\n\n        System.out.println(sb.toString().trim());\n    }\n\n    private static int F(String binary) {\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum *= 2;\n            if (binary.charAt(i) == '1') {\n                sum += 1;\n            }\n        }\n        return sum;\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n//ShareCode\n\npublic class Main{\n    public static void main(String args[]){\n        Scanner cin=new Scanner(System.in);\n        int data=cin.nextInt();\n        for(int i=0;i<data;i++){\n            int n=cin.nextInt();\n            String bin=\"\";\n            while(n>0){\n                bin+=\"\"+n%2;\n                n/=2;\n            }\n            bin+=n;\n           // System.out.println(\"bin: \"+bin);\n            for(int j=0;j<bin.length();j++){\n                if(bin.charAt(j)=='1'){\n                    System.out.print(j);\n                    if(j!=bin.length()-2)\n                    System.out.print(\" \");\n                }\n            }\n            System.out.println(\"\");\n        }\n    }//main Method\n}//Class Main", "score": 0.0}
{"id": "SHARE_1_109016_34__1_2064_7", "golden_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\n\tpublic static class point {\n\t\tpublic double x;\n\t\tpublic double y;\n\t\tpoint(double xx,double yy){\n\t\t\tx=xx;\n\t\t\ty=yy;\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) throws IOException {\n\n\t\tBufferedReader reader=new BufferedReader(new InputStreamReader(System.in));\n\t\tint n;\n\t\tpoint[] ps=null;\n\t\twhile(true){\n\t\t\tn=Integer.parseInt(reader.readLine());\n\t\t\tif(n==0)\n\t\t\t\tbreak;\n\t\t\tps=new point[n];\n\t\t\tdouble x, y;\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tString str=reader.readLine();\n\t\t\t\tString[] A=str.split(\" \");\n\t\t\t\tx=Double.parseDouble(A[0]);\n\t\t\t\ty=Double.parseDouble(A[1]);\n\t\t\t\tpoint temp=new point(x,y);\n\t\t\t\tps[i]=temp;\n\t\t\t}\n\n\t\t\tpoint[] x_ordered=new point[n],y_ordered=new point[n];\n\t\t\tMergeSort(ps,x_ordered,0,n-1,0);\n\t\t\tMergeSort(ps,y_ordered,0,n-1,1);\n\n\t\t\tdouble diameter=ClosestPairDistance(x_ordered,y_ordered);\n\t\t\tSystem.out.printf(\"%.2f\\n\",(diameter/2));\n\t\t}\n\n\t}\n\n\tpublic static void MergeSort(point[] ps, point[] temp, int left, int right, int flag){\n\t\tif(right>left){\n\t\t\tint mid=(right+left)/2;\n\t\t\tMergeSort(ps,temp,left,mid,flag);\n\t\t\tMergeSort(ps,temp,mid+1,right,flag);\n\t\t\tmerge(ps,temp,left,mid+1,right,flag);\n\t\t}\n\t}\n\n\tpublic static void merge(point[] ps, point[] temp, int left, int mid, int right, int flag){\n\n\t\tint left_end=mid-1;\n\t\tint t=left;\n\t\tint num=right-left+1;\n\t\twhile((left<=left_end)&&(mid<=right)){\n\t\t\tif(flag==0){\n\t\t\t\tif(ps[left].x<=ps[mid].x)\n\t\t\t\t\ttemp[t++]=ps[left++];\n\t\t\t\telse\n\t\t\t\t\ttemp[t++]=ps[mid++];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(ps[left].y<=ps[mid].y)\n\t\t\t\t\ttemp[t++]=ps[left++];\n\t\t\t\telse\n\t\t\t\t\ttemp[t++]=ps[mid++];\n\t\t\t}\n\t\t}\n\t\twhile(left<=left_end)\n\t\t\ttemp[t++]=ps[left++];\n\t\twhile(mid<=right)\n\t\t\ttemp[t++]=ps[mid++];\n\t\tfor(int y=0;y<num;y++){\n\t\t\tps[right]=temp[right];\n\t\t\tright=right-1;\n\t\t}\n\t}\n\n\tpublic static double ClosestPairDistance(point[] x_ordered, point[] y_ordered){\n\t\tdouble d_min=0;\n\t\tdouble d_min_sq=1000000;\n\t\tdouble dl=0,dr=0;\n\t\tint n=x_ordered.length;\n\t\tif(n<=3){\n\t\t\tfor(int u=0;u<n;u++){\n\t\t\t\tint v=u+1;\n\t\t\t\twhile(v<n){\n\t\t\t\t\td_min_sq=Math.min(d_min_sq,(Math.pow(x_ordered[u].y-x_ordered[v].y,2))+(Math.pow(x_ordered[u].x-x_ordered[v].x,2)));\n\t\t\t\t\tv++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tint mid;\n\t\t\tif(n%2==0)\n\t\t\t\tmid=n/2;\n\t\t\telse\n\t\t\t\tmid=n/2+1;\n\t\t\tpoint[] x_l=new point[mid+1];\n\t\t\tpoint[] x_r=new point[n-mid+1];\n\t\t\tpoint[] y_l=new point[mid+1];\n\t\t\tpoint[] y_r=new point[n-mid+1];\n\t\t\tSystem.arraycopy(x_ordered,0,x_l,0,mid+1);\n\t\t\tSystem.arraycopy(x_ordered,mid-1,x_r,0,n-mid+1);\n\t\t\tSystem.arraycopy(y_ordered,0,y_l,0,mid+1);\n\t\t\tSystem.arraycopy(y_ordered,mid-1,y_r,0,n-mid+1);\n\t\t\tdl=ClosestPairDistance(x_l,y_l);\n\t\t\tdr=ClosestPairDistance(x_r,y_r);\n\t\t\td_min=Math.min(dl,dr);\n\t\t\tVector<point> S=new Vector<point>();\n\t\t\tdouble m=x_ordered[mid-1].x;\n\t\t\tfor(int a=0;a<y_ordered.length;a++)\n\t\t\t\tif(Math.abs((y_ordered[a].x)-m)<d_min)\n\t\t\t\t\tS.add(y_ordered[a]);\n\t\t\td_min_sq=Math.pow(d_min,2);\n\t\t\tfor(int u=0;u<S.size()-1;u++){\n\t\t\t\tint v=u+1;\n\t\t\t\twhile((v<S.size())&&((Math.pow(S.elementAt(v).y-S.elementAt(u).y,2))<=d_min_sq)){\n\t\t\t\t\td_min_sq=Math.min(d_min_sq,(Math.pow(S.elementAt(v).x-S.elementAt(u).x,2))+(Math.pow(S.elementAt(v).y-S.elementAt(u).y,2)));\n\t\t\t\t\tv++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Math.sqrt(d_min_sq);\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\t\n\t    static Scanner in = new Scanner(System.in);\n\t    \n\t        static boolean isprime(int n) {\n\t        \t        int counter = 0;\n\t        \t                if(n==0||n==1)return false;\n\t        \t                        for (int i = 2; i * i <= n; i++) {\n\t        \t                        \t            if (n % i == 0) {\n\t        \t                        \t            \t                return false;\n\t        \t                        \t            }\n\t        \t                        }\n\t        \t                        \n\t        \t                                return true;\n\t        \t                                \n\t        }\n\t        \n\t            public static void main(String[] args) {\n\t            \t        while (true) {\n\t            \t        \t            int m=0;\n\t            \t        \t                        int n = in.nextInt();\n\t            \t        \t                                    if(n==0)break;\n\t            \t        \t                                                for (int i = 0; i <= n / 2; i++) {\n\t            \t        \t                                                \t                if (isprime(n-i) && isprime(i)) {\n\t            \t        \t                                                \t                \t                    m++;\n\t            \t        \t                                                \t                \t                                        System.out.println(n + \" = \" + i + \" + \" + (n - i));\n\t            \t        \t                                                \t                \t                                                            break;\n\t            \t        \t                                                \t                }\n\t            \t        \t                                                }\n\t            \t        \t                                                                if(m==0){\n\t            \t        \t                                                                \t                    System.out.println(\"`Goldbach's conjecture is wrong.\");\n\t            \t        \t                                                                }\n\t            \t        }\n\t            }\n}\n", "score": 0.0}
{"id": "SHARE_1_101073_19__1_101073_31", "golden_code": "\nimport java.util.Scanner;\n\n\npublic class Main {\n    public static void main(String[] args){\n        Scanner in=new Scanner(System.in);\n        int t=in.nextInt();\n        for(int i=0;i<t;i++){\n            int n=in.nextInt();\n            if(n==1)\n            {\n                int p=in.nextInt();\n                System.out.println(0);\n            }\n            else\n            {\n                int k=in.nextInt();\n                int b=k;\n                for(int j=1;j<n;j++){\n                    int l=in.nextInt();\n                    if(l<k)\n                        k=l;\n                    if(l>b)\n                        b=l;\n                }\n                System.out.println(2*(b-k));\n            }\n        }\n    }\n}\n", "generated_code": "\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n\npublic class Main{\n    static Scanner in=new Scanner(System.in);\n    public static void main(String[] args) {\n        int p,x,a[];\n        p=in.nextInt();\n        for(int i=0;i<p;i++){\n            x=in.nextInt();\n            a=new int [x];\n            for(int j=0;j<x;j++){\n                a[j]=in.nextInt();\n            }\n            Arrays.sort(a);\n            System.out.println((a[a.length-1]-a[0])*2);\n        }\n    }\n \n}\n", "score": 1.0}
{"id": "SHARE_1_1319_41__1_101147_6", "golden_code": "import java.util.* ;\nimport java.lang.*;\nclass Main\n{\n//--------------------------------------------------------------------\n\tpublic static int abs( int a )\n\t{\n\t\tif ( a>=0 ) {\n\t\t\treturn (a) ;\n\t\t}\n\t\telse {\n\t\t\treturn (-a) ;\t\n\t\t}\t\n\t}\t\n\n//--------------------------------------------------------------------\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner (System.in) ;\n\t\tint a ;\n\t\tString arman ;\n\t\tint i=1 ;\n\t\tint x , y ;\n\t\tboolean ok = false ;\n\t\tint b=1 ; \n\t\t\n\t\twhile ( true ) {\n\t\t\t\n\t\t\ta = scan.nextInt() ;\n\t\t\ti=1 ;\n\t\t\tif ( a == 5280 ) {\n\t\t\t\tbreak ;\n\t\t\t}\t\n\t\t\tarman = scan.nextLine() ;\n\t\t\tStringTokenizer A = new StringTokenizer( arman , \" \" , false ) ;\n\t\t\tint [] array = new int [ A.countTokens()+1 ] ;\n\t\t\tif ( A.countTokens() > 20 ) {\n\t\t\t\tbreak ;\n\t\t\t}\t\n\t\t\tarray[0] = 0 ;\n\t\t\twhile ( A.hasMoreTokens() ) {\n\t\t\t\tarray[i] = Integer.parseInt ( A.nextToken() ) ;\n\t\t\t\ti++ ;\n\t\t\t}\n\t\t\ti=0 ;\n\t\t\tif ( ok ) {\n\t\t\t\tSystem.out.println() ;\n\t\t\t}\n\t\t\tok = true ;\t\n\t\t\tfor ( i=0 ; i<array.length-1 ; i++ ) {\n\t\t\t\tx = abs ( array[i+1] - a ) ;\n\t\t\t\ty = abs ( array[i] - a ) ;\n\t\t\t\tif ( a == array[i+1] ) {\n\t\t\t\t\tSystem.out.println( \"Moving from \"+array[i]+\" to \"+array[i+1]+\": found it!\" ) ;\n\t\t\t\t\tbreak ;\n\t\t\t\t}\n\t\t\t\telse {\t\n\t\t\t\t\tif ( x == y ) {\n\t\t\t\t\t\tSystem.out.println( \"Moving from \"+array[i]+\" to \"+array[i+1]+\": same.\" ) ;\n\t\t\t\t\t}\t\n\t\t\t\t\telse if ( x>y ) {\n\t\t\t\t\t\tSystem.out.println( \"Moving from \"+array[i]+\" to \"+array[i+1]+\": colder.\" ) ;\n\t\t\t\t\t}\n\t\t\t\t\telse if ( x<y ) {\n\t\t\t\t\t\tSystem.out.println( \"Moving from \"+array[i]+\" to \"+array[i+1]+\": warmer.\" ) ;\n\t\t\t\t\t}\n\t\t\t\t}\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n}\n\n\t\t\t", "generated_code": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in=new Scanner(System.in);\n        for(int j=1; ;j++){\n            int n=in.nextInt();\n            if(n==0)break;\n            int arr[]=new int[n];\n            int count;\n            boolean b=false;\n            for(int i=0;i<n;i++)\n                arr[i]=in.nextInt();\n            for(int k=1;k<n;k++)\n                if(arr[k]!=arr[0])\n                    b=true;\n            if(b)\n                l:for(count=1;count<=1000;count++){\n                    int p=arr[0];\n                    for(int i=0;i<n;i++){\n                        if(i!=n-1)\n                            arr[i]=Math.abs(arr[i]-arr[i+1]);\n                        if(i==n-1)\n                            arr[i]=Math.abs(p-arr[i]);\n                    }\n                    for(int i=1;i<n;i++)\n                        if(arr[i]!=arr[0])\n                            continue l;\n                    break l;\n                }\n            else\n                count=0;\n            if(count>1000)\n                System.out.println(\"Case \"+j+\": not attained\");\n            else\n                System.out.println(\"Case \"+j+\": \"+count+\" iterations\");\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_109017_3__1_106021_10", "golden_code": "import java.util.*;\npublic class Main\n{\n\tstatic Scanner scan = new Scanner(System.in);\n\tpublic static void main(String[] args)\n    {\n\t\twhile(scan.hasNext())\n\t\t{\n\t\t\tString s = scan.next();\n\t\t\tif(s.equals(\"0\"))\n\t\t\t\tbreak;\n\t\t\tint n = 0 ;\n\t\t\tfor(int i = 0 ; i < s.length() ; i++)\n\t\t\t\tn+=(s.charAt(i)-'0');\n\t\t\tSystem.out.println((n%9==0) ? 9 : n%9);\n\t\t}\n    }\n}", "generated_code": "import java.io.PrintWriter;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String ... args){\n        Scanner in=new Scanner(System.in);\n        PrintWriter sout=new PrintWriter(System.out);\n        int i=0;\n        while(true){\n            i=in.nextInt();\n            if(i==-1)break;\n            String str=\"\";\n            for(;i>0;i--){\n                String s=\"\";\n                int a=in.nextInt();\n                for(int j=0;j<16;j++,a/=2)\n                    s=(a%2)+s;\n                str=str+s;\n            }\n            long ja=0;\n            for(int j=0,k=0;j<str.length();j++){\n                k=j%7;\n                if(k!=0)\n                    switch(str.charAt(j-k)){\n                        case '0':\n                            ja+=Integer.parseInt(str.charAt(j)+\"\")*Math.pow(2, 6-k);\n                            break;\n                        case '1':\n                            ja-=Integer.parseInt(str.charAt(j)+\"\")*Math.pow(2, 6-k);\n                            break;\n                    }\n            }\n            sout.printf(\"%d\\n\",ja);\n        }\n        sout.flush();\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1230_1__1_1104_61", "golden_code": "import java.util.Scanner;\npublic class Main \n{\n    public static void main (String[] args)\n    {\n        Scanner scan =new Scanner(System.in);\n        String S = scan.nextLine();\n        \n        int r =0;\n        while(!\"0\".equals(S))\n        {\n            do\n            {\n                char[] s = S.toCharArray();\n                r=0;\n                for (int i=0; i<s.length;i++ )\n                {\n                    r += Integer.parseInt(String.valueOf(s[i]));\n                }\n                S = String.valueOf(r);\n            }while(r>=10);\n            System.out.println(r);\n            S = scan.nextLine();\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        int a=Integer.parseInt(input.nextLine());\n        String str=\"\";\n        for (int i = 0; i < a; i++) {\n            str=\"\";\n            str=input.nextLine();\n            System.out.println(new StringBuffer(str).reverse().toString());\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1725_4__1_1010_9", "golden_code": "\nimport java.awt.Point;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.math.BigInteger;\nimport java.text.DecimalFormat;\nimport java.util.AbstractSet;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.regex.Pattern;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n/**\n *\n * @author Mojtaba\n */\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        //BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        Scanner in = new Scanner(System.in);\n        StringBuilder sb = new StringBuilder();\n        int t = in.nextInt();\n        for (int ii = 0; ii < t; ii++) {\n            int n = in.nextInt();\n            int sum = 0;\n            boolean[] lock = new boolean[n + 1];\n\n            for (int j = 2; j <= n; j++) {\n                for (int k = j; k <= n; k += j) {\n                    lock[k] = !lock[k];\n                }\n            }\n            for (int j = 1; j <= n; j++) {\n                if (!lock[j]) {\n                    sum++;\n                }\n            }\n            sb.append(sum).append(\"\\n\");\n        }\n\n        System.out.println(sb.toString().trim());\n    }\n}", "generated_code": "import java.util.Scanner;\n\n\nclass Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint num = sc.nextInt() ;\n\t\tfor (int i = 1; i <= num; i++) {\n\t\t\tdouble x = sc.nextDouble();\n\t\t\tdouble y = sc.nextDouble();\n\t\t\tint j = 0;\n\t\t\twhile((100*++j/Math.PI)<(x*x+y*y));\n\t\t\tSystem.out.println(\"Property \"+i+\": This property will begin eroding in year \"+j+\".\");\n\t\t}\n\t\tSystem.out.println(\"END OF OUTPUT.\");\n\t\tsc.close();\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_2733_7__1_1322_5", "golden_code": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\n\n/**\n *\n * @author RezaM\n */\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(System.out);\n\n        int tc = Integer.parseInt(br.readLine());\n\n        for (int i = 0; i < tc; i++) {\n\n            int n = Integer.parseInt(br.readLine());\n            StringTokenizer stt = new StringTokenizer(br.readLine());\n\n            String result = \"\";\n            int lp = 0;\n\n            int[] rary = new int[n];\n\n            for (int j = 0; j < n; j++) {\n\n                int flp = Integer.parseInt(stt.nextToken());\n\n                int remind = flp - lp;\n\n                for (int k = 0; k < remind; k++) {\n                    result += \"(\";\n                }\n\n                result += \")\";\n                rary[j] = result.length() - 1;\n                lp = flp;\n            }\n\n            int resary[]=new int[n];\n\n            for (int j = 0; j < n; j++) {\n\n                int rp = rary[j];\n                int count = 1;\n                for (int k = rp - 1; k >= 0; k--) {\n                    if (result.charAt(k) == '(') {\n                        count--;\n                    } else {\n                        count++;\n                    }\n                    if (count == 0) {\n                        int number=0;\n                        for (int l = k+1; l <= rp; l++) {\n                            if(result.charAt(l)==')')\n                                number++;\n                        }\n                        resary[j]=number;\n                        break;\n                    }\n                }\n\n            }\n            \n            out.print(resary[0]);\n            for (int j = 1; j < n; j++) {\n                out.print(\" \"+resary[j]);\n            }\n            \n            out.println();\n            \n        }\n        out.close();\n    }\n\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static int g[] = { 1, 5, 7, 6, 2, 8, 3, 0, 9, 4 };\n    public static int G( int j ){\n        return g[j];\n    }\n    \n    public static int F( int i, int j ){\n        \n        switch( i ){\n            case 0:\n                return j;\n            case 1:\n                return G(j);\n            default:\n                return F( i - 1, G( j ) );\n        }\n    }\n    \n    public static int mod ( int i, int j ){\n        if( i < 0 )\n            return i % j + j;\n        return i % j;\n    }\n    \n    public static int X ( int i, int j ){\n        if( i < 5 && j < 5 )\n            return mod(( i + j ) , 5);\n        if( i < 5 && j >= 5 )\n            return mod(( i + ( j - 5 ) ) , 5) + 5;\n        if( i >= 5 && j < 5)\n            return mod(( (i - 5) - j ) , 5) + 5;\n        return mod(( i - j ) , 5);\n    }\n    \n    public static int toBase10( String ID ){\n        int result = 0, i, pow = 1;\n        \n        for( i = ID.length() - 1; i > -1; i-- ){\n            result += (ID.charAt(i) - 48) * pow;\n            pow *= 5;\n        }\n        return result;\n    }\n    \n    public static String getJob( char c ){\n        switch( c ){\n            case '0':\n            case '1':\n                return \"athlete\";\n                        \n            case '2':\n            case '3':\n                return \"reserve\";\n                            \n            case '4':\n            case '5':\n                return \"judge\";\n            \n            case '6':\n            case '7':\n                return \"staff\";\n            \n            case '8':\n            case '9':\n                return \"press\";\n                \n            default:\n                return \"ERROR\";\n        }\n    }\n    \n    public static int getIDpro( String s ){\n        \n        int cnt = 6, result = F( 0, s.charAt(7) - 48 ) ;\n        while( cnt >= 0 ){\n            result = X( result, F( 7 - cnt, s.charAt(cnt)-48 ) );\n            cnt--;\n        }\n        return result;\n    }\n    \n    public static void isValid( String strBase5CharID ){\n        \n        int intBase10, IDpro = Integer.MAX_VALUE;\n        String strBase5NumID, strBase10NumID;\n                \n        strBase5NumID = strBase5CharID.replace( 'V', '4').replace( 'W', '3').replace( 'X', '2').replace( 'Y', '1').replace( 'Z', '0');\n        intBase10 = toBase10( strBase5NumID );\n        strBase10NumID = Integer.toString( intBase10 );\n        \n        if( strBase10NumID.length() > 8 ){\n            System.out.printf( \"%s/%s is invalid id number\", strBase5CharID, strBase10NumID );\n        }else{\n            while( strBase10NumID.length() < 8 ){\n                strBase10NumID = \"0\".concat( strBase10NumID );\n            }\n            \n            IDpro = getIDpro( strBase10NumID );\n            System.out.printf( \"%s/%s is \", strBase5CharID, strBase10NumID);\n            if( IDpro == 0 )\n                System.out.printf( \"valid %s id number\\n\", getJob( strBase10NumID.charAt(0) ) );\n            else\n                System.out.printf( \"invalid id number\\n\" );\n        }\n        \n    }\n    \n    public static void main(String[] args) {\n        int n, i;\n        \n        Scanner input = new Scanner( System.in );\n        \n        n = input.nextInt();\n        for( i = 0; i < n; i++ ){\n            isValid( input.next() );\n        }\n        \n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_412__1_1660_35", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile(scan.hasNext()) {\n\t\t\tint a = scan.nextInt();\n\t\t\tint b= scan.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n\n}\n", "generated_code": "\nimport java.awt.Point;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.math.BigInteger;\nimport java.util.AbstractSet;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.regex.Pattern;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n/**\n *\n * @author Mojtaba\n */\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        StringBuilder sb = new StringBuilder();\n        while (true) {\n            StringTokenizer tokenizer;\n            try {\n                tokenizer = new StringTokenizer(reader.readLine());\n            } catch (Exception e) {\n                break;\n            }\n            int n = Integer.parseInt(tokenizer.nextToken());\n            ArrayList<Team> teams = new ArrayList<Team>();\n            for (int i = 0; i < n; i++) {\n                tokenizer = new StringTokenizer(reader.readLine());\n                String name = tokenizer.nextToken();\n                Point[] points = new Point[4];\n                for (int j = 0; j < 4; j++) {\n                    int x = Integer.parseInt(tokenizer.nextToken());\n                    int y = Integer.parseInt(tokenizer.nextToken());\n                    points[j] = new Point(x, y);\n                }\n                teams.add(new Team(name, points));\n            }\n            Collections.sort(teams);\n            //System.err.println(teams.get(teams.size() - 1).toString());\n            sb.append(teams.get(teams.size() - 1).toString()).append(\"\\n\");\n        }\n        System.out.println(sb.toString().trim());\n    }\n\n    static <T> List<List<T>> getSublists(List<T> list) {\n        if (list.isEmpty()) {\n            return Collections.singletonList(list);\n        } else {\n            List<List<T>> sublists = new ArrayList<List<T>>();\n            T first = list.get(0);\n            for (List<T> sublist : getSublists(list.subList(1, list.size()))) {\n                List<T> sublistWithFirst = new ArrayList<T>();\n                sublistWithFirst.add(first);\n                sublistWithFirst.addAll(sublist);\n                sublists.add(sublist);\n                sublists.add(sublistWithFirst);\n            }\n            return sublists;\n        }\n    }\n}\n\nclass Team implements Comparable<Team> {\n\n    String name;\n    Point[] points;\n    int solved;\n    int penalti;\n\n    public Team(String name, Point[] points) {\n        this.name = name;\n        this.points = points;\n        this.solved = 0;\n        for (Point point : points) {\n            if (point.y != 0) {\n                solved++;\n                penalti += ((point.x - 1) * 20 + point.y);\n            }\n        }\n    }\n\n    @Override\n    public int compareTo(Team o) {\n        int FirstPiriority = solved - o.solved;\n        if (FirstPiriority != 0) {\n            return FirstPiriority;\n        }\n        return (penalti- o.penalti) * -1;\n    }\n\n    public String toString() {\n        return name + \" \" + solved + \" \" + penalti;\n    }\n}", "score": 0.0}
{"id": "SHARE_1_2027_11__1_1353_19", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        in.nextLine();\n        while (n > 0) {\n            String st = in.nextLine();\n            String str = \"\";\n            String s = \"\";\n            for (int i = 0; i < 8; i++) {\n                str += st.charAt(i);\n            }\n            s += (int) Long.parseLong(str, 2)+\".\";\n            str = \"\";\n            for (int i = 8; i < 16; i++) {\n                str += st.charAt(i);\n            }\n            s += (int) Long.parseLong(str, 2)+\".\";\n            str = \"\";\n            for (int i = 16; i < 24; i++) {\n                str += st.charAt(i);\n            }\n            s += (int) Long.parseLong(str, 2)+\".\";\n            str = \"\";\n            for (int i = 24; i < 32; i++) {\n                str += st.charAt(i);\n            }\n            s += (int) Long.parseLong(str, 2);\n            System.out.println(s);\n            n--;\n        }\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\n/**\n *\n * @author pc\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        for (int i = 0; i < n; i++) {\n            int x = sc.nextInt();\n            int y = sc.nextInt();\n            int res;\n            if (x % 2 == 0 && y % 2 == 0) {\n                res = x + y;\n                System.out.println(res);\n            } else if (x % 2 != 0 && y % 2 != 0) {\n                res = x + y - 1;\n                System.out.println(res);\n            } else {\n                System.out.println(\"No Number\");\n            }\n        }\n\n    }\n\n}", "score": 0.0}
{"id": "SHARE_1_2429_8__1_2822_20", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int N, n, i;\n        for ( N = input.nextInt(); N != 0; N-- ){\n            long s = 1;\n            n = input.nextInt();\n            if(n == 1){\n                System.out.println(\"0\");\n                continue;\n            }\n            else if(Math.sqrt(n) % 2 == 0 || Math.sqrt(n) % 2 == 1){\n                s += Math.sqrt(n);\n            }\n            if ( n % 2 == 1){\n                for ( i = 3; n / i > i; i += 2 )\n                    if( n % i == 0 ){\n                        s += i;\n                        s += n / i;\n                    }\n            }\n            else{\n                for ( i = 2; n / i > i; i++ )\n                    if( n % i == 0 ){\n                        s += i;\n                        s += n / i;\n                    }\n            }\n            System.out.println(s);\n        }\n    }  \n}", "generated_code": "\n\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        for (int i = 0; i < t; i++) {\n            int n = sc.nextInt();\n            System.out.print((n * (n + 1)) / 2 + \" \");\n            System.out.print((n) * (n) + \" \");\n            System.out.print((n * n) + n);\n                System.out.println(\"\");\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1002_17__1_1002_15", "golden_code": "import java.util.Scanner;public class Main{public static void main(String[] args){Scanner input = new Scanner(System.in);int n,max;int[][] point;double[] dist,m;do{max=0;int x=input.nextInt();int y=input.nextInt();double r=input.nextDouble();if (r<=0)break;n=input.nextInt();point=new int[n][2];dist=new double[n];m=new double[n];for(int i=0;i<n;i++){point[i][0]=input.nextInt()-x;point[i][1]=input.nextInt()-y;dist[i]=Math.sqrt(point[i][0]*point[i][0]+point[i][1]*point[i][1]);try{m[i]=point[i][1]/point[i][0];}catch(ArithmeticException e){m[i]=1e9;}}int left,right;double lineX=0;boolean exp;for(int i=0;i<n;i++){left=right=0;for(int j=0;j<n;j++){if(dist[j]<=r){if (i==j){left++;right++;}else{try{exp=true;lineX= m[i]!=1e9 ? point[j][1]/m[i]:0;}catch(ArithmeticException e){exp=false;if(point[j][1]>=point[i][1])left++;if(point[j][1]<=point[i][1])right++;}if(exp){if(point[j][0]>=lineX)left++;if(point[j][0]<=lineX)right++;}}}}if(Math.max(left,right)>max)max=Math.max(left,right);}System.out.println(max);}while(true);}}", "generated_code": "import java.util.Scanner;public class Main{public static void main(String[] args){Scanner input = new Scanner(System.in);int n,max;int[][] point;double[] dist,m;do{max=0;int x=input.nextInt();int y=input.nextInt();double r=input.nextDouble();if (r<=0)break;n=input.nextInt();point=new int[n][2];dist=new double[n];m=new double[n];for(int i=0;i<n;i++){point[i][0]=input.nextInt()-x;point[i][1]=input.nextInt()-y;dist[i]=Math.sqrt(point[i][0]*point[i][0]+point[i][1]*point[i][1]);try{m[i]=point[i][1]/point[i][0];}catch(ArithmeticException e){m[i]=1e9;}}int left,right;double lineX=0;boolean exp;for(int i=0;i<n;i++){left=right=0;for(int j=0;j<n;j++){if(dist[j]<=r){if (i==j){left++;right++;}else{try{exp=true;lineX= m[i]!=1e9 ? point[j][1]/m[i]:0;}catch(ArithmeticException e){exp=false;if(point[j][1]>=point[i][1])left++;if(point[j][1]<=point[i][1])right++;}if(exp){if(point[j][0]>=lineX)left++;if(point[j][0]<=lineX)right++;}}}}if(Math.max(left,right)>max)max=Math.max(left,right);}System.out.println(max);}while(true);}}", "score": 1.0}
{"id": "SHARE_1_2811_30__5_1003_37", "golden_code": "import java.util.*;\n\npublic class Main\n{\n\n\n\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner input=new Scanner(System.in);\n\n\t\tint t=input.nextInt();\n\t\tint n,m;\n\t\tArrayList<Long> need=new ArrayList();\n\t\twhile(t-->0){\n\n\t\t\tn=input.nextInt();\n\t\t\tm=input.nextInt();\n\t\t\tneed.clear();\n\n\t\t\twhile(n-->0){\n\t\t\t\tlong g=input.nextLong();\n\t\t\t\tneed.add(g);\n\t\t\t}\n\n\t\t\twhile(m-->0)\n\t\t\t{\n\t\t\t\tlong g=input.nextLong();\n\t\t\t\tif(need.contains(g))\n\t\t\t\t\tneed.remove(g);\n\t\t\t}\n\n\t\t\tCollections.sort(need);\n\t\t\tif(need.size()>0){\n\t\t\t\tfor(int i=0;i<need.size()-1;i++)\n\t\t\t\t\tSystem.out.print(need.get(i)+\",\");\n\n\t\t\t\tSystem.out.println(need.get(need.size()-1));\n\t\t\t}else\n\t\t\t\tSystem.out.println();\n\n\n\n\t\t}\n\t}\n}", "generated_code": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n/**\n *\n * @author Vaio\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        int num = 0;\n        Scanner input = new Scanner(System.in);\n        Integer money, m;\n        Integer[][] map;\n        Integer[][] coins;\n        num = input.nextInt();\n        for (int i = 0; i < num; i++) {\n            Integer min;\n            Integer x, y;\n            m = input.nextInt();\n            money = input.nextInt();\n            coins = new Integer[m][2];\n            for (int j = 0; j < m; j++) {\n                coins[j][0] = input.nextInt();\n                coins[j][1] = input.nextInt();\n            }\n            map = new Integer[money + 1][money + 1];\n            map[0][0] = 0;\n            for (int j = 0; j < map.length; j++) {\n                for (int k = 0; k < map.length; k++) {\n                    min = null;\n                    for (int g = 0; g < m; g++) {\n                        x = j - coins[g][0];\n                        y = k - coins[g][1];\n                        if (x >= 0 && y >= 0 && x<map.length && y<map.length) {\n                            if (map[x][y] != null) {\n                                if (min == null) {\n                                    min = map[x][y];\n                                } else if (map[x][y] < min) {\n                                    min = map[x][y];\n                                }\n                            }\n                        }\n                    }\n                    if (min != null) {\n                        map[j][k] = min + 1;\n                    }\n                }\n            }\n            min = null;\n            for (int j = 0; j < map.length; j++) {\n                for (int k = 0; k < map.length; k++) {\n                    if (((j * j) + (k * k)) == (money * money) && map[j][k] != null) {\n                        if (min == null) {\n                            min = map[j][k];\n                        } else if (map[j][k] < min) {\n                            min = map[j][k];\n                        }\n                    }\n                }\n            }\n            if (min == null) {\n                System.out.println(\"not possible\");\n            } else {\n                System.out.println(min);\n            }\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1104_47__1_2830_3", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int counter = input.nextInt();\n        input.nextLine();\n        while (counter-- > 0)\n            System.out.println(new StringBuilder(input.nextLine()).reverse());\n    }\n}", "generated_code": "import java.math.BigInteger;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Scanner;\nimport java.util.Set;\n\npublic class Main {\n\n    public static void main(String[] args) {        \n        Scanner scan = new Scanner(System.in);\n        Set<String> set = new HashSet<String>();\n        int kase;\n        String last = null;\n        kase = scan.nextInt();\n        while(kase-- > 0){\n            set.clear();\n            boolean flag = true;\n            int m = scan.nextInt();\n            String s = scan.next();\n            s = sortString(s);\n            \n            for(int k = 1 ; k <= m; k++){\n                if(set.contains(s)){\n                    System.out.println(\"R \" + (k));\n                    flag = false;\n                    break;\n                }\n                if(dfaCheck_a(s) || dfaCheck_b(s)){\n                    System.out.println(\"C \" + (k));\n                    flag = false;\n                    break;\n                }\n                last = s;\n                set.add(s);\n                StringBuilder sr = new StringBuilder(s);\n                BigInteger a = new BigInteger(sr.toString());\n                BigInteger b = new BigInteger(sr.reverse().toString());\n                BigInteger c = a.add(b);\n                s = sortString(c.toString());\n            }\n            \n            if(flag){\n                System.out.println(last);\n            }   \n        }\n    }\n    \n    \n    public static String sortString(String s){\n        char[] ch = s.toCharArray();\n        Arrays.sort(ch);\n        s = new String(ch);\n        if(s.charAt(0) == '0'){\n            s = s.substring(s.lastIndexOf('0') + 1);\n        }\n        return (s);\n    }\n    \n    \n    public static boolean dfaCheck_a(String s){\n        return s.matches(\"1233+4444\");\n    }\n    \n    public static boolean dfaCheck_b(String s){\n        return s.matches(\"5566+7777\");\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1018_37__1_1001_169", "golden_code": "import java.util.Scanner;\n\nclass Main {\n    public static void main(String[] args){\n    Scanner scan = new Scanner(System.in);\n    int n=scan.nextInt();\n    int ca;\n    int cb;\n    while(n!=0){\n    \tca=0;\n    \tcb=0;\n    \tif(n!=0){\n    \tint[] a=new int[n];\n    \tint[] b=new int[n];\n    \tfor(int q=0;q<n;q++)\n    \t\ta[q]=scan.nextInt();\n    \tfor(int q=0;q<n;q++)\n    \t\tb[q]=scan.nextInt();\n    \tfor(int q=0;q<n;q++){\n    \t\tif(a[q]-b[q]>=2)\n    \t\t\tca+=a[q];\n    \t\telse{\n    \t\t\tif(a[q]-b[q]<=-2)\n        \t\t\tcb+=b[q];\n    \t\t\telse{\n    \t\t\t\tif(a[q]-b[q]==0)\n    \t\t\t\t{}\n    \t\t\t\telse{\n    \t\t\t\t\tif(a[q]-b[q]==1){\n    \t\t\t\t\t\tif(a[q]==2)\n    \t\t\t\t\t\t\tcb+=6;\n    \t\t\t\t\t\telse\n    \t\t\t\t\t\t\tcb=cb+a[q]+b[q];}\n    \t\t\t\t\telse{\n    \t\t\t\t\t\tif(a[q]-b[q]==-1){\n        \t\t\t\t\t\tif(b[q]==2)\n        \t\t\t\t\t\t\tca+=6;\n        \t\t\t\t\t\telse\n        \t\t\t\t\t\t\tca=ca+a[q]+b[q];}\n    \t\t\t\t\t}\n    \t\t\t\t\t\n    \t\t}\n    \t}\n    \t\n    \t\n    \t\n    \t\n    \t}\n    }\n\n   \n\n  System.out.println(\"A has \"+ca+\" points. B has \"+cb+\" points.\");\nn=scan.nextInt();\nif(n!=0){\n  System.out.println();}\n    \t}\n    \n    \n    \n    }}}", "generated_code": "import java.util.Scanner;class Main {public static void main(String[] args) {Scanner s = new Scanner(System.in);int a=0;while(s.hasNext()){a=s.nextInt()+s.nextInt();System.out.println(a);}}}\n", "score": 0.0}
{"id": "SHARE_1_106012_26__1_2563_10", "golden_code": "import java.util.Scanner;\n\nclass Main{\npublic static void main(String[] args){\nScanner s=new Scanner(System.in);\nint t=s.nextInt();\nwhile(t>0){\nint n=s.nextInt();\nint x=s.nextInt();\nint y=s.nextInt();\nint z=s.nextInt();\nint a=1;\nint b=0;\nint k=a*10000+x*1000+y*100+z*10+b;\nint a1=0;\nint b1=0;\nwhile(a!=10){\nif(k%n==0){\na1=a;\nb1=b;}\nif(b<9)\nb++;\nelse{\na++;\nb=0;}\nk=a*10000+x*1000+y*100+z*10+b;}\nint k1=a1*10000+x*1000+y*100+z*10+b1;\nif(a1==0&&b1==0||a1==0)\nSystem.out.println(\"0\");\nelse\nSystem.out.println(a1+\" \"+b1+\" \"+k1/n);\nt--;}}}", "generated_code": "import java.util.Arrays;\nimport java.util.Scanner;\n \npublic class Main {\n \n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        long[][] dp = new long[35][70];\n        for (int i = 0; i < dp.length; i++)\n            Arrays.fill(dp[i], -1);\n        while (true) {\n            int n = sc.nextInt();\n            if (n == 0)\n                break;\n            long sum = go(dp, n, 0);\n            System.out.println(sum);\n        }\n \n    }\n \n    private static long go(long[][] dp, int full, int half) {\n        if (full < 0 || half < 0)\n            return 0;\n        else if (full == 0 && half == 0)\n            return 1;\n        else if (dp[full][half] != -1)\n            return dp[full][half];\n        else {\n            long sum = 0;\n            sum += go(dp, full - 1, half + 1);\n            sum += go(dp, full, half - 1);\n            return dp[full][half] = sum;\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_409__1_1001_220", "golden_code": "import java.util.Scanner;\n\npublic class Main{\n\tpublic static void main(String []args) {\n\t\tScanner input=new Scanner(System.in);\n\t\twhile (input.hasNextInt()){\n\t\t\tint a=input.nextInt();\n\t\t\tif(!input.hasNextInt())\n\t\t\t\tbreak;\n\t\t\tint b=input.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\t\n\t\tinput.close();\n\t}\n}\n\n\n\n//import java.util.Scanner;\n//public class Main {\n//    public static void main(String[] args) {\n//        Scanner cin = new Scanner(System.in);\n//        while (cin.hasNext())\n//            System.out.println(cin.nextInt()+cin.nextInt());\n//    }\n//}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n       Scanner a = new Scanner (System.in);\n        int b , c;\n        while(a.hasNext())\n        {\n        b=a.nextInt();\n        c=a.nextInt();\n        System.out.println(b+c);\n        }\n    }\n    \n}\n", "score": 1.0}
{"id": "SHARE_1_2715_17__1_1006_80", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tstatic char[] str;\n\tstatic int[][] tbl = new int[500][500];\n\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\twhile (true) {\n\t\t\tint n = s.nextInt();\n\t\t\tfor(int i=0;i<n;i++)\n\t\t\t\tfor(int j=0;j<n;j++)\n\t\t\t\t\ttbl[i][j]=-1;\n\t\t\tif (n == 0)\n\t\t\t\tbreak;\n\t\t\tstr = s.next().toCharArray();\n\t\t\tSystem.out.println(func(0, str.length - 1));\n\t\t}\n\t}\n\n\tstatic int func(int i, int j) {\n\t\tint res = 0;\n\t\tif (i == j || i == j - 1)\n\t\t\treturn 0;\n\t\tif (tbl[i][j] == -1) {\n\t\t\tif (find(str[i], str[j]))\n\t\t\t\tres = func(i + 1, j - 1) + 1;\n\t\t\tfor (int k = i; k < j; k++)\n\t\t\t\tres = Math.max(res, func(i, k) + func(k + 1, j));\n\t\t\ttbl[i][j] = res;\n\t\t}\n\t\treturn tbl[i][j];\n\t}\n\n\tstatic boolean find(char f, char s) {\n\t\tif ((f == 'U' && s == 'A') || (f == 'C' && s == 'G')\n\t\t\t\t|| (f == 'A' && s == 'U') || (f == 'G' && s == 'C'))\n\t\t\treturn true;\n\t\treturn false;\n\t}\n}", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t        float len,sum=0;\n\t        int count=1;\n\t        Scanner cin = new Scanner(System.in);\n\t        while (cin.hasNext()){\n\t        \tlen=cin.nextFloat();\n\t            if(len==0)\n\t        \t    return;\n\t        \twhile(sum<len){\n\t        \t\tcount++;\n        \t        sum+=1/(count*1.00);\n\t        \t}\n\t        \tcount--;\n\t        \tSystem.out.println(count+\" card(s)\");\n\t        \tsum=0;\n\t        \tcount=1;\n\t        }\n\t        cin.close();\n\t            \n\t    }\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1324_23__1_2747_53", "golden_code": "import java.util.* ;\nimport java.lang.* ;\nclass Main\n{\n\tpublic static String action ( String arman , String c , String jahat )\n\t{\n\t\tString result = \"\" ;\n\t\tString wade = \"\" ;\n\t\tint a=0 ;\n\t\tif ( jahat.equals(\"LEFT\") ) {\n\t\t\tfor ( int i=0 ; i<arman.length() ; i++ ) {\n\t\t\t\ta++ ;\n\t\t\t\tif ( (arman.charAt(i)+\"\").equals( c ) ) {\n\t\t\t\t\tbreak ;\n\t\t\t\t}\n\t\t\t\twade += arman.charAt(i) ;\n\t\t\t}\n\t\t\tfor ( int i=wade.length()-1 ; i>=0 ; i-- ) {\n\t\t\t\tresult += wade.charAt(i) ;\n\t\t\t}\n\t\t\tfor ( int i=a ; i<arman.length() ; i++ ) {\n\t\t\t\tresult += arman.charAt(i) ;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor ( int i=arman.length()-1 ; i>=0 ; i-- ) {\n\t\t\t\ta++ ;\n\t\t\t\tif ( (arman.charAt(i)+\"\").equals( c ) ) {\n\t\t\t\t\tbreak ;\n\t\t\t\t}\n\t\t\t\twade += arman.charAt(i) ;\n\t\t\t}\n\t\t\tfor ( int i=0 ; i<arman.length()-a ; i++ ) {\n\t\t\t\tresult += arman.charAt(i) ;\n\t\t\t}\n\t\t\tfor ( int i=0 ; i<wade.length() ; i++ ) {\n\t\t\t\tresult += wade.charAt(i) ;\n\t\t\t}\n\t\t}\n\t\treturn result ;\n\t}\n\t\n\tpublic static String check ( String arman , String c )\n\t{\n\t\tint countern=0 , counterm=0 ;\n\t\tfor ( int i=0 ; i<arman.length() ; i++ ) {\n\t\t\tif ( (arman.charAt(i)+\"\").equals( c ) ) {\n\t\t\t\tbreak ;\n\t\t\t}\n\t\t\tcountern++ ;\n\t\t}\n\t\tfor ( int i=arman.length()-1 ; i>=0 ; i-- ) {\n\t\t\tif ( (arman.charAt(i)+\"\").equals( c ) ) {\n\t\t\t\tbreak ;\n\t\t\t}\n\t\t\tcounterm++ ;\n\t\t}\n\t\tif ( countern <= counterm ) {\n\t\t\treturn \"LEFT\" ;\n\t\t}\n\t\telse {\n\t\t\treturn \"RIGHT\" ;\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner (System.in) ;\n\t\tString arman = \"\" ;\n\t\tint A=0 ;\n\t\twhile ( true ) {\n\t\t\tarman = scan.nextLine() ;\n\t\t\tif ( arman.equals( \"STOP\" ) ) {\n\t\t\t\tbreak ;\n\t\t\t}\n\t\t\tif ( !arman.equals( \"STOP\" ) && A!=0 ) {\n\t\t\t\tSystem.out.println() ;\n\t\t\t}\n\t\t\tA++ ;\n\t\t\tint a = scan.nextInt() ;\n\t\t\tString alaki = scan.nextLine() ;\n\t\t\tSystem.out.println(\"Dataset #\" +A+ \":  The initial order is \" + arman + \".\" ) ;\n\t\t\twhile ( a!=0 ) {\n\t\t\t\ta-- ;\n\t\t\t\tString c = scan.nextLine() ;\n\t\t\t\tif ( check ( arman , c ).equals(\"LEFT\") ) {\n\t\t\t\t\tarman = action ( arman , c , \"LEFT\" ) ;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tarman = action ( arman , c , \"RIGHT\" ) ;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"After \" + c + \" leaves, the order is \" + arman + \".\") ;\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n}", "generated_code": "import java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tin.nextLine();\n\t\twhile (n-- > 0) {\n\t\t\tboolean a[] = new boolean[4];\n\t\t\tbyte[] s = in.nextLine().getBytes();\n\t\t\tfor (int i = 0; i < s.length; i++) {\n\t\t\t\tif (64 < s[i] && s[i] < 91)\n\t\t\t\t\ta[0] = true;\n\t\t\t\telse if (96 < s[i] && s[i] < 123)\n\t\t\t\t\ta[1] = true;\n\t\t\t\telse if (47 < s[i] && s[i] < 58)\n\t\t\t\t\ta[2] = true;\n\t\t\t\telse\n\t\t\t\t\ta[3] = true;\n\t\t\t}\n\t\t\tint c = 0;\n\t\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\t\tif (a[i])\n\t\t\t\t\tc++;\n\t\t\t}\n\t\t\tif (c == 4)\n\t\t\t\tSystem.out.println(\"overkill\");\n\t\t\telse if (c == 3)\n\t\t\t\tSystem.out.println(\"good\");\n\t\t\telse if (c == 2)\n\t\t\t\tSystem.out.println(\"bad\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"very bad\");\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1656_42__1_1656_12", "golden_code": "\nimport java.util.Scanner;\npublic class Main{\n   static Scanner in =new Scanner(System.in);\n    public static void main(String[] args) {\n        int a[]=new  int [99];\n        while(true)\n        {\n        int counter=0;        \n        int x=in.nextInt();\n        if(x==-1)\n            break;\n        while(true)\n        {\n            \n            if(x==0)\n                break;\n            a[counter]=x;\n            counter++; \n             x=in.nextInt();\n        }\n        int d=0;\n        for(int i=0;i<counter;i++)\n        {\n            for(int j=0;j<counter;j++)\n            {\n                if(i==j)\n                    continue;\n                if(a[i]==2*a[j])\n                    d++;   \n            }\n        }\n        System.out.println(d);\n        }\n    }   \n}\n", "generated_code": "import java.util.Scanner;\n\n/**\n *\n * @author masoud\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner sc=new Scanner(System.in);\n        String s=\"ma\";\n        int r=0,l=0;\n        float p=0;\n        int arr[] = null;\n        int arr1[] =new int [15];\n        while(!s.equals(\"-1\")){\n        s=sc.nextLine();\n        if(!s.equals(\"-1\")){\n        arr=new int[15];\n        int y=s.indexOf(' ');\n        arr[0]=Integer.valueOf(s.substring(0, s.indexOf(' ')));\n        int i=0;\n        while(true){\n           i++;\n           arr[i]=Integer.valueOf(s.substring(y+1, s.indexOf(' ',y+1)));\n           y=s.indexOf(' ',y+1);\n           if(s.charAt(y+1)=='0')\n                   break;\n        }\n\n        for(int k=0;k<=i;k++)\n            for(int j=k+1;j<=i;j++){\n                p=(float)arr[j];\n                if((arr[k]==arr[j]*2)||(arr[k]==p/2))\n                    r++;\n            }\n        arr1[l++]=r;\n        r=0;\n            arr=null;\n        }\n        }\n        for(int k=0;k<l;k++)\n            System.out.println(arr1[k]);\n    }\n\n}\n", "score": 1.0}
{"id": "SHARE_1_106020_8__1_2583_1", "golden_code": "import java.util.Scanner;\nclass Main\n{\npublic static void main(String[]args)\n{\n\tScanner scan = new Scanner(System.in);\n\tint n ;\n\tn=scan.nextInt();\n\tfor(int i=1; i<=n; i++)\n\t{\n\t\tint m, sum=0;\n\t\tm=scan.nextInt();\n\t\tfor(int j=1; j<=m; j++)\n\t\t\tsum=sum+j*((j+1)*(j+2)/2);\n\t\tSystem.out.println(i+\" \"+m+\" \"+sum);\n\t}\n}\n}\n\t\t", "generated_code": "import java.util.*;\n\npublic class Main\n{\n\tstatic Scanner scan = new Scanner(System.in);\n\tpublic static void main(String[] args) throws Exception\n    {\n\t\tint tc = scan.nextInt();\n\t\tscan.nextLine();\n\t\twhile(tc-->0)\n\t\t{\n\t\t\tint n = scan.nextInt();\n\t\t\tint a[] = new int[n];\n\t\t\tfor(int i = 0 ; i < n ; i++)\n\t\t\t\ta[i] = scan.nextInt();\n\t\t\tint z = 0 ;\n\t\t\tfor(;check(a,n) && n > 1 ; n-- , z++)\n\t\t\t\tfor(int i = 1 ; i < n ; i++)\n\t\t\t\t\ta[i-1] = a[i] - a[i-1];\t\n\t\t\tif(a[0] > 0)\n\t\t\t\tSystem.out.println(\"*fizzle*\");\n\t\t\telse if( a[0] < 0)\n\t\t\t\tSystem.out.println(\"*bunny*\");\n\t\t\telse\n\t\t\t{\n\t\t\t\twhile(z-- > 0)\n\t\t\t\t\tSystem.out.print(\"z\");\n\t\t\t\tSystem.out.println(\"ap!\");\n\t\t\t}\n\t\t}\n    }\n\tprivate static boolean check(int[] a, int n) {\n\t\tfor(int i = 0 ; i < n ;i++)\n\t\t\tif(a[i] != 0)\n\t\t\t\treturn true;\n\t\treturn false;\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2811_5__1_2400_5", "golden_code": "\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint size = scanner.nextInt();\n\t\tfor (int t =0;t<size;t++){\n\t\t\tint n = scanner.nextInt();\n\t\t\tint m = scanner.nextInt();\n\t\t\tArrayList<Integer> a = new ArrayList<Integer>(n);\n\t\t\tArrayList<Integer> b = new ArrayList<Integer>(n);\n\t\t\tscanner.nextLine();\n\t\t\tString s = scanner.nextLine();\n\t\t\tString[] ss = s.split(\"[\\\\s]+\");\n\t\t\tfor (int i = 0;i<ss.length;i++){\n\t\t\t\tif (ss[i].equals(\"\"))\n\t\t\t\t\tcontinue;\n\t\t\t\ta.add(Integer.parseInt(ss[i]));\n\t\t\t}\n\t\t\ts = scanner.nextLine();\n\t\t\tss = s.split(\"[\\\\s]+\");\n\t\t\tfor (int i = 0;i<ss.length;i++){\n\t\t\t\tif (ss[i].equals(\"\"))\n\t\t\t\t\tcontinue;\n\t\t\t\tb.add(Integer.parseInt(ss[i]));\n\t\t\t}\n\t\t\tfor (int i = 0;i<b.size();i++){\n\t\t\t\ta.remove((Object)b.get(i));\n\t\t\t}\n\t\t\tsortInt(a);\n\t\t\tfor (int i = 0;i<a.size();i++){\n\t\t\t\tif (i<a.size()-1)\n\t\t\t\t\tSystem.out.print(a.get(i)+\",\");\n\t\t\t\telse\n\t\t\t\t\tSystem.out.print(a.get(i));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\t\n\tpublic static void sortInt(ArrayList<Integer> values) {\n\t\tif (values.size()>1){\n\t\t\tmergesortInt(values,0, values.size()- 1);\n\t\t}\n\t}\n\n\tprivate static void mergesortInt(ArrayList<Integer> values, int low, int high) {\n\t\t// check if low is smaller then high, if not then the array is sorted\n\t\tif (low < high) {\n\t\t\t// Get the index of the element which is in the middle\n\t\t\tint middle = (high+low) / 2;\n\t\t\t// Sort the left side of the array\n\t\t\tmergesortInt(values,low, middle);\n\t\t\t// Sort the right side of the array\n\t\t\tmergesortInt(values,middle + 1, high);\n\t\t\t// Combine them both\n\t\t\tmergeInt(values,low, middle, high);\n\t\t}\n\t}\n\n\tprivate static void mergeInt(ArrayList<Integer> values, int low, int middle, int high) {\n\t\t\n\t\tint[] helper = new int[values.size()];\n\t\t\n\t\t// Copy both parts into the helper array\n\t\tfor (int i = low; i <= high; i++) {\n\t\t\thelper[i] = values.get(i);\n\t\t}\n\n\t\tint i = low;\n\t\tint j = middle + 1;\n\t\tint k = low;\n\t\t// Copy the smallest values from either the left or the right side back\n\t\t// to the original array\n\t\twhile (i <= middle && j <= high) {\n\t\t\tif (helper[i] <= helper[j]) {\n\t\t\t\tvalues.set(k, helper[i]) ;\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tvalues.set(k, helper[j]); \n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk++;\n\t\t}\n\t\t// Copy the rest of the left side of the array into the target array\n\t\twhile (i <= middle) {\n\t\t\tvalues.set(k,helper[i] )  ;\n\t\t\tk++;\n\t\t\ti++;\n\t\t}\n\n\t}\n\n}", "generated_code": "\nimport java.io.IOException;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(System.in);\n        StringBuilder sb = new StringBuilder();\n        int max = 1000009;\n        int[] fib = new int[max];\n        fib[0] = 7;\n        fib[1] = 11;\n        for (int i = 2; i < fib.length; i++) {\n            fib[i] = (fib[i - 1] + fib[i - 2]) % 3;\n        }\n        while (in.hasNext()) {\n            String str = fib[in.nextInt()] == 0 ? \"yes\\n\" : \"no\\n\";\n            sb.append(str);\n        }\n        System.out.println(sb.toString().trim());\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_460__1_1001_404", "golden_code": "import java.util.Scanner;\npublic class Main\n{\n    public static void main(String args[])\n    {\n        int a, b;\n        Scanner i = new Scanner(System.in);\n         while (i.hasNext() == true )\n             System.out.println(i.nextInt() + i.nextInt());\n    }\n}", "generated_code": "import java.util.Scanner;\n\n\nclass Main {\n\n\tpublic static void main(String[] args) {\n\t\tint a,b;\n\t\t@SuppressWarnings(\"resource\")\n\t\tScanner s = new Scanner (System.in); \n\t\twhile(s.hasNext()){\n\t\t\ta=s.nextInt();\n\t\t\tb=s.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1959_44__1_1959_43", "golden_code": "\nimport java.util.*;\n/**\n *\n * @author arsenic\n */\npublic class Main {\npublic static int[] a;\n    public static int c;\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner in=new Scanner(System.in);\n        int m=0,b=0;\n        while(in.hasNext()){\n            m=0;b=0;\n            c=0;\n            int n=in.nextInt();\n            if(1 <= n && n<= 10000){\n            \n            a=new int[n];\n            for(int i=0;i<a.length;i++){\n                a[i]=0;\n            }\n            \n                for(int k=0;k<a.length;k++){\n                     int x=in.nextInt();\n                     a[k]=x;\n                }\n                \n//           for(int i=0;i<a.length;i++){\n//               System.out.print(a[i]);\n//           }\n           \n           \n           for(int i=0;i<2;i++){\n               \n               for(int j=0;j<n;j++){\n                   if(a[j]!=j%2){\n                       m++;\n                       \n                   }\n               }\n               for(int z=1;z<=n;z++){\n                   if(a[z-1]!=z%2){\n                       b++;\n                    }\n               }      \n           }\n           \n          if(m<b){\n              System.out.println(m/2);\n          }\n          else{\n              System.out.println(b/2);\n          }\n                       \n                   \n               \n               \n               \n             \n               \n               \n               \n               \n               \n           \n                \n           \n           \n            }\n    }\n    }}\n", "generated_code": "\nimport java.util.Scanner;\nimport java.util.regex.Pattern;\n\npublic class Main \n{\n\n    static public Scanner in = new Scanner(System.in);\n\n    public static void main(String args[]) \n    {\n        int count;\n        int times1;\n        int times2;\n        \n        do{\n            times1 = 0;\n            times2 = 0;\n            count = in.nextInt();\n            int array[] = new int[count];\n            for(int i = 0; i < count; i++)\n                array[i] = in.nextInt();\n            //***************************\n            for (int j = 0; j < count;j++)\n            {\n                if (((j % 2) == 0) && (array[j] == 0))\n                    times1++;\n                else if(((j % 2) == 1) && (array[j] == 1))\n                    times1++;\n            }\n            //************************\n             for (int j = 0; j < count;j++)\n            {\n                if (((j % 2) == 0) && (array[j] == 1))\n                    times2++;\n                else if(((j % 2) == 1) && (array[j] == 0))\n                    times2++;\n            }\n             //******************\n             if (times1 > times2)\n                 System.out.println(times2);\n             else\n                 System.out.println(times1);\n        }while(String.valueOf(count) != \"\");\n    }\n}\n", "score": 1.0}
{"id": "SHARE_5_1024_7__1_2717_50", "golden_code": "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.Scanner;\nimport java.util.Set;\n \npublic class Main\n{\n    private int[] parent;\n    private Queue<Integer> queue;\n    private int numberOfVertices;\n    private boolean[] visited;\n    private Set<Pair> cutSet;\n    private ArrayList<Integer> reachable;\n    private ArrayList<Integer> unreachable;\n \n    public Main (int numberOfVertices)\n    {\n        this.numberOfVertices = numberOfVertices;\n        this.queue = new LinkedList<Integer>();\n        parent = new int[numberOfVertices + 1];\n        visited = new boolean[numberOfVertices + 1];\n        cutSet = new HashSet<Pair>();\n        reachable = new ArrayList<Integer>();\n        unreachable = new ArrayList<Integer>();\n    }\n \n    public boolean bfs (int source, int goal, int graph[][])\n    {\n        boolean pathFound = false;\n        int destination, element;\n        for (int vertex = 1; vertex <= numberOfVertices; vertex++)\n        {\n            parent[vertex] = -1;\n            visited[vertex] = false;\n        }\n        queue.add(source);\n        parent[source] = -1;\n        visited[source] = true;\n \n        while (!queue.isEmpty())\n        {\n            element = queue.remove();\n            destination = 1;\n            while (destination <= numberOfVertices)\n            {\n                if (graph[element][destination] > 0 &&  !visited[destination])\n                {\n                    parent[destination] = element;\n                    queue.add(destination);\n                    visited[destination] = true;\n                }\n                destination++;\n            }\n        }\n \n        if (visited[goal])\n        {\n            pathFound = true;\n        }\n        return pathFound;\n    }\n \n    public int  maxFlowMinCut (int graph[][], int source, int destination)\n    {\n        int u, v;\n        int maxFlow = 0;\n        int pathFlow;\n        int[][] residualGraph = new int[numberOfVertices + 1][numberOfVertices + 1];\n \n        for (int sourceVertex = 1; sourceVertex <= numberOfVertices; sourceVertex++)\n        {\n            for (int destinationVertex = 1; destinationVertex <= numberOfVertices; destinationVertex++)\n            {\n                residualGraph[sourceVertex][destinationVertex] = graph[sourceVertex][destinationVertex];\n            }\n        }\n \n        /*max flow*/\n        while (bfs(source, destination, residualGraph))\n        {\n            pathFlow = Integer.MAX_VALUE;\n            for (v = destination; v != source; v = parent[v])\n            {\n                u = parent[v];\n                pathFlow = Math.min(pathFlow,residualGraph[u][v]);\n            }\n            for (v = destination; v != source; v = parent[v])\n            {\n                u = parent[v];\n                residualGraph[u][v] -= pathFlow;\n                residualGraph[v][u] += pathFlow;\n            }\n            maxFlow += pathFlow;\t\n        }\n \n        /*calculate the cut set*/\t\t\n        for (int vertex = 1; vertex <= numberOfVertices; vertex++)\n        {\n            if (bfs(source, vertex, residualGraph))\n            {\n                reachable.add(vertex);\n            }\n            else\n            {\n                unreachable.add(vertex);\n            }\n        }\n        for (int i = 0; i < reachable.size(); i++)\n        {\n            for (int j = 0; j < unreachable.size(); j++)\n            {\n                if (graph[reachable.get(i)][unreachable.get(j)] > 0)\n                {\n                    cutSet.add(new Pair(reachable.get(i), unreachable.get(j)));\n                }\n            }\n        }\n        return maxFlow;\n    }\n \n    public static void main (String...arg)\n    {\n        int[][] graph;\n        int numberOfNodes;\n        int numberOfEdges;\n        int source;\n        int sink;\n        int maxFlow;\n \n        Scanner scanner = new Scanner(System.in);\n        //System.out.println(\"Enter the number of nodes\");\n        numberOfEdges = scanner.nextInt();\n        numberOfNodes = scanner.nextInt();\n        graph = new int[numberOfNodes + 1][numberOfNodes + 1];\n \n        /*System.out.println(\"Enter the graph matrix\");\n        for (int sourceVertex = 1; sourceVertex <= numberOfNodes; sourceVertex++)\n        {\n            for (int destinationVertex = 1; destinationVertex <= numberOfNodes ; destinationVertex++)\n            {\n                graph[sourceVertex][destinationVertex] = scanner.nextInt();\n            }\n        }*/\n        \n        for (int i=1;i<=numberOfNodes;i++)\n\t\t{\n\t\t\tfor (int j=1;j<=numberOfNodes;j++)\n\t\t\t{\n\t\t\t\t\tgraph[i][j]=0;\n\t\t\t}\t\n\t\t}\n\n\t\tfor (int i=0;i<numberOfEdges;i++)\n\t\t{\n\t\t\tint S=0;\n\t\t\tint E=0;\n\t\t\tint C=0;\n\t\t\tS=scanner.nextInt();\n\t\t\tE=scanner.nextInt();\n\t\t\tC=scanner.nextInt();\n\t\t\tgraph[S][E]=C;\n\t\t}\n\t\tfor (int i=1;i<=numberOfNodes;i++)\n\t\t{\n\t\t\tgraph[i][i]=0;\n\t\t}\n        \n        \n        \n        \n        //System.out.println(\"Enter the source of the graph\");\n        //source= scanner.nextInt();\n        source = 1;\n        //System.out.println(\"Enter the sink of the graph\");\n        //sink = scanner.nextInt();\n        sink = numberOfNodes;\n        Main maxFlowMinCut = new Main(numberOfNodes);\n        maxFlow = maxFlowMinCut.maxFlowMinCut(graph, source, sink);\n        System.out.println(maxFlow);\n        scanner.close();\n        return;\n    }\n}\n \nclass Pair\n{\n    public int source;\n    public int destination;\n \n    public Pair (int source, int destination)\n    {\n        this.source = source;\n        this.destination = destination;\n    }\n \n    public Pair()\n    {\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner p = new Scanner(System.in);\n        int n = p.nextInt();\n        while (n != 0) {\n            int count = 0;\n            String x = \"\";\n            String y =\"\";\n            String z = \"\";\n            String s = \"\";\n            p.nextLine();\n            x = p.nextLine();\n            x=x.toUpperCase();\n            y = p.nextLine();\n            y=y.toUpperCase();\n            s = p.nextLine();\n            s=s.toUpperCase();\n            for (int j=0;j<51;j++) {\n                z = \"\";\n                char[] v = x.toCharArray();\n                char[] u = y.toCharArray();\n                for (int i = 0; i < n; i++) {\n                    z = z + v[i];\n                    z = z + u[i];\n                }\n                if (s.equals(z)) {\n                    count++;\n                    break;\n\n                } else {\n                    z = \"\";\n                    for (int i = 0; i < n; i++) {\n                        z = z + u[i];\n                        z = z + v[i];\n                    }\n                    if (s.equals(z)) {\n                        count++;\n                        break;\n                    }\n                }\n                count++;\n                x = z.substring(0, n);\n                y = z.substring(n);\n            }          \n            if(count==51)\n                System.out.println(-1);\n            else\n                System.out.println(count);\n            n = p.nextInt();\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_307__1_1001_124", "golden_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String args[])\n\t{\n\t\tScanner scanner = new Scanner(System.in);\n\t\twhile(scanner.hasNext())\n\t\t{\n\t\t\tint a = scanner.nextInt();\n\t\t\tint b = scanner.nextInt();\n\t\t\tSystem.out.println(a + b);\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner ;\npublic class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner (System.in);\n\t\t\n\t\twhile ( scan.hasNext() ) {\n\t\t\tSystem.out.print( ( scan.nextInt() + scan.nextInt() ) + \"\\n\" ) ;\n\t\t}\n\t}\n}\n\n\n", "score": 1.0}
{"id": "SHARE_1_2121_63__1_1659_38", "golden_code": "import java.io.*; \nimport java.util.*; \nimport java.math.*; \npublic class Main {\npublic static void main(String[] args){\n\tScanner input = new Scanner(System.in);\n     while(input.hasNext()){\n        int n =input.nextInt(); \n        System.out.println(fib(n)); \n        } \n}\n   public static BigInteger fib(int n) \n   { \n    BigInteger a = BigInteger.valueOf(0); \n    BigInteger b = BigInteger.valueOf(1); \n    BigInteger c = BigInteger.valueOf(1); \n    for (int j=2 ; j<=n ; j++) \n    { \n        c = a.add(b); \n        a = b; \n        b = c; \n    } \n\n    return (c); \n   }\n}", "generated_code": "import java.util.Scanner;\n\n\npublic class Main{\n\n\t\n\tpublic static void main(String[] args) {\n\t\tint counter=0;\n\t\tFloat curr=new Float(0);\n\t\tFloat prev=new Float(0);\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(true)\n\t\t{\n\t\t\tcounter++;\t\t\t\n\t\t\tcurr=in.nextFloat();\n\t\t\tif(curr==999)\n\t\t\t{\n\t\t\t\tSystem.out.println(\"End of Output\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(counter>1)\n\t\t\t{\n\t\t\t\tFloat result=new Float(curr-prev);\n\t\t\t\tSystem.out.printf(\"%.2f\\n\", result);\n\t\t\t\t\n\t\t\t}\n\t\t\tprev=curr;\n\t\t}\n\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1392_25__1_1392_38", "golden_code": "import java.math.BigDecimal;\nimport java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner input = new Scanner(System.in);\n\n\t\tint numOfRows = Integer.parseInt(input.nextLine());\n\n\t\tfor (int i = 0; i < numOfRows; i++) {\n\t\t\tgetSum(input.nextLine());\n\t\t}\n\t}\n\n\tpublic static void getSum(String line) {\n\n\t\tString[] numbers = line.split(\" \");\n\n\t\tint i;\n\t\tString newNum1 = \"\";\n\t\tString newNum2 = \"\";\n\n\t\tfor (i = 0; i < numbers[0].length() && i < numbers[1].length(); i++) {\n\n\t\t\tnewNum1 = numbers[0].charAt(i) + newNum1;\n\t\t\tnewNum2 = numbers[1].charAt(i) + newNum2;\n\t\t}\n\n\t\twhile (i < numbers[0].length()) {\n\n\t\t\tnewNum1 = numbers[0].charAt(i) + newNum1;\n\t\t\ti++;\n\t\t}\n\n\t\twhile (i < numbers[1].length()) {\n\n\t\t\tnewNum2 = numbers[1].charAt(i) + newNum2;\n\t\t\ti++;\n\t\t}\n\n\t\tString sum = (Integer.parseInt(newNum1) + Integer.parseInt(newNum2)) + \"\";\n\t\tString result = \"\";\n\t\tfor (int j = sum.length() - 1; j >= 0; j--) {\n\n\t\t\tresult += sum.charAt(j);\n\t\t}\n\n\t\tSystem.out.println(Long.parseLong(result));\n\t}\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        for (int i = 0; i < t; i++) {\n            String a = sc.next();\n            String b = sc.next();\n            String a_ = \"\";\n            String b_ = \"\";\n            for (int j = a.length() - 1; j >= 0; j--) {\n                a_ += a.charAt(j);\n            }\n            for (int j = b.length() - 1; j >= 0; j--) {\n                b_ += b.charAt(j);\n            }\n            String res = (Integer.parseInt(a_) + Integer.parseInt(b_)) + \"\";\n            String res_ = \"\";\n            boolean r = true;\n            for (int j = res.length() - 1; j >= 0; j--) {\n                if (r) {\n                    if (res.charAt(j) != '0') {\n                        res_ += res.charAt(j);\n                        r = false;\n                    }\n                } else {\n                    res_ += res.charAt(j);\n                }\n            }\n            System.out.println(res_);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_106020_17__1_106020_47", "golden_code": "import java.util.*;\n\n   class Main\n{\n\n  public static int T (int n)\n  {\n     int a=0;\n     for(int i=1; i<=n; i++)\n         a=i+a;\n     return(a);\n   }\n//...........................................\n  \n public static void main(String[] orgs)\n{\n Scanner Scan = new Scanner (System.in);\n int n,m,sum=0; \n n=Scan.nextInt();\n for(int i=1; i<=n; i++)\n    {\n     m=Scan.nextInt();\n     sum=0;\n     for(int k=1; k<=m; k++)\n         sum=k*T(k+1)+sum;\n         System.out.print(i+\" \"+m+\" \"+sum+\"\\n\");\n     }\n   }\n }  \n", "generated_code": "\nimport java.util.Scanner;\n\n\npublic class Main{\n    static  long  sm(int  z)\n    {\n        if(z==1)\n            return  z;\n        else \n            return z+sm(z-1);\n    }\n    \n    static  Scanner in=new Scanner(System.in);\n    public static void main(String[] args) {\n        int n=in.nextInt();\n        for(int i=0;i<n;i++)\n        {\n            long l=0;\n            int x=in.nextInt();\n            for(int j=1;j<=x;j++)\n            {\n                l+=j*(sm(j+1));\n            }\n        \n        System.out.println((i+1)+\" \"+x+\" \"+l);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_268__1_1041_10", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner i = new Scanner(System.in);\n        while (i.hasNext()) {\n            int a = i.nextInt();\n            int b = i.nextInt();\n            System.out.println(a + b);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\n//shareCode - A simple Task - #1265\n//accepted\nclass Main\n{\n\n\tpublic static void main(String args[])\n\t{\n\t\tScanner input = new Scanner(System.in);\n\t\tint caseCounter = 0;\n\t\twhile(true) {\n\n\t\t\tint devicesN = input.nextInt();\n\t\t\t//System.out.println(\"dev#: \"+devicesN);\n\t\t\tint operations = input.nextInt();\n\t\t\t//System.out.println(\"op#: \"+operations);\n\t\t\tint fuseAmper = input.nextInt();\n\t\t\t//System.out.println(\"fu#: \"+fuseAmper);\n\t\t\tif( devicesN == 0 && operations == 0 && fuseAmper == 0)\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcaseCounter++;\n\t\t\t\n\t\t\tint[] deviceAmper = new int[devicesN+1];\n\t\t\tboolean[] deviceStates = new boolean[devicesN+1];\n\t\t\t\n\t\t\tfor(int i=1;i<=devicesN;i++)\n\t\t\t\tdeviceAmper[i] = input.nextInt();\n\t\t\t\n\t\t\tint consumedAmper = 0;\n\t\t\tint maxAmper = 0;\n\t\t\tboolean isBlown = false;\n\t\t\tfor(int i=1; i<=operations ;i++) {\n\t\t\t\tint opr = input.nextInt();\n\t\t\t\t\n\t\t\t\tdeviceStates[opr] = !deviceStates[opr];\n\t\t\t\t\n\t\t\t\tif(deviceStates[opr])\n\t\t\t\t\tconsumedAmper += deviceAmper[opr];\n\t\t\t\telse\n\t\t\t\t\tconsumedAmper -= deviceAmper[opr];\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif(consumedAmper > fuseAmper && !isBlown) {\n\t\t\t\t\tSystem.out.println(\"Sequence \"+caseCounter);\n\t\t\t\t\tSystem.out.println(\"Fuse was blown.\");\n\t\t\t\t\tisBlown = true;\n\t\t\t\t}// if cosumed > fuseamper\n\t\t\t\t\n\t\t\t\tif(consumedAmper > maxAmper)\n\t\t\t\t\tmaxAmper = consumedAmper;\n\n\t\t\t}// for operations\n\t\t\t\n\t\t\tif(!isBlown) {\n\t\t\t\tSystem.out.println(\"Sequence \"+caseCounter);\n\t\t\t\tSystem.out.println(\"Fuse was not blown.\");\n\t\t\t\tSystem.out.println(\"Maximal power consumption was \"+maxAmper+\" amperes.\");\n\t\t\t}// if blown not\n\t\t\tSystem.out.println();\t\t\t\n\t\t\t\n\t\t}// while\n\n\t}// main\n}", "score": 0.0}
{"id": "SHARE_1_1104_28__1_1104_14", "golden_code": "\n\n    import java.math.BigInteger;\n    import java.util.Arrays;\n    import java.util.Scanner;\n    import javax.swing.text.StyledEditorKit.BoldAction;\n    /**\n     *\n     * @author Asus\n     */\n    public class Main {\n\n        /**\n         * @param args the command line arguments\n         */\n        public static void main(String[] args) {\n            // TODO code application logic here\n            Scanner Sc = new Scanner(System.in);\n            char [] rsht = new char[200];\n            String outrsht;// = new char[200];\n\n            int i , j , k , l;\n            char t;\n            l = Sc.nextInt();\n            Sc.nextLine();\n            for(i = 0; i < l; i++)\n            {\n                outrsht = \"\";\n                rsht = Sc.nextLine().toCharArray();\n                for(j = rsht.length - 1; j>= 0; j--)\n                    outrsht += rsht[j];\n                System.out.println(outrsht);\n            }\n        \n     }\n}\n\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n  Scanner p=new Scanner(System.in);\n  int t=p.nextInt();\n  p.nextLine();\n  for(int i=0;i<t;i++){\n      System.out.println(r(p.nextLine()));\n  }\n    }\n    static String r(String s){\n\t\tString x = \"\";\n\t\tfor(char ch : s.toCharArray()){\n\t\t\tx = ch+\"\"+x;\n\t\t}\n\t\treturn x;\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_270__1_1001_82", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        ArrayList<String> temp = new ArrayList<String>();\n        Scanner input = new Scanner(System.in);\n        while (input.hasNextLine()){\n            temp.add(input.nextLine());\n        }\n        for(int i=0 ; i<temp.size() ; i++){\n            String[] array = temp.get(i).split(\" \");\n            int a = Integer.parseInt(array[0]);\n            int b = Integer.parseInt(array[1]);\n            System.out.println(a+b);\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main (String args[]){\n\t\tScanner in = new Scanner ( System.in);\n\t\twhile(in.hasNext()){\n\t\tint a = in.nextInt();\n\t\tint b = in.nextInt();\n\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_201__1_1001_42", "golden_code": "import java.math.BigInteger;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        BigInteger A=new BigInteger(\"0\");\n        BigInteger B =new BigInteger(\"0\");\n        Scanner input =new Scanner(System.in);\n        while(input.hasNext()){\n        A=input.nextBigInteger();\n        B=input.nextBigInteger();\n        System.out.println(A.add(B));\n        }\n    }\n}\n", "generated_code": "import java.util.*;\nclass Main {\n\tpublic static void main(String args[]){\n\t\tScanner A = new Scanner(System.in);\n\t\twhile(A.hasNextInt()){\n\t\t\tint a = A.nextInt();\n\t\t\tint b = A.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_6_1011_10__1_2763_9", "golden_code": "import java.util.*;\nclass HeapTree{\n\tpublic ArrayList<Integer> elements;\n\tpublic ArrayList<Integer> VValues;\n\tpublic Map<Integer,Integer> positions;\n\tint last;\n\tpublic HeapTree(int cap) {\n\t\telements = new ArrayList<Integer>();\n\t\tVValues = new ArrayList<Integer>();\n\t\tpositions = new HashMap<Integer,Integer>();\n\t\tlast = 0;\n\t\telements.clear();\n\t\tVValues.clear();\n\t\tpositions.clear();\n\t\tfor(int i = 0; i <= cap; i++){\n\t\t\telements.add(0);\n\t\t\tVValues.add(0);\n\t\t\t//positions.add(0);\n\t\t}\n\t}\n\tpublic void insert(int key,int vval){\n\t\tlast ++ ;\n\t\telements.set(last,key);\n\t\tpositions.put(vval,last);\n\t\tVValues.set(last,vval);\n\t\t//increaseKey(1);\n\t\tdecreaseKey(vval, key);\n\t}\n\tpublic void decreaseKey(int v, int newVal){\n\t\tint pos = positions.get(v);\n\t\telements.set(pos,newVal);\n\t\t//positions.put(newVa,pos);\n\t\twhile (pos / 2 > 0 && elements.get(pos/2) > elements.get(pos))\n\t\t{\n\t\t\tint parentpos = pos/2;\n\t\t\tpositions.put(VValues.get(parentpos),pos);\n\t\t\tpositions.put(VValues.get(pos),parentpos);\n\t\t\tint tmp = elements.get(parentpos);\n\t\t\telements.set(parentpos,elements.get(pos));\n\t\t\telements.set(pos,tmp);\n\t\t\t\n\t\t\ttmp = VValues.get(parentpos);\n\t\t\tVValues.set(parentpos,VValues.get(pos));\n\t\t\tVValues.set(pos,tmp);\n\t\t\tpos= parentpos;\n\t\t}\n\t}\n\tpublic void increaseKey(int pos){\n\t\twhile ((pos * 2 <= last && elements.get(pos*2) < elements.get(pos)) || (pos*2+1<= last && elements.get(pos*2+1) < elements.get(pos)))\n\t\t{\n\t\t\tint childpos;\n\t\t\tif (pos*2+1 <= last && elements.get(pos*2+1) <elements.get(pos*2))\n\t\t\t\tchildpos = pos*2+1;\n\t\t\telse\n\t\t\t\tchildpos = pos*2;\n\t\t\tpositions.put(VValues.get(childpos),pos);\n\t\t\tpositions.put(VValues.get(pos),childpos);\n\t\t\tInteger tmp = new Integer(elements.get(childpos));\n\t\t\telements.set(childpos,elements.get(pos));\n\t\t\telements.set(pos,tmp);\n\t\t\t\n\t\t\ttmp = VValues.get(childpos);\n\t\t\tVValues.set(childpos,VValues.get(pos));\n\t\t\tVValues.set(pos,tmp);\n\t\t\tpos  = childpos;\n\t\t}\n\t}\n\t\n\tpublic boolean empty(){\n\t\tif(last <= 1) return true;\n\t\treturn false;\n\t}\n\tpublic Integer extractMin(){\n\t\tint res = VValues.get(1);\n\t\t//System.out.println(\"last \" + last);\n\t\t//System.out.println(\"elements.get(last): \" + elements.get(last));\n\t\telements.set(1,elements.get(last));\n\t\tpositions.put(VValues.get(last),1);\n\t\tVValues.set(1,VValues.get(last));\n\t\tlast --;\n\t\tincreaseKey(1);\n\t\treturn res;\n\t}\n}\npublic class Main {\n\t\n\tpublic static void main(String[]ar){\n\t\tScanner read = new Scanner(System.in);\n\t\tint N,R,C;\n\t\tN = read.nextInt();\n\t\tR = read.nextInt();\n\t\tC = read.nextInt();\n\t\tArrayList<Integer> rooms = new ArrayList<Integer>();\n\t\tArrayList<Integer> distance = new ArrayList<Integer>();\n\t\tArrayList<ArrayList<Integer>> roomList = new ArrayList<ArrayList<Integer>>();\n\t\tArrayList<ArrayList<Integer>> halls = new ArrayList<ArrayList<Integer>>();\n\t\tfor(int i = 0; i <= R; i++){\n\t\t\trooms.add(0);\n\t\t\troomList.add(new ArrayList<Integer>());\n\t\t\tdistance.add(400000);\n\t\t\tArrayList<Integer> line = new ArrayList<Integer>();\n\t\t\tfor(int j = 0; j <= R; j++)\n\t\t\t\tline.add(0);\n\t\t\thalls.add(line);\n\t\t}\n\t\tfor(int i = 0; i < N; i++)\n\t\t{\n\t\t\tint z = read.nextInt();\n\t\t\trooms.set(z,rooms.get(z) + 1);\n\t\t}\n\t\tfor(int i =0; i < C; i++){\n\t\t\tint a,b,w;\n\t\t\ta = read.nextInt();\n\t\t\tb = read.nextInt();\n\t\t\tw = read.nextInt();\n\t\t\tif(halls.get(a).get(b)!= 0){\n\t\t\t\tint minval = Math.min(halls.get(a).get(b),w);\n\t\t\t\thalls.get(a).set(b,minval);\n\t\t\t}\n\t\t\telse{\n\t\t\t\troomList.get(a).add(b);\n\t\t\t\thalls.get(a).set(b,w);\n\t\t\t}\n\t\t\tif(halls.get(b).get(a)!= 0){\n\t\t\t\tint minval = Math.min(halls.get(b).get(a),w);\n\t\t\t\thalls.get(b).set(a,minval);\n\t\t\t}\n\t\t\telse{\n\t\t\t\troomList.get(b).add(a);\n\t\t\t\thalls.get(b).set(a,w);\n\t\t\t}\n\t\t\t//System.out.println(\"halls.get(a).set(b,w): \" + halls.get(a).get(b));\n\t\t}\n\t\t\n\t\t/*for(int i = 1; i <=R; i++){\n\t\t\tSystem.out.println(i+\" adjs: \");\n\t\t\tfor(int j = 0; j < roomList.get(i).size(); j++){\n\t\t\t\tSystem.out.print(roomList.get(i).get(j)+ \" \");\n\t\t\t}\n\t\t}*/\n\t\tint MinDist = 400000;\n\t\tfor(int i = 1; i <=R; i++){\n\t\t\tfor(int j = 1; j <= R; j++){\n\t\t\t\tdistance.set(j,400000);\n\t\t\t}\n\t\t\tdistance.set(i,0);\n\t\t\tHeapTree q = new HeapTree(R+1);\n\t\t\tfor(int j = 1; j <= R; j++){\n\t\t\t\tq.insert(distance.get(j),j);\n\t\t\t\t//System.out.print(\" dist \"+j+\" = \"+distance.get(j));\n\t\t\t}\n\t\t\t/*for(int j = 1; j <= q.last; j++){\n\t\t\t\tSystem.out.println(q.VValues.get(j));\n\t\t\t}*/\n\t\t//\tSystem.out.println(\"i: \" + i);\n\t\t\twhile(!q.empty()){\n\t\t\t\tint u = q.extractMin();\n\t\t\t//\tSystem.out.println(\"u: \" + u);\n\t\t\t\tfor(int j=0; j <roomList.get(u).size(); j++){\n\t\t\t\t\tint v = roomList.get(u).get(j);\n\t\t\t\t//\tSystem.out.println(i+\"  \"+v+\" are connected\");\n\t\t\t\t\tif(distance.get(v) > distance.get(u) + halls.get(u).get(v)){\n\t\t\t\t\t\tq.decreaseKey(v, distance.get(u) + halls.get(u).get(v));\n\t\t\t\t\t\tdistance.set(v,distance.get(u) + halls.get(u).get(v));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tint currDist = 0;\n\t\t\t/*System.out.println(\"i: \" + i);\n\t\t\tfor(int j = 1;j <= R;j++){\n\t\t\t\tSystem.out.println(\"j,distash: \"+j+\"  \"+distance.get(j));\n\t\t\t}*/\n\t\t\tfor(int j = 1;j <= R;j++){\n\t\t\t\tif(distance.get(j) >= 400000){\n\t\t\t\t\tcurrDist = -1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcurrDist += distance.get(j) * rooms.get(j);\n\t\t\t}\n\t\t\t//System.out.println(\"dist i: \" + currDist);\n\t\t\tif(currDist != -1)\n\t\t\t\tMinDist = Math.min(MinDist,currDist);\n\t\t}\n\t\tSystem.out.println(MinDist);\n\t}\n}\n", "generated_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\n/**\n *\n * What The Code?!\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int tc = s.nextInt();\n        for(int i =0; i<tc;i++){\n            String line=s.next();\n            line+=\"10\";\n            BigInteger multi=new BigInteger(\"1\");\n            int counter=0;\n            for(int j=0;j<line.length();j++){\n                char c;\n                if((c=line.charAt(j))>'0'&&c<='9'){\n                    counter++;\n                }\n                else if(c=='0'){\n                    if(counter!=0){\n                        counter--;\n                            if(counter==1)\n                        counter--;\n                        if(counter%2!=0){\n                            if(counter==3)\n                                multi=multi.multiply(BigInteger.valueOf(2));\n                            else\n                                multi=multi.multiply(BigInteger.valueOf(counter/2+1));\n                            //System.out.println(multi.mod(BigInteger.valueOf(1000000007)));\n                        }\n                    }\n                    counter=0;\n                }\n            }\n            System.out.println(multi.mod(BigInteger.valueOf(1000000007)));\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_2717_61__1_1001_370", "golden_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nclass Main{\n\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tBufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\t\twhile (true) {\n\t\t\tint n = Integer.parseInt(input.readLine());\n\t\t\tif (n == 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tStringBuilder s1 = new StringBuilder(input.readLine());\n\t\t\tStringBuilder s2 = new StringBuilder(input.readLine());\n\t\t\tStringBuilder s = new StringBuilder(input.readLine());\n\t\t\tStringBuilder temps1 = new StringBuilder(s1);\n\t\t\tStringBuilder temps2 = new StringBuilder(s2);\n\t\t\tStringBuilder temps;\n\t\t\tint o = 0;\n\t\t\twhile (o++ < 50) {\n\t\t\t\ttemps = new StringBuilder();\n\t\t\t\tfor (int i = 0; i < temps1.length(); i++) {\n\t\t\t\t\ttemps.append(temps2.charAt(i));\n\t\t\t\t\ttemps.append(temps1.charAt(i));\n\t\t\t\t}\n\t\t\t\tif (temps.toString().equals(s.toString())) {\n\t\t\t\t\tSystem.out.println(o);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ttemps1 = new StringBuilder(temps.substring(0, n));\n\t\t\t\ttemps2 = new StringBuilder(temps.substring(n, temps.length()));\n\t\t\t\tif (temps1.toString().equals(s1.toString()) && temps2.toString().equals(s2.toString())) {\n\t\t\t\t\tSystem.out.println(-1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n", "generated_code": "\n\nimport java.util.Scanner;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n/**\n *\n * @author Hezare 3vom\n */\npublic class Main {\n    public static void main(String[] args) {\n        int a;\n          int b;\n         int sum=0;\n          Scanner in=new Scanner(System.in);\n          while(in.hasNext()){\n             a=in.nextInt();\n         b=in.nextInt();\n         sum=a+b;\n          System.out.println(sum);\n          }\n        \n         \n    }\n}\n    \n", "score": 0.0}
{"id": "SHARE_5_1008_6__5_1008_10", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String args[])\n\t{\n\t\tScanner in=new Scanner(System.in);\n\t\tint N=in.nextInt();\n\t\tfor (int num=0;num<N;num++)\n\t\t{\n\t\t\tint value=20000;\n\t\t\tint startstate=0;\n\t\t\tint Nodes=in.nextInt();\n\t\t\tint Graph[][] = new int[Nodes][Nodes+1];\n\t\t\tfor(int j=0;j<Nodes;j++)\n\t\t\t{\n\t\t\t\tfor (int k=0;k<Nodes+1;k++)\n\t\t\t\t{\n\t\t\t\t\tGraph[j][k]=0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor(int k=0;k<Nodes-1;k++)\n\t\t\t{\n\t\t\t\tint A=in.nextInt();\n\t\t\t\tint B=in.nextInt();\n\t\t\t\tGraph[A-1][B-1]=1;\n\t\t\t\tGraph[B-1][A-1]=1;\n\t\t\t\tGraph[A-1][Nodes]=Graph[A-1][Nodes]+1;\n\t\t\t\tGraph[B-1][Nodes]=Graph[B-1][Nodes]+1;\n\t\t\t}\n\t\t\tint count=0;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tfor(int i=0;i<Nodes;i++)\n\t\t\t{\n\t\t\t\t\n\t\t\t\tint nodenum=i+1;\n\t\t\t\tif (Graph[i][Nodes]<2)\n\t\t\t\t\tcontinue;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t\n\t\t\t\t\tcount=Graph[i][Nodes];\n\t\t\t\t\tint E[]=new int [count];\n\t\t\t\t\tint c=0;\n\t\t\t\t\tfor (int j=0;j<Nodes;j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(Graph[i][j]>0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tE[c]=2*DFS(Graph,i,Nodes,j);\n\t\t\t\t\t\t\tc=c+1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tint P[][]=new int [Nodes][E.length+1];\n\t\t\t\t\tfor(int u=0;u<c+1;u++)\n\t\t\t\t\t\tP[0][u]=1;\n\t\t\t\t\tfor(int r=1;r<Nodes;r++)\n\t\t\t\t\t\tP[r][0]=0;\n\t\t\t\t\t\n\t\t\t\t\tfor (int x=1;x<Nodes;x++)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor(int y=1;y<E.length+1;y++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(x>=E[y-1])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tP[x][y] =  P[x][y-1] | P[x-E[y - 1]][y-1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tP[x][y]=P[x][y-1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor(int j=Nodes-1;j>-1;j--)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(P[j][E.length]==1){\n\t\t\t\t\t\t\tif(2*Nodes-2-j<value)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvalue=2*Nodes-2-j;\n\t\t\t\t\t\t\t\tstartstate=nodenum;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if(2*Nodes-2-j==value && nodenum<startstate)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvalue=2*Nodes-2-j;\n\t\t\t\t\t\t\t\tstartstate=nodenum;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n//\t\t\t\t\tfor (int j=0;j<count;j++)\n//\t\t\t\t\t{\n//\t\t\t\t\t\t\n//\t\t\t\t\t\tSystem.out.print(E[j]+\" \");\n//\t\t\t\t\t}\n//\t\t\t\t\tSystem.out.println();\n//\t\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(startstate+\" \"+value);\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t}\n\t\n\t\n\tpublic static int DFS(int Graph[][], int dad,int Nodes, int son)\n\t{\n\t\tif(Graph[son][Nodes]==1)\n\t\t\treturn 1;\n\t\tint A=0;\n\t\tfor(int i=0;i<Nodes;i++)\n\t\t{\n\t\t\tif(Graph[son][i]==1 && i!=dad)\n\t\t\t{\n\t\t\t\tA= DFS(Graph,son,Nodes,i)+A;\n\t\t\t}\n\t\t}\n\t\t\treturn A+1;\n\t}\n\t\n\n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.Scanner;\n\n\n\n\n\n\n//class graph{\n//\n//\n//}\n\nclass my_node{\n\t\n\tpublic char color;\n\tpublic\tmy_node dad;\n\tpublic int d,f;\n\tpublic\tint number;\n\tArrayList<my_node> adj=new ArrayList<my_node>();\n\t\n\t\tmy_node(int num){\n\t\t\tnumber=num;\n\t\t\tcolor='w';\n\t\t\tdad=null;\n\t\t\t}\n}\n\n\n\n\n\n\n\n\npublic class Main {\n     static int time;\n\t static ArrayList<Integer> adj_num=new ArrayList<Integer>();\n\t static ArrayList<Integer> output=new ArrayList<Integer>();\n\t\n\t\n\t \n\t public static void DFS(ArrayList<my_node> G){\n\t\t\toutput.clear();\n\t\t\t\n\t\t\tfor(int i=0;i<G.size();i++){\n\t\t\t\tG.get(i).color='w';\n\t\t\t\tG.get(i).dad=null;\n\t\t\t\tG.get(i).d=0;\n\t\t\t\tG.get(i).f=0;\n\t\t\t }\n\t\t\t\n\t\t\t\n\t\t\tfor(int j=0;j<G.size();j++){\n\t\t\t//j to 1\n\t\t\t\tif(G.get(j).adj.size()>=2  &  G.get(j).color=='w'){\n\t\t\t\t\t//System.out.println(\"hiii\");\n\t\t\t for(int i=0;i<G.size();i++){\n\t\t\t\t G.get(i).color='w';\n\t\t\t\t G.get(i).dad=null;\n\t\t\t\t G.get(i).d=0;\n\t\t\t\t G.get(i).f=0;\n\t\t\t }\n\t\t\t\n\t\t\t time=0;\n\t\t\t adj_num.clear();\n\t\t\t DFS_VISIT(G,j,j); \n\t\t\t// System.out.println(adj_num);\n\t\t\t int a;\n\t\t\t for(int y=0;y<adj_num.size()-1;y++){\n\t\t\t\t a=adj_num.get(y);\n\t\t\t\t adj_num.remove(y);\n\t\t\t\t adj_num.add(y,a-1); \n\t\t\t }\n\t\t\t a=adj_num.get(adj_num.size()-1);\n\t\t\t adj_num.remove(adj_num.size()-1);\n\t\t\t adj_num.add(a-1); \n//\t\t\t System.out.println(adj_num);\n//\t\t\t System.out.println(\"ccccc\");\n\t\t\t \n\t\t\t ///sort\n\t\t\t ////////////////delete\n\t\t\t \n\t\t\t int alaki1,alaki2;\n\t\t\t for(int y=0;y<adj_num.size();y++){\n\t\t\t\t for(int k=y+1;k<adj_num.size();k++){\n\t\t\t\t\t if(adj_num.get(k)<adj_num.get(y)){\n\t\t\t\t\t\t alaki1=adj_num.get(y);\n\t\t\t\t\t\t alaki2=adj_num.get(k);\n\t\t\t\t\t\t adj_num.remove(y);\n\t\t\t\t\t\t adj_num.remove(k-1);\n\t\t\t\t\t\t adj_num.add(y,alaki2);\n\t\t\t\t\t\t if(k>=adj_num.size()-1){\n\t\t\t\t\t\t\t adj_num.add(alaki1);\n\t\t\t\t\t\t\t }\n\t\t\t\t\t\t\t else{\n\t\t\t\t\t\t\t\tadj_num.add(k,alaki1); \n\t\t\t\t\t\t\t }\n\t\t\t\t\t}\n\t\t\t\t }\n\t\t\t }\n\t\t\t \n//\t\t\t System.out.println(adj_num);\n//\t\t\t System.out.println(\"dddd\");\n\t\t\t \n\t\t\t \n\t\t\t ///subtract\n\t\t\t for(int y=adj_num.size()-1;y>=1;y--){\n\t\t\t\t alaki1=adj_num.get(y);\n\t\t\t\t adj_num.remove(y);\n\t\t\t\t adj_num.add(y,alaki1-adj_num.get(y-1));\n\t\t\t }\n//\t\t\t System.out.println(adj_num);\n//\t\t\t System.out.println(\"eeee\");\n//\t\t\t \n\t\t\t \n\t\t\t \n\t\t\t for(int y=0;y<adj_num.size();y++){\n\t\t\t\t for(int k=y+1;k<adj_num.size();k++){\n\t\t\t\t\t if(adj_num.get(k)<adj_num.get(y)){\n\t\t\t\t\t\t alaki1=adj_num.get(y);\n\t\t\t\t\t\t alaki2=adj_num.get(k);\n\t\t\t\t\t\t adj_num.remove(y);\n//\t\t\t\t\t\t System.out.println(adj_num);\n\t\t\t\t\t\t adj_num.remove(k-1);\n//\t\t\t\t\t\t System.out.println(adj_num);\n\t\t\t\t\t\t adj_num.add(y,alaki2);\n//\t\t\t\t\t\t System.out.println(adj_num);\n\t\t\t\t\t\t if(k>=adj_num.size()-1){\n\t\t\t\t\t\t adj_num.add(alaki1);\n//\t\t\t\t\t\t System.out.println(adj_num);\n\t\t\t\t\t\t }\n\t\t\t\t\t\t else{\n\t\t\t\t\t\t\t adj_num.add(k,alaki1); \n\t\t\t\t\t\t }\n\t\t\t\t\t}\n\t\t\t\t }\n\t\t\t }\n\t\t\t \n//\t\t\t System.out.println(adj_num);\n//\t\t\t System.out.println(\"ggg\");\n\t\t\t int answer=-1;\n\t\t\t int n=adj_num.size()+1;\n\t\t\t int c=G.size()+1;\n\t\t\t int[][] ff=new int[n][c];\n\t\t\t \n\t\t\t for(int y=0;y<adj_num.size();y++){\n\t\t\t\t if(adj_num.get(y)>=c-2){\n\t\t\t\t\t answer=adj_num.get(y);\n\t\t\t\t\t int rr=2*(c-2)-answer;\n\t\t\t\t\t if(rr>answer)\n\t\t\t\t\t\t answer=rr;\n\t\t\t\t\t \n\t\t\t\t }\n\t\t\t }\n//\t\t\t System.out.println(answer+\"jjjj\");\n\t\t\t int maxi;\n\t\t\t if(answer==-1){\n\t\t\t\t for(int y=0;y<adj_num.get(1);y++){\n\t\t\t\t\t ff[0][y]=0;\n\t\t\t\t }\n\t\t\t\t for(int y=adj_num.get(1);y<c;y++){\n\t\t\t\t\t ff[0][y]=adj_num.get(1);\n\t\t\t\t }\n\t\t\t\t for(int y=1;y<n-1;y++){\n\t\t\t\t\t for(int p=adj_num.get(y);p<c;p++){\n\t\t\t\t\t\tmaxi=ff[y-1][p];\n\t\t\t\t\t\tif(ff[y-1][p-adj_num.get(y)]+adj_num.get(y)>maxi)\n\t\t\t\t\t\t\tmaxi=ff[y-1][p-adj_num.get(y)]+adj_num.get(y);\n\t\t\t\t\t\t\tff[y][p]=maxi;\n\t\t\t\t\t }\n\t\t\t\t }\n\t\t\t\t answer=ff[n-2][c-2];\n//\t\t\t\t for(int p=0;p<n;p++){\n//\t\t\t\t\t for(int q=0;q<c;q++){\n//\t\t\t\t\t\t System.out.print(ff[p][q]);\n//\t\t\t\t\t\t }\n//\t\t\t\t\t System.out.println(\"\");\n//\n//\t\t\t\t }\n\t\t\t\t \n\t\t\t }\n\t\t\t \n//\t\t\t System.out.println(answer+\"ddd\");\n\t\t\t output.add(j);\n\t\t\t output.add(answer);\n\n\t\t\t\t///reseting\n\t\t\t\tfor(int i=0;i<G.size();i++){\n\t\t\t\t\tG.get(i).color='w';\n\t\t\t\t\tG.get(i).dad=null;\n\t\t\t\t\tG.get(i).d=0;\n\t\t\t\t\tG.get(i).f=0;\n\t\t\t\t }\n\t\t\t\t \n\t\t\t\t\n\t\t\t\t//}\n\t\t\t\t\n//\t\t\t\t System.out.println(output);\n//\t\t\t\t System.out.println(\"ffff\");\n//\t\t\t\t\n\t\t\t \n\t\t\t\t}\n\t\t\t}\n\t\t \n\t\t\tint min,u = 1;\n\t\t\tmin=output.get(1);\n\t\t\tfor(int p=1;p<output.size();p=p+2){\n\t\t\t\tif(output.get(p)<min){\n\t\t\t\t\tmin=output.get(p);\n\t\t\t\t\tu=p;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint aa=output.get(u-1)+1;\n\t\t\tSystem.out.println(aa+\" \"+output.get(u));\n\t\t}\n\t\t\n\t \n\t \n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\n\n\t\tpublic static void DFS_VISIT(ArrayList<my_node> G,int i,int root){\n\t\t\t time=time+1;\n\t\t\t G.get(i).d=time;\n\t\t\t G.get(i).color='g';\n//\t\t\t System.out.println(\"hahaha\"+G.get(i).adj.size());\n\t\t\t \n\t\t\t for(int j=0;j<G.get(i).adj.size();j++){\n//\t\t\t\t System.out.println(\"xx\");\n\t\t\t\t if(G.get(i).adj.get(j).color=='w'){\n\t\t\t\t\t G.get(i).adj.get(j).dad=G.get(i);\n//\t\t\t\t\t System.out.println(\"count\");\n//\t\t\t\t\t for(int y=0;y<G.size();y++){\n//\t\t\t\t\t\t if(G.get(y)==G.get(j)){\n//\t\t\t\t\t\t\t System.out.println(\"hahaha\"+y);\n\t\t\t\t\t\t\t DFS_VISIT(G, G.get(i).adj.get(j).number,root); \n//\t\t\t\t\t\t\t break;\n//\t\t\t\t\t\t }\n//\t\t\t\t\t }\n\t\t\t\t\t\n\t\t\t\t }\n\t\t\t }\n\t\t\n\t\tG.get(i).color='b';\n\t\ttime++;\n\t\tG.get(i).f=time;\n\t\tif(G.get(i).dad!=null && G.get(i).dad.number==root){\n//\t\t\tSystem.out.println(\"love\");\n\t\t\tadj_num.add(time);\n\t\t}\n//\t\tSystem.out.println(adj_num);\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\tpublic static void main(String[] args) {\n\t\tint num_test,vertex,first,second;\n\t\tArrayList<my_node> G = new ArrayList<my_node>();\n\t\t\n\t\tScanner scanner = new Scanner(System.in);\n\t\tnum_test=scanner.nextInt();\n\t\t\n\t\tfor(int i=0;i<num_test;i++){\n\t\t\tvertex=scanner.nextInt();\n\t\t\t\t\n\t\t\tG.clear();\n\t\t\tfor(int j=0;j<vertex;j++){\n\t\t\t\tmy_node a=new my_node(j);\n\t\t\t\tG.add(a);\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tfor(int j=0;j<vertex-1;j++){\n\t\t\t\tfirst=scanner.nextInt()-1;\n\t\t\t\tsecond=scanner.nextInt()-1;\n\t\t\t\tint p,q;\n\t\t\t\tfor(p=0;p<vertex;p++){\n\t\t\t\t\tif(G.get(p).number==first)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tfor(q=0;q<vertex;q++){\n\t\t\t\t\tif(G.get(q).number==second)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tG.get(p).adj.add(G.get(q));\n\t\t\t\tG.get(q).adj.add(G.get(p));\n\t\t\t}\n\t\t\t\n//\t\t\tfor(int y=0;y<vertex;y++){\n//\t\t\t\tfor(int q=0;q<G.get(y).adj.size();q++){\n//\t\t\t\t\tSystem.out.print((G.get(y).adj.get(q)).number);\n//\t\t\t\t}\n//\t\t\t\tSystem.out.println(\"\");\n//\t\t\t}\n//\t\t\tSystem.out.println(\"bbbb\");\n//\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tDFS(G);\n\t\t\t\n\t\t\t\n\t\t}\n\t}//main\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n}\n\n\n\n\n\n\n\n\n\n\n//class Graph{\n//\tArrayList<Integer> Node=new ArrayList<Integer>();\n//}\n\n\n\n\n\n\n\n", "score": 1.0}
{"id": "SHARE_1_1001_207__1_1001_470", "golden_code": "import java.util.Scanner;\nclass Main\n{\n    public static void main(String [] args)\n\t\t{\n\t\t\tScanner e=new Scanner(System.in);\n\t\t\twhile(e.hasNext())\n\t\t\t{\n\t\t\t int a=e.nextInt();\n\t\t\t int b=e.nextInt();\n\t\t\t System.out.println(a+b);\n\t\t\t}\n\t\t}\n}", "generated_code": "import java.util.Scanner;\n \npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt() + cin.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_109016_45__1_2713_15", "golden_code": "import java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Hashtable;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.Queue;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.io.BufferedReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.io.InputStream;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tScanner scan = new Scanner(System.in);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n}\n\nclass TaskC {\n\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\n\t\tint n = in.nextInt();\n\t\twhile (n != 0) {\n\t\t\tList<Point> points = new ArrayList<Point>();\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tpoints.add(new Point(in.nextDouble(), in.nextDouble()));\n\t\t\t}\n\t\t\tCollections.sort(points, new Comparator<Point>() {\n\t\t\t\tpublic int compare(Point o1, Point o2) {\n\t\t\t\t\tif (o1.getX() == o2.getX()) {\n\t\t\t\t\t\tif (o1.getY() > o2.getY()) {\n\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (o1.getY() == o2.getY()) {\n\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (o1.getX() > o2.getX()) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t});\n\t\t\tdouble res = dist(points.get(0).getX(), points.get(1).getX(),\n\t\t\t\t\tpoints.get(0).getY(), points.get(1).getY());\n\t\t\tfor (int i = 0; i < points.size() - 1; i++) {\n\t\t\t\tdouble tres = 1e9;\n\t\t\t\tfor (int j = i + 1; j < points.size(); j++) {\n\t\t\t\t\tdouble temp = dist(points.get(i).getX(), points.get(j)\n\t\t\t\t\t\t\t.getX(), points.get(i).getY(), points.get(j).getY());\n\t\t\t\t\tif (temp < tres) {\n\t\t\t\t\t\ttres = temp;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tres = Math.min(res, tres);\n\t\t\t}\n\t\t\tres /= 2;\n\t\t\tDecimalFormat df = new DecimalFormat(\"0.00\");\n\t\t\tout.println(df.format(res));\n\t\t\tn = in.nextInt();\n\t\t}\n\t}\n\n\tpublic static double dist(double x1, double x2, double y1, double y2) {\n\t\treturn Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n\t}\n}\n\nclass Point {\n\tprivate double x;\n\tprivate double y;\n\n\tpublic double getX() {\n\t\treturn x;\n\t}\n\n\tpublic void setX(double x) {\n\t\tthis.x = x;\n\t}\n\n\tpublic double getY() {\n\t\treturn y;\n\t}\n\n\tpublic void setY(double y) {\n\t\tthis.y = y;\n\t}\n\n\tpublic Point(double x, double y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tpublic Point() {\n\t}\n}\n\nclass InputReader {\n\tBufferedReader br;\n\tStringTokenizer st;\n\n\tpublic InputReader(InputStream in) {\n\t\tbr = new BufferedReader(new InputStreamReader(in));\n\t\tst = null;\n\t}\n\n\tpublic String next() {\n\t\twhile (st == null || !st.hasMoreTokens()) {\n\t\t\ttry {\n\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn st.nextToken();\n\t}\n\n\tpublic int nextInt() {\n\t\treturn Integer.parseInt(next());\n\t}\n\n\tpublic long nextLong() {\n\t\treturn Long.parseLong(next());\n\t}\n\n\tpublic float nextFloat() {\n\t\treturn Float.parseFloat(next());\n\t}\n\n\tpublic double nextDouble() {\n\t\treturn Double.parseDouble(next());\n\t}\n}", "generated_code": "import  java.util.Scanner;\npublic class Main {\n    public static int conjecture(int x)\n    {\n        int c=0;\n        while(true)\n        {\n            if(x==1)\n            {\n                c++;\n                break;\n            }\n            if(x%2==0)\n            {\n                x/=2;\n                c++;\n            }\n            else\n            {\n                x=3*x+1;\n                c++;\n            }\n        }\n        return c;\n    }\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        while(input.hasNext())\n        {\n            int n=input.nextInt();\n            if(n==0)\n                break;\n            int c=conjecture(n);\n            System.out.println(c);\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_106022_32__1_2220_1", "golden_code": "//In  The Name of Allah\n\nimport java.util.Scanner;\n\npublic class Main {\n\tprivate static int rounders(String a) {\n\t\tchar[] buffer = a.toCharArray();\n\t\tint[] tmp = new int[(a.length())];\n\t\tfor (int i = 0; i < tmp.length; i++) {\n\t\t\ttmp[i] = buffer[i] - '0';\n\t\t}\n\t\tfor (int i = 0, n = tmp.length - 1; i < tmp.length - 1; i++) {\n\t\t\tif (tmp[n - i] >= 5)\n\t\t\t\ttmp[((n - i) - 1)]++;\n\t\t}\n\t\treturn (tmp[0] * (int) Math.pow(10, (tmp.length - 1)));\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tScanner in_kb = new Scanner(System.in);\n\t\tfor (int i = in_kb.nextInt(); i > 0; i--) {\n\t\t\tString a = in_kb.nextLine().trim();\n\t\t\tif (a.isEmpty()) {\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (a.length() == 1) {\n\t\t\t\tSystem.out.println(a);\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tSystem.out.println(rounders(a));\n\t\t\t}\n\t\t}\n\t}\n}\n", "generated_code": "import java.math.BigInteger;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner s=new Scanner(System.in);\n        BigInteger big;\n        while(true){\n            String str=s.next();\n            if(str.equals(\"-1\")){\n                break;\n            }\n            if(str.length()==1){\n                System.out.println(\"1\"+str);\n                continue;\n            }\n            String answer=\"\";\n            big=new BigInteger(str);\n            for (int i = 9; i > 1;) {\n                if(big.mod(new BigInteger(i+\"\")).toString().equals(\"0\")){\n                    big=big.divide(new BigInteger(i+\"\"));\n                    answer=answer+(i+\"\");\n                }else{\n                    i--;\n                }\n            }\n            if(big.toString().equals(\"1\")){\n                StringBuffer x=new StringBuffer(answer);\n                answer=x.reverse().toString();\n                System.out.println(answer);\n            }else{\n                System.out.println(\"There is no such number.\");\n            }\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2578_43__1_1656_19", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner scn = new Scanner(System.in);\n\n        String w = scn.nextLine();\n        int q = Integer.parseInt(w);\n\n        for (int j = 0; j < q; j++) {\n\n            String name = scn.nextLine();\n            int cob = 0, cog = 0;\n            String s = \"\";\n            String str = \"\";\n            s = name.toUpperCase();\n            char ch[] = new char[s.length()];\n            ch = s.toCharArray();\n            for (int i = 0; i < ch.length; i++) {\n                if (ch[i] == 'B') {\n                    cob++;\n                } else if (ch[i] == 'G') {\n                    cog++;\n                }\n            }\n            if (cog > cob) {\n                System.out.println(name + \" is GOOD\");\n            } else if (cob > cog) {\n                System.out.println(name + \" is A BADDY\");\n            }\n            else{System.out.println(name + \" is NEUTRAL\");}\n        }\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\n\npublic class Main {\n    public static void main(String[] args){\n        Scanner in=new Scanner(System.in);\n        int n=in.nextInt();\n        while(n!=-1)\n        {\n            int[]m=new int[15];\n            int[]e=new int[15];\n            int i=0;\n            int j=0;\n            while(n!=0)\n            {\n                m[i]=n;\n                i++;\n                if(n%2==0){\n                    e[j]=n;\n                    j++;}\n                n=in.nextInt();\n            }\n            int num=0;\n            for(int x=0;x<j;x++){\n                int k=e[x]/2;\n                for(int y=0;y<i;y++){\n                    if(k==m[y]){\n                        num++;\n                        break;\n                    }\n                }\n            }\n            System.out.println(num);    \n            n=in.nextInt();\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_106017_14__1_1651_49", "golden_code": "import java.util.Scanner;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scan = new Scanner(System.in);\n        int n;\n\twhile(scan.hasNextInt())\n\t{\n        n = scan.nextInt();\n        if((n==153)||(n==370)||(n==371)||(n==407))\n        {\n            System.out.println(\"Yes\");\n        }\n        else\n            System.out.println(\"No\");\n        }\n    }\n    \n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (true) { \n            int n=in.nextInt();\n            if (n==-1) {\n                System.exit(0);\n            }\n            int l=0;\n            String name[]=new String[n];\n            int arr[]=new int[n];\n            while (l<n) {                \n                int a=in.nextInt();\n                int b=in.nextInt();\n                int c=in.nextInt();\n                name[l]=in.next();\n                arr[l]=a*b*c;\n                l++;\n            }\n            int max=0;int min=0;\n            for (int i = 0; i < n; i++) {\n                if (arr[i]>arr[max]) {\n                    max=i;\n                }\n                if (arr[i]<arr[min]) {\n                    min=i;\n                }\n            }\n            System.out.println(name[max]+\" took clay from \"+name[min]+\".\");\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2686_0__1_1323_9", "golden_code": "import java.io.*;\nimport java.math.*;\nimport java.util.*;\n\npublic class Main\n{\n    public static void main(String[] args) throws IOException\n    {\n        Scanner scan = new Scanner(System.in);\n\n        while (scan.hasNext())\n        {\n            double dist = 0;\n            double fuel = 0;\n\n            double a, b;\n\n            double lastA = 0, lastB = 0;\n\n            a = scan.nextDouble();\n            b = scan.nextDouble();\n            if(a == -1 && b == -1) break;\n\n            while (true)\n            {\n                if(a == 0 && b == 0) break;\n\n                if(lastB > b)\n                {\n                    dist += a-lastA;\n                    fuel += lastB-b;\n                }\n\n                lastA = a;\n                lastB = b;\n\n                a = scan.nextDouble();\n                b = scan.nextDouble();\n            }\n\n            System.out.println(Math.round(dist/fuel*lastB));\n        }\n    }\n}", "generated_code": "//K.Razavi is here\nimport java.util.*;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scan = new Scanner(System.in);\n        boolean ok = false;\n        int test = 1;\n        while(true)\n        {\n            int n = scan.nextInt();\n            double x = scan.nextDouble();\n            double y = scan.nextDouble();\n            double z = scan.nextDouble();\n            if(n+x+y+z == 0)\n                break;\n            int counter  = 1;\n            if(ok)\n                System.out.println();\n            System.out.println(\"Round \"+test++);\n            ok = true;\n            while(n-- > 0)\n            {\n                double a = scan.nextDouble() , c = scan.nextDouble();\n\n                System.out.format(\"%d.\" ,counter++);\n                if(a == 0 || c == 0)\n                {\n                    System.out.format(\"   %.2f\\n\", x);\n                    continue;\n                }\n                double deg1 = Math.acos((x*x + z*z - y*y)/(2*z*x));\n                deg1 += Math.acos((a*a + z*z - c*c)/(2*z*a));\n                double res = Math.sqrt(a*a+x*x - 2*a*x*Math.cos(deg1));\n                System.out.format(\"   %.2f\\n\", res);\n            }\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1088_25__6_1009_9", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int num = input.nextInt();\n        int counter = 1;\n        while (counter <= num) {\n            String str = input.next();\n            System.out.println(\"String #\" + counter);\n            for (int i = 0; i < str.length(); i++) {\n                if (str.charAt(i) == 'Z') {\n                    System.out.print('A');\n                } else {\n                    System.out.print((char)(((int)str.charAt(i))+1));\n                }\n            }\n            System.out.println();\n            System.out.println();\n            counter++;\n        }\n    }\n}\n", "generated_code": "import java.util.*;\n\nclass Data\n{\n\tint nRoom;\n\tint maxRoom;\n}\n\nclass BFSer\n{\n\tprivate static int bfsVisit(Node v, int id)\n\t{\n\t\tLinkedList<Node> vs = new LinkedList<Node>();\n\t\tLinkedList<Node> visiteds = new LinkedList<Node>();\n\t\tint n = 0;\n\t\tv.color = 'g';\n\t\tvs.addFirst(v);\t\t\n\t\twhile(vs.size() != 0)\n\t\t{\n\t\t\tNode ver = vs.removeLast();\n\t\t\tvisiteds.add(ver);\n\t\t\tn++;\n\t\t\tver.compId = id;\n\t\t\tfor(Edge e : ver.es)\n\t\t\t{\n\t\t\t\tif(!e.isWall && e.v.color == 'w')\n\t\t\t\t{\n\t\t\t\t\te.v.color = 'g';\t\n\t\t\t\t\tvs.addFirst(e.v);\t\n\t\t\t\t}\n\t\t\t}\t\n\t\t\tver.color = 'b';\n\t\t}\n\t\t\n\t\tfor(Node ver : visiteds)\n\t\t\tver.compSize = n;\n\t\treturn n;\n\t}\n\n\tprivate static int findMax(LinkedList<Integer> ns)\n\t{\n\t\tint max = ns.getFirst();\n\t\tfor(int n : ns)\n\t\t\tif(n > max)\n\t\t\t\tmax = n;\n\t\treturn max; \n\t}\n\n\tprivate static void checkWalls(LinkedList<Wall> walls)\n\t{\n\t\tIterator it = walls.iterator();\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tWall w = (Wall)(it.next());\t\n\t\t\tif(w.v1.compId == w.v2.compId)\n\t\t\t\tit.remove();\n\t\t}\t\t\n\t}\n\n\tpublic static Data bfs(Node[][] vs, LinkedList<Wall> walls)\n\t{\n\t\tint m = vs.length;\n\t\tint n = vs[0].length;\n\t\tint id = 0;\n\t\tLinkedList<Integer> sizes = new LinkedList<Integer>();\n\t\tfor(int i = 0; i < m; i++)\n\t\t\tfor(int j = 0; j < n; j++)\n\t\t\t\tif(vs[i][j].color == 'w')\n\t\t\t\t\tsizes.add(bfsVisit(vs[i][j], id++));\n\n\t\tData d = new Data();\n\t\td.nRoom = sizes.size();\n\t\td.maxRoom = findMax(sizes);\n\t\tcheckWalls(walls);\t\t\t\n\n\t\treturn d;\n\t}\t\n}\n\nclass Graph \n{\n\tNode[][] nodes;\n\tLinkedList<Wall> walls;\n}\n\nclass Node\n{\n\tpublic int i;\n\tpublic int j;\n\tpublic int compSize;\n\tpublic int compId;\n\tpublic Edge[] es;\n\tpublic int num;\n\tchar color;\n\tboolean sizeSet;\n\tpublic Node(int n, int ii, int jj)\n\t{\n\t\tes = new Edge[4];\n\t\tfor(int k = 0; k < 4; k++)\n\t\t\tes[k] = new Edge();\t\n\t\tnum = n;\n\t\tcolor = 'w';\n\t\tsizeSet = false;\n\t\ti = ii;\n\t\tj = jj;\n\t}\n}\n\nclass Edge\n{\n\tpublic Node v;\n\tpublic boolean isWall;\n\tpublic Edge() {isWall = false; v = null;}\n}\n\nclass Wall\n{\n\tpublic Node v1;\n\tpublic Node v2;\n\tpublic int[] wsne;\n\tprivate int min(int a, int b)\n\t{\n\t\treturn (a <= b) ? a : b;\n\t}\n\n\tprivate int max(int a, int b)\n\t{\n\t\treturn (a >= b) ? a : b;\t\n\t}\t\n\n\tpublic Wall(Node n1, Node n2)\n\t{\n\t\tv1 = n1;\n\t\tv2 = n2;\t\t\t\t\n\t\twsne = new int[4];\n\t\twsne[0] = min(v1.j, v2.j);\n\t\twsne[1] = max(v1.i, v2.i);\n\t\twsne[2] = min(v1.i, v2.i);\n\t\twsne[3] = max(v1.j, v2.j);\t\n\t}\n}\n\nclass Input \n{\n\tpublic static Graph get()\n\t{\n\t\tScanner in = new Scanner(System.in);\n\t\tint m, n;\n\t\tm = in.nextInt();\n\t\tn = in.nextInt();\n\t\tNode[][] vs = new Node[n][m];\n\t\tLinkedList<Wall> walls = new LinkedList<Wall>();\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tfor(int j = 0; j < m; j++)\n\t\t\t\tvs[i][j] = new Node(in.nextInt(), i, j);\n\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tfor(int j = 0; j < m; j++)\n\t\t\t\tSetter.set(vs[i][j], vs, walls);\t\n\n\t\tGraph g = new Graph();\n\t\tg.nodes = vs;\t\n\t\tg.walls = walls;\n\t\treturn g;\n\t}\n}\n\nclass Main\n{\n\tprivate static int maxPosRoom(LinkedList<Wall> walls)\n\t{\n\t\tIterator it = walls.iterator();\n\t\tint max;\n\t\tif(!it.hasNext())\n\t\t\treturn -1;\n\t\telse\n\t\t{\n\t\t\tWall w = (Wall)(it.next());\n\t\t\tmax = w.v1.compSize + w.v2.compSize;\t\n\t\t}\n\t\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tWall w = (Wall)(it.next());\n\t\t\tint t = w.v1.compSize + w.v2.compSize;\n\t\t\tif(t < max)\n\t\t\t\tit.remove();\n\t\t\telse\n\t\t\t\tmax = t;\t\n\t\t}\n\n\t\tit = walls.iterator();\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tWall w = (Wall)(it.next());\n\t\t\tif(w.v1.compSize + w.v2.compSize < max)\n\t\t\t\tit.remove();\n\t\t}\n\t\t\n\t\treturn max;\n\t}\n\n\tprivate static String computeWallAddr(Wall w)\n\t{\n\t\tString s = new String();\n\t\tNode v1 = w.v1;\n\t\tNode v2 = w.v2;\n\t\tif(v1.i == v2.i)\n\t\t{\n\t\t\ts += Integer.toString(v1.i + 1);\n\t\t\ts += \" \";\n\t\t\ts += (v1.j < v2.j)?Integer.toString(v1.j + 1):Integer.toString(v2.j + 1);\n\t\t\ts += \" E\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\ts += (v1.i > v2.i)?Integer.toString(v1.i + 1):Integer.toString(v2.i + 1);\n\t\t\ts += \" \";\n\t\t\ts += Integer.toString(v1.j + 1);\n\t\t\ts += \" N\";\n\t\t}\t\t\n\t\treturn s;\n\t}\n\n\tprivate static void findMin(LinkedList<Wall> walls, int i)\n\t{\n\t\tIterator it = walls.iterator();\n\t\tint min = ((Wall)(it.next())).wsne[i];\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tWall w = (Wall)(it.next());\n\t\t\tif(w.wsne[i] > min)\n\t\t\t\tit.remove();\n\t\t\telse\n\t\t\t\tmin = w.wsne[i];\n\t\t}\n\n\t\tit = walls.iterator();\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tWall w = (Wall)(it.next());\n\t\t\tif(w.wsne[i] > min)\n\t\t\t\tit.remove();\n\t\t}\t\t\n\t}\n\n\tprivate static void findMax(LinkedList<Wall> walls, int i)\n\t{\n\t\tIterator it = walls.iterator();\n\t\tint max = ((Wall)(it.next())).wsne[i];\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tWall w = (Wall)(it.next());\n\t\t\tif(w.wsne[i] < max)\n\t\t\t\tit.remove();\n\t\t\telse\n\t\t\t\tmax = w.wsne[i];\n\t\t}\n\n\t\tit = walls.iterator();\n\t\twhile(it.hasNext())\n\t\t{\n\t\t\tWall w = (Wall)(it.next());\n\t\t\tif(w.wsne[i] < max)\n\t\t\t\tit.remove();\n\t\t}\t\t\n\t}\n\n\tprivate static void filter(LinkedList<Wall> walls, int i, boolean min)\n\t{\n\t\tif(walls.size() == 0)\n\t\t{\n\t\t\tSystem.out.println(\"Error in filter 1\");\n\t\t\treturn;\n\t\t}\n\t\telse if(walls.size() == 1)\n\t\t\treturn;\n\t\telse\n\t\t{\n\t\t\tif(min)\n\t\t\t\tfindMin(walls, i);\n\t\t\telse\n\t\t\t\tfindMax(walls, i);\n\t\t\tmin = (i == 0 || i == 2) ? false : (i == 1) ? true : true; \n\t\t\tif(i > 3)\n\t\t\t\tSystem.out.println(\"Error in filter 2\");\n\t\t\tfilter(walls, ++i, min);\n\t\t}\t\n\t}\n\n\tprivate static String theWall(LinkedList<Wall> walls)\n\t{\n\t\tif(walls.size() == 0)\n\t\t\treturn new String();\n\t\tfilter(walls, 0, true);\n\t\treturn computeWallAddr(walls.get(0));\n\t}\n \n\tpublic static void main(String[] args)\n\t{\n\t\t//long start = System.currentTimeMillis();\n\t\tGraph g = Input.get();\n\t\tData d = BFSer.bfs(g.nodes, g.walls);\n\t\tSystem.out.println(d.nRoom + \"\\n\" + d.maxRoom);\n\t\tint max = maxPosRoom(g.walls);\n\t\tif(max == -1)\n\t\t\treturn;\n\t\tSystem.out.println(max);\n\t\tSystem.out.println(theWall(g.walls));\n\t//\tlong end = System.currentTimeMillis();\n\t//\tSystem.out.println(\"Running time : \" + (end - start));\n\t}\n}\n\nclass Setter\n{\n\tprivate static void set1(Node v, int i, LinkedList<Wall> walls)\n\t{\n\t\tint j = (i + 2) % 4;\n\t\tv.es[i].isWall = true;\n\t\tif(v.es[i].v != null)\n\t\t{\n\t\t\tv.es[i].v.es[j].isWall = true;\n\t\t\twalls.add(new Wall(v, v.es[i].v));\n\t\t}\n\t}\n\n\tprivate static void set2(Node v, int i, int j, LinkedList<Wall> walls)\n\t{\n\t\tset1(v, i, walls);\n\t\tset1(v, j, walls);\n\t}\n\n\tprivate static void setWall(Node v, Node[][] vs, LinkedList<Wall> walls)\n\t{\t\n\t\tint n = 0;\n\t\tif(v.es[0].isWall)\n\t\t\tn += 1;\n\t\tif(v.es[1].isWall)\n\t\t\tn += 2;\n\t\tif(v.es[2].isWall)\n\t\t\tn += 4;\n\t\tif(v.es[3].isWall)\n\t\t\tn += 8;\t\t\t\n\t\tn = v.num - n;\n\t\tif(n == 1)\n\t\t\tset1(v, 0, walls);\n\t\telse if(n == 2)\n\t\t\tset1(v, 1, walls);\n\t\telse if(n == 4)\n\t\t\tset1(v, 2, walls);\n\t\telse if(n == 8)\n\t\t\tset1(v, 3, walls);\n\t\telse if(n == 3)\n\t\t\tset2(v, 0, 1, walls);\n\t\telse if(n == 5)\n\t\t\tset2(v, 0, 2, walls);\n\t\telse if(n == 9)\n\t\t\tset2(v, 0, 3, walls);\n\t\telse if(n == 6)\n\t\t\tset2(v, 1, 2, walls);\n\t\telse if(n == 10)\n\t\t\tset2(v, 1, 3, walls);\n\t\telse if(n == 12)\n\t\t\tset2(v, 2, 3, walls);\n\t}\n\n\tpublic static void set(Node v, Node[][] vs, LinkedList<Wall> walls)\n\t{\n\t\tif(v.i > 0)\n\t\t\tv.es[1].v = vs[v.i - 1][v.j];\n\t\telse\n\t\t\tv.es[1].isWall = true;\n\t\tif(v.i < vs.length - 1)\n\t\t\tv.es[3].v = vs[v.i + 1][v.j];\n\t\tif(v.j > 0)\n\t\t\tv.es[0].v = vs[v.i][v.j - 1];\n\t\telse\n\t\t\tv.es[0].isWall = true;\n\t\tif(v.j < vs[0].length - 1)\n\t\t\tv.es[2].v = vs[v.i][v.j + 1];\t\t\n\t\tsetWall(v, vs, walls);\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1651_0__1_2311_19", "golden_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\twhile(s.hasNext()){\n\t\t\tint a = s.nextInt();\n\t\t\tif(a == -1)\n\t\t\t\treturn;\n\t\t\tint[] studem = new int[a];\n\t\t\tString[] name = new String[a];\n\t\t\tfor(int i=0 ; i<a ; i++){\n\t\t\t\tstudem[i] = s.nextInt()*s.nextInt()*s.nextInt();\n\t\t\t\tname[i] = s.next();\n\t\t\t}\n\t\t\tint maxi = 0 ;\n\t\t\tint mini = 0;\n\t\t\tint max = studem[0] ;\n\t\t\tint min = studem[0];\n\t\t\t\n\t\t\tfor(int i=1 ; i<a ; i++){\n\t\t\t\tif(studem[i] > max){\n\t\t\t\t\tmaxi = i;\n\t\t\t\t\tmax = studem[i];\n\t\t\t\t}\n\t\t\t\tif(studem[i] < min){\n\t\t\t\t\tmini = i;\n\t\t\t\t\tmin = studem[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(name[maxi] + \" took clay from \" + name[mini] + \".\");\n\t\t}\n\t}\n}", "generated_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\nclass Main{\n\n\tpublic static void main(String[] z) throws IOException {\n\t\tInputStreamReader s =new InputStreamReader(System.in);\n\t\tint i;\n\t\tHashMap<Long, Integer> c =new HashMap<Long,Integer>();\n\t\tlong m=-1,n=0,j=0;\n\t\tboolean space = true,neg = false;\n\t\twhile ((i = s.read())!=-1){\n\t\t\tchar ch = (char) i;\n\t\t\tif (ch=='-'){\n\t\t\t\tneg =true;\n\t\t\t}else if (ch<='9'&&ch>='0'){\n\t\t\t\tj=(j*10)+(ch-'0');\n\t\t\t\tspace=false;\n\t\t\t}else if(ch==' '||ch=='\\n'){\n\t\t\t\t\n\t\t\t\tif (!space){\n\t\t\t\t\tif (neg)\n\t\t\t\t\t\tj*=-1;\n\t\t\t\t\tif (!c.containsKey(j)){\n\t\t\t\t\t\tc.put(j, 1);\n\t\t\t\t\t\tif (1>m){\n\t\t\t\t\t\t\tn= j;\n\t\t\t\t\t\t\tm = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tint count = c.get(j)+1;\n\t\t\t\t\t\tc.put(j,count);\n\t\t\t\t\t\tif (count>m){\n\t\t\t\t\t\t\tn= j;\n\t\t\t\t\t\t\tm = count;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (ch=='\\n'&&m!=-1){\n\t\t\t\t\tSystem.out.println(n);\n\t\t\t\t\tc =new HashMap<Long,Integer>();\n\t\t\t\t\tm=-1;n=0;\n\t\t\t\t}\n\t\t\t\tj=0;\n\t\t\t\tspace = true;\n\t\t\t\tneg = false;\n\t\t\t}\n\t\t}\n\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_293__1_1001_4", "golden_code": "import java.util.*;\n\npublic class Main{\n\tpublic static void main(String args[]){\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext())\n\t\t\tSystem.out.println(in.nextInt() + in.nextInt());\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n\t\tpublic static void main(String[] args) {\n\t\t\tScanner inp=new Scanner (System.in);\n\t\t\twhile(inp.hasNext()){\n\t\t\tint n1=inp.nextInt(), n2=inp.nextInt();\n\t\t\tint n = n1 + n2;\n\t\t\tSystem.out.println(n);\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_233__1_1001_166", "golden_code": "import java.util.Scanner;\n \npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt() + cin.nextInt());\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main(String[] args)\n{\n\tScanner scan = new Scanner(System.in);\n\t\n\twhile(scan.hasNext())\n\t{\n\t\t\tSystem.out.println(scan.nextInt() + scan.nextInt());\n\t}\n\t\n\t\n\t\n}\n\n}", "score": 1.0}
{"id": "SHARE_1_1230_69__6_1011_19", "golden_code": "\nimport java.util.Scanner;\n\n/**\n *\n * @author user\n */\npublic class Main {\n\n    static Scanner in = new Scanner(System.in);\n\n    /**\n     * @param args the command line arguments\n     */\n    static void foo(String st) {\n\n        int x = 0;\n        for (int i = 0; i < st.length(); i++) {\n            x += (int) st.charAt(i) - 48;\n        }\n        if (x >= 10) {\n            foo(x + \"\");\n        } else {\n            System.out.println(x);\n        }\n    }\n\n    public static void main(String[] args) {\n        // TODO code application logic here\n        String st = \"\";\n        while ( !st.equals(\"0\")) {\n            st = in.nextLine();\n            if ( !st.equals(\"0\")) {\n                foo(st);\n            }\n        }\n    }\n}", "generated_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\npublic class Main{\n\tpublic static void main(String args[]){\n\n\t\tRescue m = new Rescue();\n\t\tm.readInput();\n\t\t//m.FindPath();\n\t}\n\n\t\n}\nclass EdgeComparator implements Comparator<Edge>\n{\n    public int compare(Edge e1, Edge e2)\n    {\n    \tif(e1.weight == e2.weight)\n    \t\treturn 0;\n    \telse if(e1.weight > e2.weight)\n    \t\treturn 1;\n    \t\treturn -1;\n\n    }\t\n}\nclass Edge{\n\tint weight;\n\tint end;\n\tint start;\n\tEdge(int s,int e,int w){\n\t\tend = e;\n\t\tweight = w;\n\t\tstart = s;\n\t}\n\n}\nclass Rescue{\n\tArrayList<ArrayList <Edge>> adjList;\n\tint N;\n\tint R;\n\tint C;\n\tint [] dist;\n\tArrayList<Integer> Rooms;\n\tvoid set(){\n\t\tfor(int i=0;i<R;i++){\n\t\t\tRooms.add(0);\n\t\t\t//adjList.add(new PriorityQueue<Edge>(R, new EdgeComparator()));\n\t\t\tadjList.add(new ArrayList<Edge>());\n\t\t}\n\t}\n\tvoid readInput(){\n\t\tString line;\n\t\tint num = 0;\n\t\tint temp = 0;\n\t\tint begin;\n\t\tint finish;\n\t\ttry{\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tline = br.readLine();\n\t\t\tString[] word = line.split(\"\\\\s+\");\n\t\t\tN = Integer.parseInt(word[0]);\n\t\t\tR = Integer.parseInt(word[1]);\n\t\t\tC = Integer.parseInt(word[2]);\n\t\t\tRooms =  new ArrayList<Integer>(R);\n\t\t\tdist = new int [R];\n\t\t\tadjList = new ArrayList<ArrayList <Edge>>();\n\t\t\tset();\n\t\t\tdo {\n\t\t\t\tline = br.readLine();\n\t\t\t\tword = line.split(\"\\\\s+\");\n\t\t\t\ttemp = Integer.parseInt(word[0]);\n\t\t\t\tRooms.set(temp-1,(Rooms.get(temp-1))+1);\n\t\t\t\tnum++;\n\t\t\t} while(line != null && num < N);\n\t//\t\tSystem.out.println(Rooms);\n\t\t\tnum = 0;\n\t\t\tdo{\n\t\t\t\tline = br.readLine();\n\t\t\t\tword = line.split(\"\\\\s+\");\n\t\t\t\tbegin = Integer.parseInt(word[0]);\n\t\t\t\tfinish = Integer.parseInt(word[1]);\n\t\t\t\ttemp = Integer.parseInt(word[2]);\n\t\t\t\tEdge e = new Edge(begin,finish,temp);\n\t\t\t\tadjList.get(begin-1).add(e);\n\t\t\t\tEdge ePrim = new Edge(finish,begin,temp);\n\t\t\t\tadjList.get(finish-1).add(ePrim);\n\t\t\t\tnum++;\n\t\t\t}while(num < C);\n\t\t}catch(IOException e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\t//printAdd();\n\t\t//System.out.println(Dijkstra(0));\n\t\tbestPath();\n\t}\n\tvoid printAdd(){\n\t\tfor(int i = 0 ;i < adjList.size();i++){\n\t\t\tSystem.out.println(adjList.get(i).size());\n\t\t}\n\t}\n\tint Dijkstra(int source){\n\t\tint sum = 0;\n\t\tfor(int i=0;i<R;i++){\n\t\t\tdist[i] = (1450 * 225)+1000;\n\t\t}\n\t\tEdge start = new Edge(source,source,0);\n\t\tEdge temp,avaz;\n\t\tPriorityQueue<Edge> heap = (new PriorityQueue<Edge>(1, new EdgeComparator()));\n\t\tdist[source] = 0;\n\t\tint parent = source;\n\t\theap.add(start);\n\t\twhile(!heap.isEmpty()){\n\t\t\ttemp = heap.poll();\n\t\t\t//System.out.println(\"parent: \" + parent);\n\t\t\tfor(int i=0;i<adjList.get(parent).size();i++){\n\t\t\t\tint alt = dist[parent] + adjList.get(parent).get(i).weight;\n\t\t\t\tif(alt < dist[adjList.get(parent).get(i).end-1]){\n\t\t\t\t\tdist[adjList.get(parent).get(i).end-1] = alt;\n\t\t\t\t\tavaz = new Edge(parent+1,adjList.get(parent).get(i).end,alt);\n\t\t\t\t\theap.add(avaz);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(temp.end > 0)\n\t\t\t\tparent = temp.end-1;\n\t\t}\n\t\tfor(int i=0;i<dist.length;i++){\n\t\t\t\n\t\t\tsum+=(dist[i]*Rooms.get(i));\n\t\t\t//System.out.println(dist[i]);\n\t\t\t//System.out.println(dist[i]*Rooms.get(i)+ \"**\");\n\t\t\t}\n\t\t//System.out.println(\"********\");\n\t\treturn sum;\n\t}\n\t\n\tvoid bestPath(){\n\t\tint min = (1450 * 225)+1000;\n\t\tint result;\n\t\tfor(int i=0;i<Rooms.size();i++){\n\t\t\tresult = Dijkstra(i);\n\t\t\t//System.out.println(result);\n\t\t\tif(result < min)\n\t\t\t\tmin = result;\n\t\t}\n\t\tSystem.out.println(min);\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_331__1_1001_34", "golden_code": "import java.util.Scanner;\npublic class Main {//class name should be Main\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "generated_code": "import java.util.Scanner;\n\nclass Main\n{\n public static void main(String[] args )\n{\nScanner in=new Scanner(System.in);\n\nwhile(in.hasNext())\n{\nint a=in.nextInt();\nint b=in.nextInt();\nSystem.out.println((a+b));\n}\n}\n}", "score": 1.0}
{"id": "SHARE_6_1009_21__6_1009_18", "golden_code": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\n\npublic class Main {\n\tprivate static int[][] tagMap;\n    private static Map<Integer, Integer> size;\n\tpublic static void main(String[] args) {\n\t\tsize = new HashMap<Integer, Integer>();\n\t\tScanner in = new Scanner(System.in);\n\t\tint n , m ; \n\t\tn = in.nextInt();\n\t\tm = in.nextInt();\n\t\tint[][] map = new int [m][n];\n\t\t tagMap = new int [m][n];\n\t\tfor(int i = 0 ; i<m ; i++){\n\t\t\tfor(int j = 0 ; j< n; j++){\n\t\t\t\tmap[i][j]=in.nextInt();\n\t\t\t}\n\t\t}\n\t\tMyDFS(map);\n//\t\tfor(int i = 0 ; i<m ; i++){\n//\t\t\tfor(int j = 0 ; j< n; j++){\n//\t\t\t\tSystem.err.print(tagMap[i][j]);\n//\t\t\t}\n//\t\t\tSystem.err.println();\n//\t\t}\n//\t\tSystem.err.println(size.get(tagMap[4][0]));\n\t\tint num = 0;\n\t\tint temp = tagMap[0][0];\n\t\tfor(int i = 0 ; i<m ; i++){\n\t\t\tfor(int j = 0 ; j< n; j++){\n\t\t\t\tif(tagMap[i][j]>num)\n\t\t\t\t\tnum = tagMap[i][j];\n\t\t\t\tif(size.get(tagMap[i][j])>temp)\n\t\t\t\t\ttemp =size.get( tagMap[i][j] );\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(num+1);\n\t\tSystem.out.println(temp);\n\t\t//wall removal! :D\n\t\tint max= 0;\n\t\tfor(int l = 0 ; l <m ; l++ ){\n\t\t\tfor(int i = 0 ; i <n-1 ; i++ ){\n\t\t\t\tif(tagMap[l][i]!=tagMap[l][i+1]){\n\t\t\t\t\tif(size.get(tagMap[l][i])+size.get(tagMap[l][i+1]) > max)\n\t\t\t\t\t\tmax = size.get(tagMap[l][i])+size.get(tagMap[l][i+1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int l = 0 ; l <n ; l++ ){\n\t\t\tfor(int i = 0 ; i <m-1 ; i++ ){\n\t\t\t\tif(tagMap[i][l]!=tagMap[i+1][l]){\n\t\t\t\t\tif(size.get(tagMap[i][l])+size.get(tagMap[i+1][l]) > max)\n\t\t\t\t\t\tif(size.get(tagMap[i][l])+size.get(tagMap[i+1][l]) > max)\n\t\t\t\t\t\tmax = size.get(tagMap[i][l])+size.get(tagMap[i+1][l]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(max == 0)\n\t\t\tmax=temp ;\n\t\tSystem.out.println(max);\n\t\t\n\t\t\n\t\tif(n==1){\n\t\t\tfor(int i =m-1 ; i>0 ; i++){\n\t\t\t\tif(tagMap[i][0]!=tagMap[i-1][0]){\n\t\t\t\t\tif(size.get(tagMap[i][0])+size.get(tagMap[i-1][0]) == max){\n\t\t\t\t\t\tSystem.out.print((i+1));\n\t\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\t\tSystem.out.print((1));\n\t\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\t\tSystem.out.println(\"N\");\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(m==1){\n\t\t\tfor(int i =0 ; i<n-1 ; i++){\n\t\t\t\tif(tagMap[0][i]!=tagMap[0][i+1]){\n\t\t\t\t\tif(size.get(tagMap[0][i])+size.get(tagMap[0][i+1]) == max){\n\t\t\t\t\t\tSystem.out.print(1);\n\t\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\t\tSystem.out.print(i+1);\n\t\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\t\tSystem.out.println(\"E\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0 ; i <n ; i++ ){\t\n\t\tfor(int l = m-1 ; l >= 0 ; l-- ){\n\t\t\t\tif(l>0){\n\t\t\t\tif(tagMap[l][i]!=tagMap[l-1][i]){\n\t\t\t\t\tif(size.get(tagMap[l][i])+size.get(tagMap[l-1][i]) == max){\n\t\t\t\t\t\tSystem.out.print((l+1));\n\t\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\t\tSystem.out.print((i+1));\n\t\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\t\tSystem.out.println(\"N\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t}if(i<n-1){\n\t\t\t\t\tif(tagMap[l][i]!=tagMap[l][i+1]){\n\t\t\t\t\t\tif(size.get(tagMap[l][i])+size.get(tagMap[l][i+1]) == max){\n\t\t\t\t\t\t\tSystem.out.print((l+1));\n\t\t\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\t\t\tSystem.out.print((i+1));\n\t\t\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t\t\t\tSystem.out.println(\"E\");\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n//\t\tif(tagMap[m-1][n-1]!= tagMap[m-2][n-1]){\n//\t\t\tSystem.out.print(m);\n//\t\t\tSystem.out.print(\" \");\n//\t\t\tSystem.out.print(n);\n//\t\t\tSystem.out.print(\" \");\n//\t\t\tSystem.out.println(\"N\");\n//\t\t\treturn;\n//\t\t}\n\t\t\n\t\n//\t\tif(tagMap[m-1][n-1]!= tagMap[m-2][n-1]){\n//\t\t\tSystem.out.print(m-1);\n//\t\t\tSystem.out.print(\" \");\n//\t\t\tSystem.out.print(n);\n//\t\t\tSystem.out.print(\" \");\n//\t\t\tSystem.out.println(\"E\");\n//\n//\t\t}\n//\t\t\n\t}\n\tstatic void MyDFS(int[][] map){\n\t\tint k = 0 ;\n\t\tint[][] visited = new int [map.length][map[0].length];\n\t\tfor(int i = 0 ; i<map.length ; i++){\n\t\t\tfor(int j = 0 ; j< map[0].length; j++){\n\t\t\t\tif(visited[i][j]==0){\n\t\t\t\t\t size.put(k, DFSVisit(map.clone(),visited,i,j,k));\n\t\t\t\t\t k++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprivate static int DFSVisit(int[][] map, int[][] visited, int i, int j,int k) {\n\t\tvisited[i][j]=1;\n\t\tint sum = 1; \n\t\ttagMap[i][j]=k;\n\t\tif(map[i][j]<8 && i+1 < map.length && visited[i+1][j]==0)\n\t\t\tsum += DFSVisit(map, visited, i+1, j ,  k );\n\t\telse if(map[i][j]>=8)\n\t\t\tmap[i][j]-=8;\n\t\tif(map[i][j]<4 && j+1<map[0].length && visited[i][j+1]==0)\n\t\t\tsum += DFSVisit(map, visited, i, j+1,  k);\n\t\telse if(map[i][j]>=4)\n\t\t\tmap[i][j]-=4;\n\t\tif(map[i][j]<2 && i-1>=0 &&visited[i-1][j]==0)\n\t\t\tsum += DFSVisit(map, visited, i-1, j , k);\n\t\telse if(map[i][j]>=2)\n\t\t\tmap[i][j]-=2;\n\t\tif(map[i][j]<1 && j-1>=0 &&visited[i][j-1]==0)\n\t\t\tsum += DFSVisit(map, visited, i, j-1, k);\n\t\telse if(map[i][j]>=1)\n\t\t\tmap[i][j]-=1;\n\t\t return sum ;\n\t\t\n\t}\n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t\tCastle ex = new Castle();\n\t\t\n\t\tint[][] a = ex.graphImplemention();\n\t\t\n\t\tGraph g = new Graph(a.length);\n\t\t\n\t\tg.initialize(a);\n\t\t\n\t\tg.DFS();\n\t\t\n\t\t\n\t\tSystem.out.println(g.partions);\n\t\tSystem.out.println(g.maximumRoom );\n\t\tg.calculateMaximumRoom(a, ex.rows, ex.columns);\n\t\tSystem.out.println( g.maximumRoomSize);\n\t\tSystem.out.println(g.rowOfRemovedWall + \" \" + g.columnOfRemovedWall + \" \" + g.directionOfRemovedWall);\n\n\t\t\n\t}\n\n\t\n\tpublic static class Castle {\n\t\n\t\tpublic int columns=0;\n\t\tpublic int rows = 0;\n\t\n\t\tpublic int[][] graphImplemention () {\n\t\t\n\t\tScanner scanConsole = new Scanner( System.in );\n\t\t\n\t\tint temp=0;\n\t\tcolumns = scanConsole.nextInt();\n\t\trows = scanConsole.nextInt();\n\t\tscanConsole.nextLine();\n\t\t\n\t\tint[][] graphMatrix = new int[rows*columns][rows*columns];\n\t\t\n\t\tfor (int i = 0; i < graphMatrix.length; i++) {\n\t\t\tfor (int j = 0; j < graphMatrix.length; j++) {\n\t\t\t\tgraphMatrix[i][j] = 0;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tboolean north = true,\n\t\t\t\tsouth = true,\n\t\t\t\twest = true,\n\t\t\t\teast = true;\n\t\t\t\n\t\tfor (int i = 0; i < rows*columns; i++) {\n\t\t\tnorth = true;\tsouth = true;\twest = true;\teast = true;\n\t\t\t\n\t\t\ttemp = scanConsole.nextInt();\n\t\t\t\t\t\t\t\t\n\t\t\tif ( temp-8 > -1 ) { temp -= 8; south = false; }\n\t\t\t\n\t\t\tif ( temp-4 > -1 ) { temp -= 4; east = false; }\n\t\t\t\n\t\t\tif ( temp-2 > -1 ) { temp -= 2; north = false; }\n\t\t\t\n\t\t\tif ( temp-1 > -1 ) { temp -= 1; west = false; }\n\t\t\t\n\t\t\tif ( north ){\n\t\t\t\tif ( i-columns > -1 ) { graphMatrix[i][i-columns] = 1; } \n\t\t\t}\n\t\t\t\n\t\t\tif ( south ){\n\t\t\t\tif ( i+columns < rows*columns ) { graphMatrix[i][i+columns] = 1; } \n\t\t\t}\n\t\t\t\n\t\t\tif ( west ){\n\t\t\t\tif ( i-1 > -1 ) { graphMatrix[i][i-1] = 1; } \n\t\t\t}\n\t\t\t\n\t\t\tif ( east ){\n\t\t\t\tif ( i+1 < rows*columns ) { graphMatrix[i][i+1] = 1; } \n\t\t\t}\n\t\t\n\t\t\tif( i%columns == columns-1 ) scanConsole.nextLine();\n\t\t\t\n\t\t}\t\t\n\t\t\n\t\tscanConsole.close();\n\t\t\n\t\treturn graphMatrix;\n\t\t\n\t}\n\t\n}\n\n\n\n\tpublic static class Graph {\n\t\n\tclass Node {\n\t\t\n\t\t//data\n\t\tpublic int numOfNode;\n\t\tpublic int color;\n\t\t\n\t\tpublic Node father;\n\t\tpublic ArrayList< Node > childerens;\t\n\t\t\n\t\t\n\t\tpublic Node( int num/*data*/ ) {\n\t\t\t\n\t\t\tcolor = 0;\n\t\t\tfather = null;\n\t\t\tnumOfNode = num;\n\t\t\tchilderens = new ArrayList<Node>();\n\t\t}\n\t\n\t\tpublic void addChild( Node c ) {\n\t\t\tchilderens.add(c);\n\t\t}\n\t\t\n\t\tpublic Node find( int num ) {\n\t\t\t\n\t\t\tfor (int i = 0; i < childerens.size(); i++) {\n\t\t\t\t\n\t\t\t\tNode tmp = childerens.get(i);\n\t\t\t\tif( tmp.numOfNode == num )\n\t\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t}\n\t}\n\t\n\t\n\t\n\tpublic Node root;\n\tpublic int partions;\n\tpublic int maximumRoom;\n\tpublic int color; \n\tpublic int maximumRoomSize;\n\tpublic int rowOfRemovedWall;\n\tpublic int columnOfRemovedWall;\n\tpublic String directionOfRemovedWall;\n\t\n\tArrayList<Integer> roomSizes = new ArrayList<Integer>();\n\tArrayList<Integer> roomColors = new ArrayList<Integer>(); \n\t\n\tpublic Graph( int numOfVertexs/*data*/ ) {\n\t\t\n\t\troot = new Node(0);\n\t\tpartions = 0; \n\t\tcolor = 1;\n\t\tmaximumRoomSize = 0;\n\t\t \n\t\tfor (int i = 1; i < numOfVertexs+1; i++) {\n\t\t\troot.addChild( new Node(i) );\n\t\t}\n\t\t\n\t}\n\t\n\tpublic void initialize( int[][] graphMatrix ){\n\t\t\n\t\tfor (int i = 0; i < graphMatrix.length; i++) {\n\t\t\tfor (int j = 0; j < graphMatrix[0].length; j++) {\n\t\t\t\t\n\t\t\t\tif( graphMatrix[i][j] == 1 ){\n\t\t\t\t\troot.find(i+1).addChild(root.find(j+1));\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tpublic void printGraph() {\n\t\t\n\t\tSystem.out.println(\"++++++------>\" + root.childerens.get(0).color);\n\t\t\n\t\t\n\t\tfor (int i = 0; i < root.childerens.size(); i++) {\n\t\t\tNode vertex = root.childerens.get(i);\n\t\t\t\n\t\t\tSystem.out.print((i)+ \": \");\n\t\t\tfor (int j = 0; j < vertex.childerens.size(); j++) {\n\t\t\t\tSystem.out.print((vertex.childerens.get(j).numOfNode-1) + \" \" + (vertex.childerens.get(j).color) );\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tSystem.out.println();\n\t}\n\t\n\tpublic void DFS() {\n\t\t\n\t\t\n\t\t\n\t\tfor (int s = 0; s < root.childerens.size(); s++) {\n\t\t\t\n\t\t\tif ( root.childerens.get(s).color == 0 ) {\n\t\t\t\tmaximumRoom = 0; \n\t\t\t\tDFS_Visit( root.childerens.get(s) ); \n\t\t\t\tpartions++; \n\t\t\t\t\t\t\n\t\t\t\troomSizes.add(maximumRoom);\n\t\t\t\troomColors.add(color);\n\t\t\t\tcolor++;\n\t\t\t}\n\t\t}\n\t\t\n\t\tmaximumRoom = java.util.Collections.max(roomSizes);\n\t\t\n\t}\n\t\n\tpublic void DFS_Visit( Node s ){\n\t\tmaximumRoom++;\n\t\ts.color = -1;\n\t\t\n\t\tfor (int u = 0; u < s.childerens.size(); u++) {\n\t\t\t\n\t\t\tif ( s.childerens.get(u).color == 0 ) {\n\t\t\t\tDFS_Visit( s.childerens.get(u) );\n\t\t\t\ts.childerens.get(u).father = s;\n\t\t\t}\n\t\t}\n\t\ts.color = color;\n\t}\n\n\tpublic void calculateMaximumRoom( int[][] graphMatrix, int numOfRows, int numOfColumns ){ \n\t\t\n\t\tfor (int column = 0; column < numOfColumns; column++) {\n\t\t\t\n\t\t\tfor (int row = numOfRows-1; row > -1; row--) {\n\t\t\n\t\t\t\tif ( returnState( row-1, column, numOfRows, numOfColumns, 1 ) ){\n\t\t\t\t\n\t\t\t\t\tint tmp = roomSizes.get( root.find( column + row*numOfColumns+1 ).color-1 ) +\n\t\t\t\t\t\t\t  roomSizes.get( root.find( column + (row-1)*numOfColumns+1 ).color-1) ;\n\t\t\t\t\t\n\t\t\t\t\tif ( tmp > maximumRoomSize ){\n\t\t\t\t\t\tmaximumRoomSize = tmp;\n\t\t\t\t\t\tdirectionOfRemovedWall = \"N\";\n\t\t\t\t\t\trowOfRemovedWall = row + 1;\n\t\t\t\t\t\tcolumnOfRemovedWall = column +1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ( returnState( row, column+1, numOfRows, numOfColumns, 0 ) ) {\n\t\t\t\t\n\t\t\t\t\tint tmp = roomSizes.get( root.find( column + row*numOfColumns+1 ).color-1 ) +\n\t\t\t\t\t\t\t  roomSizes.get( root.find( column+1 + (row)*numOfColumns+1 ).color-1) ;\n\t\t\t\t\t\n\t\t\t\t\tif ( tmp > maximumRoomSize ){\n\t\t\t\t\t\tmaximumRoomSize = tmp;\n\t\t\t\t\t\tdirectionOfRemovedWall = \"E\";\n\t\t\t\t\t\trowOfRemovedWall = row + 1;\n\t\t\t\t\t\tcolumnOfRemovedWall = column +1;\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t}\n\t\n\tpublic boolean returnState ( int row, int column, int numOfRows, int numOfColumns, int d ) {\n\t\t\n\t\tif ( row < 0 || column >= numOfColumns ) return false;\n\t\t\n\t\t\n\t\t//north\n\t\tif ( d == 1 ){\n\t\t\tif ( root.find( column + (row)*numOfColumns+1 ).color == root.find( column + (row+1)*numOfColumns+1 ).color ) return false;\n\t\t}\n\t\t\n\t\t//east\n\t\telse if ( d == 0 ){\n\t\t\tif ( root.find( column + row*numOfColumns+1 ).color == root.find( column-1 + row*numOfColumns+1 ).color ) return false; \n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\t\n\t\n}\n\n\n\t\n}\n", "score": 1.0}
{"id": "SHARE_1_101365_1__1_101365_0", "golden_code": "// K.Razavi is here\nimport java.util.*;\npublic class Main\n{\n    public static void main(String args[])\n    {\n        Scanner scan = new Scanner(System.in);\n        int tc = scan.nextInt();\n        scan.nextLine() ;\n        for(int tc1 = 1 ; tc1 <= tc ; tc1++)\n        {\n            int r = scan.nextInt() , h = scan.nextInt();\n            String s = scan.nextLine().substring(1);\n            String[] board = new String[r];\n            for(int i = 0 ; i < r ; i++)\n                board[i] = s.substring(i*h , i*h+h);\n            int at = 0 , atX = 0 , atY = 0;\n            boolean[][] ok = new boolean[r][h];\n            int[] Y = {1 , 0 , -1 , 0} , X = {0 , 1 , 0 , -1};\n            String res = \"\";\n            for(int i = 0 ; i < s.length() ; i++)\n            {\n                if(out(atX , atY , r , h))\n                {\n                    i--;\n                    continue;\n                }\n                res += board[atX].charAt(atY);\n                ok[atX][atY] = true;\n                atX += X[at];\n                atY += Y[at];\n                if(out(atX , atY , r , h) || ok[atX][atY])\n                {\n                    atX -= X[at];\n                    atY -= Y[at];\n                    at = (at+1)%4 ;\n                    atX += X[at];\n                    atY += Y[at];\n                }\n\n            }\n            String ret = \"\";\n            for(int i = 0 ; i < res.length() ; i+=5)\n            {\n                if(i+5 > res.length())\n                    break;;\n                String q = res.substring(i , i+5);\n                if(q.equals(\"00000\"))\n                    ret+=\" \";\n                else\n                    ret += toNum(q);\n            }\n            while (ret.length() > 0 && ret.charAt(ret.length()-1) == ' ')\n                ret = ret.substring(0 , ret.length()-1);\n            System.out.println(tc1+\" \"+ret);\n        }\n    }\n\n    private static String toNum(String s)\n    {\n        int n = 0 ;\n        for(int i = 0 ; i < 5 ; i++)\n            n = n*2 + (s.charAt(i)-'0');\n        return  n == 0 ? \" \" : (char)(n+'A'-1)+\"\";\n    }\n\n    private static boolean out(int x, int y, int r, int h)\n    {\n        return x < 0 || x >= r || y < 0 || y >= h ;\n    }\n}", "generated_code": "import java.util.*;\nimport java.io.*;\n\nimport static java.lang.Math.*;\n\npublic class Main\n{\n\tstatic int ax[] = {0, 1, 0,-1};\n\tstatic int ay[] = {1, 0,-1, 0};\n\tpublic static void main(String[] args) throws Exception\n\t{\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter writer = new PrintWriter(new OutputStreamWriter(System.out));\n\n\t\tint tc = Integer.parseInt(reader.readLine());\n\n\t\tint at = 1;\n\t\twhile(tc-- > 0)\n\t\t{\n\t\t\tStringTokenizer st = new StringTokenizer(reader.readLine());\n\t\t\tint r = Integer.parseInt(st.nextToken());\n\t\t\tint c = Integer.parseInt(st.nextToken());\n\n\t\t\tString str = st.nextToken();\n\n\t\t\tboolean [][] matrix = new boolean[r][c];\n\n\t\t\tfor(int i = 0 ; i<r ; i++)\n\t\t\t\tfor(int j = 0 ; j<c ; j++)\n\t\t\t\t\tmatrix[i][j] = str.charAt(i*c+j) == '1' ? true : false;\n\n\t\t\tint x,y;\n\t\t\tx=y=0;\n\n\t\t\tint dir = 0;\n\t\t\tboolean [][] visited = new boolean[r][c];\n\n\t\t\tint num = 0;\n\n\t\t\tString res = \"\";\n\n\t\t\tfor(int i = 0 ; i<r*c ; i++)\n\t\t\t{\n\t\t\t\tnum*=2;\n\t\t\t\tnum+= matrix[x][y] ? 1 : 0;\n\t\t\t\tvisited[x][y] = true;\n\n\t\t\t\tif(i%5 == 4)\n\t\t\t\t{\n\t\t\t\t\tif(num == 0)\n\t\t\t\t\t\tres+=\" \";\n\t\t\t\t\telse\n\t\t\t\t\t\tres+=(char)(num+'A'-1);\n\t\t\t\t\tnum = 0;\n\t\t\t\t}\n\n\t\t\t\tif(!(x+ax[dir%4] >= 0 && x+ax[dir%4] < r && y+ay[dir%4] >= 0 && y+ay[dir%4] < c && !visited[x+ax[dir%4]][y+ay[dir%4]]))\n\t\t\t\t\tdir++;\n\t\t\t\tx+=ax[dir%4];\n\t\t\t\ty+=ay[dir%4];\n\t\t\t}\n\n\t\t\twhile(res.endsWith(\" \"))\n\t\t\t\tres = res.substring(0, res.length()-1);\n\n\t\t\twriter.println(at++ +\" \"+res);\n\t\t}\n\t\twriter.flush();\n\t\twriter.close();\n\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_448__1_1001_218", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {\n            int a = in.nextInt();\n            int b = in.nextInt();\n            System.out.println(a + b);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\t\t\n\t\t\tScanner s=new Scanner(System.in);\n\t\t\twhile(s.hasNext()){\n\t\t\t\tint A=s.nextInt();\n\t\t\t\tint B=s.nextInt();\n\t\t\t\tSystem.out.println(A+B);\n\t\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_2848_34__1_2848_24", "golden_code": "import java.util.Scanner;\n\n/**\n * Created by E540 on 11/24/2016.\n */\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        int[] hitpointNums;\n        int Cpower;\n        int enemyNums;\n        int testcaseNums;\n        Scanner scanner = new Scanner(System.in);\n        testcaseNums = scanner.nextInt();\n        for(int i = 0; i < testcaseNums; i++)\n        {\n            enemyNums = scanner.nextInt();\n            Cpower = scanner.nextInt();\n            hitpointNums = new int[enemyNums];\n            for (int j = 0; j < enemyNums; j++)\n                hitpointNums[j] = scanner.nextInt();\n\n            NumFinder(enemyNums, Cpower, hitpointNums);\n        }\n    }\n\n    public static void NumFinder(int enemyNums, int Cpower, int[] hitpointNums)\n    {\n        int numpointer = 0;\n        int direction = 1;\n        int murderNum = 0;\n        int lastman = 0;\n        for(int i = 0; i < enemyNums + 5; i++) {\n\n            while (hitpointNums[numpointer] <= 0)\n            {\n                if(numpointer == 0 && direction == -1)\n                {\n                    numpointer = hitpointNums.length - 1;\n                    continue;\n                }\n                else if(numpointer == hitpointNums.length - 1 && direction == 1)\n                {\n                    numpointer = 0;\n                    continue;\n                }\n                numpointer = numpointer + direction;\n            }\n\n            hitpointNums[numpointer] = hitpointNums[numpointer] - Cpower;\n            if( i == enemyNums + 4)\n                lastman = numpointer;\n            if (numpointer == 0 && direction == -1 && hitpointNums[numpointer] > 0) {\n                numpointer = hitpointNums.length - 1;\n                continue;\n            } else if (numpointer == hitpointNums.length - 1 && direction == 1 && hitpointNums[numpointer] > 0) {\n                numpointer = 0;\n                continue;\n            } else if (hitpointNums[numpointer] <= 0) {\n                direction = direction * -1;\n                murderNum++;\n                lastman = numpointer;\n                if (murderNum == hitpointNums.length)\n                    break;\n                if (numpointer == 0 && direction == -1)\n                    numpointer = hitpointNums.length - 1;\n                else if (numpointer == hitpointNums.length - 1 && direction == 1)\n                    numpointer = 0;\n                continue;\n            }\n\n            if( i == enemyNums + 4)\n                lastman = numpointer;\n            numpointer = numpointer + direction;\n        }\n\n        System.out.println (lastman + 1);\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    static Scanner in = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int num = in.nextInt();\n\n        while (num != 0) {\n            boolean right = true, left = false;\n            int numOfZeroes = 0;\n            int last = 0;\n            int n = in.nextInt();\n            int c = in.nextInt();\n            int[] line = new int[n];\n            for (int i = 0; i < n; i++) {\n                line[i] = in.nextInt();\n            }\n            int i = 0;\n            while (n + 5 > 0) {\n                if(numOfZeroes == line.length){\n                    break;\n                }\n                if (line[i] > 0) {\n                    line[i] -= c;\n                    n--;\n                    last = i + 1;\n                    if (line[i] <= 0) {\n                        if (right) {\n                            right = false;\n                            left = true;\n                            i--;\n                            if (i < 0) {\n                                i = line.length - 1;\n                            }\n                            numOfZeroes++;\n                        } else {\n                            right = true;\n                            left = false;\n                            i++;\n                            if (i == line.length) {\n                                i = 0;\n                            }\n                            numOfZeroes++;\n                        }\n\n                    } else {\n                        if (right) {\n                            i++;\n                            if (i == line.length) {\n                                i = 0;\n                            }\n                        } else {\n                            i--;\n                            if (i < 0) {\n                                i = line.length - 1;\n                            }\n                        }\n                    }\n                } else {\n                    if (right) {\n                        i++;\n                        if (i == line.length) {\n                            i = 0;\n                        }\n                    } else {\n                        i--;\n                        if (i < 0) {\n                            i = line.length - 1;\n                        }\n                    }\n                }\n            }\n            System.out.println(last);\n            num--;\n\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_101055_16__1_1320_10", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n    public static void main(String[] args){\n        Scanner in=new Scanner(System.in);\n        int t=in.nextInt(),m,n;\n        for(int i=0;i<t;i++){\n            m=in.nextInt();\n            n=in.nextInt();\n            int[]A=new int[m];\n            int[]B=new int[n];\n            for(int j=0;j<m;j++)\n                A[j]=in.nextInt();\n            for(int j=0;j<n;j++)\n                B[j]=in.nextInt();\n            for(int j=0;j<n;j++){\n                int num=Integer.MAX_VALUE,index=-1;\n                for(int k=0;k<m;k++){\n                    int tt=0,u=A[k]^B[j];  \n                    while(u!=0)\n                    {\n                        if((u&1)>0)\n                                tt++;\n                        u>>=1;\n                    }\n                    if(tt<num){\n                    num=tt;\n                    index=k;  \n                    }\n                    else if(tt==num && A[index]>A[k])  \n                    index=k;\n                    \n                }\n                System.out.println(A[index]);\n                \n            }\n        }\n    }\n}", "generated_code": "/**\n * Created with IntelliJ IDEA.\n * User: sepideh\n */\n\nimport java.util.*;\n\nimport static java.lang.Math.*;\nimport static java.lang.System.*;\n\npublic class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\n\t\tint counter = 0;\n\n\t\twhile (true)\n\t\t{\n\t\t\tchar [][] pattern = new char[5][5];\n\n\t\t\tfor(int i = 0 ;i < 5 ;i++)\n\t\t\t\tpattern[i] = scan.nextLine().trim().toCharArray();\n\n\t\t\tint n = scan.nextInt();\n\n\t\t\tif(n == 0)\tbreak;\n\n\t\t\tif(counter != 0)\tout.println();\n\n\t\t\tint [][] numbers = new int[5][5];\n\n\t\t\tboolean [][] cards = new boolean [n][76];\n\n\t\t\tfor(int card = 0; card < n; card++)\n\t\t\t\tfor(int i = 0; i < 5; i++)\n\t\t\t\t\tfor(int j = 0; j < 5; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tnumbers[i][j] = scan.nextInt();\n\n\t\t\t\t\t\tif(pattern[i][j] == 'X')\n\t\t\t\t\t\t\tcards[card][numbers[i][j]] = true;\n\t\t\t\t\t}\n\n\t\t\tout.println(\"Game \"+ (++counter));\n\n\t\t\tSortedSet <Integer>[] equals = new TreeSet[n];\n\t\t\tfor(int i = 0; i < n; equals[i] = new TreeSet<Integer>(), i++);\n\n\t\t\tfor(int i = 1; i < n; i++)\n\t\t\t{\n\t\t\t\tfor(int j = 0; j < i; j++)\n\t\t\t\t{\n\t\t\t\t\tboolean ok = true;\n\n\t\t\t\t\tfor (int k = 0; k < 76; k++)\n\t\t\t\t\t\tif(cards[i][k] && !cards[j][k])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tok = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\tif(ok)\n\t\t\t\t\t\tequals[i].add(j+1);\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i = 0; i < n; i++)\n\t\t\t\tif(!equals[i].isEmpty())\n\t\t\t\t\tout.println(\"Card \"+ (i+1) +\" is equivalent to card \"+ equals[i].first());\n\n\t\t\tscan.nextLine();\n\t\t}\n\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_2212_17__1_1001_131", "golden_code": "import java.text.DecimalFormat;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner inptut = new Scanner(System.in);\n\t\tint n = inptut.nextInt();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint a = inptut.nextInt();\n\t\t\tint[] b = new int[a];\n\t\t\tdouble avg = 0;\n\t\t\tfor (int j = 0; j < b.length; j++) {\n\t\t\t\tb[j] = inptut.nextInt();\n\t\t\t\tavg += b[j];\n\t\t\t}\n\t\t\tavg /= a;\n\t\t\tdouble count = 0;\n\t\t\tdouble darsad = 100 / (double) a;\n\t\t\tfor (int j = 0; j < b.length; j++) {\n\t\t\t\tif (b[j] > avg) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdouble t = darsad * count;\n\t\t\tDecimalFormat df = new DecimalFormat();\n\t\t\tdf.setMaximumFractionDigits(3);\n\t\t\tdf.setMinimumFractionDigits(3);\n\t\t\tSystem.out.println(df.format(t) + \"%\");\n\t\t}\n\t}\n\n}\n", "generated_code": "\n\n\n\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        int A, B ;int tedaeTeam; int adad2;\n          Scanner s = new Scanner(System.in);\n          while(s.hasNext()){\n             A=s.nextInt();\n             B=s.nextInt();\n             adad2=A+B;\n              System.out.println(adad2);\n        }\n\n    }\n}\n    ", "score": 0.0}
{"id": "SHARE_1_2715_9__1_2715_10", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tstatic int[][] bonds; \n\tstatic boolean[][] calcd;\n\tpublic static void main(String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\tfor(int n=sc.nextInt();n>0;n=sc.nextInt()){\n\t\t\tbonds=new int[n][n];\n\t\t\tcalcd=new boolean[n][n];\n\t\t\tfor (int i = 0; i < calcd.length; i++) {\n\t\t\t\tfor (int j = 0; j < calcd[i].length; j++) {\n\t\t\t\t\tcalcd[i][j]=false;\n\t\t\t\t\tbonds[i][j]=0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsc.nextLine();\n\t\t\tString rna=sc.nextLine();\n\t\t\tSystem.out.println(maxBonds(rna, 0,n-1));\n\t\t}\n\t}\n\tstatic int maxBonds(String rna, int i,int j){\n\t\tif(i<0||i>=rna.length()||j<0||j>=rna.length())\n\t\t\treturn 0;\n\t\tif(i==j||i+1==j){\n\t\t\tcalcd[i][j]=true;\n\t\t\treturn 0;\n\t\t}\n\t\tif(calcd[i][j])\n\t\t\treturn bonds[i][j];\n\t\tif(criteria(rna,i,j))\n\t\t\tbonds[i][j]=maxBonds(rna, i+1, j-1)+1;\n\t\tfor(int k=i;k<j;k++)\n\t\t\tbonds[i][j]=Math.max(maxBonds(rna, i, k) + maxBonds(rna, k+1, j),bonds[i][j]);\n\t\tcalcd[i][j]=true;\n\t\treturn bonds[i][j];\n\t}\n\tpublic static boolean criteria(String rna, int i, int j) {\n\t\tchar a=rna.charAt(i);\n\t\tchar b=rna.charAt(j);\n\t\treturn (a=='A'&&b=='U')||(a=='U'&&b=='A')||(a=='C'&&b=='G')||(a=='G'&&b=='C');\n\t}\n}\n", "generated_code": "import java.util.*;\npublic class Main\n{\n    static int mem[][];\n    public static void main(String[] args)\n    {\n        Scanner scan = new Scanner(System.in);\n        while(true)\n        {\n            int n = scan.nextInt();\n            if(n==0)\n                return;\n            String str = scan.next();\n            mem = new int[n][n];\n            for(int[] i : mem)\n                Arrays.fill(i, -1);\n            System.out.println(n < 3 ? 0 : rec(0, n-1, str));\n        }\n\n    }\n\n    private static int rec(int i, int j, String s)\n    {\n        if(Math.abs(i-j) < 2)\n            return 0 ;\n        if(mem[i][j] != -1)\n            return mem[i][j];\n        int res =  rec(i+1, j-1, s)+(check(s.charAt(i),s.charAt(j)) ? 1 : 0);\n        for(int x = i ; x < j ; x++)\n        {\n            res = Math.max(res, rec(i, x, s)+rec(x+1, j, s));\n        }\n        return mem[i][j] = res;\n    }\n\n    public static boolean check(char a, char b)\n    {\n        if(a == 'U' && b == 'A')\n            return  true;\n        if(a == 'A' && b == 'U')\n            return  true;\n        if(a == 'C' && b == 'G')\n            return  true;\n        if(a == 'G' && b == 'C')\n            return  true;\n        return false;\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_175__1_1001_304", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "generated_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) throws MalformedURLException, IOException {\n\n        URL url;\n\n        try {\n            // get URL content\n            url = new URL(\"http://www.mkyong.com\");\n            URLConnection conn = url.openConnection();\n\n            // open the stream and put it into BufferedReader\n            BufferedReader br = new BufferedReader(\n                    new InputStreamReader(conn.getInputStream()));\n\n            String inputLine;\n\n            while ((inputLine = br.readLine()) != null) {\n                System.out.println(inputLine);\n            }\n\n            br.close();\n\n            System.out.println(\"Done\");\n\n        } catch (SecurityException e) {\n            Scanner s = new Scanner(System.in);\n            while(s.hasNext()){\n                int a = s.nextInt();\n                int b = s.nextInt();\n                System.out.println(a+b);\n            }\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2554_19__1_106022_35", "golden_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n    private String name;\n\n    private boolean optional;\n    private int type; //0 -> + , 1 -> | , 2 -> ^\n    private int typeCnt; // the minimum number of sub feature for type = 0\n    private ArrayList<Main> childes;\n    public static void main(String[] args) {\n        String command;\n        Scanner scanner = new Scanner(System.in);\n        while (true){\n            command = scanner.nextLine();\n            if (command.equals(\"###\"))\n                break;\n            command = command.replaceAll(\"\\\\s+\",\"\");// cleaning the white spaces\n            String[] coffeeMachine = command.split(\"=\");\n            Main root = new Main(coffeeMachine[0]); // root of the tree\n\n            ArrayList<String[]> commands = new ArrayList<>(); // a list of all represents commands\n            commands.add(coffeeMachine);\n            while (true){//gathering all the commands in cmds\n                command = scanner.nextLine();\n                command = command.replaceAll(\"\\\\s+\",\"\");\n                if (command.equals(\"#\"))\n                    break;\n\n                String[] temp2 = command.split(\"=\");//separating the feature from its sub features\n\n                commands.add(temp2);\n            }\n            add(commands, root);//creating the graph\n\n            while (true){// validation\n                command = scanner.nextLine();\n                if (command.equals(\"##\")){\n                    System.out.println(\"+++\");\n                    break;\n                }\n                check(command, root);\n            }\n        }\n    }\n\n    private static void check(String configuration, Main root) {// validation of c\n        configuration = configuration.replaceAll(\"\\\\s+\",\"\");\n        configuration = configuration.substring(1, configuration.length() -1);//removing { } from the beginning and the end of the command\n        String[] namesArr = configuration.split(\",\");\n\n        ArrayList<String> names = new ArrayList<>(Arrays.asList(namesArr));// turning the array into arraylist\n\n        if (root.validation(names) && names.size() == 1 && names.get(0).equals(root.getName()))// check the validation of the given configuration and also check whether the only remaining feature is the root of the graph or not\n            System.out.println(\"Valid\");\n        else\n            System.out.println(\"Invalid\");\n    }\n\n    private static void add(ArrayList<String[]> representations, Main root) {// forming the tree from represents commands\n        int i = 0;\n        Main r;\n        while (representations.size() > 0){\n            r = root.search(representations.get(i)[0]);// check if the laft side of the represent command exists in the graph\n            if (r != null){\n                if (representations.get(i)[1].contains(\"+\")){// check the type of the command\n                    r.addEdge(representations.get(i)[1].split(\"\\\\+\"), 0);// seperating the sub features with \",\", and adding them to the graph\n                }\n                else if (representations.get(i)[1].contains(\"|\")){\n                    r.addEdge(representations.get(i)[1].split(\"\\\\|\"), 1);\n                }\n                else if (representations.get(i)[1].contains(\"^\")){\n                    r.addEdge(representations.get(i)[1].split(\"\\\\^\"), 2);\n                }\n                representations.remove(i);\n                i -= 1;\n            }\n            i += 1;\n            if (i >= representations.size())// check whether the commands are over or not\n                i = 0;\n        }\n    }\n\n\n    public Main(String name) {\n        if (name.charAt(0) == '?') {\n            this.optional = true;\n            name = name.substring(1);//removing the ? from the name\n        }\n        this.name = name;\n        childes = new ArrayList<>();\n    }\n\n    public boolean validation(ArrayList<String> names) {\n        //DFS implementation of validation\n        if (childes.size() == 0)// if this node does not have any child return true\n            return true;\n\n        boolean[] visit = new boolean[childes.size()]; // which one of the children are visited\n\n        int nVisited = 0; // the number of visited children\n        for (int i = 0; i < childes.size(); i++) {\n            for (int j = 0; j < names.size(); j++) {\n                if (childes.get(i).getName().equals(names.get(j))){ // searching for every child\n                    names.remove(j);\n                    visit[i] = true;\n                    if(!childes.get(i).isOptional()) // does not count optional children\n                        nVisited += 1;\n                    break;\n                }\n            }\n        }\n\n        if (this.type == 0 && nVisited == typeCnt || this.type == 1 && nVisited > 0 || this.type == 2 && nVisited == 1){ // type = 0 -> it must visit all the mandatory children, type = 0 -> it must visit at least one chldren, type = 2 -> it must visit exactly one child\n            for (int i = 0; i < childes.size(); i++) {\n                if (visit[i] && !childes.get(i).validation(names))// if this child is visited, validate its sub features.\n                    return false;\n            }\n            return true;//if every child is valid then return true = valid\n        }\n        return false;\n    }\n\n    public Main search(String name){\n        // find the node with given name and return it recursively\n        if (this.name.equals(name)) {\n            return this;\n        }\n        for (Main child: this.childes) {\n            Main m = child.search(name);\n            if (m != null)\n                return m;\n        }\n        return null;\n    }\n\n    public void addEdge(String[] children, int type) {\n        // add given children and set the type\n        typeCnt = 0;\n        this.type = type;\n        for (String s : children) {\n            Main temp = new Main(s);\n            this.childes.add(temp);\n            if (s.charAt(0) != '?')// it only count mandatory children\n                typeCnt += 1;\n        }\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public boolean isOptional() {\n        return optional;\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n\n    public static void main(String[] args) {\n    Scanner cin=new Scanner(System.in);\n    long n=cin.nextLong();\n    while(n>0){\n        int i=0;\n       long a=cin.nextLong(); \n        while(a>10){\n        a+=5;\n        a/=10;\n        i++;\n        }\n        long b=a*(long)Math.pow(10, i);\n        System.out.printf(\"%d\\n\", b);\n    n--;\n    }\n    }\n    }", "score": 0.0}
{"id": "SHARE_1_2499_44__1_1652_17", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int[] mid = {30, 70, 500};\n        int[] forw = {26, 60, 200};\n        int[] def = {36, 80, 300};\n        int age, weight, strenght;\n        age = s.nextInt();\n        weight = s.nextInt();\n        strenght = s.nextInt();\n        while (age != 0 && weight != 0 && strenght != 0) {\n            String res = \"\";\n            if (age <= mid[0] && weight >= mid[1] && strenght >= mid[2]) {\n                res += \" Mid-field\";\n            }\n            if (age <= forw[0] && weight >= forw[1] && strenght >= forw[2]) {\n                res += \" Forward\";\n            }\n            if (age <= def[0] && weight >= def[1] && strenght >= def[2]) {\n                res += \" Defense\";\n            }\n            if(res.equals(\"\"))\n                    res = \"No positions\";\n            res = res.trim();\n            System.out.println(res);\n            age = s.nextInt();\n            weight = s.nextInt();\n            strenght = s.nextInt();\n        }\n    }\n}\n", "generated_code": "import java.util.*;\npublic class Main \n{\n\tpublic static void main(String args[])\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile(true)\n\t\t{\n\t\t\tint n = scan.nextInt() , m = scan.nextInt();\n\t\t\tif(n == -1 && m == -1)\n\t\t\t\tbreak ;\n\t\t\tboolean board[][] = new boolean[25][25];\n\t\t\tboard[n][m] = true;\n\t\t\tint num = 1 ; \n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tint a = scan.nextInt() , b = scan.nextInt();\n\t\t\t\tif(a == 0 && b == 0)\n\t\t\t\t\tbreak;\n\t\t\t\tnum++;\n\t\t\t\tboard[a][b] = true;\n\t\t\t}\n\t\t\tint res = 0 ;\n\t\t\twhile(num != 0)\n\t\t\t{\n\t\t\t\tres++;\n\t\t\t\tint index = 0 ;\n\t\t\t\tfor(int i = 0 ; i < 25 ; i++)\n\t\t\t\t\tfor(int j = index ; j < 25 ; j++)\n\t\t\t\t\t\tif(board[i][j])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tindex = j ;\n\t\t\t\t\t\t\tboard[i][j] = false;\n\t\t\t\t\t\t\tnum--;\n\t\t\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(res);\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1003_0__1_106019_5", "golden_code": "\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int k1, k2, k3;\n        k1 = s.nextInt();\n        k2 = s.nextInt();\n        k3 = s.nextInt();\n        while (k1 != 0 && k2 != 0 && k3 != 0) {\n            ArrayList<Char> first = new ArrayList();\n            ArrayList<Char> second = new ArrayList();\n            ArrayList<Char> third = new ArrayList();\n            String str = s.next();\n            for (int i = 0; i < str.length(); i++) {\n                char c = str.charAt(i);\n                Char cls = new Char(c, i);\n                if (c >= 'a' && c <= 'i') {\n                    first.add(cls);\n                } else if (c >= 'j' && c <= 'r') {\n                    second.add(cls);\n                } else {\n                    third.add(cls);\n                }\n            }\n            Char[] newfirst = rotate(first, k1);\n            Char[] newsecond = rotate(second, k2);\n            Char[] newthird = rotate(third, k3);\n            char[] res = new char[str.length()];\n            printChar(newfirst, res);\n            printChar(newsecond, res);\n            printChar(newthird, res);\n            System.out.println(String.valueOf(res));\n            k1 = s.nextInt();\n            k2 = s.nextInt();\n            k3 = s.nextInt();\n        }\n    }\n\n    static void printChar(Char[] arr, char[] res) {\n        for (int i = 0; i < arr.length; i++) {\n            res[arr[i].pos] =  arr[i].ch;\n        }\n    }\n\n    static Char[] rotate(ArrayList<Char> list, int k) {\n        Char[] newlist = new Char[list.size()];\n        for (int i = 0; i < newlist.length; i++) {\n            newlist[i] = new Char();\n        }\n        for (int i = 0; i < list.size(); i++) {\n            newlist[(i + k) % list.size()].ch = list.get(i).ch;\n            newlist[i].pos = list.get(i).pos;\n        }\n        return newlist;\n    }\n}\n\nclass Char {\n\n    char ch;\n    int pos;\n\n    public Char(char ch, int pos) {\n        this.ch = ch;\n        this.pos = pos;\n    }\n\n    public Char() {\n        this('0', 0);\n    }\n}", "generated_code": "import java.util.*;\nclass Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile(scan.hasNext())\n\t\t{\n\t\t\tint s=1,i,j,k;\n\t\t\tString str = scan.nextLine();\n\t\t\tint len = str.length();\n\t\t\tfor(i=1;i<len;i++)\n\t\t\t{\n\t\t\t\tfor(j=i,k=i;((j>=0)&&(k<len));j--,k++)\n\t\t\t\t{\n\t\t\t\t\tif(str.charAt(k)==str.charAt(j))\n\t\t\t\t\t\ts++;\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tfor(j=i-1,k=i;((j>=0)&&(k<len));j--,k++)\n\t\t\t\t{\n\t\t\t\t\tif(str.charAt(k)==str.charAt(j))\n\t\t\t\t\t\ts++;\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\tSystem.out.println(s);\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2736_0__1_1750_5", "golden_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.lang.Math;\nimport java.util.StringTokenizer;\npublic class Main {\n\n\t/**\n\t * @param args\n\t * @throws IOException \n\t */\n\tpublic static void main(String[] args) throws IOException {\n\t\t// TODO Auto-generated method stub\n\t\tReader.init( System.in );\n\t\tint testCase=Reader.nextInt();\n\t\tfor(int i=0;i<testCase;i++){\n\t\t\tint n=Reader.nextInt();\n\t\t\tint m=Reader.nextInt();\n\t\t\tint p=Reader.nextInt();\n\t\t\t\n\t\t\tlong result=0;\n\t\t\tfor(int j=1;j<=n;j++){\n\t\t\t\tfor(int k=1;k<=m;k++){\n\t\t\t\t result+=Main.egcd(j, k);\t\n\t\t\t\t}\n\t\t\t}\n\t\tSystem.out.println(p*result);\n\t\t}\n\t}\n\t\n\tpublic static int f(int i,int j,int k){\n\t\t\n\t\treturn egcd(i, j);\n\t}\n\tpublic static int egcd(int a, int b) {\n\t    if (a == 0)\n\t        return b;\n\n\t    while (b != 0) {\n\t        if (a > b)\n\t            a = a - b;\n\t        else\n\t            b = b - a;\n\t    }\n\n\t    return a;\n\t}\n\n}\n\n/** Class for buffered reading int and double values */\nclass Reader {\n    static BufferedReader reader;\n    static StringTokenizer tokenizer;\n\n    /** call this method to initialize reader for InputStream */\n    static void init(InputStream input) {\n        reader = new BufferedReader(\n                     new InputStreamReader(input) );\n        tokenizer = new StringTokenizer(\"\");\n    }\n\n    /** get next word */\n    static String next() throws IOException {\n        while ( ! tokenizer.hasMoreTokens() ) {\n            //TODO add check for eof if necessary\n            tokenizer = new StringTokenizer(\n                   reader.readLine() );\n        }\n        return tokenizer.nextToken();\n    }\n\n    static int nextInt() throws IOException {\n        return Integer.parseInt( next() );\n    }\n\t\n    static double nextDouble() throws IOException {\n        return Double.parseDouble( next() );\n    }\n}", "generated_code": "import java.util.Scanner;\n\n/**\n * Created by Mina on 1/19/14.\n */\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int n=input.nextInt();\n        while(n!=0){\n            int count =0;\n            input.nextLine();\n            int []a=new int[n];\n            for(int i=0;i<n;i++){\n                a[i]=input.nextInt();\n                input.nextLine();\n            }\n            boolean f=true;\n            while(f){\n                count++;\n                f=false;\n            for(int i=0;i<n;i++){\n                if(i!=n-1){\n                if(a[i]!=a[i+1]){\n                    f=true;\n                    break;\n                }\n                }else if(a[n-1]!=a[0]){\n                    f=true;\n                    break;\n\n                }\n            }\n            if(f){\n                int[]b=new int[n];\n                for(int i=0;i<n;i++){\n                  if(a[i]%2 ==1){\n                      a[i]++;\n                  }\n                    b[i]=a[i]/2;\n                }\n                for(int i=0;i<n;i++){\n                    if(i==0){\n                        a[0]=b[0]+b[n-1];\n                    }else{\n                        a[i]=b[i]+b[i-1];\n                    }\n                }\n            }\n                for(int i=0;i<n;i++){\n                    if(a[i]%2==1){\n                        a[i]++;\n                    }\n                }\n                f=false;\n                for(int i=0;i<n;i++){\n                    if(i!=n-1){\n                        if(a[i]!=a[i+1]){\n                            f=true;\n                            break;\n                        }\n                    }else if(a[n-1]!=a[0]){\n                        f=true;\n                        break;\n\n                    }\n                }\n\n\n\n\n        }\n            System.out.printf(\"%d %d\\n\",count,a[0]);\n            n=input.nextInt();\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_106022_12__5_1001_28", "golden_code": "import java.util.Scanner;\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tint n = s.nextInt();\n\t\twhile(n>0){\n\t\t\tint a = s.nextInt();\n\t\t\tint b = 10;\n\t\t\tint i=1;\n\t\t\twhile(a>=b){\n\t\t\t\tb*=10;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tb=10;\n\t\t\tfor(int j=0 ; j<i-1; j++){\n\t\t\t\tint m = a%b;\n\t\t\t\tif(m >= b/2){\n\t\t\t\t\ta = a + b - m;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\ta=a-m;\n\t\t\t\tb*=10;\n\t\t\t}\n\t\t\tSystem.out.println(a);\n\t\t\tn--;\n\t\t}\n\t}\n}", "generated_code": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\n/**\n *\n * @author parisa\n */\nimport java.util.*;\npublic class Main {\n    \n    static int charToInt(char a){\n        int i=0;\n        if(a == 'a') i=1;\n        else if(a == 'b') i=2;\n        else if(a == 'c') i=3;\n        else if(a == 'd') i=4;\n        else if(a == 'e') i=5;\n        else if(a == 'f') i=6;\n        else if(a == 'g') i=7;\n        else if(a == 'h') i=8;\n        else if(a == 'i') i=9;\n        else if(a == 'j') i=10;\n        else if(a == 'k') i=11;\n        else if(a == 'l') i=12;\n        else if(a == 'm') i=13;\n        else if(a == 'n') i=14;\n        else if(a == 'o') i=15;\n        else if(a == 'p') i=16;\n        else if(a == 'q') i=17;\n        else if(a == 'r') i=18;\n        else if(a == 's') i=19;\n        else if(a == 't') i=20;\n        else if(a == 'u') i=21;\n        else if(a == 'v') i=22;\n        else if(a == 'w') i=23;\n        else if(a == 'x') i=24;\n        else if(a == 'y') i=25;\n        else if(a == 'z') i=26;   \n        \n        return i;\n    }\n    \n    static char intToChar (int i){\n        char a=0;\n        if(i == 1) a='a';\n        else if(i == 2) a='b';\n        else if(i == 3) a='c';\n        else if(i == 4) a='d';\n        else if(i == 5) a='e';\n        else if(i == 6) a='f';\n        else if(i == 7) a='g';\n        else if(i == 8) a='h';\n        else if(i == 9) a='i';\n        else if(i == 10) a='j';\n        else if(i == 11) a='k';\n        else if(i == 12) a='l';\n        else if(i == 13) a='m';\n        else if(i == 14) a='n';\n        else if(i == 15) a='o';\n        else if(i == 16) a='p';\n        else if(i == 17) a='q';\n        else if(i == 18) a='r';\n        else if(i == 19) a='s';\n        else if(i == 20) a='t';\n        else if(i == 21) a='u';\n        else if(i == 22) a='v';\n        else if(i == 23) a='w';\n        else if(i == 24) a='x';\n        else if(i == 25) a='y';\n        else if(i == 26) a='z';\n        \n        return a;\n    }    \n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String code = in.nextLine();\n        while(!code.matches(\"#\")){\n            ArrayList <Integer> nums = new ArrayList <Integer>();\n            ArrayList <Character> chars = new ArrayList <Character>();            \n            for(int i=0 ; i<code.length() ; i++){\n                char a = code.charAt(i);\n                nums.add(charToInt(a));\n            }\n            boolean changed = false;\n            //taghirat roo nums\n            for(int i=(nums.size())-1 ; i>=0 ; i--){\n                for(int j=(nums.size())-1 ; j>=i ; j--){\n                    if(nums.get(j) > nums.get(i)){\n                        Collections.swap(nums, i, j);          \n                        List<Integer> sortedNums = new ArrayList<Integer> ();\n                        sortedNums = nums.subList(i+1, nums.size());\n                        Collections.sort(sortedNums);\n                        int h=0;\n                        for(int k=i+1 ; k<nums.size() ; k++){\n                            nums.set(k, sortedNums.get(h));\n                            h++;\n                        }\n                        \n                        changed = true;\n                    }\n                    if(changed) break;\n                }\n                if(changed) break;\n            }\n            \n            \n            String result=\"\";\n            for(int i=0 ; i<nums.size() ; i++){\n                chars.add(intToChar(nums.get(i)));\n                result += chars.get(i).toString();\n            }\n        \n            \n            //The End\n            if(!result.matches(code)){//a new code produced!!\n                System.out.println(result);\n            }\n            else{\n                System.out.println(\"No Successor\");\n            }\n            \n            \n            code = in.nextLine();//next testcase\n        }\n        \n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_106020_7__1_106020_8", "golden_code": "import java.util.Scanner ;\nclass Main{\n\tpublic static void main(String[]args){\n\t\tint N,w,n,t ;\n\t\tScanner Scan = new Scanner (System.in) ;\n\t\t\n\t\tN=Scan.nextInt();\n\t\t\n\t\tfor(int i=1;i<=N;i++){\n\t\t\tn=Scan.nextInt();\n\t\t\tw=0 ;\n\t\t\tfor(int k=1;k<=n;k++){\n\t\t\t\tt=(k+1)*(k+2)/2 ;\n\t\t\t\tw=w+k*t ;\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(i+\" \"+n+\" \"+w) ;\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\nclass Main\n{\npublic static void main(String[]args)\n{\n\tScanner scan = new Scanner(System.in);\n\tint n ;\n\tn=scan.nextInt();\n\tfor(int i=1; i<=n; i++)\n\t{\n\t\tint m, sum=0;\n\t\tm=scan.nextInt();\n\t\tfor(int j=1; j<=m; j++)\n\t\t\tsum=sum+j*((j+1)*(j+2)/2);\n\t\tSystem.out.println(i+\" \"+m+\" \"+sum);\n\t}\n}\n}\n\t\t", "score": 1.0}
{"id": "SHARE_1_1903_9__6_1011_16", "golden_code": "import java.util.Scanner;public class Main{public static void main(String[] args){Scanner in=new Scanner(System.in);while(true){int n=in.nextInt();if (n==-1){System.exit(0);}int[] arr1=new int[2*n];int[] arr2=new int[2*n];for(int i=0;i<2*n;i++){arr1[i]=in.nextInt();}for(int i=0;i<2*n;i++){if(i%2!=0&&i!=0&&i!=1){arr2[i]=arr1[i]-arr1[i-2];}else{arr2[i]=arr1[i];}}int sum=0;for(int i=0;i<2*n;i+=2){sum+=arr2[i]*arr2[i+1];}System.out.println(sum+\" miles\");}}}", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.PriorityQueue;\n\npublic class Main{\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tint prisoners = 0, rooms = 0, ways = 0;\n\t\tGraph alcatraz = new Graph();\n\t\t\n\t\tScanner read = new Scanner(System.in);\n\t\t\n\t\tprisoners = read.nextInt();\n\t\trooms = read.nextInt();\n\t\tways = read.nextInt();\n\t\t\n\t\tfor(int i = 1; i <= rooms ; i++){\n\t\t\tNode tempn = new Node(i);\n\t\t\talcatraz.add_node(i, tempn);\n\t\t}\n\t\t\n\t\tshort temp;\n\t\tfor (int i = 1; i <= prisoners; i++) {\n\t\t\ttemp = read.nextShort();\n\t\t\talcatraz.addPrisoner(temp);\n\t\t}\n\t\t\n\t\tshort n1, n2, weight;\n\t\tfor (int i = 1; i <= ways; i++) {\n\t\t\t\n\t\t\tn1 = read.nextShort();\n\t\t\tn2 = read.nextShort();\n\t\t\tweight = read.nextShort();\n\t\t\t\n\t\t\tEdge tempe = new Edge(weight, n1, n2);\n\t\t\talcatraz.add_edge(i, tempe);\n\t\t\t\n\t\t}\n\t\t\n\t\tread.close();\n\t\t\n\t\tsetEmp();\n\t\tminSps = sssp(1, alcatraz); \n\t\tkuID = 1;\n\t\t\n\t\tfor (int i = 2; i <= rooms; i++) {\n\t\t\tsetEmp();\n\t\t\tint spi = sssp(i, alcatraz);\n\t\t\t\n\t\t\tif(minSps > spi){\n\t\t\t\tminSps = spi;\n\t\t\t\tkuID = i;\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(minSps);\n\t\t\n\t}\n\t\n\tstatic Map<Integer, String> s;\n\tstatic int minSps;\n\tstatic int kuID;\n\t\n\tpublic static void setEmp(){\n\t\ts = new HashMap<Integer, String>();\n\t}\n\t\n\tpublic static int sssp(int vid, Graph g){\n\t\t\n\t\tint outp = 0;\n\t\tg.inIt();\n\t\tg.nodes.get(vid).setDegree(0);\n\t\tg.nodes.get(vid).setStatus('b');\n\t\tg.build_first_heap(vid);\n//\t\tSystem.out.println(g.heapi);\n\t\t\n\t\twhile( s.size() < g.nodes.size() ){\n\t\t\t\n\t\t\tint minID = g.minNode();\n\t\t\twhile(s.containsKey(minID))\n\t\t\t\tminID = g.minNode();\n//\t\t\tif(minID == 0)\n//\t\t\t\treturn outp;\n//\t\t\twhile (g.nodes.get(minID).isBurnt()) {\n//\t\t\t\tminID = g.minNode();\n//\t\t\t}\n//\t\t\tif(minID == 0)\n//\t\t\t\treturn outp;\n\t\t\tg.nodes.get(minID).setStatus('b');\n//\t\t\tSystem.out.println(minID);\n\t\t\toutp += g.nodes.get(minID).degree * g.nodes.get(minID).prisoners;\n\t\t\ts.put(minID, Integer.toString(minID));\n\t\t\t\n\t\t\tg.relaxNeighbours(g.nodes.get(minID));\n\t\t\t\n//\t\t\tSystem.out.println(g.heapi);\n\t\t\t\n\t\t}\n\t\t\n//\t\tSystem.out.println(outp);\n//\t\tSystem.out.println(\"-----------------------------------------------\");\n\t\treturn outp;\n\t}\n\t\n}\n\n\nclass Node {\n\t\n\tint degree;\n\tint id;\n\tint prisoners;\n\tchar status;\n\tArrayList<Integer> myEdge;\n\t\n\tpublic Node(int i){\n\t\tid = i;\n\t\tdegree = 500000;\n\t\tprisoners = 0;\n\t\tstatus = 'n';\n\t\tmyEdge = new ArrayList<Integer>();\n\t}\n\t\n\tpublic void setDegree(int degree) {\n\t\tthis.degree = degree;\n\t}\n\t\n\tpublic void addPrisoner(){\n\t\tprisoners++;\n\t}\n\t\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\t\n\tpublic void setStatus(char status) {\n\t\tthis.status = status;\n\t}\n\t\n\tpublic void addEdge(int egid){\n\t\tif(egid != 0 && !myEdge.contains(egid))\n\t\t\tmyEdge.add(egid);\n\t}\n\t\n\tpublic boolean isBurnt(){\n\t\treturn status == 'b';\n\t}\n\t\n\tpublic String toString(){\n\t\treturn (id + \" \" + degree + \" \" + status);\n\t}\n}\n\nclass Edge {\n\t\n\tint weight;\n\t\n\tint v1ID, v2ID;\n\t\n\tpublic Edge(int w, int f, int s){\n\t\tweight = w;\n\t\tv1ID = f;\n\t\tv2ID = s;\n\t}\n\t\n\tpublic int other_side(int n){\n\t\t\n\t\tif(n == v1ID)\n\t\t\treturn v2ID;\n\t\tif(n == v2ID)\n\t\t\treturn v1ID;\n\t\t\n\t\treturn 0;\n\t\t\n\t}\n}\n\n\nclass HeapObject{\n\tint id;\n\tint distance;\n\t\n\tpublic HeapObject(int i, int d){\n\t\tid = i;\n\t\tdistance = d;\n\t}\n\t\n\tpublic int getDistance() {\n\t\treturn distance;\n\t}\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\t\n\tpublic String toString(){\n\t\treturn id + \" \" + distance;\n\t}\n}\n\nclass Graph {\n\t\n\tMap<Integer, Node> nodes;\n\tMap<Integer, Edge> edges;\n\tPriorityQueue<HeapObject> heapi;\n\t\n\tpublic Graph(){\n\n\t\tnodes = new HashMap<Integer, Node>();\n\t\tedges = new HashMap<Integer, Edge>();\n\t\t\n\t}\n\t\n\tpublic void add_edge(int id, Edge e1){\n\t\t\n\t\tif(!edges.containsKey(id))\n\t\t\tedges.put(id, e1);\n\t\t\n\t\tnodes.get(e1.v1ID).addEdge(id);\n\t\tnodes.get(e1.v2ID).addEdge(id);\n\t}\n\t\n\tpublic void add_node(int key, Node temn){\n\t\tif(!nodes.containsKey(key))\n\t\t\tnodes.put(key, temn);\n\t}\n\t\n\tpublic void print_nodes(int maxKey){\n\t\t\n\t\tNode temp;\n\t\tfor (int i = 1; i <= nodes.size(); i++) {\n\t\t\t\t\n\t\t\ttemp = nodes.get(i);\n\t\t\tSystem.out.println(temp.id + \"   \" + temp.degree + \"   \" + temp.prisoners);\n\t\t\tSystem.out.println(temp.myEdge);\n\t\t\tSystem.out.println();\n\t\t}\n\n\t}\n\t\n\tpublic void addPrisoner(int roomId){\n\t\tnodes.get(roomId).addPrisoner();\n\t}\n\t\n\tpublic void inIt(){\n\t\tfor (int i = 1; i <= nodes.size(); i++){\n\t\t\tnodes.get(i).setDegree(500000);\n\t\t\tnodes.get(i).setStatus('n');\n\t\t}\n\t}\n\t\n\tpublic int minNode(){\n\t\t\n\t\tHeapObject n = null;\n\t\tn = heapi.poll();\n\t\t\n//\t\twhile( nodes.get(n.getId()).isBurnt() && !(heapi.isEmpty()) )\n//\t\t\tn = heapi.poll();\n\t\t\n\t\tif(n == null)\n\t\t\treturn 0;\n\t\telse\n\t\t\treturn n.id;\n\t}\n\t\n\tpublic void build_first_heap(int vid){\n\t\t\n\t\theapi = new PriorityQueue<HeapObject>(nodes.size(), new Comparator<HeapObject>() {\n\t\t    public int compare(HeapObject n1, HeapObject n2) {\n\t\t        if(n1.distance >= n2.distance)\n\t\t        \treturn 1;\n\t\t        else\n\t\t        \treturn -1;\n\t\t    }\n\t\t});\n\t\t\n\t\tfor (int i = 1; i <= nodes.size(); i++) {\n\t\t\tHeapObject o1 = new HeapObject(i, nodes.get(i).degree);\n\t\t\theapi.add(o1);\n\t\t}\n\t}\n\t\n\tpublic void relaxNeighbours(Node burnt){\n\t\t\n\t\tfor (int j = 0; j < burnt.myEdge.size(); j++) {\n\t\t\t\n\t\t\tint kuEdge = burnt.myEdge.get(j);\n\t\t\tint weight = edges.get(kuEdge).weight;\n\t\t\tint toRelax = edges.get(kuEdge).other_side(burnt.id);\n\t\t\t\n\t\t\tif(burnt.degree + weight < nodes.get(toRelax).degree && !nodes.get(toRelax).isBurnt() ){\n\t\t\t\t\n\t\t\t\tnodes.get(toRelax).setDegree(burnt.degree + weight);\n\t\t\t\t\n\t\t\t\tHeapObject o = new HeapObject(toRelax, burnt.degree + weight);\n\t\t\t\theapi.add(o);\n\t\t\t}\n\t\t}\n\t}\n\t\n}", "score": 0.0}
{"id": "SHARE_1_2733_7__1_2733_15", "golden_code": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\n\n/**\n *\n * @author RezaM\n */\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(System.out);\n\n        int tc = Integer.parseInt(br.readLine());\n\n        for (int i = 0; i < tc; i++) {\n\n            int n = Integer.parseInt(br.readLine());\n            StringTokenizer stt = new StringTokenizer(br.readLine());\n\n            String result = \"\";\n            int lp = 0;\n\n            int[] rary = new int[n];\n\n            for (int j = 0; j < n; j++) {\n\n                int flp = Integer.parseInt(stt.nextToken());\n\n                int remind = flp - lp;\n\n                for (int k = 0; k < remind; k++) {\n                    result += \"(\";\n                }\n\n                result += \")\";\n                rary[j] = result.length() - 1;\n                lp = flp;\n            }\n\n            int resary[]=new int[n];\n\n            for (int j = 0; j < n; j++) {\n\n                int rp = rary[j];\n                int count = 1;\n                for (int k = rp - 1; k >= 0; k--) {\n                    if (result.charAt(k) == '(') {\n                        count--;\n                    } else {\n                        count++;\n                    }\n                    if (count == 0) {\n                        int number=0;\n                        for (int l = k+1; l <= rp; l++) {\n                            if(result.charAt(l)==')')\n                                number++;\n                        }\n                        resary[j]=number;\n                        break;\n                    }\n                }\n\n            }\n            \n            out.print(resary[0]);\n            for (int j = 1; j < n; j++) {\n                out.print(\" \"+resary[j]);\n            }\n            \n            out.println();\n            \n        }\n        out.close();\n    }\n\n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\npublic static void main(String[] args) {\n\tScanner scan=new Scanner(System.in);\n\tint numtestC=scan.nextInt();\n\tint n;\n\tfor(int i=0;i<numtestC;i++)\n\t{\n\t\tn = scan.nextInt();\n\t\tint[] p = new int[n+1];\n\t\tint[] sub = new int [n];\n\t\tint[] w = new int [n];\n\t\tp[0] = 0 ;\n\t\t\n\t\tfor(int j = 1 ; j <= n ; j++)\n\t\t{\n\t\t\tp[j] = scan.nextInt();\n\t\t\tsub[j-1] = p[j] - p[j-1];\n\t\t\t\n\t\t}\n\t\n\t\tfor (int j = 0 ; j < n ; j++)\n\t\t{\n\t\t\tfor ( int k = j ; k >= 0 ; k--)\n\t\t\t{\n\t\t\t\tif ( sub[k] != 0)\n\t\t\t\t{\n\t\t\t\t\tsub[k] = sub [k] - 1;\n\t\t\t\t\tw[j] = j - k +1 ;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor ( int h = 0 ; h < n ; h ++)\n\t\t{\n\t\t\tSystem.out.print( w[h] + \" \");\n\t\t}\n\t\tSystem.out.println();\n\t}\n}\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_192__1_1001_289", "golden_code": "import java.math.BigInteger;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while(input.hasNextBigInteger()){\n        BigInteger a = new BigInteger(input.next());\n        BigInteger b = new BigInteger(input.next());\n        BigInteger c = new BigInteger(\"0\");\n        c = b.add(a);\n        System.out.println(c);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc =new Scanner(System.in);\n        while(sc.hasNext())\n            System.out.println(sc.nextInt() +sc.nextInt());\n    }\n\n}", "score": 1.0}
{"id": "SHARE_1_1001_457__1_1001_260", "golden_code": "\nimport java.util.Scanner;\n\n/**\n *\n * @author ali\n */\npublic class Main {\n    \n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        \n        int a , b;\n        while(s.hasNext()){\n        a = s.nextInt();\n        b = s.nextInt();\n        \n        System.out.println((a+b) + \"\");\n        }\n        \n    }\n    \n    \n    \n}\n", "generated_code": "//package sharecodeapb;\n\nimport java.util.*;\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\t Scanner consol = new Scanner(System.in);\n\t        while(consol.hasNext())\n\t        {\n\t            int a,b;\n\t            a=consol.nextInt();\n\t            b=consol.nextInt();\n\t            System.out.println(a+b);\n\t        }\n\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_6_1009_24__1_2857_34", "golden_code": "import java.util.*;\n\npublic class Main {\n\tpublic static int sizeOfHome;\n\tpublic static void DFS(int[][] home,int x, int y) {\n\t\t//System.err.println(sizeOfHome);\n\t\tint E = 0, W = 0, S = 0, N = 0;\n\t\tif (home[y][x] >= 8) {\n\t\t\tS = 1;\n\t\t\thome[y][x] -= 8;\n\t\t}\n\t\tif (home[y][x] >= 4) {\n\t\t\tE = 1;\n\t\t\thome[y][x] -= 4;\n\t\t}\n\t\tif (home[y][x] >= 2) {\n\t\t\tN = 1;\n\t\t\thome[y][x] -= 2;\n\t\t}\n\t\tif (home[y][x] >= 1) {\n\t\t\tW = 1;\n\t\t\thome[y][x] -= 1;\n\t\t}\n\t\thome[y][x] = -1;\n\t\tif (S == 0 && home[y + 1][x] >= 0) {\n\t\t\tsizeOfHome++;\n\t\t\tDFS(home, x, y + 1);\n\t\t}\n\t\tif (E == 0 && home[y][x + 1] >= 0) {\n\t\t\tsizeOfHome++;\n\t\t\tDFS(home, x + 1, y);\n\t\t}\n\t\tif (N == 0 && home[y - 1][x] >= 0) {\n\t\t\tsizeOfHome++;\n\t\t\tDFS(home, x, y - 1);\n\t\t}\n\t\tif (W == 0 && home[y][x - 1] >= 0) {\n\t\t\tsizeOfHome++;\n\t\t\tDFS(home, x - 1, y);\n\t\t}\n\t\thome[y][x] = -2;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile (in.hasNext()) {\n\t\t\tint N = in.nextInt();\n\t\t\tint M = in.nextInt();\n\t\t\tint[][] home = new int[52][52];\n\t\t\tfor (int i = 0; i < 52; i++) {\n\t\t\t\tfor (int j = 0; j < 52; j++) {\n\t\t\t\t\thome[i][j] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 1; i <= M; i++) {\n\t\t\t\tfor (int j = 1; j <= N; j++) {\n\t\t\t\t\tint currentCell = in.nextInt();\n\t\t\t\t\thome[i][j] = currentCell;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint[][] fakeHome = new int[52][52];\n\t\t\tfor (int i = 0; i < 52; i++) {\n\t\t\t\tfor (int j = 0; j < 52; j++) {\n\t\t\t\t\tfakeHome[i][j] = home[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tint numOfRooms = 0, max = 0;\n\t\t\tfor (int i = 1; i <= M; i++) {\n\t\t\t\tfor (int j = 1; j <= N; j++) {\n\t\t\t\t\tif (fakeHome[i][j] >= 0) {\n\t\t\t\t\t\tsizeOfHome = 1;\n\t\t\t\t\t\tDFS(fakeHome, j, i);\n\t\t\t\t\t\tif (sizeOfHome > max) {\n\t\t\t\t\t\t\tmax = sizeOfHome;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnumOfRooms++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tint max2 = 0, start = 0, end = 0;\n\t\t\tchar a = 'N';\n\t\t\tfor (int i = 1; i <= N; i++) {\n\t\t\t\tfor (int j = M; j >= 1; j--) {\n\t\t\t\t\tfor (int m = 0; m < 52; m++) {\n\t\t\t\t\t\tfor (int n = 0; n < 52; n++) {\n\t\t\t\t\t\t\tfakeHome[m][n] = home[m][n];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tint current = fakeHome[j][i];\n\t\t\t\t\tint ifE = 0, ifN = 0;\n\t\t\t\t\tif (current >= 8) {\n\t\t\t\t\t\tcurrent -= 8;\n\t\t\t\t\t}\n\t\t\t\t\tif (current >= 4) {\n\t\t\t\t\t\tcurrent -= 4;\n\t\t\t\t\t\tifE = 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (current >= 2) {\n\t\t\t\t\t\tcurrent -= 2;\n\t\t\t\t\t\tifN = 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (ifN == 1) {\n\t\t\t\t\t\tfakeHome[j][i] -= 2;\n\t\t\t\t\t\tsizeOfHome = 1;\n\t\t\t\t\t\tDFS(fakeHome, i, j);\n\t\t\t\t\t\tif (sizeOfHome > max2) {\n\t\t\t\t\t\t\tmax2 = sizeOfHome;\n\t\t\t\t\t\t\ta = 'N';\n\t\t\t\t\t\t\tstart = i;\n\t\t\t\t\t\t\tend = j;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (int m = 0; m < 52; m++) {\n\t\t\t\t\t\t\tfor (int n = 0; n < 52; n++) {\n\t\t\t\t\t\t\t\tfakeHome[m][n] = home[m][n];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (ifE == 1) {\n\t\t\t\t\t\tfakeHome[j][i] -= 4;\n\t\t\t\t\t\tsizeOfHome = 1;\n\t\t\t\t\t\tDFS(fakeHome, i, j);\n\t\t\t\t\t\tif (sizeOfHome > max2) {\n\t\t\t\t\t\t\tmax2 = sizeOfHome;\n\t\t\t\t\t\t\ta = 'E';\n\t\t\t\t\t\t\tstart = i;\n\t\t\t\t\t\t\tend = j;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfakeHome[j][i] += 4;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(numOfRooms);\n\t\t\tSystem.out.println(max);\n\t\t\tSystem.out.println(max2);\n\t\t\tSystem.out.println(end + \" \" + start + \" \" + a);\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.*;\n\npublic class Main {\n\n\n  public static void main(String[] args) {\n\n    Scanner insut=new Scanner(System.in);\n\n\n    int t=insut.nextInt();\n    int n;\n    int[] s;\n    boolean A=true;\n    while(t-->0) {\n      n=insut.nextInt();\n      s=new int[n];\n      s[0]=insut.nextInt();\n      for(int i=1;i<n;i++) {\n        s[i]=insut.nextInt();\n        if(A && s[i]!=s[0])\n          A=false;\n      }\n\n\n      if(A)\n        System.out.println(s[0]);\n      else {\n        Arrays.sort(s);\n\n        while(!A) {\n          int a=s[n-1]-s[0];\n          s[0]=s[n-1]=a;\n                    \n          A=true;\n          Arrays.sort(s);\n\n          if(s[n-1]!=s[0])\n            A=false;\n        }\n\n        System.out.println(s[0]);\n\n      }\n\n\n    }\n\n  }\n}", "score": 0.0}
{"id": "SHARE_1_2736_12__1_2736_14", "golden_code": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nimport java.util.Scanner;\n\n/**\n *\n * @author seyyed Heydar\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        int num;\n        \n        Scanner input=new Scanner(System.in);\n        num=input.nextInt();\n        for(int i=0;i<num;i++){\n            int a,b,c;\n            a=input.nextInt();\n            b=input.nextInt();\n            c=input.nextInt();\n            long result=0;\n            for(int j=1;j<=a;j++){\n                for(int k=1;k<=b;k++){\n                        result+=gcd(j,j+k);\n                }\n            }\n            System.out.println(result*c);\n        }\n        \n    }\n    public static int gcd(int a,int b){\n            if((b%a)==0){\n                return a;\n            }\n            else{\n                return gcd(b%a,a);\n            }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tstatic long gcd(long a, long b) {\n\t\tlong c;\n\t\twhile (a != 0) {\n\t\t\tc = a;\n\t\t\ta = b % a;\n\t\t\tb = c;\n\t\t}\n\t\treturn b;\n\t}\n\n\t//\n\t// long long lcm(long long x, long long y) {\n\t// return (x * y) / gcd(x, y);\n\t// }\n\n\tstatic long f(long i, long j, long k) {\n\t\tlong first = i;\n\t\tlong second = i + j;\n\t\tlong gcd_v = gcd(first, second);\n\t\tfor (long k2 = i + 2 * j; k2 < i + j * k; k2 += j) {\n\t\t\t// long z = lcm(k2, gcd_v);\n\t\t\t// if (z == 1)\n\t\t\t// gcd_v *= k2;\n\t\t\t// else\n\t\t\tgcd_v = gcd(k2, gcd_v);\n\t\t}\n\t\treturn gcd_v;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tlong t;\n\t\tScanner scan = new Scanner(System.in);\n\t\tt = scan.nextLong();\n\t\tfor (int x = 0; x < t; x++) {\n\t\t\tlong n, m, p;\n\n\t\t\tn = scan.nextLong();\n\t\t\tm = scan.nextLong();\n\t\t\tp = scan.nextLong();\n\t\t\tlong sum = 0;\n\t\t\tfor (long i = 1; i <= n; i++) {\n\t\t\t\tfor (long j = 1; j <= m; j++) {\n\t\t\t\t\tlong tmp = f(i, j, 1);\n\t\t\t\t\tsum += tmp;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSystem.out.println(sum * p);\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1323_4__1_106022_35", "golden_code": "import java.util.Scanner;\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tint num = s.nextInt();\n\t\tdouble x = s.nextDouble();\n\t\tdouble y = s.nextDouble();\n\t\tdouble z = s.nextDouble();\n\t\tint j=1;\n\t\twhile(s.hasNext()){\n\t\t\tint k=1;\n\t\t\tfor(int i=0 ; i<num ; i++){\n\t\t\t\tdouble a = s.nextDouble();\n\t\t\t\tdouble c = s.nextDouble();\n\t\t\t\tdouble b =0;\n\t\t\t\tdouble z1 = Math.abs(Math.acos((Math.pow(x, 2) - Math.pow(y, 2) - Math.pow(z, 2))/(2*y*z)));\n\t\t\t\tdouble z2 = Math.abs(Math.acos((Math.pow(a, 2) - Math.pow(z, 2) - Math.pow(c, 2))/(2*c*z)));\n\t\t\t\tz1 += z2;\n\t\t\t\tb = Math.sqrt(Math.pow(c, 2) + Math.pow(y, 2) - 2*c*y*Math.cos(z1));\n\t\t\t\tif(k==1)\n\t\t\t\t\tSystem.out.println(\"Round \" + j);\n\t\t\t\tSystem.out.print(k + \".   \");\n\t\t\t\tif(c == 0)\n\t\t\t\t\tSystem.out.printf(\"%.2f\\n\" , y);\n\t\t\t\tif(a == 0)\n\t\t\t\t\tSystem.out.printf(\"%.2f\\n\" , x);\n\t\t\t\telse\n\t\t\t\t\tSystem.out.printf(\"%.2f\\n\" , b);\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tnum = s.nextInt();\n\t\t\tx = s.nextDouble();\n\t\t\ty = s.nextDouble();\n\t\t\tz = s.nextDouble();\n\t\t\tif(num != 0)\n\t\t\t\tSystem.out.println();\n\t\t\telse\n\t\t\t\treturn;\n\t\t\tj++;\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n\n    public static void main(String[] args) {\n    Scanner cin=new Scanner(System.in);\n    long n=cin.nextLong();\n    while(n>0){\n        int i=0;\n       long a=cin.nextLong(); \n        while(a>10){\n        a+=5;\n        a/=10;\n        i++;\n        }\n        long b=a*(long)Math.pow(10, i);\n        System.out.printf(\"%d\\n\", b);\n    n--;\n    }\n    }\n    }", "score": 0.0}
{"id": "SHARE_1_1001_413__1_1001_422", "golden_code": "\nimport java.util.Scanner  ;\nimport java.io.File  ; \nimport java.io.*  ; \npublic class Main { \n\tpublic static void main(String[]args){\n\t\tScanner input = new Scanner(System.in)  ;\n\t\twhile(input.hasNextLine())\n\t\t{\n\t\t\tString[] s  = input.nextLine().split(\" \")  ; \n\t\t\tint A=Integer.parseInt(s[0]) ; \n\t\t\tint B =Integer.parseInt(s[1]); \n\t\t\tint sum = A+B ; \n\t\t\tSystem.out.println(sum)  ; \n\t\t\t\n\t\t}\n\t}\n\t\n\t}\n\t", "generated_code": "import java.util.Scanner;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner input = new Scanner(System.in);\n\t\twhile(input.hasNextInt())\n\t\t{\n\t\t\tint a = input.nextInt();\n\t\t\tint b = input.nextInt();\n\t\t\tint c = (a+b) ;     \n\t\t\tSystem.out.println(c);\n\t\t}\n    }\n}", "score": 1.0}
{"id": "SHARE_1_106017_7__1_2822_70", "golden_code": "import java.util.Scanner;\n\nclass Main{\npublic static int pow(int a,int b)\n{\nint d = 1;\nwhile( b > 0)\n        {d *= a;\n         b--;}\nreturn d;\n\n\n}\n\npublic static void main(String[] args)\n{\nScanner scan = new Scanner(System.in);\nint n;\nint[] r = new int[3];\nwhile(scan.hasNext())\n        {n = scan.nextInt();\n        int p = n;\n         int i = 0;\n         r[0] = n % 10;n /= 10; \n         r[1] = n % 10; n /= 10;\n         r[2] = n % 10; n /= 10;      \n        int s = 0;\n        i = 0 ; \n        int b; \n            \n                if(s < p)\n                s = pow(r[0],2) + pow(r[1],2) + pow(r[2],2);\n                if(s < p)\n                s = pow(r[0],3) + pow(r[1],3) + pow(r[2],3);\n                if(s < p)\n                s = pow(r[0],4) + pow(r[1],4) + pow(r[2],4);\n                        \n        //System.out.println(\"s= \"+s);\n        //System.out.println(\"p=\"+p+\"s= \"+s+\"  i = \"+i);               \n\n        if(s == p)\n               System.out.println(\"Yes\");\n        else \n               System.out.println(\"No\");\n        \n        }\n  \n}\n}", "generated_code": "import java.io.BufferedWriter;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\tPrintWriter out=new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\n\t    int t=sc.nextInt();\n\t    for(int i=0;i<t;i++){\n\t    \tint n=sc.nextInt();\n\t    \tlong s1=0;\n\t    \tlong s2=0;\n\t    \tlong s3=0;\n\t    \ts1=(n*(n+1))/2;\n\t    \ts2=n*n;\n\t    \ts3=n*(n+1);\n\t    \tout.println(s1+\" \"+s2+\" \"+s3);\n\t    \t\t\t\n\t    }\n\t    \t\n\t    out.close();\t\n\t    \t\n\t    \t\n\t    \n\t\n\t\n\t\n\t}\n\t\n\t\n\n}\n", "score": 0.0}
{"id": "SHARE_1_2738_1__1_2837_14", "golden_code": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint t = in.nextInt();\n\t\twhile (t-- > 0) {\n\t\t\tint n = in.nextInt();\n\t\t\tint k = in.nextInt();\n\t\t\tArrayList<Node> al = new ArrayList<Node>();\n\t\t\tDisjointSet ds = new DisjointSet(n);\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tint x = in.nextInt();\n\t\t\t\tint y = in.nextInt();\n\t\t\t\tNode nn = new Node(x, y);\n\t\t\t\tal.add(nn);\n\t\t\t}\n\t\t\tCollections.sort(al);\n\t\t\tint x1 = al.get(0).x;\n\t\t\tint y1 = al.get(0).y;\n\t\t\tint ans=1;\n\t\t\tfor (int i = 1; i < al.size(); i++) {\n\t\t\t\t\tint x2 = al.get(i).x;\n\t\t\t\t\tint y2 = al.get(i).y;\n\t\t\t\t\tint min = Math.min(y1, y2);\n\t\t\t\t\tif (min - x2 <= k) {\n\t\t\t\t\t\tans++;\n\t\t\t\t\t}\n\t\t\t\t\ty1=Math.max(y1, y2);\n\t\t\t\t\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t}\n}\n\nclass Node implements Comparable<Node> {\n\tint x;\n\tint y;\n\n\tpublic Node(int x, int y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\t@Override\n\tpublic int compareTo(Node n) {\n\t\treturn this.x - n.x;\n\t}\n\n}\n\nclass DisjointSet {\n\n\tint[] parent;\n\tint size;\n\tint[] gsize;\n\tint[] w;\n\n\tpublic DisjointSet(int n) {\n\t\tparent = new int[n];\n\t\tgsize = new int[n];\n\t\tw = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tparent[i] = i;\n\t\t\tsize = n;\n\t\t\tgsize[i] = 1;\n\t\t}\n\t}\n\n\tpublic int find(int i) {\n\t\twhile (i != parent[i])\n\t\t\ti = parent[i];\n\t\treturn i;\n\t}\n\n\tpublic void union(int i, int j) {\n\t\tint p = find(i);\n\t\tint q = find(j);\n\t\tif (p != q) {\n\t\t\tif (w[p] > w[q]) {\n\t\t\t\tparent[q] = p;\n\t\t\t\tgsize[p] += gsize[q];\n\t\t\t\tgsize[q] = 0;\n\t\t\t} else if (w[q] > w[p]) {\n\t\t\t\tparent[p] = q;\n\t\t\t\tgsize[q] += gsize[p];\n\n\t\t\t} else {\n\t\t\t\tparent[q] = p;\n\t\t\t\tgsize[p] += gsize[q];\n\t\t\t\tgsize[q] = 0;\n\t\t\t\tw[p]++;\n\t\t\t}\n\t\t\tsize--;\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.util.*;\nclass Main {\n    static Scanner input = new Scanner(System.in);\n\n    public static void main(String[] args) {\n\n        String query ;\n        int big=0;\n        int sml=0;\n        int temp;\n        while (input.hasNext()){\n            query=input.next();\n            if (query.equals(\"END\")) break;\n            if (query.equals(\"GetFinal\")) {\n                System.out.println(sml);\n            }\n            else {\n                temp=Integer.parseInt(query);\n                if (temp>=big)\n                {\n                    sml=big;\n                    big=temp;\n                    continue;\n                }\n                if (temp<big && temp>=sml){\n                    sml=temp;\n                }\n            }\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_5_1010_4__1_2811_11", "golden_code": "import java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.util.Scanner;\nimport java.util.ArrayList;\nclass Liquid{\n    double weight;\n    double cost;\n    double costDivideByWeight;\n    Liquid(double w,double c) {\n        weight = w;\n        cost = c;\n        costDivideByWeight = c / w;\n    }\n}\npublic class Main {\n    ArrayList<Liquid> knapsack = new ArrayList<Liquid>();\n    void readInput(){\n        int t;\n        int n;\n        double k;\n        double a;\n        double p;\n        Scanner input = new Scanner(System.in);\n        t = input.nextInt();\n        for(int i = 0;i < t;i++){\n            n = input.nextInt();\n            k = input.nextDouble();\n            for(int j = 0;j < n;j++){\n                a = input.nextDouble();\n                p = input.nextDouble();\n                knapsack.add(new Liquid(a,p));\n            }\n            sort();\n            KnapsackGreedy(k);\n            knapsack.clear();\n        }\n    }\n    void sort(){\n        for(int i = 1;i < knapsack.size();i++){\n            double key = knapsack.get(i).costDivideByWeight;\n            int index = i;\n            Liquid mount = new Liquid(knapsack.get(index).weight,knapsack.get(index).cost);\n            int j = i - 1;\n            while(j > -1 && knapsack.get(j).costDivideByWeight > key){\n                knapsack.set(j + 1,knapsack.get(j));\n                j--;\n            }\n            knapsack.set(j + 1,mount);\n        }\n    }\n    void KnapsackGreedy(double u){\n        double value = 0;\n        double weight = u;\n        for(int i = knapsack.size() - 1;i > -1;i--){\n             if(knapsack.get(i).weight <= weight){\n                weight = weight - knapsack.get(i).weight ;\n                value += knapsack.get(i).cost;\n            }\n            else{\n                double r = weight / knapsack.get(i).weight;\n                value += r * knapsack.get(i).cost;\n                break;\n            }\n        }\n        setPrecision(value);\n    }\n    void setPrecision(double d){\n        BigDecimal bd = new BigDecimal(d).setScale(2, RoundingMode.HALF_EVEN);\n        d = bd.doubleValue();\n        DecimalFormat df = new DecimalFormat(\"#0.00\");\n        System.out.println(df.format(d));\n    }\n    public static void main(String[] Args){\n        Main m = new Main();\n        m.readInput();\n    }\n}", "generated_code": "\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner sc = new Scanner(System.in);\n        int tc = sc.nextInt();\n        while (tc > 0) {\n            tc--;\n            int n = sc.nextInt(), m = sc.nextInt();\n            int[] array1 = new int[n];\n            int[] array2 = new int[m];\n            int[] res = new int[n];\n            String r = \"\";\n            int a = 0;\n            for (int i = 0; i < n; i++) {\n                array1[i] = sc.nextInt();\n            }\n            for (int i = 0; i < m; i++) {\n                array2[i] = sc.nextInt();\n            }\n            Arrays.sort(array1);\n            Arrays.sort(array2);\n\n            for (int i = 0; i < m; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (array1[j] == array2[i]) {\n                        res[a] = array1[j];\n                        a++;\n                    }\n                }\n            }\n            if(a == 0)\n            {\n                for (int i = 0; i < n; i++) {\n                    r+=\",\"+array1[i];\n                }\n            if(r.length()>1)\n            System.out.print(r.substring(1, r.length()));\n            else if(r.length()!=0)\n                System.out.println(r.charAt(1));\n            System.out.println(\"\");\n        continue;\n            }\n            for (int i = 0; i < a; i++) {\n                for (int j = 0; j < n; j++) {\n                    if (array1[j] != res[i]) {\n                        r += \",\" + array1[j];\n                    }\n                    else\n                        i++;\n                }\n            }\n            if(r.length()>1)\n            System.out.print(r.substring(1, r.length()));\n            else if(r.length()!=0)\n                System.out.println(r.charAt(1));\n            System.out.println(\"\");\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_5_1004_37__1_2212_21", "golden_code": "import java.util.*;\n\npublic class Main {\n\t\n  public static void main(String[] args) {\n\t  \n         Scanner cin = new Scanner(System.in);\n         int testNum=cin.nextInt();\n         String str =cin.nextLine();\n         for(int j=0;j<testNum;j++){\n        \tstr =cin.nextLine(); \n        \t String[] result = str.split(\"(?<=[+*])|(?=[+*])\");\n        \t Stack<Long> vals1 = new Stack<Long>();\n        \t Stack<Long> vals2 = new Stack<Long>();\n\n          for(int i = 0; i < result.length; i++) {\n              \t\n        \t  String s=result[i];\n                 if (s.equals(\"*\")) {\n                 }\n                 else if (s.equals(\"+\")) {\n                \t i++;\n                \t vals1.push(vals1.pop() + Long.parseLong(result[i]));\n                 }\n                 else {\n                \t vals1.push(Long.parseLong(s));\n                 }\n          \t}\n          \tgetMax(vals1);\n          \t\n            for(int i = 0; i < result.length; i++) {\n                \t\n          \t  String s=result[i];\n                   if (s.equals(\"+\")) {\n                   }\n                   else if (s.equals(\"*\")) {\n                  \t i++;\n                  \t vals2.push(vals2.pop() * Long.parseLong(result[i]));\n                   }\n                   else {\n                  \t vals2.push(Long.parseLong(s));\n                   }\n            \t}\n            \tgetMin(vals2);\n            \t\n          \tSystem.out.println(\"The maximum and minimum are \"+ vals1.pop()+\" and \"+ vals2.pop()+\".\");\n         \t}\n   }\n///********\n  \n  public static void getMax(Stack<Long> vals1) {\n\n\twhile(vals1.size()!=1){\n\t\tvals1.push(vals1.pop() * vals1.pop());\n\t}\n  }\n///******** \n  \n  public static void getMin(Stack<Long> vals2) {\n\n\t\twhile(vals2.size()!=1){\n\t\t\tvals2.push(vals2.pop() + vals2.pop());\n\t\t}\n\t  }\n\n}\n", "generated_code": "//package codeforces;\n\nimport java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class Main\n{\n    public static void main( String[] args )\n    {\n        Scanner cin = new Scanner ( System.in );\n        DecimalFormat df = new DecimalFormat(\"#.###\");\n        df.setMinimumFractionDigits( 3 );\n        df.setMaximumFractionDigits( 3 );\n        int tc = cin.nextInt();\n        for ( int q = 0 ; q < tc ; q++ )\n        {\n            int n = cin.nextInt();\n            int[] array = new int[n];\n            long sum = 0;\n            for( int i = 0 ; i < n ; i++ )\n            {\n                array[i] = cin.nextInt();\n                sum += array[i];\n            }\n            double avg = sum / n;\n            int num = 0;\n            for ( int i = 0 ; i < n ; i++ )\n            {\n                if ( array[i] > avg )\n                {\n                    num++;\n                }\n            }\n            double output = (double) num / n;\n            output *= 100;\n            System.out.println( df.format( output ) + \"%\" );\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_485__1_1001_433", "golden_code": "import java.util.Scanner;   \n  \npublic class Main  \n{  \n    public static void main(String args[])  \n    {  \n        Scanner in = new Scanner(System.in);  \n        int a , b;\n        while(in.hasNext())  \n        {  \n            a = in.nextInt();  \n            b = in.nextInt();  \n            System.out.println(a+b);  \n        }  \n        \n        in.close();  \n    }  \n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner scanner = new Scanner(System.in);\n\n        while (scanner.hasNext()) {\n            int a = scanner.nextInt();\n            int b = scanner.nextInt();\n            System.out.println(a + b);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_47__1_1001_8", "golden_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in= new Scanner (System.in);\n\t\twhile(in.hasNext())\n\t\t\tSystem.out.println(in.nextInt()+in.nextInt());\n\t}\n}\n", "generated_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\t//Scanner in = new Scanner(System.in);\n\tPrintStream out = System.out;\n\tInputStreamReader isr = new InputStreamReader(System.in);\n\tBufferedReader bf = new BufferedReader(isr);\n\t\n\tvoid solve() throws IOException {\n\t\twhile (true) {\n\t\t\tString linea = bf.readLine();\n\t\t\tif (linea == null) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tString[] partes = linea.split(\" \");\n\t\t\tint a = Integer.parseInt(partes[0]);\n\t\t\tint b = Integer.parseInt(partes[1]);\n\t\t\tout.println(a + b);\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) throws IOException {\n\t\tnew Main().solve();\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1009_68__1_1009_74", "golden_code": "import java.util.*;\nimport java.text.DecimalFormat;\n\npublic class Main {\n    public static void main(String args[]) throws Exception{\n        Scanner cin=new Scanner(System.in);\n        int count = 0;\n        double sum = 0;\n        double average = 0;\n        DecimalFormat df = new DecimalFormat(\"#.##\");\n        while(cin.hasNext()){\n            count++;\n            double a = cin.nextDouble();\n            sum = sum + a;\n            if(count==12)\n            {\n                average = sum/12;\n                System.out.println(\"$\" + df.format(average)+ '\\n');\n                count=0;\n                sum=0;\n            }\n        }\n    }\n}", "generated_code": "\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while(in.hasNext()){\n        float sum = 0;\n        float ave = 0;\n        for (int i = 0; i < 12; i++) {\n            sum += in.nextFloat();\n        }\n        ave = sum / 12;\n        ave=Math.round(ave*100);\n    System.out.println(\"$\" + (ave/100));\n    }}\n}\n", "score": 1.0}
{"id": "SHARE_1_2551_28__1_2551_10", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n   public static void main(String[] args) {\n      Scanner in = new Scanner(System.in);\n      int t = in.nextInt();\n      while (t-- > 0) {\n         String a = in.next();\n         String b = in.next();\n         short a1 = 0;\n         short b1 = 0;\n         for (int i = 0; i <= a.length() - 1; i++) {\n            a1 += match(a.substring(i, i + 1));\n         }\n         for (int i = 0; i <= b.length() - 1; i++) {\n            b1 += match(b.substring(i, i + 1));\n         }\n         if (a1 == b1) {\n            System.out.println(\"YES\");\n         } else {\n            System.out.println(\"NO\");\n         }\n      }\n\n   }\n\n   public static byte match(String s) {\n      if (s.matches(\"(A|D|G|J|M|P|T|W)\")) {\n         return 1;\n      } else if (s.matches(\"(B|E|H|K|N|Q|U|X)\")) {\n         return 2;\n      } else if (s.matches(\"(C|F|I|L|O|R|V|Y)\")) {\n         return 3;\n      } else {\n         return 4;\n      }\n   }\n}", "generated_code": "import java.util.*;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scan = new Scanner(System.in);\n        \n        int ca = scan.nextInt();\n        \n        while(ca-- > 0)\n        {\n            String a = scan.next();\n            String b = scan.next();\n            \n            ArrayList<Integer> nA = new ArrayList<Integer>();\n            ArrayList<Integer> nB = new ArrayList<Integer>();\n            \n            for(int i = 0;i < a.length();i++)\n            {\n                ArrayList<Integer> tmp = get(a.charAt(i));\n                for(int j : tmp) nA.add(j);\n            }\n            \n            for(int i = 0;i < b.length();i++)\n            {\n                ArrayList<Integer> tmp = get(b.charAt(i));\n                for(int j : tmp) nB.add(j);\n            }\n            \n            boolean ok = nA.size() == nB.size();\n            \n            for(int i = 0;i < nA.size() && ok;i++)\n                ok = nA.get(i).equals(nB.get(i));\n            \n            System.out.println(ok ? \"YES\" : \"NO\");\n        }\n    }\n    \n    private static ArrayList<Integer> get(char c)\n    {\n        ArrayList<Integer> res = new ArrayList<Integer>();\n        \n        if(c < 'P')\n        {\n            for(int i = 0;i <= (c-'A')%3;i++)\n                res.add((c-'A')/3);\n        }\n        else if(c < 'W')\n        {\n            int k = c-'P';\n            \n            for(int i = 0;i <= k%4;i++)\n                res.add(k/4+10);\n        }\n        else\n        {\n            for(int i = 0;i <= (c-'W')%4;i++)\n                res.add(20);\n        }\n        \n        return res;\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1230_74__1_1230_81", "golden_code": "\nimport java.math.BigInteger;\nimport java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        BigInteger i = new BigInteger(in.next());\n        long sum = 0;\n//        DecimalFormat df=new DecimalFormat(\"0\");\n        while (!i.equals(new BigInteger(\"0\"))) {\n\n            while (i.compareTo(new BigInteger(\"0\"))==1) {\n                sum += Integer.valueOf(i.mod(new BigInteger(\"10\")).toString());\n                i=i.divide(new BigInteger(\"10\"));\n                if (i.compareTo(new BigInteger(\"0\"))==0 && sum >= 10) {\n                    i = new BigInteger(sum+\"\");\n                    sum = 0;\n                }\n            }\n\n            System.out.println(\"\" +  sum);\n            i = new BigInteger(in.next());\n            sum = 0;\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n                String n = s.nextLine();\n\t\twhile(!n.equals(\"0\")){\n\t\t\t int sum=0;\n                         for(char c:n.toCharArray())\n                             sum += (int)(c) - 48;\n                         if(sum > 9){\n                             n = Integer.toString(sum);\n                             continue;\n                         }\n                         System.out.println(sum);\n                         n = s.nextLine();\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_169__1_1001_336", "golden_code": "import java.util.Scanner;class Main {public static void main(String[] args) {Scanner s = new Scanner(System.in);int a=0;while(s.hasNext()){a=s.nextInt()+s.nextInt();System.out.println(a);}}}\n", "generated_code": "import java.util.*;\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t    int a=0;\n\t    while(input.hasNext())\n\t    {\n\t    a=0;\n\t\ta = input.nextInt();\n\t\ta += input.nextInt();\n\t\tSystem.out.println(a);\n\t    }\n\t    System.exit(10);\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_2578_25__1_2578_21", "golden_code": "import java.util.Scanner;\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner scan=new Scanner(System.in);\n\t\tint n=scan.nextInt();\n\t\tString[] a=new String[n];\n\t\tint[] c=new int[n];\n\t\tscan.nextLine();\n\t\tint gc;\n\t\tint bc;\n\t\tfor(int q=0;q<n;q++){\n\t\t\tbc=0;\n\t\t\tgc=0;\n\t\t\ta[q]=scan.nextLine();\n\t\t\tSystem.out.print(a[q]+\" is \");\n\t\t\tc[q]=a[q].length();\n\t\t\tfor(int w=0;w<c[q];w++){\n\t\t\t\tif(a[q].charAt(w)=='b'||a[q].charAt(w)=='B')\n\t\t\t\t\tbc++;\n\t\t\t\tif(a[q].charAt(w)=='g'||a[q].charAt(w)=='G')\n\t\t\t\t\tgc++;\n\t\t\t}\n\t\t\tif(gc==bc)\n\t\t\t\tSystem.out.println(\"NEUTRAL\");\n\t\t\tif(gc>bc)\n\t\t\t\tSystem.out.println(\"GOOD\");\n\t\t\tif(gc<bc)\n\t\t\t\tSystem.out.println(\"A BADDY\");\n\t\t}\n\t\t\n\t}\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint n = scan.nextInt();\n\t\tString s = scan.nextLine();\n\t\t//sdsdsafjsafasfsaf\n\t\t//fsafsfsfsfsafsfsfas\n\t\tint a=0,b=0,c=0;\n\t\ta=a+b-c+b-c+b-c+b+b+b-c;\n\t\t\n\t\tfor(int i = 0 ; i < n ;i++){\n\t\t\ts = scan.nextLine();\n\t\t\tString low =s.toLowerCase();\n\t\t\tint bcount=0;\n\t\t\tint gcount=0;\n\t\t\tfor(int j = 0 ; j <low.length() ; j++){\n\t\t\t\tif(low.charAt(j)=='b')\n\t\t\t\t\tbcount++;\n\t\t\t\tif(low.charAt(j)=='g')\n\t\t\t\t\tgcount++;\n\t\t\t}\n\t\t\tif(gcount>bcount)\n\t\t\t\tSystem.out.println(s+\" is GOOD\");\n\t\t\telse if(gcount<bcount)\n\t\t\t\tSystem.out.println(s+\" is A BADDY\");\n\t\t\telse if(gcount==bcount)\n\t\t\t\tSystem.out.println(s+\" is NEUTRAL\");\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_323__1_1001_4", "golden_code": "\nimport java.util.Scanner;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author AliDhb\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        \n        int a,b;\n        Scanner sc = new Scanner (System.in);\n        String str;\n        \n        while(sc.hasNext())\n        {\n            str= sc.nextLine();\n            String split[]=str.split(\" \");\n            System.out.println(Integer.valueOf(split[0])+Integer.valueOf(split[1]));\n            \n        \n            }\n        \n        }\n    \n    }\n    \n\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n\t\tpublic static void main(String[] args) {\n\t\t\tScanner inp=new Scanner (System.in);\n\t\t\twhile(inp.hasNext()){\n\t\t\tint n1=inp.nextInt(), n2=inp.nextInt();\n\t\t\tint n = n1 + n2;\n\t\t\tSystem.out.println(n);\n\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n}", "score": 1.0}
{"id": "SHARE_5_1017_2__1_2644_21", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner input = new Scanner(System.in);\n\t\tint arsize = input.nextInt();\n\t\tint[] array = new int[arsize];\n\t\t\n\t\tfor (int i=0 ; i < arsize ; i++)\n\t\t\tarray[i] = input.nextInt();\n\n\t\tint Apos = input.nextInt();\n\t\tint Bpos = input.nextInt();\n\t\t\n\t\tboolean reverse = false;\n\t\tif (Bpos < Apos)\n\t\t\t{\n\t\t\treverse = true;\n\t\t\t}\n\t\t\n\t\tApos--;\n\t\tBpos--;\n\t\t\n\t\t\n\t\tint mid = (Apos + Bpos)/2;\n\t\t\n\t\tint Apoint = 0;\n\t\tint Bpoint = 0;\n\t\t\n\t\tif (!reverse)\n\t\t{\n\t\t\tfor (int i=0 ; i <= mid ; i++)\n\t\t\t\tApoint = Apoint + array[i];\n\t\t\t\n\t\t\tfor (int i = mid+1 ; i < arsize ; i++)\n\t\t\t\tBpoint = Bpoint + array[i];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif ((Apos-Bpos)%2 == 0 || (Bpos-Apos)%2 == 0)\n\t\t\t{\n\t\t\t\tfor (int i=0 ; i < mid ; i++)\n\t\t\t\t\tApoint = Apoint + array[i];\n\t\t\t\t\n\t\t\t\tfor (int i = mid ; i < arsize ; i++)\n\t\t\t\t\tBpoint = Bpoint + array[i];\n\t\t\t}\n\t\t\telse if ((Apos-Bpos)%2 == 1 || (Bpos-Apos)%2 == 1)\n\t\t\t{\n\t\t\t\tfor (int i=0 ; i <= mid ; i++)\n\t\t\t\t\tApoint = Apoint + array[i];\n\t\t\t\t\n\t\t\t\tfor (int i = mid+1 ; i < arsize ; i++)\n\t\t\t\t\tBpoint = Bpoint + array[i];\n\t\t\t}\n\t\t}\n\t\tif (Apos == Bpos)\n\t\t{\n\t\t\tint right = 0;\n\t\t\tint left = 0;\n\t\t\tfor (int i = 0; i <= Apos; i++)\n\t\t\t\tleft = left + array[i];\n\t\t\tfor (int i = Apos ; i < arsize ; i++)\n\t\t\t\tright = right + array[i];\n\t\t\tif (right >= left)\n\t\t\t{\n\t\t\t\tApoint = right;\n\t\t\t\tBpoint = left - array[Apos];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tApoint = left;\n\t\t\t\tBpoint = right - array[Apos];\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\tif (!reverse)\n\t\t\tSystem.out.println(Apoint + \" \" + Bpoint);\n\t\telse\n\t\t\tSystem.out.println(Bpoint + \" \" + Apoint);\n\t}\n\n}\n", "generated_code": "import java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tString q=\"eplragfsoxvcwtibzdhnykmjuq\";\t\t\t\t\n\t\twhile (in.hasNext()) {\n\t\t\tchar[] s = in.nextLine().toCharArray();\n\t\t\tfor (int i = 0; i < s.length; i++) {\n\t\t\t\tchar e = Character.toLowerCase(s[i]);\n\t\t\t\tif (e - 97 > -1 && e - 97 < 26) {\n\t\t\t\t\tif (Character.isLowerCase(s[i]))\n\t\t\t\t\t\ts[i] = q.charAt(e - 97);\n\t\t\t\t\telse\n\t\t\t\t\t\ts[i] = Character.toUpperCase(q.charAt(e - 97));\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(String.valueOf(s));\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2539_4__1_1704_13", "golden_code": "/*\nID: sisi_ho1\nLANG: JAVA\nTASK: Main\n*/\n\nimport java.io.*;\nimport java.net.Inet4Address;\nimport java.util.*;\n\npublic class Main\n{\n\tpublic static void main(String[] args) throws IOException\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile(true)\n\t\t{\n\t\t\tint a = scan.nextInt();\n\t\t\tint b = scan.nextInt();\n\t\t\tif(a+b==0)\tbreak;\n\t\t\tboolean  [] arr = new boolean[300] ;\n\t\t\tint [] Int = new int[b] ;\n\t\t\tfor(int i=0 ; i<b ; i++)\n\t\t\t\tInt[i] = scan.nextInt();\n\t\t\tfor(int i=0 ; i<b ; i++)\n\t\t\t\tfor(int j=0 ; j<b ; j++)\n\t\t\t\t\tarr[Math.abs(Int[i]-Int[j])] = true;\n\n\t\t\tboolean no = false;\n\t\t\tfor(int i=0 ; i<=a ; i++)\n\t\t\t\tif(!arr[i])\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(\"N\");\n\t\t\t\t\tno = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tif(!no)\t    System.out.println(\"Y\");\n\t\t}\n\n\n\n\t}\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int n = input.nextInt();\n        int u = input.nextInt();\n        int d = input.nextInt();\n        while (n != 0 && u != 0 && d != 0){\n            int xTime = 0;\n            if ((n-u)%(u-d) == 0) xTime = 1 + 2*((n-u)/(u-d));\n            else xTime = 3 + 2*((n-u)/(u-d));\n            System.out.println(xTime);\n            n = input.nextInt();\n            u = input.nextInt();\n            d = input.nextInt();\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_106020_4__1_106020_51", "golden_code": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.*;\nimport java.awt.*;\nimport java.math.*;\n\n@SuppressWarnings(\"unchecked\")\n\npublic class Main\n{\n    public static void main(String[] arqs) throws Exception\n    {\n        Scanner scan = new Scanner(System.in);\n\n        int MAX = 10000;\n        int[] T = new int[MAX];\n\n        for(int i = 0;i < MAX;i++)\n            T[i] = i*(i+1)/2;\n\n        int loop = 1;\n        int ca = scan.nextInt();\n\n        while (ca-- > 0)\n        {\n            int n = scan.nextInt();\n            int res = 0;\n            for(int i = 1;i <= n;i++)\n                res += i*T[i+1];\n            System.out.println(loop++ + \" \" + n + \" \" + res);\n        }\n    }\n}", "generated_code": "import java.util.* ;\nimport java.lang.* ;\nclass Main\n{\n\tpublic static int T ( int n )\n\t{\n\t\tint sum=0 ; \n\t\tfor ( int i=0 ; i<=n ; i++ ) {\n\t\t\tsum += i ;\n\t\t}\n\t\treturn sum ;\n\t}\n\t\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner(System.in) ;\n\t\tint k = scan.nextInt() ;\n\t\tint N=0 ;\n\t\twhile ( k!=0 ) {\n\t\t\tN++ ;\n\t\t\tk-- ;\n\t\t\tint n = scan.nextInt() ;\n\t\t\tint sum=0 ;\n\t\t\tfor ( int i=1 ; i<=n ; i++ ) {\n\t\t\t\tsum += ( i * T(i+1) ) ;\n\t\t\t}\n\t\t\tSystem.out.println(N + \" \" + n + \" \" + sum) ;\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2353_9__1_1932_2", "golden_code": "  import java.util.*;\nclass Main\n{\n\n//----------------------------------------------------   \n   public static int bmm(int a, int b)\n   {\n      int c=0;\n \n      while (b != 0) {\n            c= a % b ;\n            a =b ;\n            b= c ;\n      }\n      return(a) ;\n   }\n//----------------------------------------------------  \n   public static void main ( String[] args )\n   {\n\n      Scanner scan = new Scanner( System.in );\n      while(scan.hasNextInt())\n     {\n       int x,y,k=0,m,result=0;\n       x = scan.nextInt();\n       y = scan.nextInt();\n       if((y%x)==0)\n       {\n          m= y/x;   \n          for(int i=1; i<=m; i++)\n            {\n             if((m%i)==0)\n               { k=m/i;\n                if(k>=i)   \n                 {if(bmm(k,i)==1)\n                    result++;}\n                else\n                  if(bmm(i,k)==1)\n                    result++;}\n            }\n       }\n       System.out.println(result);\n    }\n  }\n }\n", "generated_code": "\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n    static boolean b;\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        while (true) {\n            b = false;\n            int n = s.nextInt();\n            if (n == 0) {\n                break;\n            }\n            int[] nums = new int[n];\n            String str = s.next();\n            Node[] arr = new Node[n];\n            for (int i = 0; i < n; i++) {\n                nums[i] = s.nextInt();\n                arr[i] = new Node(nums[i], i);\n            }\n            if (str.charAt(0) == 'P') {\n                String res = \"\";\n                Arrays.sort(arr);\n                for (int i = 0; i < n; i++) {\n                    int counter = 0;\n                    for (int j = 0; j <= arr[i].place; j++) {\n                        if (nums[j] > arr[i].value) {\n                            counter++;\n                        }\n                    }\n                    res += counter + \" \";\n                }\n                System.out.println(res.trim());\n            } else {\n                ArrayList<Integer> res = new ArrayList();\n                ArrayList<Node> arrnums = new ArrayList();\n                for (int i = 0; i < n; i++) {\n                    arrnums.add(arr[i]);\n                }\n                check(arrnums, res);\n                String r = \"\";\n                for (int j = 0; j < res.size(); j++) {\n                    r += res.get(j) + \" \";\n                }\n                System.out.println(r.trim());\n            }\n        }\n    }\n\n    static void check(ArrayList<Node> nums, ArrayList<Integer> res) {\n        if (nums.isEmpty()) {\n            b = true;\n        }\n        lbl:\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i).value <= res.size()) {\n                Node n = nums.get(i);\n                int counter = 0;\n                for (int j = 0; j < res.size(); j++) {\n                    if (res.get(j) > n.place) {\n                        counter++;\n                    }\n                }\n                if (counter != n.value) {\n                    continue lbl;\n                }\n                res.add(nums.get(i).place + 1);\n                nums.remove(i);\n                check(nums, res);\n                if (b == false) {\n                    nums.add(i, n);\n                    res.remove(res.size() - 1);\n                }\n            }\n        }\n    }\n}\n\nclass Node implements Comparable<Node> {\n\n    int value;\n    int place;\n\n    @Override\n    public int compareTo(Node o) {\n        return value - o.value;\n    }\n\n    public Node(int value, int place) {\n        this.value = value;\n        this.place = place;\n    }\n}", "score": 0.0}
{"id": "SHARE_5_1009_20__5_1009_8", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner scanner = new Scanner(System.in);\t\n\t\tint T;\n\t\tT = scanner.nextInt();\n\t\twhile(T > 0){\n\t\t\tT --;\n\t\t\tint N = scanner.nextInt();\n\t\t\tArrayList<Integer> nums = new ArrayList<Integer>();\n\t\t\tfor(int i = 0; i < N; i++){\n\t\t\t\tint n = scanner.nextInt();\n\t\t\t\tnums.add(n);\n\t\t\t}\n\t\t\tint items = N - 1;\n\t\t\tint matrix [][] = new int [items][items];\n\t\t\tfor(int i = 0; i < items; i++)\n\t\t\t\tmatrix[i][i] = 0;\n\t\t\tfor(int l = 1; l < items; l++){\n\t\t\t\tfor(int i = 0; i < items - l; i++){\n\t\t\t\t\tint j = i + l;\n\t\t\t\t\tmatrix[i][j] = Integer.MAX_VALUE;\n\t\t\t\t\tfor(int k = i; k < j; k++){\n\t\t\t\t\t\tint cost = matrix[i][k] + matrix[k + 1][j]\n\t\t\t\t\t\t\t\t+ nums.get(i) * nums.get(j+1) * nums.get(k+1);\n\t\t\t\t\t\tmatrix[i][j] = java.lang.Math.min(matrix[i][j], cost);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(matrix[0][items - 1]);\n\t\t}\n\t}\n}\n", "generated_code": "import java.io.IOException;\nimport java.util.Scanner;\n\npublic class Main {\n    static int[][]table=new int[110][110];\n    public static void min_card(int size,int[]cards){\n        //int n=size-1;\n        for(int i=1 ; i<size-1 ; i++){\n            table[i][i]=0;\n        }\n        for(int l=2 ; l<=size-1 ; l++){\n            for(int i=1 ; i<=size-l ; i++){\n               int  j=i+l-1;\n                table[i][j]=Integer.MAX_VALUE;\n                for(int w=i ; w<=j-1 ; w++){\n                    int q=table[i][w]+table[w+1][j]+(cards[i-1]*cards[w]*cards[j]);\n                    if(q<table[i][j])\n                        table[i][j]=q;\n                }\n            }\n        }\n\n    }\n    public static void main(String[]args)throws IOException{\n        int testCase;\n        Scanner read=new Scanner(System.in);\n        testCase=read.nextInt();\n        while (testCase!=0 && read.hasNext()){\n            testCase--;\n            int size=read.nextInt();\n            int[] cards=new int[size];\n            for(int i=0 ; i< size ; i++){\n                cards[i]=read.nextInt();\n            }\n            min_card(size,cards);\n            System.out.println(table[1][size-1]);\n        }\n\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2121_58__1_106017_14", "golden_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in=new Scanner(System.in);\n        while (in.hasNext()){\n            int n = in.nextInt();\n            BigInteger sum, a, b;\n            if (n == 1 && n == 2) {\n                System.out.println(1);\n            } else {\n                sum = new BigInteger(\"0\");\n                a = new BigInteger(\"1\");\n                b = new BigInteger(\"1\");\n                for (int i = 2; i < n; i++) {\n                    sum = a.add(b);\n                    a = b;\n                    b = sum;\n                }\n                System.out.println(sum);\n            }\n        }\n    }\n\n}", "generated_code": "import java.util.Scanner;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scan = new Scanner(System.in);\n        int n;\n\twhile(scan.hasNextInt())\n\t{\n        n = scan.nextInt();\n        if((n==153)||(n==370)||(n==371)||(n==407))\n        {\n            System.out.println(\"Yes\");\n        }\n        else\n            System.out.println(\"No\");\n        }\n    }\n    \n}", "score": 0.0}
{"id": "SHARE_1_2360_7__1_1079_36", "golden_code": "import java.util.*;\nimport java.io.*;\n\npublic class Main {\n\tpublic static void main(String[] args) throws IOException {\n\t\tScanner scan = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\twhile (scan.hasNextInt()) {\n\t\t\tint n = scan.nextInt(), a[] = new int[8001], x, x2, c = 0, max = 0, w = 0;\n\t\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\t\ta[i] = -1;\n\t\t\t}\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tx = scan.nextInt();\n\t\t\t\tx2 = scan.nextInt();\n\t\t\t\tif (x2 > w) {\n\t\t\t\t\tw = x2;\n\t\t\t\t}\n\t\t\t\tc = scan.nextInt();\n\t\t\t\tif (c > max) {\n\t\t\t\t\tmax = c;\n\t\t\t\t}\n\t\t\t\tfor (int j = x; j < x2; j++) {\n\t\t\t\t\ta[j] = c;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint count[] = new int[max + 1], temp = -1;\n\t\t\tfor (int j = 0; j < w; j++) {\n\t\t\t\tif (a[j] != temp) {\n\t\t\t\t\tif (temp != -1) {\n\t\t\t\t\t\tcount[a[j - 1]]++;\n\t\t\t\t\t}\n\t\t\t\t\ttemp = a[j];\n\t\t\t\t}\n\t\t\t\tif (temp != -1) {\n\t\t\t\t\tif (j == w - 1) {\n\t\t\t\t\t\tcount[a[j]]++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < count.length; i++) {\n\t\t\t\tif (count[i] != 0) {\n\t\t\t\t\tSystem.out.println(i + \" \" + count[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        System.out.println(\"PERFECTION OUTPUT\");\n        while (true) {\n            int n = s.nextInt();\n            if (n == 0) {\n                break;\n            }\n            long res = isPerfect(n);\n            if (res < 0) {\n                System.out.println(writeSpace(n)+ n + \"  DEFICIENT\");\n            } else if (res == 0) {\n                System.out.println(writeSpace(n)+ n + \"  PERFECT\");\n            } else {\n                System.out.println(writeSpace(n)+ n + \"  ABUNDANT\");\n            }\n        }\n        System.out.println(\"END OF OUTPUT\");\n    }\n\n    static long isPerfect(int n) {\n        long sum = 0;\n        for (int i = 1; i < n; i++) {\n            if (n % i == 0) {\n                sum += i;\n            }\n        }\n        return sum - n;\n    }\n    \n    static String writeSpace(int n){\n        String res=\"\";\n        for (int i = 0; i < 5-(n+\"\").length(); i++) {\n            res+=\" \";\n        }\n        return res;\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2154_2__1_101158_19", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\t\n\t    static Scanner in = new Scanner(System.in);\n\t        static String b = \"1BFPV\";\n\t            static String c = \"2CGJKQSXZ\";\n\t                static String d = \"3DT\";\n\t                    static String l = \"4L\";\n\t                        static String m = \"5MN\";\n\t                            static String r = \"6R\";\n\t                            \n\t                                public static void main(String[] args) {\n\t                                \t        while (in.hasNextLine()) {\n\t                                \t        \t            String q = in.nextLine();\n\t                                \t        \t                        String p = \"\";\n\t                                \t        \t                                    for (int i = 0; i < q.length(); i++) {\n\t                                \t        \t                                    \t                if (b.contains(q.charAt(i) + \"\")) {\n\t                                \t        \t                                    \t                \t                    p+=b.charAt(0);\n\t                                \t        \t                                    \t                } else if (c.contains(q.charAt(i) + \"\")) {\n\t                                \t        \t                                    \t                \t                    p+=c.charAt(0);\n\t                                \t        \t                                    \t                } else if (d.contains(q.charAt(i) + \"\")) {\n\t                                \t        \t                                    \t                \t                    p+=d.charAt(0);\n\t                                \t        \t                                    \t                } else if (l.contains(q.charAt(i) + \"\")) {\n\t                                \t        \t                                    \t                \t                    p+=l.charAt(0);\n\t                                \t        \t                                    \t                } else if (m.contains(q.charAt(i) + \"\")) {\n\t                                \t        \t                                    \t                \t                    p+=m.charAt(0);\n\t                                \t        \t                                    \t                } else if (r.contains(q.charAt(i) + \"\")) {\n\t                                \t        \t                                    \t                \t                    p+=r.charAt(0);\n\t                                \t        \t                                    \t                } else {\n\t                                \t        \t                                    \t                \t                    p+=\"0\";\n\t                                \t        \t                                    \t                }\n\t                                \t        \t                                    }\n\t                                \t        \t                                                p=p+\"0\";\n\t                                \t        \t                                                            for (int i = 0; i <p.length()-1; i++) {\n\t                                \t        \t                                                            \t                if(p.charAt(i)!='0'&&p.charAt(i)!=p.charAt(i+1)){\n\t                                \t        \t                                                            \t                \t                    System.out.print(p.charAt(i));\n\t                                \t        \t                                                            \t                }\n\t                                \t        \t                                                            }\n\t                                \t        \t                                                                        System.out.println();\n\t                                \t        }\n\t                                \t        \n\t                                }\n}\n", "generated_code": "\n\nimport java.util.Scanner;\n\n\npublic class Main {\n     static Scanner in = new Scanner(System.in);\n    public static void main(String[] args) {\n\n        while(true)\n        {\n            String left,right,mid;\n             left=in.next();\n            if(left.equals(\".\"))\n                break;\n\n            mid=in.next();\n            right=in.next();\n\n            String larr[]=left.split(\",\");\n            String rg[]=right.split(\",\");\n            rg[0]=rg[0].substring(1, rg[0].length());\n            larr[0]=larr[0].substring(1, larr[0].length());\n            rg[rg.length-1]=rg[rg.length-1].substring(0, rg[rg.length-1].length()-1);\n             larr[larr.length-1]=larr[larr.length-1].substring(0, larr[larr.length-1].length()-1);\n             int k=larr.length;\n             String a=\"\";\n            if(mid.equals(\"--\"))\n            {\n            for(int i=0;i<rg.length;i++)\n            {\n              for(int j=0;j<k;j++)\n              {\n                  if(rg[i].equals(larr[j]))\n                  {\n                      System.arraycopy(larr, j+1, larr, j, larr.length-j-1);\n                      k--;\n                      j--;\n                      break;\n                  }\n              }\n            }\n            }\n            else\n            {\n            for(int i=0;i<rg.length;i++)\n            {\n                if(!larr[0].equals(\"\") && !rg[0].equals(\"\")) {\n                    a+=\",\"+rg[i];\n                }\n                else\n                    a+=rg[i];\n            }\n            }\n            if(mid.equals(\"--\"))\n            {\n            System.out.print(\"[\");\n            for(int i=0;i<k;i++)\n            {\n                if(i==k-1)\n                  System.out.print(larr[i]);\n                else\n                    System.out.print(larr[i]+\",\");\n            }\n            System.out.println(\"]\");\n            }\n            else\n            {\n                String plus=\"\";\n                System.out.print(\"[\");\n            for(int i=0;i<k;i++)\n            {\n                if(i==k-1)\n                  System.out.print(larr[i]);\n                else\n                    System.out.print(larr[i]+\",\");\n            }\n                System.out.println(a+\"]\");\n            }\n        }\n    }\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_489__1_1001_299", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\t\n\t\tScanner input=new Scanner(System.in);\n\t\twhile(input.hasNext()) {\n\t\tint a=input.nextInt();\n\t\tint b=input.nextInt();\n\t\tSystem.out.println(a+b);}\n\t}\n\n}\n", "generated_code": "import java.util.*;\n\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner s = new Scanner(System.in);\n\t\twhile(s.hasNext()){\n\t\t\tint a = s.nextInt();\n\t\t\tint b = s.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_354__1_1001_242", "golden_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main\n{\n    static String ReadLn (int maxLg)  // utility function to read from stdin\n    {\n        byte lin[] = new byte [maxLg];\n        int lg = 0, car = -1;\n        String line = \"\";\n\n        try\n        {\n            while (lg < maxLg)\n            {\n                car = System.in.read();\n                if ((car < 0) || (car == '\\n')) break;\n                lin [lg++] += car;\n            }\n        }\n        catch (IOException e)\n        {\n            return (null);\n        }\n\n        if ((car < 0) && (lg == 0)) return (null);  // eof\n        return (new String (lin, 0, lg));\n    }\n\n    public static void main (String args[])  // entry point from OS\n    {\n        Main myWork = new Main();  // create a dinamic instance\n        myWork.Begin();            // the true entry point\n    }\n\n    void Begin()\n    {\n        String input;\n        StringTokenizer idata;\n        int a, b, min, max, num, n, cycle, cyclemax;\n\n        while ((input = Main.ReadLn (255)) != null)\n        {\n          idata = new StringTokenizer (input);\n          a = Integer.parseInt (idata.nextToken());\n          b = Integer.parseInt (idata.nextToken());\n    \n          System.out.println (a + b);\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());}}", "score": 1.0}
{"id": "SHARE_1_1003_43__1_2554_20", "golden_code": "\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int k1, k2, k3;\n        k1 = s.nextInt();\n        k2 = s.nextInt();\n        k3 = s.nextInt();\n        while (k1 != 0 && k2 != 0 && k3 != 0) {\n            ArrayList<Char> first = new ArrayList();\n            ArrayList<Char> second = new ArrayList();\n            ArrayList<Char> third = new ArrayList();\n            String str = s.next();\n            for (int i = 0; i < str.length(); i++) {\n                char c = str.charAt(i);\n                Char cls = new Char(c, i);\n                if (c >= 'a' && c <= 'i') {\n                    first.add(cls);\n                } else if (c >= 'j' && c <= 'r') {\n                    second.add(cls);\n                } else {\n                    third.add(cls);\n                }\n            }\n            Char[] newfirst = rotate(first, k1);\n            Char[] newsecond = rotate(second, k2);\n            Char[] newthird = rotate(third, k3);\n            char[] res = new char[str.length()];\n            printChar(newfirst, res);\n            printChar(newsecond, res);\n            printChar(newthird, res);\n            System.out.println(String.valueOf(res));\n            k1 = s.nextInt();\n            k2 = s.nextInt();\n            k3 = s.nextInt();\n        }\n    }\n\n    static void printChar(Char[] arr, char[] res) {\n        for (int i = 0; i < arr.length; i++) {\n            res[arr[i].pos] =  arr[i].ch;\n        }\n    }\n\n    static Char[] rotate(ArrayList<Char> list, int k) {\n        Char[] newlist = new Char[list.size()];\n        for (int i = 0; i < newlist.length; i++) {\n            newlist[i] = new Char();\n        }\n        for (int i = 0; i < list.size(); i++) {\n            newlist[(i + k) % list.size()].ch = list.get(i).ch;\n            newlist[i].pos = list.get(i).pos;\n        }\n        return newlist;\n    }\n}\n\nclass Char {\n\n    char ch;\n    int pos;\n\n    public Char(char ch, int pos) {\n        this.ch = ch;\n        this.pos = pos;\n    }\n\n    public Char() {\n        this('0', 0);\n    }\n}", "generated_code": "import java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.Scanner;\n\npublic class Main {\n\n    private static LinkedList<LinkedList<String>> Testcase_list(LinkedList<String> List) {\n        LinkedList<String> Testcases = new LinkedList<>();\n        LinkedList<String[]> TWO_D = new LinkedList<>();\n        for (String i : List) {\n            i = i.replace(\"{\", \"\");\n            i = i.replace(\"}\", \"\");\n            Testcases.add(i);\n        }\n        for (String i : Testcases) {\n            String[] A;\n            A = i.split(\",\");\n            TWO_D.add(A);\n        }\n        LinkedList<LinkedList<String>> TWO_D_L = new LinkedList<>();\n        for (String[] i : TWO_D) {\n            LinkedList<String> Testcases_2 = new LinkedList<>();\n            for (String j : i) {\n                j = j.trim();\n                Testcases_2.add(j);\n            }\n            TWO_D_L.add(Testcases_2);\n        }\n        return TWO_D_L;\n    }\n\n    private static Boolean Mandatory_cheking(LinkedList<String> Childs, LinkedList<String> Testcase) {\n        for (String i : Childs) {\n            if (!(Testcase.contains(i)) && !(i.contains(\"?\"))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static Boolean OR_cheking(LinkedList<String> Childs, LinkedList<String> Testcase) {\n        for (String i : Childs) {\n            if (Testcase.contains(i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private static Boolean XOR_cheking(LinkedList<String> Childs, LinkedList<String> Testcase) {\n        int Counter = 0;\n        for (String i : Childs) {\n            if (Testcase.contains(i)) {\n                Counter += 1;\n            }\n        }\n        return Counter == 1;\n    }\n\n    private static Boolean Father_cheking(LinkedList<LinkedList<String>> Childs, LinkedList<String> Parents, LinkedList<String> Testcase, String A) {\n        for (LinkedList<String> i : Childs) {\n            int index = Childs.indexOf(i);\n            if (i.contains(A) && (!(Testcase.contains(Parents.get(index))))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static Boolean Exist_cheking(LinkedList<String> Coffee_Machine, String A) {\n        for (String i : Coffee_Machine) {\n            if (i.contains(A)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        LinkedList<String> All_Inputs = new LinkedList<>();\n        String temp = \"\";\n        Scanner input = new Scanner(System.in);\n        while (!(temp.equals(\"###\"))) {\n            String Machine_input = input.nextLine();\n            temp = Machine_input;\n            All_Inputs.add(Machine_input);\n        }\n        LinkedList<LinkedList<String>> All_Machines = new LinkedList<>();\n        int tmp_counter = 0;\n        for (int i = 0; i < All_Inputs.size(); i++) {\n            if (All_Inputs.get(i).equals(\"##\")) {\n                LinkedList<String> Machine_and_Testcases = new LinkedList<>();\n                for (int k = tmp_counter; k < i; k++) {\n                    if (!All_Inputs.get(k).equals(\"##\")) {\n                        Machine_and_Testcases.add(All_Inputs.get(k));\n                    }\n                }\n                All_Machines.add(Machine_and_Testcases);\n                tmp_counter = i;\n            }\n        }\n        for (LinkedList<String> i : All_Machines) {\n            LinkedList<String> Coffee_Machine = new LinkedList<>();\n            LinkedList<String> Testcases = new LinkedList<>();\n            int tmp_counter2;\n            for (String j : i) {\n                if (j.equals(\"#\")) {\n                    tmp_counter2 = i.indexOf(\"#\");\n                    for (int k = 0; k < tmp_counter2; k++) {\n                        Coffee_Machine.add(i.get(k));\n                    }\n                    for (int k = tmp_counter2 + 1; k < i.size(); k++) {\n                        Testcases.add(i.get(k));\n                    }\n                }\n            }\n            //\n            String Root = Coffee_Machine.get(0).split(\"=\")[0].trim();\n            //\n            LinkedList<LinkedList<String>> TC = Testcase_list(Testcases);\n            //\n            LinkedList<String> Mandatory_Parents = new LinkedList<>();\n            LinkedList<LinkedList<String>> Mandatory_Childs = new LinkedList<>();\n            LinkedList<String> OR_Parents = new LinkedList<>();\n            LinkedList<LinkedList<String>> OR_Childs = new LinkedList<>();\n            LinkedList<String> XOR_Parents = new LinkedList<>();\n            LinkedList<LinkedList<String>> XOR_Childs = new LinkedList<>();\n            for (String k : Coffee_Machine) {\n                k = k.replace(\" \", \"\");\n                String[] A, B;\n                if (k.contains(\"+\")) {\n                    A = k.split(\"=\");\n                    Mandatory_Parents.add(A[0]);\n                    B = A[1].split(\"\\\\+\");\n                    LinkedList<String> tmp = new LinkedList<>(Arrays.asList(B));\n                    Mandatory_Childs.add(tmp);\n                } else if (k.contains(\"|\")) {\n                    A = k.split(\"=\");\n                    OR_Parents.add(A[0]);\n                    B = A[1].split(\"\\\\|\");\n                    LinkedList<String> tmp = new LinkedList<>(Arrays.asList(B));\n                    OR_Childs.add(tmp);\n                } else if (k.contains(\"^\")) {\n                    A = k.split(\"=\");\n                    XOR_Parents.add(A[0]);\n                    B = A[1].split(\"\\\\^\");\n                    LinkedList<String> tmp = new LinkedList<>(Arrays.asList(B));\n                    XOR_Childs.add(tmp);\n                } else if (k.contains(\"=\") && !(k.contains(\"+\")) && !(k.contains(\"|\")) && !(k.contains(\"^\"))) {\n                    A = k.split(\"=\");\n                    Mandatory_Parents.add(A[0]);\n                    B = A[1].split(\" \", -1);\n                    LinkedList<String> tmp = new LinkedList<>(Arrays.asList(B));\n                    Mandatory_Childs.add(tmp);\n                }\n            }\n            LinkedList<String> Answers = new LinkedList<>();\n            for (LinkedList<String> t : TC) {\n                boolean B = true;\n                for (String t2 : t) {\n                    if (!(Exist_cheking(Coffee_Machine, t2))) {\n                        B = false;\n                        break;\n                    } else if (!(t.contains(Root))) {\n                        B = false;\n                        break;\n                    } else if (!(Father_cheking(Mandatory_Childs, Mandatory_Parents, t, t2))) {\n                        B = false;\n                        break;\n                    } else if (!(Father_cheking(OR_Childs, OR_Parents, t, t2))) {\n                        B = false;\n                        break;\n                    } else if (!(Father_cheking(XOR_Childs, XOR_Parents, t, t2))) {\n                        B = false;\n                        break;\n                    } else if (Mandatory_Parents.contains(t2)) {\n                        int index = Mandatory_Parents.indexOf(t2);\n                        if (!(Mandatory_cheking(Mandatory_Childs.get(index), t))) {\n                            B = false;\n                            break;\n                        }\n                    } else if (OR_Parents.contains(t2)) {\n                        int index = OR_Parents.indexOf(t2);\n                        if (!(OR_cheking(OR_Childs.get(index), t))) {\n                            B = false;\n                            break;\n                        }\n                    } else if (XOR_Parents.contains(t2)) {\n                        int index = XOR_Parents.indexOf(t2);\n                        if (!(XOR_cheking(XOR_Childs.get(index), t))) {\n                            B = false;\n                            break;\n                        }\n                    }\n                }\n                if (B) {\n                    Answers.add(\"Valid\");\n                } else {\n                    Answers.add(\"Invalid\");\n                }\n            }\n            for (String ans : Answers) {\n                System.out.println(ans);\n            }\n            System.out.println(\"+++\");\n        }\n    }\n}\n\n\n", "score": 0.0}
{"id": "SHARE_1_1565_14__1_108013_0", "golden_code": "import java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int t = s.nextInt();\n        for (int o = 0; o < t; o++) {\n            int n = s.nextInt();\n            int[] in = new int[n];\n            for (int i = 0; i < n; i++) {\n                in[i] = s.nextInt();\n            }\n            Arrays.sort(in);\n            int[] nums = new int[n];\n            for (int i = 0; i < n; i++) {\n                nums[i] = in[n - i - 1];\n            }\n            int res = Integer.MIN_VALUE;\n            for (int i = 1; i <= n; i++) {\n                int tmp = Integer.MAX_VALUE;\n                for (int j = 0; j < i; j++) {\n                    if (nums[j] * i < tmp) {\n                        tmp = nums[j] * i;\n                    }\n                }\n                res = Math.max(res, tmp);\n            }\n            System.out.println(res);\n        }\n    }\n}", "generated_code": "\nimport java.util.*;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString line=\"\";\n\t\twhile( sc.hasNext())\n\t\t{\n\t\t\tline = sc.nextLine();\n\t\t\tString s =\"\";\n\t\t\tfor(int i=0; i< line.length();i++ )\n\t\t\t{\n\t\t\t\ts += line.charAt(i);\n\t\t\t\tif( line.charAt(i) >= 'a' && line.charAt(i) <= 'z')\n\t\t\t\t{\n\t\t\t\t\tif( i+1 < line.length())\n\t\t\t\t\t\tif( line.charAt(i+1) >='0' && line.charAt(i+1) <= '9')\n\t\t\t\t\t\t\ts += '^';\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(s);\n\t\t}\n\t\tsc.close();\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_2554_24__1_2554_13", "golden_code": "//package com.company;\n\nimport java.util.*;\n\nclass Alt implements ChildType {\n    ChildrenType type = null;\n\n    @Override\n    public ChildrenType getType() {\n        return ChildrenType.ALT;\n    }\n\n    @Override\n    public void setType(ChildrenType childrenType) {\n        this.type = childrenType;\n    }\n\n    @Override\n    public boolean isType(TreeNode treeNode) {\n        for (int i = 0; i < treeNode.getChildren().size(); i++) {\n            if (treeNode.getChildren().get(i).getFeature().equals(\"^\"))\n                return true;\n        }\n        return false;\n    }\n}\n\n\nclass Check {\n    public static TreeNode search(TreeNode root, String feature) {\n        if (root.getFeature().equals(feature))\n            return root;\n        for (int i = 0; i < root.getChildren().size(); i++) {\n            if (root.getChildren().get(i) != null\n            && search(root.getChildren().get(i), feature) != null)\n                 return search(root.getChildren().get(i), feature);\n        }\n        return null;\n    }\n\n    public static boolean containParent (TreeNode root, List<String> testCase) {\n        for (int i = 0; i < testCase.size(); i++) {\n            TreeNode node = search(root, testCase.get(i));\n            if (node != null\n                    && node.getParent() != null\n                    && !testCase.contains(node.getParent().getFeature()))\n                return false;\n        }\n\n        return true;\n    }\n\n    public static boolean containChildrenMatchingTypeRule (TreeNode root, List<String> testCase) {\n        if (root.getParent() == null) {\n            if (!testCase.contains(root.getFeature()))\n                return false;\n        }\n        if (root.getChildrenType() == ChildrenType.MAN) {\n            for (int i = 0; i < root.getChildren().size(); i++) {\n                if (!root.getChildren().get(i).optional) {\n                    if (!testCase.contains(root.getChildren().get(i).getFeature())) {\n                        return false;\n                    }\n                    if (!containChildrenMatchingTypeRule(root.getChildren().get(i), testCase)) {\n                        return false;\n                    }\n                } else {\n                    if (testCase.contains(root.getChildren().get(i).getFeature())) {\n                        if (!containChildrenMatchingTypeRule(root.getChildren().get(i), testCase)) {\n                            return false;\n                        }\n                    }\n                }\n            }\n        } else if (root.getChildrenType() == ChildrenType.OR) {\n            boolean or = false;\n            for (int i = 0; i < root.getChildren().size(); i++) {\n                if (testCase.contains(root.getChildren().get(i).getFeature())) {\n                    or = true;\n                    if (!containChildrenMatchingTypeRule(root.getChildren().get(i), testCase)) {\n                        return false;\n                    }\n                }\n            } if (!or) return false;\n        } else if (root.getChildrenType() == ChildrenType.ALT) {\n            int count = 0;\n            for (int i = 0; i < root.getChildren().size(); i++) {\n                if (testCase.contains(root.getChildren().get(i).getFeature())) {\n                    count++;\n                    if (count > 1) return false;\n                    if (!containChildrenMatchingTypeRule(root.getChildren().get(i), testCase)) return false;\n                }\n            }\n            if (count == 0) return false;\n        }\n        return true;\n    }\n\n    static public boolean validFeature(TreeNode root, List<String> testCase) {\n        boolean thereIs = false;\n        for (String s : testCase) {\n            if (search(root, s) == null) {\n                return false;\n            }\n            thereIs = true;\n        }\n        return thereIs;\n    }\n}\n\nenum ChildrenType {\n    OR,\n    ALT,\n    MAN;\n}\n\ninterface ChildType {\n    public ChildrenType getType();\n\n    public void setType(ChildrenType childrenType);\n\n    public boolean isType(TreeNode treeNode);\n}\n\nclass InputTree {\n\n    public static void setOptional(List<List<TreeNode>> treeNodeStructure) {\n        for (List<TreeNode> treeNodes : treeNodeStructure) {\n            for (TreeNode treeNode : treeNodes) {\n                if (treeNode.getFeature().substring(0, 1).equals(\"?\")) {\n                    Parse.questionMarkRemover(treeNode);\n                    treeNode.optional = true;\n                }\n            }\n        }\n    }\n\n    public static void insertFeatures(List<List<String>> structure, List<List<TreeNode>> treeNodeStructure) {\n        for (List<String> list : structure) {\n            treeNodeStructure.add(TreeNode.toTreeNode(list));\n        }\n    }\n\n    public static void insertParents(List<List<TreeNode>> treeNodeStructure) {\n        for (List<TreeNode> treeNodes : treeNodeStructure) {\n            for (int j = 1; j < treeNodes.size(); j++) {\n                treeNodes.get(j).setParent(treeNodes.get(0));\n            }\n        }\n    }\n\n    public static void insertChildren(List<List<TreeNode>> treeNodeStructure) {\n        for (int i = 0; i < treeNodeStructure.size(); i++) {\n            TreeNode root = treeNodeStructure.get(i).get(0);\n            for (int j = 0; j < treeNodeStructure.size(); j++) {\n                for (int k = 1; k < treeNodeStructure.get(j).size(); k++) {\n                    if (treeNodeStructure.get(j).get(k).getFeature().equals(root.getFeature())) {\n                        treeNodeStructure.get(j).get(k).setChildren(root.getChildren());\n                    }\n                }\n            }\n        }\n    }\n\n    public static void insertTypes(TreeNode root) {\n        if (!root.getFeature().equals(\"+\")\n            || !root.getFeature().equals(\"=\")\n            || !root.getFeature().equals(\"|\")\n            || !root.getFeature().equals(\"^\"))\n            root.setChildrenType(TreeNode.defineType(root));\n        for (int i =0; i < root.getChildren().size(); i++){\n            if (root.getChildren().get(i) != null) {\n                insertTypes(root.getChildren().get(i));\n            }\n        }\n    }\n\n    public static void traverseAndRemove(TreeNode root) {\n        Parse.structurePunctuationRemover(root);\n        for (int i =0; i < root.getChildren().size(); i++){\n            if (root.getChildren().get(i) != null) {\n                traverseAndRemove(root.getChildren().get(i));\n            }\n        }\n    }\n\n    public static TreeNode findRoot(List<List<TreeNode>> treeNodeStructure) {\n        TreeNode root = new TreeNode();\n        boolean isRoot = true;\n        for (int i = 0; i < treeNodeStructure.size(); i++) {\n            root = treeNodeStructure.get(i).get(0);\n            for (List<TreeNode> treeNodes : treeNodeStructure) {\n                for (int k = 1; k < treeNodes.size(); k++) {\n                    if (treeNodes.get(k).getFeature().equals(root.getFeature())) {\n                        isRoot = false;\n                        break;\n                    }\n                    if (!isRoot)\n                        break;\n                }\n            }\n            if (isRoot) return root;\n            isRoot = true;\n        }\n        return root;\n    }\n\n    public TreeNode toTree(List<List<String>> structure) {\n\n        List<List<TreeNode>> treeNodeStructure = new LinkedList<>();\n\n        insertFeatures(structure, treeNodeStructure);\n\n        setOptional(treeNodeStructure);\n\n        insertParents(treeNodeStructure);\n\n        insertChildren(treeNodeStructure);\n\n        insertTypes(findRoot(treeNodeStructure));\n\n        traverseAndRemove(findRoot(treeNodeStructure));\n\n        return findRoot(treeNodeStructure);\n    }\n\n}\n\nclass Man extends ManOrOpt {\n\n    @Override\n    public ChildrenType getType() {\n        return ChildrenType.MAN;\n    }\n\n    @Override\n    public void setType(ChildrenType childrenType) {\n        this.type = childrenType;\n    }\n\n    @Override\n    public boolean isType(TreeNode treeNode) {\n        if (treeNode.getParent() == null\n                && treeNode.getChildren() == null) return true;\n        if (treeNode.getChildren().size() == 2) return true;\n        for (TreeNode child : treeNode.getChildren()) {\n            if (child.getFeature().equals(\"+\"))\n                return true;\n        }\n        return treeNode.getChildren().size() == 0;\n    }\n}\n\nabstract class ManOrOpt implements ChildType {\n    ChildrenType type = null;\n\n    @Override\n    public abstract boolean isType(TreeNode treeNode);\n}\n\nclass Or implements ChildType {\n    ChildrenType type = null;\n\n    @Override\n    public ChildrenType getType() {\n        return ChildrenType.OR;\n    }\n\n    @Override\n    public void setType(ChildrenType childrenType) {\n        this.type = childrenType;\n    }\n\n    @Override\n    public boolean isType(TreeNode treeNode) {\n        for (int i = 0; i < treeNode.getChildren().size(); i++) {\n            if (treeNode.getChildren().get(i).getFeature().equals(\"|\"))\n                return true;\n        }\n        return false;\n    }\n}\n\nclass Parse {\n\n    static List<String> parser(String string) {\n        List<String> output = new ArrayList<>();\n        String temp = \"\";\n        if (string.length() != 0) {\n            if (string.charAt(0) == '{') {\n                string = string.substring(1);\n                string = string.substring(0, string.length() - 1);\n                for (int i = 0; i < string.length(); i++) {\n                    if (string.charAt(i) != ',') {\n                        temp += string.substring(i, i + 1);\n                    } else {\n                        output.add(temp);\n                        temp = \"\";\n                    }\n                }\n            } else {\n                for (int i = 0; i < string.length(); i++) {\n                    if (string.charAt(i) != '='\n                            && string.charAt(i) != '+'\n                            && string.charAt(i) != '|'\n                            && string.charAt(i) != '^')\n                        temp += string.substring(i, i + 1);\n                    else {\n                        output.add(temp);\n                        output.add(string.substring(i, i + 1));\n                        temp = \"\";\n                    }\n                }\n            }\n            output.add(temp);\n        } else output = null;\n        return output;\n    }\n\n    static public void structurePunctuationRemover(TreeNode root) {\n        for (int i = 0; i < root.getChildren().size(); i++) {\n\n            if (root.getChildren().get(i).getFeature().equals(\"=\")\n                    || root.getChildren().get(i).getFeature().equals(\"+\")\n                    || root.getChildren().get(i).getFeature().equals(\"|\")\n                    || root.getChildren().get(i).getFeature().equals(\"^\")) {\n                root.getChildren().remove(i);\n                i--;\n            }\n        }\n\n        for (int i = 0; i < root.getChildren().size(); i++) {\n            if (root.getChildren().get(i) != null)\n                structurePunctuationRemover(root.getChildren().get(i));\n        }\n    }\n\n    static public void questionMarkRemover(TreeNode treeNode) {\n        String feature = treeNode.getFeature().substring(1);\n        treeNode.setFeature(feature);\n    }\n}\n\n\nclass TreeNode {\n    private List<TreeNode> children;\n    private String feature;\n    private ChildrenType childrenType;\n    private TreeNode parent;\n    boolean optional = false;\n\n    public TreeNode(String featureName) {\n        this.feature = featureName;\n        this.children = new LinkedList<>();\n        this.childrenType = null;\n        this.parent = null;\n    }\n\n    public TreeNode() {\n        this.feature = null;\n        this.children = new LinkedList<>();\n        this.childrenType = null;\n        this.parent = null;\n    }\n\n    public String getFeature() {\n        return feature;\n    }\n\n    public void setFeature(String feature) {\n        this.feature = feature;\n    }\n\n    public void setChildren(List<TreeNode> tree) {\n        this.children = tree;\n    }\n\n    public List<TreeNode> getChildren() {\n        return children;\n    }\n\n    public ChildrenType getChildrenType() {\n        return this.childrenType;\n    }\n\n    public void setChildrenType(ChildrenType childrenType) {\n        this.childrenType = childrenType;\n    }\n\n    public void setParent(TreeNode parent) { this.parent = parent; }\n\n    public TreeNode getParent() { return this.parent; }\n\n    public static List<TreeNode> toTreeNode(List<String> line) {\n        List<TreeNode> treeNodized = new LinkedList<>();\n        for (String s : line) {\n            treeNodized.add(new TreeNode(s));\n        }\n        List<TreeNode> t = new LinkedList<>();\n        for (int i = 1; i < treeNodized.size(); i++)\n            t.add(treeNodized.get(i));\n        treeNodized.get(0).setChildren(t);\n        return treeNodized;\n    }\n\n    static public ChildrenType defineType(TreeNode treeNode) {\n        Or or = new Or();\n        Alt alt = new Alt();\n        Man man = new Man();\n        if (or.isType(treeNode)) {\n            return ChildrenType.OR;\n        } else if (alt.isType(treeNode)) {\n            return ChildrenType.ALT;\n        } else if (man.isType(treeNode)) {\n            return ChildrenType.MAN;\n        }\n        return null;\n    }\n}\n\npublic class Main {\n\n    public static void isValid(List<List<String>> testCases, TreeNode root) {\n        for (List<String> aCase : testCases) {\n            if (Check.containParent(root, aCase)\n                    && Check.validFeature(root, aCase)\n                    && Check.containChildrenMatchingTypeRule(root, aCase))\n                System.out.println(\"Valid\");\n            else System.out.println(\"Invalid\");\n        }\n    }\n\n    static List<List<String>> getStructure(List<List<String>> allData) {\n        List<List<String>> structure = new ArrayList<>();\n        int i = 0;\n        while (!(allData.get(i).get(0).equals(\"#\"))) {\n            structure.add(allData.remove(i));\n        }\n        allData.remove(i);\n        return structure;\n    }\n\n    static List<List<String>> getTestCase(List<List<String>> data) {\n        List<List<String>> testCase = new ArrayList<>();\n        int i = 0;\n        while (!(data.get(i).get(0).equals(\"##\"))) {\n            testCase.add(data.remove(i));\n        }\n        data.remove(i);\n        return testCase;\n    }\n\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        String nextLine = scan.nextLine();\n        List<List<String>> allData = new ArrayList<>();\n        while (!nextLine.equals(\"###\")) {\n            allData.add(Parse.parser(nextLine.trim().replaceAll(\"\\\\s+\", \"\")));\n            nextLine = scan.nextLine();\n        }\n        scan.close();\n\n        List<List<String>> structure = new ArrayList<>();\n        List<List<String>> testCase = new ArrayList<>();\n//        int size = 0;\n\n        while (allData.size() != 0) {\n            /*List<List<String>>*/ structure = getStructure(allData);\n            /*List<List<String>>*/ testCase = getTestCase(allData);\n\n//            size = structure.size() + testCase.size();\n\n//            System.out.println(size);\n\n            InputTree tree = new InputTree();\n            TreeNode root = tree.toTree(structure);\n\n            isValid(testCase, root);\n\n            System.out.println(\"+++\");\n\n            structure.clear();\n            testCase.clear();\n\n//            for (int i = 0; i < size; i++) {\n//                allData.remove(0);\n//            }\n        }\n    }\n}", "generated_code": "import java.util.LinkedList;\nimport java.util.Scanner;\nclass O_and_M {\n    String feature_name;\n    LinkedList<String> mad_subfeature = new LinkedList<>();\n    LinkedList<String> op_subfeature = new LinkedList<>();\n\n    boolean mad_validate(LinkedList<String> a) {\n        if (a.contains(this.feature_name)) {\n            for (String i : this.mad_subfeature) {\n                if (a.contains(i))\n                    continue;\n                else\n                    return false;\n            }\n        } else {\n            for (String i : this.mad_subfeature) {\n                if (a.contains(i))\n                    return false;\n                else\n                    continue;\n\n            }\n        }\n        return true;\n    }\n\n    boolean op_validate(LinkedList<String> a) {\n        if (!(a.contains(this.feature_name))) {\n            for (String i : this.op_subfeature) {\n                if (a.contains(i))\n                    return false;\n                else\n                    continue;\n            }\n        }\n        return true;\n    }\n}\nclass Alternative {\n    String feature_name;\n    LinkedList<String> alter_subfeature = new LinkedList<>();\n\n    boolean alter_validate(LinkedList<String> a) {\n        int result = 0;\n        if (a.contains(this.feature_name)) {\n            for (String i : this.alter_subfeature) {\n                if (a.contains(i)) {\n                    result++;\n                    if (result > 1)\n                        return false;\n                } else\n                    continue;\n            }\n            if (result == 1)\n                return true;\n            else\n                return false;\n        } else {\n            for (String i : this.alter_subfeature) {\n                if (a.contains(i))\n                    return false;\n                else\n                    continue;\n            }\n            return true;\n        }\n    }\n}\nclass Or {\n    String feature_name;\n    LinkedList<String> or_subfeature = new LinkedList<>();\n\n    boolean or_validate(LinkedList<String> a) {\n        if (a.contains(this.feature_name)) {\n            for (String i : this.or_subfeature) {\n                if (a.contains(i))\n                    return true;\n                else\n                    continue;\n            }\n            return false;\n        } else {\n            for (String i : this.or_subfeature) {\n                if (a.contains(i))\n                    return false;\n                else\n                    continue;\n            }\n            return true;\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedList<String> arzesh = new LinkedList<>();\n        Scanner input = new Scanner(System.in);\n        String vorodi = input.nextLine();\n        vorodi = vorodi.replace(\" \",\"\");\n        String dorsanj = vorodi ;\n        while (!(dorsanj.equals(\"###\"))) {\n            LinkedList<O_and_M> o_and_ms = new LinkedList<>();\n            o_and_ms.clear();\n            LinkedList<Alternative> alternatives = new LinkedList<>();\n            alternatives.clear();\n            LinkedList<Or> ors = new LinkedList<>();\n            ors.clear();\n            LinkedList<String> rights = new LinkedList<>();\n            rights.clear();\n            LinkedList<String> lefts = new LinkedList<>();\n            lefts.clear();\n            LinkedList<String> mojaz = new LinkedList<>();\n            mojaz.clear();\n            while (!(vorodi.equals(\"#\"))) {\n                if (vorodi.contains(\"=\")) {\n                    if (vorodi.contains(\"+\")) {\n                        int index_Of_eq = vorodi.indexOf(\"=\");\n                        O_and_M o_and_m = new O_and_M();\n                        o_and_m.mad_subfeature.clear();\n                        o_and_m.op_subfeature.clear();\n                        o_and_m.feature_name = vorodi.substring(0, index_Of_eq);\n                        lefts.add(o_and_m.feature_name);\n                        vorodi = vorodi.substring(index_Of_eq + 1);\n                        while (vorodi.contains(\"+\")) {\n                            int index_of_sum = vorodi.indexOf(\"+\");\n                            String dade = vorodi.substring(0, index_of_sum);\n                            if (dade.charAt(0) == '?') {\n                                o_and_m.op_subfeature.add(dade.substring(1));\n                                rights.add(dade.substring(1));\n                            } else {\n                                o_and_m.mad_subfeature.add(dade);\n                                rights.add(dade);\n                            }\n                            vorodi = vorodi.substring(index_of_sum + 1);\n                        }\n                        if (vorodi.charAt(0) == '?') {\n                            o_and_m.op_subfeature.add(vorodi.substring(1));\n                            rights.add(vorodi.substring(1));\n\n                        } else {\n                            o_and_m.mad_subfeature.add(vorodi);\n                            rights.add(vorodi);\n\n                        }\n                        o_and_ms.add(o_and_m);\n\n                    } else if (vorodi.contains(\"|\")) {\n                        int index_of_eq = vorodi.indexOf(\"=\");\n                        Or or = new Or();\n                        or.or_subfeature.clear();\n                        or.feature_name = vorodi.substring(0, index_of_eq);\n                        lefts.add(or.feature_name);\n                        vorodi = vorodi.substring(index_of_eq + 1);\n                        while (vorodi.contains(\"|\")) {\n                            int index_of_or = vorodi.indexOf(\"|\");\n                            String dade = vorodi.substring(0, index_of_or);\n                            or.or_subfeature.add(dade);\n                            rights.add(dade);\n                            vorodi = vorodi.substring(index_of_or + 1);\n                        }\n                        or.or_subfeature.add(vorodi);\n                        rights.add(vorodi);\n                        ors.add(or);\n                    } else if (vorodi.contains(\"^\")) {\n                        int index_of_eq = vorodi.indexOf(\"=\");\n                        Alternative alternative = new Alternative();\n                        alternative.alter_subfeature.clear();\n                        alternative.feature_name = vorodi.substring(0, index_of_eq);\n                        lefts.add(alternative.feature_name);\n                        vorodi = vorodi.substring(index_of_eq + 1);\n                        while (vorodi.contains(\"^\")) {\n                            int index_of_al = vorodi.indexOf(\"^\");\n                            String dade = vorodi.substring(0, index_of_al);\n                            alternative.alter_subfeature.add(dade);\n                            rights.add(dade);\n                            vorodi = vorodi.substring(index_of_al + 1);\n                        }\n                        alternative.alter_subfeature.add(vorodi);\n                        rights.add(vorodi);\n                        alternatives.add(alternative);\n                    }\n                    else {\n                        int index_of_eq = vorodi.indexOf(\"=\");\n                        O_and_M o_and_m = new O_and_M();\n                        o_and_m.mad_subfeature.clear();\n                        o_and_m.op_subfeature.clear();\n                        o_and_m.feature_name = vorodi.substring(0, index_of_eq);\n                        lefts.add(o_and_m.feature_name);\n                        vorodi = vorodi.substring(index_of_eq + 1);\n                        if (vorodi.charAt(0) == '?') {\n                            o_and_m.op_subfeature.add(vorodi.substring(1));\n                            rights.add(vorodi.substring(1));\n                        } else {\n                            o_and_m.mad_subfeature.add(vorodi);\n                            rights.add(vorodi);\n                        }\n\n                        o_and_ms.add(o_and_m);\n                    }\n                }\n                else {\n                    O_and_M o_and_m = new O_and_M();\n                    o_and_m.feature_name = vorodi;\n                    lefts.add(vorodi);\n                    o_and_ms.add(o_and_m);\n                }\n                vorodi = input.nextLine();\n                vorodi = vorodi.replace(\" \",\"\");\n            }\n            //payane tahlile model\n            String root = \" \" ;\n            for (String left : lefts){\n                if(!(rights.contains(left)))\n                    root = left ;\n                else\n                    continue;\n            }\n            mojaz.add(root);\n            mojaz.addAll(rights);\n            //tahlile testha\n            String test = input.nextLine();\n            test = test.replace(\" \",\"\");\n            while (!(test.equals(\"##\"))) {\n                test = test.replace(\"{\", \"\");\n                test = test.replace(\"}\", \"\");\n                LinkedList<String> tests = new LinkedList<String>();\n                tests.clear();\n                while (test.contains(\",\")) {\n                    int index_of_qam = test.indexOf(\",\");\n                    String t = test.substring(0, index_of_qam);\n                    test = test.substring(index_of_qam + 1);\n                    tests.add(t);\n                }\n                tests.add(test);\n                if (validate(tests, o_and_ms, alternatives, ors, mojaz, root, rights, lefts))\n                    arzesh.add(\"Valid\");\n                else\n                    arzesh.add(\"Invalid\");\n\n                test = input.nextLine();\n                test = test.replace(\" \",\"\");\n            }\n            arzesh.add(\"+++\");\n            vorodi = input.nextLine();\n            vorodi = vorodi.replace(\" \", \"\");\n            dorsanj = vorodi ;\n        }\n        for (String i : arzesh) {\n            System.out.println(i);\n        }\n    }\n\n    static boolean validate(LinkedList<String> test, LinkedList<O_and_M> o_and_ms, LinkedList<Alternative> alternatives, LinkedList<Or> ors, LinkedList<String> mojaz, String root, LinkedList<String> rights, LinkedList<String> lefts) {\n        boolean anser = true;\n        for (O_and_M i : o_and_ms) {\n            anser &= i.mad_validate(test);\n            anser &= i.op_validate(test);\n        }\n        for (Alternative i : alternatives) {\n            anser &= i.alter_validate(test);\n        }\n        for (Or i : ors) {\n            anser &= i.or_validate(test);\n        }\n        for (String i : test) {\n            if (!(mojaz.contains(i)))\n                return false;\n            else\n                continue;\n        }\n        for (String left : lefts) {\n            if (!(left.equals(root))) {\n                if (rights.contains(left))\n                    continue;\n                else\n                    return false;\n            }\n        }\n        anser &= test.contains(root);\n        return anser;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "score": 1.0}
{"id": "SHARE_1_1959_19__1_1959_80", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in =new Scanner(System.in);\n\t\twhile(in.hasNext())\n\t\t{\n\t\t\tint count=0;\n\t\t\tint count1=0;\n\t\t\tint t=in.nextInt();\n\t\t\tint [] lamp=new int[t];\n\t\t\tint [] lamp2=new int[t];\n\t\t\t\n\t\t\tfor(int i=0;i<lamp.length;i++)\n\t\t\t{\n\t\t\t\tlamp[i]=in.nextInt();\n\t\t\t\t lamp2[lamp.length-i-1]=lamp[i];\n\t\t\t\t\n\t\t\t}\n\t\t\tfor(int i=0;i<lamp.length-1;i++)\n\t\t\t{\n\t\t\t\tif(lamp[i]==lamp[i+1])\n\t\t\t\t{\n\t\t\t\t\tif(lamp[i+1]==1)\n\t\t\t\t\t\tlamp[i+1]=0;\n\t\t\t\t\telse lamp[i+1]=1 ;\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tif(lamp2[i]==lamp2[i+1])\n\t\t\t\t{\n\t\t\t\t\tif(lamp2[i+1]==1)\n\t\t\t\t\t\tlamp2[i+1]=0;\n\t\t\t\t\telse lamp2[i+1]=1 ;\n\t\t\t\t\tcount1++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(Math.min(count,count1));\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile (in.hasNext()) {\n\t\t\tbyte[] a = new byte[in.nextByte()];\n\t\t\tbyte m1 = 0, m2 = 0;\n\t\t\tfor (byte i = 0; i < a.length; i++) {\n\t\t\t\ta[i] = in.nextByte();\n\t\t\t\tif (i % 2 == 0) {\n\t\t\t\t\tif (a[i] == 1)\n\t\t\t\t\t\tm1++;\n\t\t\t\t\telse\n\t\t\t\t\t\tm2++;\n\t\t\t\t} else {\n\t\t\t\t\tif (a[i] == 0)\n\t\t\t\t\t\tm1++;\n\t\t\t\t\telse\n\t\t\t\t\t\tm2++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(m1 > m2 ? m2 : m1);\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_294__1_1001_486", "golden_code": "\nimport java.util.Scanner;\n\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n            while(in.hasNextInt()){\n            \tSystem.out.println(in.nextInt()+in.nextInt());\n            }\n            \n    }\n}\n", "generated_code": "import java.util.Scanner;   \n  \npublic class Main  \n{  \n    public static void main(String args[])  \n    {  \n        Scanner in = new Scanner(System.in);\n        while(in.hasNext())  \n        {  \n            System.out.println(in.nextInt()+in.nextInt());  \n        }  \n        in.close();  \n    }  \n}", "score": 1.0}
{"id": "SHARE_1_2857_19__1_1185_15", "golden_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\n\npublic class Main {\n    public static int search(int array[],int num){\n        for(int i=1;i<array.length;i++){\n            if(array[i]>=num){\n                return i;\n            }\n        }\n        return 0;\n    }\n    public static void main(String[] args) {\n        Scanner sc =new Scanner(System.in);\n\n        int numberofset=sc.nextInt();\n        int answers[]=new int[numberofset];\n        for(int i=0;i<numberofset;i++){\n            int size=sc.nextInt();\n            int[] array=new int[size];\n            for(int j=0;j<size;j++){\n                array[j]=sc.nextInt();\n            }\n            Arrays.sort(array);\n            while(array[array.length-1]!=array[0]) {\n                int newnum = array[array.length - 1] - array[0];\n                if (newnum > array[array.length - 2]) {\n                    for (int j = 1; j < array.length - 1; j++) {\n                        array[j - 1] = array[j];\n                    }\n                    array[array.length - 1] = newnum;\n                    array[array.length - 2] = newnum;\n                } else {\n                    int index = search(array, newnum);\n                   \n\n                    for(int j=array.length-2;j>index-1;j--){\n                        array[j+1]=array[j];\n                    }\n                    array[index] = newnum;\n                    for (int j = 1; j < index; j++) {\n                        array[j - 1] = array[j];\n                    }\n                    array[index - 1] = newnum;\n                }\n\n\n            }\n            answers[i]=array[0];\n\n        }\n        for(int i=0;i<answers.length;i++){\n            System.out.println(answers[i]);\n        }\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n//ShareCode\n\npublic class Main{\n    \n    public static void main(String args[]){\n        Scanner cin=new Scanner(System.in);\n        while(true){\n            String num=cin.nextLine();\n            if(num.equals(\"0\")) break;\n            int sum=0;\n            for(int i=0;i<num.length();i++){\n                int d=Integer.parseInt(\"\"+num.charAt(i));\n                sum+=d*(Math.pow(2, num.length()-i)-1);\n            }\n            System.out.println(\"\"+sum);\n        }\n    }//main Method\n}//Class Main", "score": 0.0}
{"id": "SHARE_1_2715_11__1_2744_10", "golden_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main\n{\n\tpublic static void main(String [] args)\n\t{\n\t\tScanner in = new Scanner(System.in);\n\n\t\twhile(true)\n\t\t{\n\t\t\tint n = in.nextInt();\n\t\t\tif(n == 0)\n\t\t\t\tbreak;\n\n\n\t\t\tchar [] rna = in.next().toCharArray();\n\n\n\t\t\tint [][] dp = new int[n][n];\n\n\n\t\t\tfor(int len = 2 ; len <= n ; len++)\n\t\t\t\tfor(int s = 0 ; s + len < n ; s++)\n\t\t\t\t{\n\t\t\t\t\tint t = s + len;\n\n\t\t\t\t\tif(good(rna[s], rna[t]))\n\t\t\t\t\t\tdp[s][t] = dp[s+1][t-1] + 1;\n\n\t\t\t\t\tfor(int k = s ; k < t ; k++)\n\t\t\t\t\t\tdp[s][t] = Math.max(dp[s][t], dp[s][k] + dp[k+1][t]);\n\t\t\t\t}\n\n\n\n\n\t\t\tSystem.out.println(dp[0][n-1]);\n\n\t\t}\n\n\t}\n\n\tprivate static boolean good(char a, char b)\n\t{\n\t\tif(a == 'A' && b == 'U')\n\t\t\treturn true;\n\t\tif(a == 'U' && b == 'A')\n\t\t\treturn true;\n\t\tif(a == 'C' && b == 'G')\n\t\t\treturn true;\n\t\tif(a == 'G' && b == 'C')\n\t\t\treturn true;\n\n\t\treturn false;\n\t}\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    static void dfs(int u) {\n        shart[u] = true;\n        value += pool[u];\n        for (int i = 0; i < fr; i++) {\n            if (shart[i] == false && sharts[i][u] == 1) {\n                dfs(i);\n            }\n        }\n\n    }\n    static int fr;\n    static int sharts[][], pool[];\n    static int value = 0;\n    static boolean shart[];\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n\n        out:\n        while (in.hasNext()) {\n            fr = in.nextInt();\n            int re = in.nextInt();\n            shart = new boolean[fr];\n\n            sharts = new int[fr][fr];\n\n            pool = new int[fr];\n\n            for (int i = 0; i < fr; i++) {\n                pool[i] = in.nextInt();\n            }\n\n            for (int i = 0; i < re; i++) {\n                int n = in.nextInt();\n                int m = in.nextInt();\n                sharts[n][m] = 1;\n                sharts[m][n] = 1;\n                //  shart[i] = true;\n            }\n\n            value = 0;\n            for (int i = 0; i < fr; i++) {\n                if (value != 0) {\n                    System.out.println(\"IMPOSSIBLE\");\n                    continue out;\n                }\n                if (shart[i] == false) {\n                    dfs(i);\n                }\n            }\n            System.out.println(\"POSSIBLE\");\n\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_460__1_1001_16", "golden_code": "import java.util.Scanner;\npublic class Main\n{\n    public static void main(String args[])\n    {\n        int a, b;\n        Scanner i = new Scanner(System.in);\n         while (i.hasNext() == true )\n             System.out.println(i.nextInt() + i.nextInt());\n    }\n}", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\tScanner a = new Scanner(System.in);\nwhile(a.hasNext()){\n\tint b = a.nextInt() + a.nextInt();\n\tSystem.out.println(b);\n}\n\t\t\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1319_25__1_106024_14", "golden_code": "import java.util.Scanner;\n//import java.io.*;\npublic class Main {\n\tpublic static void main(String[] args) {\n//\t\tFileReader in1 = new FileReader(\"ss.txt\");\n\t\tScanner in =new Scanner(System.in);\n\t\tint a=in.nextInt();\n\t\twhile(true)\n\t\t\t{\t\n\t\t\t\tif(a==5280)\n\t\t\t\tbreak;\n\t\t\t\tint b=0;\n\t\t\t\tint c=in.nextInt();\n\t\t\t\tint d1,d2;\n\t\t\t\twhile(c!=a)\n\t\t\t\t{\n\t\t\t\t\td1=Math.abs(b-a);\n\t\t\t\t\td2=Math.abs(c-a);\n\t\t\t\t\tSystem.out.print(\"Moving from \"+b+\" to \"+c+\":\");\n\t\t\t\t\tif(d1>d2)\n\t\t\t\t\t\tSystem.out.println(\" warmer.\");\n\t\t\t\t\telse if(d1<d2)\n\t\t\t\t\t\tSystem.out.println(\" colder.\");\n\t\t\t\t\telse\n\t\t\t\t\t\tSystem.out.println(\" same.\");\n\t\t\t\t\tb=c;\n\t\t\t\t\tc=in.nextInt();\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"Moving from \"+b+\" to \"+a+\": found it!\");\n\t\t\t\ta=in.nextInt();\n\t\t\t\tif(a!=5280)\n\t\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\n\t\t\n\tin.close();\t\n\t}\n}", "generated_code": "\nimport java.util.Scanner;\n\n\npublic class Main {\n    public static void main(String[] args){\n        Scanner in=new Scanner(System.in);\n        int N,M;\n        N=in.nextInt();\n        M=in.nextInt();\n        while(M!=0&&N!=0){\n            int[][] m=new int[N+1][M+1];\n            for(int i=0;i<N+1;i++)\n                m[i][M]=1;\n            for(int i=0;i<M+1;i++)\n                m[N][i]=1;\n            boolean s=false,p=true;\n            for(int i=0;i<N;i++){\n                for(int j=0;j<M;j++){\n                    m[i][j]=in.nextInt();\n                    if(m[i][j]==0)\n                        s=true;\n                }\n            }\n            if(s==false)\n                System.out.println(\"No\");\n            else if(s==true){\n                for (int i = 0; i < N; i++)\n                {\n                  for (int j = 0; j < M; j++)\n                  {\n                      if ((m[i][j] == 0) && (m[i+1][j] == 0 || m[i][j+1] == 0) )\n                      {\n                                    System.out.println(\"No\");\n                                    j = M;\n                                    i = N;\n                                    p=false;\n                      }\n                  }\n                }\n            \n                if(p)\n                System.out.println(\"Yes\");\n            }\n            \n            \n        \n        N=in.nextInt();\n        M=in.nextInt();    \n        \n    }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_70__1_1001_320", "golden_code": "import java.util.*;\n\npublic class Main {\n    public static void main(String []argv){ \n      int x;\n      Scanner in = new Scanner(System.in);\n      while (true){\n        if(!in.hasNext())\n            break;\n        x = in.nextInt();\n        x+= in.nextInt();\n        System.out.println(x);\n       }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner input=new Scanner(System.in);\n\t\twhile(input.hasNext()){\n\t\t\tint a=input.nextInt();\n\t\t\tint b=input.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1230_85__6_1009_8", "golden_code": "import java.util.*;\nimport java.math.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        while (true) {\n            BigInteger num = s.nextBigInteger();\n            if (num.equals(BigInteger.ZERO)) {\n                break;\n            }\n            while(true){\n                BigInteger sum = BigInteger.ZERO;\n                int len = num.toString().length();\n                for(int i=0;i<len;i++){\n                    sum = sum.add(num.mod(BigInteger.TEN));\n                    num = num.divide(BigInteger.TEN);\n                }\n                num = sum;\n                if(num.compareTo(BigInteger.TEN) == -1)\n                    break;\n            }\n            System.out.println(num);\n        }\n    }\n}\n", "generated_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nclass Main{\n\tpublic static void main(String args[]){\n\n\t\tMap m = new Map();\n\t\tm.readInput();\n\n\t}\n}\nclass Map{\n\tint newi=-10;\n\tint newj=-10;\n\tint newDir = -1;\n\tint maxRoom = -1;\n\tint resRoom = -1;\n\tint tempSize = 0;\n\tint Rooms = 0;\n\tint M = 0;\n\tint N = 0;\n\tint input [][];\n\tchar color[][];\n\tint wall[][][];\n\tvoid readInput(){\n\t\tString line;\n\t\tint num = 0;\n\t\ttry{\n\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\t\tline = br.readLine();\n\t\t\tString[] word = line.split(\"\\\\s+\");\n\t\t\tN = Integer.parseInt(word[0]);\n\t\t\tM = Integer.parseInt(word[1]);\n\t\t\tinput = new int[M][N];\n\t\t\tcolor = new char[M][N];\n\t\t\t//parent= new int[M][N];\n\t\t\t//d= new int[M][N];\n\t\t\t//f= new int[M][N];\n\t\t\twall = new int[M][N][4];\n\t\t\tdo {\n\t\t\t\tline = br.readLine();\n\t\t\t\tword = line.split(\"\\\\s+\");\n\t\t\t\tfor(int i=0;i<N;i++){\n\t\t\t\t\tinput[num][i]=Integer.parseInt(word[i]);\n\t\t\t\t\tcolor[num][i] = 'w';\n\t\t\t\t}\n\t\t\t\tnum++;\n\n\t\t\t} while(line != null && num < M);\n\t\t}catch(IOException e){\n\n\t\t\te.printStackTrace();\n\t\t}\n\t\tparseInput();\n\t\tDFS();\n\t\tSystem.out.println(Rooms);\n\t\tSystem.out.println(maxRoom);\n\t\t//if(maxRoom > 1)\n\t\t\tmergeRooms();\n\t\t//System.out.println(\"num room : \" + Rooms);\n\t\tif(resRoom > 1)\n\t\t\tSystem.out.println(resRoom);\n\t\telse\n\t\t\tSystem.out.println(\"1\");\n\t\tchar name='Z';\n\t\tif(newDir == 0)\n\t\t\tname = 'W';\n\t\telse if(newDir == 1)\n\t\t\tname = 'S';\n\t\tif(newDir == 2)\n\t\t\tname = 'N';\n\t\tif(newDir == 3)\n\t\t\tname = 'E';\n\t\tif(resRoom>1)\n\t\t\tSystem.out.println((newi+1) + \" \"+ (newj+1) + \" \" + name);\n\t}\n\t/*void printwall(){\n\t\tfor (int i=0;i<M;i++){\n\t\t\tfor(int j=0;j<N;j++){\n\t\t\t\tfor(int k=0;k<4;k++)\n\t\t\t\tSystem.out.print(wall[i][j][k]);\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\tSystem.out.println(\"###\");\t\n\t\t}\n\t\t\n\t}*/\n\tvoid parseInput(){\n\t\tint temp = 0;\n\t\tfor (int i=0;i<M;i++){\n\t\t\tfor(int j=0;j<N;j++){\n\t\t\t\ttemp = input[i][j];\n\t\t\t\tfor(int k=8;k>=1;k/=2){\n\t\t\t\t\tif(temp-k >= 0){\n\t\t\t\t\t\ttemp = temp - k;\n\t\t\t\t\t\tif(k==8)\n\t\t\t\t\t\t\twall[i][j][1]=1;\n\t\t\t\t\t\telse if(k==4)\n\t\t\t\t\t\t\twall[i][j][3]=1;\n\t\t\t\t\t\telse if(k==2)\n\t\t\t\t\t\t\twall[i][j][2]=1;\n\t\t\t\t\t\telse if(k==1)\n\t\t\t\t\t\t\twall[i][j][0]=1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t}\n\tvoid DFS(){\n\t\t\n\t\tfor(int i=0;i<M;i++){\n\t\t\tfor(int j=0;j<N;j++){\n\t\t\t\tcolor[i][j]='w';\n\t\t\t}\n\t\t}\n\t\tmaxRoom = 0;\n\t\tfor(int i=0;i<M;i++){\n\t\t\tfor(int j=0;j<N;j++){\n\t\t\t\tif(color[i][j]=='w'){\n\t\t\t\t\tdfsVisit(i,j);\n\t\t\t\t\tRooms++;\n\t\t\t\t\tmaxRoom = Math.max(tempSize,maxRoom);\n\t\t\t\t\t\n\t\t\t//\t\tif(tempSize==maxRoom)\n\t\t\t\t//\t\tSystem.out.println(\"temp size is :\" + tempSize);\n\t\t//\t\t\tmaxRoom=tempSize;\n\t\t\t\t\ttempSize = 0;\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//printMaze();\n\t\t//System.out.println(\"num room : \" + Rooms);\n\t\t//System.out.println(\"max room is: \" + maxRoom);\n\t\t\n\t}\n\tvoid dfsVisit(int i,int j){ //gharb - shargh\n\t\tcolor[i][j]='g';\n\t\ttempSize++;\n\t\t//printMaze();\n\t\t//time+=1;\n\t\t//d[i][j]=time;\n\t\tif(j-1 >= 0){\n\t\t\tif(color[i][j-1]=='w'&& wall[i][j][0]==0){\n\t\t\t//\tSystem.out.println(\"gharb\");\n\t\t\t//\tparent[i][j-1]=input[i][j];\n\t\t\t\tdfsVisit(i,j-1);\n\t\t\t}\n\t\t}\n\t\tif(i+1 < M){\n\t\t\tif(color[i+1][j]=='w' && wall[i][j][1]==0){\n\t\t\t\t//System.out.println(\"jonub\");\n\t\t\t\t//parent[i+1][j]=input[i][j];\n\t\t\t\tdfsVisit(i+1,j);\n\t\t\t}\n\t\t}\n\t\tif(i-1 >= 0){\n\t\t\tif(color[i-1][j]=='w' && wall[i][j][2]==0){\n\t\t\t\t//System.out.println(\"shomal\");\n\t\t\t\t//parent[i-1][j]=input[i][j];\n\t\t\t\tdfsVisit(i-1,j);\n\t\t\t}\n\t\t}\t\t\n\t\tif(j+1 < N){\n\t\t\tif(color[i][j+1]=='w' && wall[i][j][3]==0){\n\t\t\t\t//System.out.println(\"shargh\");\n\t\t\t\t//System.out.println(wall[i][j][3]);\n\t\t\t\t//parent[i][j+1]=input[i][j];\n\t\t\t\tdfsVisit(i,j+1);\n\t\t\t}\n\t\t}\n\t\tcolor[i][j]='b';\n\t\t//time+=1;\n\t\t//f[i][j] = time;\n\t}\n\tvoid mergeRooms(){\n\t\tint DW = 100;\n\t\tint DJ = 100;\n\t\tfor(int i=0;i<M;i++){\n\t\t\tfor(int j=0;j<N;j++){\n\t\t\t\tfor(int k=0;k<4;k++){\n\t\t\t\t\tif((i==0 && k==2) || (i==M-1 && k==1) || (j==0 && k==0) || (j==N-1 && k==3))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tint x = -1;\n\t\t\t\t\tint y = -1;\n\t\t\t\t\tint dir = -1;\n\t\t\t\t\tif(wall[i][j][k]==1){\n\t\t\t\t\t\tif(k==0){\n\t\t\t\t\t\t\t/*wall[i][j][k]=0;\n\t\t\t\t\t\t\tif(j-1 >= 0){\n\t\t\t\t\t\t\t\twall[i][j-1][3]=0;\n\t\t\t\t\t\t\t\tx = i;\n\t\t\t\t\t\t\t\ty = j -1;\n\t\t\t\t\t\t\t\tdir = 3;\n\t\t\t\t\t\t\t\t}*/\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(k==1){\n\t\t\t\t\t\t\t/*wall[i][j][k]=0;\n\t\t\t\t\t\t\tif(i+1 < M){\n\t\t\t\t\t\t\t\tx=i+1;\n\t\t\t\t\t\t\t\twall[i+1][j][2]=0;\n\t\t\t\t\t\t\t\ty = j;\n\t\t\t\t\t\t\t\tdir = 2;\n\t\t\t\t\t\t\t}*/\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(k==2){\n\t\t\t\t\t\t\twall[i][j][k]=0;\n\t\t\t\t\t\t\tif(i-1 >= 0){\n\t\t\t\t\t\t\twall[i-1][j][1]= 0;\n\t\t\t\t\t\t\tx= i-1;\n\t\t\t\t\t\t\ty=j;\n\t\t\t\t\t\t\tdir = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//continue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(k==3){\n\t\t\t\t\t\t\twall[i][j][k]=0;\n\t\t\t\t\t\t\tif(j+1 < N){\n\t\t\t\t\t\t\twall[i][j+1][0]=0;\n\t\t\t\t\t\t\tx= i;\n\t\t\t\t\t\t\ty=j+1;\n\t\t\t\t\t\t\tdir = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//System.out.println(\"i: \"+i +\" j: \"+ j + \" k: \"+k);\n\t\t\t\t\t\t//int DW = 100;\n\t\t\t\t\t\t//int DJ = 100;\n\t\t\t\t\t\tint newW = 1000;\n\t\t\t\t\t\tint newJ = 1000;\n\t\t\t\t\t\t//int newi;\n\t\t\t\t\t\t//int newj;\n\t\t\t\t\t\tDFS();\n\t\t\t\t\t\t//System.out.println(\"i: \"+i +\" j: \"+ j + \" k: \"+k);\n\t\t\t\t\t\tif(k==3){\n\t\t\t\t\t\t\tnewW = j+1;\n\t\t\t\t\t\t\tnewJ = M - i -1 ;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(k==2){\n\t\t\t\t\t\t\tnewW = j;\n\t\t\t\t\t\t\tnewJ = M-i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//System.out.println(\"W \"+newW +\" J: \" + newJ);\n\t\t\t\t\t\t//System.out.println(\"DW \"+DW +\" DJ: \" + DJ);\n\t\t\t\t\t\tif(resRoom < maxRoom){\n\t\t\t\t\t\t\tresRoom = maxRoom;\n\t\t\t\t\t\t\tnewDir = k;\n\t\t\t\t\t\t\tDW =newW;\n\t\t\t\t\t\t\tDJ =newJ;\n\t\t\t\t\t\t\tnewi=i;\n\t\t\t\t\t\t\tnewj=j;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(resRoom==maxRoom){\n\t\t\t\t\t\t\t//System.out.println(\"l la la \");\n\t\t\t\t\t\t\tif(newW < DW){\n\t\t\t\t\t\t\t\tDW = newW;\n\t\t\t\t\t\t\t\tDJ = newJ;\n\t\t\t\t\t\t\t\tnewi = i;\n\t\t\t\t\t\t\t\tnewj =j;\n\t\t\t\t\t\t\t\tnewDir = k;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if(DW==newW){\n\t\t\t\t\t\t\t//\tSystem.out.println(\"mim\");\n\t\t\t\t\t\t\t\tif(DJ>newJ){\n\t\t\t\t\t\t\t\t\t//System.out.println(\"mim\");\n\t\t\t\t\t\t\t\t\tnewi=i;\n\t\t\t\t\t\t\t\t\tnewj = j;\n\t\t\t\t\t\t\t\t\tDJ = newJ;\n\t\t\t\t\t\t\t\t\tDW = newW;\n\t\t\t\t\t\t\t\t\tnewDir = k;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if(DJ==newJ){\n\t\t\t\t\t\t\t\t\t//System.out.println(\"mosavie\");\n\t\t\t\t\t\t\t\t\tif(k==2){\n\t\t\t\t\t\t\t\t\t\tDJ = newJ;\n\t\t\t\t\t\t\t\t\t\tDW = newW;\n\t\t\t\t\t\t\t\t\t\tnewi=i;\n\t\t\t\t\t\t\t\t\t\tnewj=j;\n\t\t\t\t\t\t\t\t\t\tnewDir = k;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//System.out.println(\"Ni: \"+newi +\" Nj: \"+ newj);\n\t\t\t\t\t\t//System.out.println(maxRoom);\t\n\t\t\t\t\t\twall[i][j][k]=1;\n\t\t\t\t\t\tif(dir > -1)\n\t\t\t\t\t\t\twall[x][y][dir]=1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_5_1011_13__5_1011_17", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\nclass Meeting {\n\n\tpublic int startTime;\n\tpublic int finishTime;\n\tpublic int isChosen;\n\t\n\tpublic Meeting( int start, int finish ){\n\t\t\n\t\tstartTime = start;\n\t\tfinishTime = finish;\n\t\t\n\t\tisChosen = 0;\n\t\n\t}\n\t\n\tpublic boolean checkInterference(\tMeeting meeting ){\n\t\t\n\t\tif( \n\t\t\t((startTime < meeting.startTime)  && (meeting.startTime < finishTime))  ||\n\t\t\t((startTime < meeting.finishTime) && (meeting.finishTime < finishTime)) ||\n\t\t\t((startTime > meeting.startTime)  && (meeting.finishTime > startTime))  ||\n\t\t\t((finishTime > meeting.startTime) && (meeting.finishTime > finishTime)) ||\n\t\t\t((startTime ==  meeting.startTime) && (finishTime == meeting.finishTime))\n\t\t  ){ return true; }\n\t\t     \n\t\t\n\t\treturn false;\n\t\t\n\t}\n\t\n}\n\nclass MeetingDay {\n\n\tpublic ArrayList<Meeting> meetingsOfDay;\n\tpublic ArrayList<Integer> acceptedMeetings;\n\t\n\tpublic MeetingDay(){\n\t\t\n\t\tmeetingsOfDay = new ArrayList<Meeting>();\n\t\tacceptedMeetings = new ArrayList<Integer>();\n\t\t\n\t}\n\t\n\tpublic void convertSubsetNumToBits( int subSetNum ){\n\t\t\n\t\tint q = subSetNum;\n\t\tint r, counter = 0;\n\t\tint size = meetingsOfDay.size();\n\t\tdo{\n\t\t\t\n\t\t\tr = (q%2);\n\t\t\tq = (q/2);\n\n\t\t\tmeetingsOfDay.get( size - counter - 1 ).isChosen = r;\n\t\t\tcounter++;\n\t\t\t\n\t\t}while( q != 0 );\n\t\t\n\t\tif( counter > (size - 1) )\n\t\t\tmeetingsOfDay.get( 0 ).isChosen = r;\n\t\t\n\t}\n\t\n\tpublic boolean NoInterferenceBetweenSubsets(){\n\t\t\n\t\tint size = meetingsOfDay.size();\n\t\tfor( int i=0; i< size; i++ ){\n\t\t\t\n\t\t\tMeeting first = meetingsOfDay.get(i); \n\t\t\tif( first.isChosen == 1 ){\n\t\t\t\tfor( int j=0; j< size; j++ ){\n\t\t\t\t\t\n\t\t\t\t\tif( j == i )continue;\n\t\t\t\t\t\n\t\t\t\t\tMeeting second = meetingsOfDay.get(j);\n\t\t\t\t\tif( second.isChosen == 1 ){\n\t\t\t\t\t\t\n\t\t\t\t\t\tif( first.checkInterference( second ) )\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t}\n\t\t\t\n\t\t\t}\n\t\t\n\t\t}\n\t\t\n\t\treturn true;\n\t\t\n\t}\n\t\n\tpublic int NumOfOnes(){\n\t\t\n\t\tint num = 0;\n\t\tfor( int i=0; i< meetingsOfDay.size(); i++ )\n\t\t\tif( (meetingsOfDay.get(i).isChosen) == 1 )\n\t\t\t\tnum++;\n\t\t\n\t\treturn num;\n\t\t\n\t}\n\t\n\tpublic int findSubsetWithMaxOnes(){\n\t\t\t\n\t\tint maxNum = acceptedMeetings.get(0);\n\t\t\n\t\tfor( int i=1; i<acceptedMeetings.size(); i++ ){\n\t\t\t \n\t\t\tint tempNum = acceptedMeetings.get(i);\n\t\t\tif( tempNum >= maxNum )\n\t\t\t\tmaxNum = tempNum;\n\t\t\n\t\t}\n\t\t\n\t\treturn maxNum;\n\t\t\n\t}\n\t\n\tpublic int findNumOfAcceptedMeetings() {\n\t\t\n\t\tint numOfSubSets = (int) Math.pow( 2.0, meetingsOfDay.size() );\n\t\tfor( int i=0; i<numOfSubSets; i++ ){\n\t\t\t\n\t\t\tconvertSubsetNumToBits( i );\n\t\t\t\n\t\t\tif( NoInterferenceBetweenSubsets() )\n\t\t\t\tacceptedMeetings.add( NumOfOnes() );\n\t\t\t\n\t\t}\n\t\t\n\t\treturn findSubsetWithMaxOnes();\n\t\t\n\t}\n\t\n}\n\npublic class Main {\n\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner in = new Scanner( System.in );\n\t\t\n\t\tint numOfDays = Integer.valueOf( in.next() );\n\t\n\t\tfor( int day=0; day<numOfDays; day++ ){\n\t\t\t\n\t\t\tMeetingDay newDay = new MeetingDay();\n\t\t\t\n\t\t\tint start  = Integer.valueOf( in.next() );\n\t\t\tint finish = Integer.valueOf( in.next() );\n\t\t\twhile( true ){\n\t\t\t\t\n\t\t\t\tif( (start != 0) || (finish != 0) ){\n\t\t\t\t\t\n\t\t\t\t\tMeeting newMeeting = new Meeting( start, finish );\n\t\t\t\t\tnewDay.meetingsOfDay.add( newMeeting );\n\t\t\t\t\t\n\t\t\t\t\tstart  = Integer.valueOf( in.next() );\n\t\t\t\t\tfinish = Integer.valueOf( in.next() );\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\telse if( (start == 0) && (finish == 0) )\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println( newDay.findNumOfAcceptedMeetings() );\n\t\t\t\n\t\t}\n\n\t}\n\n}\n\n\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner scanConsole = new Scanner(System.in); \n\t\tArrayList< Time > data = new ArrayList< Time >();\n\n\t\tint numOfDays = scanConsole.nextInt();\n\t\t\t\n\t\tfor (int i = 0; i < numOfDays; i++) {\n\t\t\n\t\t\tInput input = new Input();\n\t\t\tinput.initialize(scanConsole, data);\n\t\t\t\n\t\t\tcomputeMaxMeetingOfDay( data );\n\t\t\t\n\t\t\tdata.clear();\n\t\t}\n\t\t\n\t\tscanConsole.close();\n\t\t\n\t\t\n\t}\n\t\t\n\tprivate static class Time {\n\t\t\n\t\tboolean state = true;\n\t\tprivate int startTime, endTime;\n\t\t\n\t\tTime ( int st, int et ) { startTime = st; endTime = et; }\n\t\t\n\t\tpublic int getEndTime() { return endTime; }\n\t\tpublic int getStartTime() { return startTime; }\n\n\t}\n\n\tprivate static class Input {\n\n\t\tpublic void initialize ( Scanner scanConsole, ArrayList< Time > data ) {\n\n\t\t\tint tempInt1 = scanConsole.nextInt();\n\t\t\tint tempInt2 = scanConsole.nextInt();\n\t\t\t\n\t\t\twhile ( tempInt1 != 0 | tempInt2 != 0 ) {\n\t\t\t\t\n\t\t\t\tdata.add( new Time ( tempInt1, tempInt2 ) );\n\t\t\t\t\n\t\t\t\ttempInt1 = scanConsole.nextInt();\n\t\t\t\ttempInt2 = scanConsole.nextInt();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void computeMaxMeetingOfDay ( ArrayList < Time >  meetingTimes ) {\n\t\t\n\t\tString temp = \"\";\n\t\tint max = 0, tempSize = 0;\n\t\tint numOfMeetings = meetingTimes.size();\n\t\t\n\t\tfor (int i = 0; i < Math.pow(2, numOfMeetings); i++) {\n\t\t\t\n\t\t\ttemp = Integer.toBinaryString(i);\n\t\t\t\n\t\t\tif ( temp.length() < numOfMeetings ) {\n\t\t\t\t\n\t\t\t\tint k = numOfMeetings-temp.length();\n\t\t\t\twhile ( k != 0 ) {\n\t\t\t\t\t\n\t\t\t\t\ttemp = \"0\" + temp;\n\t\t\t\t\tk--;\n\t\t\t\t}\t\n\t\t\t}\n\t\t\t\n\t\t\tfor (int j = 0; j < temp.length(); j++)\t{\n\t\t\t\t\n\t\t\t\tmeetingTimes.get(j).state = false;\n\t\t\t\tif ( temp.charAt(j) == '1' ) { meetingTimes.get(j).state = true; tempSize++; }\n\t\t\t}\n\t\t\t\n\t\t\tboolean overLap = false;\n\t\t\t\n\t\t\toverLap = checkOverLapping ( meetingTimes );\n\t\t\tif ( overLap == false ) \n\t\t\t\tif ( tempSize > max ) max = tempSize;\n\t\t\t\n\t\t\ttempSize = 0;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tSystem.out.println( max );\n\t}\n\t\n\tprivate static boolean checkOverLapping ( ArrayList <Time> tempArray ) {\n\t\t\n\t\tboolean result = false;\n\t\t\n\t\tfor (int i = 0; i < tempArray.size(); i++) {\n\t\t\tif ( tempArray.get(i).state == false ) continue;\n\t\t\t\n\t\t\tfor (int j = 0; j < tempArray.size(); j++) {\n\t\t\t\tif ( tempArray.get(j).state == false ) continue;\n\t\t\t\t\n\t\t\t\tif ( i == j ) continue;\n\t\t\t\t\n\t\t\t\tif ( tempArray.get(i).getStartTime() < tempArray.get(j).getStartTime() && tempArray.get(j).getStartTime() < tempArray.get(i).getEndTime() ||\n\t\t\t\t\t tempArray.get(i).getStartTime() < tempArray.get(j).getEndTime() && tempArray.get(j).getEndTime() < tempArray.get(i).getEndTime() ||\n\t\t\t\t\t tempArray.get(i).getStartTime() > tempArray.get(j).getStartTime() && tempArray.get(j).getEndTime() > tempArray.get(i).getStartTime() ||\n\t\t\t\t\t tempArray.get(i).getEndTime() > tempArray.get(j).getStartTime() && tempArray.get(j).getEndTime() > tempArray.get(i).getEndTime() ||\n\t\t\t\t\t tempArray.get(i).getStartTime() == tempArray.get(j).getStartTime() && tempArray.get(j).getEndTime() == tempArray.get(i).getEndTime() ) \t\t\t\t\n\t\t\t\t{ result = true; break; }\n\t\t\t}\t\t\t\t\n\t\t\tif ( result == true ) break;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\treturn result;\n\t}\n\t\t\t\t\t\n}\n", "score": 1.0}
{"id": "SHARE_1_1006_79__1_1006_96", "golden_code": "import java.util.Scanner;\n\n\nclass Main {\n\tpublic static void main(String[] args) {\n\t        float len,sum=0;\n\t        int count=1;\n\t        Scanner cin = new Scanner(System.in);\n\t        while (cin.hasNext()){\n\t        \tlen=cin.nextFloat();\n\t            if(len==0)\n\t        \t    return;\n\t        \twhile(sum<len){\n\t        \t\tcount++;\n        \t        sum+=1/(count*1.00);\n\t        \t}\n\t        \tcount--;\n\t        \tSystem.out.println(count+\" card(s)\");\n\t        \tsum=0;\n\t        \tcount=1;\n\t        }\n\t        cin.close();\n\t            \n\t    }\n\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while(true){\n            double input = in.nextDouble();\n            if (input == 0){\n                break;\n            }\n            int counter = 0;\n            double sum = 0;\n            while (sum < input){\n                sum += (1.0 / (++counter + 1));\n            }\n            System.out.println(counter+\" card(s)\");\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1565_11__1_106015_29", "golden_code": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\npublic class Main{\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tBufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(input.readLine());\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint[] a = new int[Integer.parseInt(input.readLine())];\n\t\t\tString s = input.readLine();\n\t\t\tString[] b = s.split(\" \");\n\t\t\tfor (int j = 0; j < a.length; j++) {\n\t\t\t\ta[j] = Integer.parseInt(b[j]);\n\t\t\t}\n\t\t\tArrays.sort(a);\n\t\t\tint max = 0;\n\t\t\tfor (int j = 0; j < a.length; j++) {\n\t\t\t\tif (a[j] * (a.length - j) > max) {\n\t\t\t\t\tmax = a[j] * (a.length - j);\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(max);\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.math.BigInteger;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\tstatic Scanner cin=new Scanner(System.in);\n    static BigInteger[] data;\n    final static BigInteger two=new BigInteger(\"2\");\n    final static BigInteger negone=new BigInteger(\"-1\");\n    \n\tstatic BigInteger f (BigInteger n)\n\t{\n\t\t\n\t\tif(data[n.intValue()].compareTo(BigInteger.ZERO)>=0)\n        {\n            return data[n.intValue()];\n        }\n\t\telse{\n\t\tif(n.mod( new BigInteger(\"2\") ).equals(new BigInteger(\"1\")) )\n\t\t{\n\t\tBigInteger m = new BigInteger( \"2\" ) ; \n\t\tBigInteger fnm = f(n.subtract(new BigInteger(\"1\"))) ; \n\t\tfnm = fnm.multiply(m) ;\n\t\tBigInteger one = new BigInteger(\"1\") ; \n\t    fnm =\tfnm.subtract(one) ;\n\t\t\treturn  data[n.intValue()] = fnm ;\n\t\t}else\n\t\tif(n.mod( new BigInteger(\"2\") ).equals(new BigInteger(\"0\") ))\n\t\t{\n\t\t\tBigInteger m = new BigInteger( \"2\" ) ; \n\t\t\tBigInteger fnm =  f(n.subtract(new BigInteger(\"1\"))) ; \n\t\tfnm = \tfnm.multiply(m) ;\n\t\t\tBigInteger one = new BigInteger(\"-1\") ; \n\t\tfnm=\tfnm.subtract(one) ;\n\t\t\t\treturn data[n.intValue()] = fnm ;\n\t\t\t}\n\t}\n\t\treturn null ;\n\t\t}\n\tpublic static void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tdata=new BigInteger [1001];\n        Arrays.fill(data,negone);\n        data[1]=BigInteger.ONE;\n        data[0]=BigInteger.ZERO;\n        data[2]=BigInteger.ONE;\n\t\t\tInteger n;\n\t\t\twhile (in.hasNext())\n\t\t\t{\n\t\t\t\tn = in.nextInt(); \n\t\t\t\tBigInteger bn = new BigInteger(n.toString()) ; \n\t\t\t\tif(n==1)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(0);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(f(bn));\n\t\t\t}\n//\t\t\t\t\t cout <<f(n)<<endl;\n\t\t\treturn ;\n\t\t}\n}", "score": 0.0}
{"id": "SHARE_1_1241_10__1_1009_33", "golden_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        while (s.hasNext()) {\n            int n = s.nextInt();\n            ArrayList<Rect> arrlist = new ArrayList<Rect>();\n            Bst set = new Bst();\n            for (int i = 0; i < n; i++) {\n                arrlist.add(new Rect(s.nextInt(), s.nextInt(), s.nextInt(), s.nextInt()));\n            }\n            Rect[] rectarr = arrlist.toArray(new Rect[0]);\n            Arrays.sort(rectarr, new comp());\n            Node root = new Node(rectarr[0], null, null, null);\n            for(int i=1;i<n;i++){\n                set.BST_Insert(root, rectarr[i]);\n            }\n            System.out.println(set.count(root));\n        }\n    }\n}\n\nclass comp implements Comparator<Rect>{\n\n    @Override\n    public int compare(Rect o1, Rect o2) {\n        if((o1.xmax-o1.xmin)*(o1.ymax-o1.ymin) < (o2.xmax-o2.xmin)*(o2.ymax-o2.ymin))\n            return 1;\n        else if((o1.xmax-o1.xmin)*(o1.ymax-o1.ymin) > (o2.xmax-o2.xmin)*(o2.ymax-o2.ymin))\n            return -1;\n        else\n            return 0;\n    }\n    \n} \nclass Rect implements Comparable<Rect> {\n\n    int xmin, xmax, ymin, ymax;\n\n    public Rect(int xmin, int xmax, int ymin, int ymax) {\n        this.xmin = xmin;\n        this.xmax = xmax;\n        this.ymin = ymin;\n        this.ymax = ymax;\n    }\n\n    @Override\n    public int compareTo(Rect o) {\n        if (xmin >= o.xmin && xmax <= o.xmax && ymin >= o.ymin && ymax <= o.ymax) {\n            return -1;\n        } else {\n            return 1;\n        }\n    }\n}\n\nclass Bst {\n\n    public void BST_Insert(Node p, Rect x) {\n        Node n = new Node(x, null, null, null);\n        Node prep = null;\n        Node r = p;\n        while (r != null) {\n            prep = r;\n            if (x.compareTo(r.element) == -1) {\n                r = r.left;\n            } else if (x.compareTo(r.element) == 1) {\n                r = r.right;\n            }\n        }\n        n.parent = prep;\n        if (prep == null) {\n            r = n;\n        } else if (x.compareTo(prep.element) == -1) {\n            prep.left = n;\n        } else {\n            prep.right = n;\n        }\n    }\n\n    public int count(Node root) {\n        int count = 0;\n        Node r = root;\n        while (r != null) {\n            if (r.left != null) {\n                count += countTree(r.left);\n                if (r.element.xmin == r.left.element.xmin && r.element.xmax == r.left.element.xmax\n                        && r.element.ymin == r.left.element.ymin && r.element.ymax == r.left.element.ymax) {\n                    count++;\n                }\n            }\n            r = r.right;\n        }\n        return count;\n    }\n\n    public int countTree(Node root) {\n        if (root == null) {\n            return 0;\n        }\n        if (root.left == null && root.right == null) {\n            return 1;\n        }\n        return countTree(root.left) + countTree(root.right) + 1;\n    }\n}\n\nclass Node {\n\n    Node left;\n    Node right;\n    Node parent;\n    Rect element;\n\n    public Node(Rect element, Node left, Node right, Node parent) {\n        this.left = left;\n        this.right = right;\n        this.parent = parent;\n        this.element = element;\n    }\n\n    public Node() {\n        this(null, null, null, null);\n    }\n}", "generated_code": "import java.util.*;\nimport java.text.*;\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner w=new Scanner(System.in);\n\t\tdouble[] a=new double[12];\n\t\tdouble s=0;\n\t\tfor(int q=0;q<12;q++){\n\t\t\ta[q]=w.nextDouble();\n\t\t\ts+=a[q];\n\t\t}\n\t\ts/=12;\n\t\tDecimalFormat n = new DecimalFormat(\"#.##\");\n\t\tdouble x =  Double.valueOf(n.format(s));\n\t\tSystem.out.println(\"$\"+x);\n\t\t\n\t}\n}\n\n\n\n\n", "score": 0.0}
{"id": "SHARE_1_1001_128__1_1001_103", "golden_code": "import java.util.*;\n\npublic class Main{\n    public static void main(String [] args){\n        Scanner stdin = new Scanner(System.in);\n        while(true){\n            String [] s = stdin.nextLine().split(\" \");\n            System.out.println(Integer.parseInt(s[0])+Integer.parseInt(s[1]));\n        }\n        \n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main(String[] arqs)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\tint a = 0;\n\t\tint b = 0;\n\t\tint c = 0;\n\t\twhile(scan.hasNext())\n\t\t{\n\t\t\ta = scan.nextInt();\n\t\t\tb = scan.nextInt();\n\t\t\tc = a+b;\n\t\t\tSystem.out.println(c);\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_109016_0__1_109016_10", "golden_code": "import com.sun.org.apache.bcel.internal.generic.NEW;\nimport sun.misc.Sort;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.lang.reflect.Array;\nimport java.util.*;\n\nimport static java.lang.System.*;\n\n/**\n * Created by IntelliJ IDEA.\n * User: User\n * Date: 10/18/12\n * Time: 9:42 AM\n * To change this template use File | Settings | File Templates.\n */\n\npublic class Main {\n    static double distant(toy t1, toy t2)\n    {\n        return (t1.x-t2.x)*(t1.x-t2.x)+(t1.y-t2.y)*(t1.y-t2.y);\n    }\n    static void merge_sort(List<toy>t1,int i)\n    {\n        if(i==0)\n        {\n\n        }\n    }\n  static double closestPair(List<toy>p,List<toy>q){\n      if(p.size()==3)\n      {\n          double d1,d2,d3;\n           d1=distant(p.get(0),p.get(1));\n          d2=distant(p.get(0),p.get(2));\n          d3=distant(p.get(2),p.get(1)); //System.out.println(d1); System.out.println(d2); System.out.println(d3);\n          if(d1<=d2&&d1<=d3)\n              return d1;\n          else  if(d2<=d1&&d2<=d3)\n              return d2;\n          else return  d3;\n      }\n        if(p.size()==2)\n        {\n            return distant(p.get(0),p.get(1));\n        }\n\n        if(p.size()==1){return 0;}\n\n      ArrayList<toy>s=new ArrayList<toy>();\n\n       int i,k,num;\n      double m;\n      double dl,dr,d;\n      int half=(p.size()%2==0)?p.size()/2:(p.size()/2+1);\n       dl=closestPair( p.subList(0,half),q.subList(0,half));\n      dr=closestPair(p.subList(half,p.size()),p.subList(half,q.size()));\n      double dminsq=(dr>dl)?dl:dr;\n      d=Math.sqrt(dminsq);\n       m=p.get(half-1).x;\n      for(i=0;i<q.size();i++)\n      {\n          if(q.get(i).x-m<d||m-q.get(i).x<d)\n              s.add(q.get(i));\n      }\n       num=s.size();\n      for(i=0;i<num-1;i++)\n      {\n         k=i+1;\n          while(k<=num-1&&Math.pow(s.get(k).y-s.get(i).y,2)<dminsq) {\n              dminsq=(distant(s.get(k), s.get(i))>=dminsq?dminsq:distant(s.get(k), s.get(i)));k++;\n      }       }\n      return dminsq;}\n\n\n\n\n\n    public static void main(String []args) throws IOException {\n       int num,i;  Main m=new Main();\n        double x,y;\n        BufferedReader in\n          = new BufferedReader(new InputStreamReader(System.in));\n\n       List<toy>toys=new ArrayList<toy>();\n       //  Scanner in=new Scanner(System.in);\n        String input,in1,in2;\n        while(true)\n        {\n           input=in.readLine();\n           num=Integer.parseInt(input);\n            if(num==0)\n                return;\n\n            for(i=0;i<num;i++)\n            {\n               input=in.readLine();\n                in1=input.substring(0,input.indexOf(' '));\n                in2=input.substring(input.indexOf(' ')+1,input.length());\n           x=Double.parseDouble(in1);\n\n           y=Double.parseDouble(in2);\n\n               toys.add(new toy(x,y));\n\n            }\n\n         List<toy> p=new ArrayList<toy>();\n       Collections.sort(toys,new xSort());\n            p=toys;\n\n      Collections.sort(toys, new ySort());\n           // q=toys;\n                  // System.get\n             System.out.printf(\"%.2f\\n\",Math.sqrt(closestPair(p,toys))/2);\n\n            toys.clear();\n        }\n\n    }\n\n      static class toy  {\n    double x;\n    double y;\n    toy(double a,double b){\n        x=a;y=b;\n    }}\n\n\n    static class xSort  implements Comparator<toy> {\n\n    public int compare(toy t1, toy t2) {\n\n\t\tif(t1.x<t2.x)return -1;\n         if(t1.x>t2.x)return 1;\n\n\t\t//ascending order\n\t\treturn 0;\n}\n\n}\n\n\n\n\n   static class ySort  implements Comparator<toy> {\n\n    public int compare(toy t1, toy t2) {\n\n\t\tif(t1.y<t2.y)return -1;\n         if(t1.y>t2.y)return 1;\n\n\t\t//ascending order\n\t\treturn 0;\n}\n\n}\n}\n", "generated_code": "\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Vector;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        boolean checkWhile = true;\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        int n,i,j;\n        double closestDistanse, radius;\n\n\n        while(checkWhile){\n            n = Integer.parseInt(in.readLine());\n            if(n<=0)\n                break;\n            double[] dbX = new double[n];\n            double[] dbY = new double[n];\n            int[] indexX = new int[n];\n            int[] indexY = new int[n];\n            point[] array =new point[n];\n            point[] xArray =new point[n];\n//            point[] yArray = new point[n];\n            for(i=0; i<n; i++){\n                array[i] = new point();\n                xArray[i] = new point();\n//                yArray[i] = new point();\n            }\n            String[] str;\n            for(i=0; i<n; i++){\n                str = in.readLine().split(\"\\\\s+\");\n                dbX[i] = Double.parseDouble(str[0]);\n                array[i].x = dbX[i];\n                dbY[i] = Double.parseDouble(str[1]);\n                array[i].y = dbY[i];\n                indexX[i] = i;\n  //              indexY[i] = i;\n            }\n\n            quicksort(dbX, indexX);\n//            quicksort(dbY, indexY);\n            for(i=0; i<n; i++){\n                xArray[i]=array[indexX[i]];\n//                yArray[i]=array[indexY[i]];\n            }\n\n//            for(int t=0; t<xArray.length; t++){\n//               System.out.println(\"t,x,y:\"+t+\",\"+xArray[t].x+\",\"+xArray[t].y);\n//            }\n //********************          end of sorting         ************************\n            closestDistanse = divideClosestPair(xArray, 0, n-1);\n            radius = closestDistanse/2;\n            System.out.printf(\"%.2f\\n\", radius);\n        }\n    }\n\n    static double divideClosestPair(point[] xSorted, int i, int j){\n     //   System.out.println(\"i,j are:\"+i+\",\"+j);\n        double dis;\n        if(i >= j)\n            return Double.MAX_VALUE;\n\n        int k,t;\n        double temp = Double.MAX_VALUE;\n        double tempDouble;\n        if(j-i < 3){\n            for(k=i; k<j; k++){\n                for(t=k+1; t<=j; t++){\n                    tempDouble = distance(xSorted[k], xSorted[t]);\n                    if(tempDouble < temp)\n                        temp = tempDouble;\n                }\n            }\n            return temp;\n        }\n        double d1,d2,d;\n/*\n        int midK=Integer.MAX_VALUE;\n        \n     //   System.out.println(\"@:\"+(xSorted[i].x+((xSorted[j].x - xSorted[i].x)/2)));\n        double mid = xSorted[i].x + ((xSorted[j].x - xSorted[i].x)/2);\n        for(k=i; k<=j; k++){\n            if(xSorted[k].x >= mid){\n                midK = k;\n   //             System.out.println(\"ZERO BREAK\"+midK);\n                break;\n            }\n        }\n*/\n\n        int midK = (i+j)/2;\n        //System.out.println(\"i,midk:\"+i+midK);\n        double midmid;\n        d1=divideClosestPair(xSorted, i, midK);\n        d2 = divideClosestPair(xSorted, midK+1, j);\n        d=Math.min(d1, d2);\n        //System.out.println(\"d is:\"+d);\n        midmid=d;\n\n\n        //doing copy midpoints\n        Vector<Integer> ind = new Vector<Integer>();\n        for(k=i; k<=j; k++){\n            if((xSorted[k].x >= (xSorted[midK].x-d)) && (xSorted[k].x <= (xSorted[midK].x+d))){\n                ind.addElement(k);\n            }\n        }\n\n        if(!ind.isEmpty()){\n            int v = ind.firstElement();\n            int w = ind.lastElement();\n            point[] midPoints = new point[w-v+1];\n            for(t=0; t<midPoints.length; t++){\n                midPoints[t] = new point();\n            }\n     //System.out.println(\"length of midpoints , xsorted are:\"+\"#\"+midPoints.length+\"@\"+xSorted.length);\n            for(k=v,t=0; k<=w; k++,t++){\n                midPoints[t].x = xSorted[k].x;\n                midPoints[t].y = xSorted[k].y;\n            }\n\n            //\n            //here  write code to sort midPoint according to y\n            double[] td = new double[midPoints.length];\n            int[] indx = new int[midPoints.length];\n            for(k=0; k<midPoints.length; k++){\n                td[k] = midPoints[k].y;\n                indx[k]=k;\n            }\n            quicksort(td, indx);\n            point[] ySortedMidpoints= new point[midPoints.length];\n            for(k=0; k<ySortedMidpoints.length; k++){\n                ySortedMidpoints[k] = new point();\n            }\n            for(k=0; k<midPoints.length; k++){\n                ySortedMidpoints[k].x = midPoints[indx[k]].x;\n                ySortedMidpoints[k].y = midPoints[indx[k]].y;\n            }\n            //\n\n//            for(k=0; k < (ySortedMidpoints.length - 1); k++){\n//                System.out.println(\"k,midpoint.y:\"+k+\",\"+ySortedMidpoints[k].y);\n//            }\n\n            for(k=0; k < (ySortedMidpoints.length - 1); k++){\n                t=k+1;//in below line I dont know the ( - ) between yso..ty and yso...ky is true or not\n                while(t<ySortedMidpoints.length && (( ySortedMidpoints[t].y - ySortedMidpoints[k].y) < midmid) ){\n//                    System.out.println(\"ty,ky,midmid:\"+ySortedMidpoints[t].y+\",\"+ySortedMidpoints[k].y+\",\"+midmid);\n                    dis = distance(ySortedMidpoints[k], ySortedMidpoints[t]);\n                    if(dis < midmid)\n                        midmid = dis;\n                    ++t;\n                }\n            }\n        }\n\n        return midmid;\n    }\n\n\n    //calculate distance of two point\n    static double distance(point p1,point p2){\n        double rt=Math.sqrt( ((p2.x - p1.x)*(p2.x - p1.x)) + ((p2.y - p1.y)*(p2.y - p1.y)) );\n//        System.out.println(\"rt is:\"+rt);\n        return rt;\n    }\n\n//&&&&&&&&&&&&              sortin functions           &&&&&&&&&&&&&&&&&&&&&&&&&\n\n    static void quicksort(double[] main, int[] index) {\n    quicksort(main, index, 0, index.length - 1);\n}\n\n// quicksort a[left] to a[right]\nstatic void quicksort(double[] a, int[] index, int left, int right) {\n    if (right <= left) return;\n    int i = partition(a, index, left, right);\n    quicksort(a, index, left, i-1);\n    quicksort(a, index, i+1, right);\n}\n\n// partition a[left] to a[right], assumes left < right\nprivate static int partition(double[] a, int[] index,\nint left, int right) {\n    int i = left - 1;\n    int j = right;\n    while (true) {\n        while (less(a[++i], a[right]))      // find item on left to swap\n            ;                               // a[right] acts as sentinel\n        while (less(a[right], a[--j]))      // find item on right to swap\n            if (j == left) break;           // don't go out-of-bounds\n        if (i >= j) break;                  // check if pointers cross\n        exch(a, index, i, j);               // swap two elements into place\n    }\n    exch(a, index, i, right);               // swap with partition element\n    return i;\n}\n\n// is x < y ?\nprivate static boolean less(double x, double y) {\n    return (x < y);\n}\n\n// exchange a[i] and a[j]\nprivate static void exch(double[] a, int[] index, int i, int j) {\n    double swap = a[i];\n    a[i] = a[j];\n    a[j] = swap;\n    int b = index[i];\n    index[i] = index[j];\n    index[j] = b;\n}\n\n\n}\n\n\nclass point {\n    double x;\n    double y;\n}\n", "score": 1.0}
{"id": "SHARE_1_2583_3__1_106012_28", "golden_code": "import java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.BufferedReader;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.io.InputStream;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t\tString str[]=new String[100];\n\t\tstr[0]=\"\";\n\t\tfor (int i = 0; i < str.length-1; i++) {\n\t\t\tstr[i+1]=str[i]+\"a\";\n\t\t}\n\t}\n}\n\nclass TaskC {\n\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\n\t\tint n = in.nextInt();\n\t\tfor (int l = 0; l < n; l++) {\n\t\t\tboolean check = true;\n\t\t\tint e = in.nextInt(), a[] = new int[e];\n\t\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\t\ta[i] = in.nextInt();\n\t\t\t\tif (check && a[i] != 0) {\n\t\t\t\t\tcheck = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (check) {\n\t\t\t\tout.println(\"ap!\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (e == 1) {\n\t\t\t\tif (a[0] > 0) {\n\t\t\t\t\tout.println(\"*fizzle*\");\n\t\t\t\t} else {\n\t\t\t\t\tout.println(\"*bunny*\");\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tboolean flag[] = new boolean[e];\n\t\t\tint res = 0;\n\t\t\twhile (true) {\n\t\t\t\tboolean ok = false, ok2 = false;\n\t\t\t\tfor (int i = a.length - 1; !flag[i] && i > 0; i--) {\n\t\t\t\t\ta[i] -= a[i - 1];\n\t\t\t\t}\n\t\t\t\tflag[res++] = true;\n\t\t\t\tfor (int i = 0; i < flag.length; i++) {\n\t\t\t\t\tif (!ok2 && i < flag.length - 1) {\n\t\t\t\t\t\tif (!flag[i]) {\n\t\t\t\t\t\t\tok2 = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (a[i] != 0 && !flag[i]) {\n\t\t\t\t\t\tok = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!ok) {\n\t\t\t\t\tfor (int i = 0; i < res; i++) {\n\t\t\t\t\t\tout.print('z');\n\t\t\t\t\t}\n\t\t\t\t\tout.println(\"ap!\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (!ok2) {\n\t\t\t\t\tif (a[a.length - 1] > 0) {\n\t\t\t\t\t\tout.println(\"*fizzle*\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tout.println(\"*bunny*\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass InputReader {\n\tBufferedReader br;\n\tStringTokenizer st;\n\n\tpublic InputReader(InputStream in) {\n\t\tbr = new BufferedReader(new InputStreamReader(in));\n\t\tst = null;\n\t}\n\n\tpublic String next() {\n\t\twhile (st == null || !st.hasMoreTokens()) {\n\t\t\ttry {\n\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn st.nextToken();\n\t}\n\n\tpublic int nextInt() {\n\t\treturn Integer.parseInt(next());\n\t}\n\n\tpublic long nextLong() {\n\t\treturn Long.parseLong(next());\n\t}\n\n\tpublic double nextDouble() {\n\t\treturn Double.parseDouble(next());\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args)\n    {\n\tScanner scan = new Scanner(System.in);\n\t\t\n\tint turkeys;\t\n\tint a=scan.nextInt();\n\tint[] array = new int[5];\n\tint num;\n\t\t\n\twhile(a-->0)\n\t{\n            int i=9;\n            int j;\n            num=0;\n\t\t\n            turkeys= scan.nextInt();\n\t\t\t\n            array[1]=scan.nextInt();\n            array[2]=scan.nextInt();\n            array[3]=scan.nextInt();\n\t\t\t\n            for(; i>0 ; i--)\n            {\n\t\tj=9;\n\t\t\t\t\n                for(; j>=0 ; j--)\n\t\t{\n                    array[0]=i;\n                    array[4]=j;\n\t\t\t\t\t\n                    num= array[0]*10000 + array[1]*1000+ array[2]*100+ array[3]*10 + array[4];\n\t\t\t\t\t\n                    if(num % turkeys == 0)\n                    {\n\t\t\tSystem.out.println( i + \" \" + j + \" \" +num/turkeys);\n                        break;\n                    }\n                }\n\t\t\t\n\t\tif(num % turkeys == 0)\n                    break;\n\t\t\t\n\t\tif( i==1 && num % turkeys != 0  )\n                    System.out.println(\"0\");\n\t\t\t\t\n            }\n\t}\t\t\t\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_469__1_106021_17", "golden_code": "/* @JUDGE_ID:  2003  ???  Java  \"???\" */\n/* @BEGIN_OF_SOURCE_CODE */ \n\nimport java.util.Scanner;\n     \npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner cin = new Scanner(System.in);\n\t\tint a,b;\n\t\twhile(cin.hasNext()){\n                    a = cin.nextInt();\n                    b = cin.nextInt();\n                    System.out.println(a+b);\n                }\n\t\t              \n\t\n\t}\n}\n\t\n/* @END_OF_SOURCE_CODE */ ", "generated_code": "import java.util.*;\n\nclass Main {\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tString t;\n\t\tint n = s.nextInt();\n\t\tint c;\n\t\tint r;\n\t\tint m;\n\t\twhile (n != -1) {\n\t\t\tm=0;\n\t\t\tr=0;\n\t\t\tt = \"\";\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tc = s.nextInt();\n\t\t\t\tt += v(c);\n\t\t\t}\n\t\t\tfor(int i=0;i<(n/7)*16;i++){\n\t\t\t\tfor(int j=0;j<6;j++){\n\t\t\t\t\tr+=Character.getNumericValue(t.charAt(7*i+j+1))*Math.pow(2, 5-j);\n\t\t\t\t}\n\t\t\t\tif(t.charAt(7*i)=='1')\n\t\t\t\t\tr=-r;\n\t\t\t\tm+=r;\n\t\t\t\tr=0;\n\t\t\t}\n\t\t\tSystem.out.println(m);\n\t\t\tn=s.nextInt();\n\t\t}\n\t}\n\n\tpublic static String v(int a) {\n\t\tString s = \"\";\n\t\tint[] q = new int[16];\n\t\tfor (int i = 0; i < 16; i++) {\n\t\t\tq[i] = a % 2;\n\t\t\ta /= 2;\n\t\t}\n\t\tfor (int i = q.length - 1; i >= 0; i--) {\n\t\t\ts += q[i];\n\t\t}\n\t\treturn s;\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1208_39__1_1208_17", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int tc1 = in.nextInt();\n        String s = \"\", l = \"\", m = \"\";\n        while (tc1 > 0) {\n            int tc2 = in.nextInt();\n            String[] str = new String[tc2];\n            while (tc2 > 0) {\n                int w = 0;\n                l = in.next();\n                m += l;\n                m += in.nextLine();\n                str = m.split(\" \");\n                char[] ch;\n                for (int k = 0; k < str.length; k++) {\n                    ch = str[k].toCharArray();\n                    w = k;\n                    if (k > 0) {\n                        s += \" \";\n                    }\n                    for (int j = ch.length - 1; j >= 0; j--) {\n                        s += ch[j];\n                    }\n\n                }\n                if (tc2 == 1) {\n                    System.out.println(s);\n                } else {\n                    System.out.println(s);\n                    s = \"\";\n                    m = \"\";\n                    l = \"\";\n                }\n                s = \"\";\n                m = \"\";\n                l = \"\";\n                tc2--;\n\n            }\n            tc1--;\n            if (tc1 > 0) {\n                System.out.println(\"\");\n            }\n        }\n    }\n\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n\npublic static void main(String[] args) {\n     Scanner input = new Scanner(System.in);\n     int number, test, g, b;\n     test = input.nextInt();\n     input.nextLine();\n     while (test-- > 0) {\n        number = input.nextInt();\n        input.nextLine();\n        String str[] = new String[number];\n        for (int i = 0; i < number; i++) {\n            str[i] = input.nextLine();\n            int first = 1;\n            for (String part : str[i].split(\" \")) {\n                if (first == 1) first = 0;\n                else System.out.print(\" \");\n                System.out.print(new StringBuilder(part).reverse().toString()); \n            }\n            System.out.println();\n\n        }\n        if (test != 0)\n            System.out.println();\n       }\n   }\n}", "score": 1.0}
{"id": "SHARE_5_1003_51__5_1003_15", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main{\n    public static boolean square(int n){\n        int i=1;\n        for(;;){\n            if(n<0) return false;\n            else if(n==0) return true;\n            n-=i;\n            i+=2;\n        }    \n    }\n    public static int comb(int s,int t,ArrayList<int []> num){\n        int[] sol=new int[num.size()];\n        int[] mysol=new int[num.size()];\n        int[][] M;\n        M=new int[s+1][t+1];\n        for (int j=0;j<=s;j++)\n            for (int k=0;k<=t;k++){\n                if(j==0 && k==0){M[j][k]=1;continue;}\n                for(int i=0;i<num.size();i++){\n                    if(j>=num.get(i)[0] && k>=num.get(i)[1])\n                        sol[i]=M[j-num.get(i)[0]][k-num.get(i)[1]];\n                    else sol[i]=0;\n                }\n        for(int i=0;i<num.size();i++){\n            if(j>=num.get(i)[0] && k>=num.get(i)[1] & sol[i]!=0)\n                mysol[i]=1+sol[i];\n            else mysol[i]=0;\n        }\n        M[j][k]=1000;\n        for ( int i = 0; i < num.size(); i++ )\n          if ( mysol[i] < M[j][k] && mysol[i]!=0 )\n              M[j][k] = mysol[i];\n        M[j][k]=M[j][k]==1000?0:M[j][k];\n            }\n        return M[s][t];\n\n    }\n    \n    \n    \n    public static void main(String[] args) {\n        Scanner sc =new Scanner(System.in);\n        int t=sc.nextInt(),i,k,sol;\n        while(t>0){\n        int m=sc.nextInt(),S=sc.nextInt();\n        ArrayList<int[]> num=new ArrayList<int[]>();\n        for(i=0;i<m;i++){\n            num.add(new int[]{sc.nextInt(),sc.nextInt()});\n        } \n        ArrayList<Integer> s=new ArrayList<Integer>();\n        for (i=0;i<S+1;i++){\n            k=S*S-i*i;\n            if(square(k)) s.add(i);\n        }\n        int[] ans=new int[s.size()];\n        for (i=0;i<s.size();i++)\n            ans[i]=comb(s.get(i),s.get(s.size()-i-1),num);\n        sol=1000;\n        for (i=0;i<ans.length;i++)\n            if(ans[i]<sol & ans[i]>0) sol=ans[i];\n        if(sol==1000) System.out.println(\"not possible\");\n        else System.out.println(sol-1); \n        t--;\n    }\n    }\n    \n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tMain m = new Main();\n\t\tm.exec();\n\t}\n\t\n\tpublic static final int INF = Integer.MAX_VALUE;\n\tpublic static final int MAX_S = 301;\n\t\n\tprivate void makeZero (int[][] coins)\n\t{\n\t\tfor(int i=0;i<MAX_S;i++)\n\t\t\tfor(int j=0;j<MAX_S;j++)\n\t\t\t\tcoins[i][j] = 0;\n\t}\n\n\tprivate int findMin(int[][] coins , int s)\n\t{\n\t\tint min = INF;\n\t\t\n\t\tfor(int i=0;i<MAX_S;i++)\n\t\t\tfor(int j=0;j<MAX_S;j++)\n\t\t\t\tif(coins[i][j]<min && (i*i+j*j)==(s*s) && coins[i][j]!=0)\n\t\t\t\t\tmin = coins[i][j];\n\t\treturn min;\n\t}\n\t\n\tprivate void fillCoins(int s , int[] x_val , int[] y_val , int[][] coins)\n\t{\n\t\tfor(int i=0;i<=s;i++)\n\t\t{\n\t\t\tfor(int j=0;j<=s;j++)\n\t\t\t{\n\t\t\t\tArrayList<Integer> tmp = new ArrayList<Integer>();\n\t\t\t\t\n\t\t\t\tfor(int k=0;k<x_val.length;k++)\n\t\t\t\t\tif( (i-x_val[k]>=0) && (j-y_val[k]>=0) )\n\t\t\t\t\t\tif( !(coins[i-x_val[k]][j-y_val[k]] == 0 && (i!=x_val[k] || j!=y_val[k])) )\n\t\t\t\t\t\t\ttmp.add(coins[i-x_val[k]][j-y_val[k]] + 1);\n\t\t\t\t\n\t\t\t\tint tmp_min = INF;\n\t\t\t\tfor(int k=0;k<tmp.size();k++)\n\t\t\t\t\tif(tmp.get(k)<tmp_min)\n\t\t\t\t\t\ttmp_min = tmp.get(k);\n\t\t\t\tif(tmp_min!=INF)\n\t\t\t\t\tcoins[i][j] = tmp_min;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void exec()\n\t{\n\t\tScanner cin = new Scanner(System.in);\n\t\tint n = cin.nextInt();\n\t\t\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tint m = cin.nextInt();\n\t\t\tint s = cin.nextInt();\n\t\t\tint[][] coins = new int [MAX_S][MAX_S];\n\t\t\tmakeZero(coins);\n\t\t\n\t\t\tint[] x_val = new int[m];\n\t\t\tint[] y_val = new int[m];\n\t\t\t\n\t\t\tint min = INF;\n\t\t\t\t\n\t\t\tfor(int j=0;j<m;j++)\n\t\t\t{\n\t\t\t\tx_val[j] = cin.nextInt();\n\t\t\t\ty_val[j] = cin.nextInt();\n\t\t\t}\n\t\t\t\n\t\t\tfillCoins(s,x_val,y_val,coins);\n\t\t\t\n\t\t\tmin = findMin(coins,s);\n\t\t\t\n\t\t\tif(min==INF)\n\t\t\t\tSystem.out.println(\"not possible\");\n\t\t\telse\n\t\t\t\tSystem.out.println(min);\n\t\t}//end for i\n\t}\t\n}\n", "score": 1.0}
{"id": "SHARE_1_1959_45__1_1959_55", "golden_code": "import java.util.*;\n \nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner scan=new Scanner(System.in);\n\t\tint n=0;\n\t\twhile(scan.hasNextInt()){\n\t\t\tint c=0;\n\t\t\tn=scan.nextInt();\n\t\t\tint[] a=new int[n];\n\t\t\tfor(int q=0;q<n;q++)\n\t\t\t\ta[q]=scan.nextInt();\n\t\t\tfor(int q=0;q<n-1;q++){\n\t\t\t\tif(a[q]==a[q+1]){\n\t\t\t\t\tc++;\n\t\t\t\t\ta[q+1]=replace(a[q+1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(c<n-c)\n\t\t\t\tSystem.out.println(c);\n\t\t\telse\n\t\t\t\tSystem.out.println(n-c);\n\t\t}\n\t}\n\tpublic static int replace(int a){\n\t\tif(a==0)\n\t\t\ta=1;\n\t\telse\n\t\t\ta=0;\n\t\treturn(a);\n\t}\n}", "generated_code": "import java.util.* ;\nimport java.lang.* ;\nclass Main\n{\n\t\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner (System.in) ;\n\t\twhile ( scan.hasNextInt() )\n\t\t{\n\t\t\tint n = scan.nextInt() ;\n\t\t\tint [] array = new int [n] ;\n\t\t\tfor ( int i=0 ; i<n ; i++ ) {\n\t\t\t\tarray[i] = scan.nextInt() ;\n\t\t\t}\n\t\t\tint counter=0 ;\n\t\t\tint counter1=0 ;\n\t\t\tfor ( int i=0 ; i<n ; i++ ) {\n\t\t\t\tif ( i%2 == 0 ) {\n\t\t\t\t\tif ( array[i] == 0 ) {\n\t\t\t\t\t\tcounter++ ;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif ( array[i] == 1 ) {\n\t\t\t\t\t\tcounter++ ;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( i%2 == 0 ) {\n\t\t\t\t\tif ( array[i] == 1 ) {\n\t\t\t\t\t\tcounter1++ ;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif ( array[i] == 0 ) {\n\t\t\t\t\t\tcounter1++ ;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif ( counter > counter1 ) {\n\t\t\t\tSystem.out.println( counter1 ) ;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSystem.out.println( counter ) ;\n\t\t\t}\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1392_23__1_1006_79", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static int rev(int a){\n        int m=0;\n        while(a>0){\n            m=m*10+(a%10);\n            a/=10;\n        }\n        return m; \n}\n    public static void main(String[] args){\n        Scanner input=new Scanner(System.in);  \n        int n=input.nextInt();\n        int a,b;        \n        while(n-->0){\n            a=input.nextInt();\n            b=input.nextInt();\n          System.out.println((rev(rev(a)+rev(b))));\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\n\nclass Main {\n\tpublic static void main(String[] args) {\n\t        float len,sum=0;\n\t        int count=1;\n\t        Scanner cin = new Scanner(System.in);\n\t        while (cin.hasNext()){\n\t        \tlen=cin.nextFloat();\n\t            if(len==0)\n\t        \t    return;\n\t        \twhile(sum<len){\n\t        \t\tcount++;\n        \t        sum+=1/(count*1.00);\n\t        \t}\n\t        \tcount--;\n\t        \tSystem.out.println(count+\" card(s)\");\n\t        \tsum=0;\n\t        \tcount=1;\n\t        }\n\t        cin.close();\n\t            \n\t    }\n\n}\n", "score": 0.0}
{"id": "SHARE_1_106012_21__1_2226_3", "golden_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args)  {\n\t\t/*BigInteger[][] value = new BigInteger[1001][2];\n\t\tvalue[0][0] = new BigInteger(\"0\");\n\t\tvalue[0][1] = new BigInteger(\"0\");\n\t\tfor(int i = 1 ; i < 1001 ; i++)\n\t\t{\n\t\t\tvalue[i][0] = new BigInteger(\"0\");\n\t\t\tvalue[i][0] = value[i][0].add(value[i - 1][0]);\n\t\t\tvalue[i][0] = value[i][0].add(value[i - 1][1]);\n\t\t\tvalue[i][1] = new BigInteger(\"0\");\n\t\t\tvalue[i][1] = value[i][1].add(value[i - 1][0]);\n\t\t\tvalue[i][1] = value[i][1].add(value[i - 1][1]);\n\t\t\tif(i % 2 == 0)\n\t\t\t{\n\t\t\t\tvalue[i][0] =  value[i][0].add(new BigInteger(\"1\"));\n\t\t\t\n\t\t\t}\n\t\t}\n\t\tScanner s = new Scanner(System.in);\n\t\tint n;\n\t\twhile(s.hasNext())\n\t\t{\n\t\t\tn = s.nextInt();\n\t\t\tSystem.out.println(value[n][0]);\n\t\t}*/\n\t\tScanner s = new Scanner(System.in);\n\t\tint num = s.nextInt();\n\t\twhile(num != 0)\n\t\t{\n\t\t\tnum--;\n\t\t\tint n;\n\t\t\tn = s.nextInt();\n\t\t\tint x , y , z;\n\t\t\tx = s.nextInt();\n\t\t\ty = s.nextInt();\n\t\t\tz = s.nextInt();\n\t\t\tint sum = x * 1000 + y * 100 + z * 10;\n\t\t\tboolean b = false;\n\t\t\tfor(int i = 9 ; i > 0 ; i--)\n\t\t\t{\n\t\t\t\tfor(int j = 9 ; j >= 0 ; j--)\n\t\t\t\t{\n\t\t\t\t\tif((10000 * i + j + sum) % n == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(i + \" \" + j + \" \"+ (10000 * i + j + sum) / n);\n\t\t\t\t\t\tb = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tif(b)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(!b)\n\t\t\t\tSystem.out.println(0);\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.util.*;\nimport java.math.*;\npublic class Main{\n    public static void main(String[] args){\n        Scanner s = new Scanner(System.in);\n        BigInteger a, p, m;\n        int b;\n        String q;\n        while (s.hasNextInt()){\n            b = s.nextInt();\n            if (b==0) break; \n            p = s.nextBigInteger(b);\n            m = s.nextBigInteger(b);\n            a = p.mod(m);\n            q = a.toString(b);\n            System.out.println(q);\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_74__1_1001_176", "golden_code": "import java.util.Scanner;\npublic class Main {\n\n    public static void main(String[] args) {\n        int a,b;\n        Scanner in = new Scanner(System.in);\n        while(in.hasNext()){\n            a=in.nextInt();\n            b=in.nextInt();\n            System.out.println(a+b);\n        }\n    }\n\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) throws Exception{\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2223_6__1_2747_27", "golden_code": "\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int number;\n        String str;\n        ArrayList<String> list = new ArrayList();\n        out:\n        while (true) {\n            number = in.nextInt();\n            if (number == 0) {\n                break;\n            }\n            str = in.next() + \" \" + in.next();\n            if (str.matches(\"right on\")) {\n                for (String list1 : list) {\n                    String[] s = list1.split(\"#\");\n                    int n = Integer.parseInt(s[1]);\n                    if ((n == number && !s[0].matches(\"right on\")) || (n > number && !s[0].matches(\"too high\")) || (n < number && !s[0].matches(\"too low\"))) {\n                        System.out.println(\"Stan is dishonest\");\n                        list.clear();\n                        continue out;\n                    }\n                }\n                System.out.println(\"Stan may be honest\");\n                list.clear();\n                continue;\n            }\n            list.add(str + \"#\" + number);\n        }\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\t\n\t\tboolean lower;\n\t\tboolean upper;\n\t\tboolean num;\n\t\tboolean sym;\n\t\t\n\t\tScanner input=new Scanner(System.in);\n\t\tint n=input.nextInt();\n\t\tString[] inputStr=new String[n];\n\t\tchar[][] splitStr=new char[n][50];\n\t\tint counter[]=new int[n];\n//\t\tchar[] SYM={'!','@','#','$','%','^','&','*','(',')'};\n\t\t\n\t\tfor (int i = 0; i <n; i++) {\n\t\t\t\n\t\t\tinputStr[i]=input.next();\n\t\t\tfor (int j = 0; j < inputStr[i].length(); j++) {\n\t\t\t\tsplitStr[i][j]=inputStr[i].charAt(j);\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tlower=false;\n\t\t\tupper=false;\n\t\t\tnum=false;\n\t\t\tsym=false;\n\t\t\tint length=splitStr[i].length;\n\t\t\tfor (int j = 0; j < length; j++) {\n\t\t\t\t\n\t\t\t\tif(((int)splitStr[i][j]>=97 && (int)splitStr[i][j]<=122)){\n\t\t\t\t\tif(lower==false){\n\t\t\t\t\t\tcounter[i]++;\n\t\t\t\t\t}\n\t\t\t\t\tlower=true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif(((int)splitStr[i][j]>=65 && (int)splitStr[i][j]<=90)){\n\t\t\t\t\tif(upper==false){\n\t\t\t\t\t\tcounter[i]++;\n\t\t\t\t\t}\n\t\t\t\t\tupper=true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif(((int)splitStr[i][j]>=48 && (int)splitStr[i][j]<=57)){\n\t\t\t\t\tif(num==false){\n\t\t\t\t\t\tcounter[i]++;\n\t\t\t\t\t}\n\t\t\t\t\tnum=true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif(splitStr[i][j]=='!' || splitStr[i][j]=='@' || splitStr[i][j]=='#' || splitStr[i][j]=='$' || splitStr[i][j]=='%' || splitStr[i][j]=='^' || splitStr[i][j]=='&' || splitStr[i][j]=='*' ||  splitStr[i][j]=='(' || splitStr[i][j]==')' ){\n\t\t\t\t\tif(sym==false){\n\t\t\t\t\t\tcounter[i]++;\n\t\t\t\t\t}\n\t\t\t\t\tsym=true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif(counter[i]==1){\n\t\t\t\tSystem.out.println(\"very bad\");\n\t\t\t\t\n\t\t\t}\n\t\t\tif(counter[i]==2){\n\t\t\t\tSystem.out.println(\"bad\");\n\t\t\t\t\n\t\t\t}\n\t\t\tif(counter[i]==3){\n\t\t\t\tSystem.out.println(\"good\");\n\t\t\t\t\n\t\t\t}\n\t\t\tif(counter[i]==4){\n\t\t\t\tSystem.out.println(\"overkill\");\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_2713_60__1_2713_90", "golden_code": "import java.util.*;\npublic class Main{\n\tpublic static int f(int n){\n\t\tif(n==1){\n\t\t\treturn 1;\n\t\t}\n\t\tif(n%2==0){\n\t\t\treturn 1 + f(n/2);\n\t\t}\n\t\telse{\n\t\t\treturn 1 + f(3*n+1);\n\t\t}\n\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tint n = sc.nextInt();\n\t\t\tif(n==0)\n\t\t\t\tbreak;\n\t\t\tSystem.out.println(f(n));\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main{\n    static Scanner input=new Scanner(System.in);\n    public static void main(String[] args){\n        int t;\n        while(true){\n            int n=input.nextInt();\n            if(n==0)\n                return;\n            t=1;\n            while(n!=1){\n                if(n%2==0){\n                    n/=2;\n                    t++;\n                }\n                if(n%2!=0 && n>1){\n                    n=3*n+1;\n                    t++;\n                }\n            }\n            System.out.println(t);\n        } \n    }\n}", "score": 1.0}
{"id": "SHARE_1_101329_3__1_106018_22", "golden_code": "import java.math.*;\nimport java.util.Scanner;\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tBigInteger bigInteger;\n\t\tScanner sc = new Scanner(System.in);\n\t\tint T = sc.nextInt();\n\t\twhile(T-- != 0)\n\t\t{\n\t\t\tbigInteger = new BigInteger(sc.next());\n\t\t\tif(bigInteger.isProbablePrime(100))\n\t\t\t\tSystem.out.println(bigInteger.toString());\n\t\t\telse\n\t\t\t\tSystem.out.println(bigInteger.nextProbablePrime());\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main(String[] arqs)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\tint num = 0;\n\t\tint comp = 0;\n\t\twhile(scan.hasNext())\n\t\t{\n\t\t\tcomp = 0;\n\t\t\tnum = scan.nextInt();\n\t\t\tfor(int i=2 ; num > 1 ; i++)\n\t\t\t{\n\t\t\t\tif(num%i == 0)\n\t\t\t\t{\n\t\t\t\t\tnum = num/i;\n\t\t\t\t\tcomp++;\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(comp == 2)\n\t\t\t\tSystem.out.println(\"Yes\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1001_476__1_1001_95", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main (String[] args) {\n        Scanner input = new Scanner (System.in);\n        while (input.hasNextLine ()) {\n                String[] s = input.nextLine ().split (\" \");\n            int a = Integer.parseInt (s [0]);\n            int b = Integer.parseInt (s [1]);\n            System.out.println (a + b);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\n\t\t\tScanner input = new Scanner( System.in);\n\t\t\ttry{\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(input.nextInt() + input.nextInt());\n\t\t\t}\n\t\t\tcatch( Exception e ){}\n\t}\n\n}", "score": 1.0}
{"id": "SHARE_1_1959_25__1_1959_5", "golden_code": "\n\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\n    public static void main(String[] args) {\n        \n        Scanner s = new Scanner(System.in);\n        while (s.hasNext()){\n            int counter0 = 0;\n            int counter1 = 0;\n            int a = s.nextInt();\n            for (int i = 0 ; i<a ; i++){\n                int b = s.nextInt();\n                if (i%2==0&&b==1)\n                    counter0++;\n                if (i%2!=0&&b==0)\n                    counter0++;\n                if (i%2!=0&&b==1)\n                    counter1++;\n                if (i%2==0&&b==0)\n                    counter1++;\n            }\n            if (counter0<counter1)\n                System.out.println(counter0);\n            else if(counter1<=counter0)\n                System.out.println(counter1);\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main\n{\n    public static void main (String[] args)\n    {\n        Scanner scan = new Scanner(System.in);\n        while(scan.hasNext())\n        {\n            int n = scan.nextInt();\n            int[] lights = new int[n];\n            for (int i =0; i< n; lights[i++]= scan.nextInt()){}\n            int min=0;\n            int now =0,d1=0,d2=0;\n            for (int i=0; i<n; i++)\n            {\n                if (lights[i]!=(now++)%2)\n                    d1++;\n            }\n            now = 1;\n            for (int i=0; i<n; i++)\n            {\n                if (lights[i]!=(now++)%2)\n                    d2++;\n            }\n            if (d1 > d2)\n                System.out.println(d2);\n            else\n                System.out.println(d1);\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1009_149__1_1319_62", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        float sum = 0;\n        for (int i = 0; i < 12; i++) {\n            float a = sc.nextFloat();\n            sum += a;\n        }\n        System.out.printf(\"$\" + \"%.2f\",(float)sum/12 );\n        System.out.println(\"\");\n    }\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner in = new Scanner(System.in);\n\n        int place = in.nextInt();\n        while (place != 5280) {\n            Integer flag = 0;\n            Integer reptime = 0;\n            int currentnum = 0;\n            int lastnum = 0;\n\n            while ((flag == 0) && (reptime != 21)) {\n                currentnum = in.nextInt();\n                reptime++;\n\n                if (currentnum == place) {\n                    System.out.print(\"Moving from \" + lastnum + \" to \" + currentnum + \": found it!\\n\");\n//                    System.out.print(\"\\n\");\n                    flag = 1;\n                } else {\n\n                    if (Math.abs(currentnum - place) == Math.abs(lastnum - place)) {\n                        System.out.print(\"Moving from \" + lastnum + \" to \" + currentnum + \": same.\\n\");\n                        lastnum = currentnum;\n                    }\n\n                    if (Math.abs(currentnum - place) > Math.abs(lastnum - place)) {\n                        System.out.print(\"Moving from \" + lastnum + \" to \" + currentnum + \": colder.\\n\");\n                        lastnum = currentnum;\n                    }\n\n                    if (Math.abs(currentnum - place) < Math.abs(lastnum - place)) {\n                        System.out.print(\"Moving from \" + lastnum + \" to \" + currentnum + \": warmer.\\n\");\n                        lastnum = currentnum;\n                    }\n                }\n            }\n            place = in.nextInt();\n            if(place!=5280){\n                System.out.println();\n            }\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_288__1_1001_409", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc =new Scanner(System.in);\n        while(sc.hasNext()){\n            System.out.println(sc.nextInt() +sc.nextInt());\n            \n        }\n    }\n\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main{\n\tpublic static void main(String []args) {\n\t\tScanner input=new Scanner(System.in);\n\t\twhile (input.hasNextInt()){\n\t\t\tint a=input.nextInt();\n\t\t\tif(!input.hasNextInt())\n\t\t\t\tbreak;\n\t\t\tint b=input.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\t\n\t\tinput.close();\n\t}\n}\n\n\n\n//import java.util.Scanner;\n//public class Main {\n//    public static void main(String[] args) {\n//        Scanner cin = new Scanner(System.in);\n//        while (cin.hasNext())\n//            System.out.println(cin.nextInt()+cin.nextInt());\n//    }\n//}\n", "score": 1.0}
{"id": "SHARE_1_1478_11__1_106014_3", "golden_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(input.readLine());\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tlong a = Long.parseLong(input.readLine());\n\t\t\tdouble sum = 0;\n\t\t\tfor (long j = 2; j <= a; j++) {\n\t\t\t\tsum += Math.log10(j);\n\t\t\t}\n\t\t\tSystem.out.println((long)sum + 1);\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.io.*;\nimport java.util.StringTokenizer;\n\npublic class Main\n{\n\tstatic int [][] M;\n\tstatic int [] partial_sum;\n\tstatic int at,to,num;\n\tpublic static void main(String [] args) throws IOException\n\t{\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter writer = new PrintWriter(new OutputStreamWriter(System.out));\n\t\tint tc = Integer.parseInt(reader.readLine());\n\n\t\twhile(tc-- > 0)\n\t\t{\n\t\t\treader.readLine();\n\t\t\tint n = Integer.parseInt(reader.readLine());\n\t\t\tpartial_sum = new int[n];\n\n\t\t\tStringTokenizer st = new StringTokenizer(reader.readLine());\n\n\t\t\tfor(int i = 0 ; i<n ; i++)\n\t\t\t\tif(i == 0)\n\t\t\t\t\tpartial_sum[i] = Integer.parseInt(st.nextToken());\n\t\t\t\telse\n\t\t\t\t\tpartial_sum[i] = Integer.parseInt(st.nextToken())+partial_sum[i-1];\n\n\t\t\tnum = 2*n-1;\n\t\t\tint m = log();\n\n\n\t\t\tM = new int[n][m+1];\n\n\t\t\tfor(int i = 0 ; i<n ; i++)\n\t\t\t\tM[i][0] = i;\n\n\n\t\t\tfor(int j = 1 ; (1<<j) <= n ; j++)\n\t\t\t\tfor(int i = 0 ; i + (1<<j) - 1 < n ; i++)\n\t\t\t\t\tif (partial_sum[M[i][j - 1]] < partial_sum[M[i + (1 << (j - 1))][j - 1]])\n\t\t\t\t\t\tM[i][j] = M[i][j - 1];\n\t\t\t\t\telse\n\t\t\t\t\t\tM[i][j] = M[i + (1 << (j - 1))][j - 1];\n\n\t\t\tint res = 0;\n\n\t\t\tfor(int i = 0 ; i<n ; i++)\n\t\t\t\tif(i==0)\n\t\t\t\t{\n\t\t\t\t\tat = 0;to = n-1;\n\t\t\t\t\tif(partial_sum[RMQ()] >0)\n\t\t\t\t\t\tres++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tat = i;to = n-1;\n\t\t\t\t\tif(partial_sum[RMQ()] - partial_sum[i-1] > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tat = 0;\n\t\t\t\t\t\tto = i-1;\n\t\t\t\t\t\tif( partial_sum[RMQ()] + partial_sum[n-1] - partial_sum[i-1] > 0)\n\t\t\t\t\t\t\tres++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\twriter.println(res);\n\n\t\t}\n\t\twriter.flush();\n\t\twriter.close();\n\t}\n\n\tprivate static int RMQ()\n\t{\n\t\tint rmq;\n\n\t\tnum = to-at+1;\n\t\tint k = log();\n\n\t\tif(partial_sum[M[at][k]] <= partial_sum[M[to - (1<<k) + 1][k]])\n\t\t\trmq = M[at][k];\n\t\telse\n\t\t\trmq = M[to - (1<<k) + 1][k];\n\n\t\treturn rmq;\n\t}\n\n\tpublic static int log()\n\t{\n\t\treturn (int) (Math.log10(num)/Math.log10(2));\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1104_63__1_1104_60", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n   public static void main(String[] args) {\n      Scanner in = new Scanner(System.in);\n      int t = in.nextInt();\n      in.nextLine();\n      while (t-- > 0) {\n         StringBuilder s = new StringBuilder(in.nextLine());\n         System.out.println(s.reverse());\n      }\n   }\n}", "generated_code": "import java.util.Scanner;\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint n = scanner.nextInt();\n\t\tscanner.nextLine();\n\t\tfor (int i=1;i<=n;i++){\n\t\t\tString s =scanner.nextLine();\n\t\t\tfor (int j=s.length()-1;j>=0;j--)\n\t\t\t\tSystem.out.print(s.charAt(j));\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1230_55__1_1230_12", "golden_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main (String []args)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\tString str = scan.next();\n\t\twhile(str.charAt(0) != '0')\n\t\t{\n\t\t\tint k=0;\n\t\t\tint n=0;\n\t\t\t       \twhile(k<str.length())\n       \t\t\t\t{\n       \t\t\t\tn+=str.charAt(k)-'0';\n       \t\t\t\tk++;\n       \t\t\t\t}\n\t\tint a =n;\n\t\tint z = 0;\n\t\tint sum=0;\n\t\twhile( a> 0)\n\t\t{\n\t\t\ta = a/10;\n\t\t\tz++;\n\t\t}\n\t\tint [] p = new int [z];\n\t\ta = n ;\n\t\twhile(a >= 10)\n\t\t{\n\t\t\tfor(int i =p.length -1 ; i >= 0 ; i -- )\n\t\t\t{\n\t\t\t\tp[i] = a%10;\n\t\t\t\ta = a/10;\n\t\t\t}\n\t\t\tfor(int i = 0 ; i < p.length ; i ++ )\n\t\t\t\tsum += p[i] ;\n\t\t\t\ta = sum;\n\t\t\t\tsum =0 ;\n\t\t}\n\t\tSystem.out.println( a );\n\t\tstr = scan.next();\n\t}\n}\n}\n", "generated_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\n\npublic class Main {\n\t\n\tpublic static void main(String []argv){\n\t\tScanner cin = new Scanner(System.in);\n\t\twhile (true){\n\t\t\tBigInteger zero = new BigInteger(\"0\");\n\t\t\tBigInteger number = cin.nextBigInteger();\n\t\t\tif ( number.equals(zero))\n\t\t\t\treturn;\n\t\t\tBigInteger result = new BigInteger(\"0\");\n\t\t\tBigInteger a = new BigInteger(\"10\");\n\t\t\twhile ( true ){\n\t\t\t\twhile ( true ){\n\t\t\t\t\tif (number.equals(zero))\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tresult = result.add(number.mod(a));\n\t\t\t\t\tnumber = number.divide(a);\n\t\t\t\t}\n\t\t\t\tif ( result.compareTo(a) == 1 || result.compareTo(a) == 0){\n\t\t\t\t\tnumber = result;\n\t\t\t\t\tresult = zero;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tSystem.out.println(result);\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_101073_16__1_1010_25", "golden_code": "\nimport java.util.Scanner;\n\n\npublic class Main{\n    public static void main (String [] args){\n        Scanner s = new Scanner(System.in);\n        int a = s.nextInt();\n        for (int i = 0 ; i < a ; i++){\n            int max = -1;\n            int min = 100;\n            int b = s.nextInt();\n            for (int j = 0 ; j < b ; j++){\n                int c = s.nextInt();\n                if (c>max)\n                    max=c;\n                if(c<min)\n                    min=c;\n            }\n            System.out.println((max-min)*2);\n        }\n    }\n}\n", "generated_code": "import java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint c = 0;\n\t\twhile (c++ < n) {\n\t\t\tdouble x = in.nextDouble(), y = in.nextDouble();\n\t\t\tdouble r = Math.sqrt(x * x + y * y);\n\n\t\t\tint z = (int) (r * r * Math.PI) / 100 + 1;\n\t\t\tSystem.out.println(\"Property \" + c + \": This property will begin eroding in year \" + z + \".\");\n\t\t}\n\t\tSystem.out.println(\"END OF OUTPUT.\");\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_2826_25__5_1001_29", "golden_code": "import java.util.*;\n\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner s = new Scanner(System.in);\n\t\tint w = s.nextInt();\n\t\tfor(int q=0;q<w;q++){\n\t\t\tString str = s.next();\n\t\t\tint up = Integer.valueOf(str.substring(0,str.indexOf(\"/\")));\n\t\t\tint down = Integer.valueOf(str.substring(str.indexOf(\"/\")+1));\n\t\t\t//System.out.println(up+\", \" +down);\n\t\t\tString way = \"\";\n\t\t\twhile(up != 1 || down != 1){\n\t\t\t\tif(up > down){\n\t\t\t\t\tup -= down;\n\t\t\t\t\tway = \"R\"+way;\n\t\t\t\t}else{\n\t\t\t\t\tdown -= up;\n\t\t\t\t\tway = \"L\"+way;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlong res = (long)(Math.pow(2,way.length()));\n\t\t\tchar[] arr = way.toCharArray();\n\t\t\tfor(int i=0;i<arr.length;i++){\n\t\t\t\tif(arr[arr.length-1-i] == 'R'){\n\t\t\t\t\tres += (long)(Math.pow(2,i));\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(res);\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        String address = cin.nextLine();\n\n        while (address.contentEquals(\"#\") != true) {\n            int n = address.length();\n            char[] array = new char[n];\n            for (int i = 0; i < address.length(); i++) {\n                array[i] = address.charAt(i);\n            }\n\n            boolean no_successor = true;\n            no_successor = !(nextPermutation(array));\n\n            if (no_successor) {\n                System.out.println(\"No Successor\");\n            } else {\n                System.out.println(array);\n            }\n\n            address = cin.nextLine();\n        }\n    }\n\n    static boolean nextPermutation(char[] array) {\n        int a = array.length - 2;\n        while (a >= 0 && array[a] >= array[a + 1]) {\n            a--;\n        }\n        if (a == -1) {\n            return false;\n        }\n\n        int b = array.length - 1;\n        while (array[b] <= array[a]) {\n            b--;\n        }\n\n        char temp = array[a];\n        array[a] = array[b];\n        array[b] = temp;\n\n        for (int i = a + 1, j = array.length - 1; i < j; i++, j--) {\n            temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return true;\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1018_52__1_1010_1", "golden_code": "import java.util.Scanner;\npublic class Main\n{\n\t public static void main(String[] args)\n\t {\n\t\t Scanner scan = new Scanner(System.in);\n\t\t \n\t\t int number;\n\t\t int Apoints;\n\t\t int Bpoints;\n\t\t boolean ok = false;\n\t\t \n\t\t while(scan.hasNextInt())\n\t\t {\n\t\t\t number=scan.nextInt();\n\t\t\t \n\t\t\t if(number==0)\n\t\t\t\t break;\n\t\t\t \n\t\t\t if(ok) System.out.println();\n\t\t\t ok = true ;\n\t\t\t \n\t\t\t int[] A = new int[number];\n\t\t\t int[] B = new int[number];\n\t\t\t Apoints=0;\n\t\t\t Bpoints=0;\n\t\t\t \n\t\t\t for(int i=0; i<number; i++)\n\t\t\t\t A[i]= scan.nextInt();\n\t\t\t \n\t\t\t for(int i=0; i<number; i++)\n\t\t\t\t B[i]= scan.nextInt();\n\t\t\t\n\t\t\t for(int i=0; i<number; i++)\n\t\t\t {\n\t\t\t\t if(Math.abs(A[i]-B[i])>1)\n\t\t\t\t {\n\t\t\t\t\t if(A[i]>B[i])\n\t\t\t\t\t\t Apoints+=A[i];\n\t\t\t\t\t \n\t\t\t\t\t else\n\t\t\t\t\t\t Bpoints+=B[i];\n\t\t\t\t \n\t\t\t\t } \n\t\t\t\t \n\t\t\t\t if(Math.abs(A[i]-B[i])==1)\n\t\t\t\t {\n\t\t\t\t\t if( A[i]==1 && B[i]==2 )\n\t\t\t\t\t {\n\t\t\t\t\t\t Apoints+=6;\n\t\t\t\t\t }\n\t\t\t\t\t \n\t\t\t\t\t else if( A[i]==2 && B[i]==1 )\n\t\t\t\t\t {\n\t\t\t\t\t\t Bpoints+=6;\n\t\t\t\t\t }\n\t\t\t\t\t \n\t\t\t\t\t else\n\t\t\t\t\t {\n\t\t\t\t\t\t if(A[i]<B[i])\n\t\t\t\t\t\t\t Apoints+=A[i]+B[i];\n\t\t\t\t\t\t \n\t\t\t\t\t\t else\n\t\t\t\t\t\t\t Bpoints+=A[i]+B[i];\n\t\t\t\t\t}\n\t\t\t\t }\n\t\t\t\t \n\t\t\t }\n\t\t\t\t\n\t\t\t System.out.println(\"A has \" + Apoints + \" points. B has \" + Bpoints + \" points.\");\n\t\t }\n\t }\n\n}", "generated_code": "import java.util.*;\npublic class Main\n{\n\tstatic Scanner scan = new Scanner(System.in);\n\tpublic static void main(String[] args)\n\t{\n\t\tint tc =scan.nextInt();\n\t\tint c = 0;\n\t\twhile(tc-->0)\n\t\t{\n\t\t\tdouble x = scan.nextDouble() , y = scan.nextDouble();\n\t\t\tint res = 0 ;\n\t\t\tdouble area = 0.0 ;\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tres++;\n\t\t\t\tarea+=50;\n\t\t\t\tif(2*area/Math.PI >= x*x+y*y)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tSystem.out.format(\"Property %d: This property will begin eroding in year %d.\\n\",++c,res);\n\t\t}\n\t\tSystem.out.println(\"END OF OUTPUT.\");\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1001_228__5_1013_26", "golden_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String [] args)\n\t\t{\n\t\t\tScanner in = new Scanner (System.in);\n\t\t\twhile(in.hasNext())\n\t\t\tSystem.out.println(in.nextInt()+in.nextInt());}\n\t\t\t\n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\nimport static java.lang.Math.*;\n\n\npublic class Main {\n\t\n\t\n\t\n\tprivate static int numberOfTree;\n\tprivate static ArrayList<Node> nodesList ;\n\n\tprivate static ArrayList<Node> convexhullOutput;\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner input = new Scanner( System.in );\n\t\t\n\t\t\tnumberOfTree = input.nextInt();\n\t\t\t\n\t\t\tnodesList = new ArrayList<Node>();\n\t\t\tfor (int j = 0; j < numberOfTree; j++) {\n\t\t\t\tNode node = new Node();\n\t\t\t\tnode.setX((double)input.nextDouble());\n\t\t\t\tnode.setY((double)input.nextDouble());\n\t\t\t\t\n\t\t\t\tnodesList.add(node);\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tconvexhullOutput = new ArrayList<Node>();\n\t\t\tArrayList<Node> up = new ArrayList<Node>();\n\t\t\tArrayList<Node> down = new ArrayList<Node>();\n\t\t\t\n\t\t\t\n\t\t\tSortByXY(nodesList,0);\n\t\t\tup = separate(nodesList, nodesList.get(0), nodesList.get(nodesList.size()-1),1);\n\t\t\tdown = separate(nodesList, nodesList.get(0), nodesList.get(nodesList.size()-1),2);\n\t\t\t\n\t\t\tSortByXY(up,0);\n\t\t\tSortByXY(down,0);\n\t\t\t\n\t\t\tconvexhullOutput.add(nodesList.get(0));\n\t\t\trecursive2(up,nodesList.get(0), nodesList.get(nodesList.size()-1),1);\n\t\t\tSortByXY(convexhullOutput,0);\n\t\t\t\n\t\t\tconvexhullOutput.add(nodesList.get(nodesList.size()-1));\n\t\t\tint size = convexhullOutput.size();\n\t\t\t\n\t\t\trecursive2(down,nodesList.get(0), nodesList.get(nodesList.size()-1),2);\n\n\t\t    SortByXY2(convexhullOutput, size);\n\t\t\t\n\t\t\tSystem.out.println(convexhullOutput.size());\n\t\n//\t\t\tfor (int j = 0; j < convexhullOutput.size(); j++) {\n//\t\t\t\tSystem.out.println((int)convexhullOutput.get(j).getX()+\" \"+(int)convexhullOutput.get(j).getY());\n//\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\tinput.close();\n\t\t\n\t}\n\t\n\tpublic static void recursive2(ArrayList<Node> list,Node begin,Node end,int index){\n\t\t\n\t\tif(list.size() == 0){\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tNode max = new Node();\n\t\tmax = findMaxDistance(begin, end, list);\n\t\tboolean flag = false;\n\t\t\n\n\t\t\tfor (int i = 0; i < convexhullOutput.size(); i++) {\n\t\t\t\tif(convexhullOutput.get(i).getX() == max.getX() && convexhullOutput.get(i).getY() == max.getY())\n\t\t\t\t\tflag = true;\n\t\t\t}\n\t\t\t\n\t\t\tif(!flag)\n\t\t\t\tconvexhullOutput.add(max);\n\n\n\t\tArrayList<Node> newlist1 = new ArrayList<Node>();\n\t\tnewlist1 = separate(list, begin, max,index);\n\t\trecursive2(newlist1, begin, max,index);\n\t\t\n\t\t\n\t\tArrayList<Node> newlist2 = new ArrayList<Node>();\n\t\tnewlist2 = separate(list, max, end,index);\n\t\trecursive2(newlist2, max, end,index);\n\n\t}\n\t\n\t\n\tpublic static ArrayList<Node> separate(ArrayList<Node> list,Node begin,Node end,int index){\n\t\t\n\t\tArrayList<Node> up2 = new ArrayList<Node>();\n\t\tArrayList<Node> down2 = new ArrayList<Node>();\n\n\t\t\n\t\tfor (int i = 0; i < list.size(); i++) {\n\t\t\tif(begin.getX() == end.getX() && index == 1){\n\t\t\t\tdown2.add(list.get(i));\n\t\t\t}\n\t\t\telse if(begin.getX() == end.getX() && index == 2){\n\t\t\t\tup2.add(list.get(i));\n\t\t\t}\n\t\t\telse{\n\t\t\t\t\n\t\t\t\tif(list.get(i).getY() > EquationOfLine(begin, end, list.get(i)))\n\t\t\t\t\tup2.add(list.get(i));\n\t\t\t\telse if (list.get(i).getY() < EquationOfLine(begin, end, list.get(i)))\n\t\t\t\t\tdown2.add(list.get(i));\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(index == 1)\n\t\t\treturn up2;\n\t\telse\n\t\t\treturn down2;\n\t\t\n\t}\n\t\n\tpublic static double Distance(Node begin,Node end,Node point){\n\t\tdouble out;\n\t\tdouble lenght;\n\t\tdouble x,y;\n\t\t\n\t\t\n\t\tif(end.getX()==begin.getX())\n\t\t\tout = point.getX() - begin.getX();\n\t\telse{\n\t\t\ty = end.getY() - begin.getY();\n\t\t\tx = end.getX() - begin.getX();\n\t\t\tlenght = sqrt(pow(x,2)+pow(y,2)) ;\n\t\t\ty /= lenght;\n\t\t\tx /= lenght;\n\t\t\t\n\t\t\tout = x * (point.getY() - begin.getY()) - y * (point.getX() - begin.getX());\n\t\t\t\n\t\t\tout = sqrt(pow(out,2));\n\n\t\t}\n\t\treturn out;\n\t\t\n\t}\n\n\t\n\tpublic static Node findMaxDistance(Node begin,Node end,ArrayList<Node> points){\n\t\tdouble max = Distance(begin, end,points.get(0));\n\t\tNode out = new Node();\n\t\tout.setX(points.get(0).getX());\n\t\tout.setY(points.get(0).getY());\n\t\t\n\n\t\tfor (int i = 1; i < points.size(); i++) {\n\t\t\tif(Distance(begin, end,points.get(i)) > max){\n\t\t\t\tmax = Distance(begin, end,points.get(i));\n\t\t\t\tout.setX(points.get(i).getX());\n\t\t\t\tout.setY(points.get(i).getY());\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn out;\n\t\t\n\t}\n\t\n\tpublic static void SortByXY(ArrayList<Node> tree,int begin){\n\t\t\n\t\tfor (int i = begin; i < tree.size(); i++) {\n\t\t\tfor (int j = i; j > begin ; j--) {\n\t\t\t\tif(tree.get(j).getY() < tree.get(j-1).getY())\n\t\t\t\t{\n\t\t\t\t\tNode temp = new Node();\n\t\t\t\t\ttemp.setX(tree.get(j).getX());\n\t\t\t\t\ttemp.setY(tree.get(j).getY());\n\t\t\t\t\t\n\t\t\t\t\ttree.get(j).setX(tree.get(j-1).getX());\n\t\t\t\t\ttree.get(j).setY(tree.get(j-1).getY());\n\t\t\t\t\t\n\t\t\t\t\ttree.get(j-1).setX(temp.getX());\n\t\t\t\t\ttree.get(j-1).setY(temp.getY());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (int i = begin; i < tree.size(); i++) {\n\t\t\tfor (int j = i; j > begin ; j--) {\n\t\t\t\tif(tree.get(j).getX() < tree.get(j-1).getX())\n\t\t\t\t{\n\t\t\t\t\tNode temp = new Node();\n\t\t\t\t\ttemp.setX(tree.get(j).getX());\n\t\t\t\t\ttemp.setY(tree.get(j).getY());\n\t\t\t\t\t\n\t\t\t\t\ttree.get(j).setX(tree.get(j-1).getX());\n\t\t\t\t\ttree.get(j).setY(tree.get(j-1).getY());\n\t\t\t\t\t\n\t\t\t\t\ttree.get(j-1).setX(temp.getX());\n\t\t\t\t\ttree.get(j-1).setY(temp.getY());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\npublic static void SortByXY2(ArrayList<Node> tree,int begin){\n\t\t\n\t\tfor (int i = begin; i < tree.size(); i++) {\n\t\t\tfor (int j = i; j > begin ; j--) {\n\t\t\t\tif(tree.get(j).getY() > tree.get(j-1).getY())\n\t\t\t\t{\n\t\t\t\t\tNode temp = new Node();\n\t\t\t\t\ttemp.setX(tree.get(j).getX());\n\t\t\t\t\ttemp.setY(tree.get(j).getY());\n\t\t\t\t\t\n\t\t\t\t\ttree.get(j).setX(tree.get(j-1).getX());\n\t\t\t\t\ttree.get(j).setY(tree.get(j-1).getY());\n\t\t\t\t\t\n\t\t\t\t\ttree.get(j-1).setX(temp.getX());\n\t\t\t\t\ttree.get(j-1).setY(temp.getY());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (int i = begin; i < tree.size(); i++) {\n\t\t\tfor (int j = i; j > begin ; j--) {\n\t\t\t\tif(tree.get(j).getX() > tree.get(j-1).getX())\n\t\t\t\t{\n\t\t\t\t\tNode temp = new Node();\n\t\t\t\t\ttemp.setX(tree.get(j).getX());\n\t\t\t\t\ttemp.setY(tree.get(j).getY());\n\t\t\t\t\t\n\t\t\t\t\ttree.get(j).setX(tree.get(j-1).getX());\n\t\t\t\t\ttree.get(j).setY(tree.get(j-1).getY());\n\t\t\t\t\t\n\t\t\t\t\ttree.get(j-1).setX(temp.getX());\n\t\t\t\t\ttree.get(j-1).setY(temp.getY());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic static double EquationOfLine(Node begin,Node end,Node point){\n\t\t\n\t\tif(end.getX()==begin.getX())\n\t\t\treturn Double.MAX_VALUE;\n\t\telse\n\t\t\treturn ( ((end.getY()-begin.getY())/(end.getX()-begin.getX())) * (point.getX() - begin.getX()) ) + begin.getY();\n\t}\n\t\n}\nclass Node{\n\t\n\tprivate double x;\n\tprivate double y;\n\t\n\tpublic double getX() {\n\t\treturn x;\n\t}\n\tpublic void setX(double x) {\n\t\tthis.x = x;\n\t}\n\t\n\tpublic double getY() {\n\t\treturn y;\n\t}\n\tpublic void setY(double y) {\n\t\tthis.y = y;\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_398__1_1001_90", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext())\n\t\t\tSystem.out.println(in.nextInt()+in.nextInt());\n\t}\n}", "generated_code": "\nimport java.util.Scanner;\n\n\npublic class Main {\n\n    static public Scanner in = new Scanner(System.in);\n\n    public static void main(String args[]) {\n        \n            String str[]=new String[2];\n            \n            String line;\n            \n            line=in.nextLine();\n            do{             \n            str=line.split(\" \");\n            int num1=Integer.parseInt(str[0]);\n            int num2=Integer.parseInt(str[1]);\n            int num3=num1+num2;\n            System.out.println(num3);\n            line=in.nextLine();\n            }while(!\"\".equals(line));\n            \n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_198__1_1001_137", "golden_code": "import java.util.Scanner;\n\npublic class Main{\n    \n    static Scanner in = new Scanner(System.in);\n    \n    public static void main(String[] args) {\n        while(in.hasNext()){\n            System.out.println(in.nextInt() + in.nextInt());\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n    \n    public static void main(String[] args) {\n      Scanner sc = new Scanner(System.in);\n      \n      while(sc.hasNextInt()){\n          int num1 = sc.nextInt();\n          int num2 = sc.nextInt();\n          \n          System.out.println(num1+num2);\n      }\n            \n            \n        }\n      \n       }", "score": 1.0}
{"id": "SHARE_1_2371_26__1_2371_7", "golden_code": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner scan=new Scanner(System.in);\n                while(scan.hasNext()){\n\t\t\tint n=scan.nextInt();\n\t\t\tSystem.out.println((int)((4*Math.pow(n,3)+10*n*n+4*n+Math.pow(-1,n)-1)/16));\n                }\n    }\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main \n{\n\n\n\tpublic static void main(String[] args) \n\t{\n\n\t\t\n\t\tScanner input = new Scanner(System.in);\n\t\twhile(input.hasNext()){\n\t\t\tint t = input.nextInt();\n\t\t\n\t\t\tSystem.out.println(t * (t + 2) * (2*t + 1) / 8);\n\t\t\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_2713_45__1_2713_30", "golden_code": "\nimport java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\twhile (sc.hasNext()) {\n\t\t\tint n = sc.nextInt();\n\t\t\tif (n==0)\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tint count = 0;\n\t\t\twhile (n>1) {\n\t\t\t\tif (n%2 == 0)\n\t\t\t\t\tn = n/2;\n\t\t\t\telse\n\t\t\t\t\tn = 3*n + 1;\n\t\t\t\tcount ++;\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(count+1);\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\tint a = in.nextInt();\n\t\twhile(a!=0)\n\t\t{\n\t\t\tint c = 1;\n\t\t\t\n\t\t\twhile(a!=1)\n\t\t\t{\n\t\t\t\tif(a%2==1)\n\t\t\t\t\ta = (3*a)+1;\n\t\t\t\telse\n\t\t\t\t\ta/=2;\n\t\t\t\tc++;\n\t\t\t}\n\t\t\tSystem.out.println(c);\n\t\t\ta = in.nextInt();\n\t\t}\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_346__1_1001_223", "golden_code": "import java.util.*;\nclass Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        while(sc.hasNext())\n        {\n            int a = sc.nextInt();\n            int b = sc.nextInt();\n            \n            System.out.println(a + b);\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n    \n\t\tScanner input = new Scanner(System.in);\n        while (input.hasNext())\n            System.out.println(input.nextInt()+input.nextInt());\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_487__1_106025_29", "golden_code": "// @JUDGE_ID:  1000AA  100  Java  \"Easy algorithm\"\n\nimport java.io.*;\nimport java.util.*;\n\nclass Main\n{\n    static String ReadLn (int maxLg)  // utility function to read from stdin\n    {\n        byte lin[] = new byte [maxLg];\n        int lg = 0, car = -1;\n        String line = \"\";\n\n        try\n        {\n            while (lg < maxLg)\n            {\n                car = System.in.read();\n                if ((car < 0) || (car == '\\n')) break;\n                lin [lg++] += car;\n            }\n        }\n        catch (IOException e)\n        {\n            return (null);\n        }\n\n        if ((car < 0) && (lg == 0)) return (null);  // eof\n        return (new String (lin, 0, lg));\n    }\n\n    public static void main (String args[])  // entry point from OS\n    {\n        Main myWork = new Main();  // create a dinamic instance\n        myWork.Begin();            // the true entry point\n    }\n\n    void Begin()\n    {\n        String input;\n        StringTokenizer idata;\n        int a, b;\n\n        while ((input = Main.ReadLn (255)) != null)\n        {\n          idata = new StringTokenizer (input);\n          a = Integer.parseInt (idata.nextToken());\n          b = Integer.parseInt (idata.nextToken());\n          System.out.println(a+b);\n        }\n    }\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T=in.nextInt();\n        for(int t=0 ; t<T ; t++){\n            String str = in.next();\n            char ch = str.charAt(0);\n            int sum=1;\n            String finalStr=\"\";\n            for(int i=1; i<=str.length() ; i++){\n                if(i!=str.length() && str.charAt(i)==ch) sum++;\n                else{\n                    finalStr+=(String.valueOf(sum)+ch);\n                    if(i!=str.length()) ch=str.charAt(i);\n                    sum=1;\n                }\n            }\n            System.out.println(finalStr);\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_25__1_2715_20", "golden_code": "import java.util.Scanner;\n\n\npublic class Main \n{\npublic static void main(String[]args)\n{\n\tScanner vorodi=new Scanner (System.in);\n\twhile(vorodi.hasNext())\n\t{\n\t\tint first=vorodi.nextInt();\n\t\tint last=vorodi.nextInt();\n\t\tSystem.out.println(first+last);\n\t}\n}//end of main\n}\n\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\t\n\t    static Scanner in = new Scanner(System.in);\n\t        static String str;\n\t            static int[][] dp;\n\t            \n\t                static int chek(int i, int j) {\n\t                \t        \n\t                \t                if (i == j || i == j - 1) {\n\t                \t                \t            return 0;\n\t                \t                }\n\t                \t                        int res = 0;\n\t                \t                                if (dp[i][j] != -1) {\n\t                \t                                \t            return dp[i][j];\n\t                \t                                }\n\t                \t                                        if (checkchar(str.charAt(i), str.charAt(j))) {\n\t                \t                                        \t            dp[i][j] = res = chek(i + 1, j - 1) + 1;\n\t                \t                                        }\n\t                \t                                                for (int k = i; k < j; k++) {\n\t                \t                                                \t            res = Math.max(res, chek(i, k) + chek(k + 1, j));\n\t                \t                                                }\n\t                \t                                                        return dp[i][j] = res;\n\t                }\n\t                \n\t                    static boolean checkchar(char a, char b) {\n\t                    \t        if (a == 'A' && b == 'U') {\n\t                    \t        \t            return true;\n\t                    \t        } else if (a == 'U' && b == 'A') {\n\t                    \t        \t            return true;\n\t                    \t        } else if (a == 'C' && b == 'G') {\n\t                    \t        \t            return true;\n\t                    \t        } else if (a == 'G' && b == 'C') {\n\t                    \t        \t            return true;\n\t                    \t        }\n\t                    \t                return false;\n\t                    }\n\t                    \n\t                        public static void main(String[] args) {\n\t                        \t        while (true) {\n\t                        \t        \t            int n = in.nextInt();\n\t                        \t        \t                        if (n == 0) {\n\t                        \t        \t                        \t                break;\n\t                        \t        \t                        }\n\t                        \t        \t                                    str = in.next();\n\t                        \t        \t                                    \n\t                        \t        \t                                                dp = new int[n][n];\n\t                        \t        \t                                                            for (int i = 0; i < n; i++) {\n\t                        \t        \t                                                            \t                for (int j = 0; j < n; j++) {\n\t                        \t        \t                                                            \t                \t                    dp[i][j] = -1;\n\t                        \t        \t                                                            \t                }\n\t                        \t        \t                                                            \t                \n\t                        \t        \t                                                            }\n\t                        \t        \t                                                                        System.out.println(chek(0, n - 1));\n\t                        \t        }\n\t                        }\n}\n", "score": 0.0}
{"id": "SHARE_1_2517_8__1_1996_2", "golden_code": "import java.util.*;\n\nimport static java.lang.Math.*;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scanner = new Scanner(System.in);\n        int cnt = scanner.nextInt();\n        while(cnt-- > 0)\n        {\n            int chCase = scanner.nextInt(), chang = scanner.nextInt(), buy = scanner.nextInt();\n            scanner.nextLine();\n            String now = scanner.nextLine();\n            String to = scanner.nextLine();\n\n            ArrayList<Character> has = new ArrayList<Character>();\n            for(char chars : now.toCharArray())\n                if(chars != ' ')\n                    has.add(chars);\n\n            long cost = 0;\n            boolean[] marked = new boolean[has.size()];\n            boolean[] handle = new boolean[to.length()];\n\n            for(int j = 0; j < to.length(); j++)\n            {\n                if(to.charAt(j) == ' ')\n                {\n                    handle[j] = true;\n                    continue;\n                }\n                for(int i = 0; i < has.size(); i++)\n                    if(!marked[i] && has.get(i) == to.charAt(j))\n                    {\n                        marked[i] = handle[j] = true;\n                        break;\n                    }\n            }\n\n            for(int j = 0; j < to.length(); j++)\n                if(!handle[j])\n                {\n                    for(int i = 0; i < has.size(); i++)\n                        if(!marked[i] && (Character.toLowerCase(has.get(i)) == to.charAt(j) || Character.toUpperCase(has.get(i)) == to.charAt(j)))\n                        {\n                            marked[i] = handle[j] = true;\n                            cost += chCase;\n                            break;\n                        }\n                }\n\n            for(int i = 0; i < has.size(); i++)\n                if(!marked[i])\n                    for(int j = 0; j < to.length(); j++)\n                        if(!handle[j])\n                        {\n                            marked[i] = handle[j] = true;\n                            cost += chang;\n                            break;\n                        }\n\n            for(int i = 0; i < handle.length; i++)\n                if(!handle[i])\n                    cost += buy;\n\n            System.out.println(cost);\n        }\n\n    }\n\n}\n", "generated_code": "\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        DecimalFormat df = new DecimalFormat(\"0,000.00\");\n        BigDecimal ten = new BigDecimal(\"100\");\n        while(true){\n            int n = s.nextInt();\n            if(n == 0)\n                break;\n            String str = s.next();\n            str = str.replace(\"$\", \"\").replaceAll(\",\", \"\").replace(\".\", \"\");\n            BigInteger res = new BigInteger(str);\n            for (int i = 1; i < n; i++) {\n                str = s.next();\n                str = str.replace(\"$\", \"\").replaceAll(\",\", \"\").replace(\".\", \"\");\n                res = res.add(new BigInteger(str));\n            }\n            BigDecimal bd = new BigDecimal(res).divide(ten);\n            String tmp = df.format(bd).toString();\n            int i=0;\n            for (; i < tmp.length(); i++) {\n                if(tmp.charAt(i) != '0' && tmp.charAt(i) != ','){\n                    if(tmp.charAt(i)=='.')\n                        i--;\n                    break;\n                }\n            }\n            System.out.println(\"$\"+tmp.substring(i));\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2822_46__1_2822_68", "golden_code": "import java.awt.Point;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.lang.reflect.Array;\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.PriorityQueue;\nimport java.util.Random;\nimport java.util.StringTokenizer;\nimport static java.lang.Math.*;\nimport java.util.Map;\nimport java.util.Scanner;\n\n/**\n *\n * @author Mojtaba\n */\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        MyScanner in = new MyScanner(System.in);\n        PrintWriter writer = new PrintWriter(new BufferedOutputStream(System.out));\n        StringBuilder sb = new StringBuilder(\"\");\n\n\n        int t = in.nextInt();\n        for (int ii = 0; ii < t; ii++) {\n            long n = in.nextLong();\n            sb.append(n * (n + 1) / 2).append(\" \").append(n * n).append(\" \").append(n + n * n).append(\"\\n\");\n        }\n\n\n        writer.println(sb.toString().trim());\n        writer.flush();\n        in.close();\n    }\n}\n\nclass MyScanner {\n\n    BufferedReader reader;\n    StringTokenizer tokenizer;\n\n    public MyScanner(InputStream stream) {\n        this.reader = new BufferedReader(new InputStreamReader(stream));\n    }\n\n    public int nextInt() throws IOException {\n        return Integer.parseInt(next());\n    }\n\n    public int[] nextIntegerArray(int n) throws IOException {\n        int[] a = new int[n];\n        for (int i = 0; i < a.length; i++) {\n            a[i] = nextInt();\n        }\n        return a;\n    }\n\n    public long[] nextLongArray(int n) throws IOException {\n        long[] a = new long[n];\n        for (int i = 0; i < a.length; i++) {\n            a[i] = nextLong();\n        }\n        return a;\n    }\n\n    public int nextInt(int radix) throws IOException {\n        return Integer.parseInt(next(), radix);\n    }\n\n    public long nextLong() throws IOException {\n        return Long.parseLong(next());\n    }\n\n    public long nextLong(int radix) throws IOException {\n        return Long.parseLong(next(), radix);\n    }\n\n    public double nextDouble() throws IOException {\n        return Double.parseDouble(next());\n    }\n\n    public BigInteger nextBigInteger() throws IOException {\n        return new BigInteger(next());\n    }\n\n    public BigInteger nextBigInteger(int radix) throws IOException {\n        return new BigInteger(next(), radix);\n    }\n\n    public String next() throws IOException {\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\n            tokenizer = new StringTokenizer(reader.readLine());\n            return this.next();\n        }\n        return tokenizer.nextToken();\n    }\n\n    public void close() throws IOException {\n        this.reader.close();\n    }\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input =new Scanner(System.in);\n        int testcase=input.nextInt();\n        for (int i = 0; i < testcase; i++) {\n            int in=input.nextInt();\n            System.out.println(in*(in+1)/2+\" \"+in*in+\" \"+in*(in+1));\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1009_95__1_2837_25", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        double n = 0;\n        for (int i = 0; i < 12; i++) {\n            n += Double.parseDouble(in.nextLine().trim());\n        }\n        n /= 12;\n        String s2 = String.valueOf(n).substring(String.valueOf(n).indexOf('.') + 1, String.valueOf(n).indexOf('.') + 3) + '.' + String.valueOf(n).substring(String.valueOf(n).indexOf('.') + 3);\n        StringBuilder j=new StringBuilder();\n        String s='$' + String.valueOf(n).substring(0, String.valueOf(n).indexOf('.')).trim() + '.' + Math.round(Double.parseDouble(s2));\n        for (int i = 0; i <s.length() ; i++) {\n            if(s.charAt(i)!=' ')\n                j.append(s.charAt(i));\n        }\n        System.out.println(j);\n    }\n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tList<Integer> dates = new ArrayList<Integer>();\n\t\twhile(true){\n\t\t\tString query = input.next();\n\t\t\tif (query.equals(\"END\"))\n\t\t\t\treturn;\n\t\t\telse if (query.equals(\"GetFinal\")){\n\t\t\t\tif (dates.size()>=2){\n\t\t\t\t\tCollections.sort(dates);\n\t\t\t\t\tSystem.out.println(dates.get(dates.size()-2));\n\t\t\t\t}else if (dates.size()==1){\n\t\t\t\t\tCollections.sort(dates);\n\t\t\t\t\tSystem.out.println(dates.get(dates.size()-1));\n\t\t\t\t}else\n\t\t\t\t\tSystem.out.println();\n\t\t\t}else{\n\t\t\t\tint date = Integer.parseInt(query);\n\t\t\t\tdates.add(date);\n\t\t\t}\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_227__1_2621_3", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String [] args)\n\t\n\t{\n\t\tScanner in = new Scanner (System.in);\n\t\twhile(in.hasNext())\n\t\tSystem.out.println(in.nextInt()+in.nextInt());\n\t\t\n\t}\n}\n", "generated_code": "import java.util.*;\npublic class Main {\n\tprivate static int getNum(String s){\n\t\tif(s.equals(\"A\") || s.equals(\"B\") || s.equals(\"C\") || s.equals(\"a\") || s.equals(\"b\") || s.equals(\"c\"))\n\t\t\treturn 1;\n\t\telse if(s.equals(\"D\") || s.equals(\"E\") || s.equals(\"F\") || s.equals(\"d\") || s.equals(\"e\") || s.equals(\"f\"))\n\t\t\treturn 2;\n\t\telse if(s.equals(\"G\") || s.equals(\"H\") || s.equals(\"I\") || s.equals(\"g\") || s.equals(\"h\") || s.equals(\"i\"))\n\t\t\treturn 3;\n\t\telse if(s.equals(\"J\") || s.equals(\"K\") || s.equals(\"L\") || s.equals(\"j\") || s.equals(\"k\") || s.equals(\"l\"))\n\t\t\treturn 4;\n\t\telse if(s.equals(\"M\") || s.equals(\"N\") || s.equals(\"O\") || s.equals(\"m\") || s.equals(\"n\") || s.equals(\"o\"))\n\t\t\treturn 5;\n\t\telse if(s.equals(\"P\") || s.equals(\"Q\") || s.equals(\"R\") || s.equals(\"S\") || s.equals(\"p\") || s.equals(\"q\") || s.equals(\"r\")  || s.equals(\"s\"))\n\t\t\treturn 6;\n\t\telse if(s.equals(\"T\") || s.equals(\"U\") || s.equals(\"V\") || s.equals(\"t\") || s.equals(\"u\") || s.equals(\"v\"))\n\t\t\treturn 7;\n\t\telse if(s.equals(\"W\") || s.equals(\"X\") || s.equals(\"Y\") || s.equals(\"Z\") || s.equals(\"w\") || s.equals(\"x\") || s.equals(\"y\")  || s.equals(\"z\"))\n\t\t\treturn 8;\t\t\n\t\treturn 0;\n\t}\n\tprivate static boolean isPalindrome(String s){\n\t\t//System.out.println(s);\n\t\tif((s.length() < 2) || (getNum(s.substring(0,1)) == getNum(s.substring(s.length()-1,s.length())) && isPalindrome(s.substring(1,s.length()-1))))\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\t\n\tpublic static void main(String[] args){\n\t\tScanner jin = new Scanner(System.in);\n\t\tint counter = jin.nextInt();\n\t\tfor(int i=0; i<counter; i++){\n\t\t\tString s = jin.next();\n\t\t\tif(isPalindrome(s))\n\t\t\t\tSystem.out.println(\"YES\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"NO\");\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1656_26__1_2554_10", "golden_code": "import java.util.Scanner;\nimport java.util.Arrays;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        \n        Scanner input = new Scanner( System.in );\n    \n        int[] list = new int[16];\n        int i, cnt = 0;\n        \n        list[0] = input.nextInt();\n        while( list[0] != -1 ){\n        \n            for( i = 1; list[i-1] != 0; i++ )\n                list[i] = input.nextInt();\n                \n            Arrays.sort( list, 0, i - 1 );\n        \n            cnt = 0;\n            for( int l : list ){   \n                if( l == 0)\n                    break;\n           \n                if( Arrays.binarySearch( list, 0, i, l * 2 ) >= 0 )\n                    cnt++;\n            }\n            System.out.println( cnt );\n            Arrays.fill( list, 0);\n            list[0] = input.nextInt();\n        }\n    }\n}", "generated_code": "import java.util.*;\n\npublic class Main {\n    static class node_tree {\n        public static ArrayList<Main.Node> nodetree = new ArrayList<Main.Node>();\n        public static ArrayList<String> result = new ArrayList<>();\n        public static void empty() {\n            nodetree.removeAll(nodetree);\n        }\n    }\n\n    static class Node {\n        String name;\n        Node parent;\n        int relation = 0 , is_in_features = 0;\n        Node(String str, Node p, int r) {\n            this.name = str;\n            this.parent = p;\n            this.relation = r;\n        }\n    }\n\n    public static void convert_input1(ArrayList<String> arr) {\n        for (int i = 0; i < arr.size(); i++) {\n            parse1(arr.get(i));\n        }\n    }\n\n    public static void convert_input2(ArrayList<String> arr) {\n        for (int i = 0; i < arr.size(); i++) {\n            parse2(arr.get(i));\n        }\n    }\n    public static void parse1(String str) {\n        String[] root = new String[0];\n        String[] mandatory = new String[0];\n        String[] or = new String[0];\n        String[] xor = new String[0];\n        str = str.trim().replaceAll(\"\\\\s+\", \"\");\n        if (!(str.contains(\"=\"))) { //if the tree has only 1 Node\n            Node N = new Node(str, null, -1);\n            node_tree.nodetree.add(N);\n        } else {\n            root = str.split(\"=\",2);\n            Node a = new Node(root[0], null,-1);\n            boolean is_new = true;\n            for(int i =0 ; i<node_tree.nodetree.size();i++){\n                if(node_tree.nodetree.get(i).name.equals(root[0])) {\n                    is_new = false;\n                    a = node_tree.nodetree.get(i);\n                }\n            }\n            if(is_new){\n                node_tree.nodetree.add(a);\n            }\n            if (root[1].contains(\"+\")) {\n                mandatory = root[1].split(\"\\\\+\",0);\n                for(int i = 0;i<mandatory.length;i++){\n                    is_new =true;\n                    for(int j =0;j<node_tree.nodetree.size();j++){\n                        if(node_tree.nodetree.get(j).name.equals(mandatory[i])){\n                            is_new = false;\n                            node_tree.nodetree.get(j).parent = a ;\n                            node_tree.nodetree.get(j).relation = 0;\n                        }\n                        if(mandatory[i].equals('?'+node_tree.nodetree.get(j).name)){\n                            is_new = false;\n                            node_tree.nodetree.get(j).parent = a;\n                            node_tree.nodetree.get(j).relation = 3;\n                        }\n                    }\n                    if(is_new){\n                        if(mandatory[i].charAt(0)=='?') {\n                            Node b = new Node(mandatory[i].substring(1), a, 3);\n                            node_tree.nodetree.add(b);\n                        }\n                        else {\n                            Node b = new Node(mandatory[i],a,0);\n                            node_tree.nodetree.add(b);\n                        }\n\n                    }\n                }\n            }\n            if (root[1].contains(\"^\")) {\n                xor = root[1].split(\"\\\\^\",0);\n                for(int i = 0;i<xor.length;i++){\n                    is_new =true;\n                    for(int j =0;j<node_tree.nodetree.size();j++){\n                        if(node_tree.nodetree.get(j).name.equals(xor[i])){\n                            is_new = false;\n                            node_tree.nodetree.get(j).parent = a;\n                            node_tree.nodetree.get(j).relation = 1;\n                        }\n                    }\n                    if(is_new){\n                        Node c =new Node(xor[i], a, 1);\n                        node_tree.nodetree.add(c);\n                    }\n                }\n            }\n\n            if (root[1].contains(\"|\")) {\n                or = root[1].split(\"\\\\|\",0);\n                for(int i = 0;i<or.length;i++){\n                    is_new =true;\n                    for(int j =0;j<node_tree.nodetree.size();j++){\n                        if(node_tree.nodetree.get(j).name.equals(or[i])){\n                            is_new = false;\n                            node_tree.nodetree.get(j).parent= a;\n                            node_tree.nodetree.get(j).relation =2;\n                        }\n                    }\n                    if(is_new){\n                        Node d =new Node(or[i], a, 2);\n                        node_tree.nodetree.add(d);\n                    }\n                }\n            }\n\n            if (!((root[1].contains(\"|\")) || (root[1].contains(\"^\")) || (root[1].contains(\"+\")))) {\n                is_new =true;\n                for(int i = 0;i< node_tree.nodetree.size();i++){\n                    if(node_tree.nodetree.get(i).name.equals(root[1])){\n                        is_new= false;\n                        node_tree.nodetree.get(i).parent=a;\n                        node_tree.nodetree.get(i).relation = 0;\n                    }\n                    if(root[1].equals('?'+node_tree.nodetree.get(i).name)){\n                        is_new=false;\n                        node_tree.nodetree.get(i).parent = a;\n                        node_tree.nodetree.get(i).relation = 3;\n                    }\n                }\n                if(is_new){\n                    if(root[1].charAt(0) == '?') {\n                        Node e = new Node(root[1].substring(1), a, 3);\n                        node_tree.nodetree.add(e);\n                    }\n                    else{\n                        Node e = new Node(root[1], a, 0);\n                        node_tree.nodetree.add(e);\n                    }\n                }\n            }\n        }\n    }\n\n\n\n    public static void parse2(String str) {\n        String[] testcase = new String[0];\n        str = str.trim().replaceAll(\"\\\\s+\", \"\");\n        if(str.length()>2) {\n            str = str.substring(1, str.length() - 1);\n        }\n        else{\n            str =\" \";\n        }\n        testcase = str.split(\",\", 0);\n        node_tree.result.add(check_test(testcase));\n    }\n\n\n    public static String check_test(String[] arr) {\n        ArrayList<String> mandantory = new ArrayList();\n        ArrayList<String> xor = new ArrayList();\n        ArrayList<String> or= new ArrayList<>();\n        if(arr.length ==1){\n            if (arr[0] == \" \"){\n                return \"Invalid\";\n            }\n        }\n        for(int i=0 ;i <arr.length; i++){\n            mandantory.add(arr[i]);\n            or.add(arr[i]);\n            xor.add(arr[i]);\n            for(int k = 0 ; k< node_tree.nodetree.size();k++){\n                if(arr[i].equals(node_tree.nodetree.get(k).name)){\n                    for(int l =0 ;l<node_tree.nodetree.size();l++){\n                        if(node_tree.nodetree.get(l).relation !=-1) {\n                            if (node_tree.nodetree.get(l).parent == node_tree.nodetree.get(k)) {\n                                if(node_tree.nodetree.get(l).relation == 0){\n                                    mandantory.add(node_tree.nodetree.get(l).name);\n                                }\n                                if(node_tree.nodetree.get(l).relation == 1){\n                                    xor.add(node_tree.nodetree.get(l).name);\n                                }\n                                if(node_tree.nodetree.get(l).relation == 2){\n                                    or.add(node_tree.nodetree.get(l).name);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            for(int m =0 ;m<mandantory.size();m++){\n                if (check(arr, mandantory.get(m)) == false){\n                    mandantory.removeAll(mandantory);\n                    or.removeAll(or);\n                    xor.removeAll(xor);\n                    return \"Invalid\";\n                }\n            }\n            if (or.size() >1) {\n                int count_or =0;\n                for (int o = 0; o < or.size(); o++) {\n                    if (check(arr, or.get(o))) {\n                        count_or++;\n                    }\n                }\n                if(count_or == 1 ){\n                    mandantory.removeAll(mandantory);\n                    or.removeAll(or);\n                    xor.removeAll(xor);\n                    return \"Invalid\";\n                }\n            }\n            if(xor.size() >1) {\n                int count_xor =0;\n                for (int xo = 0; xo < xor.size(); xo++) {\n                    if (check(arr, xor.get(xo))) {\n                        count_xor++;\n                    }\n                }\n                if(count_xor != 2 ){\n                    mandantory.removeAll(mandantory);\n                    or.removeAll(or);\n                    xor.removeAll(xor);\n                    return \"Invalid\";\n                }\n            }\n            mandantory.removeAll(mandantory);\n            or.removeAll(or);\n            xor.removeAll(xor);\n        }\n        for(int i =0 ;i<arr.length;i++){\n            for(int j =0;j<node_tree.nodetree.size();j++){\n                if(node_tree.nodetree.get(j).name.equals(arr[i])){\n                    if(node_tree.nodetree.get(j).parent !=null) {\n                        if (check(arr, node_tree.nodetree.get(j).parent.name) == false) {\n                            return \"Invalid\";\n                        }\n                    }\n                }\n            }\n        }\n        return \"Valid\";\n    }\n\n    public static Boolean check(String[] arr, String str){\n        for (int i = 0;i<arr.length;i++) {\n            if (arr[i].equals(str)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        String str = \"\";\n        ArrayList<String> input1 = new ArrayList<>();\n        ArrayList<String> input2 = new ArrayList<>();\n        boolean input1_done = false;\n\n        while (!(str.equals(\"###\"))) {\n            str = scan.nextLine();\n\n            if (!(str.equals(\"#\")) && input1_done == false)\n                input1.add(str);\n\n            if (str.equals(\"#\")) {\n                convert_input1(input1);\n                input1_done = true;\n                input1.removeAll(input1);\n            }\n\n            if (input1_done && !(str.equals(\"##\")) && !(str.equals(\"#\"))){\n                input2.add(str);\n            }\n            if (str.equals(\"##\")) {\n                convert_input2(input2);\n                node_tree.result.add(\"+++\");\n                input2.removeAll(input2);\n                node_tree.empty();\n                input1_done = false;\n            }\n        }\n        for(int i =0;i<node_tree.result.size();i++){\n\t\t\tSystem.out.println(node_tree.result.get(i));\n        }\n    }\n}\n\n\n", "score": 0.0}
{"id": "SHARE_5_1017_6__1_1001_37", "golden_code": "import sun.net.www.content.text.plain;\n\nimport java.util.Scanner;\n\n/**\n * Created by Amir on 11/30/14.\n */\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint[] arr = new int[scan.nextInt()];\n\t\tfor (int i=0; i<arr.length; i++)\n\t\t\tarr[i] = scan.nextInt();\n\n\t\tMyResult result = optimumScore(arr, scan.nextInt() - 1, scan.nextInt() - 1);\n\n\t\tSystem.out.print(result.getFirst());\n\t\tSystem.out.print(' ');\n\t\tSystem.out.println(result.getSecond());\n\t}\n\n\tprivate static MyResult optimumScore(int[] arr, int p_one, int p_two) {\n\t\tif (p_one == p_two) {\n\t\t\tint right = sumarr(arr, p_one + 1, arr.length);\n\t\t\tint left = sumarr(arr, 0, p_one);\n\n\t\t\treturn right >= left ? new MyResult(arr[p_one] + right, left) : new MyResult(arr[p_one] + left, right);\n\t\t}\n\n\t\tif (p_one < p_two) {\n\t\t\tint mid = (p_one + p_two) / 2;\n\t\t\treturn new MyResult(sumarr(arr, 0, mid + 1), sumarr(arr, mid + 1, arr.length));\n\t\t} else {\n\t\t\tint mid = (p_one + p_two) / 2 + ((p_one + p_two)%2 == 0 ? 0 : 1);\n\t\t\treturn new MyResult(sumarr(arr, mid, arr.length), sumarr(arr, 0, mid));\n\t\t}\n\t}\n\n\tprivate static int sumarr(int[] arr, int begin, int end) {\n\t\tint sum = 0;\n\t\tif (begin >= arr.length || end < 0)\n\t\t\treturn 0;\n\t\tfor (int i = begin; i < end; i++)\n\t\t\tsum += arr[i];\n\t\treturn sum;\n\t}\n\n\n}\n\nfinal class MyResult {\n\tprivate final int first;\n\tprivate final int second;\n\n\tpublic MyResult(int first, int second) {\n\t\tthis.first = first;\n\t\tthis.second = second;\n\t}\n\n\tpublic int getFirst() {\n\t\treturn first;\n\t}\n\n\tpublic int getSecond() {\n\t\treturn second;\n\t}\n}\n", "generated_code": "\nimport java.util.Scanner;\npublic class Main{\n    public static void main(String args[]){\n        Scanner s=new Scanner(System.in);\n        while(s.hasNext()){\n            int a=s.nextInt();\n            int b=s.nextInt();\n            System.out.println(a+b);\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2121_8__1_2715_20", "golden_code": "import java.math.BigInteger;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner p= new Scanner(System.in);\n        while (p.hasNext()){\n        long t = p.nextLong();\n        BigInteger a=new BigInteger(\"1\");\n        BigInteger b=new BigInteger(\"1\");\n        BigInteger c=new BigInteger(\"0\");\n        c=a.add(b);\n        if(t==1||t==2)\n            System.out.println(\"1\");\n        if(t==3)\n            System.out.println(\"2\");\n        for(long i=4;i<=t;i++){\n            a=b;\n            b=c;\n            c=a.add(b);\n        }\n        System.out.printf(\"%s\\n\",c);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\t\n\t    static Scanner in = new Scanner(System.in);\n\t        static String str;\n\t            static int[][] dp;\n\t            \n\t                static int chek(int i, int j) {\n\t                \t        \n\t                \t                if (i == j || i == j - 1) {\n\t                \t                \t            return 0;\n\t                \t                }\n\t                \t                        int res = 0;\n\t                \t                                if (dp[i][j] != -1) {\n\t                \t                                \t            return dp[i][j];\n\t                \t                                }\n\t                \t                                        if (checkchar(str.charAt(i), str.charAt(j))) {\n\t                \t                                        \t            dp[i][j] = res = chek(i + 1, j - 1) + 1;\n\t                \t                                        }\n\t                \t                                                for (int k = i; k < j; k++) {\n\t                \t                                                \t            res = Math.max(res, chek(i, k) + chek(k + 1, j));\n\t                \t                                                }\n\t                \t                                                        return dp[i][j] = res;\n\t                }\n\t                \n\t                    static boolean checkchar(char a, char b) {\n\t                    \t        if (a == 'A' && b == 'U') {\n\t                    \t        \t            return true;\n\t                    \t        } else if (a == 'U' && b == 'A') {\n\t                    \t        \t            return true;\n\t                    \t        } else if (a == 'C' && b == 'G') {\n\t                    \t        \t            return true;\n\t                    \t        } else if (a == 'G' && b == 'C') {\n\t                    \t        \t            return true;\n\t                    \t        }\n\t                    \t                return false;\n\t                    }\n\t                    \n\t                        public static void main(String[] args) {\n\t                        \t        while (true) {\n\t                        \t        \t            int n = in.nextInt();\n\t                        \t        \t                        if (n == 0) {\n\t                        \t        \t                        \t                break;\n\t                        \t        \t                        }\n\t                        \t        \t                                    str = in.next();\n\t                        \t        \t                                    \n\t                        \t        \t                                                dp = new int[n][n];\n\t                        \t        \t                                                            for (int i = 0; i < n; i++) {\n\t                        \t        \t                                                            \t                for (int j = 0; j < n; j++) {\n\t                        \t        \t                                                            \t                \t                    dp[i][j] = -1;\n\t                        \t        \t                                                            \t                }\n\t                        \t        \t                                                            \t                \n\t                        \t        \t                                                            }\n\t                        \t        \t                                                                        System.out.println(chek(0, n - 1));\n\t                        \t        }\n\t                        }\n}\n", "score": 0.0}
{"id": "SHARE_1_1216_0__6_1010_28", "golden_code": "import java.security.KeyStore.Entry;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Scanner;\nimport java.util.TreeMap;\n\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc = new Scanner(System.in);\n\t\tint N;\n\t\twhile(sc.hasNext())\n\t\t{\n\t\t\tN = sc.nextInt();\n\t\t\tString num;\n\t\t\tTreeMap<String,Integer> numbers = new TreeMap<String, Integer>();\n\t\t\tfor(int i = 0;i < N;i++)\n\t\t\t{\n\t\t\t\tnum = sc.next().replaceAll(\"-\", \"\");\n\t\t\t\tnum = num.replace('A', '2');\n\t\t\t\tnum = num.replace('B', '2');\n\t\t\t\tnum = num.replace('C', '2');\n\t\t\t\tnum = num.replace('D', '3');\n\t\t\t\tnum = num.replace('E', '3');\n\t\t\t\tnum = num.replace('F', '3');\n\t\t\t\tnum = num.replace('G', '4');\n\t\t\t\tnum = num.replace('H', '4');\n\t\t\t\tnum = num.replace('I', '4');\n\t\t\t\tnum = num.replace('J', '5');\n\t\t\t\tnum = num.replace('K', '5');\n\t\t\t\tnum = num.replace('L', '5');\n\t\t\t\tnum = num.replace('M', '6');\n\t\t\t\tnum = num.replace('N', '6');\n\t\t\t\tnum = num.replace('O', '6');\n\t\t\t\tnum = num.replace('P', '7');\n\t\t\t\tnum = num.replace('R', '7');\n\t\t\t\tnum = num.replace('S', '7');\n\t\t\t\tnum = num.replace('T', '8');\n\t\t\t\tnum = num.replace('U', '8');\n\t\t\t\tnum = num.replace('V', '8');\n\t\t\t\tnum = num.replace('W', '9');\n\t\t\t\tnum = num.replace('X', '9');\t\t\t\n\t\t\t\tnum = num.replace('Y', '9');\n\t\t\t\tif(numbers.containsKey(num))\n\t\t\t\t{\n\t\t\t\t\tint count = numbers.get(num);\n\t\t\t\t\tnumbers.remove(num);\n\t\t\t\t\tnumbers.put(num, count+1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tnumbers.put(num, 1);\n\t\t\t}\n\t\t\tboolean flag = false;\n\t\t\tfor(Map.Entry<String, Integer> e : numbers.entrySet())\n\n\t\t\t\tif(e.getValue() > 1)\n\t\t\t\t{\n\t\t\t\t\tflag = true;\n\t\t\t\t\tSystem.out.println(e.getKey().substring(0,3)+'-'+e.getKey().substring(3) + \" \"+ e.getValue());\n\t\t\t\t}\n\t\t\tif(!flag)\n\t\t\t\tSystem.out.println(\"No duplicates.\");\n\t\t}\n\t}\n\n}", "generated_code": "import java.util.ArrayList;\nimport java.util.PriorityQueue;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static ArrayList<PriorityQueue<Integer>> adj = new ArrayList<PriorityQueue<Integer>>(505);\n\tpublic static ArrayList<Integer> answers = new ArrayList<Integer>();\n\n\tpublic static void EulerianPath(int i,int numEdges) {\n\t\tint p = 0;\n\t\twhile (answers.size() < numEdges+1){\n\t\t\tp++;\n\t\t\tint min = adj.get(i).poll();\n\t\t\tadj.get(min).remove(i);\n\t\t\tanswers.add(p, min);\n\t\t\t//System.out.println(answers + \" \" + i);\n\t\t\twhile (adj.get(min).size() != 0) {\n\t\t\t\tp++;\n\t\t\t\ti = min;\n\t\t\t\tmin = adj.get(min).poll();\n\t\t\t\tadj.get(min).remove(i);\n\t\t\t\tanswers.add(p, min);\n\t\t\t}\n\t\t\t//System.out.println(answers);\n\t\t\tint index = answers.size() - 1;\n\t\t\twhile (index > 0 && adj.get(answers.get(index)).size() == 0) {\n\t\t\t\t//System.out.println(index);\n\t\t\t\tindex--;\n\t\t\t}\n\t\t\t\n\t\t\ti = answers.get(index);\n\t\t\tp = index;\n\t\t}\n\t\t\tint size = 0;\n\t\t\twhile (size < answers.size()) {\n\t\t\t\t//System.out.println(answers.get(size));\n\t\t\t\tsize++;\n\t\t\t}\n\t}\n\n\tpublic static void main(String args[]) {\n\n\t\tfor (int i = 0; i < 505; i++) {\n\t\t\tPriorityQueue<Integer> q = new PriorityQueue<Integer>();\n\t\t\tadj.add(q);\n\t\t}\n\t\tScanner in = new Scanner(System.in);\n\t\tint numEdges = in.nextInt();\n\t\tfor (int i = 0; i < numEdges; i++) {\n\t\t\tint weightOfver1 = in.nextInt();\n\t\t\tint weightOfver2 = in.nextInt();\n\t\t\tadj.get(weightOfver1).add(weightOfver2);\n\t\t\tadj.get(weightOfver2).add(weightOfver1);\n\t\t}\n\t\tint i = 0;\n\t\tboolean seen = false;\n\t\tint first = 0;\n\t\tfor (i = 0; i < 505; i++) {\n\t\t\tif (!seen && adj.get(i).size()!=0) {\n\t\t\t\tfirst = i;\n\t\t\t\tseen = true;\n\t\t\t}\n\t\t\tif (adj.get(i).size() % 2 == 1) {\n\t\t\t\tfirst = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tanswers.add(first);\n\t\tEulerianPath(first,numEdges);\n\t\tfor (int k=0; k<answers.size(); k++)\n\t\t\tSystem.out.println(answers.get(k));\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_2796_0__1_108012_13", "golden_code": "\nimport java.awt.List;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(System.in);\n        StringBuilder sb = new StringBuilder();\n\n        new F().Solve(in, sb);\n\n        System.out.println(sb.toString().trim());\n    }\n}\n\nclass F {\n\n    void Solve(Scanner in, StringBuilder sb) {\n        int hour = 0, minute = 0;\n        while (true) {\n            String str = in.next();\n            if (str.equals(\"###\")) {\n                hour--;\n                minute += 60;\n                hour += (minute / 60);\n                minute %= 60;\n                sb.append(String.format(\"%d:%02d%n\", hour, minute));\n                break;\n            }\n            if (str.equals(\"$$$\")) {\n                hour--;\n                minute += 60;\n                hour += (minute / 60);\n                minute %= 60;\n                sb.append(String.format(\"%d:%02d%n\", hour, minute));\n                hour = 0;\n                minute = 0;\n                continue;\n            }\n            str = str.replace('.', ':');\n            int sign = str.charAt(0) == '+' ? 1 : -1;\n            int h = 0;\n            int m = 0;\n            try {\n                h = Integer.parseInt(str.substring(1, str.indexOf(':')));\n            } catch (Exception e) {\n                h = 0;\n            }\n\n            try {\n                m = Integer.parseInt(str.substring(str.indexOf(':') + 1));\n            } catch (Exception e) {\n                m = 0;\n            }\n\n            hour += (h * sign);\n            minute += (m * sign);\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\nimport java.util.Vector;\n\nclass node\n{\n\tpublic node(String rand){name=rand;}\n\tpublic Vector<String>hamsaye=new Vector<String>();\n\tpublic Vector<Integer>meghdar=new Vector<Integer>();\n\tpublic void add_hamsaye(String rand,int megh)\n\t{\n\t\thamsaye.add(rand);\n\t\tmeghdar.add(megh);\n\t}\n\tpublic String name;\n\tpublic int dist;\n}\nclass yal\n{\n\tpublic yal(String a,String b,int c){first=a;last=b;tol=c;}\n\tpublic String first;\n\tpublic String last;\n\tpublic int tol;\n}\nclass all_node\n{\n\tpublic String hazf1;\n\tpublic String hazf2;\n\tpublic int  first;\n\tpublic int  last;\n\tpublic Vector<node>kol_node=new Vector<node>();\n\tpublic Vector<yal>kol_yal=new Vector<yal>();\n\tpublic void add_yal(yal rand){kol_yal.add(rand);}\n\tpublic void add_node(String first,String last,int megh)\n\t{\n\t\tint temp=0;\n\t\tfor(int i=0;i<kol_node.size();i++)\n\t\t{\n\t\t\tif(kol_node.get(i).name.equals(last))\n\t\t\t{\n\t\t\t\ttemp=1;\n\t\t\t}\n\t\t}\n\t\tif(temp==0)\n\t\t\tkol_node.add(new node(last));\n\t\t\n\t\tfor(int i=0;i<kol_node.size();i++)\n\t\t{\n\t\t\tif(kol_node.get(i).name.equals(first))\n\t\t\t{\n\t\t\t\tkol_node.get(i).add_hamsaye(last, megh);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tkol_node.add(new node(first));\n\t\tkol_node.get(kol_node.size()-1).add_hamsaye(last, megh);\n\t}\n\t\n\tpublic void Syso()\n\t{\n\t\tfor(int i=0;i<kol_node.size();i++)\n\t\t{\n\t\t\tSystem.out.println(kol_node.get(i).name+\"ee\");\n\t\t}\n\t}\n\tpublic void detect(String a,String b)\n\t{\n\t\tfor(int i=0;i<kol_node.size();i++)\n\t\t{\n\t\t\tif(kol_node.get(i).name.equals(a))\n\t\t\t\tfirst=i;\n\t\t\t\n\t\t\tif(kol_node.get(i).name.equals(b))\n\t\t\t\tlast=i;\n\t\t}\n\t}\n\tpublic int dijkstra()\n\t{\n\t\tVector<Integer>each_case=new Vector<Integer>();\n\n\t\tfor(int i=0;i<kol_yal.size();i++)\n\t\t{\n\t\t\teach_case.add(dikjstra1(kol_yal.get(i).first,kol_yal.get(i).last,kol_yal.get(i).tol));\n\t\t}\n\t\tint min=each_case.get(0);\n\t\tfor(int i=0;i<each_case.size();i++)\n\t\t{\n\t\t\tif(each_case.get(i)<min)\n\t\t\t\tmin=each_case.get(i);\n\t\t}\n\t\treturn min;\n\t}\n\tpublic int dikjstra1(String ff,String ll,int mm)\n\t{\n\t\tVector<node>Q=new Vector<node>();\n\n\t\tfor(int i=0;i<kol_node.size();i++)\n\t\t\tkol_node.get(i).dist=99999;\n\n\t\tkol_node.get(first).dist=0;\n\n\t\tfor(int i=0;i<kol_node.size();i++)\n\t\t{\n\t\t\tQ.add(kol_node.get(i));\n\t\t\t//System.out.println(Q.get(i).dist+\"====>\"+Q.get(i).name);\n\t\t}\n\t\t\t\n\t\twhile(Q.size()!=0)\n\t\t{\n\t\t\tint Counter=0;\n\t\t\tint min=0;\n\t\t\tint minimum=Q.get(0).dist;\n\t\t\tfor(int i=0;i<Q.size();i++)\n\t\t\t{\n\t\t\t\tif(Q.get(i).dist<minimum)\n\t\t\t\t{\n\t\t\t\t\tminimum=Q.get(i).dist;\n\t\t\t\t\tmin=i;\n\t\t\t\t}\n\t\t\t}\n\t\t//\tSystem.out.println(\"min=\"+min);\n\t\t//\tSystem.out.println(Q.get(min).dist+\":(\");\n\t\t\tif(Q.get(min).dist==99999)\n\t\t\t\treturn 021021;\n\n\n\t\t\tfor(int i=0;i<Q.get(min).hamsaye.size();i++)\n\t\t\t{\n\t\t\t//\tSystem.out.println(Q.get(min).name+\"........\"+mm);\n\t\t\t\tint alt=Q.get(min).dist+Q.get(min).meghdar.get(i);\n\t\t\t\t\n\t\t\t\tif(Q.get(min).name.equals(ff)&&Q.get(min).hamsaye.get(i).equals(ll))\n\t\t\t\t\talt=Q.get(min).dist+0;\n\t\t\t\tint ham=0;\n\t\t\t\t\n\t\t\t\t//if(Q.get(min).meghdar.get(i)>mm)\n\t\t\t\t//\talt=654321;\n\t\t\t\tfor(int j=0;j<Q.size();j++)\n\t\t\t\t{\n\t\t\t\t\tif(Q.get(j).name.equals(Q.get(min).hamsaye.get(i)))\n\t\t\t\t\t\tham=j;\n\t\t\t\t}\n\t\t\t//\tSystem.out.println(\"alt=\"+alt);\n\t\t\t\tif(alt<Q.get(ham).dist)\n\t\t\t\t\tQ.get(ham).dist=alt;\n\t\t\t}\n\t\t\tCounter++;\n\t\t\tif(Q.get(min).name.equals(kol_node.get(last).name))\n\t\t\t{\n\t\t\t//\tSystem.out.println(Q.get(min).dist+\" \"+mm+\" \"+Counter+\" \"+kol_node.get(last).name);\n\t\t\t//\tSystem.out.println(\"-------------------------------------------\");\n\t\t\t\treturn Q.get(min).dist;\n\t\t\t}\t\n\t\t\tQ.remove(min);\n\t\t}\n\t\treturn 021021;\n\t}//end of dijk\n\n}//end of class\n\npublic class Main \n{\n\tpublic static void main(String args[])\n\t{\n\t\tScanner vorodi=new Scanner(System.in);\n\t\twhile(vorodi.hasNext())\n\t\t{\n\n\t\t\tall_node random= new all_node();\n\t\t\tString first=vorodi.next();\n\t\t\tString last=vorodi.next();\n\t\t\tint u=vorodi.nextInt();\n\n\t\t\tfor(int i=0;i<u;i++)\n\t\t\t{\n\t\t\t\tString first1=vorodi.next();\n\t\t\t\tString last1=vorodi.next();\n\t\t\t\tint temp=vorodi.nextInt();\n\t\t\t\trandom.add_yal(new yal(first1,last1,temp));\n\t\t\t\trandom.add_node(first1,last1,temp);\n\t\t\t}\n\t\t\trandom.detect(first,last);\n\t\t\tSystem.out.println(random.dijkstra());\n\t\t}\n\n\t}//end of main\t\n};", "score": 0.0}
{"id": "SHARE_1_101367_7__1_2717_16", "golden_code": "import java.util.Scanner;\nimport java.lang.*;\npublic class Main\n{\n\tpublic static int pow(int x,int y)\n\t{\n\t\tif(y==0)\n\t\t\treturn 1;\n\t\tif(y==1)\n\t\t\treturn x;\n\t\telse \n\t\t\treturn (pow(x,y/2)*pow(x,y-y/2));\n\t}\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan=new Scanner(System.in);\n\t\tint n=scan.nextInt();\n\t\tString a=\"\";\n\t\tString sa=scan.nextLine();\n\t\tfor(int u=0;u<n;u++){\n\t\t\tif(scan.hasNextLine()){a=scan.nextLine();}\n\t\t\tStringBuffer b=new StringBuffer(a);\n\t\t\tint i=0,j,max=0;\n\t\t\twhile(i<b.length()-1)\n\t\t\t{\n\t\t\t\tif((b.charAt(i)=='[')&&(b.charAt(i+1)==']'))\n\t\t\t\t{\n\t\t\t\t\tj=i;\n\t\t\t\t\tint k=0;\n\t\t\t\t\twhile(j>=0){\n\t\t\t\t\t\tif(b.charAt(j)=='[')\n\t\t\t\t\t\t\tk++;\n\t\t\t\t\t\tj--;\n\t\t\t\t\t\t}\n\t\t\t\t\tif(k>max)\n\t\t\t\t\t\tmax=k;\n\t\t\t\t\tb.delete(i,i+2);\n\t\t\t\t\ti-=2;\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tSystem.out.println((u+1)+\" \"+pow(2,max));\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\t\n\t\n\tpublic static void main(String args[]){\n\t\tScanner s= new Scanner(System.in);\n\t\tint size=0;\n\t\tint c;\n\t\twhile (true){\n\t\t\tc=0;\n\t\t\tsize=s.nextInt();\n\t\t\tif(size==0)\n\t\t\t\tbreak;\n\t\t\tString s1=s.next();\n\t\t\tString s2=s.next();\n\t\t\tString s3=s.next();\n\t\t\tString s12=\"\";\n\t\t\tif(s3.length()!=2*size)\n\t\t\t\tSystem.out.println(-1);\n\t\t\telse{\n\t\t\t\twhile(!s12.equals(s3) && c<=50){\n\t\t\t\t\ts12=\"\";\n\t\t\t\t\tfor(int i=0;i<size;i++){\n\t\t\t\t\t\ts12 += s2.charAt(i);\n\t\t\t\t\t\ts12+= s1.charAt(i);\n\t\t\t\t\t}\n\t\t\t\t\ts1=\"\";\n\t\t\t\t\ts2=\"\";\n\t\t\t\t\tfor(int i=0;i<size;i++){\n\t\t\t\t\t\ts1+=s12.charAt(i);\n\t\t\t\t\t\ts2+=s12.charAt(i+size);\n\t\t\t\t\t}\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t\tif(s12.equals(s3))\n\t\t\t\t\tSystem.out.println(c);\n\t\t\t\telse if(c>50)\n\t\t\t\t\tSystem.out.println(-1);\n\t\t\t}\n\t\t}\n\t}\n\t\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_359__1_1001_72", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "generated_code": "import java.util.Scanner;\n\n\n\npublic class Main {\n\t  public static void main(String args[]) throws Exception{\n\t    Scanner scan = new Scanner(System.in);\n\t    while(true){\n\t\t    String pairOfStrings = scan.nextLine();\n\t\t    if( pairOfStrings.equals(\"EOF\") )\n\t\t    \tbreak;\n\t        String[] pairOfString = pairOfStrings.split(\" \");\n\t        \n\t        int result  = 0;\n\t        for(int i = 0 ; i < pairOfString.length ; i++){\n\t        result = result + Integer.parseInt(pairOfString[i]);\n\t\t  }\n\t        System.out.println(result);\n\t    }\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1329_9__1_2212_19", "golden_code": "import java.util.Scanner;\nimport java.util.Stack;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        for (int i = 0; i < n; i++) {\n            int m = s.nextInt();\n            int leftCounter = 0;\n            String str = \"\";\n            for (int j = 0; j < m; j++) {\n                int tmp = s.nextInt();\n                str += createString(tmp - leftCounter);\n                leftCounter = tmp;\n                str += \")\";\n            }\n            Node[] arr = createArray(str);\n            Stack<Node> stack = new Stack();\n            String res = \"\";\n            for (int j = 0; j < arr.length; j++) {\n                if (arr[j].str == ')') {\n                    int c=0;\n                    Node tmp = stack.pop();\n                    for (int k = tmp.Place; k < arr[j].Place; k++) {\n                        if(arr[k].str == '(')\n                            c++;\n                    }\n                    res += (arr[j].Place - tmp.Place - c + 1) + \" \";\n                } else {\n                    stack.push(arr[j]);\n                }\n            }\n            System.out.println(res.trim());\n        }\n    }\n\n    static String createString(int num) {\n        String res = \"\";\n        for (int i = 0; i < num; i++) {\n            res += \"(\";\n        }\n        return res;\n    }\n\n    static Node[] createArray(String str) {\n        Node[] stack = new Node[str.length()];\n        for (int i = 0; i < str.length(); i++) {\n            stack[i] = new Node(i, str.charAt(i));\n        }\n        return stack;\n    }\n}\n\nclass Node {\n\n    int Place;\n    char str;\n\n    public Node(int Place, char str) {\n        this.Place = Place;\n        this.str = str;\n    }\n}", "generated_code": "\nimport java.awt.Point;\nimport java.io.*;\nimport java.lang.reflect.Array;\nimport java.math.BigInteger;\nimport java.util.*;\nimport static java.lang.Math.*;\nimport java.math.BigDecimal;\n\n/**\n *\n * @author Mojtaba\n */\npublic class Main {\n\n    static ArrayList<Integer> primes = new ArrayList<Integer>();\n\n    public static void main(String[] args) throws IOException, Exception {\n        MyScanner in = new MyScanner(System.in);\n        //Scanner in = new Scanner(System.in);\n        //Scanner in = new Scanner(new File(\"input.txt\"));\n        PrintWriter writer = new PrintWriter(new BufferedOutputStream(System.out));\n        //PrintWriter writer = new PrintWriter(new File(\"output.txt\"));\n        StringBuilder sb = new StringBuilder(\"\");\n\n\n        int t = in.nextInt();\n        while (t-- > 0) {\n            int n = in.nextInt();\n            int[] a = in.nextIntegerArray(n);\n            double ave = ave(a);\n            int aboveAverage = 0;\n            for (int A : a) {\n                aboveAverage += A > ave ? 1 : 0;\n            }\n            sb.append(String.format(\"%.3f\", aboveAverage * 100.0 / n)).append(\"%\\n\");\n        }\n\n\n        writer.println(sb.toString().trim());\n        writer.flush();\n        in.close();\n    }\n\n    private static double ave(int[] a) {\n        double sum = 0.0;\n        for (int n : a) {\n            sum += n;\n        }\n        return sum / a.length;\n    }\n}\n\nclass MyScanner {\n\n    BufferedReader reader;\n    StringTokenizer tokenizer;\n\n    public MyScanner(InputStream stream) {\n        this.reader = new BufferedReader(new InputStreamReader(stream));\n    }\n\n    public int nextInt() throws IOException {\n        return Integer.parseInt(next());\n    }\n\n    public int[] nextIntegerArray(int n) throws IOException {\n        int[] a = new int[n];\n        for (int i = 0; i < a.length; i++) {\n            a[i] = nextInt();\n        }\n        return a;\n    }\n\n    public long[] nextLongArray(int n) throws IOException {\n        long[] a = new long[n];\n        for (int i = 0; i < a.length; i++) {\n            a[i] = nextLong();\n        }\n        return a;\n    }\n\n    public int nextInt(int radix) throws IOException {\n        return Integer.parseInt(next(), radix);\n    }\n\n    public long nextLong() throws IOException {\n        return Long.parseLong(next());\n    }\n\n    public long nextLong(int radix) throws IOException {\n        return Long.parseLong(next(), radix);\n    }\n\n    public double nextDouble() throws IOException {\n        return Double.parseDouble(next());\n    }\n\n    public BigInteger nextBigInteger() throws IOException {\n        return new BigInteger(next());\n    }\n\n    public BigInteger nextBigInteger(int radix) throws IOException {\n        return new BigInteger(next(), radix);\n    }\n\n    public String next() throws IOException {\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\n            tokenizer = new StringTokenizer(reader.readLine());\n            return this.next();\n        }\n        return tokenizer.nextToken();\n    }\n\n    public void close() throws IOException {\n        this.reader.close();\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_271__1_1001_242", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {            \n            System.out.println(in.nextInt()+in.nextInt());\n        }\n    }\n    \n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());}}", "score": 1.0}
{"id": "SHARE_1_1230_13__1_1230_81", "golden_code": "\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) throws IOException {\n\t\tScanner s = new Scanner(System.in);\n\t\tBigInteger num = s.nextBigInteger();\n\t\t\n\t\twhile(!num.equals(0)){\n\t\t\tString a = num.toString();\n\t\t\tif(a.equals(\"0\")){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tint sum =0;\n\t\t\tfor(int i=0 ; i < a.length() ; i++){\n\t\t\t\tsum = sum + a.charAt(i)-48;\t\t\t\t\n\t\t\t}\n\t\t\tint num1 = sum;\n\t\t\tsum=0;\n\t\t\twhile (true)\n\t\t        {\n\t\t            if (num1 > 0)\n\t\t            {\n\t\t                int dsum = num1 % 10;\n\t\t                num1 /= 10;\n\t\t                sum += dsum;\n\t\t            }\n\t\t            else if (sum > 9)\n\t\t            {\n\t\t                int dsum = sum % 10;\n\t\t                sum /= 10;\n\t\t                sum += dsum;\n\n\t\t            } else if (sum <= 9 ) break;\n\t\t        }\n\t\t        \n\t\t\t\n\t\t\tSystem.out.println(sum);\n\t\t\tnum = s.nextBigInteger();\n\t\t}\n\t\t\t\n\t}\n\t\t\t\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n                String n = s.nextLine();\n\t\twhile(!n.equals(\"0\")){\n\t\t\t int sum=0;\n                         for(char c:n.toCharArray())\n                             sum += (int)(c) - 48;\n                         if(sum > 9){\n                             n = Integer.toString(sum);\n                             continue;\n                         }\n                         System.out.println(sum);\n                         n = s.nextLine();\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1089_26__1_101071_4", "golden_code": "import java.util.*;\n\npublic class Main {\n\n    public static void main(String args[]) {\n        int a = -1;\n        float a1 = 0;\n        int b = -1;\n        float b1 = 0;\n        int c = -1;\n        float c1 = 0;\n        int i = 1;\n        Scanner in = new Scanner(System.in);\n        while (a != 0 && b != 0 && c != 0) {\n            \n            a = in.nextInt();\n            b = in.nextInt();\n            c = in.nextInt();\n            in.nextLine();\n            if (a == -1) {\n                System.out.println(\"Triangle #\" + i);\n                if (b > c) {\n                    System.out.println(\"Impossible.\");\n                    System.out.println(\"\");\n                    i++;\n                    continue;\n                }\n                a1 = (float) Math.sqrt(c * c - b * b);\n                System.out.printf(\"a = %.3f\", a1);\n                System.out.println(\"\");\n                i++;\n            }\n            if (b == -1) {\n                System.out.println(\"Triangle #\" + i);\n                if (a > c) {\n                    System.out.println(\"Impossible.\");\n                    System.out.println(\"\");\n                    i++;\n                    continue;\n                }\n                b1 = (float) Math.sqrt(c * c - a * a);\n                System.out.printf(\"b = %.3f\", b1);\n                System.out.println(\"\");\n                i++;\n            }\n            if (c == -1) {\n                System.out.println(\"Triangle #\" + i);\n                c1 = (float) Math.sqrt(a * a + b * b);\n                System.out.printf(\"c = %.3f\", c1);\n                System.out.println(\"\");\n                i++;\n            }\n            if(a != 0 && b != 0 && c != 0)\n                System.out.println(\"\");\n        }\n\n    }\n}\n", "generated_code": "\nimport java.io.FileNotFoundException;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) throws FileNotFoundException\n    {\n        Scanner in=new Scanner(System.in);\n        int T=in.nextInt();\n        for(int t=0;t<T;t++)\n        {\n            int N=in.nextInt();\n            in.nextLine();\n            String[]l=new String[N];\n            for(int n=0;n<N;n++)\n                l[n]=in.nextLine();\n            Arrays.sort(l);\n            boolean f=true;\n            for(int i=0;i<N-1 ;i++)\n                if(l[i+1].length()>=l[i].length()&&l[i+1].startsWith(l[i])){\n                    System.out.println(\"NO\");\n                    f=false;\n                    i=N;\n                }\n            if(f)\n                System.out.println(\"YES\");\n            \n        }      \n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_316__1_1001_468", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        int x1,x2;\n        while(input.hasNext())\n        {\n            x1=input.nextInt();\n            x2=input.nextInt();\n            x1+=x2;\n            System.out.println(x1);\n        }\n    }\n    \n}", "generated_code": "import java.util.Scanner;\npublic class Main{\n    static Scanner input=new Scanner(System.in);\n    public static void main(String[] args){\n        while(input.hasNext()){\n            int a=input.nextInt();\n            int b=input.nextInt();\n            int c=a+b;\n            System.out.println(\"\"+c);\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_485__1_2621_32", "golden_code": "import java.util.Scanner;   \n  \npublic class Main  \n{  \n    public static void main(String args[])  \n    {  \n        Scanner in = new Scanner(System.in);  \n        int a , b;\n        while(in.hasNext())  \n        {  \n            a = in.nextInt();  \n            b = in.nextInt();  \n            System.out.println(a+b);  \n        }  \n        \n        in.close();  \n    }  \n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        String name;\n        int test = input.nextInt();\n        input.nextLine();\n        while (test-- > 0) {\n            boolean c = false;\n            name = input.nextLine().toLowerCase();\n            for (int i = 0; i <= (name.length() / 2); i++) {\n                char b = name.charAt(i);\n                char e = name.charAt(name.length() - i - 1);\n                if ((b == 'a' | b == 'b' | b == 'c') & (e == 'a' | e == 'b' | e == 'c'))\n                    c = true;\n                else if ((b == 'd' | b == 'e' | b == 'f') & (e == 'd' | e == 'e' | e == 'f'))\n                    c = true;\n                else if ((b == 'g' | b == 'h' | b == 'i') & (e == 'g' | e == 'h' | e == 'i'))\n                    c = true;\n                else if ((b == 'j' | b == 'k' | b == 'l') & (e == 'j' | e == 'k' | e == 'l'))\n                    c = true;\n                else if ((b == 'm' | b == 'n' | b == 'o') & (e == 'm' | e == 'n' | e == 'o'))\n                    c = true;\n                else if ((b == 'p' | b == 'q' | b == 'r' | b == 's') & (e == 'p' | e == 'q' | e == 'r' | e == 's'))\n                    c = true;\n                else if ((b == 't' | b == 'u' | b == 'v') & (e == 't' | e == 'u' | e == 'v'))\n                    c = true;\n                else if ((b == 'w' | b == 'x' | b == 'y' | b == 'z') & (e == 'w' | e == 'x' | e == 'y' | e == 'z'))\n                    c = true;\n                else {\n                    c = false;\n                    break;\n                }\n            }\n            System.out.println(c?(\"YES\"):(\"NO\"));\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1324_30__1_2677_18", "golden_code": "import java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner input=new Scanner(System.in);\n\t\t\n\t\tStringBuilder carOrder=new StringBuilder(input.next());\n\t\tStringBuilder newCarOrder;\n\t\tint n,dataSet=1;\n\t\tString car;\n\t\tint index, lenLeft, lenRight;\n\t\t\n\t\twhile(!carOrder.toString().equals(\"STOP\")){\n\t\t\t\n\t\t\tn=input.nextInt();\n\t\t\tSystem.out.printf(\"Dataset #%d:  The initial order is %s.\\n\",dataSet++,carOrder);\n\t\t\t\n\t\t\twhile(n-->0){\n\t\t\t\tcar=input.next();\n\t\t\t\t\n\t\t\t\tindex=carOrder.indexOf(car);\n\t\t\t\tlenLeft=carOrder.substring(0,index).length();\n\t\t\t\tlenRight=carOrder.substring(index+1).length();\n\n\t\t\t\tif(lenLeft<=lenRight){\n\t\t\t\t\tnewCarOrder=new StringBuilder(carOrder.substring(0,index)).reverse();\n\t\t\t\t\tnewCarOrder.append(carOrder.substring(index+1));\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tnewCarOrder=new StringBuilder(carOrder.substring(0,index));\n\t\t\t\t\tnewCarOrder.append(new StringBuilder(carOrder.substring(index+1)).reverse());\n\t\t\t\t}\n\t\t\t\tcarOrder=newCarOrder;\n\t\t\t\tSystem.out.printf(\"After %s leaves, the order is %s.\\n\",car,carOrder);\n\t\t\t\t\n\t\t\t}\n\t\t\tcarOrder=new StringBuilder(input.next());\n\t\t\tif(!carOrder.toString().equals(\"STOP\"))\n\t\t\t\tSystem.out.println();\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\n\nclass Node {\n\n    Node left, right;\n    int element;\n\n    public Node(int element) {\n        this.element = element;\n    }\n}\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner x = new Scanner(System.in);\n        Main t = new Main();\n        Node Mainroot = null, root = null;\n        Mainroot = new Node(x.nextInt());\n        while (x.hasNext()) {\n            root = Mainroot;\n            t.insert(root, x.nextInt());\n        }\n        t.postorder(root);\n    }\n\n    public Node insert(Node p, int value) {\n        if (p == null) {\n\n            return new Node(value);\n        } else if (p.element < value) {\n            p.right = insert(p.right, value);\n\n        } else if (p.element > value) {\n            p.left = insert(p.left, value);\n\n        }\n        return p;\n    }\n\n    public void postorder(Node p) {\n        if (p == null) {\n            return;\n        }\n        postorder(p.left);\n        postorder(p.right);\n        System.out.println(p.element);\n    }\n}", "score": 0.0}
{"id": "SHARE_1_2847_48__1_2400_28", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    int time = scanner.nextInt();\n    for (int i = 0 ; i < time ; i ++ ){\n      int n = scanner.nextInt();\n      double [] arr = new double[n];\n      for ( int j = 0 ; j < n ; j ++){\n        arr[j] = scanner.nextInt();\n      }\n      double min = arr[0];\n      double max = arr[0];\n      double sum = 0 ; \n      for (int j = 0 ; j < n ; j ++ ){\n        if (arr[j] < min  ){\n          min = arr[j];\n        }\n        if ( arr[j] > max){\n          max = arr[j];\n        }\n        sum +=arr[j];\n      }\n      \n      if( (min + max)/2 - sum/n < 1 && (min + max)/2 - sum/n > -1){\n        System.out.println(\"Yes\");\n      }else {\n        System.out.println(\"No\");\n      }\n    }\n  }\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    static int[][] m = {{1, 1}, {1, 0}};\n    \n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        while(s.hasNext()){\n            int n = s.nextInt();\n            int[][] res = fib(n);\n            int[][] mat = {{11,0},{7,0}};\n            multiply(res,mat);\n            if(n == 0 || n == 1)\n                System.out.println(\"no\");\n            else if(res[0][0] == 0)\n                System.out.println(\"yes\");\n            else \n                System.out.println(\"no\");\n        }\n    }\n    \n    static int[][] fib(int n) {\n        int[][] mat = {{1, 1}, {1, 0}};\n        pow(mat, n - 1);\n        return mat;\n    }\n\n    static void pow(int[][] f, int n) {\n        if (n == 0 || n== 1) {\n            return;\n        }\n        pow(f, n / 2);\n        multiply(f, f);\n        if (n % 2 == 1) \n            multiply(f, m);\n    }\n\n    static void multiply(int[][] f, int[][] m) {\n        int w = f[0][0] * m[0][0] + f[0][1] * m[1][0];\n        int x = f[1][0] * m[0][0] + f[1][1] * m[1][0];\n        int y = f[0][0] * m[0][1] + f[0][1] * m[1][1];\n        int z = f[1][0] * m[0][1] + f[1][1] * m[1][1];\n        f[0][0] = w%3;\n        f[1][0] = x%3;\n        f[0][1] = y%3;\n        f[1][1] = z%3;\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_208__1_1001_140", "golden_code": "import java.util.Scanner ;\nimport java.lang.String ;\npublic class Main\n{\n\tpublic static void main ( String[] args )\n\t{\n\t\tScanner input = new Scanner ( System.in ) ;\n\t\twhile ( true )\n\t\t{\n\t\t\ttry \n\t\t\t{\n\t\t\t\tSystem.out.println( ( input.nextInt() + input.nextInt() ) ) ;\n\t\t\t}\n\t\t\tcatch ( Exception e )\n\t\t\t{\n\t\t\t\tbreak ;\n\t\t\t}\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main\n{\npublic static void main(String areg[]){\nScanner t=new Scanner(System.in);\nint num1;int num2;int sum;\nwhile(t.hasNext()){\nnum1=t.nextInt();\nnum2=t.nextInt();\nsum=num1+num2;\nSystem.out.println(sum);\n    }\n}\n}\n\n", "score": 1.0}
{"id": "SHARE_1_1079_17__1_1230_30", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        ArrayList<Integer> Numbers = new ArrayList<Integer>();\n        Boolean R = true;\n        int I = 0;\n        while (R){\n            Numbers.add(input.nextInt());\n            if (Numbers.get(I) == 0) R = false;\n            I++;\n        }\n        System.out.println(\"PERFECTION OUTPUT\");\n        for (int i = 0 ; i < (Numbers.size()-1) ; i++){\n            int Sum = 0;\n            for (int j = 1 ; j <= Numbers.get(i) ; j++){\n                if (Numbers.get(i)%j == 0) Sum += j;\n            }\n            Sum -= Numbers.get(i);\n            if (Sum == Numbers.get(i)){\n                System.out.printf(\"%5d  %s\\n\" , Numbers.get(i) , \"PERFECT\");\n            }\n            else if(Sum > Numbers.get(i)){\n                System.out.printf(\"%5d  %s\\n\" , Numbers.get(i) , \"ABUNDANT\");\n            }\n            else if (Sum < Numbers.get(i)) {\n                System.out.printf(\"%5d  %s\\n\" , Numbers.get(i) , \"DEFICIENT\");\n            }\n        }\n        System.out.printf(\"END OF OUTPUT\\n\");\n    }\n}\n", "generated_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner std = new Scanner(System.in);\n\t\t\n\t\twhile(true){\n\t\t\tString n = std.next();\n\t\t\tif(n.length() ==1 && n.charAt(0)=='0')\n\t\t\t\tbreak;\n\t\t\twhile(true){\n\t\t\t\tBigInteger milad = new BigInteger(\"0\");\n\t\t\t\tfor(int i = 0 ; i<n.length() ; i++){\n\t\t\t\t\tString tt = \"\";\n\t\t\t\t\ttt = tt + n.charAt(i);\n\t\t\t\t\tBigInteger temp = new BigInteger(tt);\n\t\t\t\t\tmilad = milad.add(temp);\n\t\t\t\t}\n\t\t\t\tString temp2 = milad.toString();\n\t\t\t\tif(temp2.length() == 1 ) {\n\t\t\t\t\tSystem.out.println(temp2);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tn = temp2;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_108012_19__1_2811_23", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\nclass node{\n\tpublic node(){};\n\tpublic ArrayList<child> child = new ArrayList<child>();\n\tpublic String name;\n\tpublic int dis;\n\tpublic boolean visited = false;\n}\n\nclass child {\n\tpublic child(){};\n\tpublic String nameCh;\n\tpublic int vertex;\n}\n\npublic class Main {\n\n\tpublic static ArrayList<node> nodesOfGraph = new ArrayList<node>();\n\tpublic static ArrayList<node> q = new ArrayList<node>();\n\n\tpublic static int nodeIs(ArrayList<node> temp, String nodeName){\n\t\tfor (int i = 0; i < temp.size(); i++) {\n\t\t\tif(temp.get(i).name.contentEquals(nodeName) == true)\n\t\t\t\treturn i;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tpublic static void makeGraph(String fa, String ch, int v) {\n\n\t\tint index = nodeIs(nodesOfGraph, fa);\t\t\t//find father or create father\n\t\tif (index != -1) {\n\t\t\tchild tmp = new child();\n\t\t\ttmp.nameCh = ch;\n\t\t\ttmp.vertex = v;\n\t\t\tnodesOfGraph.get(index).child.add(tmp);\n\t\t}\n\t\telse{\n\t\t\tif (nodesOfGraph.isEmpty() == true) {\n\t\t\t\tnode tempnode = new node();\n\t\t\t\ttempnode.name = fa;\n\t\t\t\ttempnode.dis = Integer.MAX_VALUE;\n\t\t\t\tnodesOfGraph.add(tempnode);\n\n\t\t\t\tchild tmp = new child();\n\t\t\t\ttmp.nameCh = ch;\n\t\t\t\ttmp.vertex = v;\n\t\t\t\tnodesOfGraph.get(0).child.add(tmp);\n\t\t\t}else{\n\t\t\t\tnode tempnode = new node();\n\t\t\t\ttempnode.name = fa;\n\t\t\t\ttempnode.dis = Integer.MAX_VALUE;\n\t\t\t\tnodesOfGraph.add(tempnode);\n\n\t\t\t\tchild tmp = new child();\n\t\t\t\ttmp.nameCh = ch;\n\t\t\t\ttmp.vertex = v;\n\t\t\t\tnodesOfGraph.get(nodesOfGraph.size()-1).child.add(tmp);}\n\t\t}\n\t\tindex = nodeIs(nodesOfGraph, ch);\t\t\t//find child or create child\n\t\tif (index != -1) {\n\t\t\treturn;\n\t\t}\n\t\telse{\n\t\t\tnode tempnode = new node();\n\t\t\ttempnode.name = ch;\n\t\t\ttempnode.dis = Integer.MAX_VALUE;\n\t\t\tnodesOfGraph.add(tempnode);\n\t\t}\n\t}\n\n\tpublic static void updateNodes (int indexfather){\n\t\tint indextmp, tmp;\n\t\tfor (int i = 0; i < nodesOfGraph.get(indexfather).child.size(); i++) {\n\t\t\tindextmp = nodeIs(nodesOfGraph, nodesOfGraph.get(indexfather).child.get(i).nameCh);\n\t\t\tif( (nodesOfGraph.get(indexfather).dis + nodesOfGraph.get(indexfather).child.get(i).vertex) <= nodesOfGraph.get(indextmp).dis ){\n\t\t\t\tnodesOfGraph.get(indextmp).dis = nodesOfGraph.get(indexfather).dis + nodesOfGraph.get(indexfather).child.get(i).vertex;\n\n\t\t\t}\n\t\t\ttmp = nodeIs(q, nodesOfGraph.get(indextmp).name) ; \n\t\t\tif ( (tmp == -1) ) {\n\t\t\t\tif ( (nodesOfGraph.get(indextmp).visited != true) ) {\n\t\t\t\t\tnodesOfGraph.get(indextmp).visited = true;\n\t\t\t\t\tq.add( nodesOfGraph.get(indextmp) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static int findMin(){\n\t\tint index = 0;\n\t\tif(q.size() == 0)\n\t\t\treturn -1;\n\t\telse if (q.size() == 1)\n\t\t\treturn index;\n\t\telse{\n\t\t\tfor (int i = 0; i <= (q.size()-1); i++) {\n\t\t\t\tif ( i == q.size()-1) {\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\n\t\t\t\tif ( q.get(i).dis >= q.get(i+1).dis ) {\n\t\t\t\t\tindex = i+1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn index;\n\t\t}\n\t}\n\n\tpublic static int dijkstra(String source, String destination){\n\t\tint index = nodeIs(nodesOfGraph, source);\n\t\tnodesOfGraph.get(index).dis = 0;\n\t\tq.add( nodesOfGraph.get(index) );\n\t\tupdateNodes (index);\n\t\tq.remove(0);\n\n\t\twhile(q.isEmpty() == false){\n\t\t\tindex = findMin();\n\t\t\tif (q.get(index).name.contentEquals(destination) == true) {\n\t\t\t\treturn q.get(index).dis;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tint minInGraph = nodeIs(nodesOfGraph, q.get(index).name);\n\t\t\t\tupdateNodes(minInGraph);\n\t\t\t\tq.remove(index);\n\t\t\t}\n\t\t}\n\t\treturn -1000;\n\t}\n\n\tpublic static void defaultDistance(){\n\t\tfor (int i = 0; i < nodesOfGraph.size(); i++) {\n\t\t\tnodesOfGraph.get(i).dis = Integer.MAX_VALUE;\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner input = new Scanner(System.in);\n\n\t\tint minOfDis = Integer.MAX_VALUE;\n\t\tString source;\n\t\tString destination;\n\t\tString fatmp;\n\t\tString chtmp;\n\t\tint vertmp, vertex;\n\n\t\twhile ( input.hasNext() ) {\n\t\t\tminOfDis = Integer.MAX_VALUE;\n\t\t\tsource = input.next();\n\t\t\tdestination = input.next();\n\t\t\tvertex = input.nextInt();\n\t\t\tfor (int i = 0; i < vertex; i++) {\n\t\t\t\tfatmp = input.next();\n\t\t\t\tchtmp = input.next();\n\t\t\t\tvertmp = input.nextInt();\n\t\t\t\tmakeGraph(fatmp, chtmp, vertmp);\n\t\t\t}\n\n\t\t\tint vertexOfChild;\n\t\t\tfor (int i = 0; i < nodesOfGraph.size(); i++) {\n\t\t\t\tfor (int j = 0; j < nodesOfGraph.get(i).child.size(); j++) {\n\t\t\t\t\tvertexOfChild = nodesOfGraph.get(i).child.get(j).vertex;\n\t\t\t\t\tnodesOfGraph.get(i).child.get(j).vertex = 0;\n\t\t\t\t\tint tempOfDijkstra = dijkstra(source, destination);\n\t\t\t\t\tif ( minOfDis > tempOfDijkstra ) {\n\t\t\t\t\t\tminOfDis = tempOfDijkstra;\n\t\t\t\t\t}\n\t\t\t\t\tnodesOfGraph.get(i).child.get(j).vertex = vertexOfChild;\n\t\t\t\t\tdefaultDistance();\n\t\t\t\t\tq.clear();\n\t\t\t\t\tfor (int k = 0; k < nodesOfGraph.size(); k++) {\n\t\t\t\t\t\tnodesOfGraph.get(k).visited = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(minOfDis);\n\t\t\tq.clear();\n\t\t\tnodesOfGraph.clear();\n\t\t} // end of while\n//\t\tSystem.out.println();\n\t}\n\n}", "generated_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner in = new Scanner(System.in);\n\n        int t = in.nextInt();\n\n        for (int i = 0; i < t; i++) {\n            int m = in.nextInt();\n            int n = in.nextInt();\n            int[] array = new int[m];\n            int[] array2 = new int[n];\n\n            for (int j = 0; j < m; j++) {\n                array[j] = in.nextInt();\n\n            }\n            for (int j = 0; j < n; j++) {\n                array2[j] = in.nextInt();\n            }\n            Arrays.sort(array);\n            Arrays.sort(array2);\n            String s = \"\";\n            for (int j = 0; j < m; j++) {\n                boolean b = true;\n                for (int k = 0; k < n; k++) {\n                    if (array[j] == array2[k]) {\n                        b = false;\n                    }\n                }\n                if (b) {\n                    s += array[j] + \",\";\n                }\n\n            }\n            if (s.length() != 0) {\n                s = s.substring(0, s.length() - 1);\n\n            }\n            System.out.println(s);\n        }\n\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_460__1_1001_70", "golden_code": "import java.util.Scanner;\npublic class Main\n{\n    public static void main(String args[])\n    {\n        int a, b;\n        Scanner i = new Scanner(System.in);\n         while (i.hasNext() == true )\n             System.out.println(i.nextInt() + i.nextInt());\n    }\n}", "generated_code": "import java.util.*;\n\npublic class Main {\n    public static void main(String []argv){ \n      int x;\n      Scanner in = new Scanner(System.in);\n      while (true){\n        if(!in.hasNext())\n            break;\n        x = in.nextInt();\n        x+= in.nextInt();\n        System.out.println(x);\n       }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1903_4__1_1903_1", "golden_code": "import java.util.Scanner;\n\n\npublic class Main{\n    public static void main(String[] args) {\n        Scanner s=new Scanner(System.in);\n        while(true){\n            int n= s.nextInt();\n            if(n==-1)\n                break;\n            int sum=0;\n            int d=0;\n            for(int i=0;i<n;i++){\n              int  speed=s.nextInt();\n              int r=s.nextInt();\n              sum+=speed*(r-d);\n              d=r;\n            }\n            System.out.printf(\"%d miles\\n\",sum);\n        }\n    }\n}\n", "generated_code": "import java.util.*;\n\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner s = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint n = s.nextInt();\n\t\t\tif(n == -1)\n\t\t\t\tbreak;\n\t\t\tint[] speed = new int[n];\n\t\t\tint[] time = new int[n];\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tspeed[i] = s.nextInt();\n\t\t\t\ttime[i] = s.nextInt();\n\t\t\t}\n\t\t\tint res=speed[0]*time[0];\n\t\t\tfor(int i=1;i<n;i++){\n\t\t\t\tres += speed[i]*(time[i]-time[i-1]);\n\t\t\t}\n\t\t\tSystem.out.println(res+\" miles\");\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1228_14__1_1228_6", "golden_code": "\nimport java.util.Scanner;\n//ShareCode\n\npublic class Main{\n    static double fact(int i){\n        if(i==0 || i==1) return 1;\n        return fact(i-1)*i;\n    }\n    public static void main(String args[]){\n        Scanner cin=new Scanner(System.in);\n        System.out.println(\"n e\");\n        System.out.println(\"- -----------\");\n        for(int j=0;j<=9;j++){\n            int num=j;\n            double e=0;\n            for(int i=0;i<=num;i++)\n                e+=1/fact(i);\n            if(e<=2) System.out.println(j+\" \"+(int)e);\n            else if(e==2.5)System.out.println(j+\" \"+\"2.5\");\n            else{\n                System.out.print(j+\" \");\n                System.out.printf(\"%.9f\\n\",e);\n            }\n        }\n    }//main Method\n}//Class Main", "generated_code": "\nimport java.text.DecimalFormat;\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        DecimalFormat f = new DecimalFormat(\"#.000000000\");\n\n        int k = 0;\n        int a = 0;\n        while (a<10) {\n            \n            double b = 0.00;\n            for (int i = 0; i <= a; i++) {\n                b += (1 / (double) fact(i));\n            }\n            if (k==0) {\n                System.out.println(\"n e\");\n                System.out.println(\"- -----------\");\n                k++;\n            }\n            if (a == 0 || a == 1) {\n                System.out.println(a+\" \"+(int) b);\n            } else if (a == 2) {\n                System.out.println(a+\" \"+String.format(\"%.1f\", b));\n            } else {\n                System.out.println(a+\" \"+f.format(b));\n            }\n            a++;\n        }\n    }\n    static float fact(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        } else {\n            return n * fact(n - 1);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1009_86__1_2644_10", "golden_code": "class Main{\n\tpublic static void main(String[] args) throws Exception {\n\t\tjava.util.Scanner input=new java.util.Scanner(System.in);\n\t\tfloat b=0;\n\t\tfor (int i = 1; i <= 12; i++) {\n\t\t\tb+=Float.parseFloat(input.next());\n\t\t}\n\t\tSystem.out.printf(\"$%.2f\\n\",b/12);\t\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while (input.hasNext()) {\n            String s = input.nextLine();\n            String n = \"\";\n            int l = s.length();\n            char[] c = s.toCharArray();\n            for (int i = 0; i < l; i++) {\n                switch (c[i]) {\n                    case 'A':\n                        n += \"E\";\n                        break;\n                    case 'B':\n                        n += \"P\";\n                        break;\n                    case 'C':\n                        n += \"L\";\n                        break;\n                    case 'D':\n                        n += \"R\";\n                        break;\n                    case 'E':\n                        n += \"A\";\n                        break;\n                    case 'F':\n                        n += \"G\";\n                        break;\n                    case 'G':\n                        n += \"F\";\n                        break;\n                    case 'H':\n                        n += \"S\";\n                        break;\n                    case 'I':\n                        n += \"O\";\n                        break;\n                    case 'J':\n                        n += \"X\";\n                        break;\n                    case 'K':\n                        n += \"V\";\n                        break;\n                    case 'L':\n                        n += \"C\";\n                        break;\n                    case 'M':\n                        n += \"W\";\n                        break;\n                    case 'N':\n                        n += \"T\";\n                        break;\n                    case 'O':\n                        n += \"I\";\n                        break;\n                    case 'P':\n                        n += \"B\";\n                        break;\n                    case 'Q':\n                        n += \"Z\";\n                        break;\n                    case 'R':\n                        n += \"D\";\n                        break;\n                    case 'S':\n                        n += \"H\";\n                        break;\n                    case 'T':\n                        n += \"N\";\n                        break;\n                    case 'U':\n                        n += \"Y\";\n                        break;\n                    case 'V':\n                        n += \"K\";\n                        break;\n                    case 'W':\n                        n += \"M\";\n                        break;\n                    case 'X':\n                        n += \"J\";\n                        break;\n                    case 'Y':\n                        n += \"U\";\n                        break;\n                    case 'Z':\n                        n += \"Q\";\n                        break;\n                    case 'a':\n                        n += \"e\";\n                        break;\n                    case 'b':\n                        n += \"p\";\n                        break;\n                    case 'c':\n                        n += \"l\";\n                        break;\n                    case 'd':\n                        n += \"r\";\n                        break;\n                    case 'e':\n                        n += \"a\";\n                        break;\n                    case 'f':\n                        n += \"g\";\n                        break;\n                    case 'g':\n                        n += \"f\";\n                        break;\n                    case 'h':\n                        n += \"s\";\n                        break;\n                    case 'i':\n                        n += \"o\";\n                        break;\n                    case 'j':\n                        n += \"x\";\n                        break;\n                    case 'k':\n                        n += \"v\";\n                        break;\n                    case 'l':\n                        n += \"c\";\n                        break;\n                    case 'm':\n                        n += \"w\";\n                        break;\n                    case 'n':\n                        n += \"t\";\n                        break;\n                    case 'o':\n                        n += \"i\";\n                        break;\n                    case 'p':\n                        n += \"b\";\n                        break;\n                    case 'q':\n                        n += \"z\";\n                        break;\n                    case 'r':\n                        n += \"d\";\n                        break;\n                    case 's':\n                        n += \"h\";\n                        break;\n                    case 't':\n                        n += \"n\";\n                        break;\n                    case 'u':\n                        n += \"y\";\n                        break;\n                    case 'v':\n                        n += \"k\";\n                        break;\n                    case 'w':\n                        n += \"m\";\n                        break;\n                    case 'x':\n                        n += \"j\";\n                        break;\n                    case 'y':\n                        n += \"u\";\n                        break;\n                    case 'z':\n                        n += \"q\";\n                        break;\n                    default: n+=c[i];\n                }\n            }\n            System.out.println(n);\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_2732_32__1_108013_9", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        for (int i = 0; i < n; i++) {\n            int x = s.nextInt();\n            int y = s.nextInt();\n            int res = 0;\n            if (x == y) {\n                res = 0;\n            } else if (x == y + 2) {\n                res = 2;\n                x-=2;\n            } else {\n                System.out.println(\"No Number\");\n                continue;\n            }\n            for (int j = 0; j < x; j++) {\n                if (j % 2 == 0) {\n                    res += 1;\n                } else {\n                    res += 3;\n                }\n            }\n            System.out.println(res);\n        }\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (true) {\n            String l = cin.nextLine();\n            char c1 = l.charAt(0);\n            char c2 = 0;\n            String l2;\n            l2 = Character.toString(c1);\n            for (int i=0 ; i<l.length()-1 ; i++) {\n                c1 = l.charAt(i);\n                c2 = l.charAt(i+1);\n                \n                int n1 = Character.getNumericValue(c1); // A to Z --> 10 to 35\n                int n2 = Character.getNumericValue(c2);\n                \n                if (n1>=10 && n1<=35 && n2>=0 && n2<=9) {\n                    l2 += \"^\" + c2;\n                }\n                else\n                    l2 += c2;\n            }\n            \n            System.out.println(l2);\n        }\n        }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_356__1_1001_335", "golden_code": "import java.util.Scanner;\n\n/**\n * Created by utabrayan on 25/11/2015.\n */\npublic class Main {\n    public static void main(String[]arg){\n        Scanner s=new Scanner(System.in);\n        while (s.hasNextLong()){\n            String[]st=s.nextLine().split(\" \");\n            long n1=Long.parseLong(st[0]);\n            long n2=Long.parseLong(st[1]);\n            System.out.println((n1+n2));\n        }\n\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {            \n            System.out.println(in.nextInt()+in.nextInt());\n        }\n    }\n    \n}\n", "score": 1.0}
{"id": "SHARE_1_1001_321__1_1001_396", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\n/**\n *\n * @author NP\n */\npublic class Main {\n\n\n    \n    static Scanner s=new Scanner(System.in);\n     static void sum(){\n     while(s.hasNextInt()){\n       int  a=s.nextInt();\n       int  b=s.nextInt();\n         int c=a+b;\n         System.out.println(c);\n         \n         \n                \n     }    \n     }\n    \n    public static void main(String[] args) {\n     \n     \n   sum();\n     \n        \n    }\n    \n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n\t    public static void main(String[] args) {\n\t    \t        Scanner scanner=new Scanner(System.in);\n\t    \t                while (scanner.hasNext()){\n\t    \t                \t            System.out.println(scanner.nextInt()+scanner.nextInt());\n\t    \t                }\n\t    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2610_11__1_2634_4", "golden_code": "\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.StringTokenizer;\n\n/**\n *\n * @author Mbt925\n * sample: 2 1 2 1 1 2 1 2\n * mods by 4: 0:2 1:2 2:3 3:2\n * when mods change two times from 1 to 1, it means sum of numbers in thing range is definitely equals to 4\n * when mods change three times from 2 to 2, it means there are two ranges which their sum is 4, of course they are contiguous, so their sum will be dividable by 4 too.\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     * @throws java.io.FileNotFoundException\n     */\n    public static void main(String[] args) throws FileNotFoundException, IOException {\n        new Solve().solve();\n    }\n}\n\nclass Solve {\n    final int MAXN= 50000;\n    final int MAXD= 1000000;\n    int[] cumSums= new int[MAXN+1];\n    int[] modsCounts= new int[MAXD];\n    public void solve() throws FileNotFoundException, IOException{\n        BufferedReader reader= new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter writer= new PrintWriter(new BufferedOutputStream(System.out));\n\n        int t= Integer.parseInt(reader.readLine());\n\n        for (int i = 0; i < t; i++) {\n            StringTokenizer tokenizer= new StringTokenizer(reader.readLine());\n            int d= Integer.parseInt(tokenizer.nextToken());\n            int n= Integer.parseInt(tokenizer.nextToken());\n            // cumulative sum\n            tokenizer= new StringTokenizer(reader.readLine());\n            cumSums[0]=0;\n            for (int j = 1; j <= n; j++){\n                cumSums[j]=cumSums[j-1]+Integer.parseInt(tokenizer.nextToken());\n                cumSums[j]%=d;\n            }\n            // count mod by each number\n            modsCounts[0]=1;\n            for (int j = 1; j <= n; j++)\n                modsCounts[cumSums[j]]++;\n            // count sequences\n            long count=0;\n            for (int j = 0; j < d; j++) {\n                if (modsCounts[j]>=2)\n                    count += (long)modsCounts[j]*(modsCounts[j]-1)/2;\n            }\n            writer.println(count);\n            \n            Arrays.fill(cumSums, 0);\n            Arrays.fill(modsCounts, 0);\n        }\n        writer.flush();\n    }\n}", "generated_code": "import java.math.BigInteger;\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        while (s.hasNext()) {\n            BigInteger n = s.nextBigInteger();\n            int res=1;\n            boolean[] count = new boolean[10];\n            lbl: for (; true; res++) {\n                BigInteger tmp = n.multiply(BigInteger.valueOf(res));\n                for(char c:tmp.toString().toCharArray()){\n                    count[c-'0'] = true;\n                }\n                for(int i=0;i<10;i++){\n                    if(!count[i])\n                        continue lbl;\n                }\n                break;\n            }\n            System.out.println(res);\n        }\n    }\n\n}", "score": 0.0}
{"id": "SHARE_1_1001_59__1_1001_245", "golden_code": "\nimport java.util.Scanner;\nimport java.util.Vector;\n\npublic class Main {\n    public static void main(String[] args){\n        Scanner in= new Scanner (System.in);\n        Vector<Integer>nums=new Vector<Integer>();\n        while(in.hasNext())\n            nums.addElement(in.nextInt());\n        for(int i=0,j=1;i<nums.size()/2;j=j+2,i++)\n        {\n            System.out.println(nums.elementAt(j-1)+nums.elementAt(j));\n        }\n    }\n    \n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tArrayList<Integer> result = new ArrayList<Integer>();\n\t\tScanner s = new Scanner(System.in);\n\t\twhile (s.hasNext()) {\n\t\t\tint a = s.nextInt();\n\t\t\tint b = s.nextInt();\n\t\t\tresult.add(a + b);\n\t\t}\n\t\tfor (int i = 0; i < result.size(); i++)\n\t\t\tSystem.out.println(result.get(i));\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_109022_0__1_2732_19", "golden_code": "/*\nID: a.elahi1\nLANG: JAVA\nTASK: gg\n*/\n\nimport java.util.*;\nimport java.io.*;\n\nimport static java.lang.Math.*;\n\npublic class Main\n{\n\tpublic static void main(String[] args) throws Exception\n\t{\n\t\tScanner scanner = new Scanner(System.in);\n\t\tSystem.out.println(\"PERFECTION OUTPUT\");\n\t\twhile(true)\n\t\t{\n\t\t\tint n = scanner.nextInt();\n\t\t\tif(n==0)\n\t\t\t\tbreak;\n\n\t\t\tArrayList<Integer> d = get(n);\n\t\t\tCollections.sort(d);\n\t\t\tint sum = 0;\n\t\t\t for(int i = 0 ; i<d.size() - 1; i++)\n\t\t\t\t sum+=d.get(i);\n\n\t\t\tif(sum==n)\n\t\t\t{\n\t\t\t\tSystem.out.printf(\"%5s\",n);\n\t\t\t\tSystem.out.println(\"  PERFECT\");\n\t\t\t}\n\t\t\telse if(sum < n)\n\t\t\t{\n\t\t\t\tSystem.out.printf(\"%5s\",n);\n\t\t\t\tSystem.out.println(\"  DEFICIENT\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSystem.out.printf(\"%5s\",n);\n\t\t\t\tSystem.out.println(\"  ABUNDANT\");\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"END OF OUTPUT\");\n\t}\n\n\tprivate static ArrayList<Integer> get(int n)\n\t{\n\t\tArrayList<Integer> res = new ArrayList<Integer>();\n\t\tfor(int i = 1 ; i*i<=n ; i++)\n\t\t{\n\t\t\tif(n%i == 0)\n\t\t\t{\n\t\t\t\tif(!res.contains(i))\n\t\t\t\t\tres.add(i);\n\t\t\t\tif(!res.contains(n/i))\n\t\t\t\t\tres.add(n/i);\n\n\t\t\t}\n\n\t\t}\n\t\treturn res;\n\t}\n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int output=0;\n        int x,y;\n        for (int i = 0; i < n; i++) {\n            x=scanner.nextInt();\n            y=scanner.nextInt();\n            if(y==x || y==x-2){\n                if(x%2==0){\n                    output=x+y;\n                }\n                else{\n                    output=x+y-1;\n                }\n                System.out.println(output);\n            }\n            else{\n                System.out.println(\"No Number\");\n            }\n            \n        }\n        \n        \n        \n        \n    }\n    \n\n}", "score": 0.0}
{"id": "SHARE_1_1018_32__1_1018_6", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\twhile (n != 0) {\n\t\t\tint[] a1 = new int[n], a2 = new int[n];\n\t\t\tint s1 = 0, s2 = 0;\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\ta1[i] = sc.nextInt();\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\ta2[i] = sc.nextInt();\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (a1[j] > a2[j]) {\n\t\t\t\t\tif (a1[j] > a2[j] + 1)\n\t\t\t\t\t\ts1 += a1[j];\n\t\t\t\t\telse\n\t\t\t\t\t\ts2 += 2 * a2[j] + 1;\n\t\t\t\t} else if(a1[j] < a2[j]){\n\t\t\t\t\tif (a2[j] > a1[j] + 1)\n\t\t\t\t\t\ts2 += a2[j];\n\t\t\t\t\telse\n\t\t\t\t\t\ts1 += 2 * a1[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.print(\"A has \"+s1+\" points. B has \"+s2+\" points.\\n\");\n\t\t\tn = sc.nextInt();\n\t\t\tif(n==0)\n\t\t\t\tbreak;\n\t\t\tSystem.out.print(\"\\n\");\n\t\t}\n\n\t}\n}\n", "generated_code": "import java.util.*;\nclass Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tint n=0,i,j,m,k,a=0,b=0,s=0;\n\t\tScanner scan = new Scanner(System.in);\n\t\tint[] f;\n\t\tf = new int[3000];\n\t\tint[] g;\n\t\tg = new int[3000];\n\t\twhile(scan.hasNextInt())\n\t\t{\n\t\t\ta = 0;\n\t\t\tb = 0;\n\t\t\tn = scan.nextInt();\n\t\t\t\tif((s!=0) && (n!=0))\n\t\t\t\t\tSystem.out.println();\n\t\t\tif(n==0)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tm = n;\n\t\t\tfor(i=0;i<m;i++)\n\t\t\t\tf[i] = scan.nextInt();\n\t\t\tfor(j=0;j<m;j++)\n\t\t\t\tg[j] = scan.nextInt();\n\t\t\tfor(k=0;k<m;k++)\n\t\t\t{\n\t\t\t\tif(f[k]-g[k]>1)\n\t\t\t\t\ta+=f[k];\n\t\t\t\tif(g[k]-f[k]>1)\n\t\t\t\t\tb+=g[k];\n\t\t\t\tif((f[k]-g[k]==1) && (f[k] != 2))\n\t\t\t\t\tb += f[k]+g[k];\n\t\t\t\tif((g[k]-f[k]==1) && (g[k] != 2))\n\t\t\t\t\ta += f[k]+g[k];\n\t\t\t\tif((f[k]-g[k]==1) && (f[k] == 2))\n\t\t\t\t\tb += 6;\n\t\t\t\tif((g[k]-f[k]==1) && (g[k] == 2))\n\t\t\t\t\ta += 6;\n\t\t\t\ts++;\n\t\t\t}\n\t\t\tif(n!=0)\n\t\t\t\tSystem.out.println(\"A has \"+a+\" points. B has \"+b+\" points.\");\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1009_146__1_2717_37", "golden_code": "import java.net.URL;\nimport java.io.File;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Main{\n\tpublic static void main(String[] args)\n\t{\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\t\tdouble money = 0;\n\t\tdouble average = 0;\n\t\tfor(int i = 0; i < 12; i++)\n\t\t{\n\t\t\tString str = null;\n\t\t\ttry {\n\t\t\t\tstr = br.readLine();\n\t\t\t} catch (IOException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tmoney = Double.parseDouble(str);\n\t\t\t\n\t\t\taverage += money;\n\t\t}\n\t\taverage /= 12;\n\t\taverage = round(average, 2);\n\t\tSystem.out.println(\"$\" + String.valueOf(average));\n\t}\n\tpublic static double round(double value, int places) {\n\t    if (places < 0) throw new IllegalArgumentException();\n\n\t    long factor = (long) Math.pow(10, places);\n\t    value = value * factor;\n\t    long tmp = Math.round(value);\n\t    return (double) tmp / factor;\n\t}\n}", "generated_code": "import java.util.*;\npublic class Main {\n\tpublic static void main(String[]args){\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\t\n\t\t\n\t\twhile(n!=0){\n\t\t\tboolean state=false;\n\t\t\tString str=\"\";\n\t\t\tint counter=1;\n\t\t\tString s1= sc.next();\n\t\t\tString s2= sc.next();\n\t\t\tString s= sc.next();\n\t\t\twhile(counter<=50){\n\t\t\t\tchar [] S1=new char[n];\n\t\t\t\tchar [] S2=new char[n];\n\t\t\t\tchar [] S=new char[n];\n\t\t\t\tString [] S12=new String[2*n];\n\t\t\t\tstr=\"\";\n\t\t\t\tfor( int i=0;i<n;i++){\n\t\t\t\t\tS1[i]=s1.charAt(i);\n\t\t\t\t\tS2[i]=s2.charAt(i);\n\t\t\t\t\tstr=str+S2[i]+S1[i];\n\t\t\t\t}\n\t\t\t\tif(str.equals(s)){\n\t\t\t\t\tSystem.out.println(counter);\n\t\t\t\t\tcounter=50;\n\t\t\t\t\tstate=true;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tS1=str.substring(0, n).toCharArray();\n\t\t\t\t\tS2=str.substring(n, 2*n).toCharArray();\n\t\t\t\t\ts1=str.substring(0, n);\n\t\t\t\t\ts2=str.substring(n, 2*n);\n\t\t\t\t}\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t\tif(!state){\n\t\t\t\tSystem.out.println(\"-1\");\n\t\t\t}\n\t\t\tn=sc.nextInt();\n\t\t}\n\t}\n}\n\n\n", "score": 0.0}
{"id": "SHARE_1_1001_505__1_1001_267", "golden_code": "import java.util.*;\npublic class Main{\n\tpublic static void main(String [] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tint num1 = sc.nextInt();\n\t\t\tint num2 = sc.nextInt();\n\t\t\tint sum = num1 + num2;\n\t\t\tSystem.out.println(sum);\n\t\t}\n\t}\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {\n            int x = in.nextInt();\n            int y = in.nextInt();\n            System.out.println((x + y));\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_89__1_1001_232", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\n\t\twhile (in.hasNextInt())\n\t\t\tSystem.out.println(in.nextInt() + in.nextInt());\n\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n    \n\t\t@SuppressWarnings(\"resource\")\n\t\tScanner input = new Scanner(System.in);\n        while (input.hasNext())\n            System.out.println(input.nextInt()+input.nextInt());\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2830_7__1_106015_9", "golden_code": "\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        ArrayList<String> al=new ArrayList<String>();\n        int t;\n        String num = null;\n        t = in.nextInt();\n        while (t-- > 0) {\n            al.clear();\n            boolean noSeq = true;\n            int m = in.nextInt();\n            String s = in.next();\n            s = sortString(s);\n\n            for (int k = 1; k <= m; k++) {\n                if (al.contains(s)) {\n                    System.out.println(\"R \" + k);\n                    noSeq = false;\n                    break;\n                }\n                if (C(s)) {\n                    System.out.println(\"C \" + k);\n                    noSeq = false;\n                    break;\n                }\n                num = s;\n                al.add(s);\n                StringBuilder sb = new StringBuilder(s);\n                BigInteger a = new BigInteger(sb.toString());\n                BigInteger b = new BigInteger(sb.reverse().toString());\n                BigInteger c = a.add(b);\n                s = sortString(c.toString());\n            }\n\n            if (noSeq) {\n                System.out.println(num);\n            }\n        }\n    }\n\n    public static String sortString(String s) {\n        char[] ch = s.toCharArray();\n        Arrays.sort(ch);\n        s = new String(ch);\n        if (s.charAt(0) == '0') {\n            s = s.substring(s.lastIndexOf('0') + 1);\n        }\n        return s;\n    }\n\n    public static boolean C(String s) {\n        return s.matches(\"(1233+4444)|(5566+7777)\");\n    }\n}\n", "generated_code": "import java.math.BigInteger;\nimport java.util.Scanner;\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in=new Scanner(System.in);\n        while(in.hasNext()){\n\t\tBigInteger a=new BigInteger(\"0\"),b=new BigInteger(\"1\"),sum=new BigInteger(\"0\");\n                int n=in.nextInt();\n\t\tif(n==2)sum=sum=new BigInteger(\"1\");\n\t\tfor(int i=2;i<n;i++){\n\t\t\tsum=a.multiply(new BigInteger(\"2\")).add(b);\n\t\t\ta=b;\n\t\t\tb=sum;\n\t\t}\n\t\tSystem.out.println(sum);\n\t}\n    }\n\n}\n", "score": 0.0}
{"id": "SHARE_1_2732_41__1_2732_4", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner in = new Scanner(System.in);\n\n        int a = in.nextInt();\n\n        for (int i = 0; i < a; i++) {\n            int x = in.nextInt();\n            int y = in.nextInt();\n            if (x != y && y + 2 != x) {\n                System.out.println(\"No Number\");\n            } else {\n                if (x % 2 == 0) {\n                    System.out.println(x + y);\n                } else {\n\n                    System.out.println(x + y - 1);\n\n                }\n\n            }\n\n        }\n\n    }\n}", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\npublic static void main(String[] args) {\n\tScanner in = new Scanner(System.in);\n\tint t=in.nextInt();\n\twhile(t-->0){\n\t\tint a=in.nextInt();\n\t\tint b=in.nextInt();\n\t\tint ans=0;\n\t\tif(a==b){\n\t\t\tif(a%2==0)\n\t\t\t\tans=a*2;\n\t\t\telse\n\t\t\t\tans=2*a-1;\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t\telse if(a-b==2){\n\t\t\tif(a%2==0)\n\t\t\t\tans=a*2-2;\n\t\t\telse\n\t\t\t\tans=a*2-3;\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t\telse\n\t\t\tSystem.out.println(\"No Number\");\n\t}\n}\n}\n", "score": 1.0}
{"id": "SHARE_1_2400_0__1_2400_7", "golden_code": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n//package fibonacci.again;\n\nimport java.math.BigInteger;\nimport java.util.Scanner;\n\n/**\n *\n * @author AGC\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        int a[]=new int[8];\n        \n        \n        a[0]=1;\n        a[1]=2;\n        a[3]=0;\n        BigInteger n1 =new BigInteger(\"3\");\n        for (int i = 3; i < a.length; i++) {\n            a[i]=(a[i-1]+a[i-2])%3;\n            \n        }\n        Scanner it=new Scanner(System.in);\n        int n;\n         /*n=it.nextInt();\n            if (a[n]%3==0) {\n                System.out.print(\"Yes\");\n            }else{\n                System.out.print(\"No\");\n            }*/\n        while (it.hasNext()) {\n             n=it.nextInt();\n             n=n%8;\n            if (a[n]==0) {\n                \n                System.out.println(\"yes\");\n            }else{\n               ;\n                System.out.println(\"no\");\n            }\n            \n        }\n        // TODO code application logic here\n    }\n    \n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (in.hasNextInt()) {\n            int n = in.nextInt();\n            System.out.println((n % 4 == 2 ? \"yes\" : \"no\"));\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_99__1_1001_361", "golden_code": "import java.util.Scanner;\n\npublic class Main{\n    public static void main( String[] a ){\n        Scanner i = new Scanner( System.in );\n        try{\n        while( 1>0 ){\n            System.out.println( i.nextInt() + i.nextInt() );\n        }\n        }catch( Exception e ){}\n    }\n}", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNextInt()){\n\t\t\tSystem.out.println(sc.nextInt()+sc.nextInt());\n\t\t}\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_356__1_1001_59", "golden_code": "import java.util.Scanner;\n\n/**\n * Created by utabrayan on 25/11/2015.\n */\npublic class Main {\n    public static void main(String[]arg){\n        Scanner s=new Scanner(System.in);\n        while (s.hasNextLong()){\n            String[]st=s.nextLine().split(\" \");\n            long n1=Long.parseLong(st[0]);\n            long n2=Long.parseLong(st[1]);\n            System.out.println((n1+n2));\n        }\n\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\nimport java.util.Vector;\n\npublic class Main {\n    public static void main(String[] args){\n        Scanner in= new Scanner (System.in);\n        Vector<Integer>nums=new Vector<Integer>();\n        while(in.hasNext())\n            nums.addElement(in.nextInt());\n        for(int i=0,j=1;i<nums.size()/2;j=j+2,i++)\n        {\n            System.out.println(nums.elementAt(j-1)+nums.elementAt(j));\n        }\n    }\n    \n}\n", "score": 1.0}
{"id": "SHARE_1_1001_497__1_1001_322", "golden_code": "import java.util.*;\n\nclass Main{\n   public static void main(String[] args){\n     Scanner sc = new Scanner(System.in);\n     while(sc.hasNext()){\n       int a = sc.nextInt();\n       int b = sc.nextInt();\n       int res = a+b;\n       System.out.println(res);\n     }\n   }\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        int a, b;\n\n        Scanner inp = new Scanner(System.in);\n\n        while (inp.hasNext()) {\n            a = inp.nextInt();\n            b = inp.nextInt();\n            System.out.println(a + b);\n\n        }\n    }\n\n}\n", "score": 1.0}
{"id": "SHARE_1_108014_13__1_1104_14", "golden_code": "import java.util.*;\nimport java.io.*;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tInputStreamReader red = new InputStreamReader(System.in);\n\t\tBufferedReader in = new BufferedReader(red);\n\t\ttry {\n\t\t\tint T = Integer.parseInt(in.readLine());\n\t\t\tArrayList<Long> outputs = new ArrayList<Long>();\n\n\t\t\tfor (int k = 0; k < T; k++) {\n\t\t\t\tString[] line = in.readLine().trim().split(\" \");\n\t\t\t\tArrayList<Long> inputs = new ArrayList<Long>();\n\t\t\t\tfor (int i = 0; i < line.length; i++) {\n\t\t\t\t\tinputs.add(Long.parseLong(line[i]));\n\t\t\t\t}\n\t\t\t\tlong output = -1;\n\t\t\t\tfor (int i = 0; i < line.length; i++) {\n\t\t\t\t\tfor (int j = i + 1; j < line.length; j++) {\n\t\t\t\t\t\toutput = max(output, bmm(inputs.get(i), inputs.get(j)));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\toutputs.add(output);\n\t\t\t}\n\n\t\t\tfor (int k = 0; k < T; k++) {\n\t\t\t\tSystem.out.println(outputs.get(k));\n\t\t\t}\n\t\t} catch (IOException a) {\n\t\t\tSystem.out.println(\"\");\n\n\t\t} catch (Exception a) {\n\t\t\tSystem.out.println(\"\");\n\t\t} finally {\n\t\t\tin.close();\n\t\t}\n\t}\n\n\tpublic static long max(long a, long b) {\n\t\tif (a > b)\n\t\t\treturn a;\n\t\telse\n\t\t\treturn b;\n\t}\n\n\tpublic static long bmm(long a, long b) {\n\t\tif (a == 0)\n\t\t\treturn b;\n\n\t\tif (b == 0)\n\t\t\treturn a;\n\n\t\tif (a == 1 || b == 1)\n\t\t\treturn 1;\n\n\t\tif (a == b)\n\t\t\treturn a;\n\n\t\tlong min = a;\n\t\tlong max = b;\n\n\t\tif (b < a) {\n\t\t\tmin = b;\n\t\t\tmax = a;\n\t\t}\n\n\t\twhile (min > 1) {\n\t\t\tif (max % min == 0)\n\t\t\t\treturn min;\n\n\t\t\tlong t = max;\n\t\t\tmax = min;\n\t\t\tmin = t % min;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n}\n\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n  Scanner p=new Scanner(System.in);\n  int t=p.nextInt();\n  p.nextLine();\n  for(int i=0;i<t;i++){\n      System.out.println(r(p.nextLine()));\n  }\n    }\n    static String r(String s){\n\t\tString x = \"\";\n\t\tfor(char ch : s.toCharArray()){\n\t\t\tx = ch+\"\"+x;\n\t\t}\n\t\treturn x;\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_234__1_1001_107", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}\n", "generated_code": "import java.util.*;\nclass Main\n{\n    public static void main(String[] args)\n    {\n        Scanner s = new Scanner (System.in);\n        int a,b;\n        while (s.hasNextInt())\n        {\na=s.nextInt();\nb=s.nextInt();\nSystem.out.println(a+b);\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_236__1_1001_180", "golden_code": "\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.InputMismatchException;\nimport java.util.Scanner;\nimport java.util.Set;\n\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(System.in);\n        //FastScanner in = new FastScanner((InputStream) System.in);\n        int a,b;\n        while(in.hasNext()){\n            a=in.nextInt();\n            b=in.nextInt();\n            System.out.println((a+b));\n        }\n    }\n}\n\nclass FastScanner {\n\n    private InputStream stream;\n    private byte[] buffer = new byte[1024];\n    private int curChar;\n    private int numChars;\n\n    public FastScanner(InputStream stream) {\n        this.stream = stream;\n    }\n\n    int read() {\n        if (numChars == -1) {\n            throw new InputMismatchException();\n        }\n        if (curChar >= numChars) {\n            curChar = 0;\n            try {\n                numChars = stream.read(buffer);\n            } catch (IOException e) {\n                throw new InputMismatchException();\n            }\n            if (numChars <= 0) {\n                return -1;\n            }\n        }\n        return buffer[curChar++];\n    }\n\n    boolean isWhiteSpaceChar(int c) {\n        return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n    }\n\n    boolean isEndline(int c) {\n        return c == '\\n' || c == '\\r' || c == -1;\n    }\n\n    int nextInt() {\n        return Integer.parseInt(next());\n    }\n\n    long nextLong() {\n        return Long.parseLong(next());\n    }\n\n    double nextDouble() {\n        return Double.parseDouble(next());\n    }\n\n    String next() {\n        int c = read();\n        while (isWhiteSpaceChar(c)) {\n            c = read();\n        }\n        StringBuilder res = new StringBuilder();\n        do {\n            res.appendCodePoint(c);\n            c = read();\n        } while (!isWhiteSpaceChar(c));\n        return res.toString();\n    }\n\n    String nextLine() {\n        int c = read();\n        while (isEndline(c)) {\n            c = read();\n        }\n        StringBuilder res = new StringBuilder();\n        do {\n            res.appendCodePoint(c);\n            c = read();\n        } while (!isEndline(c));\n        return res.toString();\n    }\n}", "generated_code": "import java.util.*;\n\npublic class Main {\n\tpublic static void main(String args[]) {\n\t\tArrayList<Integer> r=new ArrayList<Integer>();\n\t\tScanner sc=new Scanner(System.in);\n\t\twhile (sc.hasNext()) {\n\t\t\tint a=sc.nextInt();\n\t\t\tint b=sc.nextInt();\n\t\t\tr.add((Integer)(a+b));\n\t\t}\n\t\t\n\t\tfor (int i=0;i<r.size();i++)\n\t\t\tSystem.out.println((int)r.get(i));\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2212_12__1_2212_22", "golden_code": "\nimport java.text.DecimalFormat;\nimport java.util.Scanner;\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        DecimalFormat f = new DecimalFormat(\"0.000\");\n        Scanner sc = new Scanner(System.in);\n        float sum = 0;\n        float fin = 0;\n        float max = 0;\n        float perc = 0;\n        int tc = sc.nextInt();\n        while (tc > 0) {\n            int NS = sc.nextInt();\n            fin = 0;\n            sum = 0;\n            max = 0;\n            perc = 0;\n            int[] number = new int[NS];\n            for (int i = 0; i < NS; i++) {\n\n                number[i] = sc.nextInt();\n                sum += number[i];\n\n            }\n            perc = sum / NS;\n            for (int i = 0; i < number.length; i++) {\n                if (number[i] > perc) {\n                    max++;\n                }\n            }\n\n            fin = (max * 100) / NS;\n            System.out.println(f.format(fin) + \"%\");\n            tc--;\n        }\n\n    }\n\n}\n", "generated_code": "//package codeforces;\n\nimport java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class Main\n{\n    public static void main( String[] args )\n    {\n        Scanner cin = new Scanner ( System.in );\n        DecimalFormat df = new DecimalFormat(\"#.###\");\n        df.setMinimumFractionDigits( 3 );\n        df.setMaximumFractionDigits( 3 );\n        int tc = cin.nextInt();\n        for ( int q = 0 ; q < tc ; q++ )\n        {\n            int n = cin.nextInt();\n            int[] array = new int[n];\n            long sum = 0;\n            for( int i = 0 ; i < n ; i++ )\n            {\n                array[i] = cin.nextInt();\n                sum += array[i];\n            }\n            double avg = sum / n;\n            int num = 0;\n            for ( int i = 0 ; i < n ; i++ )\n            {\n                if ( array[i] > avg )\n                {\n                    num++;\n                }\n            }\n            double output = (double) num / n;\n            output *= 100;\n            System.out.println( df.format( output ) + \"%\" );\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_101329_0__1_2121_64", "golden_code": "import java.util.*;\npublic class Main {\n\tstatic Scanner scan = new Scanner(System.in);\n\tpublic static void main(String[] args) \n\t{\n\t\tint tc = scan.nextInt();\n\t\twhile(tc-->0)\n\t\t{\n\t\t\trun();\n\t\t}\n\t}\n\tprivate static void run() \n\t{\n\t\tlong n = scan.nextLong();\n\t\tif(n == 0 || n == 1)\n\t\t{\n\t\t\tSystem.out.println(2);\n\t\t\treturn ;\n\t\t}\n\t\tfor(;;n++)\n\t\t\tif(prime(n))\n\t\t\t\tbreak;\n\t\tSystem.out.println(n);\n\t}\n\tprivate static boolean prime(long n) \n\t{\n\t\tfor(long i = 2 ; i*i <= n ; i++)\n\t\t\tif(n%i==0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n}\n", "generated_code": "\nimport java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while(input.hasNext()){\n        int n = input.nextInt();\n        BigInteger big0 ;\n        BigInteger big1 = new  BigInteger(\"1\");\n        BigInteger big2 = new  BigInteger(\"1\");\n        for (int i = 2; i < n; i++) {\n            big0=big1;\n            big1=big2;\n            big2=big1.add(big0);\n        }\n        System.out.println(big2);\n    }\n    }\n    \n}\n", "score": 0.0}
{"id": "SHARE_1_1006_87__1_1006_129", "golden_code": "\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.InputMismatchException;\nimport java.util.Scanner;\nimport java.util.Set;\n\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(System.in);\n        //FastScanner in = new FastScanner((InputStream) System.in);\n        float f;\n        f=in.nextFloat();\n        StringBuilder sb=new StringBuilder();\n        while(f!=0f){\n            float sum=0;\n            float i=2;\n            for(i=2;sum<f;i++){\n                sum+=(1f/i);\n            }\n            sb.append((int)(i-2)).append(\" card(s)\").append(\"\\n\");\n            f=in.nextFloat();\n        }\n        System.out.println(sb.toString().trim());\n    }\n}\n\nclass FastScanner {\n\n    private InputStream stream;\n    private byte[] buffer = new byte[1024];\n    private int curChar;\n    private int numChars;\n\n    public FastScanner(InputStream stream) {\n        this.stream = stream;\n    }\n\n    int read() {\n        if (numChars == -1) {\n            throw new InputMismatchException();\n        }\n        if (curChar >= numChars) {\n            curChar = 0;\n            try {\n                numChars = stream.read(buffer);\n            } catch (IOException e) {\n                throw new InputMismatchException();\n            }\n            if (numChars <= 0) {\n                return -1;\n            }\n        }\n        return buffer[curChar++];\n    }\n\n    boolean isWhiteSpaceChar(int c) {\n        return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n    }\n\n    boolean isEndline(int c) {\n        return c == '\\n' || c == '\\r' || c == -1;\n    }\n\n    int nextInt() {\n        return Integer.parseInt(next());\n    }\n\n    long nextLong() {\n        return Long.parseLong(next());\n    }\n\n    double nextDouble() {\n        return Double.parseDouble(next());\n    }\n\n    String next() {\n        int c = read();\n        while (isWhiteSpaceChar(c)) {\n            c = read();\n        }\n        StringBuilder res = new StringBuilder();\n        do {\n            res.appendCodePoint(c);\n            c = read();\n        } while (!isWhiteSpaceChar(c));\n        return res.toString();\n    }\n\n    String nextLine() {\n        int c = read();\n        while (isEndline(c)) {\n            c = read();\n        }\n        StringBuilder res = new StringBuilder();\n        do {\n            res.appendCodePoint(c);\n            c = read();\n        } while (!isEndline(c));\n        return res.toString();\n    }\n}", "generated_code": "import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner in =new Scanner(System.in);\n\t\t\n\t\twhile (true)\n\t\t{\n\t\t\tdouble a=in.nextDouble();\n\t\t\tif (a==0.00)\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tdouble c=0;\n\t\t\tdouble r=2;\n\t\t\tint count=0;\n\t\t\twhile(c<a)\n\t\t\t{\n\t\t\t\tc+=(1/r);\n\t\t\t\tr++;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tSystem.out.println(count+\" card(s)\");\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\t\n\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_220__1_108014_14", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n       Scanner a = new Scanner (System.in);\n        int b , c;\n        while(a.hasNext())\n        {\n        b=a.nextInt();\n        c=a.nextInt();\n        System.out.println(b+c);\n        }\n    }\n    \n}\n", "generated_code": "import java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Scanner;\nimport java.util.StringTokenizer;\nimport java.util.Vector;\n\n\npublic class Main \n{\n\n    public static void main(String[] args) throws IOException\n    {\n        Scanner cin=new Scanner(System.in);\n        ArrayList<Long> kho=new ArrayList<Long>();\n      long maxmin;\n      //***\n      int N=1;\n    String a;\n   String NN= cin.nextLine();\n    N=Integer.parseInt(NN);\n   for(int k=0;k<N;k++)\n   {\n\t      Vector <Long> ss=new Vector<Long>();\n\n\t   maxmin=0;\n      a=cin.nextLine();\n     StringTokenizer st = new StringTokenizer(a);\n     while (st.hasMoreTokens())\n     {\n         String numb = st.nextToken();\n         long num = Long.parseLong(numb);\n         if(num>0)\n        \t ss.add(num);\n         if(num<0)\n        \t ss.add(num*(-1));\n     }\n     //***\n     for(int i=0;i<ss.size();++i)\n     {\n    \t if(maxmin>ss.get(i))continue;\n    \t for(int j=i+1;j<ss.size();++j)\n    \t {\n    \t\t if(maxmin>ss.get(j))continue;\n    \t\t //***\n    \t\t long temp=1;\n    \t\t long l1=ss.get(i);\n    \t\t long l2=ss.get(j);\n    \t\t if(l2>l1){temp=l1;l1=l2;l2=temp;}\n    \t\t while(temp!=0)\n    \t\t {\n    \t\t\t temp=l1%l2;\n    \t\t\t l1=l2;\n    \t\t\t l2=temp;\n    \t\t }\n    \t\t if(maxmin<l1)maxmin=l1;\n    \t\t \n    \t\t \n    \t }\n    \t\n     }\n     //System.out.println(maxmin);\n     kho.add(maxmin);\n     \n   } \n   for(int vvv=0;vvv<kho.size();++vvv)\n\t   System.out.println(kho.get(vvv));\n   }   \n   }\n", "score": 0.0}
{"id": "SHARE_1_1903_8__1_1230_57", "golden_code": "\nimport java.util.Scanner;\n\n\npublic class Main {\n\n    public static void main(String[] args) {\n       Scanner in=new Scanner(System.in);\n       while(true){\n           int n=in.nextInt();\n           if(n==-1)\n               System.exit(0);\n           int[] speed=new int[n];\n           int[] time=new int[n];\n           int sum=0;\n           for (int i = 0; i < n; i++) {\n               speed[i]=in.nextInt();\n               time[i]=in.nextInt();\n               if(i!=0){\n               sum +=speed[i]*(time[i]-time[i-1]);\n               }else{\n               sum +=speed[i]*time[i];\n               }\n           }\n           System.out.println(sum+\" miles\");\n      }\n    }\n}\n", "generated_code": "import java.util.Scanner;\nclass Main\n{\n\tpublic static int S( int a)\n\t{\n\t\tint m;\n\t\tm=a%10;\n\t\twhile(a!=0)\n\t\t{\n\t\t\ta=a/10;\n\t\t\tm=m+a%10;\n\t\t}\n\t\tif(m<10)\n\t\t\treturn m;\n\t\treturn S(m);\n\t}\n\tpublic static void main(String args[])\n\t{\n\t\tScanner scan= new Scanner(System.in);\n\t\tString s=\"\";\n\t\twhile(true)\n\t\t{\n\t\t\tint a=0;\n\t\t\ts=scan.nextLine();\n\t\t\tif(s.equals(\"0\"))\n\t\t\t\tbreak;\n\t\t\tfor(int i=0; i<s.length(); i++)\n\t\t\t\t\ta=a+s.charAt(i)-'0';\n\t\t\tSystem.out.println(S(a));\n\t\t}\n\t}\n}\n\t\t\t\n\t\t\t\n", "score": 0.0}
{"id": "SHARE_1_2311_9__1_1099_33", "golden_code": "\nimport java.awt.Point;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(System.in);\n        long l, i, answer, times, temp;\n\n        PrintWriter writer = new PrintWriter(new BufferedOutputStream(System.out));\n        while (in.hasNext()) {\n            l = in.nextInt();\n            answer = times = 0;\n            for (i = 0; i < l; i++) {\n                temp = in.nextLong();\n                if (times == 0) {\n                    answer = temp;\n                    times++;\n                } else if (temp != answer) {\n                    times--;\n                } else {\n                    times++;\n                }\n            }\n            //sb.append(answer).append(\"\\n\");\n            writer.println(answer);\n        }\n        //System.out.println(sb.toString().trim());\n        writer.flush();\n    }\n}", "generated_code": "import java.util.Scanner ;\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in) ;\n\t\tboolean flag = true ;\n\t\tint num = sc.nextInt() ;\n\t\tint id = 1 ;\n\t\twhile(flag){\n\t\t\tint[] blocks = new int[num] ;\n\t\t\tint temp = 0 ;\n\t\t\tint sum = 0 ;\n\t\t\tfor(int i=0 ; i<num ; i++){\n\t\t\t\ttemp = sc.nextInt() ;\n\t\t\t\tblocks[i] = temp ;\n\t\t\t\tsum += temp ;\n\t\t\t}\n\t\t\tint mid = sum/num ;\n\n\t\t\tint result = 0 ;\n\t\t\tfor(int i=0 ; i<num ; i++){\n\t\t\t\tif(blocks[i] > mid)\n\t\t\t\t\tresult += blocks[i] - mid ;\n\t\t\t}\n\t\t\tSystem.out.println(\"Set #\" + id) ;\n\t\t\tid ++ ;\n\t\t\tSystem.out.println(\"The minimum number of moves is \" + result + \".\\n\") ;\n\t\t\tnum = sc.nextInt() ;\n\t\t\tif(num == 0)\n\t\t\t\tflag = false ;\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2737_57__1_2737_32", "golden_code": "import java.util.Scanner;\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint n = scanner.nextInt();\n\t\tfor (int i =0;i<n;i++){\n\t\t\tint a = scanner.nextInt();\n\t\t\tint b = scanner.nextInt();\n\t\t\tlong sum =0;\n\t\t\tfor (int j = 0;j<a;j++)\n\t\t\t\tfor (int k=j;k<j+b;k++)\n\t\t\t\t\tsum +=k;\n\t\t\tSystem.out.println(sum);\n\t\t}\n\t}\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tint num = sc.nextInt();\n\t\t\n\t\tfor(int i = 0 ; i <  num; i++)\n\t\t{\n\t\t\t\n\t\t\tint row = sc.nextInt();\n\t\t\tint column = sc.nextInt();\n\t\t\t\n\t\t\tint sumX = (row-1)*row/2 * column;\n\t\t\tint sumY = (column-1)*column/2 * row;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tSystem.out.println( sumX+sumY );\n\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2806_16__1_2805_0", "golden_code": "import java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint t = scanner.nextInt();\n\t\tfor (int i = 0; i < t; i++) {\n\t\t\tint n = scanner.nextInt();\n\t\t\tdouble sum = 0;\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tsum += scanner.nextInt();\n\t\t\t}\n\t\t\tdouble avg = sum / n;\n\t\t\n\t\t\tdouble count = n;\n\t\t\tfor (int j = 2; j <= n; j++) {\n\t\t\t\tdouble s = tarkib(j, n) * fact(j);\n\t\t\t\tcount += s;\n\t\t\t\tsum +=s * (avg * j);\n\t\t\t}\n\t\t\n\t\t\tSystem.out.println(new DecimalFormat(\"0.000000\").format(sum / count));\n\t\t}\n\t}\n\n\tprivate static long tarkib(int r, int n) {\n\t\treturn fact(n) / (fact(n - r) * fact(r));\n\t}\n\n\tprivate static long fact(long t) {\n\t\tlong f = 1;\n\t\tfor (int i = 2; i <= t; i++)\n\t\t\tf *= i;\n\t\treturn f;\n\t}\n}\n", "generated_code": "\nimport java.awt.Point;\nimport java.io.BufferedOutputStream;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.lang.reflect.Array;\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.PriorityQueue;\nimport java.util.Random;\nimport java.util.StringTokenizer;\nimport static java.lang.Math.*;\nimport java.util.Map;\nimport java.util.Scanner;\n\n/**\n *\n * @author Mojtaba\n */\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(System.in);\n        PrintWriter writer = new PrintWriter(new BufferedOutputStream(System.out));\n        StringBuilder sb = new StringBuilder(\"\");\n\n        int t = in.nextInt();\n        for (int ii = 0; ii < t; ii++) {\n            int n = in.nextInt();\n            int days = in.nextInt();\n            in.nextLine();\n            ArrayList<Line> lines = new ArrayList<Line>();\n            for (int i = 0; i < days; i++) {\n                String l = in.nextLine();\n                Scanner sc = new Scanner(l);\n                int index = sc.nextInt();\n                ArrayList<Integer> list = new ArrayList<Integer>();\n                while (sc.hasNext()) {\n                    int xxx = sc.nextInt();\n                    if (xxx > index) {\n                        list.add(xxx);\n                    }\n                }\n                lines.add(new Line(index, list));\n            }\n            Collections.sort(lines);\n            int li = 0;\n            Day[] dayso = new Day[n];\n            for (int i = 0; i < n; i++) {\n                dayso[i] = new Day(i);\n            }\n            search:\n            {\n                int klj = 0;\n                for (int i = 0; i < n; i++) {\n                    li = 0;\n                    while (li < lines.size() && lines.get(li).index != i) {\n                        li++;\n                    }\n                    while (li < lines.size() && lines.get(li).index == i) {\n                        for (int endeks : lines.get(li).list) {\n                            dayso[endeks - 1].votes++;\n                        }\n                        li++;\n                    }\n                    int max = -5;\n                    klj = 0;\n                    boolean ok = true;\n                    for (Day dddd : dayso) {\n                        if (dddd.id >= i) {\n                            if (dddd.votes > max) {\n                                max = dddd.votes;\n                                klj = dddd.id;\n                                ok = true;\n                            } else if (dddd.votes == max) {\n                                ok = false;\n                            }\n                        }\n                    }\n                    if (ok && klj == i) {\n                        sb.append(klj + 1).append(\"\\n\");\n                        break search;\n                    }\n                }\n\n                int[] hg = null;\n                sb.append(hg[5]);\n            }\n            //sb.append(lines);\n        }\n\n        //System.out.println(sb.toString().trim());\n        writer.println(sb.toString().trim());\n        writer.flush();\n        in.close();\n    }\n}\n\nclass Day implements Comparable<Day> {\n\n    public int id;\n    public int votes;\n\n    public Day() {\n    }\n\n    public Day(int id) {\n        this.id = id;\n    }\n\n    @Override\n    public int compareTo(Day o) {\n        return -1 * (this.votes - o.votes);\n    }\n\n    @Override\n    public String toString() {\n        return id + \" \" + votes;\n    }\n}\n\nclass Line implements Comparable<Line> {\n\n    int index;\n    ArrayList<Integer> list;\n\n    public Line(int index, ArrayList<Integer> list) {\n        this.index = index;\n        this.list = list;\n    }\n\n    @Override\n    public int compareTo(Line o) {\n        return (this.index - o.index);\n    }\n\n    @Override\n    public String toString() {\n        return index + \" \" + list.toString();\n    }\n}\n\nclass MyScanner {\n\n    BufferedReader reader;\n    StringTokenizer tokenizer;\n\n    public MyScanner(InputStream stream) {\n        this.reader = new BufferedReader(new InputStreamReader(stream));\n    }\n\n    public int nextInt() throws IOException {\n        return Integer.parseInt(next());\n    }\n\n    public int[] nextIntegerArray(int n) throws IOException {\n        int[] a = new int[n];\n        for (int i = 0; i < a.length; i++) {\n            a[i] = nextInt();\n        }\n        return a;\n    }\n\n    public long[] nextLongArray(int n) throws IOException {\n        long[] a = new long[n];\n        for (int i = 0; i < a.length; i++) {\n            a[i] = nextLong();\n        }\n        return a;\n    }\n\n    public int nextInt(int radix) throws IOException {\n        return Integer.parseInt(next(), radix);\n    }\n\n    public long nextLong() throws IOException {\n        return Long.parseLong(next());\n    }\n\n    public long nextLong(int radix) throws IOException {\n        return Long.parseLong(next(), radix);\n    }\n\n    public double nextDouble() throws IOException {\n        return Double.parseDouble(next());\n    }\n\n    public BigInteger nextBigInteger() throws IOException {\n        return new BigInteger(next());\n    }\n\n    public BigInteger nextBigInteger(int radix) throws IOException {\n        return new BigInteger(next(), radix);\n    }\n\n    public String next() throws IOException {\n        if (tokenizer == null || !tokenizer.hasMoreTokens()) {\n            tokenizer = new StringTokenizer(reader.readLine());\n            return this.next();\n        }\n        return tokenizer.nextToken();\n    }\n\n    public void close() throws IOException {\n        this.reader.close();\n    }\n}", "score": 0.0}
{"id": "SHARE_1_106025_16__1_2541_2", "golden_code": "import java.util.Scanner;\n\npublic class Main  {\n    public static void main(String[] args) {\n        Scanner cin=new Scanner(System.in);\n        int a=cin.nextInt();\n        for(int i=0;i<a;i++){\n            String s=cin.next();\n            char ch=s.toCharArray()[0];\n            int t=1;\n            for(int j=1;j<s.toCharArray().length;j++){\n                if(ch==s.toCharArray()[j]){\n                    t++;\n                    continue;\n                }\n                System.out.print(t+\"\"+ch);\n                t=1;\n                ch=s.toCharArray()[j];\n            }\n            System.out.print(t+\"\"+ch);\n            System.out.println();\n        }\n    }\n}", "generated_code": "import java.math.*;\nimport java.util.*;\n\npublic class Main\n{\n    private static final int[] ten = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000};\n    public static void main(String args[])\n    {\n        Scanner scan = new Scanner(System.in);\n        while(scan.hasNext())\n        {\n            int n = scan.nextInt();\n            int m = scan.nextInt();\n            if(n == 0 && m == 0)\n                break;\n            int a[] = rec(n-1);\n            int b[] = rec(m);\n            for(int i = 0 ; i <= 9 ; i++)\n                System.out.print((b[i]-a[i])+(i==9 ? \"\\n\" : \" \"));\n        }\n    }\n\n    private static int[] rec(int num)\n    {\n        int res[] = new int[10];\n        if(num < 1)\n            return res;\n        int n = (num+\"\").length();\n        for(int i = 0 ; i < n ; i++)\n        {\n            for(int j = i==0 ? 1 : 0 ; j < (num+\"\").charAt(i)-'0' ; j++)\n            {\n                res[j] += ten[n-i-1];\n\n                if(i+1 < n)\n                    for(int k = 0 ; k <= 9 ; k++)\n                        res[k] += (n-i-1)*ten[n-i-2];\n            }\n            res[(num+\"\").charAt(i)-'0']++;\n            if(i != n-1)\n                res[(num+\"\").charAt(i)-'0'] += Integer.parseInt((num+\"\").substring(i+1));\n        }\n        if(n > 1)\n        {\n            int[] t = rec(ten[n-1]-1);\n            for(int i = 0;i <= 9;i++)\n                res[i] += t[i];\n        }\n        return res ;\n\n\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_444__1_1001_215", "golden_code": "import java.util.Scanner ;\npublic class Main{\n  public static void main(String [] args){\n\tScanner in = new Scanner(System.in);\n\twhile(in.hasNext()){\n\t\tint a = in.nextInt() ;\n\t\tint b = in.nextInt() ;\n\t\tint sum = a + b ;\n\t\tSystem.out.println(sum);\n\t}\n  }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner input=new Scanner(System.in);\n\t\twhile(input.hasNext()){\n\t\t\tSystem.out.println(input.nextInt()+input.nextInt());\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2825_13__1_2825_9", "golden_code": "\n\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static long phi(long n) {\n\t\tlong res = n;\n\t\tlong i = 2;\n\t\twhile (i * i <= n) {\n\t\t\tif (n % i == 0) {\n\t\t\t\twhile (n % i == 0) {\n\t\t\t\t\tn = n / i;\n\t\t\t\t}\n\t\t\t\tres -= res / i;\n\t\t\t}\n\t\t\ti += 1;\n\t\t}\n\t\tif (n > 1) {\n\t\t\tres -= res / n;\n\t\t}\n\t\treturn res;\n\t}\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner in = new Scanner(System.in);\n\t\tlong dp[] = new long[10005];\n\t\tlong DP[] = new long[10005];\n\t\tfor (int i = 1; i < 10005; i++) {\n\t\t\tdp[i] = phi(i);\n\t\t\tDP[i] = DP[i - 1] + dp[i];\n\t\t}\n\t\tint t = in.nextInt();\n\t\tfor (int i = 0; i < t; i++) {\n\t\t\tint n = in.nextInt();\n\t\t\tSystem.out.println(DP[n] + 1);\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.*;\n\npublic class Main {\n\n\tpublic static long phi(int n){\n\t\tint[] primeFactor=new int[n];\n\t\tint k=0;\n\t\tint i=2,c;\n\t\tint copyOfNum=n;\n\n\t\twhile(n>1){\n\t\t\tc=0;\n\t\t\twhile(n%i==0){\n\t\t\t\tn/=i;\n\t\t\t\tc++;\n\t\t\t}\n\t\t\tif(c>0)\n\t\t\t\tprimeFactor[k++]=i;\n\t\t\ti++;\n\t\t}\n\n\t\tlong p=1,q=1;\n\t\tfor(i=0;i<k;i++){\n\t\t\tp*=(primeFactor[i]-1);\n\t\t\tq*=primeFactor[i];\n\t\t}\n\n\t\treturn (copyOfNum*p)/q;\n\n\t}\n\tpublic static void main(String[] args){\n\t\tScanner input=new Scanner(System.in);\n\n\t\tint t=input.nextInt(),n;\n\n\t\tlong[] factors=new long[10001];\n\t\tfactors[0]=1;\n\t\tfor(int i=1;i<factors.length;i++)\n\t\t\tfactors[i]=factors[i-1]+phi(i);\n\n\t\twhile(t-->0){\n\t\t\tn=input.nextInt();\n\n\t\t\tSystem.out.println(factors[n]);\n\t\t}\n\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2713_77__1_2713_4", "golden_code": "\n\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int first = sc.nextInt();\n        while (first != 0) {\n\n            int d = first;\n            int k = 1;\n            while (d > 1) {\n\n                if (d % 2 == 0) {\n                    d = d / 2;\n                    k++;\n\n                } else {\n                    d = d * 3 + 1;\n                    k++;\n\n                }\n\n            }\n            System.out.println(k);\n             first = sc.nextInt();\n\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main (String args[]){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\twhile(n!=0){\n\t\t\tint a = n ;\n\t\t\tint c = 1 ;\n\t\t\twhile(a!=1){\n\t\t\t\tif(a%2==0){\n\t\t\t\t\ta = a/2;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ta = a*3 + 1;\n\t\t\t\t}\n\t\t\t\tc++;\n\t\t\t}\n\t\t\tSystem.out.println(c);\n\t\t\tn = in.nextInt();\n\t\t}\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_131__1_1001_37", "golden_code": "\n\n\n\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        int A, B ;int tedaeTeam; int adad2;\n          Scanner s = new Scanner(System.in);\n          while(s.hasNext()){\n             A=s.nextInt();\n             B=s.nextInt();\n             adad2=A+B;\n              System.out.println(adad2);\n        }\n\n    }\n}\n    ", "generated_code": "\nimport java.util.Scanner;\npublic class Main{\n    public static void main(String args[]){\n        Scanner s=new Scanner(System.in);\n        while(s.hasNext()){\n            int a=s.nextInt();\n            int b=s.nextInt();\n            System.out.println(a+b);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_204__1_1001_257", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s=new Scanner(System.in);\n        int a,b;\n        while(s.hasNext()){\n            a=s.nextInt();\n            b=s.nextInt();\n            System.out.println(a+b);\n        }\n    }\n\n}\n", "generated_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String args[]) throws Exception{\n        Scanner cin=new Scanner(System.in);\n        while(cin.hasNext()){\n            int a = cin.nextInt(), b = cin.nextInt();\n            System.out.println(a+b);\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2554_61__1_2554_5", "golden_code": "import java.util.*;\npublic class Main {\n    static class Node {\n        String name;\n        Node father;\n        ArrayList<Node> mandatory, optional, or, alternative;\n\n        Node(String name, Node father) {\n            this.father = father;\n            this.name = name;\n            mandatory = new ArrayList<>();\n            optional = new ArrayList<>();\n            or = new ArrayList<>();\n            alternative = new ArrayList<>();\n        }\n\n    }\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        String currentLine = input.nextLine().replace(\" \", \"\");\n        while (!currentLine.equals(\"###\")) {\n            Node MainRoot = new Node(currentLine.substring(0, currentLine.indexOf('=')), null);\n            HashMap<String, Node> nodes = new HashMap<>();\n            nodes.put(currentLine.substring(0, currentLine.indexOf('=')), MainRoot);\n\n             while (!currentLine.equals(\"#\")) {\n                 Node father;\n                 if (nodes.containsKey(currentLine.substring(0, currentLine.indexOf('=')))) {\n                     father = nodes.get(currentLine.substring(0, currentLine.indexOf('=')));\n                 } else {\n                     father = new Node(currentLine.substring(0, currentLine.indexOf('=')), null);\n                     nodes.put(currentLine.substring(0, currentLine.indexOf('=')), father);\n                 }\n\n                if (currentLine.contains(\"+\")) {\n                    String[] components = currentLine.substring(currentLine.indexOf('=') + 1).split(\"\\\\+\");\n                    for (String nodeName : components) {\n                        if (nodeName.startsWith(\"?\")) {\n                            Node newNode;\n                            if (nodes.containsKey(nodeName.substring(1))) {\n                                newNode = nodes.get(nodeName.substring(1));\n                                newNode.father = father;\n                            } else{\n                                newNode = new Node(nodeName.substring(1), father);\n                                nodes.put(nodeName.substring(1), newNode);\n                            }\n                            father.optional.add(newNode);\n                        } else {\n                            Node newNode;\n                            if (nodes.containsKey(nodeName)) {\n                                newNode = nodes.get(nodeName);\n                                newNode.father = father;\n                            } else{\n                                newNode = new Node(nodeName, father);\n                                nodes.put(nodeName, newNode);\n                            }\n                            father.mandatory.add(newNode);\n                        }\n                    }\n                } else if (currentLine.contains(\"|\")) {\n                    String[] components = currentLine.substring(currentLine.indexOf('=') + 1).split(\"\\\\|\");\n                    for (String nodeName : components) {\n                        Node newNode;\n                        if (nodes.containsKey(nodeName)) {\n                            newNode = nodes.get(nodeName);\n                            newNode.father = father;\n                        } else{\n                            newNode = new Node(nodeName, father);\n                            nodes.put(nodeName, newNode);\n                        }\n                        father.or.add(newNode);\n                    }\n                } else if(currentLine.contains(\"^\")) { //alternative\n                    String[] components = currentLine.substring(currentLine.indexOf('=') + 1).split(\"\\\\^\");\n                    for (String nodeName : components) {\n                        Node newNode;\n                        if (nodes.containsKey(nodeName)) {\n                            newNode = nodes.get(nodeName);\n                            newNode.father = father;\n                        } else{\n                            newNode = new Node(nodeName, father);\n                            nodes.put(nodeName, newNode);\n                        }\n                        father.alternative.add(newNode);\n                    }\n                } else {\n                    String[] components = currentLine.substring(currentLine.indexOf('=') + 1).split(\"\\\\+\");\n                    for (String nodeName : components) {\n                        if (nodeName.startsWith(\"?\")) {\n                            Node newNode;\n                            if (nodes.containsKey(nodeName.substring(1))) {\n                                newNode = nodes.get(nodeName.substring(1));\n                                newNode.father = father;\n                            } else{\n                                newNode = new Node(nodeName.substring(1), father);\n                                nodes.put(nodeName.substring(1), newNode);\n                            }\n                            father.optional.add(newNode);\n                        } else {\n                            Node newNode;\n                            if (nodes.containsKey(nodeName)) {\n                                newNode = nodes.get(nodeName);\n                                newNode.father = father;\n                            } else{\n                                newNode = new Node(nodeName, father);\n                                nodes.put(nodeName, newNode);\n                            }\n                            father.mandatory.add(newNode);\n                        }\n                    }\n\n                }\n                currentLine = input.nextLine().replace(\" \", \"\");\n            }\n            currentLine = input.nextLine().replace(\" \",\"\");\n             //for (String x : nodes.keySet()) System.out.println(x);\n            Node root = findroot(MainRoot);\n            while (!currentLine.equals(\"##\")) {\n                String[] queriesInString = currentLine.replace(\" \", \"\").split(\",\");\n                queriesInString[0] = queriesInString[0].substring(1);\n                int n = queriesInString.length;\n                queriesInString[n - 1] = queriesInString[n - 1].substring(0, queriesInString[n - 1].length() - 1);\n                HashSet<String> queries = new HashSet<>(Arrays.asList(queriesInString));\n                Boolean hasMainRoot = queries.contains(MainRoot.name);\n                Boolean valid = checkValidation(queries, root);\n                if (valid && queries.size() == 0 && hasMainRoot) {\n                    System.out.println(\"Valid\");\n                }\n                    //checking query size shows all children's have their father\n                else {\n                    System.out.println(\"Invalid\");\n                }\n                currentLine = input.nextLine().replace(\" \",\"\");\n            }\n            System.out.println(\"+++\");\n            currentLine = input.nextLine().replace(\" \",\"\");\n        }\n\n    }\n\n    private static Node findroot(Node root) {\n        if (root.father == null) {\n            return root;\n        } else {\n            return findroot(root.father);\n        }\n    }\n\n    private static Boolean checkValidation(HashSet<String> queries, Node root) {\n        if (!queries.contains(root.name)) {\n            return false;\n        }\n        queries.remove(root.name);\n        for (Node node : root.mandatory) {\n            if (queries.contains(node.name)) {\n                if (!checkValidation(queries, node)) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        for (Node node : root.optional) {\n            if (queries.contains(node.name)) {\n                if (!checkValidation(queries, node)) {\n                    return false;\n                }\n            }\n        }\n        if (root.or.size() != 0) {\n            boolean or = false;\n            for (Node node : root.or) {\n                if (queries.contains(node.name)) {\n                    or = true;\n                    if (!checkValidation(queries, node)) {\n                        return false;\n                    }\n                }\n\n            }\n            if (!or) {\n                return false;\n            }\n        }\n        if (root.alternative.size() != 0) {\n            int count = 0;\n            for (Node node : root.alternative) {\n                if (queries.contains(node.name)) {\n                    if (count == 1) {\n                        return false;\n                    }\n                    count++;\n                    if (!checkValidation(queries, node)) {\n                        return false;\n                    }\n                }\n            }\n            if (count != 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "generated_code": "import java.util.*;\n\nclass CoffeeMachine {\n    Feature mainFeature;\n\n    public CoffeeMachine(Feature mainFeature) {\n        this.mainFeature = mainFeature;\n    }\n}\n\nabstract class FeatureDependencies {\n    abstract boolean areMet(List<Feature> featureList);\n}\n\nclass OrFeatureDependencies extends FeatureDependencies {\n    private List<Feature> dependencies;\n\n    public OrFeatureDependencies(List<Feature> dependencies) {\n        this.dependencies = dependencies;\n    }\n\n    @Override\n    boolean areMet(List<Feature> featureList) {\n        for (Feature dependency : this.dependencies)\n            if (featureList.contains(dependency) && dependency.areDependenciesMet(featureList))\n                return true;\n        return false;\n    }\n}\n\nclass Feature {\n    String name;\n    FeatureDependencies featureDependencies;\n    Feature parentFeature;\n\n    public Feature(String name, Feature parentFeature) {\n        this.name = name;\n        this.parentFeature = parentFeature;\n    }\n    Feature(String name) {\n        this.name = name;\n    }\n    boolean areDependenciesMet(List<Feature> features) {\n        if (this.featureDependencies == null) {\n            return true;\n        }\n        return this.featureDependencies.areMet(features);\n    }\n}\n\nclass XorFeatureDependencies extends FeatureDependencies {\n    private List<Feature> dependencies;\n\n    public XorFeatureDependencies(List<Feature> dependencies) {\n        this.dependencies = dependencies;\n    }\n\n    @Override\n    boolean areMet(List<Feature> featureList) {\n        int counter = 0;\n        for (Feature dependency : this.dependencies)\n            if (featureList.contains(dependency) && dependency.areDependenciesMet(featureList))\n                counter++;\n        return counter == 1;\n    }\n}\n\nclass AndFeatureDependencies extends FeatureDependencies {\n    private List<Feature> mandatoryDependencies, optionalDependencies;\n\n    public AndFeatureDependencies(List<Feature> mandatoryDependencies, List<Feature> optionalDependencies) {\n        this.mandatoryDependencies = mandatoryDependencies;\n        this.optionalDependencies = optionalDependencies;\n    }\n\n    @Override\n    boolean areMet(List<Feature> featureList) {\n        for (Feature mandatoryDependency : this.mandatoryDependencies)\n            if (!featureList.contains(mandatoryDependency) || !mandatoryDependency.areDependenciesMet(featureList))\n                return false;\n        for (Feature optionalDependency : this.optionalDependencies)\n            if (featureList.contains(optionalDependency) && !optionalDependency.areDependenciesMet(featureList))\n                return false;\n        return true;\n    }\n}\n\npublic class Main {\n\n    private static boolean isCorrect(CoffeeMachine coffeeMachine, Map<String, Feature> featureMap, String[] featureNames) {\n        LinkedList<Feature> features = new LinkedList<Feature>();\n        for (int i = 1; i < featureNames.length; i++) {\n            features.add(featureMap.get(featureNames[i]));\n        }\n        if (!features.contains(coffeeMachine.mainFeature))\n            return false;\n        for (Feature feature: features\n        ) {\n            if (feature.parentFeature != null && !features.contains(feature.parentFeature))\n                return false;\n            if (!feature.areDependenciesMet(features))\n                return false;\n        }\n        return coffeeMachine.mainFeature.areDependenciesMet(features);\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String nextLine;\n\n        while(true) {\n            boolean isFirstLine = true;\n            CoffeeMachine coffeeMachine = null;\n            Map<String, Feature> featureMap = new HashMap<>();\n            nextLine = scanner.nextLine();\n            if (nextLine.equals(\"###\"))\n                break;\n            do {\n                String[] split = nextLine.trim().replaceAll(\"[?]\\\\s+\", \"?\").split(\"\\\\s*[=+|\\\\^]\\\\s*\");\n                if (isFirstLine) {\n                    featureMap.put(split[0], new Feature(split[0]));\n                    coffeeMachine = new CoffeeMachine(featureMap.get(split[0]));\n                    isFirstLine = false;\n                }\n                else {\n                    if (!featureMap.containsKey(split[0])) {\n                        featureMap.put(split[0], new Feature(split[0]));\n                    }\n                }\n\n                for (int i = 1; i < split.length; i++) {\n                    if (split[i].charAt(0) == '?') {\n                        if (!featureMap.containsKey(split[i].substring(1)))\n                            featureMap.put(split[i].substring(1), new Feature(split[i].substring(1)));\n                        featureMap.get(split[i].substring(1)).parentFeature = featureMap.get(split[0]);\n                    }\n                    else {\n                        if (!featureMap.containsKey(split[i]))\n                            featureMap.put(split[i], new Feature(split[i]));\n                        featureMap.get(split[i]).parentFeature = featureMap.get(split[0]);\n                    }\n                }\n\n\n                if (nextLine.matches(\".*[+].*\")) {\n                    List<Feature> mandatoryDependencies = new LinkedList<>(), optionalDependencies = new LinkedList<>();\n                    for (int i = 1; i < split.length; i++) {\n                        if (split[i].charAt(0) == '?')\n                            optionalDependencies.add(featureMap.get(split[i].substring(1)));\n                        else\n                            mandatoryDependencies.add(featureMap.get(split[i]));\n                    }\n                    featureMap.get(split[0]).featureDependencies = new AndFeatureDependencies(mandatoryDependencies, optionalDependencies);\n                }\n                else if (nextLine.matches(\".*[|].*\")) {\n                    List<Feature> dependencies = new LinkedList<>();\n                    for (int i = 1; i < split.length; i++)\n                        dependencies.add(featureMap.get(split[i]));\n                    featureMap.get(split[0]).featureDependencies = new OrFeatureDependencies(dependencies);\n                }\n                else if (nextLine.matches(\".*[\\\\^].*\")) {\n                    List<Feature> dependencies = new LinkedList<>();\n                    for (int i = 1; i < split.length; i++)\n                        dependencies.add(featureMap.get(split[i]));\n                    featureMap.get(split[0]).featureDependencies = new XorFeatureDependencies(dependencies);\n                }\n            } while (!(nextLine = scanner.nextLine()).equals(\"#\"));\n            while (!(nextLine = scanner.nextLine()).equals(\"##\")) {\n                String[] split = nextLine.trim().split(\"\\\\s*[{,}]\\\\s*\");\n                System.out.println(isCorrect(coffeeMachine, featureMap, split)? \"Valid\": \"Invalid\");\n            }\n            System.out.println(\"+++\");\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2717_8__1_2717_50", "golden_code": "import java.io.IOException;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint c;\n\t\twhile((c=sc.nextInt())>0){\n\t\t\tsc.nextLine();\n\t\t\tString s1 = sc.nextLine();\n\t\t\tString s2 = sc.nextLine();\n\t\t\tString pattern = sc.nextLine().trim();\n\t\t\tint i;\n\t\t\tboolean find = false;\n\t\t\tfor (i = 1; i <= 50; i++){\n\t\t\t\tString line = so(s1,s2,c);\n\t\t\t\tif(line.equals(pattern)){\n\t\t\t\t\tfind = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ts1 = line.substring(0,c);\n\t\t\t\ts2 = line.substring(c);\n\t\t\t\t\n\t\t\t}\n\t\t\tif(find) System.out.println(i);\n\t\t\telse System.out.println(-1);\n\t\t}\n\t\tsc.close();\n\t\t\n\t\t\n\t}\n\tpublic static String so(String s1,String s2, int n){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tsb.append(s2.charAt(i));\n\t\t\tsb.append(s1.charAt(i));\n\t\t}\n\t\treturn sb.toString();\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner p = new Scanner(System.in);\n        int n = p.nextInt();\n        while (n != 0) {\n            int count = 0;\n            String x = \"\";\n            String y =\"\";\n            String z = \"\";\n            String s = \"\";\n            p.nextLine();\n            x = p.nextLine();\n            x=x.toUpperCase();\n            y = p.nextLine();\n            y=y.toUpperCase();\n            s = p.nextLine();\n            s=s.toUpperCase();\n            for (int j=0;j<51;j++) {\n                z = \"\";\n                char[] v = x.toCharArray();\n                char[] u = y.toCharArray();\n                for (int i = 0; i < n; i++) {\n                    z = z + v[i];\n                    z = z + u[i];\n                }\n                if (s.equals(z)) {\n                    count++;\n                    break;\n\n                } else {\n                    z = \"\";\n                    for (int i = 0; i < n; i++) {\n                        z = z + u[i];\n                        z = z + v[i];\n                    }\n                    if (s.equals(z)) {\n                        count++;\n                        break;\n                    }\n                }\n                count++;\n                x = z.substring(0, n);\n                y = z.substring(n);\n            }          \n            if(count==51)\n                System.out.println(-1);\n            else\n                System.out.println(count);\n            n = p.nextInt();\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1006_90__1_1006_22", "golden_code": "import java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner scn = new Scanner(System.in);\n        DecimalFormat df=new DecimalFormat(\"#\");\n        Main l = new Main();double n = 0;double i = 2,co=0;\n        while (true) {\n            double a = scn.nextDouble();\n            if (a==0.00) {\n                System.exit(0);\n            }\n            while(n<=a){\n            n+=(1 / i);\n            i++;co++;\n            }\n            System.out.println(df.format(co)+\" card(s)\");\n            co=0;i=2;n=0;\n            \n        }\n\n    }\n\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        \n        Scanner input = new Scanner( System.in );\n        \n        float f, sum;\n        float n;\n        \n        while( ( f = input.nextFloat() ) != 0.0 ){\n            sum = 0;\n            n = 1;\n            while( sum < f ){\n                n++;\n                sum += 1 / n;\n            }\n            System.out.printf( \"%d card(s)\\n\", (int)n - 1);\n        }\n        \n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_101329_15__1_101329_5", "golden_code": "import java.util.Scanner ;\npublic class Main\n{\n//------------------------------------------------------------------\n\tpublic static boolean aval ( long n )\n\t{\t\n\t\tlong a = n ;\n\t\tn = 1 ;\n\t\t\t\n\t\twhile ( n < Math.sqrt( a ) ) {\n\t\t\tn++ ;\n\t\t\tif ( a%n == 0 ) {\n\t\t\t\treturn false ;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true ;\n\t\t\t\t\n\t\t\n\t}\n\n//------------------------------------------------------------------\n\tpublic static void main(String[] args)\n\t{\n\t\t\n\t\tScanner scan = new Scanner (System.in) ;\n\t\tlong a ;\n\t\tlong b ;\n\t\tboolean ok = true ;\n\t\ta = scan.nextInt() ;\n\t\t\n\t\twhile ( a != 0 ) {\n\t\t\ta-- ;\n\t\t\tb = scan.nextLong() ;\n\t\t\tif ( b == 0 || b == 1 || b == 2 ) {\n\t\t\t\tSystem.out.println(2) ;\n\t\t\t}\n\t\t\telse {\t\n\t\t\t\tok = true ;\n\t\t\t\twhile ( ok ) {\n\t\t\t\t\tif ( aval (b) ) {\n\t\t\t\t\t\tSystem.out.println(b) ;\n\t\t\t\t\t\tok = false ;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tb++ ;\n\t\t\t\t\t}\t\t\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t}\n}\n\n\n\t\t\t\n\t\t\t", "generated_code": "\nimport java.util.Scanner;\n\n\npublic class Main {\n    public static void main(String[] args){\n        Scanner in=new Scanner(System.in);\n        int N=in.nextInt();\n        double a;int b;\n        for(int n=0;n<N;n++){\n            a=in.nextDouble();\n            if(a==0||a==1||a==2)\n                System.out.println(2);\n            else{\n                if(a%2==0)\n                    a++;\n                boolean f=true;\n                while(f){\n                    boolean ff=isPrime(a);\n                    if(ff)\n                        f=false;\n                    else{\n                        a=a+2;\n                    }\n                }\n                System.out.printf(\"%.0f\\n\",a);\n            }\n        }\n    }\n    public static boolean isPrime(double a){\n        int b;\n        for(b=(int)Math.sqrt(a);b>=2;b--)\n            if(a%b==0)\n                break;\n        if(b>1)\n            return false;\n        return true;\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1009_92__1_1996_11", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        int numberOfLines = 12;\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {\n            double sum = 0;\n            for (int i = 0; i < numberOfLines; i++) {\n                sum = sum + Double.parseDouble(in.nextLine());\n            }\n            double avr = sum / numberOfLines;\n            System.out.println(getNum(avr + \"\"));\n        }\n    }\n\n    public static String getNum(String doubleNum) {\n        int indexOfDot = doubleNum.lastIndexOf(\".\");\n        String arr0 = doubleNum.substring(0, indexOfDot);\n        String arr1 = doubleNum.substring(indexOfDot + 1, indexOfDot + 3);\n        int firstSec = Integer.parseInt(arr0);\n        int secondSec = Integer.parseInt(arr1.substring(0, 2));\n        if (arr1.length() >= 3) {\n            if (Integer.parseInt(arr1.substring(2, 3)) > 5) {\n                secondSec += 1;\n                return \"$\" + firstSec + \".\" + secondSec;\n            }\n        }\n        return \"$\" + firstSec + \".\" + secondSec;\n    }\n}\n", "generated_code": "import java.util.*;\npublic class Main {\n\tpublic static void main(String [] args){\n\t\tScanner input=new Scanner(System.in);\n\t\tint n=input.nextInt();\n\t\tString s;\n\t\tdouble sum;\n\t\twhile(n!=0){\n\t\t\tsum=0;\n\t\t\twhile(n-->0){\n\t\t\t\ts=input.next().substring(1).replace(\",\",\"\");\n\t\t\t\tsum+=Double.parseDouble(s);\n\n\t\t\t}\n\t\t\ts=String.format(\"%.2f\",sum);\n\t\t\t//System.out.println(s);\n\t\t\tint len=s.substring(0,s.indexOf(\".\")).length();\n\n\t\t\tif(len<3)\n\t\t\t\tSystem.out.printf(\"$%.2f\\n\",sum);\n\t\t\telse{\n\t\t\t\tSystem.out.print(\"$\");\n\t\t\t\tif(len%3==1 )\n\t\t\t\t\tSystem.out.print(s.charAt(0)+\",\");\n\n\t\t\t\telse if(len%3==2)\n\t\t\t\t\tSystem.out.print(s.substring(0,2)+\",\");\n\n\n\t\t\t\tfor(int i=len%3;i<len-2;i+=3){\n\t\t\t\t\tSystem.out.print(s.substring(i,i+3));\n\t\t\t\t\tif(i+3<len-2)\n\t\t\t\t\t\tSystem.out.print(\",\");\n\t\t\t\t}\n\t\t\t\tSystem.out.println(s.substring(s.indexOf(\".\")));\n\t\t\t}\n\t\t\tn=input.nextInt();\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1001_423__1_1001_187", "golden_code": "import java.util.*;\n\n\npublic class Main{\n\n\tpublic static void main(String[] args){\n\t\tScanner input=new Scanner(System.in);\n\n\t\twhile(input.hasNext())\n\t\t\tSystem.out.println(input.nextInt()+input.nextInt());\n\t}\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n    static Scanner input = new Scanner(System.in);\n    public static void main(String[] args) {\n        while(input.hasNextInt()){\n            System.out.println(input.nextInt() + input.nextInt());\n        }\n}\n}\n", "score": 1.0}
{"id": "SHARE_1_2577_21__1_2577_7", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        String key = s.next();\n        String text = s.next();\n        while (!key.equals(\"0\")) {\n            String res=\"\";\n            String keytmp=key;\n            int keylen = key.length();\n            for(int i=0;i<(text.length()/keylen+1);i++)\n                key += keytmp;\n            key = key.substring(0,text.length());\n            for(int i=0;i<text.length();i++)\n                res += (char)('A'+((text.charAt(i)+key.charAt(i)-2*'A'+1)%26));\n            System.out.println(res);\n            key = s.next();\n            if(key.equals(\"0\"))\n                break;\n            text = s.next();\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tString key = sc.next(), plain = \"\";\n\t\twhile (!key.equals(\"0\")) {\n\t\t\tplain = sc.next();\n\t\t\tString encoded = \"\";\n\t\t\tfor (int i = 0; i < plain.length(); ++i) {\n\t\t\t\tchar c = (char)((plain.charAt(i) + key.charAt(i % key.length()) + 1 - 'A'));\n\t\t\t\tif ( c > 'Z')\n\t\t\t\t\tc -= 26;\n\t\t\t\tencoded += c;\n\t\t\t}\n\t\t\tSystem.out.println(encoded);\n\t\t\tkey = sc.next();\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_2747_20__1_2747_17", "golden_code": "import java.util.Scanner;\n\n/**\n * Created by Yoones on 10/1/14.\n */\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner inp = new Scanner(System.in);\n\n        int n = inp.nextInt();\n        String v = inp.nextLine();\n\n        for (int i = 0; i < n; i++) {\n\n            String t = inp.nextLine();\n\n            int res = 0;\n\n\n            if (hasChar(t, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) {\n                res++;\n            }\n\n            if (hasChar(t, \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toLowerCase())) {\n                res++;\n            }\n\n            if (hasChar(t, \"1234567890\")) {\n                res++;\n            }\n\n            if (hasChar(t, \"!@#$%^&*()\")) {\n                res++;\n            }\n\n            if (res == 1)\n                System.out.println(\"very bad\");\n            else if (res == 2)\n                System.out.println(\"bad\");\n            else if (res == 3)\n                System.out.println(\"good\");\n            else if (res == 4)\n                System.out.println(\"overkill\");\n        }\n    }\n\n    public static boolean hasChar(String hay, String needle) {\n\n        for (char c : needle.toCharArray()) {\n            if (hay.indexOf(c) != -1)\n                return true;\n        }\n\n        return false;\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n       char[] s ;\n        \n        for (int i = 0; i < n; i++) {\n\n            s = in.next().toCharArray(); \n            int count = 0;\n            int[] a = {0, 0, 0, 0};\n            for (int j = 0; j < s.length; j++) {\n                if (s[j] >= 'a' & s[j] <= 'z' & a[0] == 0) {\n                    a[0] = 1;\n                    count++;\n                }  if (s[j] >= 'A' & s[j] <= 'Z' & a[1] == 0) {\n                    a[1] = 1;\n                    count++;\n                }  if (s[j] >= '0' & s[j] <= '9' & a[2] == 0) {\n                    a[2] = 1;\n                    count++;\n                }  if (s[j] == '!' || s[j] == '@' || s[j] == '#' || s[j] == '$' || s[j] == '%' || s[j] == '^' || s[j] == '&' || s[j] == '*' || s[j] == '(' || s[j] == ')') {\n                    if (a[3]==0) {\n                         a[3] = 1;\n                    count++;\n                    }\n                   \n                }\n            }\n            switch (count) {\n                case 1:\n                    System.out.println(\"very bad\");\n                    break;\n                case 2:\n                    System.out.println(\"bad\");\n                    break;\n                case 3:\n                    System.out.println(\"good\");\n                    break;\n                case 4:\n                    System.out.println(\"overkill\");\n                    break;\n\n            }\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1018_7__1_1018_42", "golden_code": "import java.util.Scanner ;\nclass Main{\n\tpublic static void main(String[]args){\n\t\tScanner Scan= new Scanner(System.in) ;\n\t\tint n,a=0,b=0,i,A[],B[] ;\n\t\tn=Scan.nextInt() ;\n\t\t\n\t\twhile(n!=0){\n\t\t\t\ta = 0;\n\t\t\t\tb = 0;\n\t\t\t\tA=new int[n] ;\n\t\t\t\tB=new int[n] ;\n\t\t\t\t\n\t\t\t\tfor(i=0;i<n;i++) \n\t\t\t\t        A[i] = Scan.nextInt();\n\t\t\t\tfor(i=0;i<n;i++)\n\t\t\t\t        B[i] = Scan.nextInt();\n\t\t\t\t\n\t\t\t\tfor(i=0;i<n;i++){\n\t\t\t\t\t//mitoni asan nanevisishif(A[i]==B[i]);\n\t\t\t\t\tif(Math.abs(A[i]-B[i])==1){\n\t\t\t\t\t\tif(((A[i]==1)||(B[i]==1))&&((A[i]==2)||(B[i]==2))){\n\t\t\t\t\t\t\tif(A[i]>B[i]) b=b+6 ;\n\t\t\t\t\t\t\telse a=a+6 ;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(A[i]>B[i]) b=b+(A[i]+B[i]);\n\t\t\t\t\t\telse a=a+(A[i]+B[i]);\n\t\t\t\t    }\n\t\t\t\t\telse if(Math.abs(A[i]-B[i]) > 1){\n\t\t\t\t\t\tif(A[i]>B[i]) a=a+A[i] ;\n\t\t\t\t\t    else if(A[i]<B[i]) b=b+B[i] ;\n\t\t\t\t    }\n\t\t\t    }\n\t\t  \n\t\t  //akharin khat dg endline nemikhad!\n\t\t  System.out.println(\"A has \"+a+\" points. B has \"+b+\" points.\");\n\t\t  n=Scan.nextInt();\n                  if( n != 0)\n                  System.out.println();\n                 }\n   }\n}", "generated_code": "import java.util.Scanner;\nclass Main{\n\tpublic static void main(String[]args){\n\t\tScanner scan=new Scanner(System.in);\n\t\tint n=1;\n\t\tint [][]C=new int[2][20];\n\t\tint k=0;\n\t\twhile(n !=0){\n\t\t\tn=scan.nextInt();\n\t\t\tint []A=new int[n];\n\t\t\tint []B=new int[n];\n\t\t\tfor(int i=0;i<n;i++)\n\t\t\t\tA[i]=scan.nextInt();\n\t\t\tfor(int i=0;i<n;i++)\n\t\t\t\tB[i]=scan.nextInt();\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tif(A[i]>B[i]){\n\t\t\t\t\tif(A[i]-B[i]==1){\n\t\t\t\t\t\tif(B[i]==1)\n\t\t\t\t\t\t\tC[1][k]=C[1][k]+6;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tC[1][k]=C[1][k]+A[i]+B[i];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tC[0][k]=C[0][k]+A[i];\n\t\t\t\t}\n\t\t\t\tif(A[i]<B[i]){\n\t\t\t\t\tif(B[i]-A[i]==1){\n\t\t\t\t\t\tif(A[i]==1)\n\t\t\t\t\t\t\tC[0][k]=C[0][k]+6;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tC[0][k]=C[0][k]+A[i]+B[i];\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tC[1][k]=C[1][k]+B[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tk++;\n\t\t}\n\t\tfor(int i=0;i<k-1;i++){\n\t\t\tSystem.out.println(\"A has\"+\" \"+C[0][i]+\" \"+\"points. B has\"+\" \"+C[1][i]+\" \"+\"points.\");\n\t\t\tif(i != k-2)\n\t\t\t\tSystem.out.println();\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_283__1_1001_317", "golden_code": "import java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main (String[]args){\n\t\t\n\t\tScanner scan = new Scanner(System.in);\n\t\t\n\t\twhile(scan.hasNext())\n\t\t\tSystem.out.println(scan.nextInt()+scan.nextInt());\n\t}\n}\n\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner input = new Scanner(System.in);\n\t\twhile (input.hasNext()) {\n\n\t\t\tString line = input.nextLine();\n\t\t\tString[] numbers = line.split(\" \");\n\t\t\tSystem.out.println(Integer.parseInt(numbers[0]) + Integer.parseInt(numbers[1]));\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_98__1_1001_435", "golden_code": "import java.util.Scanner;\n\npublic class Main \n{\n    public static void main(String[] a)\n    {\n        Scanner i = new Scanner(System.in);\n        while(i.hasNextInt())\n        {\n            int n,m; \n            n = i.nextInt();\n            m = i.nextInt();\n            System.out.println(n+m);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_272__1_1001_11", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "generated_code": "import java.util.*;\n\npublic class Main\n{\n  public static void main(String[] args)\n  {\n    Scanner scan = new Scanner(System.in);\n    \n    while(scan.hasNextInt())\n    {\n      System.out.println(scan.nextInt() + scan.nextInt());\n    }\n  }\n}", "score": 1.0}
{"id": "SHARE_1_1001_62__1_1001_96", "golden_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext())\n\t\t\tSystem.out.println((in.nextInt()+in.nextInt()));\n\tin.close();\t\n\t}\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main \n{\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args)\n    {\n        Scanner input = new Scanner(System.in);\n        while(input.hasNextInt())\n        {\n            int number1; // first number to add\n            int number2; // second number to add\n            int sum; // sum of number1 and number2\n            number1 = input.nextInt(); // read first number from user\n            number2 = input.nextInt(); // read second number from user\n            sum = (number1 + number2);\n            System.out.printf(\"%d\\n\",sum);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_59__1_1001_30", "golden_code": "\nimport java.util.Scanner;\nimport java.util.Vector;\n\npublic class Main {\n    public static void main(String[] args){\n        Scanner in= new Scanner (System.in);\n        Vector<Integer>nums=new Vector<Integer>();\n        while(in.hasNext())\n            nums.addElement(in.nextInt());\n        for(int i=0,j=1;i<nums.size()/2;j=j+2,i++)\n        {\n            System.out.println(nums.elementAt(j-1)+nums.elementAt(j));\n        }\n    }\n    \n}\n", "generated_code": "import java.util.Scanner;\n\n    class Main\n{\n    public static void main(String[] orgs)\n  {\n           Scanner Scan = new Scanner (System.in);\n           int num1,num2,a,b;\n           int result=0;\n      while(Scan.hasNextInt())\n          {\n           num1=Scan.nextInt();\n           num2=Scan.nextInt();\n           a=num1;\n           b=num2;\n           \n          if ((num1>0 && num2>0) || (num1<0 && num2>0))\n\n              while (b!=0){\n                      a++;\n                      b--;\n                      result=a;\n          } \n          else    \n              if (num1>0 && num2<0)\n\n                  while (a!=0){  \n                         b++;\n                         a--;\n                         result=b;\n\n          }\n             else\n                 if(num1<0 && num2<0)\n        \n                 while(a!=0){\n                       a++;\n                       b--;\n                       result=b;\n         }\n                else\n                    if(num1==0)           \n                    result=num2;\n                    else\n                    result=num1;\n\n      System.out.println(result);\n  }   \n }\n}\n", "score": 1.0}
{"id": "SHARE_1_1449_12__1_1089_42", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        while(true){\n            int n = s.nextInt();\n            if(n == 0)\n                break;\n            String res=\"\";\n            for (int i = 2; i <= 16; i++) {\n                if(isValid(Integer.toString(n, i)))\n                    res += i+\" \";\n            }\n            if(res.length() > 0){\n                System.out.println(\"Number \"+n+\" is palindrom in basis \"+res.trim());\n            }else{\n                System.out.println(\"Number \"+n+\" is not a palindrom\");\n            }\n        }\n    }\n    \n    static boolean isValid(String str){\n        for (int i = 0; i <= str.length()/2-1; i++) {\n            if(str.charAt(i) != str.charAt(str.length()-i-1))\n                return false;\n        }\n        return true;\n    }\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint testCaseIndex = 1;\n\t\twhile(true) {\n\t\t\tint a = sc.nextInt();\n\t\t\tint b = sc.nextInt();\n\t\t\tint c = sc.nextInt();\n\t\t\t\n\t\t\tif(a == 0 && b == 0 && c == 0) {\n\t\t\t\tbreak;\n\t\t\t}  \n\t\t\tSystem.out.println(\"Triangle #\" + testCaseIndex);\n\t\t\tif(c != -1 && (a>c || b>c)) {\n\t\t\t\tSystem.out.println(\"Impossible.\");\n\t\t\t}else{\n\t\t\t\tif(a == -1)\n\t\t\t\t{\n\t\t\t\t\tint a2 = c*c - b*b;\n\t\t\t\t\tdouble ra = Math.sqrt(a2);\n\t\t\t\t\tString formated = String.format(\"%.3f\", ra);\n\t\t\t\t\tSystem.out.println(\"a = \" + formated);\n\t\t\t\t}else if(b == -1) {\n\t\t\t\t\tint b2 = c*c - a*a;\n\t\t\t\t\tdouble rb = Math.sqrt(b2);\n\t\t\t\t\tString formated = String.format(\"%.3f\", rb);\n\t\t\t\t\tSystem.out.println(\"b = \" + formated);\n\t\t\t\t}else if(c == -1) {\n\t\t\t\t\tint c2 = a*a + b*b;\n\t\t\t\t\tdouble rc = Math.sqrt(c2);\n\t\t\t\t\tString formated = String.format(\"%.3f\", rc);\n\t\t\t\t\tSystem.out.println(\"c = \" + formated);\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t\ttestCaseIndex++;\n\t\t}\n\t\t//outside of while\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1006_111__1_1006_87", "golden_code": "\nimport java.util.Scanner;\n\n\npublic class Main {\n    public static void main(String args[]){\n        \n        float a ;\n        Scanner in = new Scanner(System.in);\n        a = in.nextFloat();\n        while(a != 0.00f){\n            int counter = 0;\n            float ans = 0.00f;\n            \n            for (float i = 2.00f; ans < a; i++) {\n                ans += 1.00f/i;\n                counter++ ;   \n            }\n            System.out.println(counter +\" card(s)\");\n            a = in.nextFloat();\n        }\n    }\n}", "generated_code": "\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.InputMismatchException;\nimport java.util.Scanner;\nimport java.util.Set;\n\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(System.in);\n        //FastScanner in = new FastScanner((InputStream) System.in);\n        float f;\n        f=in.nextFloat();\n        StringBuilder sb=new StringBuilder();\n        while(f!=0f){\n            float sum=0;\n            float i=2;\n            for(i=2;sum<f;i++){\n                sum+=(1f/i);\n            }\n            sb.append((int)(i-2)).append(\" card(s)\").append(\"\\n\");\n            f=in.nextFloat();\n        }\n        System.out.println(sb.toString().trim());\n    }\n}\n\nclass FastScanner {\n\n    private InputStream stream;\n    private byte[] buffer = new byte[1024];\n    private int curChar;\n    private int numChars;\n\n    public FastScanner(InputStream stream) {\n        this.stream = stream;\n    }\n\n    int read() {\n        if (numChars == -1) {\n            throw new InputMismatchException();\n        }\n        if (curChar >= numChars) {\n            curChar = 0;\n            try {\n                numChars = stream.read(buffer);\n            } catch (IOException e) {\n                throw new InputMismatchException();\n            }\n            if (numChars <= 0) {\n                return -1;\n            }\n        }\n        return buffer[curChar++];\n    }\n\n    boolean isWhiteSpaceChar(int c) {\n        return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n    }\n\n    boolean isEndline(int c) {\n        return c == '\\n' || c == '\\r' || c == -1;\n    }\n\n    int nextInt() {\n        return Integer.parseInt(next());\n    }\n\n    long nextLong() {\n        return Long.parseLong(next());\n    }\n\n    double nextDouble() {\n        return Double.parseDouble(next());\n    }\n\n    String next() {\n        int c = read();\n        while (isWhiteSpaceChar(c)) {\n            c = read();\n        }\n        StringBuilder res = new StringBuilder();\n        do {\n            res.appendCodePoint(c);\n            c = read();\n        } while (!isWhiteSpaceChar(c));\n        return res.toString();\n    }\n\n    String nextLine() {\n        int c = read();\n        while (isEndline(c)) {\n            c = read();\n        }\n        StringBuilder res = new StringBuilder();\n        do {\n            res.appendCodePoint(c);\n            c = read();\n        } while (!isEndline(c));\n        return res.toString();\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_219__1_1001_426", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        int a, b;\n        Scanner in = new Scanner(System.in);\n       while( in.hasNext() ){\n           a = in.nextInt();\n           b = in.nextInt();\n           System.out.println(a+b);\n       }\n    }\n    \n}\n", "generated_code": "import java.awt.CardLayout;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.FileDialog;\nimport java.awt.LayoutManager;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.font.NumericShaper;\nimport java.awt.image.BufferedImage;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.Queue;\nimport java.util.Random;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.Stack;\nimport java.util.TreeSet;\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\n\nimport org.omg.Messaging.SyncScopeHelper;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.FilenameFilter;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.io.InputStream;\nimport java.lang.reflect.Array;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n}\n\nclass TaskC {\n\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile (scan.hasNext()) {\n\t\t\tSystem.out.println(scan.nextInt() + scan.nextInt());\n\t\t}\n\t}\n}\n\nclass InputReader {\n\tBufferedReader br;\n\tStringTokenizer st;\n\n\tpublic InputReader(InputStream in) {\n\t\tbr = new BufferedReader(new InputStreamReader(in));\n\t\tst = null;\n\t}\n\n\tpublic String next() {\n\t\twhile (st == null || !st.hasMoreTokens()) {\n\t\t\ttry {\n\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn st.nextToken();\n\t}\n\n\tpublic int nextInt() {\n\t\treturn Integer.parseInt(next());\n\t}\n\n\tpublic long nextLong() {\n\t\treturn Long.parseLong(next());\n\t}\n\n\tpublic float nextFloat() {\n\t\treturn Float.parseFloat(next());\n\t}\n\n\tpublic double nextDouble() {\n\t\treturn Double.parseDouble(next());\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_9__1_1001_395", "golden_code": "import java.io.EOFException;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args){\n        Scanner input = new Scanner(System.in);\n        while(true){\n            if(!input.hasNext())\n                break;\n            int a = input.nextInt();\n            int b = input.nextInt();\n            System.out.println(a+b);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main\n{\npublic static void main(String[] args)\n{\nScanner input=new Scanner(System.in);\nwhile(input.hasNext())\n{\nint a,b,sum;\na=input.nextInt();\nb=input.nextInt();\nsum=a+b;\nSystem.out.println(sum);\n}\n}\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_6__1_1001_292", "golden_code": "import java.util.*;\npublic class Main\n{\npublic static void main(String[]args)\n{\n   Scanner inp=new Scanner (System.in);\n   while(inp.hasNextInt())\n    {\n        int a=inp.nextInt(),b=inp.nextInt();\n        System.out.println(a+b);\n}\n}\n}", "generated_code": "import java.io.*;\nimport java.util.*;\n\nclass Main{\n\n\tpublic static void main(String args[]){\n\n\t\tScanner sc = new Scanner(System.in);\n\n\t\twhile(sc.hasNext()){\n\n\t\t\tint first = sc.nextInt();\n\n\t\t\tint scd = sc.nextInt();\n\n\t\t\tint sum = first + scd;\n\n\t\t\tSystem.out.println(sum);\n\n\t\t}\n\n\t}\n\n}", "score": 1.0}
{"id": "SHARE_1_2644_15__1_2822_3", "golden_code": "import java.util.*;\n\npublic class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner input=new Scanner(System.in);\n\t\tchar [] alphabet={'e','p','l','r','a','g','f','s','o','x','v','c','w','t','i','b','z','d','h','n','y','k','m','j','u','q'};\n\t\tString text,desc;\n\t\twhile(input.hasNext()){\n\t\t\ttext=input.nextLine();\n\t\t\tdesc=\"\";\n\t\t\tfor(int i=0;i<text.length();i++){\n\t\t\t\tchar c=text.charAt(i);\n\t\t\t\t\n\t\t\t\tif(c<'A' || (c<'a' && c>'Z') || c>'z')\n\t\t\t\t\tdesc+=c;\n\t\t\t\telse if(c>='a' && c<='z')\n\t\t\t\t\tdesc+=alphabet[c-'a'];\n\t\t\t\telse\n\t\t\t\t\tdesc+=String.valueOf(alphabet[c-'A']).toUpperCase();\n\t\t\t\t\n\t\t\t}\n\t\t\tSystem.out.println(desc);\n\t\t}\n\t}\n}", "generated_code": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\nimport java.util.Scanner;\n\n/**\n *\n * @author user\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner s = new Scanner(System.in);\n        int test = s.nextInt();\n        for (int ij = 0; ij  < test; ij ++) {\n            int n = s.nextInt();\n\n            System.out.print(n*(n+1)/2 + \" \");\n            int ss=0;\n            for(int i=1 ; i<(2*n)+1 ; i= i+2){\n                ss = i + ss;\n            }\n            System.out.print(ss+\" \");\n            int sss=0;\n            for(int i=2 ; i<=(2*n) ; i= i+2){\n                sss = i + sss;\n            }\n            System.out.println(sss);\n            \n            \n\n        }\n\n    }\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1006_16__1_1119_15", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args){\n        Scanner in=new Scanner(System.in);\n        float n=in.nextFloat();\n        while(n!=0.00)\n        {\n            float i=1;\n            while(n-(1/(i+1))>0)\n            {\n                n=n-(float)(1/(i+1));\n                i++;\n            }\n            System.out.println((int)i+\" card(s)\");\n            n=in.nextFloat();\n        }\n    }\n}", "generated_code": "import java.util.*;\n\nclass Main {\n\n\tpublic static void main(String[] u) {\n\t\tScanner b = new Scanner(System.in);\n\t\twhile (b.hasNext()) {\n\t\t\tint n = b.nextInt(), c = b.nextInt() * 2, s = 0, j = 2, i = 1, a[] = new int[n];\n\t\t\twhile (i <= n)\n\t\t\t\tif (i % j == 0 && i != 2) {\n\t\t\t\t\tj = 2;\n\t\t\t\t\ti++;\n\t\t\t\t} else if (j * j++ > i) {\n\t\t\t\t\ta[s++] = i++;\n\t\t\t\t\tj = 2;\n\t\t\t\t}\n\t\t\tj = (s - (s % 2 != 0 ? c - 1 : c)) / 2;\n\t\t\tif(j<0)j=0;\n\t\t\tString v = n + \" \" + c / 2 + \":\";\n\t\t\tfor(s-=j;j<s;)\n\t\t\t\tv += \" \" + a[j++];\n\t\t\tSystem.out.println(v + '\\n');\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_5_1003_26__5_1003_9", "golden_code": "\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        int problems = 0;\n        Scanner input = new Scanner(System.in);\n        problems = input.nextInt();\n        for (int prob = 1; prob <= problems; prob++) {\n            int m = 0;\n            int s = 0;\n            m = input.nextInt();\n            s = input.nextInt();\n            List coins = new ArrayList<Coin>();\n            for (int coin = 1; coin <= m; coin++) {\n                coins.add(new Coin(input.nextInt(), input.nextInt()));\n            }\n            Integer[][] f = new Integer[s + 1][s + 1];//f[i][j]=>the smallest number of coins for reaching the (i,j) value;\n\n            for (int i = 0; i <= s; i++) {\n\n                for (int j = 0; j <= s; j++) {\n                    if (i == 0 && j == 0) {\n                        f[i][j] = 0;\n                    } else {\n                        int tmp = Integer.MAX_VALUE;\n                        for (int c = 0; c < coins.size(); c++) {\n                            Coin coin = (Coin) coins.get(c);\n                            int ii = i - coin.GetX();\n                            int jj = j - coin.GetY();\n                            if ((ii >= 0) && (jj >= 0)) {\n                                if (f[ii][jj] != null) {\n                                    tmp = Math.min(tmp, f[ii][jj]);\n                                }\n                            }\n                        }\n                        if (tmp == Integer.MAX_VALUE) {\n                            f[i][j] = null;\n                        } else {\n                            f[i][j] = tmp + 1;\n                        }\n                    }\n                }\n            }\n            //finding points that i^2+j^2=s^2 and is minimum;\n            int result = Integer.MAX_VALUE;\n            for (int i = 0; i <= s; i++) {\n                for (int j = 0; j <= s; j++) {\n                    if ((i * i + j * j == s * s) && f[i][j] != null) {\n                        result = Math.min(f[i][j], result);\n                    }\n                }\n            }\n            if (result == Integer.MAX_VALUE) {\n                System.out.println(\"not possible\");\n            } else {\n                System.out.println(result);\n            }\n\n\n        }\n\n    }\n}\n\nclass Coin {\n\n    int _x;\n    int _y;\n\n    public Coin(int x, int y) {\n        _x = x;\n        _y = y;\n    }\n\n    public int GetX() {\n        return _x;\n    }\n\n    public int GetY() {\n        return _y;\n    }\n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tstatic int INF = 100000;\n\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\n\t\tint n = input.nextInt();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint m = input.nextInt();\n\t\t\tint s = input.nextInt();\n\t\t\tArrayList<Coin> coins = new ArrayList<Coin>();\n\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tcoins.add(new Coin(input.nextInt(), input.nextInt()));\n\t\t\t}\n\n\t\t\tint[][][] sol = new int[m][s + 1][s + 1];\n\n\t\t\tfor (int j = 1; j < m; j++)\n\t\t\t\tfor (int u1 = 0; u1 <= s; u1++)\n\t\t\t\t\tfor (int u2 = 0; u2 <= s; u2++) {\n\n\t\t\t\t\t\tif (u1 == 0 && u2 == 0) {\n\t\t\t\t\t//\t\tSystem.out.println(\"0000000000\" + j + \",\" + u1\n\t\t\t\t\t\t//\t\t\t+ \",\" + u2);\n\t\t\t\t\t\t\tsol[j][u1][u2] = 0;\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\tsol[j][u1][u2] = INF;\n\t\t\t\t\t}\n\n\t\t\tint min = -1;\n\t\t\tfor (int u1 = 0; u1 <= s; u1++) {\n\t\t\t\tfor (int u2 = 0; u2 <= s; u2++) {\n\n\t\t\t\t\tif ((coins.get(0).x == 0 && u1 == 0)\n\t\t\t\t\t\t\t&& (coins.get(0).y != 0 && u2 != 0))\n\t\t\t\t\t\tsol[0][u1][u2] = (u2) % coins.get(0).y == 0 ? u2\n\t\t\t\t\t\t\t\t/ coins.get(0).y : INF;\n\t\t\t\t\telse if ((coins.get(0).y == 0 && u2 == 0)\n\t\t\t\t\t\t\t&& (coins.get(0).x != 0 && u1 != 0))\n\t\t\t\t\t\tsol[0][u1][u2] = (u1) % coins.get(0).x == 0 ? u1\n\t\t\t\t\t\t\t\t/ coins.get(0).x : INF;\n\t\t\t\t\telse if (coins.get(0).y != 0 && coins.get(0).x != 0\n\t\t\t\t\t\t\t&& u2 != 0 && u1 != 0)\n\t\t\t\t\t\tsol[0][u1][u2] = (u1 % coins.get(0).x == 0\n\t\t\t\t\t\t\t\t&& u2 % coins.get(0).y == 0 && u1\n\t\t\t\t\t\t\t\t/ coins.get(0).x == u2 / coins.get(0).y) ? u1\n\t\t\t\t\t\t\t\t/ coins.get(0).x : INF;\n\t\t\t\t\telse\n\t\t\t\t\t\tsol[0][u1][u2] = INF;\n\n\t\t\t\t\tif (Math.sqrt(u1 * u1 + u2 * u2) == s) {\n//\t\t\t\t\t\tSystem.out.println(\"0 ,\" + u1 + \",\" + u2 + \" : \"\n\t//\t\t\t\t\t\t\t+ sol[0][u1][u2]);\n\t\t\t\t\t\tif (min == -1)\n\t\t\t\t\t\t\tmin = sol[0][u1][u2];\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tmin = Math.min(min, sol[0][u1][u2]);\n\t\t}\n\t\t//\t\t\tSystem.out.println(u1 + \",\" + u2 + \" INIT : \"\n\t\t\t//\t\t\t\t+ sol[0][u1][u2]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (int j = 1; j < m; j++)\n\t\t\t\tfor (int u1 = 0; u1 <= s; u1++)\n\t\t\t\t\tfor (int u2 = 0; u2 <= s; u2++) {\n\t\t\t\t\t\tif (u1 != 0 || u2 != 0) {\n\t\t\t\t\t\t\tif (u1 - coins.get(j).x >= 0\n\t\t\t\t\t\t\t\t\t&& u2 - coins.get(j).y >= 0) {\n\t\t\t\t\t\t\t\tsol[j][u1][u2] = Math.min(sol[j - 1][u1][u2],\n\t\t\t\t\t\t\t\t\t\tsol[j][u1 - coins.get(j).x][u2\n\t\t\t\t\t\t\t\t\t\t\t\t- coins.get(j).y] + 1);\n\t\t\t\t/*\t\t\t\tSystem.out.println(\"+1 : \"\n\t\t\t\t\t\t\t\t\t\t+ j\n\t\t\t\t\t\t\t\t\t\t+ \",\"\n\t\t\t\t\t\t\t\t\t\t+ (u1 - coins.get(j).x)\n\t\t\t\t\t\t\t\t\t\t+ \",\"\n\t\t\t\t\t\t\t\t\t\t+ (u2 - coins.get(j).y)\n\t\t\t\t\t\t\t\t\t\t+ \": \"\n\t\t\t\t\t\t\t\t\t\t+ sol[j][u1 - coins.get(j).x][u2\n\t\t\t\t\t\t\t\t\t\t\t\t- coins.get(j).y]);*/\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\tsol[j][u1][u2] = sol[j - 1][u1][u2];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//System.out.println(j + \",\" + u1 + \",\" + u2 + \" : \"\n\t\t\t\t\t\t\t//\t+ sol[j][u1][u2]);\n\t\t\t\t\t\tif (Math.sqrt(u1 * u1 + u2 * u2) == s) {\n\t\t\t\t\t\t\t//System.out.println(\"S : \" + j + \",\" + u1 + \",\" + u2\n\t\t\t\t\t\t\t\t//\t+ \" : \" + sol[j][u1][u2]);\n\t\t\t\t\t\t\tif (min == -1)\n\t\t\t\t\t\t\t\tmin = sol[j][u1][u2];\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tmin = Math.min(min, sol[j][u1][u2]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t/*\n\t\t\t * for (int u1 = 0; u1 <= s; u1++) for (int u2 = 0; u2 <= s; u2++) {\n\t\t\t * if (Math.sqrt(u1 u1 + u2 u2) == s) { if (min == -1) min = sol[m -\n\t\t\t * 1][u1][u2]; else min = Math.min(min, sol[m - 1][u1][u2]); } }\n\t\t\t */\n\t\t\tif (min >= INF)\n\t\t\t\tSystem.out.println(\"not possible\");\n\t\t\telse\n\t\t\t\tSystem.out.println(min);\n\t\t\t// System.out.println(sol[m-1][s][s]);\n\n\t\t}\n\n\t}\n\n}\n\nclass Coin {\n\tint x, y;\n\n\tCoin(int _x, int _y) {\n\t\tx = _x;\n\t\ty = _y;\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1265_9__1_2187_1", "golden_code": "\n\nimport java.util.*;\n\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\twhile (n-- > 0) {\n\t\t\tint t = in.nextInt();\n\t\t\tfor (int i = 1; i <=t; i += 2) {\n\t\t\t\tif (t % i == 0) {\n\t\t\t\t\tint g = t / i;\n\t\t\t\t\tint f = 1;\n\t\t\t\t\tint j = 1;\n\t\t\t\t\tfor (; f < g; j++) {\n\t\t\t\t\t\tf *= 2;\n\t\t\t\t\t}\n\t\t\t\t\tif (f == g) {\n\t\t\t\t\t\tSystem.out.println(i + \" \" + (j - 1));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main{\n\tstatic Scanner s = new Scanner(System.in);\n\tpublic static void main(String argv[]){\n\t\tint lh=0;\n\t\tint lm=0;\n\t\tint ls=0;\n\t\tdouble speed=0;\n\t\tdouble dist=0;\n\t\twhile(s.hasNext()){\n\t\t\tString line = s.nextLine();\n\t\t\tif(line.split(\" \").length == 1){\n\t\t\t\tint h=Integer.parseInt(line.split(\" \")[0].split(\":\")[0]);\n\t\t\t\tint m=Integer.parseInt(line.split(\" \")[0].split(\":\")[1]);\n\t\t\t\tint s=Integer.parseInt(line.split(\" \")[0].split(\":\")[2]);\n\t\t\t\tdist+=(h-lh)*speed + (m-lm)*speed/60. + (s-ls)*speed/60./60.;\n\t\t\t\tSystem.out.println(String.format(\"%s %.2f km\",line,dist));\n\t\t\t\tlh = h;\n\t\t\t\tlm = m;\n\t\t\t\tls = s;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tint h=Integer.parseInt(line.split(\" \")[0].split(\":\")[0]);\n\t\t\t\tint m=Integer.parseInt(line.split(\" \")[0].split(\":\")[1]);\n\t\t\t\tint s=Integer.parseInt(line.split(\" \")[0].split(\":\")[2]);\n\t\t\t\tdist+=(h-lh)*speed + (m-lm)*speed/60. + (s-ls)*speed/60./60.;\n\t\t\t\tspeed = Integer.parseInt(line.split(\" \")[1]);\n\t\t\t\tlh = h;\n\t\t\t\tlm = m;\n\t\t\t\tls = s;\n\t\t\t}\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_2822_40__1_2747_26", "golden_code": "\n\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc = new Scanner(System.in);\n\t\tint cases = sc.nextInt();\n\t\tfor(int i = 0 ; i<cases ; i++)\n\t\t\tnormal(sc.nextInt());\n\t}\n\t\n\tpublic static void normal(int n){\n\t\tlong res = (n*(n+1))/2;\n\t\tSystem.out.print(res);\n\t\tlong resodd = (n*(n+1))-n;\n\t\tSystem.out.print(\" \"+resodd);\n\t\tlong reeven = (n*(n+1));\n\t\tSystem.out.print(\" \"+reeven);\n\t\tSystem.out.println();\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner cin =new Scanner(System.in);\n\t\tint total;\n\t\tint counter=0;\n\t\t\n\t\ttotal=cin.nextInt();\n\t\t\n\t\t\n\t\twhile (counter<total){\n\t\t\tint a=0,b=0,c=0,d=0;\n\t\t\tString s=cin.next();\n\t\t\t//if(s.contains());\n\t\t\tfor(int i=0;i<s.length();i++){\n\t\t\t\tint x=(int)s.charAt(i);\n\t\t\t\tchar ch=s.charAt(i);\n\t\t\t\tif(x>=97 && x<=122) a=1;\n\t\t\t\tif(x>=65 && x<=90) b=1;\n\t\t\t\tif(x>=48 && x<=57) c=1;\n\t\t\t\tif( ch=='!'  ||ch=='@'   ||ch=='#'   ||ch=='$'   ||ch=='%'   ||ch=='^'   ||ch=='&'   ||ch=='*'   ||ch=='('  ||ch==')'   )d=1;\n\t\t\t}\n\t\t\tint f=a+b+c+d;\n\t\tif(f==1)System.out.println(\"very bad\");\n\t\telse if(f==2) System.out.println(\"bad\");\n\t\telse if(f==3) System.out.println(\"good\");\n\t\telse if(f==4) System.out.println(\"overkill\");\n\t\t\tcounter++;\n\t\t}\n\t\tcin.close();\n\t\t\t\n\t\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_503__1_2190_0", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input1 = new Scanner(System.in);\n\n\t\twhile(input1.hasNext()){\n\n        int num1 = input1.nextInt();\n        int num2 = input1.nextInt();\n\n        System.out.println(num1+num2);\n\t}\n    }\n    \n}\n", "generated_code": "import java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.Queue;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.io.BufferedReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.io.InputStream;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport javax.naming.BinaryRefAddr;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tScanner scan = new Scanner(System.in);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n}\n\nclass TaskC {\n\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile (scan.hasNext()) {\n\t\t\tlong n = scan.nextLong(), a;\n\t\t\tboolean turn = true;\n\t\t\ta = n / 9;\n\t\t\tif (a * 9 < n) {\n\t\t\t\ta++;\n\t\t\t}\n\t\t\twhile (true) {\n\t\t\t\tif (a <= 1) {\n\t\t\t\t\tif (!turn) {\n\t\t\t\t\t\tout.println(\"Ollie wins.\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tout.println(\"Stan wins.\");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (turn) {\n\t\t\t\t\tif (a / 2 * 2 < a) {\n\t\t\t\t\t\ta = a / 2 + 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ta /= 2;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (a / 9 * 9 < a) {\n\t\t\t\t\t\ta = a / 9 + 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ta /= 9;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tturn = !turn;\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass InputReader {\n\tBufferedReader br;\n\tStringTokenizer st;\n\n\tpublic InputReader(InputStream in) {\n\t\tbr = new BufferedReader(new InputStreamReader(in));\n\t\tst = null;\n\t}\n\n\tpublic String next() {\n\t\twhile (st == null || !st.hasMoreTokens()) {\n\t\t\ttry {\n\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn st.nextToken();\n\t}\n\n\tpublic int nextInt() {\n\t\treturn Integer.parseInt(next());\n\t}\n\n\tpublic long nextLong() {\n\t\treturn Long.parseLong(next());\n\t}\n\n\tpublic float nextFloat() {\n\t\treturn Float.parseFloat(next());\n\t}\n\n\tpublic double nextDouble() {\n\t\treturn Double.parseDouble(next());\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1001_421__1_1659_22", "golden_code": "import java.util.Scanner;\n\npublic class Main \n{\n    public static void main(String[] args) \n    {\n        Scanner input = new Scanner(System.in);\n        int a, b;\n        while (input.hasNextInt())\n        {\n            a = input.nextInt();\n            b = input.nextInt();\n            System.out.println(a + b);\n        }\n    }\n}\n", "generated_code": "import java.io.File;\nimport java.io.*;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        double Num=0;\n        String matn=\"\";\n        double [] s=new double[110];\n        int i=0, count=0;\n        while(Num != 999)\n                {\n                    Num=input.nextDouble();\n                    s[i]=Num;\n                    i++;\n                    count++;\n                }\n        for(int j=0;j<count-2;j++)\n        System.out.printf(\"%.2f\\n\",(s[j+1]-s[j]));\n        if( Num ==999)\n            System.out.println(\"End of Output\");\n        \n    }\n}", "score": 0.0}
{"id": "SHARE_1_1022_11__1_1022_12", "golden_code": "\nimport java.util.Scanner;\nimport java.util.Stack;\n\n/**\n *\n * @author Mbt925\n */\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        in.nextLine();\n        for (int i = 0; i < t;) {\n            Stack<String> forward = new Stack<String>();\n            Stack<String> backward = new Stack<String>();\n            String current = \"http://www.acm.org/\";\n            boolean finish = false;\n            while (!finish) {\n                String command = in.nextLine();\n                if (!command.equalsIgnoreCase(\"QUIT\")) {\n                    if (command.contains(\"VISIT\")) {\n                        String[] part = command.split(\" \");\n                        command = part[0];\n                        String URL = part[1];\n                        backward.push(current);\n                        current = URL;\n                        System.out.println(current);\n                        forward.clear();\n                    } else if (command.equalsIgnoreCase(\"BACK\")) {\n                        if (backward.isEmpty()) {\n                            System.out.println(\"Ignored\");\n                        } else {\n                            forward.push(current);\n                            current = backward.pop();\n                            System.out.println(current);\n                        }\n                    } else if (command.equalsIgnoreCase(\"FORWARD\")) {\n                        if (forward.isEmpty()) {\n                            System.out.println(\"Ignored\");\n                        } else {\n                            backward.push(current);\n                            current = forward.pop();\n                            System.out.println(current);\n                        }\n                    }\n                } else {\n                    finish = true;\n                }\n            }\n            i++;\n            if(i<t)\n                System.out.println();\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\nimport java.util.Stack;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int n = input.nextInt();\n        Stack<String> forward = new Stack<String>();\n        Stack<String> back = new Stack<String>();\n        for (int i = 0; i < n; i++) {\n            forward.clear();\n            back.clear();\n            String statement, defaultWeb = \"http://www.acm.org/\", current = defaultWeb;\n            while (true) {\n                statement = input.next();\n                if (statement.equals(\"QUIT\")) {\n                    break;\n                } else if (statement.equals(\"VISIT\")) {\n                    back.push(current);\n                    forward.clear();\n                    current = input.next();\n                    System.out.println(current);\n                } else if (statement.equals(\"BACK\")) {\n                    if (back.isEmpty()) {\n                        System.out.println(\"Ignored\");\n                    } else {\n                        forward.push(current);\n                        current = back.pop();\n                        System.out.println(current);\n                    }\n\n                } else if (statement.equals(\"FORWARD\")) {\n                    if (forward.isEmpty()) {\n                        System.out.println(\"Ignored\");\n                    } else {\n                        back.push(current);\n                        current = forward.pop();\n                        System.out.println(current);\n                    }\n                }\n            }\n            if (i != n - 1) System.out.println();\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2737_57__1_106022_37", "golden_code": "import java.util.Scanner;\nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint n = scanner.nextInt();\n\t\tfor (int i =0;i<n;i++){\n\t\t\tint a = scanner.nextInt();\n\t\t\tint b = scanner.nextInt();\n\t\t\tlong sum =0;\n\t\t\tfor (int j = 0;j<a;j++)\n\t\t\t\tfor (int k=j;k<j+b;k++)\n\t\t\t\t\tsum +=k;\n\t\t\tSystem.out.println(sum);\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main{\n    public static void main(String[] args){\n        Scanner scan = new Scanner(System.in);\n        int num= scan.nextInt();\n        while(num-->0){\n            String number= scan.next();\n            if(number.length()==1){\n                System.out.println(number);\n                continue;\n            }\n            int[] digit = new int[number.length()];\n            \n            for(int i=0; i<number.length(); i++)\n                digit[i]= number.charAt(i)-'0';\n            \n            for(int i= number.length()-1 ; i>=1 ; i--){\n                if(digit[i]>=5){\n                    digit[i]=0;\n                    digit[i-1]+=1;\n                }\n                else\n                    digit[i]=0;\n            }\n            \n            for(int i=0; i<number.length(); i++)\n                System.out.print(digit[i]);\n            System.out.println();\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_101329_8__1_101329_28", "golden_code": "\nimport java.util.Scanner;\n\n\npublic class Main {\n    public static void main (String [] ar){\n\n        Scanner s = new Scanner(System.in);\n        long n=s.nextLong();\n        for (long i=0 ; i<n ; i++){\n        \n            long x=s.nextLong();\n            long ans = 2;\n            if (x==0 || x==1 || x==2)\n                System.out.println(ans);\n            else{\n                Z:for (long j=x ; j<x+1000000000 ; j++){\n                    if (j%2==0)\n                        continue;\n                    for (long k=3 ; k<=Math.sqrt(j) ; k+=2){\n                        if (j%k==0)\n                            continue Z;\n                    }\n                    ans=j;\n                    break;\n                }\n            System.out.println(ans);\n            }\n            \n        }\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n=-1;\n        while(n<1)\n            n=in.nextInt();\n        out:for(int i=0;i<n;i++){\n            long m=-1;\n            while(m<0||m>4*Math.pow(10, 9))\n                m=in.nextLong();\n            long out=0;\n            if(m==2||m==0||m==1){\n                out=2;\n                System.out.println(out);\n                continue out;\n            }\n            if(m%2==0)\n                m++;\n            in:for(long j=m;true;j=j+2){\n                \n                    for(long w=3;(w*w)<=j;w=w+2){\n                        if(j%w==0)\n                            continue in;\n                    }\n                    out=j;\n                    break in;\n            }\n            System.out.println(out);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_271__1_1001_354", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {            \n            System.out.println(in.nextInt()+in.nextInt());\n        }\n    }\n    \n}\n", "generated_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main\n{\n    static String ReadLn (int maxLg)  // utility function to read from stdin\n    {\n        byte lin[] = new byte [maxLg];\n        int lg = 0, car = -1;\n        String line = \"\";\n\n        try\n        {\n            while (lg < maxLg)\n            {\n                car = System.in.read();\n                if ((car < 0) || (car == '\\n')) break;\n                lin [lg++] += car;\n            }\n        }\n        catch (IOException e)\n        {\n            return (null);\n        }\n\n        if ((car < 0) && (lg == 0)) return (null);  // eof\n        return (new String (lin, 0, lg));\n    }\n\n    public static void main (String args[])  // entry point from OS\n    {\n        Main myWork = new Main();  // create a dinamic instance\n        myWork.Begin();            // the true entry point\n    }\n\n    void Begin()\n    {\n        String input;\n        StringTokenizer idata;\n        int a, b, min, max, num, n, cycle, cyclemax;\n\n        while ((input = Main.ReadLn (255)) != null)\n        {\n          idata = new StringTokenizer (input);\n          a = Integer.parseInt (idata.nextToken());\n          b = Integer.parseInt (idata.nextToken());\n    \n          System.out.println (a + b);\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2257_13__1_2551_1", "golden_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\n\nclass Main{\n\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tBufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(input.readLine());\n\t\twhile (n-- > 0) {\n\t\t\tStringTokenizer s = new StringTokenizer(input.readLine());\n\t\t\tint a = Integer.parseInt(s.nextToken());\n\t\t\tint b = Integer.parseInt(s.nextToken());\n\t\t\tif (a < b) {\n\t\t\t\tSystem.out.println(\"impossible\");\n\t\t\t} else {\n\t\t\t\tint t = a + b;\n\t\t\t\tif (t % 2 != 0) {\n\t\t\t\t\tSystem.out.println(\"impossible\");\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println((a + b) / 2 + \" \" + ((a + b) / 2 - b));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\nimport java.util.Vector;\n\nclass Main {\n\tpublic static void main(String[] args) throws Exception  {\n\t\tVector <Character> one = new Vector <Character>();\n\t\tVector <Character> two = new Vector <Character>();\n\t\tVector <Character> three = new Vector <Character>();\n\t\tVector <Character> four = new Vector <Character>();\n\t\tone.add('A');\n\t\tone.add('D');\n\t\tone.add('G');\n\t\tone.add('J');\n\t\tone.add('M');\n\t\tone.add('P');\n\t\tone.add('T');\n\t\tone.add('W');\n\t\ttwo.add('B');\n\t\ttwo.add('E');\n\t\ttwo.add('H');\n\t\ttwo.add('K');\n\t\ttwo.add('N');\n\t\ttwo.add('Q');\n\t\ttwo.add('U');\n\t\ttwo.add('X');\n\t\tthree.add('C');\n\t\tthree.add('F');\n\t\tthree.add('I');\n\t\tthree.add('L');\n\t\tthree.add('O');\n\t\tthree.add('R');\n\t\tthree.add('V');\n\t\tthree.add('Y');\n\t\tfour.add('Z');\n\t\tfour.add('S');\n\t\t\n\t\tScanner s=new Scanner(System.in);\n\t\tint n = s.nextInt();\n\t\twhile(n>0){\n\t\t\tString a = s.next();\n\t\t\tString b = s.next();\n\t\t\tint a1=0;\n\t\t\tint b1=0;\n\t\t\tfor(int i=0 ; i<a.length() ; i++){\n\t\t\t\tif(one.contains(a.charAt(i))){\n\t\t\t\t\ta1+=1;\n\t\t\t\t}\n\t\t\t\telse if(two.contains(a.charAt(i))){\n\t\t\t\t\ta1+=2;\n\t\t\t\t}\n\t\t\t\telse if(three.contains(a.charAt(i))){\n\t\t\t\t\ta1+=3;\n\t\t\t\t}\n\t\t\t\telse if(four.contains(a.charAt(i))){\n\t\t\t\t\ta1+=4;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i=0 ; i<b.length() ; i++){\n\t\t\t\tif(one.contains(b.charAt(i))){\n\t\t\t\t\tb1+=1;\n\t\t\t\t}\n\t\t\t\telse if(two.contains(b.charAt(i))){\n\t\t\t\t\tb1+=2;\n\t\t\t\t}\n\t\t\t\telse if(three.contains(b.charAt(i))){\n\t\t\t\t\tb1+=3;\n\t\t\t\t}\n\t\t\t\telse if(four.contains(b.charAt(i))){\n\t\t\t\t\tb1+=4;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(a1 == b1){\n\t\t\t\tSystem.out.println(\"YES\");\n\t\t\t}\n\t\t\telse\n\t\t\t\tSystem.out.println(\"NO\");\n\t\t\tn--;\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2770_27__1_2121_65", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    static int[][] road;\n    public static void main(String[] args) {\n\n        Scanner input = new Scanner(System.in);\n        int testcase = input.nextInt();\n        for (int i = 0; i < testcase; i++) {\n            int n = input.nextInt();\n            int m = input.nextInt();\n            road = new int[m][m];\n            int count=0;\n            for (int j = 0; j < n; j++) {\n                input.next();\n                int temp=input.nextInt();\n                for (int k = 0; k < temp; k++) {\n                    int satr,soton;\n                    satr=input.nextInt();\n                    soton=input.nextInt();\n                    if (road[satr][soton]==0 && satr!=soton) {\n                        road[satr][soton]=1;\n                        road[soton][satr]=1;\n                        count++;\n                    }\n                }\n            }\n            System.out.println(count);\n        }\n    }\n}", "generated_code": "\nimport java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        while(s.hasNext()){\n            long n = s.nextLong();\n            BigInteger first = BigInteger.ONE;\n            BigInteger second = BigInteger.ONE;\n            for(int i=2;i<n;i++){\n                BigInteger tmp = first;\n                first = second;\n                second = tmp.add(second);\n            }\n            System.out.println(second);\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_2733_24__1_109016_29", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner= new Scanner(System.in);\n        int n=scanner.nextInt();\n        int n2,input;\n        String str=\"\";\n        int k=0;   //tedad\n        \n        for (int i = 0; i < n; i++) {\n            n2=scanner.nextInt();\n            ArrayList<Integer> p_array = new ArrayList<Integer>();\n            ArrayList<Integer> w_array = new ArrayList<Integer>();\n            ArrayList<Integer>    one_zero_array= new ArrayList<Integer>();\n            ArrayList<Integer>    markation= new ArrayList<Integer>();\n             \n            \n            \n            for (int j = 0; j < n2; j++) {\n                input=scanner.nextInt();\n                p_array.add(input);\n                if(j==0){\n                    for (int j2 = 0; j2 < input; j2++) {\n                        one_zero_array.add(0);\n                        markation.add(0);\n                    \n                        }\n                    }\n                else{\n                    int m=p_array.get(j)-p_array.get(j-1);\n                    for (int j2 = 0; j2 < m; j2++) {\n                        one_zero_array.add(0);\n                        markation.add(0);\n                    \n                    }\n                    \n                    \n                }\n                one_zero_array.add(1);\n                markation.add(0);\n                }\n            \n            \n        \n            \n            for (int j = 0; j <one_zero_array.size(); j++) {\n                if(one_zero_array.get(j)==1){\n        \n\n                    markation.set(j, 1);\n                    \n                    for (int l = j-1; l >=0 ; l--) {\n                        if(one_zero_array.get(l)==0 && markation.get(l)==1)\n                            k++;\n                    \n                        if(one_zero_array.get(l)==0 && markation.get(l)==0)\n                        {    markation.set(l, 1);\n//                            System.out.println(k+1);\n                            w_array.add(k+1);\n                            break;\n                        }\n                        \n                    }\n                    k=0;\n            \n                \n            }\n            \n        }\n                for (int j = 0; j < w_array.size(); j++) {\n                \tSystem.out.print(w_array.get(j)+\" \");\n\t\t\t\t\t\n\t\t\t\t}\n            }\n            \n                    \n                }\n    }", "generated_code": "\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\n\n\n/**\n *\n * @author M.H.Zarei\n */\npublic class Main {\n\n    public static double ClosestProblem(Point[] points) {\n        if (points.length < 2) {\n            return 0;\n        }\n        if (points.length <= 3) {\n            return Math.sqrt(GetNearest(points));\n        } else {\n            int mid = points.length / 2;\n            Point[] sx, sy;\n\n            Arrays.sort(points, new ArrayComparator(Dimension.Y, true));\n            sy = points.clone();\n            \n            Arrays.sort(points, new ArrayComparator(Dimension.X, true));\n            sx = points;\n            return Math.sqrt(ClosestProblem(sx, sy));\n        }\n    }\n\n    public static double ClosestProblem(Point[] pointsSortByX, Point[] pointsSortByY) {\n        if (pointsSortByX.length <= 3) {\n            return GetNearest(pointsSortByX);\n        }\n\n        int mid = pointsSortByX.length / 2;\n        Point[] leftPoints, rightPoints, leftPointsSortByY, rightPointsSortByY;\n        leftPoints = Arrays.copyOfRange(pointsSortByX, 0, mid);\n\n        leftPointsSortByY = leftPoints.clone();\n        Arrays.sort(leftPointsSortByY, new ArrayComparator(Dimension.Y, true));\n\n        rightPoints = Arrays.copyOfRange(pointsSortByX, mid , pointsSortByX.length);\n        rightPointsSortByY = rightPoints.clone();\n        Arrays.sort(rightPointsSortByY, new ArrayComparator(Dimension.Y, true));\n\n        double leftDistance = ClosestProblem(leftPoints, leftPointsSortByY);\n        double rightDistance = ClosestProblem(rightPoints, rightPointsSortByY);\n\n        List<Point> temp = new ArrayList<Point>();\n        double shortestDistance = leftDistance < rightDistance ? leftDistance : rightDistance;\n        double centerX = rightPoints[0].getX();\n        for (Point point : pointsSortByY) {\n            if (Math.abs(centerX - point.getX()) < shortestDistance) {\n                temp.add(point);\n            }\n        }\n        \n         for (int i = 0; i < temp.size() - 1; i++) {\n            Point point1 = temp.get(i);\n            for (int j = i + 1; j < temp.size(); j++) {\n                Point point2 = temp.get(j);\n                if ((point2.getY() - point1.getY()) >= shortestDistance) {\n                    break;\n                }\n                double distance = distance(point1, point2);\n                if (distance < shortestDistance) {\n                    shortestDistance = distance;\n                }\n            }\n        }\n\n        return shortestDistance;\n    }\n\n    private static double GetNearest(Point[] points) {\n        double temp, min = distance(points[0], points[1]);\n        for (int i = 0; i < points.length-1; i++) {\n            for (int j = i + 1; j < points.length; j++) {\n                temp = distance(points[j], points[i]);\n                if (temp < min) {\n                    min = temp;\n                }\n            }\n        }\n        return min;\n    }\n\n    private static double distance(Point p1, Point p2) {\n        return (Math.pow(p1.getX() - p2.getX(), 2) + Math.pow(p1.getY() - p2.getY(), 2));\n        //return Math.abs(p1.getX() - p2.getX()) + Math.abs(p1.getY() - p2.getY());\n    }\n\n    public static void main(String[] args) throws IOException {\n        //Scanner input = new Scanner(System.in);\n        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n        Point[] points;\n        int i, count = Integer.parseInt(input.readLine());\n        double x, y;\n        while (count != 0) {\n            i = 0;\n            points = new Point[count];\n\n            while (i < count) {\n                String[] str = input.readLine().split(\"\\\\s+\");\n                x = Double.parseDouble(str[0]);;\n                y = Double.parseDouble(str[1]);\n                points[i] = new Point(x, y);\n\n                i++;\n            }\n\n            double t = ClosestProblem(points);\n            System.out.println(String.format(\"%.2f\", t / 2));\n\n            count = Integer.parseInt(input.readLine());\n        }\n\n    }\n}\nenum Dimension {\n\n    X, Y;\n}\n\nclass Point {\n\n    private double x, y;\n\n    public Point(double x, double y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    public Double getX() {\n        return x;\n    }\n\n    public Double getY() {\n        return y;\n    }\n\n    @Override\n    public String toString() {\n        return \"X: \" + getX() + \", Y:\" + getY();\n    }\n}\n\nclass ArrayComparator implements Comparator<Point> {\n\n    private final Dimension dimension;\n    private final boolean ascending;\n\n    public ArrayComparator(Dimension dimension, boolean ascending) {\n        this.dimension = dimension;\n        this.ascending = ascending;\n    }\n\n    @Override\n    public int compare(Point p1, Point p2) {\n        int cmp;\n        if (this.dimension == Dimension.X) {\n            cmp = p1.getX().compareTo(p2.getX());\n        } else {\n            cmp = p1.getY().compareTo(p2.getY());\n        }\n        return ascending ? cmp : -cmp;\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_219__1_1001_427", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        int a, b;\n        Scanner in = new Scanner(System.in);\n       while( in.hasNext() ){\n           a = in.nextInt();\n           b = in.nextInt();\n           System.out.println(a+b);\n       }\n    }\n    \n}\n", "generated_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner input = new Scanner(System.in);\n\t\tint a, b;\n\t\twhile (input.hasNextInt())\n\t\t{\n\t\t\ta = input.nextInt();\n\t\t\tb = input.nextInt();\n\t\t\tSystem.out.println(a + b);\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2822_49__1_2822_40", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint t = in.nextInt();\n\t\t\tSystem.out.print((t * (t + 1)) / 2+\" \");\n\t\t\tSystem.out.print(t * t+\" \");\n\t\t\tSystem.out.print(t * (t + 1));\n\t\t\tSystem.out.println();\n\t\t}\n\t\t\n\t}\n}\n", "generated_code": "\n\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc = new Scanner(System.in);\n\t\tint cases = sc.nextInt();\n\t\tfor(int i = 0 ; i<cases ; i++)\n\t\t\tnormal(sc.nextInt());\n\t}\n\t\n\tpublic static void normal(int n){\n\t\tlong res = (n*(n+1))/2;\n\t\tSystem.out.print(res);\n\t\tlong resodd = (n*(n+1))-n;\n\t\tSystem.out.print(\" \"+resodd);\n\t\tlong reeven = (n*(n+1));\n\t\tSystem.out.print(\" \"+reeven);\n\t\tSystem.out.println();\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_106__1_101362_21", "golden_code": "import java.util.Scanner;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scan = new Scanner (System.in);\n        while (scan.hasNextInt())\n        {\n            int a = scan.nextInt();\n            int b = scan.nextInt();\n            System.out.println(a + b);\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\nclass Main\n{\n\n    public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n       int b=in.nextInt();\n       int j=1;\n        while(b!=0)\n        {\n            b--;\n        int counter = in.nextInt();\n        String str = in.next();\n        String a=\"\";\n        for(int i=0;i<counter-1;i++)\n        {\n            a+=str.charAt(i);\n        }\n        for(int i=counter;i<str.length();i++)\n        {\n            a+=str.charAt(i);\n        }\n        System.out.println((j++)+\" \"+a);\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_453__1_1001_16", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while (input.hasNextInt()) {\n            int x = input.nextInt();\n            int y = input.nextInt();\n            System.out.println(x + y);\n        }\n    }\n\n}", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\tScanner a = new Scanner(System.in);\nwhile(a.hasNext()){\n\tint b = a.nextInt() + a.nextInt();\n\tSystem.out.println(b);\n}\n\t\t\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_2090_9__5_1005_51", "golden_code": "\nimport java.awt.Point;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.regex.Pattern;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n/**\n *\n * @author Mojtaba\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        StringBuilder sb = new StringBuilder();\n\n        while (in.hasNext()) {\n            String s = in.next();\n            String t = in.next();\n            boolean b = true;\n            for (int i = 0; i < s.length(); i++) {\n                try {\n                    int index = t.indexOf(s.charAt(i));\n                    if (index < 0) {\n                        b = false;\n                        break;\n                    }\n                    t = t.substring(index + 1);\n                } catch (Exception e) {\n                    b = false;\n                    break;\n                }\n            }\n            String str = b ? \"Yes\\n\" : \"No\\n\";\n            sb.append(str);\n        }\n\n        System.out.println(sb.toString().trim());\n    }\n}\n", "generated_code": "import java.util.*;\n\nclass Node {\n\n    private int ID;\n    private int start;\n    private int finish;\n    private boolean visited;\n\n    Node(int i) {\n        ID = i;\n        start = 0;\n        finish = 0;\n        visited = false;\n    }\n\n    public void setID(int ID) {\n        this.ID = ID;\n    }\n\n    public void setFinish(int finish) {\n        this.finish = finish;\n    }\n\n    public void setStart(int start) {\n        this.start = start;\n    }\n\n    public void setVisited(boolean visited) {\n        this.visited = visited;\n    }\n\n    public int getID() {\n        return ID;\n    }\n\n    public int getFinish() {\n        return finish;\n    }\n\n    public int getStart() {\n        return start;\n    }\n\n    public boolean isVisited() {\n        return visited;\n    }\n}\n\nclass DAG {\n\n    ArrayList<ArrayList<Node>> mGraph = new ArrayList<ArrayList<Node>>();\n    ArrayList<Node> nodes = new ArrayList<Node>();\n\n    public void InitialNodes(int num) {\n        for (int i = 1; i <= num; i++) {\n            ArrayList<Node> head = new ArrayList<Node>();\n            Node n = new Node(i);\n            head.add(n);\n            nodes.add(n);\n            mGraph.add(head);\n        }\n    }\n\n    public ArrayList<Node> getNodes() {\n        return nodes;\n    }\n\n    public void addEdge(Node start, Node dest) {\n        if (mGraph.get(start.getID() - 1).size() == 1) {\n            mGraph.get(start.getID() - 1).add(dest);\n        } else {\n            int i = 1;\n            while(dest.getID() > mGraph.get(start.getID() - 1).get(i).getID()){\n                i++;\n                if(i==mGraph.get(start.getID() - 1).size()){\n                    mGraph.get(start.getID() - 1).add(dest);\n                    return;\n                }\n            }\n            mGraph.get(start.getID() - 1).add(i, dest);\n        }\n    }\n}\n\npublic class Main {\n\n    static int time = 0;\n    static Stack<Integer> s = new Stack<Integer>();\n\n    public static void main(String[] args) {\n        int n = 0, m = 0, a, i, j;\n        DAG graph;\n        Node left;\n        Node right;\n\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {\n            graph = new DAG();\n            time = 0;\n            n = in.nextInt();\n            m = in.nextInt();\n            if (n != 0 || m != 0) {\n                graph.InitialNodes(n);\n                for (a = 0; a < m; a++) {\n                    i = in.nextInt();\n                    j = in.nextInt();\n                    left = new Node(i);\n                    right = new Node(j);\n                    graph.addEdge(left, right);\n                }\n                for (i = 0; i < graph.getNodes().size(); i++) {\n                    if (!graph.getNodes().get(i).isVisited()) {\n                        DFS(graph, graph.getNodes().get(i));\n                    }\n                }\n\n                int size = s.size();\n                for (int v = 0; v < size-1; v++) {\n                    System.out.print(s.pop() + \" \");\n                }\n                System.out.println(s.pop());\n//                n = in.nextInt();\n//                m = in.nextInt();\n            }else\n                return;\n        }\n    }\n\n    private static void DFS(DAG Graph, Node vertex) {\n        Graph.getNodes().get(vertex.getID() - 1).setStart(++time);\n        for (int i = 1; i < Graph.mGraph.get(vertex.getID() - 1).size(); i++) {    ////for each v ∈ Adj[vertex] >>> Explore edge (u, v).\n            if (!Graph.getNodes().get(Graph.mGraph.get(vertex.getID() - 1).get(i).getID() - 1).isVisited()) {        ////if !v.isVisited\n                DFS(Graph, Graph.mGraph.get(vertex.getID() - 1).get(i));\n            }\n        }\n        Graph.getNodes().get(vertex.getID() - 1).setVisited(true);\n        Graph.getNodes().get(vertex.getID() - 1).setFinish(++time);\n        s.push(vertex.getID());\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2686_5__1_1006_85", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\npublic class Main {\n    static int findMaxNextind(ArrayList<Double> arrs, int ind){\n        for(int i=ind;i<arrs.size();i++)\n            if (i-1 >=ind && arrs.get(i)>arrs.get(i-1))\n                return i-1;\n        return arrs.size()-1;\n    }\n    public static void main(String[] args) {\n            Scanner sc = new Scanner(System.in);\n            double odm,lastodm, fw,lastfw;\n            ArrayList<Double> odms= new ArrayList<Double>();\n            ArrayList<Double> fws= new ArrayList<Double>();\n            while((odm = sc.nextDouble()) != -1 && (fw=sc.nextDouble()) != -1){\n                if (odm != 0 || fw!=0){\n                    odms.add(odm);\n                    fws.add(fw);\n                }\n                else//\n                {\n                    double fwdis=0,firstfw=fws.get(0)\n                            ,odmdis=0,firstodm=odms.get(0);\n                    for(int i =0;i<fws.size();i++){\n                        int mi =findMaxNextind(fws,i);\n                        fwdis+= firstfw-fws.get(mi);\n                        odmdis+=odms.get(mi)-firstodm;\n                        i=mi;\n                        if (i<fws.size()-1){\n                            firstfw = fws.get(mi+1);\n                            firstodm = odms.get(mi+1);\n                        }\n                    }\n                    System.out.println(Math.round(fws.get(fws.size()-1)*odmdis/fwdis));\n                    odms.clear();\n                    fws.clear();\n                }\n            }\n            sc.close();\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {\n            float c, sum = (float) 0.00;\n            int count = 0;\n\n            c = in.nextFloat();\n            if (c == 0) {\n                System.exit(0);\n            }\n            if (c > 0.009 & c < 5.201) {\n\n                while (sum < c) {\n                    ++count;\n\n                    sum += (1.0 / (1 + count));\n\n\n\n                }\n                System.out.println(count+\" card(s)\");\n            }\n\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_334__1_1001_118", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {\n            int a, b, sum;\n            a = in.nextInt();\n            b = in.nextInt();\n            sum = a + b;\n            System.out.println(sum);\n        }\n    }\n}\n", "generated_code": "import java.util.*;\nclass Main\n{\n    public static void main(String[] args)\n    {\n        Scanner s = new Scanner (System.in);\n        while (s.hasNextInt())\n        \nSystem.out.println(s.nextInt()+s.nextInt());\n        \n    }\n}", "score": 1.0}
{"id": "SHARE_1_2859_15__1_2848_18", "golden_code": "import java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        while(n-- != 0){\n            int m = scanner.nextInt();\n\n            int Moon[][] = new int[2][m];\n\n            for (int i = 0; i < m; i++) {\n                Moon[0][i] = scanner.nextInt();\n                Moon[1][i] = scanner.nextInt();\n            }\n\n            boolean S = true;\n            MainL:\n            for (int i = 0; i < m; i++) {\n                int fuel = 0;\n                for (int j = 0; j < m; j++) {\n                    fuel += Moon[0][(i + j) % m];\n                    fuel -= Moon[1][(i + j) % m];\n                    if (fuel < 0)\n                        continue MainL;\n                }\n                System.out.println(i);\n                S = false;\n                break;\n            }\n            if(S)\n                System.out.println(\"it's a trap\");\n        }\n    }\n}\n", "generated_code": "\nimport java.util.*;\n\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int t = s.nextInt();\n        for (int i = 0; i < t; i++) {\n            int n = s.nextInt();\n            int c = s.nextInt();\n            int arr[] = new int[n];\n            int att = n + 5;\n            int z = 0;\n\n            for (int j = 0; j < n; j++) {\n                arr[j] = s.nextInt();\n                if(arr[j]==0){\n                    z++;\n                }\n            }\n            boolean b = true;\n            int x = 0;\n            while (true) {\n                if (arr[x] == 0) {\n                    if (b) {\n                        x++;\n                    } else {\n                        x--;\n                    }\n                    if (x >= n) {\n                        x = 0;\n                    }\n                    if (x < 0) {\n                        x = n - 1;\n                    }\n                    continue;\n                }\n                if (arr[x] != 0) {\n                    arr[x] -= c;\n                    att--;\n                }\n                arr[x] = Math.max(0, arr[x]);\n                if (arr[x] == 0) {\n                    b = !b;\n                    z++;\n                }\n                if (att == 0 || z==n) {\n                    break;\n                }\n                if (b) {\n                    x++;\n                } else {\n                    x--;\n                }\n                if (x >= n) {\n                    x = 0;\n                }\n                if (x < 0) {\n                    x = n - 1;\n                }\n\n            }\n\n            System.out.println((x + 1));\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_152__1_1001_335", "golden_code": "import java.util.Scanner;\nclass Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner (System.in) ;\n\t\twhile ( scan.hasNextInt() ) {\n\t\t\tSystem.out.println( scan.nextInt() + scan.nextInt() ) ;\n\t\t}\n\t}\n}\t", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {            \n            System.out.println(in.nextInt()+in.nextInt());\n        }\n    }\n    \n}\n", "score": 1.0}
{"id": "SHARE_1_1009_64__1_1009_113", "golden_code": "\nimport java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class Main {\n\n    static Scanner acm = new Scanner(System.in);\n    static double a = 0;\n    static double b;\n    static DecimalFormat dec = new DecimalFormat(\"#.00\");\n\n    public static void main(String[] args) {\n        for (int i = 1; i <= 12; i++) {\n\n            a = acm.nextDouble();\n            b += a;\n        }\n\n        b /= 12;\n        System.out.println(\"$\" + dec.format(b));\n\n    }\n\n}\n", "generated_code": "import java.util.*;\nclass Main {\n\t\n\tstatic int N=(int)1e3;\n\tstatic int adj[]=new int [N];\n\t\n\tpublic static void main(String s[]) {\n\t\tScanner in = new Scanner(System.in);\n\t\tdouble sum=0;\n\t\tfor(int i=0;i<12;i++)\n\t\t{\n\t\t\tdouble val=in.nextDouble();\n\t\t\tsum+=val;\n\t\t}\t\t\n\t\tSystem.out.printf(\"$%.2f\\n\",sum/12);\n\t\tadj[0]=13;\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2000_7__1_1001_164", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        while (true) {\n            int n = s.nextInt();\n            if (n == 0) {\n                break;\n            }\n            window[] arr = new window[n];\n            for (int i = 0; i < n; i++) {\n                arr[i] = new window(s.nextInt(), s.nextInt(), s.nextInt(), s.nextInt());\n            }\n            int m = s.nextInt();\n            for (int i = 0; i < m; i++) {\n                int x = s.nextInt();\n                int y = s.nextInt();\n                lbl:\n                {\n                    for (int j = n-1; j >= 0; j--) {\n                        window tmp = arr[j];\n                        if (x >= tmp.x1 && x <= tmp.x2 && y >= tmp.y1 && y <= tmp.y2) {\n                            System.out.println(j);\n                            break lbl;\n                        }\n                    }\n                    System.out.println(\"-1\");\n                }\n            }\n        }\n    }\n}\n\nclass window {\n\n    int x1, y1, x2, y2;\n\n    public window(int x1, int y1, int x2, int y2) {\n        this.x1 = x1;\n        this.y1 = y1;\n        this.x2 = x2;\n        this.y2 = y2;\n    }\n}", "generated_code": "import java.util.Scanner;public class Main {public static void main(String[] args) {Scanner s = new Scanner (System.in);while(s.hasNext()){System.out.println(s.nextInt()+s.nextInt());}}}", "score": 0.0}
{"id": "SHARE_1_1659_34__1_1656_12", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tstatic Scanner in=new Scanner(System.in);\n\tpublic static void main(String[] args) {\n\t\tfloat temp1=0,temp2;\n\t\tint c=0;\n\t\twhile(true){\n\t\t\ttemp2=in.nextFloat();\n\t\t\tif(temp2==999)\n\t\t\t\tbreak;\n\t\t\tc++;\n\t\t\tif(c<2){\n\t\t\t\ttemp1=in.nextFloat();\n\t\t\t\tSystem.out.printf(\"%.2f\\n\", (temp1-temp2) );\n\t\t\t\tc++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tSystem.out.printf(\"%.2f\\n\", (temp2-temp1) );\n\t\t\t\ttemp1=temp2;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"End of Output\");\n\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\n\n/**\n *\n * @author masoud\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner sc=new Scanner(System.in);\n        String s=\"ma\";\n        int r=0,l=0;\n        float p=0;\n        int arr[] = null;\n        int arr1[] =new int [15];\n        while(!s.equals(\"-1\")){\n        s=sc.nextLine();\n        if(!s.equals(\"-1\")){\n        arr=new int[15];\n        int y=s.indexOf(' ');\n        arr[0]=Integer.valueOf(s.substring(0, s.indexOf(' ')));\n        int i=0;\n        while(true){\n           i++;\n           arr[i]=Integer.valueOf(s.substring(y+1, s.indexOf(' ',y+1)));\n           y=s.indexOf(' ',y+1);\n           if(s.charAt(y+1)=='0')\n                   break;\n        }\n\n        for(int k=0;k<=i;k++)\n            for(int j=k+1;j<=i;j++){\n                p=(float)arr[j];\n                if((arr[k]==arr[j]*2)||(arr[k]==p/2))\n                    r++;\n            }\n        arr1[l++]=r;\n        r=0;\n            arr=null;\n        }\n        }\n        for(int k=0;k<l;k++)\n            System.out.println(arr1[k]);\n    }\n\n}\n", "score": 0.0}
{"id": "SHARE_1_2578_13__1_1001_487", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\t\n\tpublic static void main(String[] args) {\n\tScanner std = new Scanner(System.in);\n\tint n = Integer.parseInt(std.nextLine());\n\tfor(int uy = 0 ; uy <n ;uy++){\n\t\tString milad1 = std.nextLine();\n\t\tString milad = milad1.toLowerCase();\n\t\tint b=0;\n\t\tint g=0;\n\t\tfor(int i = 0 ; i <milad.length() ; i++){\n\t\t\tif(milad.charAt(i) == 'b') b++;\n\t\t\telse if(milad.charAt(i)== 'g') g++;\n\t\t}\n\t\tif( b==g) System.out.println(milad1 + \" is NEUTRAL\");\n\t\telse if( b<g) System.out.println(milad1 + \" is GOOD\");\n\t\telse if( b>g) System.out.println(milad1 + \" is A BADDY\");\n\t\t\n\t\t\n\t\t\n\t}\n\n\t}\n\n}\n", "generated_code": "// @JUDGE_ID:  1000AA  100  Java  \"Easy algorithm\"\n\nimport java.io.*;\nimport java.util.*;\n\nclass Main\n{\n    static String ReadLn (int maxLg)  // utility function to read from stdin\n    {\n        byte lin[] = new byte [maxLg];\n        int lg = 0, car = -1;\n        String line = \"\";\n\n        try\n        {\n            while (lg < maxLg)\n            {\n                car = System.in.read();\n                if ((car < 0) || (car == '\\n')) break;\n                lin [lg++] += car;\n            }\n        }\n        catch (IOException e)\n        {\n            return (null);\n        }\n\n        if ((car < 0) && (lg == 0)) return (null);  // eof\n        return (new String (lin, 0, lg));\n    }\n\n    public static void main (String args[])  // entry point from OS\n    {\n        Main myWork = new Main();  // create a dinamic instance\n        myWork.Begin();            // the true entry point\n    }\n\n    void Begin()\n    {\n        String input;\n        StringTokenizer idata;\n        int a, b;\n\n        while ((input = Main.ReadLn (255)) != null)\n        {\n          idata = new StringTokenizer (input);\n          a = Integer.parseInt (idata.nextToken());\n          b = Integer.parseInt (idata.nextToken());\n          System.out.println(a+b);\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1912_7__1_2554_31", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n   public static void main(String[] args) {\n      Scanner in = new Scanner(System.in);\n      while (in.hasNext()) {\n         int n = in.nextInt();\n         int d = (int) ((-1 + Math.sqrt(1 + 8 * n)) / 2);\n         int e = n - d * (d + 1) / 2;\n         int v1 = e <= 1 ? d + e : d + 2 - e;\n         int v2 = e <= 1 ? 1 : e;\n         System.out.print(\"TERM \" + n + \" IS \");\n         System.out.printf(\"%d/%d\\n\", d % 2 == 0 ? v1 : v2, d % 2 == 0 ? v2 : v1);\n      }\n   }\n}", "generated_code": "import java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Main {\n\n    static public void main(String[] args) {\n        StringBuilder outputBuilder = new StringBuilder();\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        while(!input.equals(\"###\")) {\n            Model model = new Model();\n            while (!input.equals(\"#\")) {\n                String parentName;\n                FeatureType featureType = FeatureType.SIMPLE; // default, when there's only one child\n                String[] childrenNames = null;\n\n                if (input.contains(\"=\")) {\n                    String[] equality = input.replace(\" \", \"\").split(\"=\");\n\n                    parentName = equality[0];\n\n                    for (String delimiter : new String[] {\"+\", \"|\", \"^\"})\n                        if (equality[1].contains(delimiter))\n                            featureType = FeatureType.typeOf(delimiter);\n\n                    childrenNames = equality[1].split(featureType.getDelimiterAsRegex());\n                } else\n                    parentName = input;\n\n                model.addFeature(parentName, featureType, childrenNames);\n                input = scanner.nextLine();\n            }\n            input = scanner.nextLine();\n            while(!input.equals(\"##\")) {\n                outputBuilder.append(\n                        model.validate(parseWithComma(input)) ?\n                                \"Valid\\n\" :\n                                \"Invalid\\n\"\n                );\n                input = scanner.nextLine();\n            }\n            outputBuilder.append(\"+++\\n\");\n            input = scanner.nextLine();\n        }\n        try {\n            Thread.sleep(10000);\n            System.out.print(outputBuilder);\n        } catch (InterruptedException ignore) {}\n    }\n\n    private static List<String> parseWithComma(String testCase) {\n        String[] names = testCase.replaceAll(\"[{}\\\\s]\", \"\").split(\",\");\n        return new LinkedList<>(Arrays.asList(names));\n    }\n}\n\nabstract class AbstractParent extends Feature {\n    List<Feature> children;\n\n    AbstractParent(String name, AbstractParent parent, boolean isMandatory, List<Feature> children) {\n        super(name, parent, isMandatory);\n        this.children = children;\n    }\n}\n\nclass Feature {\n    String name;\n    private AbstractParent parent;\n    boolean isMandatory;\n\n    public boolean validate(List<String> test) {\n        return !test.contains(this.name) || (this.parent == null || test.contains(this.parent.name));\n    }\n\n    Feature(String name) {\n        this.name = name;\n    }\n\n    Feature(String name, AbstractParent parent, boolean isMandatory) {\n        this.name = name;\n        this.parent = parent;\n        this.isMandatory = isMandatory;\n    }\n\n    void setParent(AbstractParent parent) {\n        this.parent = parent;\n    }\n\n    void setMandatory(boolean mandatory) {\n        this.isMandatory = mandatory;\n    }\n\n    public int hashCode() {\n        return this.name.hashCode();\n    }\n\n    public boolean equals(Object obj) {\n        return (obj instanceof Feature) &&\n                this.name.equals(((Feature) obj).name);\n    }\n\n    AbstractParent toParent(FeatureType type, List<Feature> children) {\n        AbstractParent grownMe = null;\n        switch (type) {\n            case SIMPLE:\n                grownMe = new SimpleFeature(this.name, this.parent, this.isMandatory, children);\n                break;\n            case OR:\n                grownMe =  new OrFeature(this.name, this.parent, this.isMandatory, children);\n                break;\n            case XOR:\n                grownMe = new XorFeature(this.name, this.parent, this.isMandatory, children);\n                break;\n        }\n        if (this.parent != null) { // this might be root\n            this.parent.children.remove(this);\n            this.parent.children.add(grownMe);\n        }\n        return grownMe;\n    }\n}\n\nenum FeatureType {\n    SIMPLE(\"+\"),\n    OR(\"|\"),\n    XOR(\"^\");\n\n    private final String delimiter;\n\n    FeatureType(String delimiter) {\n        this.delimiter = delimiter;\n    }\n\n    public String getDelimiterAsRegex() {\n        return \"\\\\\" + this.delimiter;\n    }\n\n    public static FeatureType typeOf(String delimiter) {\n        for (FeatureType featureType : FeatureType.values())\n            if (delimiter.equals(featureType.delimiter))\n                return featureType;\n        return SIMPLE; // default, to get rid of NPE warnings\n    }\n}\n\nclass Model {\n    private List<Feature> allFeatures = new LinkedList<>();\n    private AbstractParent root = null;\n\n    // only works if no feature appears more that once in the same side of the equality\n    public void addFeature(String left, FeatureType type, String[] right) {\n        List<Feature> children = new LinkedList<>();\n        Feature toBeParent = new Feature(left);\n        AbstractParent parent;\n\n        int parentIdx = this.allFeatures.indexOf(toBeParent);\n        if (parentIdx < 0) {\n             parent = toBeParent.toParent(type, children);\n             this.allFeatures.add(parent);\n        } else {\n            parent = this.allFeatures.remove(parentIdx).toParent(type, children);\n            this.allFeatures.add(parent);\n        }\n\n        if (right != null) // for a possible singleton model\n            for (String childName : right) {\n                boolean mandatory = !childName.contains(\"?\");\n                childName = childName.replace(\"?\", \"\");\n                Feature toBeChild = new Feature(childName, parent, mandatory);\n                int childIdx = this.allFeatures.indexOf(toBeChild);\n                if (childIdx < 0) {\n                    this.allFeatures.add(toBeChild);\n                    children.add(toBeChild);\n                } else {\n                    Feature child = this.allFeatures.get(childIdx);\n                    child.setParent(parent);\n                    child.setMandatory(mandatory);\n                    children.add(child);\n                }\n            }\n\n        if (this.root == null) // this is the first time\n            this.root = parent;\n    }\n\n    public boolean validate(List<String> test) {\n        boolean result = test.contains(this.root.name);\n\n        for (String testName : test) {\n            Feature dummy = new Feature(testName);\n            result &= this.allFeatures.contains(dummy);\n        }\n\n        if (this.allFeatures != null) {\n            for (Feature feature : this.allFeatures)\n                if (test.contains(feature.name))\n                    result &= feature.validate(test);\n        } else\n            return false;\n\n        return result;\n    }\n}\n\nclass OrFeature extends AbstractParent {\n    OrFeature(String name, AbstractParent parent, boolean isMandatory, List<Feature> children) {\n        super(name, parent, isMandatory, children);\n    }\n\n    public boolean validate(List<String> test) {\n        for(Feature child : this.children)\n            if (test.contains(child.name))\n                return super.validate(test);\n        return false;\n    }\n}\n\n\nclass SimpleFeature extends AbstractParent {\n    SimpleFeature(String name, AbstractParent parent, boolean isMandatory, List<Feature> children) {\n        super(name, parent, isMandatory, children);\n    }\n\n    public boolean validate(List<String> test) {\n        if (this.children != null)\n            for(Feature child : this.children)\n                if (child.isMandatory && !test.contains(child.name))\n                    return false;\n        return super.validate(test);\n    }\n}\n\nclass XorFeature extends AbstractParent {\n    XorFeature(String name, AbstractParent parent, boolean isMandatory, List<Feature> children) {\n        super(name, parent, isMandatory, children);\n    }\n\n    public boolean validate(List<String> test) {\n        boolean oneChildSeen = false;\n        for (Feature child : this.children)\n            if (test.contains(child.name))\n                if (oneChildSeen)\n                    return false;\n                else\n                    oneChildSeen = true;\n        return oneChildSeen && super.validate(test);\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_453__1_1001_485", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while (input.hasNextInt()) {\n            int x = input.nextInt();\n            int y = input.nextInt();\n            System.out.println(x + y);\n        }\n    }\n\n}", "generated_code": "import java.util.Scanner;   \n  \npublic class Main  \n{  \n    public static void main(String args[])  \n    {  \n        Scanner in = new Scanner(System.in);  \n        int a , b;\n        while(in.hasNext())  \n        {  \n            a = in.nextInt();  \n            b = in.nextInt();  \n            System.out.println(a+b);  \n        }  \n        \n        in.close();  \n    }  \n}", "score": 1.0}
{"id": "SHARE_1_2124_22__1_106017_38", "golden_code": "\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Main {\n    public static void main(String args[]) throws IOException{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String line,a = br.readLine();\n        String b = br.readLine();\n        System.out.println(b.toString());\n        System.out.println(a.toString());\n        while((line=br.readLine())!=null){\n            for (int i = 0; i < line.length(); i++) {\n                int index = contain(a, b, line.charAt(i));\n                if(index!=-1) System.out.print(b.charAt(index));\n                else System.out.print(line.charAt(i));\n            }\n            System.out.println();\n        }\n    }\n    public static int contain(String a,String b,char i){\n        int index = -1;\n        for (int j = 0; j < a.length(); j++) {\n            if(a.charAt(j)==i){\n                index = j;\n                break;\n            } \n        }\n        return index;\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while(in.hasNext()){\n            String str=in.next();\n            char[] arr = str.toCharArray();\n            int sum=0;\n            for(int i=0  ;i<3 ; i++)\n                sum+=Math.pow((double)(Integer.parseInt(String.valueOf(arr[i]))), 3.);\n            System.out.println((sum==Integer.parseInt(str))?\"Yes\":\"No\");\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_56__1_1001_327", "golden_code": "import java.util.Scanner;\n\npublic class Main{\n\npublic static void main(String[] args)\n{\n\nScanner S = new Scanner(System.in);\n\nwhile(S.hasNext()){\n\nint i1 = S.nextInt();\nint i2 = S.nextInt();\n\nSystem.out.println(i1+i2);\n\n}\n\n}\n\n}", "generated_code": "import java.util.Scanner;\n\n/**\n * Created by Mahdi on 10/30/2015.\n */\npublic class Main {\n    public static void main(String[] args){\n        //System.out.println(\"Hello World\");\n        Scanner s = new Scanner(System.in);\n        int a,b;\n        while(s.hasNext()) {\n            a=s.nextInt();\n            b=s.nextInt();\n            System.out.println(a + b);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_101383_2__1_2644_37", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] argv){\n\t\tScanner in=new Scanner(System.in);\n\t\tint cnt=in.nextInt();\n\t\tin.nextLine();\n\t\tfor(int k=1;k<=cnt;++k){\n\t\t\tString s1=in.nextLine();\n\t\t\tString s2=in.nextLine();\n\t\t\tif(s1.equals(s2)){\n\t\t\t\tSystem.out.println(\"Case #\"+k+\":  0\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint i;\n\t\t\tfor(int j=0;j<s2.length();++j){\n\t\t\t\ti=s1.indexOf(s2.substring(j, j+1));\n\t\t\t\tif(i!= -1){\n\t\t\t\t\ts1=s1.substring(0, i)+s1.substring(i+1);\n\t\t\t\t\ts2=s2.substring(0, j)+s2.substring(j+1);\n\t\t\t\t\t--j;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(\"Case #\"+k+\":  \"+(s1.length()+s2.length()));\n\t\t}\n\t\tin.close();\n\t}\n}", "generated_code": "import java.util.*;\npublic class Main{\n\tpublic static void main(String[] z){\n\t\tScanner s = new Scanner(System.in);\n\t\tString a=\"EPLRAGFSOXVCWTIBZDHNYKMJUQ\";\n\t\twhile(s.hasNext()){\n\t\t\tString r =\"\";\n\t\t\tfor(char f:s.nextLine().toCharArray()){\n\t\t\t\tint i=f,c=f;\n\t\t\t\tif (f>94)i-=32;\n\t\t\t\ti-=65;\n\t\t\t\tf=(i>-1)?a.charAt(i):f;\n\t\t\t\tif(c>94)f+=32;\n\t\t\t\tr+=f;\n\t\t\t}\n\t\t\tSystem.out.println(r);\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1870_1__1_1656_53", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        int t=in.nextInt();\n        for (int i = 0; i < t; i++) {\n            int x=in.nextInt();\n            int y=in.nextInt();\n            if(x>=y)\n                System.out.println(\"MMM BRAINS\");\n            else \n                System.out.println(\"NO BRAINS\");\n        }\n    }\n}\n", "generated_code": "import java.util.*;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint a = sc.nextInt();\n\t\twhile(a!=-1){\n\t\t\tVector<Integer> v = new Vector<Integer>(16);\n\t\t\tv.add(a);\n\t\t\ta=sc.nextInt();\n\t\t\twhile (a!=0) {\n\t\t\t\tv.add(a);\n\t\t\t\ta=sc.nextInt();\n\t\t\t}\n\t\t\tint c=0;\n\t\t\tfor (int i = 0; i < v.size(); i++) {\n\t\t\t\tfor (int j = 0; j < v.size(); j++) {\n\t\t\t\t\tif(v.elementAt(i)==2*v.elementAt(j)){\n\t\t\t\t\t\tc++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(c);\n\t\t\ta=sc.nextInt();\n\t\t}\n\t\tSystem.exit(0);\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2733_27__1_2857_41", "golden_code": "import java.util.*;\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner s=new Scanner(System.in);\n\t\t\n\t\tint n1=s.nextInt();\n\t\tfor(int i=0;i<n1;i++)\n\t\t{\n\t\t\tint n=s.nextInt();\n\t\t\tString p=\"\";\n\t\t\tint k=0;\n\t\t\tfor(int j=0;j<n;j++)\n\t\t\t{\n\t\t\t\tint left=s.nextInt();\n\t\t\t\tfor(;k<left;k++)\n\t\t\t\t\tp+='(';\n\t\t\t\tp+=')';\n\t\t\t}\n\t\t\tStack<String> stack=new Stack<String>();\n\t\t\tfor(int j=0;j<p.length();j++)\n\t\t\t{\n\t\t\t\tif(p.charAt(j)=='(')\n\t\t\t\t\tstack.push(\"(\");\n\t\t\t\t\n\t\t\t\telse if(p.charAt(j)==')')\n\t\t\t\t{\n\t\t\t\t\tint count=1;\n\t\t\t\t\twhile(stack.peek().compareTo(\"(\")!=0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tcount+=Integer.parseInt(stack.pop());\n\t\t\t\t\t\t\tstack.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\tstack.push(String.valueOf(count));\n\t\t\t\t\tSystem.out.print(count+\" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}", "generated_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scanner = new Scanner(System.in);\n\n        int t = scanner.nextInt();\n\n        for (int i = 0; i < t; i++)\n        {\n            int n = scanner.nextInt();\n            int[] x = new int[n];\n\n            for (int j = 0; j < n; j++)\n                x[j] = scanner.nextInt();\n\n            boolean flag = true;\n            while (flag)\n            {\n                Arrays.sort(x);\n\n                int a = x[n - 1] - x[0];\n\n                x[0] = a;\n                x[n - 1] = a;\n\n                int k;\n                for (k = 0; k < n-1; k++)\n                    if(x[k] != x[k+1]) break;\n\n                if (k == n-1) flag = false;\n\n            }\n\n            System.out.println(x[0]);\n        }\n\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_25__1_1001_483", "golden_code": "import java.util.Scanner;\n\n\npublic class Main \n{\npublic static void main(String[]args)\n{\n\tScanner vorodi=new Scanner (System.in);\n\twhile(vorodi.hasNext())\n\t{\n\t\tint first=vorodi.nextInt();\n\t\tint last=vorodi.nextInt();\n\t\tSystem.out.println(first+last);\n\t}\n}//end of main\n}\n\n", "generated_code": "import java.util.Scanner;\n\npublic class Main{\n\n\tpublic static void main(String[] args){\n\t\tScanner sc =new Scanner(System.in);\n\t\t\twhile(sc.hasNext()){\n\t\t\t\tint a=sc.nextInt();\n\t\t\t\tint b=sc.nextInt();\n\t\t\t\tSystem.out.println(a+b);\n\t\t\t}\n\t}\n\n}", "score": 1.0}
{"id": "SHARE_1_2677_16__1_1002_1", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static Main root;\n\n    int x;\n    Main left;\n    Main right;\n    Main parent;\n\n    public Main(int y) {\n        this(y, null, null, null);\n    }\n\n    public Main(int x, Main left, Main right, Main parent) {\n        this.x = x;\n        this.left = left;\n        this.right = right;\n        this.parent = parent;\n    }\n\n    public static void insertMaine(Main root, int y) {\n        Main n = new Main(y, null, null, null);\n        Main p = root;\n        Main prep = null;\n        while (p != null) {\n            prep = p;\n            if (y < p.x) {\n                p = p.left;\n            } else if (y > p.x) {\n                p = p.right;\n            } else {\n                return;\n            }\n        }\n        if (y < prep.x) {\n            prep.left = n;\n        } else if (y > prep.x) {\n            prep.right = n;\n        }\n    }\n\n    public static void postOrder(Main root) {\n        if (root == null) {\n            return;\n        }\n        postOrder(root.left);\n        postOrder(root.right);\n        System.out.println(root.x);\n    }\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int y = s.nextInt();\n        root = new Main(y);\n        insertMaine(root, y);\n        while (s.hasNext()) {\n            y = s.nextInt();\n            insertMaine(root, y);\n        }\n        postOrder(root);\n    }\n}", "generated_code": "/**\n * Created with IntelliJ IDEA.\n * User: sepideh\n */\n\nimport java.util.*;\nimport java.awt.geom.*;\nimport java.awt.*;\n\nimport static java.lang.Math.*;\nimport static java.lang.System.*;\n\npublic class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\n\t\twhile (true)\n\t\t{\n\t\t\tint x = scan.nextInt();\n\t\t\tint y = scan.nextInt();\n\n\t\t\tdouble r = scan.nextDouble();\n\n\t\t\tif(r < 0)\tbreak;\n\n\t\t\tint n = scan.nextInt();\n\n\t\t\tQueue<Points> points = new LinkedList<Points>();\n\n\t\t\tfor(int i = 0; i < n; i++)\n\t\t\t{\n\t\t\t\tint X = scan.nextInt();\n\t\t\t\tint Y = scan.nextInt();\n\n\t\t\t\tif(Dis(x, y, X, Y) > r)\tcontinue;\n\n\t\t\t\tdouble teta = atan2(Y-y, X-x);\n\n\t\t\t\tif(teta < 0)\tteta += 2*PI;\n\n\t\t\t\tpoints.add(new Points(X, Y, teta));\n\t\t\t}\n\n\t\t\tPoints[] p = new Points[2*points.size()];\n\n\t\t\tint c = 0;\n\n\t\t\tfor(Points i : points)\tp[c++] = i;\n\t\t\tfor(Points i : points)\n\t\t\t{\n\t\t\t\tint xi = i.x;\n\t\t\t\tint yi = i.y;\n\t\t\t\tdouble t = i.teta+2*PI;\n\t\t\t\tp[c++] = new Points(xi, yi, t);\n\t\t\t}\n\n\t\t\tArrays.sort(p, new Comparator<Points>()\n\t\t\t{\n\t\t\t\tpublic int compare(Points points, Points points1)\n\t\t\t\t{\n\t\t\t\t\treturn (int)((points.teta-points1.teta)*180/PI);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tint res = 0;\n\n\t\t\tQueue<Points> queue = new LinkedList<Points>();\n\n\n\t\t\tfor(int i = 0; i < p.length; i++)\n\t\t\t{\n\t\t\t\tqueue.offer(p[i]);\n\n\t\t\t\twhile (p[i].teta - queue.peek().teta> PI)\n\t\t\t\t\tqueue.poll();\n\n\t\t\t\tres = max(res, queue.size());\n\t\t\t}\n\t\t\tout.println(res);\n\n\t\t}\n\n\t}\n\n\tprivate static double Dis(int x, int y, int x1, int y1)\n\t{\n\t\treturn sqrt((x-x1)*(x-x1)+(y-y1)*(y-y1));\n\t}\n}\nclass Points\n{\n\tint x;\n\tint y;\n\tdouble teta;\n\n\tPoints(int X, int Y, double t)\n\t{\n\t\tx = X;\n\t\ty = Y;\n\t\tteta = t;\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1632_5__1_1656_7", "golden_code": "\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.TreeMap;\n\npublic class Main {\n\n    static TreeMap<Integer,Integer> map = new  TreeMap();\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        for (int i = 0; i < n; i++) {\n            map = new  TreeMap();\n            int m = s.nextInt();\n            for (int j = 0; j < m; j++) {\n                int num = s.nextInt();\n                factors(num);\n            }\n            int res=1;\n            Set<Integer> set = map.keySet();\n            for (Integer tmp:set) {\n                res *= Math.pow(tmp, map.get(tmp));\n            }\n            System.out.println(res);\n        }\n    }\n    \n    static void factors(int n){\n        for(int i=2;i<=Math.sqrt(n);i++){\n            for(int m=1;n % i == 0;m++){\n                n /= i;\n                if(map.containsKey(i)){\n                    int pow = map.get(i);\n                    map.put(i, Math.max(pow, m));\n                }else{\n                    map.put(i, 1);\n                }\n            }\n            if(n == 1)\n                break;\n        }\n        if(n != 1)\n            map.put(n, 1);        \n    }\n}", "generated_code": "import java.util.Scanner;\nimport java.util.StringTokenizer;\npublic class Main {\n    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        while(true){\n            String s=in.nextLine();\n            if(s.equals(\"-1\")) break;\n            StringTokenizer token = new StringTokenizer(s);\n            int a[] = new int[token.countTokens()];\n            int i=-1, count=0;\n            while(token.hasMoreTokens())\n                a[++i]=Integer.valueOf(token.nextToken());\n            for(int k=0;k<a.length-1;k++)\n                for(int j=0;j<a.length-1;j++)\n                    if(a[k]==2*a[j])\n                        ++count;\n            System.out.println(count);\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_455__1_1001_153", "golden_code": "import java.util.*;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner cin = new Scanner(System.in);\n\t\twhile(cin.hasNext()){\n\t\t\tlong a = cin.nextLong();\n\t\t\tlong b = cin.nextLong();\n\t\t\tSystem.out.println(a + b);\n\t\t}\n\t}\n}", "generated_code": "import java.util.*;\npublic class Main {\n    public static void main(String args[]) throws Exception{\n        Scanner scan = new Scanner(System.in);\n        while (scan.hasNextInt()){\n            System.out.println(scan.nextInt()+scan.nextInt());\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2811_23__1_2811_0", "golden_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner in = new Scanner(System.in);\n\n        int t = in.nextInt();\n\n        for (int i = 0; i < t; i++) {\n            int m = in.nextInt();\n            int n = in.nextInt();\n            int[] array = new int[m];\n            int[] array2 = new int[n];\n\n            for (int j = 0; j < m; j++) {\n                array[j] = in.nextInt();\n\n            }\n            for (int j = 0; j < n; j++) {\n                array2[j] = in.nextInt();\n            }\n            Arrays.sort(array);\n            Arrays.sort(array2);\n            String s = \"\";\n            for (int j = 0; j < m; j++) {\n                boolean b = true;\n                for (int k = 0; k < n; k++) {\n                    if (array[j] == array2[k]) {\n                        b = false;\n                    }\n                }\n                if (b) {\n                    s += array[j] + \",\";\n                }\n\n            }\n            if (s.length() != 0) {\n                s = s.substring(0, s.length() - 1);\n\n            }\n            System.out.println(s);\n        }\n\n    }\n}", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\nimport java.util.TreeSet;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n\n        while (t > 0) {\n            int n = in.nextInt();\n            int m = in.nextInt();\n            TreeSet<Integer> items = new TreeSet<Integer>();\n            ArrayList<Integer> buy = new ArrayList<Integer>();\n            for (int i = 0; i < n; i++) {\n                items.add(in.nextInt());\n            }\n            for (int i = 0; i < m; i++) {\n                buy.add(in.nextInt());\n            }\n            items.removeAll(buy);\n            Object arrr[] = items.toArray();\n            for (int i = 0; i < arrr.length; i++) {\n                if (i == arrr.length - 1) {\n                    System.out.print(arrr[i] );\n\n                } else {\n                    System.out.print(arrr[i] + \",\");\n                }\n            }\n            t--;\n            System.out.println(\"\");\n        }\n    }\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1185_23__1_1998_2", "golden_code": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n//package main;\n\nimport java.util.Scanner;\n\n/**\n *\n * @author pc\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner sc = new Scanner(System.in);\n        while (true) {\n        String n = sc.nextLine();\n        int a = n.length();\n        int res =0;\n            if(n.equals(\"0\")){\n                break;\n            }\n            for (int i = 0; i < a; i++) {\n                String SS = n.charAt(i) + \"\";\n                int b = Integer.parseInt(SS);\n                res += (b * (Math.pow(2, a-i)-1));\n            }\n            System.out.println(res);\n        }\n\n    }\n\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        int a=in.nextInt();\n        for (int i = 0; i < a; i++) {\n            String s=in.next();\n            String out=\"\";\n            int c=1;\n            for (int j = 0; j < s.length()-1; j++) {\n                if(s.charAt(j)!=s.charAt(j+1)){\n                    if(c!=1)\n                        out+=c+\"\"+s.charAt(j);\n                    else \n                        out+=\"\"+s.charAt(j);\n                    c=1;\n                }\n                else\n                    c++;\n            }\n            if(c!=1)\n                out+=c+\"\"+s.charAt(s.length()-1);\n            else \n                out+=\"\"+s.charAt(s.length()-1);\n            System.out.println(out);\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2337_4__1_1018_97", "golden_code": "import java.math.BigInteger;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner s=new Scanner(System.in);\n        while (s.hasNextInt()){\n            long n=s.nextLong();\n            if(n%2==0){\n                System.out.println(\"2^? mod \"+n+\" = 1\");\n                continue;\n            }\n            long w=2;\n            int c=1;\n            while(w<n){\n                w*=2;\n                c++;\n            }\n            long m=w%n;\n            if(w%n==1){\n                System.out.println(\"2^\"+c+\" mod \"+n+\" = 1\");\n                continue;\n            }else{\n                w*=2;\n                c++;\n            }\n            BigInteger ww=new BigInteger(w+\"\");\n            while(true){\n                if(ww.mod(new BigInteger(\"\"+n)).toString().equals(\"1\")){\n                    System.out.println(\"2^\"+c+\" mod \"+n+\" = 1\");\n                    break;\n                }else if(ww.mod(new BigInteger(\"\"+n)).toString().equals(m+\"\")){\n                    System.out.println(\"2^? mod \"+n+\" = 1\");\n                    break;\n                }else{\n                    ww=ww.multiply(new BigInteger(\"2\"));\n                    c++;\n                }\n            }\n        }\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int ttt = 0;\n        while (true) {\n            int n = sc.nextInt();\n            if (n == 0) {\n                break;\n            }\n            if (ttt != 0) {\n                System.out.println(\"\");\n            }\n            ttt++;\n            int[] A = new int[n];\n            int a = 0;\n            int[] B = new int[n];\n            int b = 0;\n            for (int i = 0; i < n; i++) {\n                A[i] = sc.nextInt();\n            }\n            for (int i = 0; i < n; i++) {\n                B[i] = sc.nextInt();\n            }\n            for (int i = 0; i < n; i++) {\n                if ((A[i] == 1 && A[i] == 2) || (A[i] == 2) && B[i] == 1) {\n                    if (A[i] == 1) {\n                        a += 6;\n                    } else if (A[i] == 2) {\n                        b += 6;\n                    }\n                } else if (A[i] > B[i]) {\n                    if (A[i] > B[i] + 1) {\n                        a += A[i];\n                    } else {\n                        b += A[i] + B[i];\n                    }\n                } else if (A[i] < B[i]) {\n                    if (A[i] + 1 < B[i]) {\n                        b += B[i];\n                    } else {\n                        a += A[i] + B[i];\n                    }\n                } else {\n                }\n            }\n            System.out.println(\"A has \" + a + \" points. B has \" + b + \" points.\");\n        }\n\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1009_151__1_1009_94", "golden_code": "/* @JUDGE_ID:  ???  ???  Java  \"???\" */\n/* @BEGIN_OF_SOURCE_CODE */\n\nimport java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n\n        DecimalFormat df = new DecimalFormat(\"#.##\");\n        //df.setMaximumFractionDigits(2);\n\n        float num, sum = 0;\n        for (int i = 0; i < 12; i++) {\n            num = cin.nextFloat();\n            sum += num;\n        }\n\n        String str = \"$\" + df.format(sum / 12.0);\n        System.out.println(str);\n        //System.out.println(\"$1581.42\");\n    }\n}\n\n/*\n * @END_OF_SOURCE_CODE\n */\n", "generated_code": "\nimport java.util.Scanner;\n\n\npublic class Main {\n\n    public static void main(String[] args) {\n        \n        Scanner s=new Scanner(System.in);\n        \n        float sum=0;\n        \n        for(int i=0 ; i<12 ; i++){\n            float f=s.nextFloat();\n            sum+=f;\n        }\n        System.out.print(\"$\");\n        System.out.printf(\"%.2f\",sum/12);\n        System.out.println(\"\");\n       }\n    \n}\n", "score": 1.0}
{"id": "SHARE_1_1478_11__1_2506_0", "golden_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(input.readLine());\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tlong a = Long.parseLong(input.readLine());\n\t\t\tdouble sum = 0;\n\t\t\tfor (long j = 2; j <= a; j++) {\n\t\t\t\tsum += Math.log10(j);\n\t\t\t}\n\t\t\tSystem.out.println((long)sum + 1);\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.awt.*;\nimport java.util.*;\n\npublic class Main\n{\n    public static void main(String [] args)\n    {\n        Scanner scan = new Scanner(System.in);\n\n        while (scan.hasNext())\n        {\n            int n = scan.nextInt();\n            int k = scan.nextInt();\n            int g = scan.nextInt();\n            if(n+k+g == 0) break;\n\n            Guess[] guesses = new Guess[g];\n            for(int i = 0;i < g;i++)\n                guesses[i] = new Guess(scan.next(), scan.nextInt(), scan.nextInt());\n\n            ArrayList<String> res = new ArrayList<String>();\n\n            rec(new char[n], res, guesses, 0, n, k);\n\n            Collections.sort(res);\n\n            for (String str : res)\n                System.out.println(str);\n            System.out.println(\"Total: \" + res.size());\n        }\n    }\n\n    private static void rec(char[] word, ArrayList<String> res, Guess[] guesses, int at, int n, int k)\n    {\n        if(at == n)\n        {\n            boolean ok = true;\n            for(Guess guess : guesses)\n                if(!check(guess, word, n))\n                {\n                    ok = false;\n                    break;\n                }\n\n            if(ok)\n                res.add(new String(word));\n\n            return;\n        }\n\n        for(char c = '1';c <= ('0'+k);c++)\n        {\n            word[at] = c;\n            rec(word, res, guesses, at+1, n, k);\n        }\n    }\n\n    private static boolean check(Guess guess, char[] word, int n)\n    {\n        boolean[] used = new boolean[n];\n        int black = guess.black;\n\n        for(int i = 0;i < n;i++)\n            if(guess.what[i] == word[i])\n            {\n                used[i] = true;\n                black--;\n            }\n\n        if(black != 0)\n            return false;\n\n        int[] cnt = new int[9];\n        for(int i = 0;i < n;i++)\n            if(!used[i])\n                cnt[word[i]-'1']++;\n\n        int white = guess.white;\n        for(int i = 0;i < n;i++)\n            if(!used[i])\n                if(cnt[guess.what[i]-'1'] > 0)\n                {\n                    cnt[guess.what[i]-'1']--;\n                    white--;\n                }\n\n        return white == 0;\n    }\n\n    static class Guess\n    {\n        char[] what;\n        int black;\n        int white;\n\n        public Guess(String what, int black, int white)\n        {\n            this.what = what.toCharArray();\n            this.black = black;\n            this.white = white;\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2847_20__1_2621_2", "golden_code": "import com.sun.org.apache.xerces.internal.impl.xpath.regex.Match;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Scanner;\n\n/**\n * Created by J.HM on 2016/11/24.\n */\nclass Main {\n    public static void main(String[] args) {\n        try {\n            Scanner input = new Scanner(System.in);\n            int numberOfTest = Integer.valueOf(input.nextLine());\n            for (int i = 0; i < numberOfTest; i++) {\n                int stu = Integer.valueOf(input.nextLine());\n                String[] str = input.nextLine().split(\" \");\n                int[] nums = new int[str.length];\n                float sum = 0;\n                for (int j = 0; j < str.length; j++) {\n                    nums[j] = Integer.valueOf(str[j]);\n                    sum += nums[j];\n                }\n\n                int min = nums[0];\n                int max = nums[0];\n\n                for (int j = 0; j < nums.length; j++) {\n                    if (nums[j] < min){\n                        min = nums[j];\n                    }\n                    if (nums[j] > max){\n                        max = nums[j];\n                    }\n                }\n                sum = (sum)/(nums.length);\n                float av = (min+max)/2;\n                if (Math.abs(sum-av) < 1){\n                    System.out.println(\"Yes\");\n                }else {\n                    System.out.println(\"No\");\n                }\n            }\n        }catch (Exception ex){\n            ex.printStackTrace();\n        }\n    }\n}\n", "generated_code": "import java.util.*;\nimport java.io.*;\nimport static java.lang.Math.*;\n\npublic class Main\n{\n\tpublic static void main(String[]args)\n\t{\n\t\tString letters[] = { \"ABC\",  \"DEF\",\"GHI\", \"JKL\", \"MNO\", \"PQRS\", \"TUV\", \"WXYZ\"};\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint test_case = scanner.nextInt();\n\t\tscanner.nextLine();\n\t\tfor(int t=0;t<test_case;t++)\n\t\t{\n\t\t\tString str = scanner.nextLine().toUpperCase();\n\t\t\tString number = \"\";\n\t\t\tfor(int at=0;at<str.length();at++)\n\t\t\t{\n\t\t\t\tint i;\n\t\t\t\tfor(i=0;i<letters.length;i++)\n\t\t\t\t\tif(letters[i].contains(Character.toString(str.charAt(at))))\n\t\t\t\t\t\tbreak;\n\t\t\t\tfor(int j=0;j<=0;j++)\n\t\t\t\t\tnumber+=Integer.toString(i+2);\n\t\t\t}\n\t\t\tSystem.out.println(palindrome(number)?\"YES\":\"NO\");\n\t\t}\n\n\t}\n\n\tprivate static boolean palindrome(String string)\n\t{\n\t\tfor(int i=0;i<string.length()/2;i++)\n\t\t\tif(string.charAt(i)!=string.charAt(string.length()-1-i))\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1009_73__1_1009_100", "golden_code": "\nimport java.text.DecimalFormat;\nimport java.util.Scanner;\npublic class Main {\n\n    static Scanner cin=new Scanner(System.in);\n    static DecimalFormat df=new DecimalFormat(\"0.00\");\n    public static void main(String[] args) {\n        float n;\n        double sum = 0;\n        double average;\n            for (int i = 1; i <= 12; i++) {\n                n = cin.nextFloat();\n                sum = sum + n;\n\n            }\n            average = sum / 12;\n            System.out.println(\"$\" + df.format(average));\n        }\n    }\n\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        float cost=0.00f;\n        Scanner input=new Scanner(System.in);\n        for (int i = 0; i < 12; i++) {\n            cost+=input.nextFloat();\n        }\n        cost=(float)Math.round((cost/12)*100f)/100;\n        System.out.println(\"$\"+cost);\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2747_13__1_1001_62", "golden_code": "\nimport java.util.Scanner;\nimport java.util.regex.Pattern;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n/**\n *\n * @author Javad\n */\npublic class Main {\n\n    static String text;\n    static int score;\n\n    public static void main(String[] args) {\n        Scanner inScanner = new Scanner(System.in);\n        int counter = inScanner.nextInt();\n        for (int i = 0; i < counter; i++) {\n            score=0;\n            text=inScanner.next();\n            containUppercase();\n            containLowercase();\n            containNumber();\n            containSymbol();\n            switch (score) {\n                case 1:\n                    System.out.println(\"very bad\");\n                    break;\n                case 2:\n                    System.out.println(\"bad\");\n                    break;\n                case 3:\n                    System.out.println(\"good\");\n                    break;\n                case 4:\n                    System.out.println(\"overkill\");\n                    break;\n            }\n        }\n       \n    }\n\n    public static void containUppercase() {\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) >= 'A' && text.charAt(i) <= 'Z') {\n                score++;\n                return;\n            }\n        }\n\n    }\n\n    public static void containLowercase() {\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) >= 'a' && text.charAt(i) <= 'z') {\n                score++;\n                return;\n            }\n        }\n    }\n\n    public static void containNumber() {\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) >= '0' && text.charAt(i) <= '9') {\n                score++;\n                return;\n            }\n        }\n    }\n\n    public static void containSymbol() {\n\n        for (int i = 0; i < text.length(); i++) {\n            if ((text.charAt(i) >= 32 && text.charAt(i) <= 43 && text.charAt(i) != 34 && text.charAt(i) != 39) || text.charAt(i) == 64 || text.charAt(i) == 94) {\n                score++;\n                return;\n            }\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext())\n\t\t\tSystem.out.println((in.nextInt()+in.nextInt()));\n\tin.close();\t\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2621_19__1_2621_39", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        //int[] nums = {2, 22, 222, 3, 33, 333, 4, 44, 444, 5, 55, 555, 6, 66, 666, 7, 77, 777, 7777, 8, 88, 888, 9, 99, 999, 9999};\n        int[] nums = {2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9};\n        for (int i = 0; i < n; i++) {\n            String str = s.next().toUpperCase();\n            String res = \"\";\n            for (int j = 0; j < str.length(); j++) {\n                res += nums[str.charAt(j) - 'A'];\n            }\n            if (res.length() % 2 == 1) {\n                if (res.substring(0, res.length() / 2).equals(new StringBuilder(res.substring(res.length() / 2 + 1, res.length())).reverse().toString())) {\n                    System.out.println(\"YES\");\n                } else {\n                    System.out.println(\"NO\");\n                }\n            } else {\n                if (res.substring(0, res.length() / 2).equals(new StringBuilder(res.substring(res.length() / 2, res.length())).reverse().toString())) {\n                    System.out.println(\"YES\");\n                } else {\n                    System.out.println(\"NO\");\n                }\n            }\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\nclass Main\n{\n\n\tpublic static void main(String args[])\n\t{\n\t\tScanner input = new Scanner(System.in);\n\t\tint lines = Integer.parseInt(input.nextLine());\n\t\tint counter =1;\n\t\twhile(lines>0) {\n\t\t\tlines--;\n\t\t\tString strNum=input.nextLine();\n\t\t\tString strConverted=\"\";\n\t\t\tstrNum=strNum.toUpperCase();\n\t\t\tfor(int i=0;i<strNum.length();i++) {\n\t\t\t\tchar ch=strNum.charAt(i);\n\t\t\t\tif(ch>='W') strConverted+='W';\n\t\t\t\telse if(ch>='T') strConverted+='T';\n\t\t\t\telse if(ch>='P') strConverted+='P';\n\t\t\t\telse if(ch>='M') strConverted+='M';\n\t\t\t\telse if(ch>='J') strConverted+='J';\n\t\t\t\telse if(ch>='G') strConverted+='G';\n\t\t\t\telse if(ch>='D') strConverted+='D';\n\t\t\t\telse strConverted+='A';\n\t\t\t}//for strNum len\n\n\t\t\tstrNum = new StringBuilder(strConverted).reverse().toString();\n\t\t\tif(strConverted.equals(strNum)) System.out.println(\"YES\");\n\t\t\telse System.out.println(\"NO\");\n\n\t\t}//while\n\t}// main\n}", "score": 1.0}
{"id": "SHARE_1_2257_12__1_2257_18", "golden_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\n\nclass Main{\n\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tBufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(input.readLine());\n\t\twhile (n-- > 0) {\n\t\t\tStringTokenizer s = new StringTokenizer(input.readLine());\n\t\t\tint a = Integer.parseInt(s.nextToken());\n\t\t\tint b = Integer.parseInt(s.nextToken());\n\t\t\tif (a < b) {\n\t\t\t\tSystem.out.println(\"impossible\");\n\t\t\t} else {\n\t\t\t\tint t = a + b;\n\t\t\t\tif (t % 2 != 0) {\n\t\t\t\t\tSystem.out.println(\"impossible\");\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println((a + b) / 2 + \" \" + ((a + b) / 2 - b));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        for (int i = 0; i < n; i++) {\n            int s = sc.nextInt();\n            int d = sc.nextInt();\n            double a = (s + d) / 2.0;\n            double b = (s - d) / 2.0;\n            if (b >= 0 && (s+d)%2 == 0) {\n                int first = (int) Math.max(a, b);\n                int second = (int) Math.min(a, b);\n                System.out.println(first + \" \" + second);\n            } else {\n                System.out.println(\"impossible\");\n            }\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2822_27__1_2822_45", "golden_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner cin=new Scanner(System.in);\n\t\tint t=cin.nextInt();\n\t\tBigInteger a,b,d,n=new BigInteger(\"0\");\n\t\td=new BigInteger(\"2\");\n\t\tb=new BigInteger(\"1\");\n\t\tint l=2;\n\t\tint r=0;\n\t\twhile(t!=r){\n\t\t\tn=cin.nextBigInteger();\n\t\t\ta=n.add(b);\n\t\t\tSystem.out.print(a.multiply(n).divide(d)+\" \");\n\t\t\tSystem.out.print(n.pow(l)+\" \");\n\t\t\tSystem.out.println(a.multiply(n));\n\t\t\tr++;\n\t\t}\n\t}\n\n}\n", "generated_code": "\nimport java.util.Scanner;\n\nclass Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.nextLine();\n        for (int i = 0; i < Integer.parseInt(s); i++) {\n            String ss2 = sc.nextLine();\n            int n = Integer.parseInt(ss2);\n            int s1 = 0, s2 = 0, s3 = 0;\n            for (int j = 1; j <= n; j++) {\n                s1 += j;\n            }\n            int k = 0;\n            int shomarande = 1;\n            while (k < n) {\n                if (shomarande % 2 != 0) {\n                    s2 += shomarande;\n                    k++;\n                }\n                shomarande++;\n            }\n            k = 0;\n            shomarande = 1;\n            while (k < n) {\n                if (shomarande % 2 == 0) {\n                    s3 += shomarande;\n                    k++;\n                }\n                shomarande++;\n            }\n            System.out.println(s1 + \" \" + s2 + \" \" + s3);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1006_65__1_1006_123", "golden_code": "import java.util.Scanner;\npublic class Main {\n    static Scanner input = new Scanner(System.in);\n    public static void main(String[] args) {\n        float Inputing = input.nextFloat() ;\n        do{\n            float Number = 0;\n            int Times=2;\n            while(Inputing >= Number){\n                Number += (float)1/Times++ ; \n            }\n            System.out.println(Times-2 + \" card(s)\");\n            Inputing = input.nextFloat();\n        }while(Inputing != 0);\n    }\n}\n    \n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        double sum = 0;\n        int i;\n        while (true) {\n            float n = input.nextFloat();\n            if (n == 0.00) {\n                break;\n            }\n            \n            for (i = 2; true; i++) {\n                sum = sum + 1.0 / i;\n               \n                if (sum >= n) {\n                    sum=0;\n                    System.out.format(\"%d card(s)\\n\", (i - 1));\n                    break;\n                }\n            }\n\n        }\n\n    }\n\n}\n", "score": 1.0}
{"id": "SHARE_1_2504_3__1_2732_7", "golden_code": "\nimport java.util.*;\n\npublic class Main {\n\t\n\tpublic static class Pair implements Comparable<Pair> {\n\t\tpublic double bid;\n\t\tpublic int id;\n\t\tpublic Pair(double bid, int id) {\n\t\t\tthis.id = id;\n\t\t\tthis.bid = bid;\n\t\t}\n\t\tpublic int compareTo(Pair o) {\n\t\t\tif (this.bid > o.bid)\n\t\t\t\treturn 1;\n\t\t\telse if (this.bid == o.bid)\n\t\t\t\treturn 0;\n\t\t\treturn -1;\n\t\t}\n\t}\n\t\n\tpublic static class Item implements Comparable<Item> {\n\t\tpublic double minBid;\n\t\tpublic int id, h, m, s;\n\t\tpublic ArrayList<Pair> bids;\n\t\tItem(int id, int h, int m, int s, double min) {\n\t\t\tthis.id = id;\n\t\t\tthis.h = h;\n\t\t\tthis.m = m;\n\t\t\tthis.s = s;\n\t\t\tthis.minBid = min;\n\t\t\tbids = new ArrayList<Pair>();\n\t\t}\n\t\tpublic int compareTo(Item i) {\n\t\t\tif (h < i.h || (h == i.h && m < i.m) || (h == i.h && m == i.m && s < i.s))\n\t\t\t\treturn -1;\n\t\t\telse if (h == i.h && m == i.m && s == i.s)\n\t\t\t\treturn 0;\n\t\t\treturn 1;\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\t\n\t\tint n = sc.nextInt();\n\t\tHashMap<Integer, Item> items = new HashMap<Integer, Item>();\n\t\tfor (; n > 0; --n) {\n\t\t\tint id = sc.nextInt();\n\t\t\tdouble min = sc.nextDouble();\n\t\t\tString t = sc.next();\n\t\t\tint h = Integer.parseInt(t.substring(0, 2));\n\t\t\tint m = Integer.parseInt(t.substring(3, 5));\n\t\t\tint s = Integer.parseInt(t.substring(6));\n\t\t\titems.put(id, new Item(id, h, m, s, min));\n\t\t}\n\t\t\n\t\tn = sc.nextInt();\n\t\tHashMap<Integer, Double> bidders = new HashMap<Integer, Double>();\n\t\tfor (; n > 0; --n)\n\t\t\tbidders.put(sc.nextInt(), sc.nextDouble());\n\t\t\n\t\tn = sc.nextInt();\n\t\t\n\t\tfor (; n > 0; --n) {\n\t\t\tint iid = sc.nextInt(), id = sc.nextInt();\n\t\t\tdouble bid = sc.nextDouble();\n\t\t\tString t = sc.next();\n\t\t\tint h = Integer.parseInt(t.substring(0, 2));\n\t\t\tint m = Integer.parseInt(t.substring(3, 5));\n\t\t\tint s = Integer.parseInt(t.substring(6));\n\t\t\tItem i = items.get(iid);\n\t\t\t\n\t\t\tif (bid > bidders.get(id) || bid < i.minBid)\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\tif (h < i.h || (h == i.h && m < i.m) || (h == i.h && m == i.m && s <= i.s)) {\n\t\t\t\ti.bids.add(new Pair(bid, id));\n\t\t\t}\n\t\t}\n\t\t\n\t\tArrayList<Item> is = new ArrayList<Item> (items.values());\n\t\tCollections.sort(is);\n\t\t\n\t\tfor (int k = 0; k < is.size(); ++k) {\n\t\t\tItem i = is.get(k);\n\t\t\t\t\t\t\n\t\t\tSystem.out.print(\"Item \" + i.id + \" \");\n\t\t\tif (i.bids.size() == 0)\n\t\t\t\tSystem.out.print(\"is not sold\");\n\t\t\telse {\n\t\t\t\tCollections.sort(i.bids);\n\t\t\t\tboolean sold = false;\n\t\t\t\tint sid = 0;\n\t\t\t\tdouble sbid = 0;\n\t\t\t\tfor (int j = i.bids.size() - 1; j >= 0; --j) {\n\t\t\t\t\tif (i.bids.get(j).bid < bidders.get(i.bids.get(j).id)) {\n\t\t\t\t\t\tsold = true;\n\t\t\t\t\t\tbidders.put(i.bids.get(j).id, bidders.get(i.bids.get(j).id) - i.bids.get(j).bid);\n\t\t\t\t\t\tsid = i.bids.get(j).id;\n\t\t\t\t\t\tsbid = i.bids.get(j).bid;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!sold)\n\t\t\t\t\tSystem.out.print(\"is not sold\");\n\t\t\t\telse {\n\t\t\t\t\tSystem.out.print(\"Bidder \" + sid + \" Price \");\n\t\t\t\t\tSystem.out.printf(\"%.2f\", sbid);\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tsc.close();\n\t}\n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static int add(int x1 , int x2){\n\t\treturn x1 + x2;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tinput();\n\n\t}\n\t\n\tpublic static void input() {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint n = scanner.nextInt();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint x = scanner.nextInt();\n\t\t\tint y = scanner.nextInt();\n\t\t\tif (x == y) {\n\t\t\t\tif (x%2 ==0) {\n\t\t\t\t\t\n\t\t\t\t\tSystem.out.println(x + y);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tSystem.out.println(x + y - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\tif (x - y ==2 || y - x ==2) {\n\t\t\t\tif (x%2 ==0) {\n\t\t\t\t\t\n\t\t\t\t\tSystem.out.println(x + y);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tSystem.out.println(x + y - 1);\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSystem.out.println(\"No Number\");\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_2500_3__1_2734_9", "golden_code": "\nimport java.util.Scanner;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author Hossein\n */\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in= new Scanner(System.in);\n        long[] seka= new long[33];\n        seka[0]=1;\n        for(int i=1;i<31;i++){\n            seka[i]=seka[i-1]*3;\n//            System.out.print(seka[i]+\" \");\n        }\n        while(true){\n            long k,n;\n            k=in.nextLong();\n            n=in.nextLong();\n            if(n==k && k==0){\n                break;\n            }\n            if(n==0){\n                System.out.println(\"No\");\n                continue;\n            }\n            int head=0;\n            for(int i=30;i>=0;i--){\n                if(seka[i]<n){\n                    head=i;\n                    break;\n                }\n            }\n//            System.err.println(head+ \" \"+seka[head]);\n            while(true){\n                float def=(float)n/(float)seka[head];\n                if(def<=2 && def>1){\n                    System.out.println(\"No\");\n                    break;\n                }\n                if(def==1){\n                    System.out.println(\"Yes\");\n                    break;\n                }\n                if(head==0){\n                    System.out.println(\"Yes\");\n                    break;\n                }\n                \n                if(def<=1){\n                    head--;\n                }\n                if(def>2){\n                    n-=2*seka[head];\n                    head--;\n                }\n            }\n        }\n    }\n}\n", "generated_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\nimport java.util.Scanner;\nimport java.util.StringTokenizer;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tInputReader in = new InputReader(System.in);\n\t\tint t = in.nextInt();\n\t\twhile (t-- > 0) {\n\t\t\tint n = in.nextInt();\n\t\t\tint w = in.nextInt();\n\t\t\tint cnt = 0;\n\t\t\tint sum = 0;\n\t\t\tint[] ar = new int[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tar[i] = in.nextInt();\n\t\t\t\tsum += ar[i];\n\t\t\t}\n\t\t\tif (sum < w)\n\t\t\t\tSystem.out.println(\"No solution!\");\n\t\t\telse if (sum == w)\n\t\t\t\tSystem.out.println(n);\n\t\t\telse {\n\t\t\t\tArrays.sort(ar);\n\t\t\t\tfor (int i = ar.length - 1; i >= 0; i--) {\n\t\t\t\t\tw -= ar[i];\n\t\t\t\t\tcnt++;\n\t\t\t\t\tif (w <= 0)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(cnt);\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass InputReader {\n\tprivate BufferedReader reader;\n\tprivate StringTokenizer tokenizer;\n\n\tpublic InputReader(InputStream stream) {\n\t\treader = new BufferedReader(new InputStreamReader(stream));\n\t\ttokenizer = null;\n\t}\n\n\tpublic String nextLine() {\n\t\ttry {\n\t\t\treturn reader.readLine();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tpublic String next() {\n\t\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\n\t\t\ttry {\n\t\t\t\ttokenizer = new StringTokenizer(reader.readLine());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn tokenizer.nextToken();\n\t}\n\n\tpublic int nextInt() {\n\t\treturn Integer.parseInt(next());\n\t}\n\n\tpublic long nextLong() {\n\t\treturn Long.parseLong(next());\n\t}\n\n\tpublic double nextDouble() {\n\t\treturn Double.parseDouble(next());\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_2717_40__1_2571_13", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        int n=in.nextInt();\n        while(n!=0){\n            c=0;\n            String s1=in.next();\n            String s2=in.next();\n            String s=in.next();\n            int a=f(s1,s2,s);\n            if(a==51)\n                a=-1;\n            System.out.println(a);\n            n=in.nextInt();\n        }\n    }\n    static int c=0; \n    private static int f(String s1, String s2, String s) {\n        c++;\n        if(c>50)\n            return 1;\n        String s12=\"\";\n        for (int i = 0; i < s1.length(); i++) {\n            s12+=\"\"+s2.charAt(i)+s1.charAt(i);\n        }\n        int k=1;\n        if(s.equals(s12))\n            return k;\n        else\n            k+=f(s12.substring(0, s12.length()/2), s12.substring(s12.length()/2, s12.length()), s);\n        return k;\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\twhile (true) {\n\t\t\tString tmp;\n\t\t\tint cnt = 0, mcounter = 0;\n\t\t\tint n = s.nextInt();\n\t\t\tif(n == 0)\n\t\t\t\treturn;\n\t\t\ts.nextLine();\n\t\t\tchar[][] chars = new char[n][n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\ttmp = s.nextLine();\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\tchars[i][j] = tmp.charAt(j);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tfor (int j = 0; j < n; j++)\n\t\t\t\t\tif (chars[i][j] == 'O')\n\t\t\t\t\t\tmcounter++;\n\t\t\tint[] x = new int[4*mcounter];\n\t\t\tint[] y = new int[4*mcounter];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tfor (int j = 0; j < n; j++)\n\t\t\t\t\tif (chars[i][j] == 'O') {\n\t\t\t\t\t\tx[cnt] = i;\n\t\t\t\t\t\ty[cnt++] = j;\n\t\t\t\t\t\tchars[i][j] = '#';\n\t\t\t\t\t}\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tfor (int i = 0; i < mcounter; i++)\n\t\t\t\t\tchars[y[j * mcounter + i]][n - 1 - x[j * mcounter + i]] = 'O';\n\t\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\t\tfor (int k = 0; k < n; k++)\n\t\t\t\t\t\tif (chars[i][k] == 'O') {\n\t\t\t\t\t\t\tx[cnt] = i;\n\t\t\t\t\t\t\ty[cnt++] = k;\n\t\t\t\t\t\t\tchars[i][k] = '#';\n\t\t\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\ttmp = s.nextLine();\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\tchars[i][j] = tmp.charAt(j);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < (mcounter * 4); i++)\n\t\t\t\tSystem.out.print(chars[x[i]][y[i]]);\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2791_18__1_1079_28", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (true) {\n            int a = in.nextInt(), b = in.nextInt(), c = in.nextInt(), d = in.nextInt();\n            if (a == 0 && b == 0 && c == 0 && d == 0) {\n                break;\n            }\n            System.out.println((c - b) + \" \" + (d - a));\n        }\n    }\n}", "generated_code": "\n\nimport java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tArrayList<Integer> g = new ArrayList<Integer>(110);\n\t\tint n = 0;\n\t\twhile (true) {\n\t\t\tn = in.nextInt();\n\t\t\tif (n == 0)\n\t\t\t\tbreak;\n\t\t\tg.add(n);\n\t\t}\n\t\tSystem.out.println(\"PERFECTION OUTPUT\");\n\t\tfor (int i = 0; i < g.size(); i++) {\n\t\t\tn = g.get(i);\n\t\t\tint x = div(n);\n\t\t\tint f = 5 - (n + \"\").length();\n\t\t\tif (f != 0)\n\t\t\t\tSystem.out.print(String.format(\"%\" + f + \"s%d  \", \" \", n));\n\t\t\telse\n\t\t\t\tSystem.out.print(String.format(\"%d  \", n));\n\t\t\tif (x == n)\n\t\t\t\tSystem.out.print(\"PERFECT\\n\");\n\t\t\telse if (x < n)\n\t\t\t\tSystem.out.print(\"DEFICIENT\\n\");\n\t\t\telse\n\t\t\t\tSystem.out.print(\"ABUNDANT\\n\");\n\t\t}\n\t\tSystem.out.println(\"END OF OUTPUT\");\n\t}\n\n\tpublic static int div(int n) {\n\t\tint sum = 0;\n\t\tint i = 1;\n\t\twhile (i <= n / 2) {\n\t\t\tif (n % i == 0) {\n\t\t\t\tsum += i;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn sum;\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_306__1_1001_495", "golden_code": "import java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input=new Scanner (System.in);\n        while(input.hasNext()){\n        int a=input.nextInt();\n        int b=input.nextInt();\n        int sum=a+b;\n        System.out.println(sum);\n    }}\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin=new Scanner(System.in);\n        while(cin.hasNext()){\n           System.out.println((cin.nextInt()+cin.nextInt()));\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2713_24__1_101078_11", "golden_code": "import java.util.*;\nimport java.io.*;\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t * @throws IOException\n\t */\n\tpublic static void main(String[] args) throws IOException {\n\t\t// TODO Auto-generated method stub\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tScanner scan = new Scanner(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint n = scan.nextInt();\n\t\twhile (n != 0) {\n\t\t\tSystem.out.println(rec(n));\n\t\t\tn = scan.nextInt();\n\t\t}\n\t}\n\n\tpublic static int rec(int n) {\n\t\tif (n == 1)\n\t\t\treturn 1;\n\t\tif (n == 2)\n\t\t\treturn 2;\n\t\tif (n % 2 == 1)\n\t\t\treturn rec(3 * n + 1) + 1;\n\t\telse\n\t\t\treturn rec(n / 2) + 1;\n\n\t}\n\n}\n", "generated_code": "import java.io.PrintWriter;\nimport java.util.*;\npublic class Main{\n    public static void main(String args[]){\n        Scanner cin=new Scanner(System.in);\n        PrintWriter cout=new PrintWriter(System.out);\n        for(int i=cin.nextInt();i>0;i--){\n            int a[],j,sum=0;\n            for(j=cin.nextInt(),a=new int[j];j>0;j--){\n                a[j-1]=cin.nextInt();\n            }\n            Arrays.sort(a);\n            for(j=a.length-3;j>=0;j-=3){\n                sum+=a[j];\n            }\n            cout.println(sum);\n        }\n        cout.flush();\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_2__1_1001_133", "golden_code": "\nimport java.util.Scanner;\n\nclass Main\n{\n    public static void main(String[] args) {\n        int a,b;\n        Scanner in = new Scanner(System.in);\n        while (in.hasNextInt()) {\n            a = in.nextInt();\n            b = in.nextInt();\n            System.out.println(a+b);\n        }\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    \n    public static void main(String[] args) {\n        Scanner c=new Scanner(System.in);\n\n        int a,b;\n        while(c.hasNext()){\n        a=c.nextInt();\n        b=c.nextInt();\n            System.out.println(a+b);\n        }\n      \n    }\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_440__1_1001_231", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        while(s.hasNext()){\n        int a = s.nextInt(), b = s.nextInt();\n        System.out.println(a+b);\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n\n    public static void main(String[] args) {\n      Scanner in=new Scanner(System.in);\n      int x , y , z;\n      while(in.hasNext())\n      {\n      x=in.nextInt();\n      y=in.nextInt();\n      z=x+y;\n        System.out.println(z);\n      }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1185_19__1_1001_380", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while (input.hasNext()) {\n            String str = input.nextLine();\n            if (str.matches(\"0\")) {\n                break;\n            }\n            long result = 0;\n            for (int i = 0; i < str.length(); i++) {\n                result += (((long) Math.pow(2, i + 1) - 1) * Character.getNumericValue(str.charAt(str.length() - i - 1)));\n            }\n            System.out.println(result);\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tint m, n;\n\tpublic static void main(String[] args) {\n\t\tMain p = new Main();\n\t\tp.run();\n\t}\n\tpublic void run(){\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext()){\n\t\t\tn = in.nextInt();\n\t\t\tm = in.nextInt();\n\t\t\tSystem.out.println(n+m);\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_106017_4__1_106017_14", "golden_code": "import java.util.*;\nimport java.lang.*;\npublic class Main\n{\n\tpublic static void main(String[]args)\n\t{\n\t\tScanner scan=new Scanner(System.in);\n\t\tString n,m;\n\t\tchar f1,f2,f3;\n\t\tint x=0,y=0,z=0,v=0;\n\t\tint sum=0;\n\t\twhile(scan.hasNext())\n\t\t{\n\t\t\tx=0;\n\t\t\ty=0;\n\t\t\tz=0;\n\t\t\tv=0;\n\t\t\tsum=0;\n\t\t\tn=scan.nextLine();\t\n\t\t\tf1=n.charAt(0);\n\t\t\tf2=n.charAt(1);\n\t\t\tf3=n.charAt(2);     \n\t\t\tx=Integer.parseInt(f1+\"\");\n\t\t\ty=Integer.parseInt(f2+\"\");\n\t\t\tz=Integer.parseInt(f3+\"\");\n\t\t\tsum=x*x*x+y*y*y+z*z*z;\n\t\t\tv=Integer.parseInt(n);\n\t\t\tif(v==sum)\n\t\t\t\tSystem.out.println(\"Yes\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scan = new Scanner(System.in);\n        int n;\n\twhile(scan.hasNextInt())\n\t{\n        n = scan.nextInt();\n        if((n==153)||(n==370)||(n==371)||(n==407))\n        {\n            System.out.println(\"Yes\");\n        }\n        else\n            System.out.println(\"No\");\n        }\n    }\n    \n}", "score": 1.0}
{"id": "SHARE_1_1001_99__1_1001_447", "golden_code": "import java.util.Scanner;\n\npublic class Main{\n    public static void main( String[] a ){\n        Scanner i = new Scanner( System.in );\n        try{\n        while( 1>0 ){\n            System.out.println( i.nextInt() + i.nextInt() );\n        }\n        }catch( Exception e ){}\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n\n    public static void main(String[] args) {\n      Scanner in=new Scanner(System.in);\n      int x , y ;\n      while(in.hasNext())\n      {\n      x=in.nextInt();\n      y=in.nextInt();\n      \n        System.out.println(x+y);\n      }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2001_2__1_2529_4", "golden_code": "\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while(true){\n            int n = in.nextInt();\n            if(n== 0)\n                break;\n            int a[]= new int[n];\n            for (int i = 0; i < n; i++) {\n                a[i] = in.nextInt();\n            }\n            Arrays.sort(a);\n            System.out.print(a[0]);\n            for (int i = 1; i < a.length; i++) {\n                if(a[i]!=a[i-1]){\n                    System.out.print(\" \"+a[i]);\n                }\n            }\n            System.out.println(\"\");\n        }\n    }\n}\n", "generated_code": "import java.util.*;\n\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner s = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint n = s.nextInt();\n\t\t\tif(n == 0)\n\t\t\t\tbreak;\n\t\t\tint first = 0;\n\t\t\tint second = 1;\n\t\t\tint res=2;\n\t\t\tfor(;true;res++){\n\t\t\t\tint sum = first+second;\n\t\t\t\tfirst = second;\n\t\t\t\tsecond = sum%n;\n\t\t\t\tif(first == 1 && second == 0)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tSystem.out.println(n+\" \"+res);\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1001_261__1_1001_310", "golden_code": "import java.util.*;\npublic class Main{\n\tpublic static void main(String[]args){\n\t\tScanner h=new Scanner(System.in);\n\t\twhile(h.hasNext()){\n\t\t\tint a=h.nextInt();\n\t\t\tint b=h.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] argc)\n\t{\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext())\n\t\t{\n\t\t\tint a = sc.nextInt(), b = sc.nextInt();\n\t\t\tSystem.out.println(a + b);\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1073_4__1_1002_29", "golden_code": "import java.util.*;\n\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner s = new Scanner(System.in);\n\t\tfor(int q=1;true;q++){\n\t\t\tint z = s.nextInt();\n\t\t\tint i = s.nextInt();\n\t\t\tint m = s.nextInt();\n\t\t\tint l = s.nextInt();\n\t\t\tif(z == 0 && i == 0 && m == 0 && l == 0)\n\t\t\t\tbreak;\n\t\t\tTreeMap<Integer,Integer> set = new TreeMap<Integer,Integer>();\n\t\t\tint newNum = l;\n\t\t\tset.put(newNum,0);\n\t\t\tnewNum = (z*newNum+i)%m;\n\t\t\tint res=1;\n\t\t\twhile(!set.containsKey(newNum)){\n\t\t\t\tset.put(newNum,res);\n\t\t\t\tnewNum = (z*newNum+i)%m;\n\t\t\t\tres++;\n\t\t\t}\n\t\t\tres -= set.get(newNum);\n\t\t\tSystem.out.println(\"Case \"+q+\": \"+res);\n\t\t}\n\t}\n}", "generated_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\twhile (input.hasNext()) {\n\t\t\tList<point> list = new ArrayList<>();\n\t\t\tpoint t = new point(input.nextFloat(), input.nextFloat());\n\t\t\tfloat r = input.nextFloat();\n\t\t\tif (r <= 0)\n\t\t\t\tbreak;\n\t\t\tint n = input.nextInt();\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tlist.add(new point(input.nextFloat(), input.nextFloat()));\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tif (Math.sqrt(((t.x - list.get(i).x) * (t.x - list.get(i).x))\n\t\t\t\t\t\t+ ((t.y - list.get(i).y) * (t.y - list.get(i).y))) > r) {\n\t\t\t\t\tlist.remove(i);\n\t\t\t\t\ti--;\n\t\t\t\t\tn--;\n\t\t\t\t}\n\t\t\tn = list.size();\n\t\t\tint max = 0;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tint umax = 1, dmax = 1;\n\t\t\t\t;\n\t\t\t\tfloat m = (t.y - list.get(i).y) / (t.x - list.get(i).x);\n\t\t\t\tif(m>100001)\n\t\t\t\t\tm=100001;\n\t\t\t\tif(m<-100001)\n\t\t\t\t\tm=-100001;\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\tif (i != j) {\n\t\t\t\t\t\tfloat s = m * (list.get(j).x - t.x) + t.y;\n\t\t\t\t\t\tif (list.get(j).y <= s) \n\t\t\t\t\t\t\tumax++;\n\t\t\t\t\t\tif (list.get(j).y >= s) \n\t\t\t\t\t\t\tdmax++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (umax > max)\n\t\t\t\t\tmax = umax;\n\t\t\t\tif (dmax > max)\n\t\t\t\t\tmax = dmax;\n\t\t\t}\n\t\t\tSystem.out.println(max);\n\t\t}\n\t}\n\tstatic class point {\n\t\tpublic point(float x, float y) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\t\tpublic float x;\n\t\tpublic float y;\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1104_62__1_1001_394", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        in.nextLine();\n        while (n-- > 0) {\n            String[] s = in.nextLine().split(\" \");\n            StringBuilder r = new StringBuilder();\n            for (int i = s.length - 1; i >= 0; i--) r.append(new StringBuilder(s[i]).reverse()).append(\" \");\n            r.deleteCharAt(r.length() - 1);\n            System.out.println(r);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n       \n        Scanner input = new Scanner(System.in);\n        while(input.hasNext()){\n        int a = input.nextInt();\n        int b = input.nextInt();\n\n\n\n\n\n        System.out.println(a + b);\n        }\n    }\n    \n}\n    ", "score": 0.0}
{"id": "SHARE_1_1006_84__1_2124_7", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n    \tScanner input = new Scanner(System.in);\n    \tint[] a=new int[50];\n    \tdouble in=input.nextDouble();\n    \tint j=0;\n\t    while (in!=0.00){\n        \tdouble sum=0.00,i=2;\n        \twhile (sum<in){\n        \t\tsum+=1/i;\n        \t\ti++;\n        \t}\n        \ta[j]=(int) (i-2);\n        \tj++;\n        \tin=input.nextDouble();\n        }\n        int[]b=new int[j];\n        for(int k=0;k<b.length;k++)\n        \tb[k]=a[k];\n        for(int k=0;k<b.length;k++)\n        \t System.out.println(b[k]+\" card(s)\");\n    }\n}\n", "generated_code": "import java .util.Scanner;\npublic class Main \n{\n\tpublic static void main(String[] args) \n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\t\n\t\tString str = scan.nextLine();\n\t\tString str1 = scan.nextLine();\n\t\t\n\t\tSystem.out.println(str1);\n\t\tSystem.out.println(str);\n\t\t\n\t\t\n\t\twhile(scan.hasNextLine())\n\t\t{\n\t\t\tString str2= scan.nextLine();\n\t\t\tString str3=\"\";\n\t\t\tfor(int i=0; i <str2.length(); i++)\n\t\t\t{\n\t\t\t\tfor(int j=0; j<str.length(); j++)\n\t\t\t\t{\n\t\t\t\t\tif(str2.charAt(i)==str.charAt(j))\n\t\t\t\t\t{\n\t\t\t\t\t\tstr3+=str1.charAt(j);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(j==str.length()-1 && str2.charAt(i)!=str.charAt(j))\n\t\t\t\t\t\tstr3+=str2.charAt(i);\n\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(str3);\n\t\t\t\n\t\t}\n\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1903_28__1_1903_3", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while (input.hasNext()) {\n            String str = input.nextLine();\n            int num = Integer.valueOf(str);\n            if (num == -1) {\n                break;\n            }\n            int sum = 0, avg = 0;\n            for (int i = 0; i < num; i++) {\n                String[] nums = input.nextLine().split(\" \");\n                int b = Integer.valueOf(nums[1]);\n                sum += (Integer.valueOf(nums[0]) * (b - avg));\n                avg = b;\n            }\n            System.out.println(sum + \" miles\");\n        }\n    }\n}", "generated_code": "\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        Scanner in = new Scanner(System.in);\n        int t=in.nextInt();\n        int miles=0;\n        while(t!=-1){\n            miles=0;\n            int temp=0;\n            for(int i=0 ; i<t ; i++){\n                int speed=in.nextInt();\n                int time=in.nextInt();\n                miles+=((time-temp)*speed);\n                temp=time;\n            }\n            System.out.println(miles + \" miles\");\n            t=in.nextInt();\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_106020_34__1_2735_15", "golden_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main(String[] arqs)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\tint testcases = 0;\n\t\tint num = 0;\n\t\tint sum = 0;\n\t\tint sum2 = 0;\n\t\ttestcases = scan.nextInt();\n\t\tint testcases2 = 0;\n\t\twhile(testcases2 < testcases)\n\t\t{\n\t\t\ttestcases2++;\n\t\t\tnum = scan.nextInt();\n\t\t\tsum = 0;\n\t\t\tsum2=1;\n\t\t\tfor(int i=1 ; i<=num ; i++)\n\t\t\t{\n\t\t\t\tsum2 = sum2 + (i+1);\n\t\t\t\tsum = sum + i*sum2;\n\t\t\t}\n\t\t\tSystem.out.println(testcases2 +\" \"+ num +\" \"+ sum);\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\npublic static void main(String[] args) {\n\tScanner scan=new Scanner(System.in);\n\tint num=scan.nextInt();\n\tint row,col;\n\tint[]valr;\n\tint[]valc;\n\tint[]valm1;\n\tint[]valm2;\n\tint numm;\n\t\n\tfor (int i = 0; i < num; i++) {\n\t\trow=scan.nextInt();\n\t\tcol=scan.nextInt();\n\t\tvalr=new int[row];\n\t\tvalc=new int[col];\n\t\tvalm1=new int[row+col];\n\t\tvalm2=new int[row+col];\n\t\tint value[][]=new int[row][col];\n\t\tfor(int j=0;j<row;j++ )\n\t\t{\n\t\t\tfor (int k = 0; k < col; k++) {\n\t\t\t\tnumm=scan.nextInt();\n\t\t\t\tvalr[j]+=numm;\n\t\t\t\tvalc[k]+=numm;\n\t\t\t\tvalm1[row-j+k]+=numm;\n\t\t\t\tvalm2[j+k]+=numm;\n\t\t\t\tvalue[j][k]=numm;\n\t\t\t}\n\t\t}\n\t\tint max=0;\n\t\tint sum;\n\t\tfor(int j=0;j<row;j++ )\n\t\t{\n\t\t\tfor (int k = 0; k < col; k++) {\n\t\t\t\tsum=0;\n\t\t\t\tsum=valr[j]+valc[k]+valm1[row-j+k]+valm2[j+k]-3*value[j][k];\n\t\t\t\tif(sum>max)\n\t\t\t\t\tmax=sum;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t\t\t}\n\t\t\n\t}\n}\n\n", "score": 0.0}
{"id": "SHARE_1_1001_42__1_1001_212", "golden_code": "import java.util.*;\nclass Main {\n\tpublic static void main(String args[]){\n\t\tScanner A = new Scanner(System.in);\n\t\twhile(A.hasNextInt()){\n\t\t\tint a = A.nextInt();\n\t\t\tint b = A.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.Scanner;\nimport java.lang.System;\nimport java.lang.String;\npublic class Main {\n\n    public static void main(String[] args) {\n\tScanner input=new Scanner(System.in);\n        try\n        {\n            while (true)\n            {\n                System.out.println(input.nextInt()+input.nextInt());\n            }\n        }\n        catch (Exception e )\n        {\n            System.exit(0);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1502_14__1_1660_25", "golden_code": "import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner s=new Scanner(System.in);\n        HashMap map=new HashMap();\n        ArrayList<Integer> list=new ArrayList<Integer>();\n        for (int i = 3; i < 33000; i+=2) {\n            if(isPrime(i)){\n                map.put(i, i);\n                list.add(i);\n            }\n        }\n        while(true){\n            int x=s.nextInt();\n            if(x==0){\n                break;\n            }\n            if(x==4){\n                System.out.println(\"1\");\n                continue;\n            }\n            int answer=0;\n            for (int i = 0; list.get(i) <= x/2; i++) {\n                if(map.containsKey(x-list.get(i)) && map.containsKey(list.get(i))){\n                    answer++;\n                }\n            }\n            System.out.println(answer);\n        }\n    }\n    static boolean isPrime(int n) {\n        for(int i=3;i*i<=n;i+=2) {\n            if(n%i==0)\n                return false;\n        }\n        return true;\n    }\n}\n", "generated_code": "import java.util.*;\n\nclass Main {\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\tint n = s.nextInt();\n\t\tint sub, t, st, a, at = 0, sm = 0, sum = 0;\n\t\tString w = \"\";\n\t\tString m;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ta = 0;\n\t\t\tsub = 0;\n\t\t\tsum = 0;\n\t\t\tm = s.next();\n\t\t\tfor (int j = 0; j < 4; j++) {\n\t\t\t\tst = s.nextInt();\n\t\t\t\tt = s.nextInt();\n\t\t\t\tif (t != 0) {\n\t\t\t\t\tsum += t;\n\t\t\t\t\tsub += st;\n\t\t\t\t\ta++;\n\t\t\t\t}}\n\t\t\t\tsum = sum + 20 * (sub - a);\n\t\t\t\tif (a > at) {\n\t\t\t\t\tw = m;\n\t\t\t\t\tsm = sum;\n\t\t\t\t\tat = a;\n\t\t\t\t} else {\n\t\t\t\t\tif (a == at) {\n\t\t\t\t\t\tif (sum < sm) {\n\t\t\t\t\t\t\tsm = sum;\n\t\t\t\t\t\t\tw = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\tSystem.out.println(w + \" \" + at + \" \" + sm);\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2621_13__1_1041_6", "golden_code": "import java.io.PrintWriter;\nimport java.util.*;\n\npublic class Main {\n\n\tpublic static void main(String args[]) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tPrintWriter cout = new PrintWriter(System.out);\n\t\tint n = scan.nextInt();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tString str = scan.next();\n\t\t\tstr = str.toLowerCase();\n\t\t\tString txt = \"\";\n\t\t\tfor (int j = 0; j < str.length(); j++) {\n\t\t\t\tif (ok(str.charAt(j), \"abc\")) {\n\t\t\t\t\ttxt += \"2\";\n\t\t\t\t} else {\n\t\t\t\t\tif (ok(str.charAt(j), \"def\")) {\n\t\t\t\t\t\ttxt += \"3\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (ok(str.charAt(j), \"ghi\")) {\n\t\t\t\t\t\t\ttxt += \"4\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (ok(str.charAt(j), \"jkl\")) {\n\t\t\t\t\t\t\t\ttxt += \"5\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (ok(str.charAt(j), \"mno\")) {\n\t\t\t\t\t\t\t\t\ttxt += \"6\";\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (ok(str.charAt(j), \"pqrs\")) {\n\t\t\t\t\t\t\t\t\t\ttxt += \"7\";\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tif (ok(str.charAt(j), \"tuv\")) {\n\t\t\t\t\t\t\t\t\t\t\ttxt += \"8\";\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tif (ok(str.charAt(j), \"wxyz\")) {\n\t\t\t\t\t\t\t\t\t\t\t\ttxt += \"9\";\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tString ans = \"YES\";\n\t\t\tfor (int j = 0; j < txt.length() / 2 + 1; j++) {\n\t\t\t\tif (txt.charAt(j) != txt.charAt(txt.length() - j - 1)) {\n\t\t\t\t\tans = \"NO\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t}\n\n\tpublic static boolean ok(char c, String str) {\n\t\tfor (int i = 0; i < str.length(); i++) {\n\t\t\tif (c == str.charAt(i)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}", "generated_code": "\n\nimport java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint x = 0;\n\t\twhile (true) {\n\n\t\t\tint n = in.nextInt();\n\t\t\tint m = in.nextInt();\n\t\t\tint c = in.nextInt();\n\t\t\tif (n == 0 && m == 0 && c == 0)\n\t\t\t\treturn;\n\t\t\tx++;\n\t\t\tint a[] = new int[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\ta[i] = in.nextInt();\n\t\t\t}\n\t\t\tint sum = 0;\n\t\t\tint max = 0;\n\t\t\tboolean isFlow = false;\n\t\t\tfor (int i = 0; i < m; i++) {\n\t\t\t\tint d = in.nextInt();\n\t\t\t\tsum += a[d - 1];\n\t\t\t\ta[d - 1] = -1 * a[d - 1];\n\t\t\t\tif (sum > c) {\n\t\t\t\t\tisFlow = true;\n\t\t\t\t} else {\n\n\t\t\t\t\tif (max < sum)\n\t\t\t\t\t\tmax = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isFlow) {\n\t\t\t\tSystem.out.println(\"Sequence \" + x);\n\t\t\t\tSystem.out.println(\"Fuse was blown.\\n\");\n\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"Sequence \" + x);\n\t\t\t\tSystem.out.println(\"Fuse was not blown.\");\n\t\t\t\tSystem.out.println(\"Maximal power consumption was \" + max + \" amperes.\\n\");\n\t\t\t}\n\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1009_14__1_2353_14", "golden_code": "\nimport java.util.Scanner;\npublic class Main{\npublic static void main(String [] str)\n{\n\tdouble a=0,i=0;\n\tScanner scan=new Scanner(System.in);\n\twhile(i<12)\n\t{\n\t\t a+=scan.nextDouble();\n\t\t i++;\n\t}\n\tSystem.out.printf(\"%s%.2f\",\"$\",a/12);\n        System.out.println();\n}\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile (sc.hasNext()) {\n\t\t\tint gcd = sc.nextInt(), lcm = sc.nextInt();\n\t\t\tint n = lcm / gcd;\n\t\t\tif (n * gcd != lcm) {\n\t\t\t\tSystem.out.println(0);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint k = 0, o = n;\n\t\t\tfor (int i = 2; i <= Math.max(Math.sqrt(o) + 1, n); ++i) {\n\t\t\t\tif (n % i == 0)\n\t\t\t\t\t++k;\n\t\t\t\twhile (n % i == 0)\n\t\t\t\t\tn /= i;\n\t\t\t}\n\t\t\tSystem.out.println((int)Math.pow(2, k));\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_106017_17__1_106017_52", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\twhile(input.hasNext()){\n\t\t\tString n = input.next();\n\t\t\tint r = 0;\n\t\t\tfor(int i = 0; i < 3; i++)\n\t\t\t{\n\t\t\t\tint k = (int)(n.charAt(i) - '0');\n\t\t\t\tr += k*k*k;\n\t\t\t}\n\t\t\tint r2 = Integer.parseInt(n);\n\t\t\tif(r2 == r)\n\t\t\t\tSystem.out.println(\"Yes\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main ( String[] args)\n\t{\n\tScanner scan = new Scanner ( System.in);\n\twhile (scan.hasNextLine())\n\t\n\t{\n\tint num1 = scan.nextInt();\n\t\tint num3=num1;\n\t\tint p=0;\n\t\twhile ( num3!=0)\n\t\t{\n\t\t num3=num3/10;\n\t\tp++;\n\t\t}\n\t\t\n\t\t\n\tint [] daffodil= new int [p];\n\tint num2 = num1;\n\tint i=0;\n\t\n\t\twhile (i<p)\n\t\t{\n\t\t daffodil [i]= num2%10;\n\t\t num2 = num2/10;\n\t\t i++;\n\t\t }\n\t\t \n\tint sum = 0 ;\n\tint j=0;\n\t\twhile ( j!=p)\n\t\t{\n\t\tsum= sum + daffodil[j]*daffodil[j]*daffodil[j];\n\t\tj++;\n\t\t}\n\t\tif ( sum==num1)\n\t\tSystem.out.println( \"Yes\");\n\t\telse \n\t\tSystem.out.println( \"No\");\n\t\t}\n\t\t\n\t}\n}\t\t  \n\n", "score": 1.0}
{"id": "SHARE_1_1820_13__1_1820_7", "golden_code": "\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        while (true) {\n            float ss = s.nextFloat();\n            float mw = s.nextFloat();\n            float ms = s.nextFloat();\n            if (ss == 0 && mw == 0 && ms == 0) {\n                break;\n            }\n            String res = \"\";\n            if (ss <= 4.5f && mw >= 150f && ms >= 200f) {\n                res += \"Wide Receiver \";\n            }\n            if (ss <= 6.0f && mw >= 300f && ms >= 500f) {\n                res += \"Lineman \";\n            }\n            if (ss <= 5.0f && mw >= 200f && ms >= 300f) {\n                res += \"Quarterback \";\n            }\n            if (res.isEmpty()) {\n                System.out.println(\"No positions\");\n            } else {\n                System.out.println(res.trim());\n            }\n        }\n    }\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (true) {\n            float s = in.nextFloat();\n            float w = in.nextFloat();\n            float st = in.nextFloat();\n            if (s == 0 & w == 0 & st == 0) {\n                break;\n            }\n            String sout = \"\";\n            if (s <= 4.5) {\n                if (w >= 150) {\n                    if (st >= 200) {\n                        sout += \"Wide Receiver\";\n                    }\n                }\n            }\n            if (s <= 6.0) {\n                if (w >= 300) {\n                    if (st >= 500) {\n                        if (!sout.equals(\"\")) {\n                            sout += \" \";\n                        }\n                        sout += \"Lineman\";\n                    }\n                }\n            }\n            if (s <= 5.0) {\n                if (w >= 200) {\n                    if (st >= 300) {\n                        if (!sout.equals(\"\")) {\n                            sout += \" \";\n                        }\n                        sout += \"Quarterback\";\n                    }\n                }\n            }\n            if (!sout.equals(\"\")) {\n                System.out.println(sout);\n            } else {\n                System.out.println(\"No positions\");\n            }\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2703_11__1_1001_347", "golden_code": "\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n/**\n *\n * @author Rahmat Waisi\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        in.nextLine();\n        while (t > 0) {\n            ArrayList<String> t_names = new ArrayList<String>();\n            String revs[] = new String[3], names[] = in.nextLine().split(\" \");\n            for (int i = 0; i < 3; i++) {\n                t_names.add(names[i]);\n            }\n            String order = in.nextLine();\n            int counter = 0, in_1 = -1, in_2;\n            String first = \"\", last = \"\", middle = \"\";\n            out:\n            for (int i = 0; i < 3; i++) {\n                for (int j = 0; j < names[i].length(); j++) {\n                    if (names[i].charAt(j) == order.charAt(j)) {\n                        counter++;\n                    } else {\n                        counter = 0;\n                        continue out;\n                    }\n                }\n                if (counter == names[i].length()) {\n                    first += names[i];\n                    t_names.remove(names[i]);\n                    in_1 = i;\n                    break;\n                }\n            }\n            for (int i = 0; i < 3; i++) {\n                if (i != in_1) {\n                    if (order.indexOf(names[i], names[in_1].length()) > names[in_1].length()) {\n                        last = names[i];\n                        t_names.remove(names[i]);\n                        in_2 = i;\n                        break;\n                    }\n                }\n            }\n            middle = t_names.get(0).equals(order.subSequence(first.length(), order.indexOf(last))) ? new StringBuilder(t_names.get(0)).reverse().toString() : t_names.get(0);\n            System.out.println(first + middle + last);\n            t--;\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "score": 0.0}
{"id": "SHARE_1_2734_26__1_2822_5", "golden_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static int computeMin(int [] pockets, int w) {\n\t\tArrays.sort(pockets);\n\t\tint sum = 0; \n\t\tint countMin = 1;\n\t\tfor ( int i = pockets.length - 1; i >= 0 ; i-- ) {\n\t\t\tsum += pockets[i];\n\t\t\tif (sum >= w) return countMin;\n\t\t\tcountMin++ ;\n\t\t}\n\t\treturn 0 ;\n\t}\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint N = scan.nextInt();\n\t\tint w[] = new int[N];\n\t\tint [][] pockets = new int[N][];\n\t\t\n\t\tfor (int i = 0; i < N; i++ ){\n\t\t\tint n = scan.nextInt();\n\t\t\tw[i] = scan.nextInt();\n\t\t\tpockets[i] = new int[n];\n\t\t\tfor (int j = 0 ; j < n; j++) {\n\t\t\t\tpockets[i][j] = scan.nextInt();\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0 ; i< pockets.length; i++) {\n\t\t\tint ans = computeMin(pockets[i], w[i]); \n\t\t\tif (ans > 0) System.out.println(ans);\n\t\t\telse System.out.println(\"No solution!\");\n\t\t}\n\t\t\t\n\t}\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t=in.nextInt();\n        while (t>0) {            \n            \n            int s=in.nextInt();\n            System.out.println((s*(s+1))/2+\" \"+(int)Math.pow(s, 2)+\" \"+((int)Math.pow(s, 2)+s));\n            \n            \n            t--;\n        }\n    }\n    \n}\n", "score": 0.0}
{"id": "SHARE_1_109001_0__1_2621_40", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String argv[])\n\t{\n\t\tlong b , numOfTests;\n\t\tString n;\n\t\tScanner in =  new Scanner(System.in);\n\t\tnumOfTests = in.nextInt();\n\t\tfor (int i = 0; i < numOfTests; i++) {\n\t\t\tb = in.nextInt();\n\t\t\tn = in.nextLine();\n\t\t\tlong sum = 0;\n\t\t\tlong val = 0;\n\t\t\tlong a=1;\n\t\t\tfor (int j = n.length()-1; j >0; j--)\n\t\t\t{\n\t\t\t\tlong t = n.charAt(j)-'0';\n\t\t\t\tsum +=t;\n\t\t\t\tval +=a*t;\n\t\t\t\ta*=b;\n\t\t\t}\n\t\t\tif (sum == 0)\n\t\t\t\tSystem.out.println(\"no\");\n\t\t\telse if(val %sum == 0)\n\t\t\t\tSystem.out.println(\"yes\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"no\");\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        //int[] nums = {2, 22, 222, 3, 33, 333, 4, 44, 444, 5, 55, 555, 6, 66, 666, 7, 77, 777, 7777, 8, 88, 888, 9, 99, 999, 9999};\n        int[] nums = {2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9};\n        for (int i = 0; i < n; i++) {\n            String str = s.next().toUpperCase();\n            String res = \"\";\n            for (int j = 0; j < str.length(); j++) {\n                res += nums[str.charAt(j) - 'A'];\n            }\n            if (res.length() % 2 == 1) {\n                if (res.substring(0, res.length() / 2).equals(new StringBuilder(res.substring(res.length() / 2 + 1, res.length())).reverse().toString())) {\n                    System.out.println(\"YES\");\n                } else {\n                    System.out.println(\"NO\");\n                }\n            } else {\n                if (res.substring(0, res.length() / 2).equals(new StringBuilder(res.substring(res.length() / 2, res.length())).reverse().toString())) {\n                    System.out.println(\"YES\");\n                } else {\n                    System.out.println(\"NO\");\n                }\n            }\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_2500_5__1_2500_20", "golden_code": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n//package javaapplication1;\n\nimport java.awt.List;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.PrintStream;\nimport java.util.Scanner;\nimport java.math.MathContext;\nimport java.math.BigInteger;\n\n/**\n *\n * @author Ghazale\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static boolean isPrime(int a) {\n        if (a <= 1) {\n            return false;\n        }\n        if (a == 2) {\n            return true;\n        }\n        for (int i = 2; i <= Math.sqrt(a) + 1; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n\n        }\n        return true;\n    }\n\n    public static double function(int n) {\n        double sum = 0;\n        if (n == 1) {\n            return 0;\n        }\n        for (int i = 2; i < n / 2 + 1; i++) {\n            if (n % i == 0) {\n                sum += n / i + i;\n            }\n        }\n        return (sum + 1) / n;\n    }\n\n    static class node {\n\n        int x, y, z;\n\n        node(String s) {\n            int num = 0;\n            int a[] = new int[3];\n            int cnt = 0;\n            for (int i = s.length(); i >= 0; i--) {\n                if (s.charAt(i) == ' ') {\n                    a[cnt] = num;\n                    num = 0;\n                    cnt++;\n                } else {\n                    num = num * 10 + (s.charAt(i) - 48);\n                }\n            }\n            x = a[0];\n            y = a[1];\n            z = a[2];\n        }\n    }\n    public static int mymin;\n    public static int mymax;\n    public static int total;\n\n\n    public static void func(int k , BigInteger i){\n        \n        if( k== 0 ){\n            System.out.println(\"Yes\");\n            return;\n        }\n        if((i.compareTo(BigInteger.valueOf(3).pow(k-1).multiply(BigInteger.valueOf(2)))==-1 ||\n                i.compareTo(BigInteger.valueOf(3).pow(k-1).multiply(BigInteger.valueOf(2)))==0) \n                && i.compareTo(BigInteger.valueOf(3).pow(k-1))==1    ){\n                System.out.println(\"No\");\n                return ;\n            }\n        if(i.compareTo(BigInteger.valueOf(3).pow(k-1))==-1 || i.compareTo(BigInteger.valueOf(3).pow(k-1))==0){\n            func(k-1,i);\n        }else if(i.compareTo(BigInteger.valueOf(3).pow(k))==-1 || i.compareTo(BigInteger.valueOf(3).pow(k))==0){\n            \n            func(k-1,i.subtract(BigInteger.valueOf(3).pow(k-1).multiply(BigInteger.valueOf(2))));                    \n        }  \n                \n        return ;\n    }\n    \n    public static void main(String[] args) throws FileNotFoundException {\n        // TODO code application logic here\n        //Scanner f = new Scanner(new File(\"src//JavaApplication1//input.txt\"));\n        Scanner f = new Scanner(System.in);\n        //PrintStream out = new PrintStream(new FileOutputStream(new File(\"src//JavaApplication1//output.txt\")));\n        int k ;\n\twhile(f.hasNext())\n\t{\n            k = f.nextInt();\n            BigInteger i = f.nextBigInteger(); \n            \n            if(k==0 && i.equals(BigInteger.ZERO))\n\t\tbreak;\n            func(k,i);\n\t}\n        \n\n    }\n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        // TODO code application logic here\n          Scanner input=new Scanner(System.in);\n        String out1=\"\";\n        String s=input.nextLine();\n        String[] ll=s.split(\" \");\n         long a=Long.parseLong(ll[0]);\n        long num=Long.parseLong(ll[1])-1;\n        List<String> results=new ArrayList<String>();\n        while(a!=0||num+01!=0)\n        {\n              out1=\"Yes\";\n              long tedad=(long)Math.pow(3, a);\n              if(num>tedad||(num==1&&a==0))\n              {\n                  out1=\"No\";\n              }\n              else if((num-1)%6==0)\n                    out1=\"No\";\n              else\n              {\n                 for(long i=tedad/3;i>=3;i=i/3)\n                 {\n                     if((num/i)%2==1)\n                     {\n                         out1=\"No\";\n                         break;\n                     }\n                 }\n                \n              }\n              results.add(out1);\n               s=input.nextLine();\n            out1=\"Yes\";\n             ll=s.split(\" \");\n            a=Long.parseLong(ll[0]);\n            num=Long.parseLong(ll[1])-1;\n        }\n        for(int i=0;i<results.size();i++)\n            {\n           System.out.println(results.get(i));\n            }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1326_9__1_1001_33", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        \n        Scanner input = new Scanner( System.in );\n        \n        int[][] a = new int[200][200];\n        int n, c, cp, x, xp, y, yp, xmax, xmin, ymax, ymin;\n        int i, j, k, res, datasetCnt = 1;\n        while( ( n = input.nextInt() ) != 0 ){\n            res = 0;\n            c = input.nextInt();\n            \n            for( i = 0; i < n; i++ ){ \n                cp = input.nextInt();\n                x = input.nextInt() + 100; y = input.nextInt() + 100; xp = input.nextInt() + 100; yp =input.nextInt()+100;\n                xmax = Math.max( x, xp); ymax = Math.max( y, yp );\n                xmin = Math.min( x, xp); ymin = Math.min( y, yp );\n                for( j = xmin; j < xmax; j++ ){\n                    for( k = ymin; k < ymax; k++ ){\n                        a[j][k] = cp;\n                    }\n                }\n                \n            }\n            \n            \n            for( i = 0; i < 200; i++ ){\n                for( j = 0; j < 200; j++ ){\n                    if( a[i][j] == c )\n                        res++;\n                    a[i][j] = 0;\n                }\n            }\n            \n            System.out.printf( \"The area of color %d in dataset %d is: %d\\n\", c, datasetCnt++, res );\n            \n        }\n    }\n    \n}", "generated_code": "import java.util.Scanner;\npublic class Main{\npublic static void main(String args[]){\nScanner i = new Scanner(System.in);\nwhile(i.hasNext())\nSystem.out.println((i.nextInt()+i.nextInt())+\"\");\n}\n}", "score": 0.0}
{"id": "SHARE_1_1208_0__1_1208_29", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]){\n        Scanner in=new Scanner(System.in);\n        int l=in.nextInt();\n        for (int q = 0; q < l; q++) {\n            int n=in.nextInt();\n            in.nextLine();\n            for (int i = 0; i < n; i++) {\n                String s=in.nextLine();\n                String a[]=s.split(\" \");\n                for (int k = 0; k < a.length; k++) {\n                    for (int j = a[k].length()-1; j >= 0; j--) {\n                        System.out.print(a[k].charAt(j));\n                    }\n                    if(k!=a.length-1)\n                        System.out.print(\" \");\n                    else\n                        System.out.println(\"\");\n                }\n            }\n            if(q!=l-1)\n                System.out.println(\"\");\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int test = input.nextInt();\n        int nstr;\n        String answer = \"\";\n        for (int i = 0; i < test; i++) {\n            nstr = input.nextInt();\n            input.nextLine();\n            for (int j = 0; j < nstr; j++) {\n                String[] str = input.nextLine().split(\" \");\n                answer = \"\";\n                for (int k = 0; k < str.length; k++) {\n                    answer += new StringBuffer(str[k]).reverse().toString() + \" \";\n                }\n                System.out.println(answer.substring(0, answer.length() - 1));\n            }\n            if (i != test - 1) {\n                System.out.println();\n            }\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1453_15__1_1453_16", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        Color[] colors = new Color[16];\n        for (int i = 0; i < 16; i++) {\n            colors[i] = new Color(s.nextInt(), s.nextInt(), s.nextInt());\n        }\n        while (true) {\n            int red = s.nextInt();\n            int green = s.nextInt();\n            int blue = s.nextInt();\n            if (red == -1 && blue == -1 && green == -1) {\n                break;\n            }\n            double minval = Double.MAX_VALUE;\n            Color mincol = null;\n            for (int i = 0; i < 16; i++) {\n                double val = Math.sqrt((red - colors[i].red) * (red - colors[i].red) + (blue - colors[i].blue) * (blue - colors[i].blue) + (green - colors[i].green) * (green - colors[i].green));\n                if (val < minval) {\n                    minval = val;\n                    mincol = colors[i];\n                }\n            }\n            System.out.printf(\"(%d,%d,%d) maps to (%d,%d,%d)\\n\",red,green,blue,mincol.red,mincol.green,mincol.blue);\n        }\n    }\n}\n\nclass Color {\n\n    int red, green, blue;\n\n    public Color(int red, int green, int blue) {\n        this.red = red;\n        this.green = green;\n        this.blue = blue;\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        Color[] colors = new Color[16];\n        for (int i = 0; i < 16; i++) {\n            colors[i] = new Color(s.nextInt(), s.nextInt(), s.nextInt());\n        }\n        while (true) {\n            int red = s.nextInt();\n            int green = s.nextInt();\n            int blue = s.nextInt();\n            if (red == -1 && blue == -1 && green == -1) {\n                break;\n            }\n            double minval = Double.MAX_VALUE;\n            Color mincol = null;\n            for (int i = 0; i < 16; i++) {\n                double val = Math.sqrt((red - colors[i].red) * (red - colors[i].red) + (blue - colors[i].blue) * (blue - colors[i].blue) + (green - colors[i].green) * (green - colors[i].green));\n                if (val < minval) {\n                    minval = val;\n                    mincol = colors[i];\n                }\n            }\n            System.out.printf(\"(%d,%d,%d) maps to (%d,%d,%d)\\n\",red,green,blue,mincol.red,mincol.green,mincol.blue);\n        }\n    }\n}\n\nclass Color {\n\n    int red, green, blue;\n\n    public Color(int red, int green, int blue) {\n        this.red = red;\n        this.green = green;\n        this.blue = blue;\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1018_45__1_2500_10", "golden_code": "import java.util.Scanner;\nclass Main\n{\n    static Scanner in = new Scanner(System.in);\n    public static void func(int[] arr,int counter)\n    {\n        for(int i=0;i<counter;i++)\n        {\n            arr[i] = in.nextInt();\n        }\n    }\n    public static void main(String[] args)\n    {\n        int counter = in.nextInt();\n        do\n        {\n        if(counter==0)\n            System.exit(0);\n\n        int[] arr = new int[counter];\n        int[] arr2 =new int[counter];\n        \n        int sum=0 , sum2=0;\n        func(arr,counter);\n        func(arr2,counter);\n        for(int i=0;i<counter;i++)\n        {\n            if(arr[i]==1 && arr2[i]==2)\n                sum+=6;\n            else if(arr2[i]==1 && arr[i]==2)\n                sum2+=6;\n                \n            else if(arr[i]-arr2[i]==1)\n                sum2+=arr[i]+arr2[i];\n            else if(arr2[i]-arr[i]==1)\n                sum+=arr[i]+arr2[i];\n            else if(arr[i]>arr2[i])\n                sum+=arr[i];\n            else if(arr[i]<arr2[i])\n                sum2+=arr2[i];\n                        \n        }\n     System.out.println(\"A has \"+sum+\" points. B has \"+sum2+\" points.\");\n\tcounter=in.nextInt();\n\tif(counter!=0)\n\t  System.out.print(\"\\n\");\n     }while(counter!=0);\n    }\n}", "generated_code": "import java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint k = sc.nextInt();\n\t\tlong i = sc.nextLong();\n\n\t\twhile (k != 0 && i != 0) \n\t\t{\n\t\t\tboolean f=true;\n\t\t\tint counter = 1;\n\t\t\twhile(k-counter !=0)\n\t\t\t{\n\t\t\t\tlong val =(long) Math.pow(3, k-counter);\n\t\t\t\t//System.out.println(val);\n\t\t\t\tif(val+1<=i && i<=(2*val)){\n\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\tf=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(i > 2*val) i = i- (2*val);\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t\t//System.out.println(i);\n\t\t\tif(i%2 ==0&& f){\n\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\tf=false;\n\t\t\t}\n\t\t\tif(f)System.out.println(\"Yes\");\n\t\t\tk = sc.nextInt();\n\t\t\ti = sc.nextLong();\n\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1200_1__1_101055_2", "golden_code": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.Scanner;\n\n/**\n * Created by mohamadreza on 10/17/2015.\n */\npublic class Main {\n    public static void main(String[] args) {\n        Main m = new Main();\n        BufferedReader r = new BufferedReader(new InputStreamReader(System.in));\n        String input;\n        try {\n            int flag1 = 0;\n            while((input = r.readLine()) != null && input.length() != 0) {\n                Scanner sc = new Scanner(input);\n                int flag = 0;\n                int[] coefficient = new int[9];\n                for (int counter = 8; counter >= 0; counter--)\n                    coefficient[counter] = sc.nextInt();\n                int[] output = new int[9];\n                for (int counter = 8; counter >= 0; counter--) {\n                    if (counter == 0 && flag == 0) {\n                        System.out.print(coefficient[counter]);\n                        continue;\n                    }\n                    if (coefficient[counter] == 0)\n                        continue;\n                    flag++;\n                    switch (coefficient[counter]) {\n                        case 1:\n                            if (1 == flag) {\n                                if (counter != 1)\n                                    System.out.print(\"x^\" + counter);\n                                else\n                                    System.out.print(\"x\");\n                            } else {\n                                if (counter == 0)\n                                    System.out.print(\" + \" + coefficient[counter]);\n                                else if (counter == 1)\n                                    System.out.print(\" + \" + \"x\");\n                                else\n                                    System.out.print(\" + \" + \"x^\" + counter);\n                            }\n                            break;\n                        case -1:\n                            coefficient[counter] *= -1;\n                            if (flag == 1) {\n                                if (counter != 1)\n                                    System.out.print(\"-x^\" + counter);\n                                else\n                                    System.out.print(\"-x\");\n                            } else {\n                                if (counter == 0)\n                                    System.out.print(\" - \" + coefficient[counter]);\n                                else if (counter == 1)\n                                    System.out.print(\" - \" + \"x\");\n                                else\n                                    System.out.print(\" - \" + \"x^\" + counter);\n                            }\n                            break;\n                        default:\n                            if (coefficient[counter] != 0) {\n                                if (coefficient[counter] > 0) {\n                                    if (1 == flag) {\n                                        if (counter != 1)\n                                            System.out.print(coefficient[counter] + \"x^\" + counter);\n                                        else\n                                            System.out.print(coefficient[counter] + \"x\");\n                                    } else {\n                                        if (counter == 0)\n                                            System.out.print(\" + \" + coefficient[counter]);\n                                        else if (counter == 1)\n                                            System.out.print(\" + \" + coefficient[counter] + \"x\");\n                                        else\n                                            System.out.print(\" + \" + coefficient[counter] + \"x^\" + counter);\n                                    }\n                                } else {\n                                    coefficient[counter] *= -1;\n                                    if (1 == flag) {\n                                        if (counter != 1)\n                                            System.out.print(\"-\" + coefficient[counter] + \"x^\" + counter);\n                                        else\n                                            System.out.print(\"-\" + coefficient[counter] + \"x\");\n                                    } else {\n                                        if (counter == 0)\n                                            System.out.print(\" - \" + coefficient[counter]);\n                                        else if (counter == 1)\n                                            System.out.print(\" - \" + coefficient[counter] + \"x\");\n                                        else\n                                            System.out.print(\" - \" + coefficient[counter] + \"x^\" + counter);\n                                    }\n                                }\n                                break;\n                            }\n                    }\n                }\n                System.out.println();\n            }\n        }\n        catch(Exception e){\n                System.out.println(\"hello everything is good.\");\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint T = input.nextInt();\n\t\tfor(int t = 0; t < T; t++){\n\t\t\tint m = input.nextInt(), n = input.nextInt();\n\t\t\tint a[] = new int[m+1];\n\t\t\tint b = 0;\n\t\t\tfor(int i = 0; i < m; i++)\n\t\t\t\ta[i] = input.nextInt();\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tb = input.nextInt();\n\t\t\t\tSystem.out.println(getMinDist(b, a, m));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static int getMinDist(int b, int[] a, int m) {\n\t\tint maxD = 1000000;\n\t\tint maxA = 0;\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tint x = a[i], y = b;\n\t\t\tint dif = 0;\n\t\t\twhile(x != 0 || y != 0){\n\t\t\t\tif(x%2 != y%2)\n\t\t\t\t\tdif++;\n\t\t\t\tx/=2;\n\t\t\t\ty/=2;\n\t\t\t}\n\t\t\tif(dif < maxD){\n\t\t\t\tmaxD = dif;\n\t\t\t\tmaxA = a[i];\n\t\t\t}\n\t\t\telse if(dif == maxD && a[i] < maxA){\n\t\t\t\tmaxD = dif;\n\t\t\t\tmaxA = a[i];\n\t\t\t}\n\t\t}\n\t\treturn maxA;\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1009_138__1_1009_3", "golden_code": "import java.util.Scanner;\nclass Main {\n\tstatic boolean adj[]=new boolean [178858589];\n\t\n\tpublic static void main(String s[]) {\n\t\tScanner cin = new Scanner(System.in);\n\t\tdouble sum=0;\n\t\tfor(int i=0;i<12;i++)\n\t\t{\n\t\t\tdouble val=cin.nextDouble();\n\t\t\tsum+=val;\n\t\t}\n\t\tSystem.out.printf(\"$%.2f\\n\",sum/12);\n\t\tadj[0]=true;\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] a) {\n\t\tScanner in = new Scanner(System.in);\n\t\tdouble sum = 0;\n\t\tfor (int i = 0; i < 12; i++){\n\t\t\tdouble d = in.nextDouble();\n\t\t\tsum += d;\n\t\t} \n\t\tSystem.out.print(\"$\");\n\t\tSystem.out.printf(\"%.2f\\n\", sum / 12);\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1006_22__1_1006_9", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        \n        Scanner input = new Scanner( System.in );\n        \n        float f, sum;\n        float n;\n        \n        while( ( f = input.nextFloat() ) != 0.0 ){\n            sum = 0;\n            n = 1;\n            while( sum < f ){\n                n++;\n                sum += 1 / n;\n            }\n            System.out.printf( \"%d card(s)\\n\", (int)n - 1);\n        }\n        \n    }\n}\n", "generated_code": "\n\nimport java.util.Scanner;\n\n\npublic class Main {\n\n    \n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        while (true){\n            float a = s.nextFloat();\n            if (a==0)\n                break;\n            float sum = 0;\n            float n = 1;\n            int counter = 0 ;\n            while (sum<=a){\n                sum+=(float)(1/(n+1));\n                n++;\n                counter++;\n            }\n            System.out.println(counter+\" card(s)\");\n        }\n    }\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1656_26__1_2599_9", "golden_code": "import java.util.Scanner;\nimport java.util.Arrays;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        \n        Scanner input = new Scanner( System.in );\n    \n        int[] list = new int[16];\n        int i, cnt = 0;\n        \n        list[0] = input.nextInt();\n        while( list[0] != -1 ){\n        \n            for( i = 1; list[i-1] != 0; i++ )\n                list[i] = input.nextInt();\n                \n            Arrays.sort( list, 0, i - 1 );\n        \n            cnt = 0;\n            for( int l : list ){   \n                if( l == 0)\n                    break;\n           \n                if( Arrays.binarySearch( list, 0, i, l * 2 ) >= 0 )\n                    cnt++;\n            }\n            System.out.println( cnt );\n            Arrays.fill( list, 0);\n            list[0] = input.nextInt();\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tstatic int[] dyn = new int[15];\n\t\n\tpublic static int findIt(int k)\n\t{\n\t\tif( dyn[k] != -1)\n\t\t\treturn dyn[k];\n\t\tdyn[k] = (int) (findIt(k - 1) * 9 + Math.pow(10, k - 1));\n\t\treturn dyn[k];\n\t}\n\t\n\tpublic static int goodMove(int k)\n\t{\n\t\tif( k<4)\n\t\t\treturn 0;\n\t\tif( k < 10)\n\t\t\treturn 1;\n\t\tint counter =0;\n\t\tint lastNum = 0;\n\t\tint u = k;\n\t\tfor(; u>0; u/=10)\n\t\t{\n\t\t\tcounter++;\n\t\t\tlastNum = u%10;\n\t\t}\n\t\tint y = (int) (lastNum * Math.pow(10,counter-1));\n\t\tint result = 0;\n\t\tif( lastNum > 4)\n\t\t{\n\t\t\tresult += Math.pow(10,counter-1);\n\t\t\tlastNum--;\n\t\t}\n\t\tresult += goodMove(k-y) + findIt(counter-1) * lastNum;\n\t\treturn result;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\n\t\tfor(int i =0; i<15; i++)\n\t\t\tdyn[i] = -1;\n\t\tdyn[0] = 0;\n\t\tint k = sc.nextInt();\n\t\twhile(k != 0)\n\t\t{\n\t\t\tSystem.out.println(k + \": \" + (k - goodMove(k)));\n\t\t\tk = sc.nextInt();\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_2715_1__1_1998_13", "golden_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\n\npublic class Main {\n\tstatic char w [];\n\tstatic int b [][] ;\n\tstatic char [][] t = {{'A' , 'U' , 'G' ,'C'},\n\t\t\t\t\t\t  {'U' , 'A' , 'C' ,'G'}};\n\tpublic static void main(String []args){\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint n = in.nextInt();\n\t\t\tif(n==0) break;\n\t\t\tw = in.next().toCharArray();\n\t\t\tb = new int[n+1][n+1];\n\t\t\tfor(int i = 0 ; i < n ; i++){\n\t\t\t\tArrays.fill(b[i], -1);\n\t\t\t}\n\t\t\tSystem.out.println(find(0, n));\n\t\t}\n\t}\n\t\n\tpublic static int find(int s , int e){\n\t\tif(b[s][e] != -1) return b[s][e];\n\t\tif(s<e-1){\n\t\t\tint max = 0;\n\t\t\t\tfor(int j = 0  ; j < 4 ; j++){\n\t\t\t\t\tif(w[s]==t[0][j]){\n\t\t\t\t\t\tfor(int i = s+2 ; i < e ; i++){\n\t\t\t\t\t\t\tif(w[i]==t[1][j]){\n\t\t\t\t\t\t\t\tint x = 0;\n\t\t\t\t\t\t\t\tx+=1;\n\t\t\t\t\t\t\t\tx+=find(s+1, i);\n\t\t\t\t\t\t\t\tx+=find(i+1,e);\n\t\t\t\t\t\t\t\tmax= Math.max(x, max);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tmax = Math.max(max, find(s+1,e));\n\t\t\tb[s][e]=max;\n\t\t\treturn max;\n\t\t}\n\t\tb[s][e]=0;\n\t\treturn 0;\n\t}\n}\n", "generated_code": "\nimport java.awt.Point;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        StringBuilder sb = new StringBuilder();\n        int t = in.nextInt();\n        in.nextLine();\n        for (int ii = 0; ii < t; ii++) {\n            String line = in.nextLine();\n            for (int j = 0; j < line.length();) {\n                char ch = line.charAt(j);\n                int sum = 1;\n                for (int i = j + 1; i < line.length(); i++) {\n                    if (line.charAt(i) == ch) {\n                        sum++;\n                    } else {\n                        break;\n                    }\n                }\n                String str = sum > 1 ? String.format(\"%d%c\", sum, ch) : String.format(\"%c\", ch);\n                sb.append(str);\n                j += sum;\n            }\n            sb.append(\"\\n\");\n        }\n        System.out.print(sb.toString());\n    }\n}", "score": 0.0}
{"id": "SHARE_5_1004_28__1_1660_20", "golden_code": "import java.math.BigInteger;\nimport java.util.*;\n\npublic class Main {\n\tstatic void clean(String s, Vector<String> vec){\n\t\tfor(int i=0;i<s.length();i++){\n\t\t\tif(s.substring(i, i+1).equals(\"*\") || s.substring(i, i+1).equals(\"+\")){\n\t\t\t\tvec.add(s.substring(0, i));\n\t\t\t\tvec.add(s.substring(i, i+1));\n\t\t\t\ts=s.substring(i+1);\n\t\t\t\ti=0;\t\t\t\n\t\t\t}\n\t\t}\n\t\tvec.add(s);\n\t}\n\t\n\tpublic static void main(String [] argv){\n\t\tScanner scanIn=new Scanner(System.in);\n\t\tint N;\n\t\tVector<String> vec=new Vector<String>();\n\t\tVector<String> vec2=new Vector<String>();\n\t\tN=scanIn.nextInt();\n\t\twhile(N>0){\n\t\t\tString str;\n\t\t\tstr=scanIn.next();\n\t\t\tString s=str;\n\t\t\tclean(s, vec);\n\t\t\t\n\t\t\tfor(int i=0;i<vec.size();i++){\n\t\t\t\tif(vec.elementAt(i).equals(\"*\")){\n\t\t\t\t\tBigInteger x=new BigInteger(vec.elementAt(i-1));\n\t\t\t\t\tBigInteger y=new BigInteger(vec.elementAt(i+1));\n\t\t\t\t\tString res=\"\" + x.multiply(y);\n\t\t\t\t\tvec.setElementAt(res, i);\n\t\t\t\t\tvec.remove(i+1);\n\t\t\t\t\tvec.remove(i-1);\n\t\t\t\t\ti--;\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tBigInteger minSum=new BigInteger(\"0\");\n\t\t\tfor(int i=0;i<vec.size();i++){\n\t\t\t\tif(!vec.elementAt(i).equals(\"+\")){\n\t\t\t\t\tBigInteger z=new BigInteger(vec.elementAt(i));\n\t\t\t\t\tminSum=minSum.add(z);\n\t\t\t\t}\t\t\t\t\t\n\t\t\t}\n\n\t\t\t\n\t\t\ts=str;\n\t\t\tclean(s,vec2);\n\t\t\tfor(int i=0;i<vec2.size();i++){\n\t\t\t\tif(vec2.elementAt(i).equals(\"+\")){\n\t\t\t\t\tBigInteger x=new BigInteger(vec2.elementAt(i-1));\n\t\t\t\t\tBigInteger y=new BigInteger(vec2.elementAt(i+1));\n\t\t\t\t\tString res=\"\" + x.add(y);\n\t\t\t\t\tvec2.setElementAt(res, i);\n\t\t\t\t\tvec2.remove(i+1);\n\t\t\t\t\tvec2.remove(i-1);\n\t\t\t\t\ti--;\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tBigInteger maxSum=new BigInteger(\"1\");\n\t\t\tfor(int j=0;j<vec2.size();j++){\n\t\t\t\tif(!vec2.elementAt(j).equals(\"*\")){\n\t\t\t\t\tBigInteger q=new BigInteger(vec2.elementAt(j));\n\t\t\t\t\tmaxSum=maxSum.multiply(q);\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.print(\"The maximum and minimum are \");\n\t\t\tSystem.out.print(maxSum);\n\t\t\tSystem.out.print(\" and \");\t\t\t\n\t\t\tSystem.out.print(minSum);\n\t\t\tSystem.out.println(\".\");\n\t\t\t\n\t\t\tvec.clear();\n\t\t\tvec2.clear();\n\t\t\t\n\t\t\tN--;\n\t\t}\n\t\t\n\t\tscanIn.close();\n\t\t\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\nclass mem{\n    String n;\n    int s;\n    int p;\n    }\npublic class Main {\n    public static void main(String[] args){\n        Scanner in=new Scanner(System.in);\n        int n=in.nextInt();\n        in.nextLine();\n        String s;\n        String[]l=new String[9];\n        int[]a=new int[4];\n        int[]b=new int[4];\n        int x=0,y=0;\n        String na=\"\";int p=0;int so=0;\n        for(int i=0;i<n;i++){\n            s=in.nextLine();\n            l=s.split(\" \");\n            for(int j=0,k=1;j<4;j++,k=k+2){\n                a[j]=Integer.parseInt(l[k]);\n                b[j]=Integer.parseInt(l[k+1]);\n            }\n            for(int j=0;j<4;j++)\n                if(b[j]!=0)\n                    x++;\n            for(int j=0;j<4;j++)\n                if(a[j]!=0&&b[j]!=0)\n                    y=y+(a[j]-1)*20+b[j];\n            if(i==0){\n                so=x;na=l[0];p=y;\n            }\n            else{\n                if(x>so){\n                    so=x;na=l[0];p=y;\n                }\n                else if(x==so && y<p){\n                    na=l[0];p=y;\n                }\n            }\n            x=0;y=0;\n        }\n        System.out.println(na+\" \"+so+\" \"+p);\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1018_82__1_1018_56", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int TestCase = 1;\n        int aScore = 0, bScore = 0;\n        TestCase = input.nextInt();\n        while (TestCase != 0) {\n            int[] aNumber = new int[TestCase];\n            int[] bNumber = new int[TestCase];\n            for (int i = 0 ; i < TestCase ; i++){\n                aNumber[i] = input.nextInt();\n            }\n            for (int i = 0 ; i < TestCase ; i++){\n                bNumber[i] = input.nextInt();\n            }\n            for (int i = 0 ; i < TestCase ; i++){\n                if ((aNumber[i] == 1 && bNumber[i] == 2)) aScore += 6;\n                else if (bNumber[i] == 1 && aNumber[i] == 2) bScore += 6;\n                else if ((bNumber[i] - aNumber[i]) == 1) aScore += (bNumber[i] + aNumber[i]);\n                else if ((aNumber[i] - bNumber[i]) == 1) bScore += (bNumber[i] + aNumber[i]);\n                else if (aNumber[i] > bNumber[i]) aScore += aNumber[i];\n                else if (aNumber[i] < bNumber[i]) bScore += bNumber[i];\n            }\n            if (TestCase != 0) {\n                System.out.println(\"A has \" + aScore + \" points.\" + \" B has \" + bScore + \" points.\");\n                aScore = 0; bScore = 0;\n                TestCase = input.nextInt();\n                if (TestCase != 0) System.out.println();\n            }\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\n\nclass Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tboolean flag = false;\n\t\twhile (true) {\n\t\t\tint x = sc.nextInt();\n\t\t\tif(x==0)\n\t\t\t\tbreak;\n\t\t\tint[] arr1 = new int[x];\n\t\t\tint[] arr2 = new int[x];\n\t\t\tint aPoint = 0;\n\t\t\tint bPoint = 0;\n\t\t\tfor (int i = 0; i < x; i++) {\n\t\t\t\tarr1[i] = sc.nextInt();\n\t\t\t}\n\t\t\tfor (int i = 0; i < x; i++) {\n\t\t\t\tarr2[i] = sc.nextInt();\n\t\t\t}\n\t\t\tfor (int i = 0; i < x; i++) {\n\t\t\t\tif (arr1[i] > arr2[i]) {\n\t\t\t\t\tif (arr1[i] + arr2[i] == 3) {\n\t\t\t\t\t\tbPoint += 6;\n\t\t\t\t\t} else if (arr1[i] - arr2[i] == 1) {\n\t\t\t\t\t\tbPoint += arr1[i] + arr2[i];\n\t\t\t\t\t} else {\n\t\t\t\t\t\taPoint += arr1[i];\n\t\t\t\t\t}\n\t\t\t\t} else if (arr1[i] < arr2[i]) {\n\t\t\t\t\tif (arr1[i] + arr2[i] == 3) {\n\t\t\t\t\t\taPoint += 6;\n\t\t\t\t\t} else if (arr2[i] - arr1[i] == 1) {\n\t\t\t\t\t\taPoint += arr2[i] + arr1[i];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbPoint += arr2[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag){\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t\tflag=true;\n\t\t\tSystem.out.println(\"A has \" + aPoint + \" points. B has \" + bPoint\n\t\t\t\t\t+ \" points.\");\n\t\t\t\n\t\t}\n\t\tsc.close();\n\t\t\n\t\t\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_132__1_1001_222", "golden_code": "/**\n * 1001. A+B\n * Calculate a + b\n * \n * INPUT\n * The input will consist of a series of pairs of integers a and b,separated by a space, one pair of integers per line.\n * you should read the input until EOF.\n * \n * OUTPUT\n * For each pair of input integers a and b you should output the sum of a and b in one line,\n * and with one line of output for each line in input.\n * \n * @link http://sharecode.ir/problemset/view/1001\n */\n\nimport java.io.*;\nimport java.util.Scanner;\n\npublic class Main {\n\t\n\tint solve(int a, int b) {\n\t\treturn a + b;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\tMain program = new Main();\n\t\t\n\t\twhile( in.hasNext() ) {\n\t\t\tout.println( program.solve( in.nextInt(), in.nextInt() ) );\n\t\t}\n\t\t\n\t\tout.flush();\n\t}\n\t\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n   \n    Scanner in = new Scanner(System.in);\n    while(in.hasNext()){\n    int a = in.nextInt();\n    \n    int b = in.nextInt();\n        System.out.println(a+b);\n    }\n    \n    \n    \n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1656_41__1_1656_61", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tArrayList<Integer> al = new ArrayList<Integer>();\n\t\twhile (sc.hasNext()) {\n\t\t\tint next = sc.nextInt();\n\t\t\tif (next == -1)\n\t\t\t\tbreak;\n\t\t\tif (next == 0) {\n\t\t\t\tSystem.out.print(count(al)+\"\\n\");\n\t\t\t\tal = new ArrayList<Integer>();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tal.add(next);\n\t\t}\n\n\t}\n\n\tpublic static int count(ArrayList<Integer> integers) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < integers.size(); i++) {\n\t\t\tint thisss = integers.get(i);\n\t\t\tfor (int j = i; j < integers.size(); j++) {\n\t\t\t\tint that = integers.get(j);\n\t\t\t\tif (thisss ==( 2 * that) || that == (2 * thisss)) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n", "generated_code": "\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]){\n        int x=1,t=0,a=0;\n        boolean tag = false;\n        ArrayList<Integer>m=new ArrayList<Integer>();\n        ArrayList<Integer>n=new ArrayList<Integer>();\n        Scanner in= new Scanner(System.in);\n         a=in.nextInt();\n        while(a!=-1){\n            m.add(a);\n            n.add(a*2);\n            x=a;\n            while(x!=0){\n            x=in.nextInt();\n            m.add(x);\n            n.add(x*2);\n            }\n            for(int i=0;i<m.size();i++){\n                for(int j=0;j<n.size();j++){\n                    if(m.get(i)==n.get(j)){\n                        t++;\n                    }\n                        else \n                             continue; \n                               \n                    }\n                }\n       \n            System.out.println(t-1);\n            a=in.nextInt();\n            t=0;\n            m.clear();\n            n.clear();\n           }\n        \n    }  \n    } \n\n", "score": 1.0}
{"id": "SHARE_1_2121_49__1_2124_33", "golden_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scanner = new Scanner(System.in );\n\n\t\twhile(scanner.hasNext())\n\t\t{\n\t\t\tint n = scanner.nextInt();\n\t\t\tif(n==1 || n==2)\n\t\t\t{\n\t\t\t\tSystem.out.println(1);\n\n\t\t\t}else{\n\t\t\t\tBigInteger a=BigInteger.ONE;\n\t\t\t\tBigInteger b=BigInteger.ONE;\n\t\t\t\tBigInteger sum=BigInteger.ZERO;\n\t\t\t\tfor (int i = 2; i<n;i++) {\n\t\t\t\t\tsum=a.add(b);\n\t\t\t\t\ta=b;\n\t\t\t\t\tb=sum;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(sum);\n\t\t\t}\n\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        \n        Scanner input=new Scanner(System.in);\n        \n        String plainText=input.nextLine();\n        String subText=input.nextLine();\n        \n        ArrayList<Character> plain=new ArrayList();\n        ArrayList<Character> sub=new ArrayList();\n        \n        for (int i = 0; i < plainText.length(); i++) {\n            if(!plain.contains(plainText.charAt(i))){\n                plain.add(plainText.charAt(i));\n                sub.add(subText.charAt(i));\n            }\n        }\n        \n       \n        String line,newLine;\n        ArrayList<String> newLines=new ArrayList();\n        char ch;\n        while(input.hasNext()){\n            newLine=\"\";\n            //input.nextLine();        \n            \n            line=input.nextLine();\n            if(line.length()!=0){\n                for (int i = 0; i < line.length(); i++) {\n                    ch=line.charAt(i);\n                    if(plain.contains(ch))\n                        newLine+=sub.get(plain.indexOf(ch));\n                    else\n                        newLine+=ch;\n                }\n                newLines.add(newLine);\n            }\n        }\n        System.out.println(subText);\n        System.out.println(plainText);\n        for ( String lines : newLines) \n            System.out.println(lines);\n        \n      \n       \n    }\n}", "score": 0.0}
{"id": "SHARE_1_1656_30__1_1656_29", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    static void calculate( int arry[], int counter){\n        int i= 0;\n        int javab= 0;\n        while( i< counter){\n            for( int j= 0; j< counter; j++){\n                if( arry[j]== 2*arry[i])\n                    javab++;\n            }\n            i++;\n        }\n       System.out.println( javab);\n    }\n    static Scanner in= new Scanner( System.in);\n    public static void main(String[] args) {\n        String st=\"in\";\n        int i= 0;\n        int arry[]= new int[15];\n        while(!st.equals(\"-1\")){\n            st= in.next();\n            if( st.equals(\"0\"))           {\n                calculate( arry, i);\n                i = 0;\n            }\n            else{\n                arry[i]= Integer.parseInt(st);\n                i++;\n            }\n        }       \n    }\n}\n", "generated_code": "import java.util.Scanner;\nimport java.util.Arrays;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        \n        Scanner input = new Scanner( System.in );\n    \n        int[] list = new int[16];\n        int i, cnt = 0;\n        \n        list[0] = input.nextInt();\n        while( list[0] != -1 ){\n        \n            for( i = 1; list[i-1] != 0; i++ )\n                list[i] = input.nextInt();\n                \n            Arrays.sort( list, 0, i - 1 );\n        \n            cnt = 0;\n            for( int l : list ){   \n                if( l == 0)\n                    break;\n           \n                if( Arrays.binarySearch( list, 0, i, l * 2 ) >= 0 )\n                    cnt++;\n            }\n            System.out.println( cnt );\n            Arrays.fill( list, 0);\n            list[0] = input.nextInt();\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_5_1009_14__5_1009_5", "golden_code": "import java.io.*;\nimport java.util.*;\npublic class Main {\n\tpublic static void get_input(){\n\t\tArrayList<Integer> cards=new ArrayList<Integer>();\n\t\tint testcaseno;\n\t\tint cardsno;\n\t\tint card;\n\t\tint minimum=0;\n\t\tString allcards;\n\t\tScanner in =new Scanner(System.in);\n\t\ttestcaseno=Integer.parseInt(in.nextLine());\n\t\tfor(int i=0;i<testcaseno;i++){\n\t\t\tcardsno=(in.nextInt());\n\t\t\tcards.clear();\n\t\t\tfor(int l=0;l<cardsno;l++){\n\t\t\t\tcard=in.nextInt();\n\t\t\tcards.add(card);\t\n\t\t\t}\n\t\t\tint matrix[][] =new int [cards.size()][cards.size()];\n\t\t\tfor(int y=0;y<cards.size();y++){\n\t\t\t\tfor(int k=y;k>=0;k--){\n\t\t\t\t\tif(y==k || y==k+1){\n\t\t\t\t\t\tmatrix[k][y]=0;\n\t\t\t\t\t\tcontinue ;\n\t\t\t\t\t}\n\t\t\t\t\tminimum= 2000000000;\t\t\n\t\t\t\t\tfor(int l=k+1;l<y;l++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif((matrix[k][l]+matrix[l][y]+cards.get(k)*cards.get(l)*cards.get(y))<minimum){\n\t\t\t\t\t\t\tminimum=matrix[k][l]+matrix[l][y]+cards.get(k)*cards.get(l)*cards.get(y);\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tmatrix[k][y]=minimum;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(matrix[0][cards.size()-1]);\n\t\t\t\n\t\t}\n\t}\n\tpublic static void main(String[] args) {\n\tMain.get_input();\n\t}\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\tstatic int[] card;\n\tstatic int[][] dp;\n\t\n\tstatic void dpFunc (){\n\t\tint j;\n\t\tint temp;\n\t\tfor (int i = 0; i<card.length-1 ; i++)\n\t\t\tdp[i][i+1]=0;\n\t\tfor (int l = 3; l<=card.length ; l++){\n\t\t\tfor(int i = 0; i<=card.length-l; i++){\n\t\t\t\tj=i+l-1;\n\t\t\t\tdp[i][j]=999999999;\n\t\t\t\tfor (int k=i+1 ; k<j ; k++){\n\t\t\t\t\ttemp = dp[i][k]+dp[k][j]+(card[i]*card[k]*card[j]);\n\t\t\t\t\tif (temp<dp[i][j])\n\t\t\t\t\t\tdp[i][j] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\n\t}\n\tpublic static void main(String[] args) {\n\t\tint num=0;\n\t\tScanner in = new Scanner(System.in);\n\t\tnum = in.nextInt();\n\t\tfor (int i = 0; i<num; i++) {\n\t\t\tint n = in.nextInt();\n\t\t\tcard = new int[n];\n\t\t\tdp = new int[n][n];\n\t\t\tfor (int j = 0; j < n; j++)\n\t\t\t\tcard[j]=in.nextInt();\n\t\t\tdpFunc();\n\t\t\tSystem.out.println(dp[0][n-1]);\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1006_63__1_1006_51", "golden_code": "import java.util.Scanner;\npublic class Main{\n    public static void main(String[] args){\n    Scanner s = new Scanner(System.in);\n            while (s.hasNext()) {\n                  double d=s.nextDouble();\n                  if(d==0)\n                      break;\n    double sum=0;\n    for(int i=2;i<Integer.MAX_VALUE;i++){\n        sum+=1.0/i;if(sum>=d){\n            System.out.println(i-1+\" card(s)\");\n            break;\n        }\n    }}}}", "generated_code": "import java.util.Scanner;\n\npublic class Main\n{\n\tpublic static void main(String [] args)\n\t{\n\t\tScanner in = new Scanner(System.in);\n\n\t\tdouble want;\n\n\t\twhile((want = in.nextDouble()) > 0)\n\t\t{\n\t\t\tint a = 1;\n\t\t\tdouble calc = 0;\n\n\t\t\twhile(calc < want)\n\t\t\t\tcalc += 1.0/++a;\n\n\t\t\tSystem.out.println(a-1+\" card(s)\");\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1149_3__1_1149_0", "golden_code": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n//package main;\n\nimport java.util.Scanner;\n\n/**\n *\n * @author ahmad\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner sc = new Scanner(System.in);\n        while (sc.hasNext()) {\n            String s = sc.next();\n            int i = 0, j = s.length() - 1;\n            boolean mir = true;\n            boolean pal = true;\n            while (i < j) {\n                if (s.charAt(i) == s.charAt(j)) {\n                    i++;\n                    j--;\n                } else {\n                    pal = false;\n                    break;\n                }\n            }\n            i = 0;\n            j = s.length() - 1;\n            while (i < j) {\n                if (s.charAt(i) == 'A' && s.charAt(j) == 'A') {\n                } else if (s.charAt(i) == 'M' && s.charAt(j) == 'M') {\n                } else if (s.charAt(i) == 'A' && s.charAt(j) == 'A') {\n                } else if (s.charAt(i) == 'Z' && s.charAt(j) == '5') {\n                } else if (s.charAt(i) == '5' && s.charAt(j) == 'Z') {\n                } else if (s.charAt(i) == '2' && s.charAt(j) == 'S') {\n                } else if (s.charAt(i) == 'S' && s.charAt(j) == '2') {\n                } else if (s.charAt(i) == 'O' && s.charAt(j) == 'O') {\n                } else if (s.charAt(i) == '1' && s.charAt(j) == '1') {\n                } else if (s.charAt(i) == 'E' && s.charAt(j) == '3') {\n                } else if (s.charAt(i) == '3' && s.charAt(j) == 'E') {\n                } else if (s.charAt(i) == 'H' && s.charAt(j) == 'H') {\n                } else if (s.charAt(i) == 'T' && s.charAt(j) == 'T') {\n                } else if (s.charAt(i) == 'I' && s.charAt(j) == 'I') {\n                } else if (s.charAt(i) == 'U' && s.charAt(j) == 'U') {\n                } else if (s.charAt(i) == 'J' && s.charAt(j) == 'L') {\n                } else if (s.charAt(i) == 'L' && s.charAt(j) == 'J') {\n                } else if (s.charAt(i) == 'V' && s.charAt(j) == 'V') {\n                } else if (s.charAt(i) == '8' && s.charAt(j) == '8') {\n                } else if (s.charAt(i) == 'W' && s.charAt(j) == 'W') {\n                } else if (s.charAt(i) == 'X' && s.charAt(j) == 'X') {\n                } else {\n                    mir = false;\n                    break;\n                }\n                i++;\n                j--;\n            }\n            if(i == j){\n                if(s.charAt(i) == 'Y' || s.charAt(i) == 'A'|| s.charAt(i) == 'M'|| s.charAt(i) == 'W'|| s.charAt(i) == 'O'|| s.charAt(i) == '1'|| s.charAt(i) == 'H'|| s.charAt(i) == 'T'|| s.charAt(i) == 'I'|| s.charAt(i) == 'U'|| s.charAt(i) == 'V'|| s.charAt(i) == '8'|| s.charAt(i) == 'X'){\n                    \n                }else{\n                    mir = false;\n                }\n            }\n            if (mir && pal) {\n                System.out.println(s + \" -- is a mirrored palindrome.\\n\");\n            } else if (mir) {\n                System.out.println(s + \" -- is a mirrored string.\\n\");\n            } else if (pal) {\n                System.out.println(s + \" -- is a regular palindrome.\\n\");\n            } else {\n                System.out.println(s + \" -- is not a palindrome.\\n\");\n            }\n        }\n\n    }\n\n}\n", "generated_code": "import java.util.*;\n\npublic class Main{\n\tstatic TreeMap<Character,Character> map = new TreeMap<Character,Character>();\n\t\n\tpublic static void main(String[] args){\n\t\tScanner s = new Scanner(System.in);\n\t\tchar[] arr = {'A',0,0,0,'3',0,0,'H','I','L',0,'J','M',0,'O',0,0,\n\t\t\t0,'2','T','U','V','W','X','Y','5','1','S','E',0,'Z',0,0,'8',0};\n\t\tfor(int i=0;i<26;i++){\n\t\t\tmap.put((char)('A'+i),arr[i]);\n\t\t}\n\t\tfor(int i=26;i<35;i++){\n\t\t\tmap.put((char)('1'+(i-26)),arr[i]);\n\t\t}\n\t\twhile(s.hasNext()){\n\t\t\tString str = s.next();\n\t\t\tboolean regular = isRegular(str);\n\t\t\tboolean mirror = isMirror(str);\n\t\t\tString res=str+\" -- \";\n\t\t\tif(regular && mirror){\n\t\t\t\tres += \"is a mirrored palindrome.\";\n\t\t\t}else if(regular){\n\t\t\t\tres += \"is a regular palindrome.\";\n\t\t\t}else if(mirror){\n\t\t\t\tres += \"is a mirrored string.\";\n\t\t\t}else{\n\t\t\t\tres += \"is not a palindrome.\";\n\t\t\t}\n\t\t\tSystem.out.println(res);\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\t\n\tstatic boolean isRegular(String str){\n\t\tString tmp = new StringBuilder(str).reverse().toString();\n\t\treturn tmp.equals(str);\n\t}\n\t\n\tstatic boolean isMirror(String str){\n\t\tString tmp = new StringBuilder(str).reverse().toString();\n\t\tboolean res=true;\n\t\tfor(int i=0;i<tmp.length();i++){\n\t\t\tchar first = map.get(str.charAt(i));\n\t\t\tres &= (first == tmp.charAt(i));\n\t\t}\n\t\treturn res;\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2634_5__1_2634_2", "golden_code": "\nimport java.util.*;\n\npublic class Main {\n\n   public static void main(String[] args) {\n      Scanner in = new Scanner(System.in);\n      while (in.hasNext()) {\n         long n = in.nextLong(), k = 0;\n         HashSet<Character> d = new HashSet<Character>();\n         while (d.size() < 10) {\n            k++;\n            for (char c : Long.toString(n * k).toCharArray()) {\n               d.add(c);\n            }\n         }\n         System.out.println(k);\n      }\n   }\n}", "generated_code": "import java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.Queue;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.io.BufferedReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.io.InputStream;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tScanner scan = new Scanner(System.in);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n}\n\nclass TaskC {\n\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile (scan.hasNextInt()) {\n\t\t\tlong n = scan.nextLong(), k = 0;\n\t\t\tHashSet<Character> nums = new HashSet<Character>();\n\t\t\twhile (true) {\n\t\t\t\tk++;\n\t\t\t\tfor (char c : Long.valueOf(n * k).toString().toCharArray())\n\t\t\t\t\tnums.add(c);\n\t\t\t\tif (nums.size() > 9) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tout.println(k);\n\t\t}\n\t}\n}\n\nclass InputReader {\n\tBufferedReader br;\n\tStringTokenizer st;\n\n\tpublic InputReader(InputStream in) {\n\t\tbr = new BufferedReader(new InputStreamReader(in));\n\t\tst = null;\n\t}\n\n\tpublic String next() {\n\t\twhile (st == null || !st.hasMoreTokens()) {\n\t\t\ttry {\n\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn st.nextToken();\n\t}\n\n\tpublic int nextInt() {\n\t\treturn Integer.parseInt(next());\n\t}\n\n\tpublic long nextLong() {\n\t\treturn Long.parseLong(next());\n\t}\n\n\tpublic float nextFloat() {\n\t\treturn Float.parseFloat(next());\n\t}\n\n\tpublic double nextDouble() {\n\t\treturn Double.parseDouble(next());\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2735_5__1_2223_4", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n\n        int t = in.nextInt();\n        for (int i = 0; i < t; i++) {\n            int n = in.nextInt();\n            int m = in.nextInt();\n            \n            int [] row = new int[n ];\n            int []cl = new int[n ];\n            int []r1 = new int[n+m ];\n            int []r2 = new int[n+m ];\n            int[][] a = new int[n][m];\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < m; k++) {\n                    a[j][k] = in.nextInt();\n                    r1[j+k] += a[j][k];\n                    row[j] += a[j][k];\n                    cl[k] += a[j][k];\n                    r2[n-(j - k )] += a[j][k];\n                    \n                    \n                }\n            }\n            int max = 0;\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < m; k++) {\n                    max = Math.max(max, r1[j+k]+ r2[n-(j - k )]+row[j] +cl[k] -3 *a[j][k]);\n\n                }\n            }\n            System.out.println(max);\n            \n\n        }\n\n\n\n\n\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner s=new Scanner(System.in);\n        while(true){\n            int max=11,min=0;\n            int fin=0;\n            int x=s.nextInt();\n            s.nextLine();\n            if(x==0){\n                break;\n            }\n            while(true){\n                String str=s.nextLine();\n                if(str.equals(\"too high\")){\n                    if(max>x)\n                        max=x;\n                }else if(str.equals(\"too low\")){\n                    if(min<x)\n                        min=x;\n                }else if(str.equals(\"right on\")){\n                    fin=x;\n                    break;\n                }\n                x=s.nextInt();\n                s.nextLine();\n            }\n            if(min+1>=max || max==1 || min==10 || fin<=min || fin>=max){\n                System.out.println(\"Stan is dishonest\");\n            }else{\n                System.out.println(\"Stan may be honest\");\n            }\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_101071_13__1_2175_22", "golden_code": "\nimport java.util.Scanner;\nimport java.util.TreeSet;\n\npublic class Main {\n    static boolean cont = true;\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        lbl :for (int i = 0; i < n; i++) {\n            cont = true;\n            TreeSet<MyObject> set = new TreeSet<MyObject>();\n            int m = s.nextInt();\n            for (int j = 0;j < m; j++) {\n                String str = s.next();\n                if(cont)\n                    set.add(new MyObject(str));\n            }\n            if(cont)\n                System.out.println(\"YES\");\n            else \n                System.out.println(\"NO\");\n        }\n    }\n\n    static class MyObject implements Comparable<MyObject> {\n\n        String number;\n\n        @Override\n        public int compareTo(MyObject o) {\n            if (this != o && (number.startsWith(o.number) || o.number.startsWith(number))) {\n                cont = false;\n                return 0;\n            } else {\n                return number.compareTo(o.number);\n            }\n        }\n\n        public MyObject(String number) {\n            this.number = number;\n        }\n    }\n}", "generated_code": "import java.util.*;\nclass Main{\n\tpublic static void main(String args[]){\n\t\tScanner A = new Scanner(System.in);\n\t\twhile(A.hasNextInt()){\n\t\t\tint n = 0 ;\n\t\t\tint a[] = new int[A.nextInt()];\n\t\t\tint x = a.length ;\n\t\t\tint b[] = new int[x-1];\n\t\t\t\n\t\t\tfor(int i = 0 ; i < x ; i++)\n\t\t\t\ta[i] = A.nextInt();\n\t\t\tfor(int i = 0 ; i < x-1 ; i++)\n\t\t\t\tb[i] = Math.abs(a[i+1] - a[i]) ;\n\t\t\tArrays.sort(b) ;\n\n\t\t\tfor (int i = 0 ; i < x-1 ; i++ )\n\t\t\t\tif(b[i] == i+1)\n\t\t\t\t\tn++ ;\n\t\t\tif(n == x - 1 )\n\t\t\t\tSystem.out.println(\"Jolly\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"Not jolly\");\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2733_8__1_108014_8", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tint inputNum = scan.nextInt();\n\t\tint inputLegnth;\n\t\tint[] sequence;\n\t\tArrayList<Integer> newSequence;\n\n\t\tint s = 0;\n\t\tfor (int i = 0; i < inputNum; i++) {\n\t\t\tinputLegnth = scan.nextInt();\n\t\t\tsequence = new int[inputLegnth];\n\t\t\tnewSequence = new ArrayList<Integer>();\n\t\t\tfor (int j = 0; j < inputLegnth; j++) {\n\t\t\t\ts = sequence[j] = scan.nextInt();\n\t\t\t\tif (j != 0) {\n\t\t\t\t\ts = sequence[j] - sequence[j - 1];\n\t\t\t\t}\n\t\t\t\tfor (int j2 = 0; j2 < s; j2++) {\n\t\t\t\t\tnewSequence.add(1);\n\t\t\t\t}\n\t\t\t\tnewSequence.add(-1);\n\n\t\t\t}\n\t\t\t// System.out.println(newSequence);\n\t\t\tfor (int j = 0; j < inputLegnth; j++) {\n\t\t\t\tint start = 0;\n\t\t\t\tint finish = 0;\n\t\t\t\tfor (int j2 = 0; j2 < 2 * inputLegnth; j2++) {\n\t\t\t\t\tif (newSequence.get(j2).equals(-1)) {\n\t\t\t\t\t\tnewSequence.set(j2, 0);\n\t\t\t\t\t\tfinish = j2;\n\t\t\t\t\t\tfor (int k = j2 - 1; k >= 0; k--) {\n\t\t\t\t\t\t\tif (newSequence.get(k).equals(+1)) {\n\t\t\t\t\t\t\t\tnewSequence.set(k, 0);\n\t\t\t\t\t\t\t\tstart= k;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t\t} else\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n//\t\t\t\tSystem.out.println(newSequence);\n\t\t\t\tint n = 0;\n\t\t\t\tfor (int f = start + 1; f < finish; f++) {\n\t\t\t\t\tif (newSequence.get(f).equals(0)) {\n\t\t\t\t\t\tn++;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.print((n/2)+1 + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n public static void main(String args[]) {\n\t int N;\n\t Scanner scan= new Scanner(System.in);\n\t N = scan.nextInt();\n\t String s;\n\t s = scan.nextLine();\n\t for(int i = 0; i < N; ++i){\n\t\t long ans = 0;\n\t\t s = scan.nextLine();\n\t\t String[] temp = s.split(\"\\\\s+\");\n\t\t long[] num = new long[temp.length];\n\t\t for(int j = 0; j < temp.length; ++j){\n\t\t\t num[j] = Long.parseLong(temp[j]);\n\t\t\t }\n\t\t for(int j = 0; j < num.length; ++j)\n\t\t\t for(int k = 0; k<(num.length); ++k){\n\t\t\t\t if(k!=j){\n\t\t\t\t\tlong t=0;\n\t\t\t\t\t if(num[j]!=0 && num[k]!=0)\n\t\t\t\t\t {\t \tt =bmm(num[j], num[k]);\n\t\t\t\t\t }\n\t\t\t\t\t else if (num[j]==0 || num[k]==0){\n\t\t\t\t\t\tt= Math.max(num[j], num[k]);\n\t\t\t\t\t }\n\t\t\t\t\t if(t>ans)\n\t\t\t\t\t\t ans = t;}\n\t\t\t }\n\t\t System.out.println(ans);\n\t\t \n\t }\n }\n\nprivate static long bmm(long i, long j) {\n\tif(i<j){\n\t\tlong temp = i;\n\t\ti = j;\n\t\tj = temp;\n\t}\n\tif(j == 0)\n\t\treturn i;\n\tif(i%j == 0)\t\n\t\treturn j;\n\t\n\treturn bmm(j,i%j);\n}\n \n}\n", "score": 0.0}
{"id": "SHARE_1_106018_19__1_1659_22", "golden_code": "\nimport java.util.Scanner;\nimport java.util.TreeSet;\n\n\npublic class Main {\n    public static void main (String [] a){\n\n        Scanner s = new Scanner(System.in);\n        TreeSet<Integer> h=new TreeSet<Integer>();\n        int primes[]=new int[41538];\n        boolean bool = false;\n        int counter=1;\n        primes[0]=2;\n        h.add(2);\n        for (int i=3 ; i<500000 ; i+=2){\n                bool=false;\n                if (i%2==0)\n                    break;\n                B:for (int j=3 ; j<=Math.sqrt(i) ; j+=2)\n                    if (i%j==0){\n\n                        bool=true;\n                        break B;\n                    }\n\n                if(!bool){\n                    primes[counter]=i;\n                    h.add(i);\n                    counter++;\n                }\n\n            }\n        while (s.hasNext()){\n            int n=s.nextInt();\n            boolean boolm = false;\n\n\n            A:for (int i=0 ; i<primes.length ; i++ ){\n                if (n%primes[i]==0){\n                    int dive=n/primes[i];\n                    if (h.contains(dive)){\n                        boolm=true;\n                        break A;\n                    }\n\n                }\n            }\n\n\n            if (boolm)\n                System.out.println(\"Yes\");\n            else\n                System.out.println(\"No\");\n\n        }\n    }\n }\n", "generated_code": "import java.io.File;\nimport java.io.*;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        double Num=0;\n        String matn=\"\";\n        double [] s=new double[110];\n        int i=0, count=0;\n        while(Num != 999)\n                {\n                    Num=input.nextDouble();\n                    s[i]=Num;\n                    i++;\n                    count++;\n                }\n        for(int j=0;j<count-2;j++)\n        System.out.printf(\"%.2f\\n\",(s[j+1]-s[j]));\n        if( Num ==999)\n            System.out.println(\"End of Output\");\n        \n    }\n}", "score": 0.0}
{"id": "SHARE_1_2811_37__1_1006_32", "golden_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int[] l1;\n        int[] l2;\n        int num = input.nextInt();\n        int n;\n        int m;\n        for (int i = 0; i < num; i++) {\n            n = input.nextInt();\n            m = input.nextInt();\n            l1 = new int[n];\n            l2 = new int[m];\n            for (int j = 0; j < n; j++) {\n                l1[j] = input.nextInt();\n            }\n            for (int k = 0; k < m; k++) {\n                l2[k] = input.nextInt();\n            }\n            for (int s = 0; s < l1.length; s++) {\n                for (int e = 0; e < l2.length; e++) {\n                    if (l1[s] == l2[e]) {\n                        l1[s] = 0;\n                    }\n                }\n            }\n            Arrays.sort(l1);\n            StringBuilder str = new StringBuilder();\n            for (int f = 0; f < l1.length; f++) {\n                if (l1[f] != 0) {\n                    str.append(l1[f]);\n                    str.append(\",\");\n                }\n            }\n            if (str.length() > 0)\n                str.delete(str.length() - 1, str.length());\n            System.out.println(str);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main \n{\n    public static void main(String[] args)\n    {\n        double sum = 0.00;\n        double number;\n        Scanner in = new Scanner(System.in);\n        number = in.nextDouble();\n        \n        while(number!=0.00)\n        {  \n            for(double i = 2.00 ; i < 277.00 ; i++)\n            {\n                if(number > sum)\n                    sum = sum + (1.00/i);\n                else\n                {\n                    int j = (int)(i-2);\n                    System.out.println(j + \" card(s)\");\n                    break;\n                }\n            }\n            sum = 0.00;\n            number= in.nextDouble();\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1018_6__1_1018_37", "golden_code": "import java.util.*;\nclass Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tint n=0,i,j,m,k,a=0,b=0,s=0;\n\t\tScanner scan = new Scanner(System.in);\n\t\tint[] f;\n\t\tf = new int[3000];\n\t\tint[] g;\n\t\tg = new int[3000];\n\t\twhile(scan.hasNextInt())\n\t\t{\n\t\t\ta = 0;\n\t\t\tb = 0;\n\t\t\tn = scan.nextInt();\n\t\t\t\tif((s!=0) && (n!=0))\n\t\t\t\t\tSystem.out.println();\n\t\t\tif(n==0)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tm = n;\n\t\t\tfor(i=0;i<m;i++)\n\t\t\t\tf[i] = scan.nextInt();\n\t\t\tfor(j=0;j<m;j++)\n\t\t\t\tg[j] = scan.nextInt();\n\t\t\tfor(k=0;k<m;k++)\n\t\t\t{\n\t\t\t\tif(f[k]-g[k]>1)\n\t\t\t\t\ta+=f[k];\n\t\t\t\tif(g[k]-f[k]>1)\n\t\t\t\t\tb+=g[k];\n\t\t\t\tif((f[k]-g[k]==1) && (f[k] != 2))\n\t\t\t\t\tb += f[k]+g[k];\n\t\t\t\tif((g[k]-f[k]==1) && (g[k] != 2))\n\t\t\t\t\ta += f[k]+g[k];\n\t\t\t\tif((f[k]-g[k]==1) && (f[k] == 2))\n\t\t\t\t\tb += 6;\n\t\t\t\tif((g[k]-f[k]==1) && (g[k] == 2))\n\t\t\t\t\ta += 6;\n\t\t\t\ts++;\n\t\t\t}\n\t\t\tif(n!=0)\n\t\t\t\tSystem.out.println(\"A has \"+a+\" points. B has \"+b+\" points.\");\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\n\nclass Main {\n    public static void main(String[] args){\n    Scanner scan = new Scanner(System.in);\n    int n=scan.nextInt();\n    int ca;\n    int cb;\n    while(n!=0){\n    \tca=0;\n    \tcb=0;\n    \tif(n!=0){\n    \tint[] a=new int[n];\n    \tint[] b=new int[n];\n    \tfor(int q=0;q<n;q++)\n    \t\ta[q]=scan.nextInt();\n    \tfor(int q=0;q<n;q++)\n    \t\tb[q]=scan.nextInt();\n    \tfor(int q=0;q<n;q++){\n    \t\tif(a[q]-b[q]>=2)\n    \t\t\tca+=a[q];\n    \t\telse{\n    \t\t\tif(a[q]-b[q]<=-2)\n        \t\t\tcb+=b[q];\n    \t\t\telse{\n    \t\t\t\tif(a[q]-b[q]==0)\n    \t\t\t\t{}\n    \t\t\t\telse{\n    \t\t\t\t\tif(a[q]-b[q]==1){\n    \t\t\t\t\t\tif(a[q]==2)\n    \t\t\t\t\t\t\tcb+=6;\n    \t\t\t\t\t\telse\n    \t\t\t\t\t\t\tcb=cb+a[q]+b[q];}\n    \t\t\t\t\telse{\n    \t\t\t\t\t\tif(a[q]-b[q]==-1){\n        \t\t\t\t\t\tif(b[q]==2)\n        \t\t\t\t\t\t\tca+=6;\n        \t\t\t\t\t\telse\n        \t\t\t\t\t\t\tca=ca+a[q]+b[q];}\n    \t\t\t\t\t}\n    \t\t\t\t\t\n    \t\t}\n    \t}\n    \t\n    \t\n    \t\n    \t\n    \t}\n    }\n\n   \n\n  System.out.println(\"A has \"+ca+\" points. B has \"+cb+\" points.\");\nn=scan.nextInt();\nif(n!=0){\n  System.out.println();}\n    \t}\n    \n    \n    \n    }}}", "score": 1.0}
{"id": "SHARE_1_1071_4__1_2732_20", "golden_code": "import java.util.*;\n\npublic class Main{\n\t\n\tstatic int[] nums;\n\tstatic int[][] dp;\n\tstatic int[][] path;\n\t\n\tpublic static void main(String[] args){\n\t\tScanner s = new Scanner(System.in);\n\t\tfor(int q=1;true;q++){\n\t\t\tint n = s.nextInt();\n\t\t\tif(n == 0)\n\t\t\t\tbreak;\n\t\t\tdp = new int[n+1][n+1];\n\t\t\tpath = new int[n+1][n+1];\n\t\t\tnums = new int[n+1];\n\t\t\tnums[0] = s.nextInt();\n\t\t\tfor(int i=1;i<n;i++){\n\t\t\t\tnums[i] = s.nextInt();\n\t\t\t\ts.nextInt();\n\t\t\t}\n\t\t\tnums[n] = s.nextInt();\n\t\t\tfunc(0,n);\n\t\t\tSystem.out.println(\"Case \"+q+\": \"+PrintPath(0,n));\n\t\t}\n\t}\n\t\n\tstatic int func(int s,int e){\n\t\tif(e-s <= 1)\n\t\t\treturn 0;\n\t\tif(dp[s][e] == 0){\n\t\t\tint res = Integer.MAX_VALUE;\n\t\t\tfor(int i=s+1;i<e;i++){\n\t\t\t\tint tmp = func(s,i)+func(i,e)+nums[s]*nums[i]*nums[e];\n\t\t\t\tif(tmp < res){\n\t\t\t\t\tres = tmp;\n\t\t\t\t\tpath[s][e] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdp[s][e] = res;\n\t\t}\n\t\treturn dp[s][e];\t\n\t}\n\t\n\tstatic String PrintPath(int s,int e){\n\t\tif(e - s <= 1)\n\t\t\treturn \"A\"+e;\n\t\treturn \"(\"+PrintPath(s,path[s][e])+\" x \"+PrintPath(path[s][e],e)+\")\";\t\t\n\t}\n}", "generated_code": "import java.util.Scanner;\n\n\npublic class Main \n{\n\tpublic static void main(String[] args) \n\t{\n\t\tScanner input = new Scanner(System.in);\n\t\tint number = input.nextInt();\n\t\tfor(int i = 0; i < number; i++)\n\t\t{\n\t\t\tint number1 = input.nextInt();\n\t\t\tint number2 = input.nextInt();\n//\t\t\tif(number1 == number2 && number1 == 0)\n//\t\t\t{\n//\t\t\t\tSystem.out.println(0);\n//\t\t\t}\n\t\t\tif(number1 == number2 && number1 == 1)\n\t\t\t{\n\t\t\t\tSystem.out.println(1);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(number1 == 3 && number2 == 1)\n\t\t\t{\n\t\t\t\tSystem.out.println(3);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif(number1 == number2)\n\t\t\t{\n\t\t\t\tif(number1 % 2 ==0)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(number1*2);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(number1*2 - 1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\telse if(number1 - number2 == 2)\n\t\t\t{\n\t\t\t\tif(number2 % 2 == 0)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(number2*2 + 2);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(number2*2 + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSystem.out.println(\"No Number\");\n\t\t\t}\n\t\t}\n\t\t\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1618_1__1_1462_1", "golden_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n \npublic class Main {\n \n    BigInteger[][] dp = new BigInteger[51][51];\n ////////////////////////\n    BigInteger go(int n, int y) {\n        if (y == 1)\n            return BigInteger.ONE;\n        if (n < y || y < 1)\n            return BigInteger.ZERO;\n        if(dp[n][y] != null) {\n            return dp[n][y];\n        }\n        return (dp[n][y] =\n            go(n-1, y).multiply(new BigInteger(\"\"+y))\n            .add(go(n-1, y-1).multiply(new BigInteger(\"\"+(2*n-y)))));\n    }\n \n    void run() {\n        Scanner cin = new Scanner(System.in);\n        int ntc = cin.nextInt();\n \n        for (int i = 0; i < ntc; ++i) {\n            int n = cin.nextInt();\n            int y = cin.nextInt();\n \n            System.out.println(go(n, y));\n        }\n    }\n \n    public static void main(String[] args) {\n        new Main().run();\n \n    }\n \n}", "generated_code": "\nimport java.util.Scanner;\n\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        StringBuilder sb = new StringBuilder(\"\");\n        while(true){\n            String s =in.nextLine();\n            if(s.equals(\"ENDOFINPUT\"))\n                break;\n            s = in.nextLine();\n            for (int i = 0; i < s.length(); i++) {\n                if(s.charAt(i)>='F' && s.charAt(i) <='Z')\n                    sb.append((char)(s.charAt(i)-5));\n                else if(s.charAt(i)>='A' && s.charAt(i) <='E')\n                    sb.append((char)(s.charAt(i)+21));\n                else\n                    sb.append(s.charAt(i));\n            }\n            in.nextLine();\n            sb.append(\"\\n\");\n        }\n        System.out.print(sb.toString());\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2732_42__1_2554_4", "golden_code": "import java.util.*;\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scan = new Scanner(System.in);\n        int t = scan.nextInt();\n        while(t-- > 0)\n        {\n            int x = scan.nextInt(), y = scan.nextInt();\n            if(x == y || x == y+2)\n                System.out.println(x%2 == 1 ? (x+y - 1) : (x+y));\n            else\n                System.out.println(\"No Number\");\n        }\n    }\n}\n", "generated_code": "import java.util.LinkedList;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        LinkedList<Model> models = input_analysis() ;\n        for(int temp=0 ; temp < models.size() ; temp++) {\n            evaluator(models.get(temp));\n            System.out.println(\"+++\");\n        }\n    }\n    //creates new mandatory feature\n    static boolean parents_checker(String [] features_name , int not_to_check)\n    {\n        for(int temp=0 ; temp <features_name.length  ; temp++) {\n            if (temp == not_to_check)\n                continue;\n            if (features_name[temp].equals(\"u\"))\n                return false;\n        }\n        return true;\n    }\n\n    static LinkedList<Model> input_analysis()\n    {\n        LinkedList<Model> moudles = new LinkedList<>();\n        String temp=\"\";\n        Scanner scan = new Scanner(System.in);\n        temp = scan.nextLine();\n        while ( !temp.equals(\"###\"))\n        {\n            LinkedList<Feature_defenition> feature_list = new LinkedList<>();\n            LinkedList <LinkedList<String>> expression_to_evaluate = new LinkedList<>();\n            while (!temp.equals(\"#\") ){\n                feature_list.add(feature_defenition_analysis(temp));\n                temp =scan.nextLine();\n            }\n            temp = scan.nextLine();\n            while(!temp.equals(\"##\")){\n                expression_to_evaluate.add(feature_to_evaluate_linkedlist_converter(temp.trim().replaceAll(\"\\\\s+\" , \"\").substring(1).split(\"[,{}]\")));\n                temp = scan.nextLine();\n            }\n            temp = scan.nextLine();\n            moudles.add(new Model(feature_list,expression_to_evaluate));\n        }\n        return moudles;\n    }\n    //it analysis the every moudle sentence componentd\n    static Feature_defenition feature_defenition_analysis(String temp){\n        String temp_type;\n        String[] temp_compontet;\n        if (temp.contains(\"|\"))\n        {\n            temp_type = \"or\";\n            temp_compontet = temp.trim().replaceAll(\"\\\\s+\" , \"\").split(\"[|=]\");\n        }\n        else if (temp.contains(\"^\"))\n        {\n            temp_type = \"xor\";\n            temp_compontet = temp.trim().replaceAll(\"\\\\s+\" , \"\").split(\"[/^=]\");\n        }\n        else\n        {\n            temp_type = \"mandatory\";\n            temp_compontet = temp.trim().replaceAll(\"\\\\s+\" , \"\").split(\"[+=]\");\n        }\n        return new Feature_defenition(temp_compontet,temp_type);\n    }\n\n\n    static void evaluator(Model model)\n    {\n        for(int temp2=0; temp2<model.featurs_to_evaluate_expressions.size() ; temp2++)\n        {\n            LinkedList<String> list_to_evaluate =  model.featurs_to_evaluate_expressions.get(temp2);\n            int root_index=Feature.name_finder(list_to_evaluate, model.root.name_getter());\n            if(root_index ==-1)\n                System.out.println(\"Invalid\");\n            else\n                list_to_evaluate.remove(root_index);\n            if( model.root.evaluate(list_to_evaluate) && root_index!=-1)\n            {\n                if(list_to_evaluate.size()==0)\n                    System.out.println(\"Valid\");\n                else\n                    System.out.println(\"Invalid\");\n            }\n            else if (root_index!=-1)\n                System.out.println(\"Invalid\");\n        }\n    }\n    static LinkedList<String> feature_to_evaluate_linkedlist_converter(String [] features){\n        LinkedList<String> result = new LinkedList<>();\n        for(String temp : features)\n            result.add(temp);\n        return result;\n    }\n}\n\nclass Model {\n    LinkedList<Feature_defenition> feature_defenitions = new LinkedList<>();\n    LinkedList<LinkedList<String>> featurs_to_evaluate_expressions = new LinkedList<>();\n    Feature root ;\n\n\n    Model(LinkedList<Feature_defenition> features, LinkedList<LinkedList<String>> expressions) {\n        this.featurs_to_evaluate_expressions = expressions;\n        this.feature_defenitions = features;\n\n        if (this.feature_defenitions.get(0).feature_type.equals(\"mandatory\"))\n            this.root = Mandatory_feature.mandatory_maker(feature_defenitions, 0);\n        else if (this.feature_defenitions.get(0).feature_type.equals(\"or\"))\n            this.root=Or_feature.Or_maker(this.feature_defenitions, 0);\n        else\n            this.root = Xor_feature.Xor_maker( this.feature_defenitions, 0 );\n    }\n}\n\nclass Xor_feature extends Feature {\n\n    LinkedList<Feature> Xor_sub_feature =new LinkedList<>() ;\n\n    public boolean evaluate(LinkedList<String> features_to_evaluate){\n        int name_index=0;\n        int number_of_features_in_list=0;\n        int Xor_found_feature_index=0;\n        for(int temp=0 ; temp<Xor_sub_feature.size() ; temp++) {\n            name_index = name_finder(features_to_evaluate, this.Xor_sub_feature.get(temp).name);\n            if (name_index != -1) {\n                number_of_features_in_list++;\n                features_to_evaluate.remove(name_index);\n                Xor_found_feature_index = temp;\n            }\n        }\n        if(number_of_features_in_list!=1)\n            return false;\n        if(! Xor_sub_feature.get(Xor_found_feature_index).evaluate(features_to_evaluate))\n            return false;\n        return true;\n    }\n\n    public Xor_feature(LinkedList<Feature> sub_features , String name){\n        super(name);\n        this.Xor_sub_feature = sub_features;\n    }\n\n\n    public static Feature Xor_maker (LinkedList<Feature_defenition> feature_defenition , int feature_index) {\n        LinkedList<Feature> XOR_sub_features = new LinkedList<>();\n        String [] feature_components_name_temp = feature_defenition.get(feature_index).feature_components_name;\n        for (int temp=1 ; temp < feature_components_name_temp.length ; temp++)\n        {\n            Feature feature_temp = feature_finder(feature_defenition ,feature_components_name_temp[temp] );\n            if (feature_temp == null)\n                feature_temp = new Basic_feature(feature_components_name_temp[temp]);\n            XOR_sub_features.add(feature_temp);\n        }\n        feature_defention_deleter(feature_defenition,feature_components_name_temp[0]);\n        return new Xor_feature(XOR_sub_features, feature_components_name_temp[0]);\n\n    }\n}\n\n\nclass Or_feature extends Feature {\n    LinkedList<Feature> Or_sub_features = new LinkedList<>() ;\n\n    public boolean evaluate(LinkedList<String> feautures_to_evaluate){\n        int feature_number=0;\n        for (int temp=0 ; temp < this.Or_sub_features.size() ; temp ++)\n        {\n            int name_index =  name_finder(feautures_to_evaluate, this.Or_sub_features.get(temp).name);\n            if (name_index!= -1) {\n                feautures_to_evaluate.remove(name_index);\n                if(! this.Or_sub_features.get(temp).evaluate(feautures_to_evaluate))\n                    return false;\n                feature_number++;\n            }\n        }\n        if(feature_number ==0)\n            return false;\n        return true;\n    }\n    public Or_feature(LinkedList<Feature> sub_features , String name)\n    {\n        super(name);\n        this.Or_sub_features = sub_features;\n    }\n\n\n    public static Feature Or_maker(LinkedList<Feature_defenition> feature_defenition , int feature_index){\n        LinkedList<Feature> OR_sub_features = new LinkedList<>();\n        String[] feature_components_name_temp = feature_defenition.get(feature_index).feature_components_name;\n        for (int temp=1 ; temp < feature_components_name_temp.length ; temp++)\n        {\n            Feature feature_temp = feature_finder(feature_defenition ,feature_components_name_temp[temp] );\n            if (feature_temp == null)\n                feature_temp = new Basic_feature(feature_components_name_temp[temp]);\n            OR_sub_features.add(feature_temp);\n        }\n        feature_defention_deleter(feature_defenition,feature_components_name_temp[0]);\n        return new Or_feature(OR_sub_features, feature_components_name_temp[0]);\n\n    }\n}\n\n\nclass Mandatory_feature extends Feature {\n\n    private LinkedList<Feature> mandatory_sub_feature = new LinkedList<>();\n    private LinkedList<Feature> optional_sub_feature = new LinkedList<>() ;\n    //function to evaluate a mandatory_type_object\n    public boolean evaluate(LinkedList<String> features_to_evaluate)\n    {\n        for(int temp=0 ; temp< this.mandatory_sub_feature.size() ; temp++)\n        {\n            // checks if the mandatory feature is on the features to evaluate list\n            int name_index =  name_finder(features_to_evaluate , this.mandatory_sub_feature.get(temp).name) ;\n            if (name_index==-1)\n                return false;\n            features_to_evaluate.remove(name_index);\n            if(!this.mandatory_sub_feature.get(temp).evaluate(features_to_evaluate))\n                return false;\n        }\n        for (int temp=0 ; temp<this.optional_sub_feature.size() ; temp++)\n        {\n            int name_index = name_finder(features_to_evaluate , this.optional_sub_feature.get(temp).name);\n            if ( name_index != -1)\n            {\n            \tfeatures_to_evaluate.remove(name_index);\n                if(! this.optional_sub_feature.get(temp).evaluate(features_to_evaluate))\n                    return false;\n               \n            }\n        }\n        return true;\n    }\n\n    public Mandatory_feature(LinkedList<Feature> mandatory_sub_feature , LinkedList<Feature> optional_sub_features , String name){\n        super(name);\n        this.mandatory_sub_feature = mandatory_sub_feature;\n        this.optional_sub_feature = optional_sub_features;\n    }\n\n    public static Feature mandatory_maker(LinkedList<Feature_defenition> feature_defenition , int feature_index){\n        LinkedList<Feature> mandatory_sub_features = new LinkedList<>();\n        LinkedList <Feature> optional_sub_features = new LinkedList<>();\n        String[] feature_components_name_temp = feature_defenition.get(feature_index).feature_components_name;\n        for (int temp=1 ; temp < feature_components_name_temp.length ; temp++)\n        {\n            int optional_indicator=0;\n            if (feature_components_name_temp[temp].contains(\"?\"))\n            {\n                optional_indicator++;\n                feature_components_name_temp[temp]= feature_components_name_temp[temp].substring(1);\n            }\n            Feature feature_temp = feature_finder(feature_defenition ,feature_components_name_temp[temp] );\n            if (feature_temp == null)\n                feature_temp = new Basic_feature(feature_components_name_temp[temp]);\n            if (optional_indicator==1)\n                optional_sub_features.add(feature_temp);\n            else\n                mandatory_sub_features.add(feature_temp);\n        }\n        feature_defention_deleter(feature_defenition,feature_components_name_temp[0]);\n        return new Mandatory_feature(mandatory_sub_features,optional_sub_features,feature_components_name_temp[0]);\n    }\n\n}\n\n\nclass Feature_defenition {\n    public String[] feature_components_name ;\n    public String feature_type ;\n    public Feature_defenition(String[] names , String type){\n        this.feature_components_name = names;\n        this.feature_type = type;\n    }\n\n}\n\n\nabstract class Feature {\n    String name;\n    public abstract boolean evaluate(LinkedList<String> features_to_evaluate);\n\n    public Feature(String name){\n\n        this.name = name;\n    }\n\n    public String name_getter() { return this.name;}\n\n\n    public static int name_finder(LinkedList<String> string_to_evaluate , String name){\n        if(string_to_evaluate.contains(name))\n            return string_to_evaluate.indexOf(name);\n        else\n            return -1;\n    }\n\n    static Feature feature_finder (LinkedList<Feature_defenition> feature_defenition, String name)\n    {\n        for (int temp=0 ; temp < feature_defenition.size() ; temp++) {\n            if (feature_defenition.get(temp).feature_components_name[0].equals(name))\n            {\n                if (feature_defenition.get(temp).feature_type.equals(\"mandatory\"))\n                    return(Mandatory_feature.mandatory_maker(feature_defenition , temp));\n                else if (feature_defenition.get(temp).feature_type.equals(\"or\"))\n                    return(Or_feature.Or_maker(feature_defenition, temp));\n                else\n                    return (Xor_feature.Xor_maker(feature_defenition, temp));\n            }\n        }\n        return null;\n    }\n    static void feature_defention_deleter(LinkedList<Feature_defenition> feature_defenition, String name) {\n        for (Feature_defenition defenition : feature_defenition) {\n            if (defenition.feature_components_name[0].equals(name))\n            {\n                feature_defenition.remove(defenition);\n                break;\n            }\n        }\n    }\n\n}\n\nclass Basic_feature extends Feature {\n    public boolean evaluate(LinkedList<String> not_important){\n        return true;\n    }\n    public  Basic_feature(String name)\n    {\n        super(name);\n    }\n}\n\n\n", "score": 0.0}
{"id": "SHARE_1_2732_48__1_2732_32", "golden_code": "import java.io.*;\nimport java.util.StringTokenizer;\n\npublic class Main{\n\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tBufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(input.readLine());\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tStringTokenizer s = new StringTokenizer(input.readLine());\n\t\t\tint x = Integer.parseInt(s.nextToken()), y = Integer.parseInt(s.nextToken());\n\t\t\tif (x == y || (x > y && (x - y) == 2)) {\n\t\t\t\tif (x % 2 == 0) {\n\t\t\t\t\tSystem.out.println(x + y);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(x + y - 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"No Number\");\n\t\t\t}\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        for (int i = 0; i < n; i++) {\n            int x = s.nextInt();\n            int y = s.nextInt();\n            int res = 0;\n            if (x == y) {\n                res = 0;\n            } else if (x == y + 2) {\n                res = 2;\n                x-=2;\n            } else {\n                System.out.println(\"No Number\");\n                continue;\n            }\n            for (int j = 0; j < x; j++) {\n                if (j % 2 == 0) {\n                    res += 1;\n                } else {\n                    res += 3;\n                }\n            }\n            System.out.println(res);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1006_104__5_1005_40", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while (true) {\n\n            float n = input.nextFloat();\n            if (n == 0.00)\n                break;\n            float d = 0;\n            for (int i = 1; ; i++) {\n                d += (double) 1 / (double) (i + 1);\n                if (d >= n) {\n                    System.out.println(i + \" card(s)\");\n                    break;\n                }\n            }\n        }\n    }\n\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    static int[] visited;\n    static int[] ftime;\n    static int time = 0;\n\n    static void dfs(int[][] adjacencyMatrix, int vertex, int[] visited, int[] ftime) {\n        visited[vertex]=1;\n        for (int j = 0; j < adjacencyMatrix[vertex].length; j++) {\n            if (adjacencyMatrix[vertex][j] == 1 && visited[j] == 0) {\n                visited[j] = 1;\n                dfs(adjacencyMatrix, j, visited, ftime);\n            }\n        }\n\n        ftime[vertex] = time++;\n    }\n\n    public static void main(String[] args) {\n        int n, m = 0;\n        Scanner input = new Scanner(System.in);\n        while ((n=input.nextInt())>0 &&(m=input.nextInt())>-10) {\n            \n            time = 0;\n            ftime = new int[n];\n            int[][] matrix = new int[n][n];\n            visited = new int[n];\n            for (int i = 0; i < (m); i++) {\n                matrix[input.nextInt() - 1][input.nextInt() - 1] = 1;\n            }\n            for (int i = 0; i < n; i++) {\n                if (visited[i] == 0) {\n                    dfs(matrix, i, visited, ftime);\n                }\n            }\n            for (int i = n - 1; i > -1; i--) {\n                for (int j = 0; j < n; j++) {\n                    if (ftime[j] == i) {\n                        if (i == 0) {\n                            System.out.print(j + 1);\n                        } else {\n                            System.out.print(j + 1 + \" \");\n                        }\n                    }\n                }\n            }\n            System.out.println();\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_58__1_1001_99", "golden_code": "import java.util.*;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner in=new Scanner(System.in);\n\t\tint a=0, b=0;\n\t\twhile(in.hasNext()){\n\t\t\ta=in.nextInt();\n\t\t\tb=in.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main{\n    public static void main( String[] a ){\n        Scanner i = new Scanner( System.in );\n        try{\n        while( 1>0 ){\n            System.out.println( i.nextInt() + i.nextInt() );\n        }\n        }catch( Exception e ){}\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_280__1_1001_444", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n  \n    public static void main(String[] args) {\nScanner in =new Scanner(System.in);\n        while(in.hasNext()){\n           int a=in.nextInt();\n           int b=in.nextInt();\n            System.out.printf(\"%d\\n\",(a+b));\n                   }    }\n}", "generated_code": "import java.util.Scanner ;\npublic class Main{\n  public static void main(String [] args){\n\tScanner in = new Scanner(System.in);\n\twhile(in.hasNext()){\n\t\tint a = in.nextInt() ;\n\t\tint b = in.nextInt() ;\n\t\tint sum = a + b ;\n\t\tSystem.out.println(sum);\n\t}\n  }\n}", "score": 1.0}
{"id": "SHARE_1_1001_230__1_2713_62", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\t\n\t    public static void main(String[] args) {\n\t    \t        Scanner in = new Scanner(System.in);\n\t    \t                int x, y, z;\n\t    \t                        while (in.hasNext()) {\n\t    \t                        \t            x = in.nextInt();\n\t    \t                        \t                        y = in.nextInt();\n\t    \t                        \t                                    z = x + y;\n\t    \t                        \t                                                System.out.println(z);\n\t    \t                        \t                                                \n\t    \t                        }\n\t    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n          Scanner input = new Scanner(System.in);\n          int n=input.nextInt();\n          while (n!=0){\n              long count=0;\n              int number=n;\n              while (number!=1){\n                  if(number%2==0){\n                   number=number/2;   \n                  }else{\n                      number=number*3+1;\n                  }\n                  count++;\n              }\n              System.out.println(count+1);\n              n=input.nextInt();\n          }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1009_117__1_1009_38", "golden_code": "import java.util.Scanner;\nclass Main {\n\t//static boolean adj[]=new boolean [300000000];\n\t\n\tpublic static void main(String s[]) {\n\t\tScanner cin = new Scanner(System.in);\n\t\tdouble sum=0;\n\t\tfor(int i=0;i<12;i++)\n\t\t{\n\t\t\tdouble val=cin.nextDouble();\n\t\t\tsum+=val;\n\t\t}\n\t\tSystem.out.printf(\"$%.2f\\n\",sum/12);\n\t\t//adj[0]=true;\n\t}\n}", "generated_code": "import java.util.Scanner;\nclass Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan=new Scanner(System.in);\n\t\tdouble sum=0;\n\t\tdouble result=0;\n\t\tfor(int i=0;i<12;i++)\n\t\tsum+=scan.nextDouble();\n\t\tresult=sum/12;\n\t\tdouble a=result*100;\n\t\tint b=(int)a;\n\t\tdouble c=a-b;\n\t\tresult=result-(c/100);\n\t\tSystem.out.println(\"$\"+result);\n\t}\n}", "score": 1.0}
{"id": "SHARE_5_1010_13__5_1010_15", "golden_code": "import java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.PriorityQueue;\nimport java.util.Scanner;\n\n\npublic class Main {\npublic static Scanner in =new Scanner (System.in);\npublic static void main(String [] args)\n{\n\tint cases=0;\n\tcases=in.nextInt();\n\twhile (cases>0)\n\t{\n\t\tint liquid=in.nextInt();\n\t\tdouble weight=in.nextInt();\n\t\tdouble [][] mat=new double [liquid][2];\n\t\tArrayList<Double> unit =new ArrayList<Double> ();\n\t\tfor (int i=0;i<liquid;i++)\n\t\t{\n\t\t\t//0 -> amount\n\t\t\tmat[i][0]=in.nextDouble();\n\t\t\t//1 -> value\n\t\t\tmat[i][1]=in.nextDouble();\n\t\t\tdouble temp=(mat[i][1])/(mat[i][0]);\n\t\t\tunit.add(temp);\n\t\t}\n\t\t\tint i, j;\n\t\t\tdouble newKey,newValue0,newValue1;\n\t\t      for (i = 0; i < unit.size(); i++) {\n\t\t            newKey = unit.get(i);\n\t\t            newValue0=mat[i][0];\n\t\t            newValue1=mat[i][1];\n\t\t            j = i;\n\t\t            while (j > 0 && unit.get(j-1) > newKey ) {\n\t\t            \tmat[j][0]=mat[j-1][0];\n\t\t            \tmat[j][1]=mat[j-1][1];\n\t\t            \tunit.set(j, unit.get(j-1));\n\t\t                  j--;\n\t\t            }\n\t\t            unit.set(j, newKey);\n\t\t            mat[j][0] = newValue0;\n\t\t            mat[j][1] = newValue1;\n\t\t           \n\t\t      }\n\t\t      double finalValue=0;\n\t\t      for (int k=unit.size()-1;k>=0;k--)\n\t\t      {\n\t\t    \t  if (mat[k][0]<weight)\n\t\t    \t  {\n\t\t    \t\t  finalValue=finalValue+(mat[k][0]*unit.get(k));\n\t\t    \t\t  weight=weight-mat[k][0];\n\t\t    \t  }\n\t\t    \t  else\n\t\t    \t  {\n\t\t    \t\t  finalValue=finalValue+weight*unit.get(k);\n\t\t    \t\t  break;\n\t\t    \t  }\n\t\t    \t\t  \n\t\t      }\n\t\t      if (finalValue==0)\n\t\t    \t  System.out.println(\"0.00\");\n\t\t      else{\n\t\t      double temp1=Math.round(finalValue*100.0)/100.0;\n\t\t      DecimalFormat df = new DecimalFormat (\"#.00\");\n\t\t      String s= df.format(temp1);\n\t\t      System.out.println(s);\n\t\t      }\n\t\tcases--;\n\t}\n}\n\n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\n\t\tInput in = new Input();\n\t\t\n\t\tint numOfExperiments = in.getNumOfExperiments();\n\t\t\n\t\twhile ( numOfExperiments > 0 ) {\n\t\t\t\n\t\t\tArrayList<Float> materials = new ArrayList<Float>();\n\t\t\tArrayList<Float> densities = new ArrayList<Float>();\n\t\t\t\n\t\t\tfloat totalCapacity = in.getInput(materials, densities);\n\t\t\t\n\t\t\tSystem.out.printf(\"%.2f\", calculation(materials, densities, totalCapacity));\n\t\t\tSystem.out.println();\n\t\t\tnumOfExperiments--;\n\t\t}\n\t\t\t\t\n\t}\n\t\n\t\n\t\n\t\n\tstatic class Input {\n\t\t\n\t\tprivate Scanner scanConsole = new Scanner(System.in);\n\t\t\n\t\tpublic Integer getNumOfExperiments() {\n\t\t\t\n\t\t\treturn scanConsole.nextInt();\n\t\t}\n\t\t\n\t\tpublic float getInput( ArrayList<Float> materials, ArrayList<Float>densities ) {\n\t\t\t\n\t\t\tint lines = scanConsole.nextInt();\n\t\t\tint capacity = scanConsole.nextInt();\n\t\t\t\n\t\t\tfloat a, p;\n\t\t\t\n\t\t\tfor (int i = 0; i < lines; i++) {\n\t\t\t\n\t\t\t\ta = scanConsole.nextFloat();\n\t\t\t\tp = scanConsole.nextFloat();\n\t\t\t\t\n\t\t\t\tmaterials.add( a );\n\t\t\t\tdensities.add( p/a );\n\t\t\t}\n\t\t\t\n\t\t\treturn capacity;\n\t\t}\n\t\t\n\t}\n\t\n\t\t\n\tpublic static Float calculation ( ArrayList <Float> materials, ArrayList <Float> densities, float totalCapacity ) {\n\t\t\n\t\tfloat result = 0;\n\t\t\n\t\twhile ( totalCapacity > 0 && (densities.size() > 0) ) {\n\t\t\t\n\t\t\tint idMaxDensity = densities.indexOf( java.util.Collections.max(densities) );\n\t\t\t\n\t\t\tif ( materials.get(idMaxDensity) <= totalCapacity ) {\n\t\t\t\t\n\t\t\t\ttotalCapacity -= materials.get(idMaxDensity);\n\t\t\t\tresult += ( materials.get(idMaxDensity)*(densities.get(idMaxDensity)) );\n\t\t\t}\n\t\t\t\n\t\t\telse {\n\n\t\t\t\tresult += totalCapacity*(densities.get(idMaxDensity));\n\t\t\t\ttotalCapacity = 0;\n\t\t\t}\n\t\t\t\n\t\t\tdensities.remove(idMaxDensity);\n\t\t\tmaterials.remove(idMaxDensity);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\n\t\n\t\n}\n", "score": 1.0}
{"id": "SHARE_1_2732_49__5_1001_25", "golden_code": "import java.io.*;\nimport java.util.StringTokenizer;\n\npublic class Main{\n\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tBufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(input.readLine());\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tStringTokenizer s = new StringTokenizer(input.readLine());\n\t\t\tint x = Integer.parseInt(s.nextToken()), y = Integer.parseInt(s.nextToken());\n\t\t\tif (x == y || (x > y && (x - y) == 2)) {\n\t\t\t\tif (x % 2 == 0) {\n\t\t\t\t\tSystem.out.println(x + y);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(x + y - 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"No Number\");\n\t\t\t}\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n\npublic class Main {\n\tpublic static void main(String[] args)throws IOException{\n\t\tBufferedReader reader=new BufferedReader(new InputStreamReader(System.in));\n\t\tString str=reader.readLine();\n\t\tint first=0,second=0;\n\t\tboolean haveS;\n\t\tchar[] arr;\n\t\twhile(!str.equals(\"#\")){\n\t\t\thaveS=false;\n\t\t\tarr=str.toCharArray();\n\t\t\tfor(int k=arr.length-1;k>0;k--){\n\t\t\t\tif(arr[k]>arr[k-1]){\n\t\t\t\t\tfirst=k-1;\n\t\t\t\t\thaveS=true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(haveS){\n\t\t\t\tsecond=first+1;\n\t\t\t\tfor(int j=str.length()-2;j>=first;j--){//finding index of element which is the smallest among the set of bigger elements at right of first\n\t\t\t\t\tif(arr[first]<arr[j+1])\n\t\t\t\t\t\tif(arr[j+1]<=arr[second])\n\t\t\t\t\t\t\tsecond=j+1;\n\t\t\t\t}\n\t\t\t\tchar temp=arr[first];//swap two found element\n\t\t\t\tarr[first]=arr[second];\n\t\t\t\tarr[second]=temp;\n\t\t\t\t//System.out.println(arr);\n\t\t\t\tarr=Sort(first,arr);\n\t\t\t\tSystem.out.println(arr);\n\t\t\t}\n\t\t\telse System.out.println(\"No Successor\");\n\t\t\tstr=reader.readLine();\n\t\t}\n\t\t\n\t}\n\t\n\tpublic static char[] Sort(int first,char[]array){\n\t\tchar temp;\n\t\tfor ( int pass = first+1; pass < array.length; pass++ ) // passes\n\t         for ( int i = first+1; i < array.length - 1; i++ ) // one pass   \n\t            if ( array[ i ] > array[ i + 1 ] ){        // one comparison     \n\t            \ttemp=array[i];\n\t            \tarray[i]=array[i+1];\n\t            \tarray[i+1]=temp;\n\t            }\n\t   return array;\n\t}\n\n}", "score": 0.0}
{"id": "SHARE_1_1454_2__1_2599_15", "golden_code": "import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Scanner;\n\n\npublic class Main {\n\tstatic String s1 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ_,.?\";\n\tstatic String[] s2 = {\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\"\n\t\t,\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\"\n\t\t,\"-.--\",\"--..\",\"..--\",\".-.-\",\"---.\",\"----\"};\n\tpublic static void main(String[] args) throws Exception {\n\t\tHashMap<String,String> h1 = new HashMap<String, String>();\n\t\tHashMap<String,String> h2 = new HashMap<String, String>();\n\t\tfor(int i = 0;i<s1.length();i++){\n\t\t\th1.put(s1.charAt(i)+\"\", s2[i]);\n\t\t\th2.put(s2[i],s1.charAt(i)+\"\");\n\t\t}\n\t\tScanner input = new Scanner(System.in);\n\t\tint n = input.nextInt();\n\t\tinput.nextLine();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tString line = input.nextLine();\n\t\t\tString s = \"\";\n\t\t\tArrayList<Integer> l = new ArrayList<Integer>();\n\t\t\tfor(char ch:line.toCharArray()){\n\t\t\t\ts += h1.get(ch+\"\");\n\t\t\t\tl.add(0,h1.get(ch+\"\").length());\n\t\t\t}\n\t\t\tint st = 0;\n\t\t\tString res = \"\";\n\t\t\tfor(Integer k:l){\n\t\t\t\tres += h2.get(s.substring(st,st+k));\n\t\t\t\tst = st+k;\n\t\t\t}\n\t\t\tSystem.out.println((i+1)+\": \"+res);\n\t\t}\n\t}\n}\n", "generated_code": "import java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Hashtable;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.Queue;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.io.BufferedReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.io.InputStream;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tScanner scan = new Scanner(System.in);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n}\n\nclass TaskC {\n\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\n\t\tint n = in.nextInt();\n\t\twhile (n != 0) {\n\t\t\tString str = n + \"\";\n\t\t\tString num = \"\";\n\t\t\tfor (int i = 0; i < str.length(); i++) {\n\t\t\t\tif (str.charAt(i) - '4' > 0) {\n\t\t\t\t\tnum += str.charAt(i) - '1';\n\t\t\t\t} else {\n\t\t\t\t\tnum += str.charAt(i) - '0';\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(n + \": \" + Integer.parseInt(num, 9));\n\t\t\tn = in.nextInt();\n\t\t}\n\t}\n}\n\nclass InputReader {\n\tBufferedReader br;\n\tStringTokenizer st;\n\n\tpublic InputReader(InputStream in) {\n\t\tbr = new BufferedReader(new InputStreamReader(in));\n\t\tst = null;\n\t}\n\n\tpublic String next() {\n\t\twhile (st == null || !st.hasMoreTokens()) {\n\t\t\ttry {\n\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn st.nextToken();\n\t}\n\n\tpublic int nextInt() {\n\t\treturn Integer.parseInt(next());\n\t}\n\n\tpublic long nextLong() {\n\t\treturn Long.parseLong(next());\n\t}\n\n\tpublic float nextFloat() {\n\t\treturn Float.parseFloat(next());\n\t}\n\n\tpublic double nextDouble() {\n\t\treturn Double.parseDouble(next());\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2859_2__1_2859_9", "golden_code": "import java.util.Scanner;\n\nclass Main {\n    public static void main(String[] args) {\n        Scanner inp = new Scanner(System.in);\n        int x = inp.nextInt();\n\n        for (int i = 0; i < x; i++) {\n            int n = inp.nextInt();\n            int mat[][] = new int[n][2];\n            for (int k = 0; k < n; k++) {\n                for (int l = 0; l < 2; l++) {\n                    mat[k][l] = inp.nextInt();\n                }\n            }\n\n            boolean flag = true;\n            for (int j = 0; j < n; j++) {\n                int fuel = 0;\n                int dist = 0;\n\n                for (int k = j; k < n + j; k++) {\n                    flag=true;\n                    fuel += mat[k % n][0];\n                    dist += mat[k % n][1];\n\n                    if (dist > fuel) {\n                        flag = false;\n                        break;\n                    }\n                }\n                if (flag) {\n                    System.out.println(j);\n                    break;\n                }\n            }\n\n            if (!flag)\n                System.out.println(\"it's a trap\");\n\n            flag=false;\n\n\n\n\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\n\n/**\n *\n * @author rreza\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    static Scanner in = new Scanner(System.in);\n\n    public static void main(String[] args) {\n\n        int t;\n        int n;\n\n        String temp;\n        String result = \"\";\n        temp = in.nextLine();\n        t = Integer.parseInt(temp);\n        if (t < 1 || t > 256) {\n            return;\n        }\n\n        for (int i = 0; i < t; i++) {\n            temp = in.nextLine();\n            n = Integer.parseInt(temp);\n            \n            if (n<2 || n >10000) {\n                return;\n            }\n\n            int[] array = new int[2 * n];\n            for (int j = 0; j < n; j++) {\n                temp = in.nextLine();\n                String[] tt = temp.split(\" \");\n\n                array[2 * j] = Integer.parseInt(tt[0]);\n                array[2 * j + 1] = Integer.parseInt(tt[1]);\n            }\n\n//            if (i == t - 1) {\n//                if (getResult(array) == -1) {\n//                    result += \"it's a trap\";\n//                } else {\n//                    result += getResult(array);\n//                }\n//            } else {\n                if (getResult(array) == -1) {\n                    result += \"it's a trap\" + \"\\n\";\n                } else {\n                    result += getResult(array) + \"\\n\";\n                }\n//            }\n        }\n\n        System.out.print(result);\n\n    }\n\n    public static int getResult(int[] array) {\n        int result = -1;\n        int n = array.length;\n\n        for (int i = 0; i < n; i += 2) {\n            if (canStart(array, i)) {\n                return i / 2;\n            }\n        }\n        return result;\n    }\n\n    public static boolean canStart(int[] array, int start) {\n        int f = 0;\n\n        boolean result = true;\n\n        for (int i = 0; i < array.length; i += 2) {\n            f = array[(start + i) % array.length] + f;\n            if (!(f >= array[((start + i) % array.length) + 1])) {\n                return false;\n            }\n            f -= array[((start + i) % array.length) + 1];\n        }\n\n        return result;\n    }\n\n}\n", "score": 1.0}
{"id": "SHARE_1_2713_49__1_1319_70", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        while(true){\n            int n = s.nextInt();\n            if(n == 0)\n                break;\n            if(n == 1){\n                System.out.println(\"1\");\n                continue;\n            }\n            int counter=1;\n            while(n != 1){\n                counter++;\n                if(n % 2 == 1)\n                    n = 3*n+1;\n                else\n                    n = n / 2;\n            }\n            System.out.println(counter);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tboolean first = false;\n\t\twhile(true)\n\t\t{\n\t\t\tString str = input.nextLine();\n\t\t\tString eachInt[] = str.split(\" \");\n\t\t\tif(str.split(\" \")[0].equals(\"5280\"))\n\t\t\t{\n\t\t\t\tSystem.out.println(\"\");\n\t\t\t\tSystem.exit(0);\n\t\t\t\t\n\t\t\t}\n\t\t\tif(first)\n\t\t\t{\n\t\t\t\tSystem.out.println(\"\");\n\t\t\t}\n\t\t\tint lastdis = 0;\n\t\t\tint lastpos = 0;\n\t\t    int pos = Integer.parseInt(str.split(\" \")[0]);\n\t\t    for(int i = 1; i< eachInt.length;i++)\n\t\t    {\n\t\t    \tint cur= Integer.parseInt(eachInt[i]);\n\t\t    \tif(i== 1 & first)\n\t\t    \t{\n\t\t    \t\tlastdis = pos - 0;\n\t\t    \t\tSystem.out.println(\"\");\n\t\t    \t}\n\t\t    \tif(lastdis<0)\n\t\t    \t{\n\t\t    \t\tlastdis*=-1;\n\t\t    \t}\n\t\t    \tint acv= cur - pos;\n\t\t    \tif(acv<0)\n\t\t    \t{\n\t\t    \t\tacv*=-1;\n\t\t    \t}\n\t\t    \tif(cur == pos)\n\t\t    \t{\n\t\t    \t\tSystem.out.print(\"Moving from \"+lastpos+\" to \"+eachInt[i]+\": found it!\" );\n\t\t    \t}\n\t\t    \telse if(lastdis>acv)\n\t\t    \t{\n\t\t    \t    System.out.println(\"Moving from \"+lastpos+\" to \"+eachInt[i]+\": warmer.\" );\n\t\t    \t}\n\t\t    \telse if(lastdis<acv)\n\t\t    \t{\n\t\t    \t    System.out.println(\"Moving from \"+lastpos+\" to \"+eachInt[i]+\": colder.\" );\n\t\t    \t}\n\t\t    \telse\n\t\t    \t{\n\t\t    \t\tSystem.out.println(\"Moving from \"+lastpos+\" to \"+eachInt[i]+\": same.\" );\n\t\t    \t}\n\t\t    \tlastdis = cur-pos;\n\t\t    \tlastpos = cur;\n\t\t    \tfirst= true;\n\t\t    }\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2599_7__1_1149_3", "golden_code": "import java.io.PrintWriter;\nimport java.util.Scanner;\npublic class Main{\n    public static void main(String[] args) {\n        Scanner in=new Scanner(System.in);\n        PrintWriter out=new PrintWriter(System.out);\n        long a,b;\n        while(true){\n            b=a=in.nextLong();\n            if(a==0)\n                break;\n            long c=100000000;\n            long d=56953279;\n            int t=0;\n            while(b>9){\n                long div=b/c;\n                b=b%c;\n                if(div>3)\n                    t+=(div-1)*d+c;\n                else\n                    t+=div*d;\n                c/=10;\n                d=(d-c)/9;\n            }\n            if(b>3)\n                t++;\n            System.out.println(a+\": \"+(a-t));\n        }\n        out.flush();\n    }\n}", "generated_code": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n//package main;\n\nimport java.util.Scanner;\n\n/**\n *\n * @author ahmad\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner sc = new Scanner(System.in);\n        while (sc.hasNext()) {\n            String s = sc.next();\n            int i = 0, j = s.length() - 1;\n            boolean mir = true;\n            boolean pal = true;\n            while (i < j) {\n                if (s.charAt(i) == s.charAt(j)) {\n                    i++;\n                    j--;\n                } else {\n                    pal = false;\n                    break;\n                }\n            }\n            i = 0;\n            j = s.length() - 1;\n            while (i < j) {\n                if (s.charAt(i) == 'A' && s.charAt(j) == 'A') {\n                } else if (s.charAt(i) == 'M' && s.charAt(j) == 'M') {\n                } else if (s.charAt(i) == 'A' && s.charAt(j) == 'A') {\n                } else if (s.charAt(i) == 'Z' && s.charAt(j) == '5') {\n                } else if (s.charAt(i) == '5' && s.charAt(j) == 'Z') {\n                } else if (s.charAt(i) == '2' && s.charAt(j) == 'S') {\n                } else if (s.charAt(i) == 'S' && s.charAt(j) == '2') {\n                } else if (s.charAt(i) == 'O' && s.charAt(j) == 'O') {\n                } else if (s.charAt(i) == '1' && s.charAt(j) == '1') {\n                } else if (s.charAt(i) == 'E' && s.charAt(j) == '3') {\n                } else if (s.charAt(i) == '3' && s.charAt(j) == 'E') {\n                } else if (s.charAt(i) == 'H' && s.charAt(j) == 'H') {\n                } else if (s.charAt(i) == 'T' && s.charAt(j) == 'T') {\n                } else if (s.charAt(i) == 'I' && s.charAt(j) == 'I') {\n                } else if (s.charAt(i) == 'U' && s.charAt(j) == 'U') {\n                } else if (s.charAt(i) == 'J' && s.charAt(j) == 'L') {\n                } else if (s.charAt(i) == 'L' && s.charAt(j) == 'J') {\n                } else if (s.charAt(i) == 'V' && s.charAt(j) == 'V') {\n                } else if (s.charAt(i) == '8' && s.charAt(j) == '8') {\n                } else if (s.charAt(i) == 'W' && s.charAt(j) == 'W') {\n                } else if (s.charAt(i) == 'X' && s.charAt(j) == 'X') {\n                } else {\n                    mir = false;\n                    break;\n                }\n                i++;\n                j--;\n            }\n            if(i == j){\n                if(s.charAt(i) == 'Y' || s.charAt(i) == 'A'|| s.charAt(i) == 'M'|| s.charAt(i) == 'W'|| s.charAt(i) == 'O'|| s.charAt(i) == '1'|| s.charAt(i) == 'H'|| s.charAt(i) == 'T'|| s.charAt(i) == 'I'|| s.charAt(i) == 'U'|| s.charAt(i) == 'V'|| s.charAt(i) == '8'|| s.charAt(i) == 'X'){\n                    \n                }else{\n                    mir = false;\n                }\n            }\n            if (mir && pal) {\n                System.out.println(s + \" -- is a mirrored palindrome.\\n\");\n            } else if (mir) {\n                System.out.println(s + \" -- is a mirrored string.\\n\");\n            } else if (pal) {\n                System.out.println(s + \" -- is a regular palindrome.\\n\");\n            } else {\n                System.out.println(s + \" -- is not a palindrome.\\n\");\n            }\n        }\n\n    }\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_467__1_1001_395", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main\n{\npublic static void main(String[] args)\n{\nScanner input=new Scanner(System.in);\nwhile(input.hasNext())\n{\nint a,b,sum;\na=input.nextInt();\nb=input.nextInt();\nsum=a+b;\nSystem.out.println(sum);\n}\n}\n}\n", "score": 1.0}
{"id": "SHARE_1_1003_10__1_1018_36", "golden_code": "\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String argsp[]){\n        Scanner in = new Scanner(System.in);\n        while(true){\n            int k1=in.nextInt();\n            int k2=in.nextInt();\n            int k3=in.nextInt();\n            if(k1==0&&k2==0&&k3==0)\n                break;\n            String s=in.next();\n            char c1[]=new char[s.length()];\n            int i1[]=new int[s.length()];\n            char c2[]=new char[s.length()];\n            int i2[]=new int[s.length()];\n            char c3[]=new char[s.length()];\n            int i3[]=new int[s.length()];\n            int ci1=0,ci2=0,ci3=0;\n            for (int i = 0; i < s.length(); i++) {\n                if(index(s.charAt(i))==1){\n                    c1[ci1]=s.charAt(i);\n                    i1[ci1++]=i;\n                }\n                else if(index(s.charAt(i))==2){\n                    c2[ci2]=s.charAt(i);\n                    i2[ci2++]=i;\n                }\n                else if(index(s.charAt(i))==3){\n                    c3[ci3]=s.charAt(i);\n                    i3[ci3++]=i;\n                }\n            }\n            char t1[]=new char[s.length()];\n            char t2[]=new char[s.length()];\n            char t3[]=new char[s.length()];\n            t1=Arrays.copyOf(c1, ci1);\n            c1=Arrays.copyOf(c1, ci1);\n            i1=Arrays.copyOf(i1, ci1);\n            t2=Arrays.copyOf(c2, ci2);\n            c2=Arrays.copyOf(c2, ci2);\n            i2=Arrays.copyOf(i2, ci2);\n            t3=Arrays.copyOf(c3, ci3);\n            c3=Arrays.copyOf(c3, ci3);\n            i3=Arrays.copyOf(i3, ci3);\n            if(ci1!=0)\n            for (int i = k1%ci1,k=0; k < ci1; k++,i=(i+1)%ci1) {\n                c1[i]=t1[k]; \n            }\n            if(ci2!=0)\n            for (int i = k2%ci2,k=0; k < ci2; k++,i=(i+1)%ci2) {\n                c2[i]=t2[k]; \n            }\n            if(ci3!=0)\n            for (int i = k3%ci3,k=0; k < ci3; k++,i=(i+1)%ci3) {\n                c3[i]=t3[k]; \n            }\n            String out=\"\";\n            int p1=0,p2=0,p3=0;\n            for (int i = 0; i < s.length(); i++) {\n                if(p1<ci1&&p2<ci2&&p3<ci3&&i1[p1]<i2[p2]&&i1[p1]<i3[p3]){\n                    out+=c1[p1++];\n                }\n                else if(p1<ci1&&p2<ci2&&p3<ci3&&i2[p2]<i1[p1]&&i2[p2]<i3[p3]){\n                    out+=c2[p2++];\n                }\n                else if(p1<ci1&&p2<ci2&&p3<ci3&&i3[p3]<i1[p1]&&i3[p3]<i2[p2]){\n                    out+=c3[p3++];\n                }\n                else if(p1<ci1&&p2<ci2&&i1[p1]<i2[p2]){\n                    out+=c1[p1++];\n                }\n                else if(p1<ci1&&p2<ci2&&i1[p1]>i2[p2]){\n                    out+=c2[p2++];\n                }\n                else if(p1<ci1&&p3<ci3&&i1[p1]<i3[p3]){\n                    out+=c1[p1++];\n                }\n                else if(p1<ci1&&p3<ci3&&i1[p1]>i3[p3]){\n                    out+=c3[p3++];\n                }\n                else if(p3<ci3&&p2<ci2&&i3[p3]<i2[p2]){\n                    out+=c3[p3++];\n                }\n                else if(p3<ci3&&p2<ci2&&i3[p3]>i2[p2]){\n                    out+=c2[p2++];\n                }\n                else if(p1<ci1){\n                    out+=c1[p1++];\n                }\n                else if(p2<ci2){\n                    out+=c2[p2++];\n                }\n                else if(p3<ci3){\n                    out+=c3[p3++];\n                }\n            }\n            System.out.println(out);\n        }\n    }\n    static int index(char c){\n        if(c>='a'&&c<='i')\n            return 1;\n        else if(c>='j'&&c<='r')\n            return 2;\n        else if(c>='s'&&c<='z')\n            return 3;\n        return 3;\n    }\n}\n", "generated_code": "import java.util.Scanner ;\npublic class Main\n{\n   public static void main ( String[] args )  \n   {\n\n       Scanner scan = new Scanner( System.in );\n\tint n=scan.nextInt(); \n\tboolean ok = false;\n       while( n !=0 )\n\t{\n\t    if(ok)\n\t    \tSystem.out.println();\n\t    ok = true;\n\t    int[] a = new int[n];\n\t    int[] b = new int[n];\n\t\tint c=0;\n\t\tint d=0;\n\n\tfor(int i=0; i<n; i++) \n\t\ta[i] =scan.nextInt();\n\n        for(int i=0; i<n ; i++)\n\t\tb[i]=scan.nextInt();\n\n\tfor(int i=0; i<n ; i++)\n\t{\n\t\t\n\t\tif(a[i]>b[i] && a[i]-b[i]>1)\n\t\t\tc+=a[i];\n\n\t\tif(a[i]>b[i] &&  a[i]-b[i]==1){\n\t\t    if(a[i]==2 && b[i]==1)\n\t\t\t   d+=6;\n\t\t\telse\n\t\t\td+=a[i]+b[i];}\n\n\t\tif(a[i]<b[i] && b[i]-a[i]>1 )\n\t\t\td+=b[i];\n\n\t\tif(a[i]<b[i] && b[i]-a[i]==1 ){\n\t\t\tif(a[i]==1 && b[i]==2)\n\t\t\tc+=6;\n\t\t\telse\n\t\t\tc+=a[i]+b[i];}\n\t}\n\n\tSystem.out.println(\"A has \"+c+\" points. B has \"+d+\" points.\");\n\t\tn=scan.nextInt();\n\t\n\t}\n   }\n}", "score": 0.0}
{"id": "SHARE_1_2571_5__1_2571_0", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\twhile (true) {\n\t\t\tString tmp;\n\t\t\tint cnt = 0, mcounter = 0;\n\t\t\tint n = s.nextInt();\n\t\t\tif(n == 0)\n\t\t\t\treturn;\n\t\t\ts.nextLine();\n\t\t\tchar[][] chars = new char[n][n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\ttmp = s.nextLine();\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\tchars[i][j] = tmp.charAt(j);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tfor (int j = 0; j < n; j++)\n\t\t\t\t\tif (chars[i][j] == 'O')\n\t\t\t\t\t\tmcounter++;\n\t\t\tint[] x = new int[4*mcounter];\n\t\t\tint[] y = new int[4*mcounter];\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\tfor (int j = 0; j < n; j++)\n\t\t\t\t\tif (chars[i][j] == 'O') {\n\t\t\t\t\t\tx[cnt] = i;\n\t\t\t\t\t\ty[cnt++] = j;\n\t\t\t\t\t\tchars[i][j] = '#';\n\t\t\t\t\t}\n\t\t\tfor (int j = 0; j < 3; j++) {\n\t\t\t\tfor (int i = 0; i < mcounter; i++)\n\t\t\t\t\tchars[y[j * mcounter + i]][n - 1 - x[j * mcounter + i]] = 'O';\n\t\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\t\tfor (int k = 0; k < n; k++)\n\t\t\t\t\t\tif (chars[i][k] == 'O') {\n\t\t\t\t\t\t\tx[cnt] = i;\n\t\t\t\t\t\t\ty[cnt++] = k;\n\t\t\t\t\t\t\tchars[i][k] = '#';\n\t\t\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\ttmp = s.nextLine();\n\t\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\t\tchars[i][j] = tmp.charAt(j);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 0; i < (mcounter * 4); i++)\n\t\t\t\tSystem.out.print(chars[x[i]][y[i]]);\n\t\t\tSystem.out.println();\n\t\t\tx=y=null;\n\t\t}\n\t}\n}\n", "generated_code": "import java.io.*;\nimport java.math.BigInteger;\nimport  static java.math.BigInteger.*;\nimport java.util.*;\npublic class Main{\n\n\n\n\n\n\n    void solve()throws Exception\n    {\n        while(true)\n        {\n            int n=nextInt();\n            if(n==0)\n                break;\n            char[][]b=new char[n][n];\n            for(int i=0;i<n;i++)\n                b[i]=nextString().toCharArray();\n            char[][]text=new char[n][n];\n            for(int i=0;i<n;i++)\n                text[i]=nextString().toCharArray();\n            StringBuilder res=new StringBuilder();\n            for(int step=0;step<4;step++)\n            {\n                for(int i=0;i<n;i++)\n                    for(int j=0;j<n;j++)\n                        if(b[i][j]!='#')\n                            res.append(text[i][j]);\n                char[][]temp=new char[n][n];\n                for(int i=0;i<n;i++)\n                    for(int j=0;j<n;j++)\n                        temp[j][n-1-i]=b[i][j];\n                b=temp;\n            }\n            System.out.println(res.toString());\n\n        }\n\n    }\n\n    ////////////\n    BufferedReader reader;\n    PrintWriter writer;\n    StringTokenizer stk;\n    void run()throws Exception\n    {\n        reader=new BufferedReader(new InputStreamReader(System.in));\n        stk=null;\n        writer=new PrintWriter(System.out);\n        solve();\n        reader.close();\n        writer.close();\n    }\n    int nextInt()throws Exception\n    {\n        return Integer.parseInt(nextToken());\n    }\n\n    long nextLong()throws Exception\n    {\n        return Long.parseLong(nextToken());\n\n    }\n    double nextDouble()throws Exception\n    {\n        return Double.parseDouble(nextToken());\n\n\n    }\n\n    String nextString()throws Exception\n    {\n        return nextToken();\n    }\n    String nextLine()throws Exception\n    {\n        return reader.readLine();\n    }\n    String nextToken()throws Exception\n    {\n        if(stk==null || !stk.hasMoreTokens())\n        {\n            stk=new StringTokenizer(nextLine());\n            return nextToken();\n\n        }\n        return stk.nextToken();\n    }\n\n    public static void main(String[]args) throws Exception\n    {\n        new Main().run();\n    }\n\n\n\n}", "score": 1.0}
{"id": "SHARE_1_2429_2__1_2429_24", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int T=input.nextInt();\n        for(int t=0;t<T;t++){\n            input.nextLine();\n            long sum=0;\n            int n=input.nextInt();\n            int x=(int)Math.sqrt(n);\n            for(int i=2;i<=x;i++){\n                if(n%i==0){\n                    sum=sum+i+(n/i);\n                }\n            }\n            sum+=1;\n            if(Math.sqrt(n)==x){\n                sum=sum-x;\n            }\n            System.out.println(sum);\n        }\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s=new Scanner(System.in);\n        \n        int input=s.nextInt();\n        \n        for (int i = 0; i < input; i++) {\n            \n            int n=s.nextInt();\n            int sum=0;\n            \n            for (int j = 1; j <= Math.sqrt(n); j++) {\n                \n                if(n%j==0 && j!=1){\n                    if(j==n/j)\n                        sum+=j;\n                    else\n                        sum+=j+(n/j);\n                    \n                }\n                else if(n%j==0){\n                    if(n!=1)\n                       sum+=j;\n                }\n            }\n            \n               System.out.println(sum);\n        }\n    }\n    \n}\n", "score": 1.0}
{"id": "SHARE_1_2500_44__1_2500_55", "golden_code": "//JZP263\n//sinashaloudegi@gmail.com\n//CuttingWood\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner in = new Scanner(System.in);\n        while (true) {\n            int n = in.nextInt();\n            double m = in.nextDouble();\n            if (n == 0 && m == 0) {\n                System.exit(0);\n            }\n            if (m % 2 == 0) {\n                System.out.println(\"No\");\n                continue;\n            }\n\n            while (n >= 1) {\n\n                if (m > Math.pow(3, n) / 3 && m <= 2 * (Math.pow(3, n) / 3)) {\n                    System.out.println(\"No\");\n                    break;\n                } else if (m <= Math.pow(3, n) / 3) {\n                    if (n != 1) {\n                        n--;\n                    } else {\n                        System.out.println(\"Yes\");\n                        break;\n                    }\n                } else if (2 * (Math.pow(3, n)) > m && m <= Math.pow(3, n)) {\n\n                    {\n                        if (n != 1) {\n                            m -= (2 * (Math.pow(3, n) / 3));\n                        } else {\n                            System.out.println(\"Yes\");\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n", "generated_code": "//2500\nimport java.util.Scanner;\n\n\npublic class Main {\n    \n   static boolean fun(long f, long l, long i){\n        if(f == l)\n            return true;\n        long t = (l-f+1)/3;\n        if(i<f+t)\n            return fun(f, f+t-1,i);\n        if(i>l-t)\n            return fun(l-t+1,l,i);\n        return false;\n    }\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        long l,i;\n        while(true){\n           l = in.nextLong();\n           i = in.nextLong();\n           if(l + i ==0)\n               break;\n           l = (long)Math.pow(3, l);\n            System.out.println(fun(1,l,i)?\"Yes\":\"No\");\n        }\n        \n    }\n    \n}\n", "score": 1.0}
{"id": "SHARE_1_2763_4__1_2763_3", "golden_code": "import java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\nimport java.util.Scanner;\nimport java.util.StringTokenizer;\n\npublic class Main\n{\n\tprivate static final int MOD = 1000000000 + 7;\n\tpublic static void main(String[] args) throws IOException\n\t{\n\t\tScanner in = new Scanner(System.in);\n\n\t\tint tc = in.nextInt();\n\n\n\n\t\twhile(tc-- > 0)\n\t\t{\n\t\t\tchar [] str = in.next().toCharArray();\n\t\t\tint zeros = 0;\n\t\t\tfor(char c : str)\n\t\t\t\tif(c == '0')\n\t\t\t\t\tzeros++;\n\n\t\t\tint n = str.length;\n\n\t\t\tint [][][] dp = new int[3][n+1][n+1];\n\n\n\t\t\tfor(int [][] fill1 : dp)\n\t\t\t\tfor(int [] fill2 : fill1)\n\t\t\t\t\tArrays.fill(fill2, 0);\n\n\t\t\tdp[0][0][0] = 1;\n\n\t\t\tint a, b, c;\n\t\t\tfor(int till = 0 ; till < n ; till++)\n\t\t\t{\n\t\t\t\ta = till%3;\n\t\t\t\tb = (till+1)%3;\n\t\t\t\tc = (till+2)%3;\n\t\t\t\tfor(int zer = 0 ; zer <= zeros ; zer++)\n\t\t\t\t{\n\t\t\t\t\tfor(int sing = 0 ; sing <= n ; sing++)\n\t\t\t\t\t\tif(dp[a][zer][sing] != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(str[till] == '0')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdp[b][zer+1][sing+1] = (dp[b][zer+1][sing+1] + dp[a][zer][sing]);\n\t\t\t\t\t\t\t\tif(dp[b][zer+1][sing+1] >= MOD)\n\t\t\t\t\t\t\t\t\tdp[b][zer+1][sing+1] -= MOD;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdp[b][zer][sing+1] = (dp[b][zer][sing+1] + dp[a][zer][sing]);\n\t\t\t\t\t\t\t\tif(dp[b][zer][sing+1] >= MOD)\n\t\t\t\t\t\t\t\t\tdp[b][zer][sing+1] -= MOD;\n\t\t\t\t\t\t\t\tif(till+2 <= n)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdp[c][zer][sing] = (dp[c][zer][sing] + dp[a][zer][sing]);\n\t\t\t\t\t\t\t\t\tif(dp[c][zer][sing] >= MOD)\n\t\t\t\t\t\t\t\t\t\tdp[c][zer][sing] -= MOD;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor(int zer = 0 ; zer <= zeros ; zer++)\n\t\t\t\t\tfor(int sing = 0 ; sing <= n ; sing++)\n\t\t\t\t\t\tdp[a][zer][sing] = 0;\n\t\t\t}\n\n\t\t\tboolean find = false;\n\t\t\tint res = 0;\n\t\t\tfor(int zer = 0 ; zer <= zeros ; zer++)\n\t\t\t{\n\t\t\t\tfor(int sing = 0 ; sing <= n ; sing++)\n\t\t\t\t\tif(dp[n%3][zer][sing] != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tfind = true;\n\t\t\t\t\t\tres = dp[n%3][zer][sing];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tif(find)\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tSystem.out.println(res);\n\t\t}\n\t}\n}", "generated_code": "import java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\nimport java.util.Scanner;\nimport java.util.StringTokenizer;\n\npublic class Main\n{\n\tprivate static final int MOD = 1000000000 + 7;\n\tpublic static void main(String[] args) throws IOException\n\t{\n\t\tScanner in = new Scanner(System.in);\n\n\t\tint tc = in.nextInt();\n\n\t\tint [][][] dp = new int[3][200+1][200+1];\n\n\t\twhile(tc-- > 0)\n\t\t{\n\t\t\tchar [] str = in.next().toCharArray();\n\t\t\tint zeros = 0;\n\t\t\tfor(char c : str)\n\t\t\t\tif(c == '0')\n\t\t\t\t\tzeros++;\n\n\t\t\tint n = str.length;\n\n\n\t\t\tfor(int [][] fill1 : dp)\n\t\t\t\tfor(int [] fill2 : fill1)\n\t\t\t\t\tArrays.fill(fill2, 0);\n\n\t\t\tdp[0][0][0] = 1;\n\n\t\t\tint a, b, c;\n\t\t\tfor(int till = 0 ; till < n ; till++)\n\t\t\t{\n\t\t\t\ta = till%3;\n\t\t\t\tb = (till+1)%3;\n\t\t\t\tc = (till+2)%3;\n\t\t\t\tfor(int zer = 0 ; zer <= zeros ; zer++)\n\t\t\t\t{\n\t\t\t\t\tfor(int sing = 0 ; sing <= n ; sing++)\n\t\t\t\t\t\tif(dp[a][zer][sing] != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(str[till] == '0')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdp[b][zer+1][sing+1] = (dp[b][zer+1][sing+1] + dp[a][zer][sing]);\n\t\t\t\t\t\t\t\tif(dp[b][zer+1][sing+1] >= MOD)\n\t\t\t\t\t\t\t\t\tdp[b][zer+1][sing+1] -= MOD;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdp[b][zer][sing+1] = (dp[b][zer][sing+1] + dp[a][zer][sing]);\n\t\t\t\t\t\t\t\tif(dp[b][zer][sing+1] >= MOD)\n\t\t\t\t\t\t\t\t\tdp[b][zer][sing+1] -= MOD;\n\t\t\t\t\t\t\t\tif(till+2 <= n)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdp[c][zer][sing] = (dp[c][zer][sing] + dp[a][zer][sing]);\n\t\t\t\t\t\t\t\t\tif(dp[c][zer][sing] >= MOD)\n\t\t\t\t\t\t\t\t\t\tdp[c][zer][sing] -= MOD;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor(int zer = 0 ; zer <= zeros ; zer++)\n\t\t\t\t\tfor(int sing = 0 ; sing <= n ; sing++)\n\t\t\t\t\t\tdp[a][zer][sing] = 0;\n\t\t\t}\n\n\t\t\tboolean find = false;\n\t\t\tint res = 0;\n\t\t\tfor(int zer = 0 ; zer <= zeros ; zer++)\n\t\t\t{\n\t\t\t\tfor(int sing = 0 ; sing <= n ; sing++)\n\t\t\t\t\tif(dp[n%3][zer][sing] != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tfind = true;\n\t\t\t\t\t\tres = dp[n%3][zer][sing];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\tif(find)\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tSystem.out.println(res);\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2578_53__5_1047_0", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String Args[])\n\t{\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint n = scanner.nextInt();\n\t\t scanner.nextLine();\n\t\tfor(int i =0 ; i<n;i++)\n\t\t{\n\t\t\tString name = scanner.nextLine();\n\t\t\tif(name.length()<1)\n\t\t\t\tname = scanner.nextLine();\n\t\t\tint state = 0;\n\t\t\tString name2 = name.toLowerCase().replaceAll(\" \", \"\");\n\t\t\tstate += name2.length()- name2.replace('g', ' ').replaceAll(\" \", \"\").length();\n\t\t\tstate -= name2.replaceAll(\" \", \"\").length()- name2.replace('b', ' ').replaceAll(\" \", \"\").length();\n\t\t\tprintstate(state, name);\n\t\t}\n\t\n\t\t\n\t}\n\tpublic static void printstate(int state,String name)\n\t{\n\t\tif (state>0)\n\t\t\tSystem.out.println(\"\"+name+\" is GOOD\");\n\t\telse if(state<0)\n\t\t\tSystem.out.println(\"\"+name+\" is A BADDY\");\n\t\telse if(state == 0)\n\t\t\tSystem.out.println(\"\"+name+\" is NEUTRAL\");\n\t\t\t\n\t}\n\n}\n", "generated_code": "import java.util.*;\n\npublic class Main {\n\t\tpublic static void main(String[] args){\n\t\t\tint n;\n\t\t\tScanner in = new Scanner(System.in);\n\t\t\twhile(true){\n\t\t\t\tn = in.nextInt();\n\t\t\t\tif(n == -1)\n\t\t\t\t\tbreak;\n\t\t\t\tArrayList<Vertex> V = new ArrayList<Vertex>();\n\t\t\t\tVertex v1 = new Vertex(in.nextInt(),in.nextInt(),-1,-1,-1);\n\t\t\t\tVertex v2 = new Vertex(in.nextInt(),in.nextInt(),-2,-2,-2);\n\t\t\t\tV.add(v1);\n\t\t\t\tV.add(v2);\n\t\t\t\tfor(int i=0;i<=n;i++){\n\t\t\t\t\tString L = in.nextLine();\n\t\t\t\t\tString[] s = L.split(\" \");\n\t\t\t\t\tfor(int j=0;j<s.length-2;j=j+2){\n\t\t\t\t\t\tVertex v3 = new Vertex(Integer.parseInt(s[j]),Integer.parseInt(s[j+1]),(j+1)/2,(j+2)/2,i);\n\t\t\t\t\t\t//System.out.println(Integer.parseInt(s[j])+\" \"+Integer.parseInt(s[j+1])+\" \"+(j+1)/2+\" \"+(j+2)/2);\n\t\t\t\t\t\tV.add(v3);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tSystem.out.println(dijkstra(V));\n\t\t\t\tV.clear();\n\t\t}\n\t}\n\t\tprivate static class Edge {\n\t\t    private double weight;\n\t\t    public Edge(Vertex v1,Vertex v2){\n\t\t    \tif((v1.geti() == v2.geti())&&((v1.getl() == v2.getr())||(v1.getr() == v2.getl())))\n\t\t    \t\tweight = (Math.sqrt(Math.pow( v1.getx() - v2.getx(),2 )+Math.pow( v1.gety() - v2.gety(),2 ) ))/500;\n\t\t    \telse{\n\t\t    \t\tweight = (Math.sqrt(Math.pow( v1.getx() - v2.getx(),2 )+Math.pow( v1.gety() - v2.gety(),2 ) ))/100;\n\t\t    \t}\n\t\t    }\n\t\t    public double getweight(){\n\t\t    \treturn weight;\n\t\t    }\n\t\t}\n\t\tstatic class Vertex{\n\t\t\tprivate int x;\n\t\t\tprivate int y;\n\t\t\tprivate int l;\n\t\t\tprivate int r;\n\t\t\tprivate int i;\n\t\t\tpublic Vertex(int x,int y,int l,int r,int i) {\n\t\t\t\tthis.x = x;\n\t\t\t\tthis.y = y;\n\t\t\t\tthis.l = l;\n\t\t\t\tthis.r = r;\n\t\t\t\tthis.i = i;\n\t\t\t}\n\t\t\tpublic int getx() {\n\t\t\t    return x;\n\t\t\t  }\n\t\t\tpublic int gety() {\n\t\t\t\t    return y;\n\t\t\t  }\n\t\t\tpublic int getl() {\n\t\t\t    return l;\n\t\t }\n\t\t\tpublic int geti() {\n\t\t\t    return i;\n\t\t }\n\t\t\tpublic int getr() {\n\t\t\t    return r;\n\t\t }\n\t\t}\n\t\tstatic int dijkstra(ArrayList<Vertex> V){\n\t    \tdouble[][] graph = new double[V.size()][V.size()] ;\n\t    \tfor(int u=0;u<V.size();u++){\n\t    \t\tfor(int v=0;v<V.size();v++){\n\t    \t\t\tEdge e = new Edge(V.get(u),V.get(v));\n\t    \t\t\tgraph[u][v] = e.getweight();\n\t    \t\t}\n\t    \t}\n\t        double dist[] = new double[V.size()];\n\t        Boolean sptSet[] = new Boolean[V.size()];\n\t        for (int i = 0; i < V.size(); i++){\n\t            dist[i] = Integer.MAX_VALUE;\n\t            sptSet[i] = false;\n\t        }\n\t        dist[0] = 0;\n\t        for (int i=0;i< V.size()-1;i++) {\n\t            double min = Integer.MAX_VALUE;\n\t            int\tu=-1;\n\t            for (int v= 0;v<V.size();v++)\n\t                if (sptSet[v] == false && dist[v] <= min){\n\t                    min = dist[v];\n\t                    u = v;\n\t                }\n\t            sptSet[u] = true;\n\t            for (int v=0;v<V.size();v++)\n\t                if (!sptSet[v] &&  dist[u]+graph[u][v] < dist[v]){\n\t                    dist[v] = dist[u] + graph[u][v];\n\t                }\n\t\t}\n\t        int a = (int) dist[1];\n\t        if(dist[1]-a >= a+1- dist[1])\n\t        \treturn a+1;\n\t        else\n\t        \treturn a;\n\t    }\n}", "score": 0.0}
{"id": "SHARE_6_1005_3__1_2741_7", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\t\n\t\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t\tScanner scanConsole = new Scanner(System.in);\n\t\t\n\t\twhile ( scanConsole.hasNext() ) {\n\t\t\t\n\t\t\tPerimeterCalculator ex = new PerimeterCalculator();\n\t\t\t\n\t\t\tint mouseRow = -1, mouseColumn = -1;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tString temp = \"\";\n\t\t\t\n\t\t\tex.rows = scanConsole.nextInt();\n\t\t\tex.columns = scanConsole.nextInt();\n\t\t\t\n\t\t\tex.shape = new String[ex.rows][ex.columns];\n\t\t\tex.check = new int[ex.rows][ex.columns];\n\t\t\t\n\t\t\tmouseRow = scanConsole.nextInt();\n\t\t\tmouseColumn = scanConsole.nextInt();\n\t\t\t\n\t\t\tif ( ex.rows == 0 && ex.columns == 0 && mouseRow == 0 && mouseColumn == 0 ) break;\n\t\t\t\t \n\t\t\t\n\t\t\tscanConsole.nextLine();\n\t\t\t\n\t\t\tfor (int i = 0; i < ex.rows; i++) {\n\t\t\t\t\n\t\t\t\ttemp = scanConsole.nextLine();\n\t\t\t\t\n\t\t\t\tfor (int j = 0; j < ex.columns; j++) {\n\t\t\t\t\t\n\t\t\t\t\tex.shape[i][j] = temp.substring(j, j+1);\n\t\t\t\t\t\n\t\t\t\t\tif ( ex.shape[i][j].contains(\"X\") ) ex.check[i][j] = 0;\n\t\t\t\t\telse if ( ex.shape[i][j].contains(\".\") ) ex.check[i][j] = -1;\n\t\t\t\t}\t\t\t\n\t\t\t}\t\n\n\t\t// recusive function call\n\t\t\n\t\t\tex.calculate( mouseRow-1, mouseColumn-1 );\n\t\t\t\n\t\t\tSystem.out.println( ex.perimeter );\n\t\t\t\n\t\t\n\t\t}\n\t\t\n\t\tscanConsole.close();\n\t\t// method main\n\t}\t\n\t\n\t\n\t\n\t\n\t\n\t// class Main\n\t\n}\n\n\n\n\n\n\n\nclass PerimeterCalculator {\n\t\n\tpublic String[][] shape;\n\tpublic int[][] check;\n\t\n\tpublic int rows,columns;\n\t\n\tpublic int perimeter = 0;\n\t\n\t\n\tpublic void calculate( int i, int j ) {\n\t\t\n\t\tcheck[i][j] = 1;\n\t\t\n\t\t//up\n\t\tif ( ((i-1 > -1) && shape[i][j].contains(\"X\") && check[i-1][j] == -1) || !(i-1 > -1) ) perimeter++;\n\t\t\n\t\t//right\n\t\tif ( (( j+1 < columns ) && shape[i][j].contains(\"X\") && check[i][j+1] == -1) || !(j+1 < columns)  ) perimeter++;\n\t\t\n\t\t\n\t\t//left\n\t\tif ( (( j-1 > -1 ) && shape[i][j].contains(\"X\") && check[i][j-1] == -1) ||  !( j-1 > -1 ) ) perimeter++;\n\t\t\n\t\t//down\n\t\tif (  (( i+1 < rows ) && shape[i][j].contains(\"X\") && check[i+1][j] == -1) || !( i+1 < rows ) ) perimeter++;\n\t\t\n\t\t\t\n\t\t\n\t\t\n\t\tif ( i-1 > -1 ){\n\t\t\t// up\n\t\t\t\n\t\t\tif ( check[i-1][j] == 0 ) { check[i-1][j] = 1; calculate ( i-1, j ); }\n\t\t\t\n\t\t\telse if ( check[i-1][j] == 1 );\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tif ( j+1 < columns ) {\n\t\t\t//right\n\t\t\t\n\t\t\tif ( check[i][j+1] == 0 ){ check[i][j+1] = 1; calculate ( i, j+1 ); }\n\t\t\t\n\t\t\telse if ( check[i][j+1] == 1 );\t\n\t\t}\n\t\t\n\t\t\n\t\tif ( j-1 > -1 ) {\n\t\t\t//left\n\t\t\t\n\t\t\tif ( check[i][j-1] == 0 ){ check[i][j-1] = 1; calculate ( i, j-1 ); }\n\t\t\t\n\t\t\telse if ( check[i][j-1] == 1 );\t\t\n\t\t}\n\t\t\n\t\t\n\t\tif ( i+1 < rows ){\n\t\t\t//down\n\t\t\t\n\t\t\tif ( check[i+1][j] == 0 ){check[i+1][j] = 1; calculate ( i+1, j ); }\n\t\t\t\n\t\t\telse if ( check[i+1][j] == 1 );\t\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tif ( i-1 > -1 && j+1 < columns  ) {\t\n\t\t\t//up-right\n\n\t\t\tif ( check[i-1][j+1] == 0 ){ check[i-1][j+1] = 1; calculate ( i-1, j+1 ); }\n\t\t\t\n\t\t\telse if ( check[i-1][j+1] == 1 );\t\n\t\t}\n\t\t\n\t\t\n\t\tif ( i-1 > -1 && j-1 > -1 ) {\t\n\t\t\t//up-left\n\t\t\t\n\t\t\tif ( check[i-1][j-1] == 0 ){ check[i-1][j-1] = 1; calculate ( i-1, j-1 ); }\n\t\t\t\n\t\t\telse if ( check[i-1][j-1] == 1 );\t\n\t\t}\n\t\t\n\t\t\n\t\tif ( i+1 < rows && j+1 < columns ){\t\n\t\t\t//down-right\n\n\t\t\tif ( check[i+1][j+1] == 0 ){ check[i+1][j+1] = 1; calculate ( i+1, j+1 ); }\n\t\t\t\n\t\t\telse if ( check[i+1][j+1] == 1 );\t\n\t\t}\n\t\t\n\t\t\n\t\tif ( i+1 < rows && j-1 > -1 ) {\n\t\t\t//down-left\n\t\t\n\t\t\tif ( check[i+1][j-1] == 0 ){ check[i+1][j-1] = 1; calculate ( i+1, j-1 ); }\n\t\t\t\n\t\t\telse if ( check[i+1][j-1] == 1 );\t\n\t\t}\n\t\t\n\t\t// calculate\n\t\t\n\t}\n\t\n\t\n\t// class perimeter\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "generated_code": "import java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int[] xStep = {-2,-1,1,2,2,1,-1,-2};\n        int[] yStep = {-1,-2,-2,-1,1,2,2,1};\n        while(s.hasNext()){\n            String start = s.next();\n            String finish = s.next();\n            ArrayDeque<Node> q = new ArrayDeque();\n            int x = start.charAt(1)-'1';\n            int y = start.charAt(0)-'a';\n            int fx = finish.charAt(1)-'1';\n            int fy = finish.charAt(0)-'a';\n            if(fx == x && fy == y){\n                System.out.println(\"To get from \"+start+\" to \"+finish+\" takes 0 knight moves.\");\n                continue;\n            }\n            q.add(new Node(x,y));\n            lbl: while(!q.isEmpty()){\n                Node tmp = q.removeFirst();\n                for(int i=0;i<8;i++){\n                    int xtmp = tmp.x + xStep[i];\n                    int ytmp = tmp.y + yStep[i];\n                    if(xtmp >= 0 && xtmp < 8){\n                        if(ytmp >= 0 && ytmp < 8){\n                            Node tt = new Node(xtmp, ytmp);\n                            tt.value = tmp.value+1;\n                            q.add(tt);\n                            if(tt.x == fx && tt.y == fy){\n                                System.out.println(\"To get from \"+start+\" to \"+finish+\" takes \"+tt.value+\" knight moves.\");\n                                break lbl;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n}\n\nclass Node{\n    int x,y,value;\n    public Node(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n    \n}", "score": 0.0}
{"id": "SHARE_1_1326_17__1_1326_9", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    static Scanner in = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int[][] s = new int[201][201];\n        for (int h = 1; true; h++) {\n            int n = in.nextInt();\n            int p = in.nextInt();\n            if (n == 0) {\n                break;\n            }\n            s = new int[201][201];\n            int x1, x2, maxx, minx;\n            int y1, y2, maxy, miny;\n            for (int i = 0; i < n; i++) {\n                int f = in.nextInt();\n                x1 = in.nextInt();\n                y1 = in.nextInt();\n                x2 = in.nextInt();\n                y2 = in.nextInt();\n                x1 += 100;\n                x2 += 100;\n                y1 += 100;\n                y2 += 100;\n                if (x1 > x2) {\n                    maxx = x1;\n                    minx = x2;\n                } else {\n                    maxx = x2;\n                    minx = x1;\n                }\n                if (y1 > y2) {\n                    maxy = y1;\n                    miny = y2;\n                } else {\n                    maxy = y2;\n                    miny = y1;\n                }\n                for (int j = minx; j < maxx; j++) {\n                    for (int k = miny; k < maxy; k++) {\n                        s[j][k] = f;\n\n                    }\n                }\n            }\n            int counter = 0;\n            for (int i = 0; i < 201; i++) {\n                for (int j = 0; j < 201; j++) {\n                    if (s[i][j] == p) {\n                        counter++;\n                    }\n                }\n            }\n            System.out.println(\"The area of color \"+p+\" in dataset \"+h+ \" is: \"+counter);\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        \n        Scanner input = new Scanner( System.in );\n        \n        int[][] a = new int[200][200];\n        int n, c, cp, x, xp, y, yp, xmax, xmin, ymax, ymin;\n        int i, j, k, res, datasetCnt = 1;\n        while( ( n = input.nextInt() ) != 0 ){\n            res = 0;\n            c = input.nextInt();\n            \n            for( i = 0; i < n; i++ ){ \n                cp = input.nextInt();\n                x = input.nextInt() + 100; y = input.nextInt() + 100; xp = input.nextInt() + 100; yp =input.nextInt()+100;\n                xmax = Math.max( x, xp); ymax = Math.max( y, yp );\n                xmin = Math.min( x, xp); ymin = Math.min( y, yp );\n                for( j = xmin; j < xmax; j++ ){\n                    for( k = ymin; k < ymax; k++ ){\n                        a[j][k] = cp;\n                    }\n                }\n                \n            }\n            \n            \n            for( i = 0; i < 200; i++ ){\n                for( j = 0; j < 200; j++ ){\n                    if( a[i][j] == c )\n                        res++;\n                    a[i][j] = 0;\n                }\n            }\n            \n            System.out.printf( \"The area of color %d in dataset %d is: %d\\n\", c, datasetCnt++, res );\n            \n        }\n    }\n    \n}", "score": 1.0}
{"id": "SHARE_1_1001_14__1_1001_250", "golden_code": "import java.util.Scanner;\nclass Main\n{\npublic static void main(String [] arg)\n{\nScanner scan = new Scanner(System.in);\nint a,b,sum = 0;\nwhile(scan.hasNextInt())\n{a=scan.nextInt();\nb=scan.nextInt();\nsum=a+b;\nSystem.out.println(sum);}\n}\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n\n   \n    public static void main(String[] args) {\n      \n        Scanner scanner =new Scanner(System.in);\n        while(scanner.hasNext() ){\n        int a=scanner.nextInt();\n        int b=scanner.nextInt();\n            System.out.println((a+b));\n     \n    }}\n    \n}", "score": 1.0}
{"id": "SHARE_1_1001_433__1_1001_246", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner scanner = new Scanner(System.in);\n\n        while (scanner.hasNext()) {\n            int a = scanner.nextInt();\n            int b = scanner.nextInt();\n            System.out.println(a + b);\n        }\n    }\n}\n", "generated_code": "import java.util.*;\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner s=new Scanner(System.in);\n\t\twhile(s.hasNext())\n\t\t\tSystem.out.println(s.nextInt()+s.nextInt());\n\t\t\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2848_30__1_2554_2", "golden_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\n/**\n * Created by mhd on 11/24/16.\n */\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int T = input.nextInt();\n        while (T-->0) {\n            int m = input.nextInt();\n            int n = input.nextInt();\n            int arr[] = new int[m];\n            for (int i = 0; i < m; i++) {\n                arr[i] = input.nextInt();\n            }\n            int dir = 1;\n            int lastKilled =-1;\n            int turns = m+5;\n            int ind = 0;\n            while (true){\n//\n//                if (arr[ind] <= 0)\n//                    ind+=dir;\n                if (arr[ind] > 0)\n                {\n                    arr[ind]-=n;\n                    lastKilled = ind;\n                    --turns;\n                    if (arr[ind] <= 0) {\n                        dir *= -1;\n                    }\n                }\n\n\n                /////////////////////////////\n                if (ind == arr.length-1){\n                    if (dir == 1){\n                        ind = 0;\n                    }\n                    else {\n                        ind += dir;\n                    }\n                }\n                else if (ind == 0){\n                    if (dir == -1){\n                        ind = arr.length-1;\n                    }\n                    else{\n                        ind += dir;\n                    }\n                }\n                else\n                    ind +=dir;\n\n                if (reachZ(arr))\n                    break;\n                ////////////////////////////\n                if (turns==0){\n                    break;\n                }\n            }\n            System.out.println(lastKilled+1);\n        }\n    }\n    static boolean reachZ(int[] arr){\n        for (int i = 0; i<arr.length ; i++){\n            if (arr[i]>0)\n                return false;\n        }\n        return true;\n    }\n}\n", "generated_code": "import java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        LinkedList<Model> models = input_analysis() ;\n        for(int temp=0 ; temp < models.size() ; temp++) {\n            evaluator(models.get(temp));\n            System.out.println(\"+++\");\n        }\n    }\n    //creates new mandatory feature\n    static boolean parents_checker(String [] features_name , int not_to_check)\n    {\n        for(int temp=0 ; temp <features_name.length  ; temp++) {\n            if (temp == not_to_check)\n                continue;\n            if (features_name[temp].equals(\"u\"))\n                return false;\n        }\n        return true;\n    }\n\n    static LinkedList<Model> input_analysis()\n    {\n        LinkedList<Model> moudles = new LinkedList<>();\n        String temp=\"\";\n        Scanner scan = new Scanner(System.in);\n        temp = scan.nextLine();\n        while ( !temp.equals(\"###\"))\n        {\n            LinkedList<Feature_defenition> feature_list = new LinkedList<>();\n            LinkedList<String[]> expression_to_evaluate = new LinkedList<>();\n            while (!temp.equals(\"#\") ){\n                feature_list.add(feature_defenition_analysis(temp));\n                temp =scan.nextLine();\n            }\n            temp = scan.nextLine();\n            while(!temp.equals(\"##\")){\n                expression_to_evaluate.add(temp.trim().replaceAll(\"\\\\s+\" , \"\").substring(1).split(\"[,{}]\"));\n                temp = scan.nextLine();\n            }\n            temp = scan.nextLine();\n            moudles.add(new Model(feature_list,expression_to_evaluate));\n        }\n        return moudles;\n    }\n    //it analysis the every moudle sentence componentd\n    static Feature_defenition feature_defenition_analysis(String temp){\n        String temp_type;\n        String[] temp_compontet;\n        if (temp.contains(\"|\"))\n        {\n            temp_type = \"or\";\n            temp_compontet = temp.trim().replaceAll(\"\\\\s+\" , \"\").split(\"[|=]\");\n        }\n        else if (temp.contains(\"^\"))\n        {\n            temp_type = \"xor\";\n            temp_compontet = temp.trim().replaceAll(\"\\\\s+\" , \"\").split(\"[/^=]\");\n        }\n        else\n        {\n            temp_type = \"mandatory\";\n            temp_compontet = temp.trim().replaceAll(\"\\\\s+\" , \"\").split(\"[+=]\");\n        }\n        return new Feature_defenition(temp_compontet,temp_type);\n    }\n\n\n    static void evaluator(Model model)\n    {\n        for(int temp2=0; temp2<model.featurs_to_evaluate_expressions.size() ; temp2++)\n        {\n            String[][] list_to_evaluate = new String[2][model.featurs_to_evaluate_expressions.get(temp2).length];\n            list_to_evaluate[0] = model.featurs_to_evaluate_expressions.get(temp2);\n            Arrays.fill(list_to_evaluate[1], \"u\");\n\n            if(Feature.name_finder(model.featurs_to_evaluate_expressions.get(temp2), model.root.name_getter())==-1)\n                System.out.println(\"Invalid\");\n            else if(model.root.evaluate(list_to_evaluate))\n            {\n                if (parents_checker(list_to_evaluate[1],Feature.name_finder(model.featurs_to_evaluate_expressions.get(temp2), model.root.name_getter())))\n                    System.out.println(\"Valid\");\n                else\n                    System.out.println(\"Invalid\");\n            }\n            else\n                System.out.println(\"Invalid\");\n        }\n    }\n}\n\nclass Model {\n    LinkedList<Feature_defenition> feature_defenitions = new LinkedList<>();\n    LinkedList<String[]> featurs_to_evaluate_expressions = new LinkedList<>();\n    Feature root ;\n\n\n    Model(LinkedList<Feature_defenition> features, LinkedList<String[]> expressions) {\n        this.featurs_to_evaluate_expressions = expressions;\n        this.feature_defenitions = features;\n\n        if (this.feature_defenitions.get(0).feature_type.equals(\"mandatory\"))\n            this.root = Mandatory_feature.mandatory_maker(feature_defenitions, 0);\n        else if (this.feature_defenitions.get(0).feature_type.equals(\"or\"))\n            this.root=Or_feature.Or_maker(this.feature_defenitions, 0);\n        else\n            this.root = Xor_feature.Xor_maker( this.feature_defenitions, 0 );\n    }\n}\n\n\nclass Xor_feature extends Feature {\n\n    LinkedList<Feature> Xor_sub_feature =new LinkedList<>() ;\n\n    public boolean evaluate(String[][] features_to_evaluate){\n        int name_index=0;\n        int number_of_features_in_list=0;\n        int Xor_found_feature_index=0;\n        for(int temp=0 ; temp<Xor_sub_feature.size() ; temp++) {\n            name_index = name_finder(features_to_evaluate[0], this.Xor_sub_feature.get(temp).name);\n            if (name_index != -1) {\n                number_of_features_in_list++;\n                features_to_evaluate[1][name_index]=\"c\";\n                Xor_found_feature_index = temp;\n            }\n        }\n        if(number_of_features_in_list!=1)\n            return false;\n        if(! Xor_sub_feature.get(Xor_found_feature_index).evaluate(features_to_evaluate))\n            return false;\n        return true;\n    }\n\n    public Xor_feature(LinkedList<Feature> sub_features , String name){\n        super(name);\n        this.Xor_sub_feature = sub_features;\n    }\n\n\n    public static Feature Xor_maker (LinkedList<Feature_defenition> feature_defenition , int feature_index) {\n        LinkedList<Feature> XOR_sub_features = new LinkedList<>();\n        String [] feature_components_name_temp = feature_defenition.get(feature_index).feature_components_name;\n        for (int temp=1 ; temp < feature_components_name_temp.length ; temp++)\n        {\n            Feature feature_temp = feature_finder(feature_defenition ,feature_components_name_temp[temp] );\n            if (feature_temp == null)\n                feature_temp = new Basic_feature(feature_components_name_temp[temp]);\n            XOR_sub_features.add(feature_temp);\n        }\n        feature_defenition.remove(feature_index);\n        return new Xor_feature(XOR_sub_features, feature_components_name_temp[0]);\n\n    }\n}\n\n\nclass Or_feature extends Feature {\n    LinkedList<Feature> Or_sub_features = new LinkedList<>() ;\n\n    public boolean evaluate(String [][] feautures_to_evaluate){\n        int feature_number=0;\n        for (int temp=0 ; temp < this.Or_sub_features.size() ; temp ++)\n        {\n            int name_index =  name_finder(feautures_to_evaluate[0], this.Or_sub_features.get(temp).name);\n            if (name_index!= -1) {\n                if(! this.Or_sub_features.get(temp).evaluate(feautures_to_evaluate))\n                    return false;\n                feautures_to_evaluate[1][name_index] = \"c\";\n                feature_number++;\n            }\n        }\n        if(feature_number ==0)\n            return false;\n        return true;\n    }\n    public Or_feature(LinkedList<Feature> sub_features , String name)\n    {\n        super(name);\n        this.Or_sub_features = sub_features;\n    }\n\n\n    public static Feature Or_maker(LinkedList<Feature_defenition> feature_defenition , int feature_index){\n        LinkedList<Feature> OR_sub_features = new LinkedList<>();\n        String[] feature_components_name_temp = feature_defenition.get(feature_index).feature_components_name;\n        for (int temp=1 ; temp < feature_components_name_temp.length ; temp++)\n        {\n            Feature feature_temp = feature_finder(feature_defenition ,feature_components_name_temp[temp] );\n            if (feature_temp == null)\n                feature_temp = new Basic_feature(feature_components_name_temp[temp]);\n            OR_sub_features.add(feature_temp);\n        }\n        return new Or_feature(OR_sub_features, feature_components_name_temp[0]);\n\n    }\n}\n\n\nclass Mandatory_feature extends Feature {\n\n    private LinkedList<Feature> mandatory_sub_feature = new LinkedList<>();\n    private LinkedList<Feature> optional_sub_feature = new LinkedList<>() ;\n    //function to evaluate a mandatory_type_object\n    public boolean evaluate(String[][] features_to_evaluate)\n    {\n        for(int temp=0 ; temp< this.mandatory_sub_feature.size() ; temp++)\n        {\n            // checks if the mandatory feature is on the features to evaluate list\n            int name_index =  name_finder(features_to_evaluate[0] , this.mandatory_sub_feature.get(temp).name) ;\n            if (name_index==-1)\n                return false;\n            features_to_evaluate[1][name_index] = \"c\";\n            if(!this.mandatory_sub_feature.get(temp).evaluate(features_to_evaluate))\n                return false;\n        }\n        for (int temp=0 ; temp<this.optional_sub_feature.size() ; temp++)\n        {\n            int name_index = name_finder(features_to_evaluate[0] , this.optional_sub_feature.get(temp).name);\n            if ( name_index != -1)\n            {\n                if(! this.optional_sub_feature.get(temp).evaluate(features_to_evaluate))\n                    return false;\n                features_to_evaluate[1][name_index] = \"c\";\n            }\n        }\n        return true;\n    }\n\n    public Mandatory_feature(LinkedList<Feature> mandatory_sub_feature , LinkedList<Feature> optional_sub_features , String name){\n        super(name);\n        this.mandatory_sub_feature = mandatory_sub_feature;\n        this.optional_sub_feature = optional_sub_features;\n    }\n\n    public static Feature mandatory_maker(LinkedList<Feature_defenition> feature_defenition , int feature_index){\n        LinkedList<Feature> mandatory_sub_features = new LinkedList<>();\n        LinkedList <Feature> optional_sub_features = new LinkedList<>();\n        String[] feature_components_name_temp = feature_defenition.get(feature_index).feature_components_name;\n        for (int temp=1 ; temp < feature_components_name_temp.length ; temp++)\n        {\n            int optional_indicator=0;\n            if (feature_components_name_temp[temp].contains(\"?\"))\n            {\n                optional_indicator++;\n                feature_components_name_temp[temp]= feature_components_name_temp[temp].substring(1);\n            }\n            Feature feature_temp = feature_finder(feature_defenition ,feature_components_name_temp[temp] );\n            if (feature_temp == null)\n                feature_temp = new Basic_feature(feature_components_name_temp[temp]);\n            if (optional_indicator==1)\n                optional_sub_features.add(feature_temp);\n            else\n                mandatory_sub_features.add(feature_temp);\n        }\n        return new Mandatory_feature(mandatory_sub_features,optional_sub_features,feature_components_name_temp[0]);\n    }\n\n}\n\n\nclass Feature_defenition {\n    public String[] feature_components_name ;\n    public String feature_type ;\n    public Feature_defenition(String[] names , String type){\n        this.feature_components_name = names;\n        this.feature_type = type;\n    }\n\n}\n\n\nabstract class Feature {\n    String name;\n    public abstract boolean evaluate(String[][] features_to_evaluate);\n\n    public Feature(String name){\n\n        this.name = name;\n    }\n\n    public String name_getter() { return this.name;}\n\n\n    public static int name_finder(String[] string_to_evaluate , String name){\n        for(int temp=0 ; temp< string_to_evaluate.length ; temp++)\n        {\n            if(string_to_evaluate[temp].equals(name))\n                return temp;\n        }\n        return -1;\n    }\n\n    static Feature feature_finder (LinkedList<Feature_defenition> feature_defenition, String name)\n    {\n        for (int temp=0 ; temp < feature_defenition.size() ; temp++) {\n            if (feature_defenition.get(temp).feature_components_name[0].equals(name))\n            {\n                if (feature_defenition.get(temp).feature_type.equals(\"mandatory\"))\n                    return(Mandatory_feature.mandatory_maker(feature_defenition , temp));\n                else if (feature_defenition.get(temp).feature_type.equals(\"or\"))\n                    return(Or_feature.Or_maker(feature_defenition, temp));\n                else\n                    return (Xor_feature.Xor_maker(feature_defenition, temp));\n            }\n        }\n        return null;\n    }\n}\n\n\nclass Basic_feature extends Feature {\n    public boolean evaluate(String [][] not_important){\n        return true;\n    }\n    public  Basic_feature(String name)\n    {\n        super(name);\n    }\n}\n\n\n\n\n", "score": 0.0}
{"id": "SHARE_1_1656_2__1_1001_386", "golden_code": "import java.util.*;\nclass Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile(scan.hasNextInt())\n\t\t{\n\t\t\tLinkedList<Integer> arr = new LinkedList<Integer>();\n\t\t\tint s = 0;\n\t\t\twhile(arr.size()==0 || arr.getLast()!=0)\n\t\t\t{\n\t\t\t\tarr.addLast(scan.nextInt());\n\t\t\t\tif(arr.getLast()==-1)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(arr.getLast()==-1)\n\t\t\t\tbreak;\n\t\t\tCollections.sort(arr);\n\t\t\tfor(int i=0;i<arr.size();i++)\n\t\t\t\tfor(int j=i+1;j<arr.size();j++)\n\t\t\t\t\tif(2*arr.get(i)==arr.get(j))\n\t\t\t\t\t\ts++;\n\t\t\tSystem.out.println(s);\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\twhile(sc.hasNext())\n\t\tSystem.out.println(sc.nextInt()+sc.nextInt());\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_262__1_1001_203", "golden_code": "\nimport java.util.Scanner;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author Site-09\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner in=new Scanner(System.in);\n        int a;\n        int b;\n        while(in.hasNext()){\n            a=in.nextInt();\n            b=in.nextInt();\n            System.out.println(a+b);\n        }\n\n    }\n\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1230_93__1_1230_115", "golden_code": "\nimport java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (true) {\n            BigInteger number = in.nextBigInteger();\n            if (number.compareTo(new BigInteger(\"0\")) == 0) {\n                break;\n            }\n            BigInteger sum;\n            while (number.compareTo(new BigInteger(\"9\")) == 1) {\n                sum = new BigInteger(\"0\");\n                while (number.compareTo(new BigInteger(\"0\")) == 1) {\n                    sum = sum.add(number.mod(new BigInteger(\"10\")));\n                    number = number.divide(new BigInteger(\"10\"));\n\n                }\n                number = sum;\n            }\n            System.out.println(number.toString());\n        }\n    }\n}\n", "generated_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        BigInteger b;\n\n        while (scanner.hasNext()) {\n            b = scanner.nextBigInteger();\n            if (b.intValue()==0) {\n                break;\n            } else if (b.mod(new BigInteger(String.valueOf(9))).intValue()==0){\n                System.out.println(9);\n            } else {\n                System.out.println(b.mod(new BigInteger(String.valueOf(9))));\n            }\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1017_15__1_2610_8", "golden_code": "\nimport java.util.Scanner;\n\n/**\n *\n * @author soroush\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        while (true) {\n            int a = sc.nextInt();\n            if (a == 0) {\n                break;\n            }\n            String s = sc.next();\n            int[][] arr = new int[20][2];\n            for (int i = 0; i < 20; i++) {\n                arr[i][0] = 25;\n                arr[i][1] = 11 + i;\n            }\n            boolean b = true;\n            for (int j = 0; j < a; j++) {\n                if (arr[19][0] > 50 || arr[19][1] > 50 || arr[19][0] < 1 || arr[19][1] < 1) {\n                    System.out.println(\"The worm ran off the board on move \" + (j) + \".\");\n                    b = false;\n                    break;\n                }\n                for (int i = 0; i < 19; i++) {\n                    arr[i][0] = arr[i + 1][0];\n                    arr[i][1] = arr[i + 1][1];\n                }\n                if (j == 0) {\n                    if (s.charAt(j) == 'N') {\n                        arr[19][0] = arr[18][0] + 1;\n                        arr[19][1] = arr[18][1];\n                    } else if (s.charAt(j) == 'E') {\n                        arr[19][0] = arr[18][0];\n                        arr[19][1] = arr[18][1] + 1;\n                    } else if (s.charAt(j) == 'S') {\n                        arr[19][0] = arr[18][0] - 1;\n                        arr[19][1] = arr[18][1];\n                    } else {\n                        b = false;\n                    }\n                } else if (s.charAt(j - 1) == 'S') {\n                    if (s.charAt(j) == 'W') {\n                        arr[19][0] = arr[18][0];\n                        arr[19][1] = arr[18][1] - 1;\n                    } else if (s.charAt(j) == 'E') {\n                        arr[19][0] = arr[18][0];\n                        arr[19][1] = arr[18][1] + 1;\n                    } else if (s.charAt(j) == 'S') {\n                        arr[19][0] = arr[18][0] - 1;\n                        arr[19][1] = arr[18][1];\n                    } else {\n                        b = false;\n                    }\n                } else if (s.charAt(j - 1) == 'E') {\n                    if (s.charAt(j) == 'N') {\n                        arr[19][0] = arr[18][0] + 1;\n                        arr[19][1] = arr[18][1];\n                    } else if (s.charAt(j) == 'E') {\n                        arr[19][0] = arr[18][0];\n                        arr[19][1] = arr[18][1] + 1;\n                    } else if (s.charAt(j) == 'S') {\n                        arr[19][0] = arr[18][0] - 1;\n                        arr[19][1] = arr[18][1];\n                    } else {\n                        b = false;\n                    }\n                } else if (s.charAt(j - 1) == 'W') {\n                    if (s.charAt(j) == 'N') {\n                        arr[19][0] = arr[18][0] + 1;\n                        arr[19][1] = arr[18][1];\n                    } else if (s.charAt(j) == 'W') {\n                        arr[19][0] = arr[18][0];\n                        arr[19][1] = arr[18][1] - 1;\n                    } else if (s.charAt(j) == 'S') {\n                        arr[19][0] = arr[18][0] - 1;\n                        arr[19][1] = arr[18][1];\n                    } else {\n                        b = false;\n                    }\n                } else if (s.charAt(j - 1) == 'N') {\n                    if (s.charAt(j) == 'N') {\n                        arr[19][0] = arr[18][0] + 1;\n                        arr[19][1] = arr[18][1];\n                    } else if (s.charAt(j) == 'E') {\n                        arr[19][0] = arr[18][0];\n                        arr[19][1] = arr[18][1] + 1;\n                    } else if (s.charAt(j) == 'W') {\n                        arr[19][0] = arr[18][0];\n                        arr[19][1] = arr[18][1] - 1;\n                    } else {\n                        b = false;\n                    }\n                }\n                if (!b) {\n                    System.out.println(\"The worm ran into itself on move \" + (j + 1) + \".\");\n                    break;\n                }\n                for (int i = 0; i < 20; i++) {\n                    for (int k = i + 1; k < 20; k++) {\n                        if (arr[i][0] == arr[k][0] && arr[i][1] == arr[k][1]) {\n                            b = false;\n                            break;\n                        }\n                        if (!b) {\n                            break;\n                        }\n                    }\n                }\n                if (!b) {\n                    System.out.println(\"The worm ran into itself on move \" + (j + 1) + \".\");\n                    break;\n                }\n            }\n            if (b) {\n                System.out.println(\"The worm successfully made all \" + a + \" moves.\");\n            }\n\n        }\n    }\n\n}\n", "generated_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\n/**\n * Created by Mina on 1/29/14.\n */\npublic class Main {\n    public static void main(String[]args){\n        Scanner input=new Scanner(System.in);\n        int T=input.nextInt();\n        for(int t=0;t<T;t++){\n            input.nextLine();\n            int d=input.nextInt();\n            int n=input.nextInt();\n            input.nextLine();\n            long []a=new long[n];\n            for(int i=0;i<n;i++){\n                a[i]=input.nextLong();\n                a[i]=a[i]%d;\n            }\n            BigInteger count=new BigInteger(\"0\");\n\n            long []mm=new long[d];\n            int[]sum =new int[n];\n            for(int i=0;i<n;i++){\n                if(i>0){\n                    sum[i]=(int)((sum[i-1]+a[i])%d);\n                    mm[sum[i]]++;\n                }else{\n                    sum[i]=(int)a[i];\n                    mm[sum[i]]++;\n                }\n            }\n\n            for(int i=0;i<d;i++){\n                if(i==0){\n                    String x=mm[i]+\"\";\n                    count=count.add(new BigInteger(x));\n                }\n                if(mm[i]>1){\n                    String x=((mm[i]*(mm[i]-1))/2)+\"\";\n                    count=count.add(new BigInteger(x));\n            }\n\n\n            }\n            System.out.println(count);\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1230_69__1_108014_17", "golden_code": "\nimport java.util.Scanner;\n\n/**\n *\n * @author user\n */\npublic class Main {\n\n    static Scanner in = new Scanner(System.in);\n\n    /**\n     * @param args the command line arguments\n     */\n    static void foo(String st) {\n\n        int x = 0;\n        for (int i = 0; i < st.length(); i++) {\n            x += (int) st.charAt(i) - 48;\n        }\n        if (x >= 10) {\n            foo(x + \"\");\n        } else {\n            System.out.println(x);\n        }\n    }\n\n    public static void main(String[] args) {\n        // TODO code application logic here\n        String st = \"\";\n        while ( !st.equals(\"0\")) {\n            st = in.nextLine();\n            if ( !st.equals(\"0\")) {\n                foo(st);\n            }\n        }\n    }\n}", "generated_code": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n//efault;\n\nimport java.lang.String;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n/**\n *\n * @author mhm\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n  \n        Scanner s=new Scanner(System.in);\n        long t=Integer.parseInt(s.nextLine());\n        for(long i=0;i<t;i++){\n            long max=0;\n            String[] all=new String[100];\n            all=s.nextLine().split(\"\\\\s\");\n            //System.out.println(all[0]+\"aaa\"+all[1]+\"Aaa\"+all[2]);\n            for(int k=0;k<all.length;k++){\n                //long q=ff(all[k]);\n                for(int e=0;e<all.length;e++){\n                    if(e==k)\n                        continue;\n                    long a1=Long.parseLong(all[e]);\n                    long a2=Long.parseLong(all[k]);\n                    long f=f(a1,a2);\n                    //long f1=ff(all[e]);\n                    //long f=pro(f1,q);\n                     //System.out.println(f+\":\");\n                       if(max<f){\n                        max=f;}\n                }\n            }\n            System.out.println(max);\n        }\n        \n        // TODO code application logic here\n        /*(Scanner s = new Scanner(System.in);\n        while (true) {\n            String t = s.nextLine();\n            if (\"0\".equals(t)) {\n                return;\n            }\n            System.out.println(\"jadid\");\n            ArrayList<ArrayList<Integer>> all = new ArrayList<ArrayList<Integer>>();\n            ArrayList<Integer> ans = new ArrayList<Integer>();\n            ArrayList<Integer> temp = new ArrayList<Integer>();\n            int k = -1;\n           // for (int i = 0; i < 101; i++) {\n            //    temp.add(null);\n            //}\n            int sum = 0;\n\n            while (true) {\n                k++;\n                String t1 = s.nextLine();\n                if (t1.equals(\"0\")) {\n                    break;\n                }\n                String[] ll = new String[110];\n                //for (int i = 0; i < 110; i++) {\n                    ll = t1.split(\"\\\\s\");\n                //}\n                int x = Integer.parseInt(ll[0]);\n                all.add(temp);\n                all.get(k).add( Integer.parseInt(ll[0]));\n                for (int i = 1; i < ll.length; i++) {\n                    //5all.add(temp);\n                    all.get(k).add( Integer.parseInt(ll[i]));\n                }\n            }\n            int old=all.size();\n            System.out.println(\"old is  --------------\"+old);\n            for(int w=0;w<old;w++){\n                for(int q=1;q<all.get(w).size();q++){\n                    System.out.println(w+\"!!!!!inja\"+all.get(w).size());\n            \n                    if(isIn((all.get(w).get(q)),all)){\n                        all.add(temp);\n                        all.get(all.size()-1).set(0, all.get(w).get(q));\n                        for(int o=0;o<old;o++){\n                            if(all.get(o).contains((Integer)all.get(w).get(q)))\n                                all.get(all.size()-1).add(all.get(o).get(0));\n                        System.out.println(\"^^^^^^^inja\");\n            \n                        }\n                    }\n                }\n            }\n            System.out.println(\"inja\");\n                for (int j = 0; j < all.size(); j++) {\n                    for (int z = 0; z < all.get(j).size(); z++) {\n                        if (j == z) {\n                            continue;\n                        }\n                        if (!ans.contains(all.get(j).get(z))) {\n                            ans.add(all.get(j).get(z));\n                        }\n                      //  System.out.println(ans.size()+\"--\"+all.size());\n                    }\n                    //System.out.println(\"all.size \"+all.size()+\" ans \"+ ans.size());\n                    if (!(Integer.parseInt(t) == ans.size() - 1)) {\n                    sum++;\n                \n                }\n                \n            }\n\n\n            System.out.println(\"sum is \" + sum);\n            for(int i=0;i<all.size();i++){\n                for(int j=0;j<all.get(i).size();j++)\n                    System.err.print(all.get(i).get(j)+\"-\");\n                   System.out.println();\n            }\n\n\n\n        }\n        //while(s.){\n        //  String a=s.nextLine();\n        //for(int i=0;i<a.length();i++)\n        //if(a[i])a.replace(oldChar, newChar)\n        //a.replaceAll(a, a)\n        //a.re\n        //String t;\n        //char[] x=new char[1000];\n        //for(int i=0;i<)\n        //      a.replaceAll([\"a\"-\"z\"] );\n        //System.out.println(t);}\n*/    }\n\n    private static boolean isIn(Integer integer,ArrayList <ArrayList <Integer>> all) {\n        for(int i=0;i<all.size();i++){\n            if(all.get(i).get(0)==integer)\n                return true;\n        }\n        return false;\n    }\n\n  /*  \n    private static long pro(long p1,long p2) {\n        //return Math.\n        //long p1=Long.parseLong(string);\n        //long p2=Long.parseLong(string0);\n        long p3=0;\n        if(p1>p2)p3=p2; \n                else p3=p1;\n        //p1>p2?p2:p1;\n        \n        long m=1;\n          for(long x=2;x<=p3;x++){\n             // System.out.println(p1+\"----\"+p2+\"-----\"+x+\" m is \"+m);\n              if(p1%x==0 && p2 % x==0)\n                  m=x;\n          }     \n          \n          return m;\n    }\n*/\n  /*  private static long ff(String string) {\n       long x=Long.parseLong(string);\n       long t=2;\n       long sum=1;\n       while(tru/\n     */\n    private static long f(long a,long b){\n        long t1,t2=0;\n        long temp;\n        while(  b!=0){\n           t1=a/b;\n           t2=t1*b;\n           temp=b;\n           b=a-t2;\n           a=temp;\n            \n        }\n        return a;\n    }\n    \n    \n    \n}\n", "score": 0.0}
{"id": "SHARE_1_1001_51__1_1001_127", "golden_code": "import java.util.*;\npublic class Main {\n    static Scanner in=new Scanner(System.in);\n public static void main(String args[]){\n     int a,b;\n     while(in.hasNext()){\n         b=in.nextInt();\n         a=in.nextInt();\n         System.out.println((a+b));\n     }\n }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main ( String[] args)\n\t{\n\tScanner scan = new Scanner ( System.in);\n\tint sum=0;\n\twhile ( scan.hasNextLine())\n\t{\n\tint num1=scan.nextInt();\n\tint num2 = scan.nextInt();\n\t sum = num1+num2;\n\tSystem.out.println(sum);\n\t}\n\t\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2690_0__1_1017_7", "golden_code": "/*\nID: a.elahi1\nLANG: JAVA\nTASK: colori\n*/\n\nimport java.util.*;\nimport java.io.*;\n\nimport static java.lang.Math.*;\n\npublic class Main\n{\n\tpublic static void main(String[] args) throws Exception\n\t{\n\t\tScanner scanner = new Scanner(System.in);\n\t\twhile(scanner.hasNext())\n\t\t{\n\t\t\tint cnt = scanner.nextInt();\n\t\t\tint term = scanner.nextInt();\n\t\t\tint kooft = scanner.nextInt();\n\t\t\tdouble [][] money = new double[term+1][cnt];\n\t\t\tdouble [] percentage = new double[cnt];\n\t\t\tdouble [] tax = new double[cnt];\n\t\t\tfor(int i=0;i<cnt;i++)\n\t\t\t\ttax[i] = scanner.nextDouble();\n\t\t\tfor(int i=0;i<cnt;i++)\n\t\t\t\tpercentage[i] = scanner.nextDouble();\n\t\t\tfor(int i=0;i<cnt;i++)\n\t\t\t\tmoney[0][i] = scanner.nextDouble();\n\n\n\t\t\tfor(int i=1;i<=term;i++)\n\t\t\t{\n\t\t\t\tif((i-1)%kooft==0)\n\t\t\t\t{\n\t\t\t\t\tdouble []original = get_original(money[0],money[i-1]);\n\t\t\t\t\tfor(int j=0;j<cnt;j++)\n\t\t\t\t\t\tmoney[i-1][j] = original[j];\n\t\t\t\t}\n\t\t\t\tfor(int j=0;j<cnt;j++)\n\t\t\t\t{\n\t\t\t\t\tmoney[i][j] = money[i-1][j]*(1-percentage[j]+scanner.nextDouble())-tax[j];\n\t\t\t\t\tif(money[i][j]<=0)\n\t\t\t\t\t\tmoney[i][j] = 0;\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i=0;i<cnt-1;i++)\n\t\t\t\tSystem.out.printf(\"%.2f \",money[term][i]);\n\t\t\tSystem.out.printf(\"%.2f\\n\",money[term][cnt-1]);\n\t\t}\n\t}\n\n\tprivate static double[] get_original(double[] money, double []current)\n\t{\n\t\tdouble res[] = new double[money.length];\n\t\tdouble sum = 0;\n\t\tfor(double next:money)\n\t\t\tsum+=next;\n\t\tdouble sum_current = 0;\n\t\tfor(double next:current)\n\t\t\tsum_current+=next;\n\t\tfor(int i=0;i<money.length;i++)\n\t\t\tres[i] = (money[i]/sum)*sum_current;\n\t\treturn res;\n\n\t}\n}", "generated_code": "import java.util.HashMap;\nimport java.util.Scanner;\n\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tk:while(true){\n\t\t\tHashMap<Integer,Point> q = new HashMap<Integer,Point>();\n\t\t\tfor (int i =11,j=0;i<=30;i++,j++){\n\t\t\t\tq.put(j,new Point(25, i));\n\t\t\t}\n\t\t\tint t = input.nextInt();\n\t\t\tif (t==0){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tchar[] cs = input.next().toCharArray();\n\t\t\tfor (int i =0;i<cs.length;i++){\n\t\t\t\tq.remove(i);\n\t\t\t\tPoint p ;\n\t\t\t\tPoint head = q.get(19+i);\n\t\t\t\tif (cs[i]=='N'){\n\t\t\t\t\tp = new Point(head.x-1,head.y);\n\t\t\t\t}else if(cs[i]=='S'){\n\t\t\t\t\tp = new Point(head.x+1,head.y);\n\t\t\t\t}else if(cs[i] == 'E'){\n\t\t\t\t\tp = new Point(head.x,head.y+1);\n\t\t\t\t}else {\n\t\t\t\t\tp = new Point(head.x,head.y-1);\n\t\t\t\t}\n\t\t\t\tif (p.x<1||p.x>50||p.y<1||p.y>50){\n\t\t\t\t\tSystem.out.println(\"The worm ran off the board on move \"+(i+1)+\".\");\n\t\t\t\t\tcontinue k;\n\t\t\t\t}\n\t\t\t\tif (q.containsValue(p)){\n\t\t\t\t\tSystem.out.println(\"The worm ran into itself on move \"+(i+1)+\".\");\n\t\t\t\t\tcontinue k;\n\t\t\t\t}\n\t\t\t\tq.put(19+i+1,p);\n\t\t\t}\n\t\t\tSystem.out.println(\"The worm successfully made all \"+cs.length+\" moves.\");\n\t\t}\n\t}\n\t\n}\nclass Point{\n\tpublic Point(int x,int y) {\n\t\tthis.x=x;\n\t\tthis.y=y;\n\t}\n\t\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (! (obj instanceof Point)){\n\t\t\treturn false;\n\t\t}\n\t\tPoint other = (Point) obj;\n\t\treturn x == other.x && y==other.y;\n\t}\n\tint x;\n\tint y;\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"(\"+x+\" , \"+y+\")\";\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1001_136__1_1001_417", "golden_code": "\nimport java.util.Scanner;\nimport sun.font.EAttribute;\n\npublic class Main\n{\n    public static void main(String[] args)\n            {\n        Scanner input = new Scanner(System.in);\n\n        int a,b;\n        //String s = \"\";\n\n        \n                while(input.hasNext())\n                {\n                    a = input.nextInt();\n                    b = input.nextInt();\n                    System.out.println(a+b);\n                    \n                }\n            }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\n/**\n *\n * @author user1\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n      Scanner input=new Scanner(System.in);\n      int a,b,sum;\n      while(input.hasNext()){\n          String[] s=input.nextLine().split(\" \");\n      a=Integer.parseInt(s[0]);\n      b=Integer.parseInt(s[1]);\n      sum=a+b;\n      System.out.println(sum);\n      }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_6_1005_2__1_101367_8", "golden_code": "\nimport java.util.*;\nimport java.io.*;\nimport java.lang.*;\n//import java.awt.geom.*;\n\npublic class Main {\n\tprivate static int [][] mark = new int[30][30];\n\tprivate static int [][] pmark = new int[30][30];\n\tprivate static ArrayList<String> map;\n\tprivate static int a, b, c, d;\n\tprivate static int dfs(int x, int y)\n\t{\n\t\tint res = 0;\n\t\tif (mark[x][y] == 1)\n\t\t\treturn 0;\n\t\tif (map.get(x).charAt(y) == '.')\n\t\t\treturn 0;\n\t\tmark[x][y] = 1;\n\t\tif (x - 1 >= 0)\n\t\t{\n\t\t\tif (y + 1 < b)\n\t\t\t\tres += dfs(x-1, y+1);\n\t\t\tif (y - 1 >= 0)\n\t\t\t\tres += dfs(x-1, y-1);\n\t\t\tif (map.get(x-1).charAt(y) == 'X')\n\t\t\t\tres += dfs(x-1, y);\n\t\t\telse\n\t\t\t{\n\t\t\t\tres ++;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tres++;\n\t\tif (x + 1 < a)\n\t\t{\n\t\t\tif (y + 1 < b)\n\t\t\t\tres += dfs(x+1, y+1);\n\t\t\tif (y - 1 >= 0)\n\t\t\t\tres += dfs(x+1, y-1);\n\t\t\tif (map.get(x+1).charAt(y) == 'X')\n\t\t\t\tres += dfs(x+1, y);\n\t\t\telse\n\t\t\t\tres ++;\n\t\t}\n\t\telse\n\t\t\tres++;\n\t\tif (y - 1 >= 0)\n\t\t{\n\t\t\tif (map.get(x).charAt(y-1) == 'X')\n\t\t\t\tres += dfs(x, y-1);\n\t\t\telse\n\t\t\t\tres ++;\n\t\t}\n\t\telse\n\t\t\tres++;\n\t\tif (y + 1 < b)\n\t\t{\n\t\t\tif (map.get(x).charAt(y+1) == 'X')\n\t\t\t\tres += dfs(x, y+1);\n\t\t\telse\n\t\t\t\tres ++;\n\t\t}\n\t\telse\n\t\t\tres++;\n\t\treturn res;\n\t}\n\tpublic static void main(String[] args) throws IOException\n\t{\n//\t\tScanner in = new Scanner(System.in);\n\t\tString str;\n\t\tInputStreamReader istream = new InputStreamReader(System.in);\n\t\tBufferedReader in = new BufferedReader(istream);\n\t\tString adad = in.readLine();\n\t\tString adads[] = adad.split(\" \");\n\t\ta = Integer.parseInt(adads[0]);\n\t\tb = Integer.parseInt(adads[1]);\n\t\tc = Integer.parseInt(adads[2]);\n\t\td = Integer.parseInt(adads[3]);\n\t\t/*\n\t\tb = in.nextInt();\n\t\tc = in.nextInt();\n\t\td = in.nextInt();\n\t\t*/\n\t\twhile (a!= 0 || b != 0 || c != 0 || d != 0)\n\t\t{\n\t\t\tmap = new ArrayList<String>();\n\t\t\tfor (int i = 0; i < a; i++)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < b; j++)\n\t\t\t\t{\n\t\t\t\t\tmark[i][j] = 0;\n\t\t\t\t\tpmark[i][j] = 0;\n\t\t\t\t}\n\t\t\t\tstr = in.readLine();\n\t\t\t\tmap.add(str);\n\t\t\t}\n\t\t\tSystem.out.println(dfs(c-1, d-1));\n\t\t\t\n\t\t\tadad = in.readLine();\n\t\t\tadads = adad.split(\" \");\n\t\t\ta = Integer.parseInt(adads[0]);\n\t\t\tb = Integer.parseInt(adads[1]);\n\t\t\tc = Integer.parseInt(adads[2]);\n\t\t\td = Integer.parseInt(adads[3]);\n\t\t}\n\t}\n}", "generated_code": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author Asus\n */\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Scanner;\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n\n    public static void main(String[] args) {\n        // TODO code application logic here\n        \n        Scanner sc = new Scanner(System.in);\n        int m , n , i , j , k , l , pow[] = new int[28];\n        pow[0] = 1;\n        for(i = 1; i < 28; i++)\n            pow[i] = 2 * pow[i-1];\n        String str;\n        char resht[] = new char [1000];\n        n = Integer.valueOf(sc.nextLine());\n        for(m = 1; m <= n; m++)\n        {\n            j = 0;\n            k = 0;\n            str = sc.nextLine();\n            resht = str.toCharArray();\n            l = str.length();\n            for(i = 0; i < l; i++)\n            {\n                if(resht[i] == '[')\n                    k++;\n                else\n                    if(resht[i] == ']')\n                        k--;\n                if(k > j)\n                    j = k;\n            }\n            System.out.print(m);\n            System.out.print(' ');\n            System.out.println(pow[j]);\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_344__1_1001_157", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {\n            int a = in.nextInt();\n            int b = in.nextInt();\n            a = a + b;\n            System.out.println(a);\n        }\n    }\n}\n", "generated_code": "import java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        \n        Scanner cin = new Scanner(System.in);\n\n        while (cin.hasNext()) {\n            System.out.println(cin.nextInt()+cin.nextInt());\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_108014_11__1_1959_75", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n       public static void main(String[] argc){\n       Scanner in =new Scanner(System.in);\n       ///// B\n       //System.out.println(\"alakiiii\");\n       \n       int NumOfInput=in.nextInt();\n       String alaki=in.nextLine();\n       ArrayList <Long> OneLine=new ArrayList <Long>();\n       \n       //System.out.println(\"alakiiii\");\n       \n       while (NumOfInput>0)\n       {\n               String[] joda;\n               alaki=in.nextLine();\n               joda=alaki.split(\" \");\n               \n               for(int i=0;i<joda.length;i++)\n               {\n                       Long NewL=Long.parseLong(joda[i]);\n                       //OneLine.add(NewInt);\n                       OneLine.add(NewL);\n               }\n               \n               //for(int p=0;p<OneLine.size();p++)\n                       //System.out.println(OneLine.get(p));\n               \n               Long MaxBMM=(long) 0;\n               Long bmm=(long)0;\n               for(int j=0;j<OneLine.size();j++)\n               {\n                       //System.out.println(\"fore birooniii\");\n                       for(int k=j+1;k<OneLine.size();k++)\n                       {\n                               //System.out.println(\"daroon\");\n                               Long a,b;\n                               a=OneLine.get(k);\n                               b=OneLine.get(j);\n                               \n                                   if (a == 0)\n                                       bmm=b;\n\n                                   while (b != 0) {\n                                       if (a > b)\n                                           a = a - b;\n                                       else\n                                           b = b - a;\n                                   }\n\n                                   bmm=a;        \n                               //System.out.print(\"bmm haa  \");\n                               //System.out.println(bmm);\n                               if(MaxBMM<bmm)\n                                       MaxBMM=bmm;\n                       }\n               }\n               System.out.println(MaxBMM);\n               OneLine.clear();\n               \n               NumOfInput--;\n       }\n       \n       \n}\n}", "generated_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile (in.hasNext()) {\n\t\t\tbyte[] a = new byte[in.nextByte()];\n\t\t\tint m1 = 0, m2 = 0;\n\t\t\tfor (byte i = 0; i < a.length; i++) {\n\t\t\t\ta[i] = in.nextByte();\n\t\t\t\tif (i % 2 == 0) {\n\t\t\t\t\tif (a[i] == 1)\n\t\t\t\t\t\tm1++;\n\t\t\t\t\telse\n\t\t\t\t\t\tm2++;\n\t\t\t\t} else {\n\t\t\t\t\tif (a[i] == 0)\n\t\t\t\t\t\tm1++;\n\t\t\t\t\telse\n\t\t\t\t\t\tm2++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(m1 > m2 ? m2 : m1);\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_2822_22__1_2713_15", "golden_code": "\nimport java.math.BigInteger;\nimport java.util.Scanner;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author user\n */\npublic class Main {\n    public static  void  main(String [] args){\n         Scanner in = new  Scanner(System.in);\n         int t=0, n=0;\n         t = in.nextInt();\n         for (int i = 0; i <t; i++) {\n           n = in.nextInt();\n           BigInteger s1_n = BigInteger.valueOf(n);//n*(n+1)/2;\n           BigInteger s1 = s1_n.multiply(s1_n.add(BigInteger.ONE)).divide(BigInteger.valueOf(2));\n           BigInteger s2 = s1_n.multiply(s1_n);// n*n;\n           BigInteger s3 = s1_n.add(s1_n.multiply(s1_n));//n+(n*n);\n           System.out.print(s1 +\" \" + s2+\" \"+ s3);\n           System.out.println();\n        }\n    }\n}\n", "generated_code": "import  java.util.Scanner;\npublic class Main {\n    public static int conjecture(int x)\n    {\n        int c=0;\n        while(true)\n        {\n            if(x==1)\n            {\n                c++;\n                break;\n            }\n            if(x%2==0)\n            {\n                x/=2;\n                c++;\n            }\n            else\n            {\n                x=3*x+1;\n                c++;\n            }\n        }\n        return c;\n    }\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        while(input.hasNext())\n        {\n            int n=input.nextInt();\n            if(n==0)\n                break;\n            int c=conjecture(n);\n            System.out.println(c);\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1462_41__1_2578_40", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        while (sc.hasNext()) {\n            String start = sc.nextLine();\n            if (start.equals(\"START\")) {\n                while (true) {\n                    String main = sc.nextLine();\n                    if (main.equals(\"END\")) {\n                        break;\n                    }\n                    String q = \"\";\n                    for (int i = 0; i < main.length(); i++) {\n                        switch (main.charAt(i)) {\n                            case 'A':\n                                q += \"V\";\n                                break;\n                            case 'B':\n                                q += \"W\";\n                                break;\n                            case 'C':\n                                q += \"X\";\n                                break;\n                            case 'D':\n                                q += \"Y\";\n                                break;\n                            case 'E':\n                                q += \"Z\";\n                                break;\n                            case 'F':\n                                q += \"A\";\n                                break;\n                            case 'G':\n                                q += \"B\";\n                                break;\n                            case 'H':\n                                q += \"C\";\n                                break;\n                            case 'I':\n                                q += \"D\";\n                                break;\n                            case 'J':\n                                q += \"E\";\n                                break;\n                            case 'K':\n                                q += \"F\";\n                                break;\n                            case 'L':\n                                q += \"G\";\n                                break;\n                            case 'M':\n                                q += \"H\";\n                                break;\n                            case 'N':\n                                q += \"I\";\n                                break;\n                            case 'O':\n                                q += \"J\";\n                                break;\n                            case 'P':\n                                q += \"K\";\n                                break;\n                            case 'Q':\n                                q += \"L\";\n                                break;\n                            case 'R':\n                                q += \"M\";\n                                break;\n                            case 'S':\n                                q += \"N\";\n                                break;\n                            case 'T':\n                                q += \"O\";\n                                break;\n                            case 'U':\n                                q += \"P\";\n                                break;\n                            case 'V':\n                                q += \"Q\";\n                                break;\n                            case 'W':\n                                q += \"R\";\n                                break;\n                            case 'X':\n                                q += \"S\";\n                                break;\n                            case 'Y':\n                                q += \"T\";\n                                break;\n                            case 'Z':\n                                q += \"U\";\n                                break;\n                            default:\n                                q += main.charAt(i) + \"\";\n                                break;\n                        }\n\n                    }\n                    main = q;\n                    System.out.println(main);\n                }\n            } else if (start.equals(\"ENDOFINPUT\")) {\n                break;\n            }\n        }\n    }\n}\n", "generated_code": "\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = Integer.parseInt(s.nextLine());\n        int c_b = 0;\n        int c_g = 0;\n        while (n > 0) {\n            String str = s.nextLine();\n            for (int i = 0; i < str.length(); i++) {\n                if (str.charAt(i) == 'b'||str.charAt(i) == 'B' ) {\n                    c_b++;\n                } else if (str.charAt(i) == 'g'||str.charAt(i) == 'G') {\n                    c_g++;\n                }\n            }\n            if (c_b > c_g) {\n                System.out.println(str+\" is A BADDY\");\n            } else if (c_b == c_g) {\n                System.out.println(str+\" is NEUTRAL\");\n            } else if (c_b < c_g) {\n                System.out.println(str+\" is GOOD\");\n            }\n            c_b=0;c_g=0;\n            n--;\n\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_332__1_1001_450", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n       Scanner s=new Scanner(System.in);\n       while(s.hasNextInt()){\n       int n=s.nextInt();\n       int m=s.nextInt();\n       System.out.println(n+m);\n    }\n   } \n}", "generated_code": "import java.io.InputStreamReader;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        int n, k;\n        Scanner sc = new Scanner(new InputStreamReader(System.in));\n        while(sc.hasNext()) {\n            n = sc.nextInt();\n            k = sc.nextInt();\n            System.out.println(n + k);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_5_1003_48__5_1003_49", "golden_code": "\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        int problems = 0;\n        Scanner input = new Scanner(System.in);\n        problems = input.nextInt();\n        for (int prob = 1; prob <= problems; prob++) {\n            int m = 0;\n            int s = 0;\n            m = input.nextInt();\n            s = input.nextInt();\n            List coins = new ArrayList<Coin>();\n            for (int coin = 1; coin <= m; coin++) {\n                coins.add(new Coin(input.nextInt(), input.nextInt()));\n            }\n            Integer[][] f = new Integer[s + 1][s + 1];//f[i][j]=>the smallest number of coins for reaching the (i,j) value;\n\n            for (int i = 0; i <= s; i++) {\n\n                for (int j = 0; j <= s; j++) {\n                    if (i == 0 && j == 0) {\n                        f[i][j] = 0;\n                    } else {\n                        int tmp = Integer.MAX_VALUE;\n                        for (int c = 0; c < coins.size(); c++) {\n                            Coin coin = (Coin) coins.get(c);\n                            int ii = i - coin.GetX();\n                            int jj = j - coin.GetY();\n                            if ((ii >= 0) && (jj >= 0)) {\n                                if (f[ii][jj] != null) {\n                                    tmp = Math.min(tmp, f[ii][jj]);\n                                }\n                            }\n                        }\n                        if (tmp == Integer.MAX_VALUE) {\n                            f[i][j] = null;\n                        } else {\n                            f[i][j] = tmp + 1;\n                        }\n                    }\n                }\n            }\n            //finding points that i^2+j^2=s^2 and is minimum;\n            int result = Integer.MAX_VALUE;\n            for (int i = 0; i <= s; i++) {\n                for (int j = 0; j <= s; j++) {\n                    if ((i * i + j * j == s * s) && f[i][j] != null) {\n                        result = Math.min(f[i][j], result);\n                    }\n                }\n            }\n            if (result == Integer.MAX_VALUE) {\n                System.out.println(\"not possible\");\n            } else {\n                System.out.println(result);\n            }\n\n\n        }\n\n    }\n}\n\nclass Coin {\n\n    int _x;\n    int _y;\n\n    public Coin(int x, int y) {\n        _x = x;\n        _y = y;\n    }\n\n    public int GetX() {\n        return _x;\n    }\n\n    public int GetY() {\n        return _y;\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\nclass con {\n\tint x;\n\tint y;\n\tint num;\n}\n\nclass Run {\n\tint n;\n\tScanner scan = new Scanner(System.in);\n\tint x[];\n\tint y[];\n\tint S;\n\tint S2;\n\tint m;\n\tint f[][][];\n\tint min = Integer.MAX_VALUE;\n\n\tpublic void execute() {\n\t\tn = scan.nextInt();\n\t\tf = new int[301][301][40];\n\t\tx = new int[40];\n\t\ty = new int[40];\n\t\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tgetInput();\n\t\t\tcompute();\n\t\t\tprint();\n\t\t}\n\t}\n\n\tpublic void initialize() {\n\t\tmin = Integer.MAX_VALUE;\n\t\tfor (int i = 0; i <= S; i++)\n\t\t\tfor (int j = 0; j <= S; j++)\n\t\t\t\tfor (int k=0 ; k<m ; k++)\n\t\t\t\t\tf[i][j][k]=1000;\n\t\tfor (int k=0 ; k<m ; k++)\n\t\t\tf[0][0][k]=0;\n\n\t\tfor (int i = 0; i <= S; i++) {\n\t\t\tfor (int j = 0; j <= S; j++) {\n\t\t\t\tif (x[0] != 0 && y[0] != 0) {\n\t\t\t\t\tif (j % y[0] == 0 && i % x[0] == 0) {\n\t\t\t\t\t\tint t1 = j / y[0], t2 = i / x[0];\n\t\t\t\t\t\tif (t1 == t2) {\n\t\t\t\t\t\t\tf[i][j][0] = t1;\n\t\t\t\t\t\t\tif ((i * i) + (j * j) == S2 && t1 < min)\n\t\t\t\t\t\t\t\tmin = t1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (x[0] == 0 && y[0] != 0) {\n\t\t\t\t\tif (j % y[0] == 0) {\n\t\t\t\t\t\tint t1 = j / y[0];\n\t\t\t\t\t\tf[0][j][0] = t1;\n\t\t\t\t\t\tif ((j * j) == S2 && t1 < min)\n\t\t\t\t\t\t\tmin = t1;\n\t\t\t\t\t}\n\t\t\t\t} else if (y[0] == 0 && x[0] != 0) {\n\t\t\t\t\tif (i % x[0] == 0) {\n\t\t\t\t\t\tint t1 = i / x[0];\n\t\t\t\t\t\tf[i][0][0] = t1;\n\t\t\t\t\t\tif ((i * i) == S2 && t1 < min)\n\t\t\t\t\t\t\tmin = t1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void compute() {\n\t\tinitialize();\n\t\tfor (int k = 1; k < m; k++) {\n\t\t\tfor (int i = 0; i <= S; i++) {\n\t\t\t\tfor (int j = 0; j <= S; j++) {\n\t\t\t\t\tint s = 0, min2 = Integer.MAX_VALUE;\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tint ii = i - (s * x[k]), jj = j - (s * y[k]);\n\t\t\t\t\t\tif (ii < 0 || jj < 0)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (f[ii][jj][k - 1] + s < min2) {\n\t\t\t\t\t\t\tmin2 = s + f[ii][jj][k - 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (min2 < min && min2!=0 ) {\n\t\t\t\t\t\t\tif ((i * i) + (j * j) == S2) {\n\t\t\t\t\t\t\t\tmin = min2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\ts++;\n\t\t\t\t\t}\n\t\t\t\t\tif (min2 != Integer.MAX_VALUE && min2!=0) {\n\t\t\t\t\t\tf[i][j][k] = min2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void print() {\n\t\tif (min >300)\n\t\t\tSystem.out.println(\"not possible\");\n\t\telse\n\t\t\tSystem.out.println(min);\n\t}\n\n\tprivate void getInput() {\n\t\tm = scan.nextInt();\n\t\tS = scan.nextInt();\n\t\tS2 = S * S;\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tx[i] = scan.nextInt();\n\t\t\ty[i] = scan.nextInt();\n\t\t}\n\t}\n}\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tRun r = new Run();\n\t\tr.execute();\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_2792_4__1_1881_3", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner input=new Scanner(System.in);\n\t\t\n\t\tint[][] color={{255,255,255},{192,192,192},{128,128,128},\n\t\t\t\t{0,0,0},{255,0,0},{128,0,0},{255,255,0},\n\t\t\t\t{128,128,0},{0,255,0},{0,128,0},{0,255,255},\n\t\t\t\t{0,128,128},{0,0,255},{0,0,128},{255,0,255},\n\t\t\t\t{128,0,128}};\n\t\tString[] colorName={\"White\",\"Silver\",\"Gray\",\"Black\",\n\t\t\t\t\"Red\",\"Maroon\",\"Yellow\",\"Olive\",\"Lime\",\"Green\",\n\t\t\t\t\"Aqua\",\"Teal\",\"Blue\",\"Navy\",\"Fuchsia\",\"Purple\"};\n\t\t\n\t\t\n\n\t\tint r=input.nextInt();\n\t\tint g=input.nextInt();\n\t\tint b=input.nextInt();\n\t\tdouble min;\n\t\tdouble d;\n\t\tint index=0;\n\t\twhile(r!=-1 && b!=-1 && g!=-1){\n\t\t\t\n\t\t\tmin=Integer.MAX_VALUE;\n\t\t\tindex=0;\n\t\t\tfor(int i=0;i<color.length;i++){\n\t\t\t\td=Math.sqrt(Math.pow((color[i][0]-r),2)+\n\t\t\t\t\t\tMath.pow((color[i][1]-g),2)+\n\t\t\t\t\t\t(Math.pow((color[i][2]-b),2)));\n\t\t\t\t\n\t\t\t\tif(min>d){\n\t\t\t\t\tmin=d;\n\t\t\t\t\tindex=i;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(colorName[index]);;\n\t\t\t\n\t\t\t\n\t\t\tr=input.nextInt();\n\t\t\tg=input.nextInt();\n\t\t\tb=input.nextInt();\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.io.*;\nimport java.util.Arrays;\nimport java.util.StringTokenizer;\n\n/**\n * author : A.Elahi\n */\npublic class Main\n{\n\tpublic static void main(String [] args) throws IOException\n\t{\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter writer = new PrintWriter(new OutputStreamWriter(System.out));\n\n\t\tint tc = Integer.parseInt(reader.readLine());\n\t\twhile(tc-- > 0)\n\t\t{\n\t\t\tint cnt = Integer.parseInt(reader.readLine());\n\t\t\tCustomer [] customers = new Customer[cnt];\n\t\t\tfor(int i = 0 ; i < cnt ; i++)\n\t\t\t{\n\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(reader.readLine());\n\t\t\t\tint time = getTime(tokenizer.nextToken());\n\t\t\t\tint x1 = Integer.parseInt(tokenizer.nextToken());\n\t\t\t\tint y1 = Integer.parseInt(tokenizer.nextToken());\n\t\t\t\tint x2 = Integer.parseInt(tokenizer.nextToken());\n\t\t\t\tint y2 = Integer.parseInt(tokenizer.nextToken());\n\n\t\t\t\tcustomers[i] = new Customer(time, x1, y1, x2, y2);\n\t\t\t}\n\n\t\t\tboolean [][] graph = new boolean[cnt][cnt];\n\n\t\t\tfor(int i = 0 ; i < cnt ; i++)\n\t\t\t\tfor(int j = i+1 ; j < cnt ; j++)\n\t\t\t\t\tif(customers[i].time + customers[i].distance() + customers[i].distance(customers[j]) < customers[j].time)\n\t\t\t\t\t\tgraph[i][j] = true;\n\n\t\t\tint need = cnt;\n\t\t\tint [] match = new int[cnt];\n\t\t\tArrays.fill(match, -1);\n\n\t\t\tfor(int i = 0 ; i < cnt ; i++)\n\t\t\t\tif(matching(i, graph, new boolean[cnt], match))\n\t\t\t\t\tneed--;\n\n\t\t\twriter.println(need);\n\t\t}\n\n\t\twriter.flush();\n\t\twriter.close();\n\t}\n\n\tprivate static boolean matching(int at, boolean[][] graph, boolean[] visited, int[] match)\n\t{\n\t\tif(visited[at])\n\t\t\treturn false;\n\t\tvisited[at] = true;\n\n\t\tfor(int i = at+1 ; i < graph.length ; i++)\n\t\t\tif(graph[at][i])\n\t\t\t\tif(match[i] == -1 || matching(match[i], graph, visited, match))\n\t\t\t\t{\n\t\t\t\t\tmatch[i] = at;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate static int getTime(String time)\n\t{\n\t\treturn Integer.parseInt(time.substring(0, 2))*60 + Integer.parseInt(time.substring(3));\n\t}\n\n\tstatic class Customer\n\t{\n\t\tint time, x1, y1, x2, y2;\n\t\tpublic Customer(int time, int x1, int y1, int x2, int y2)\n\t\t{\n\t\t\tthis.time = time;\n\t\t\tthis.x1 = x1;\n\t\t\tthis.x2 = x2;\n\t\t\tthis.y1 = y1;\n\t\t\tthis.y2 = y2;\n\t\t}\n\n\t\tpublic int distance()\n\t\t{\n\t\t\treturn Math.abs(x1 - x2) + Math.abs(y1 - y2);\n\t\t}\n\n\t\tpublic int distance(Customer other)\n\t\t{\n\t\t\treturn Math.abs(x2 - other.x1) + Math.abs(y2 - other.y1);\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1870_29__1_2499_16", "golden_code": "import java.util.Scanner; \npublic class Main {\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner input  = new Scanner(System.in) ;\n\t\tlong  n = input.nextInt() ;  \n\t\tfor(long  i =1  ; i<=n ; i++ ){\n\t\t    int  a = input.nextInt() ; \n\t\t    int  b = input.nextInt()  ; \n\t\t    if(a>=b)\n\t\t    \tSystem.out.println(\"MMM BRAINS\");\n\t\t    else\n\t\t       System.out.println(\"NO BRAINS\");\n\t\t\n\t\t     }\n\t\t   \n     }\n}\n", "generated_code": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage q1;\nimport java.util.*;\n\n/**\n *\n * @author Armin\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner in = new Scanner(System.in);\n       // int testCases = Integer.parseInt(in.nextLine());\n        for(int x = 0; x < 999; x++) {\n            String theLine = in.nextLine().trim();\n            if(theLine.equals(\"0 0 0\")) {\n                break;\n            }\n            String theBreak[] = theLine.split(\" \");\n            int _age = Integer.parseInt(theBreak[0]);\n            int _w = Integer.parseInt(theBreak[1]);\n            int _s = Integer.parseInt(theBreak[2]);\n            \n            boolean hasSth = false;\n            if(_age <= 30 && _w >= 70 && _s >= 500) {\n                System.out.print(\"Mid-field\");\n                hasSth = true;\n            }\n            \n            if(_age <= 26 && _w >= 60 && _s >= 200) {\n                if(hasSth) {\n                    System.out.print(\" \");\n                }\n                System.out.print(\"Forward\");\n                hasSth = true;\n            }\n            \n            if(_age <= 36 && _w >= 80 && _s >= 300) {\n                if(hasSth) {\n                    System.out.print(\" \");\n                }\n                System.out.print(\"Defense\");\n                hasSth = true;\n            }\n            \n            if(hasSth) {\n                String newLine = System.getProperty(\"line.separator\");\n                System.out.print(newLine);\n            } else {\n                System.out.println(\"No positions\");\n            }\n        }\n       \n        \n        \n        \n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1009_106__1_1009_9", "golden_code": "import java.util.*;\npublic class Main {\n\tpublic static void main(String s[]) {\n\t\tScanner in = new Scanner(System.in);\n\t\tdouble sum=0;\n\t\tfor(int i=0;i<12;i++)\n\t\t{\n\t\t\tdouble val=in.nextDouble();\n\t\t\tsum+=val;\n\t\t}\t\t\n\t\tSystem.out.printf(\"$%.2f\\n\",sum/12);\n\t}\n}", "generated_code": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n    \tScanner stdin=new Scanner(System.in);\n        int number=12;\n        double sum=0;\n        while(number>0){\n    \tsum+=stdin.nextDouble();\n    \tnumber--;\n        }\n        System.out.printf(\"$%.2f\\n\", sum/12);\n    }\n}", "score": 1.0}
{"id": "SHARE_1_106018_36__1_1018_32", "golden_code": "import java.util.Scanner;\n\n\npublic class Main{\n   static boolean aval(long a){\n        for(int i=2;i<a-1;i++){\n            if(a%i==0)return false;\n        }\n       return true;\n    }\n static Scanner in=new Scanner(System.in);\n    public static void main(String[] args) {\n        int f=0;\n\tlong s[],p;\n        while(in.hasNext()){\n        p=in.nextLong();\n        s=new long[10000];\n        for(long i=2;i<p-1;i++){\n         \n                if(p%i==0){\n                    s[f]=i;\n                    f++;\n            }\n        }\n            if(f==0){\n                System.out.println(\"No\");\n            }\n            else{\n              int a=0;\n            for(int i=0;i<f;i++){\n              a=0;\n                for(int j=0;j<f;j++){\n                   \n                        if(s[i]*s[j]==p){\n                         if(aval(s[i])&& aval(s[j])){\n                             System.out.println(\"Yes\");\n                            a=1; \n                      \n                        }\n                    }\n                    if(a==1)break;\n                }\n                if(a==1)break;\n            }\n             if(a==0){\n                 System.out.println(\"No\"); \n             }\n            }\n           \n    }\n}\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\twhile (n != 0) {\n\t\t\tint[] a1 = new int[n], a2 = new int[n];\n\t\t\tint s1 = 0, s2 = 0;\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\ta1[i] = sc.nextInt();\n\t\t\tfor (int i = 0; i < n; i++)\n\t\t\t\ta2[i] = sc.nextInt();\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (a1[j] > a2[j]) {\n\t\t\t\t\tif (a1[j] > a2[j] + 1)\n\t\t\t\t\t\ts1 += a1[j];\n\t\t\t\t\telse\n\t\t\t\t\t\ts2 += 2 * a2[j] + 1;\n\t\t\t\t} else if(a1[j] < a2[j]){\n\t\t\t\t\tif (a2[j] > a1[j] + 1)\n\t\t\t\t\t\ts2 += a2[j];\n\t\t\t\t\telse\n\t\t\t\t\t\ts1 += 2 * a1[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.print(\"A has \"+s1+\" points. B has \"+s2+\" points.\\n\");\n\t\t\tn = sc.nextInt();\n\t\t\tif(n==0)\n\t\t\t\tbreak;\n\t\t\tSystem.out.print(\"\\n\");\n\t\t}\n\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_2554_3__1_1322_12", "golden_code": "\nimport java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        LinkedList<Model> models = input_analysis() ;\n        for(int temp=0 ; temp < models.size() ; temp++) {\n            evaluator(models.get(temp));\n            System.out.println(\"+++\");\n        }\n    }\n    //creates new mandatory feature\n    static boolean parents_checker(String [] features_name , int not_to_check)\n    {\n        for(int temp=0 ; temp <features_name.length  ; temp++) {\n            if (temp == not_to_check)\n                continue;\n            if (features_name[temp].equals(\"u\"))\n                return false;\n        }\n        return true;\n    }\n\n    static LinkedList<Model> input_analysis()\n    {\n        LinkedList<Model> moudles = new LinkedList<>();\n        String temp=\"\";\n        Scanner scan = new Scanner(System.in);\n        temp = scan.nextLine();\n        while ( !temp.equals(\"###\"))\n        {\n            LinkedList<Feature_defenition> feature_list = new LinkedList<>();\n            LinkedList<String[]> expression_to_evaluate = new LinkedList<>();\n            while (!temp.equals(\"#\") ){\n                feature_list.add(feature_defenition_analysis(temp));\n                temp =scan.nextLine();\n            }\n            temp = scan.nextLine();\n            while(!temp.equals(\"##\")){\n                expression_to_evaluate.add(temp.trim().replaceAll(\"\\\\s+\" , \"\").substring(1).split(\"[,{}]\"));\n                temp = scan.nextLine();\n            }\n            temp = scan.nextLine();\n            moudles.add(new Model(feature_list,expression_to_evaluate));\n        }\n        return moudles;\n    }\n    //it analysis the every moudle sentence componentd\n    static Feature_defenition feature_defenition_analysis(String temp){\n        String temp_type;\n        String[] temp_compontet;\n        if (temp.contains(\"|\"))\n        {\n            temp_type = \"or\";\n            temp_compontet = temp.trim().replaceAll(\"\\\\s+\" , \"\").split(\"[|=]\");\n        }\n        else if (temp.contains(\"^\"))\n        {\n            temp_type = \"xor\";\n            temp_compontet = temp.trim().replaceAll(\"\\\\s+\" , \"\").split(\"[/^=]\");\n        }\n        else\n        {\n            temp_type = \"mandatory\";\n            temp_compontet = temp.trim().replaceAll(\"\\\\s+\" , \"\").split(\"[+=]\");\n        }\n        return new Feature_defenition(temp_compontet,temp_type);\n    }\n\n\n    static void evaluator(Model model)\n    {\n        for(int temp2=0; temp2<model.featurs_to_evaluate_expressions.size() ; temp2++)\n        {\n            String[][] list_to_evaluate = new String[2][model.featurs_to_evaluate_expressions.get(temp2).length];\n            list_to_evaluate[0] = model.featurs_to_evaluate_expressions.get(temp2);\n            Arrays.fill(list_to_evaluate[1], \"u\");\n\n            if(Feature.name_finder(model.featurs_to_evaluate_expressions.get(temp2), model.root.name_getter())==-1)\n                System.out.println(\"Invalid\");\n            else if(model.root.evaluate(list_to_evaluate))\n            {\n                if (parents_checker(list_to_evaluate[1],Feature.name_finder(model.featurs_to_evaluate_expressions.get(temp2), model.root.name_getter())))\n                    System.out.println(\"Valid\");\n                else\n                    System.out.println(\"Invalid\");\n            }\n            else\n                System.out.println(\"Invalid\");\n        }\n    }\n}\n\nclass Model {\n    LinkedList<Feature_defenition> feature_defenitions = new LinkedList<>();\n    LinkedList<String[]> featurs_to_evaluate_expressions = new LinkedList<>();\n    Feature root ;\n\n\n    Model(LinkedList<Feature_defenition> features, LinkedList<String[]> expressions) {\n        this.featurs_to_evaluate_expressions = expressions;\n        this.feature_defenitions = features;\n\n        if (this.feature_defenitions.get(0).feature_type.equals(\"mandatory\"))\n            this.root = Mandatory_feature.mandatory_maker(feature_defenitions, 0);\n        else if (this.feature_defenitions.get(0).feature_type.equals(\"or\"))\n            this.root=Or_feature.Or_maker(this.feature_defenitions, 0);\n        else\n            this.root = Xor_feature.Xor_maker( this.feature_defenitions, 0 );\n    }\n}\n\nclass Xor_feature extends Feature {\n\n    LinkedList<Feature> Xor_sub_feature =new LinkedList<>() ;\n\n    public boolean evaluate(String[][] features_to_evaluate){\n        int name_index=0;\n        int number_of_features_in_list=0;\n        int Xor_found_feature_index=0;\n        for(int temp=0 ; temp<Xor_sub_feature.size() ; temp++) {\n            name_index = name_finder(features_to_evaluate[0], this.Xor_sub_feature.get(temp).name);\n            if (name_index != -1) {\n                number_of_features_in_list++;\n                features_to_evaluate[1][name_index]=\"c\";\n                Xor_found_feature_index = temp;\n            }\n        }\n        if(number_of_features_in_list!=1)\n            return false;\n        if(! Xor_sub_feature.get(Xor_found_feature_index).evaluate(features_to_evaluate))\n            return false;\n        return true;\n    }\n\n    public Xor_feature(LinkedList<Feature> sub_features , String name){\n        super(name);\n        this.Xor_sub_feature = sub_features;\n    }\n\n\n    public static Feature Xor_maker (LinkedList<Feature_defenition> feature_defenition , int feature_index) {\n        LinkedList<Feature> XOR_sub_features = new LinkedList<>();\n        String [] feature_components_name_temp = feature_defenition.get(feature_index).feature_components_name;\n        for (int temp=1 ; temp < feature_components_name_temp.length ; temp++)\n        {\n            Feature feature_temp = feature_finder(feature_defenition ,feature_components_name_temp[temp] );\n            if (feature_temp == null)\n                feature_temp = new Basic_feature(feature_components_name_temp[temp]);\n            XOR_sub_features.add(feature_temp);\n        }\n        feature_defention_deleter(feature_defenition,feature_components_name_temp[0]);\n        return new Xor_feature(XOR_sub_features, feature_components_name_temp[0]);\n\n    }\n}\n\nclass Or_feature extends Feature {\n    LinkedList<Feature> Or_sub_features = new LinkedList<>() ;\n\n    public boolean evaluate(String [][] feautures_to_evaluate){\n        int feature_number=0;\n        for (int temp=0 ; temp < this.Or_sub_features.size() ; temp ++)\n        {\n            int name_index =  name_finder(feautures_to_evaluate[0], this.Or_sub_features.get(temp).name);\n            if (name_index!= -1) {\n                if(! this.Or_sub_features.get(temp).evaluate(feautures_to_evaluate))\n                    return false;\n                feautures_to_evaluate[1][name_index] = \"c\";\n                feature_number++;\n            }\n        }\n        if(feature_number ==0)\n            return false;\n        return true;\n    }\n    public Or_feature(LinkedList<Feature> sub_features , String name)\n    {\n        super(name);\n        this.Or_sub_features = sub_features;\n    }\n\n\n    public static Feature Or_maker(LinkedList<Feature_defenition> feature_defenition , int feature_index){\n        LinkedList<Feature> OR_sub_features = new LinkedList<>();\n        String[] feature_components_name_temp = feature_defenition.get(feature_index).feature_components_name;\n        for (int temp=1 ; temp < feature_components_name_temp.length ; temp++)\n        {\n            Feature feature_temp = feature_finder(feature_defenition ,feature_components_name_temp[temp] );\n            if (feature_temp == null)\n                feature_temp = new Basic_feature(feature_components_name_temp[temp]);\n            OR_sub_features.add(feature_temp);\n        }\n        feature_defention_deleter(feature_defenition,feature_components_name_temp[0]);\n        return new Or_feature(OR_sub_features, feature_components_name_temp[0]);\n\n    }\n}\n\nclass Mandatory_feature extends Feature {\n\n    private LinkedList<Feature> mandatory_sub_feature = new LinkedList<>();\n    private LinkedList<Feature> optional_sub_feature = new LinkedList<>() ;\n    //function to evaluate a mandatory_type_object\n    public boolean evaluate(String[][] features_to_evaluate)\n    {\n        for(int temp=0 ; temp< this.mandatory_sub_feature.size() ; temp++)\n        {\n            // checks if the mandatory feature is on the features to evaluate list\n            int name_index =  name_finder(features_to_evaluate[0] , this.mandatory_sub_feature.get(temp).name) ;\n            if (name_index==-1)\n                return false;\n            features_to_evaluate[1][name_index] = \"c\";\n            if(!this.mandatory_sub_feature.get(temp).evaluate(features_to_evaluate))\n                return false;\n        }\n        for (int temp=0 ; temp<this.optional_sub_feature.size() ; temp++)\n        {\n            int name_index = name_finder(features_to_evaluate[0] , this.optional_sub_feature.get(temp).name);\n            if ( name_index != -1)\n            {\n                if(! this.optional_sub_feature.get(temp).evaluate(features_to_evaluate))\n                    return false;\n                features_to_evaluate[1][name_index] = \"c\";\n            }\n        }\n        return true;\n    }\n\n    public Mandatory_feature(LinkedList<Feature> mandatory_sub_feature , LinkedList<Feature> optional_sub_features , String name){\n        super(name);\n        this.mandatory_sub_feature = mandatory_sub_feature;\n        this.optional_sub_feature = optional_sub_features;\n    }\n\n    public static Feature mandatory_maker(LinkedList<Feature_defenition> feature_defenition , int feature_index){\n        LinkedList<Feature> mandatory_sub_features = new LinkedList<>();\n        LinkedList <Feature> optional_sub_features = new LinkedList<>();\n        String[] feature_components_name_temp = feature_defenition.get(feature_index).feature_components_name;\n        for (int temp=1 ; temp < feature_components_name_temp.length ; temp++)\n        {\n            int optional_indicator=0;\n            if (feature_components_name_temp[temp].contains(\"?\"))\n            {\n                optional_indicator++;\n                feature_components_name_temp[temp]= feature_components_name_temp[temp].substring(1);\n            }\n            Feature feature_temp = feature_finder(feature_defenition ,feature_components_name_temp[temp] );\n            if (feature_temp == null)\n                feature_temp = new Basic_feature(feature_components_name_temp[temp]);\n            if (optional_indicator==1)\n                optional_sub_features.add(feature_temp);\n            else\n                mandatory_sub_features.add(feature_temp);\n        }\n        feature_defention_deleter(feature_defenition,feature_components_name_temp[0]);\n        return new Mandatory_feature(mandatory_sub_features,optional_sub_features,feature_components_name_temp[0]);\n    }\n\n}\n\nclass Feature_defenition {\n    public String[] feature_components_name ;\n    public String feature_type ;\n    public Feature_defenition(String[] names , String type){\n        this.feature_components_name = names;\n        this.feature_type = type;\n    }\n\n}\n\n\nabstract class Feature {\n    String name;\n    public abstract boolean evaluate(String[][] features_to_evaluate);\n\n    public Feature(String name){\n\n        this.name = name;\n    }\n\n    public String name_getter() { return this.name;}\n\n\n    public static int name_finder(String[] string_to_evaluate , String name){\n        for(int temp=0 ; temp< string_to_evaluate.length ; temp++)\n        {\n            if(string_to_evaluate[temp].equals(name))\n                return temp;\n        }\n        return -1;\n    }\n\n    static Feature feature_finder (LinkedList<Feature_defenition> feature_defenition, String name)\n    {\n        for (int temp=0 ; temp < feature_defenition.size() ; temp++) {\n            if (feature_defenition.get(temp).feature_components_name[0].equals(name))\n            {\n                if (feature_defenition.get(temp).feature_type.equals(\"mandatory\"))\n                    return(Mandatory_feature.mandatory_maker(feature_defenition , temp));\n                else if (feature_defenition.get(temp).feature_type.equals(\"or\"))\n                    return(Or_feature.Or_maker(feature_defenition, temp));\n                else\n                    return (Xor_feature.Xor_maker(feature_defenition, temp));\n            }\n        }\n        return null;\n    }\n    static void feature_defention_deleter(LinkedList<Feature_defenition> feature_defenition, String name) {\n        for (Feature_defenition defenition : feature_defenition) {\n            if (defenition.feature_components_name[0].equals(name))\n            {\n                feature_defenition.remove(defenition);\n                break;\n            }\n        }\n    }\n}\n\n\nclass Basic_feature extends Feature {\n    public boolean evaluate(String [][] not_important){\n        return true;\n    }\n    public  Basic_feature(String name)\n    {\n        super(name);\n    }\n}\n\n\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        int t=in.nextInt();\n        for (int i = 0; i < t; i++) {\n            String s=in.next();\n            String l=\"\";\n            l=s;\n            s=s.replace('V', '4');\n            s=s.replace('W', '3');\n            s=s.replace('X', '2');\n            s=s.replace('Y', '1');\n            s=s.replace('Z', '0');\n            String n=Long.valueOf(s, 5)+\"\";\n            String out=\"valid \";\n            if(n.length()>8)\n                out=\"invalid\";\n            else {\n                while(n.length()<8)\n                    n=\"0\"+n;\n                long a=f(0,Long.parseLong(n.charAt(7)+\"\"));\n                for (int j = 1; j < 8; j++) {\n                    a=ij(a, f(j,Long.parseLong(n.charAt(7-j)+\"\")));\n                }\n                if(a!=0)\n                    out=\"invalid\";\n                else {\n                    out+=ConsiderID(n.charAt(0)-'0');\n                }\n            }\n            System.out.println(l+\"/\"+n+\" is \"+out+\" id number\");\n        }\n    }\n    static long f(long i,long j){\n        if(i==0)\n            return j;\n        if(i==1)\n            return g(j);\n        return f(i-1,g(j));\n    }\n    static long g(long i){\n        if(i==0)\n            return 1;\n        else if(i==1)\n            return 5;\n        else if(i==2)\n            return 7;\n        else if(i==3)\n            return 6;\n        else if(i==4)\n            return 2;\n        else if(i==5)\n            return 8;\n        else if(i==6)\n            return 3;\n        else if(i==7)\n            return 0;\n        else if(i==8)\n            return 9;\n        else if(i==9)\n            return 4;\n        return -1;\n    }\n    static long ij(long i,long j){\n        if(i<5&&j<5)\n            return (i+j+1000)%5;\n        else if(i<5&&j>=5)\n            return (i+(j-5)+1000)%5+5;\n        else if(i>=5&&j<5)\n            return ((i-5)-j+1000)%5+5;\n        else\n            return (i-j+1000)%5;\n    }\n    static String ConsiderID(int i){\n        if(i==0||i==1)\n            return \"athlete\";\n        else if(i==2||i==3)\n            return \"reserve\";\n        else if(i==4||i==5)\n            return \"judge\";\n        else if(i==6||i==7)\n            return \"staff\";\n        else if(i==8||i==9)\n            return \"press\";\n        else \n            return \"invalid \";\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1104_71__1_2549_4", "golden_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\n\n/**\n * Created by Mr.Algorithm on 6/23/2016.\n */\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        int n ;\n        n= Integer.parseInt(reader.readLine());\n        String []s = new String[n];\n        for(int i= 0; i<n; i++){\n            s[i] = reader.readLine();\n        }\n\n\n        for(int i= 0; i< n;i++){\n            char[]toC = s[i].toCharArray();\n            int count = 0;\n            for(int j= s[i].length() -1 ; j >= 0;j--){\n                toC[count] = s[i].charAt(j);\n                count++;\n            }\n            s[i]= String.valueOf(toC);\n        }\n\n\n\n        for (String s1 : s) {\n            System.out.println(s1);\n        }\n\n    }\n}", "generated_code": "import java.io.PrintWriter;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        // TODO code applicatio() {}n logic here\n        Scanner cin=new Scanner(System.in);\n        PrintWriter cout=new PrintWriter(System.out);\n        while(true){\n            int a=cin.nextInt();\n            int b=cin.nextInt();\n            if(a==0&&b==0)\n                break;\n            a=Integer.valueOf(Integer.toBinaryString(a));\n            b=Integer.valueOf(Integer.toBinaryString(b));\n            String s=\"0000000\"+(a+b);\n            s=s.substring(s.length()-8,s.length());\n            char ch[]=s.toCharArray();\n            int x=s.indexOf('2');\n            if(x!=-1)\n                while(ch[x]=='2'){\n                    for(int i=0;x-i>=0;i++)\n                        if(ch[x-i]=='2'){ \n                            ch[x-i]-=2;\n                            try{\n                                ch[x-i+1]++;\n                            }catch(Exception ex){}\n                            try{\n                                ch[x-i-1]++;\n                            }catch(Exception ex){}\n                        }\n                    for(int i=1;x+i<ch.length;i++)\n                        if(ch[x+i]=='2'){ \n                            ch[x+i]-=2;\n                            try{\n                                ch[x+i+1]++;\n                            }catch(Exception ex){}\n                            try{\n                                ch[x+i-1]++;\n                            }catch(Exception ex){}\n                        }\n                }\n            s=\"\";\n            for(int i=0;i<ch.length;i++)\n                s+=ch[i];\n            cout.println(Integer.valueOf(s,2));\n        }\n        cout.flush();\n    }\n}", "score": 0.0}
{"id": "SHARE_1_2121_42__1_2121_28", "golden_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner input=new Scanner(System.in);  \n        while(input.hasNext()){\n        int n=input.nextInt();\n        \n        //BigInteger fib1,fib2,fib3;\n        \n        BigInteger f1=BigInteger.ONE;\n        BigInteger f2=BigInteger.ONE;\n        BigInteger f3=BigInteger.ZERO;\n        if(n==1 || n==2)\n             System.out.println(1);   \n        else{\n            for(int i=3;i<=n;i++){\n                f3=f1.add(f2);\n                f1=f2;\n                f2=f3;\n                \n            }\n            System.out.println(f3);\n        }\n    }\n    }\n}", "generated_code": " \nimport java.math.BigInteger;\nimport java.util.Arrays;\nimport java.util.Scanner;\n/**\n *\n * @author Asus\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        \n        Scanner Sc = new Scanner(System.in);\n        int i , j , k , l , m , n;\n        BigInteger a , b , c;\n       \n        while(2 < 22)\n        { a = BigInteger.ONE;\n        b = BigInteger.ZERO;\n            try{\n        n = Sc.nextInt();\n        if(n < 2)\n            a = BigInteger.valueOf(n);\n        else\n        for(i = 2; i <= n; i++)\n        {\n            c = b;\n            b = a;\n            a = b.add(c);\n        }\n        System.out.println(a);\n            }\n            catch(Exception e)\n            {break;}\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2737_15__1_106021_4", "golden_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tstatic int[][] gcds = new int[1200][1200];\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner s = new Scanner(System.in);\n\t\tint t = s.nextInt();\n\t\tfor (int tI = 0; tI < t; tI++) {\n\t\t\tint n = s.nextInt();\n\t\t\tint m = s.nextInt();\n\t\t\tSystem.out.println(m*n*(m+n-2)/2);\n\t\t}\n\n\t}\n\n}", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\twhile(input.hasNext()){\n\t\t\tint n = input.nextInt();\n\t\t\tif(n == -1)\n\t\t\t\tbreak;\n\t\t\tint num[] = new int[n*16+5];\n\t\t\tint temp[] = new int[n];\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\ttemp[i] =  input.nextInt();\n\t\t\t}\n\t\t\tint k = 0;\n\t\t\tfor(int i = temp.length-1; i >= 0; i--){\n\t\t\t\tint tmp = temp[i];\n\t\t\t\tfor(int j = 0; j < 16; j++){\n\t\t\t\t\tnum[k] = (tmp%2);\n\t\t\t\t\ttmp /= 2;\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint res = 0, result = 0;\n\t\t\tint r = 1;\n\t\t\tfor(int s = 0; s < k; s++){\n\t\t\t\tif(s%7 == 6){\n\t\t\t\t\tif(num[s] == 1)\n\t\t\t\t\t\tres = -res;\n\t\t\t\t\tresult += res;\n\t\t\t\t\tr = 1;\n\t\t\t\t\tres = 0;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tres += r*num[s];\n\t\t\t\tr *= 2;\n\t\t\t}\n\t\t\tSystem.out.println(result);\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_17__1_1001_286", "golden_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext())\n\t\t\tSystem.out.println((in.nextInt()+in.nextInt()));\n\tin.close();\t\n\t}\n}\n", "generated_code": "import java.util.Scanner;\nimport java.lang.System;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner s=new Scanner(System.in);\n\t\twhile(s.hasNextInt())\n\t\t\tSystem.out.println(s.nextInt()+s.nextInt());\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1104_12__1_1018_72", "golden_code": "\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        int c=0;\n      Scanner input=new Scanner(System.in);\n        int t=input.nextInt();\n        input.nextLine();\n        while(c<t){\n            String r=\"\";\n            String a=input.nextLine();\n            for(int i=a.length()-1;i>=0;i--){\n                r =r + a.charAt(i);\n                       }\n            System.out.println(r);\n            c++;\n        }\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n/**\n *\n * @author Mojtaba\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        StringBuilder sb=new StringBuilder();\n        int t;\n        while ((t=in.nextInt()) > 0) {\n            int[] a = new int[t];\n            int[] b = new int[t];\n            for (int i = 0; i < a.length; i++) {\n                a[i] = in.nextInt();\n            }\n            for (int i = 0; i < b.length; i++) {\n                b[i] = in.nextInt();\n            }\n            int scoreA = 0, scoreB = 0;\n            for (int i = 0; i < t; i++) {\n                boolean aIsMin = Math.min(a[i], b[i]) == a[i];\n                if (Math.abs(a[i] - b[i]) == 1) {\n                    if (a[i] + b[i] == 3) {\n                        if (aIsMin) {\n                            scoreA += 6;\n                        } else {\n                            scoreB += 6;\n                        }\n                    } else {\n                        if (aIsMin) {\n                            scoreA += (a[i] + b[i]);\n                        } else {\n                            scoreB += (a[i] + b[i]);\n                        }\n                    }\n                } else if (Math.abs(a[i] - b[i]) > 1) {\n                    if (aIsMin) {\n                        scoreB += Math.max(a[i], b[i]);\n                    } else {\n                        scoreA += Math.max(a[i], b[i]);\n                    }\n                }\n            }\n            sb.append(\"A has \").append(scoreA).append(\" points. B has \").append(scoreB).append(\" points.\\n\\n\");\n        }\n        System.out.println(sb.toString().trim());\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1319_72__1_1265_13", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String args[])\n\t{\n\n\n\t\tScanner input=new Scanner(System.in);\n\n\n\n\t\tint location=input.nextInt();\n\t\twhile(location!=5280){\n\n\t\t\tint i=1;\n\t\t\tint[] array=new int[22];\n\t\t\tarray[0]=0;\n\t\t\tarray[1]=input.nextInt();\n\n\t\t\twhile(array[i]!=location)\n\t\t\t\tarray[++i]=input.nextInt();\n\n\t\t\tint lastPos,newPos;\n\t\t\tlastPos=Math.abs(location);\n\t\t\tfor(int j=0;j<i;j++){\n\t\t\t\tnewPos=Math.abs(array[j+1]-location);\n\n\n\t\t\t\tif(newPos!=0 ){\n\n\t\t\t\t\tif(newPos>lastPos)\n\t\t\t\t\t\tSystem.out.printf(\"Moving from %d to %d: colder.\\n\",array[j],array[j+1]);\n\n\t\t\t\t\telse if(newPos<lastPos)\n\t\t\t\t\t\tSystem.out.printf(\"Moving from %d to %d: warmer.\\n\",array[j],array[j+1]);\n\n\t\t\t\t\telse\n\t\t\t\t\t\tSystem.out.printf(\"Moving from %d to %d: same.\\n\",array[j],array[j+1]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tSystem.out.printf(\"Moving from %d to %d: found it!\\n\",array[j],array[j+1]);\n\n\t\t\t\tlastPos=newPos;\n\n\n\t\t\t}\n\t\t\tlocation=input.nextInt();\n\t\t\tif(location!=5280)\n\t\t\t\tSystem.out.println();\n\t\t}\t\n\t}\n\n}", "generated_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\nclass Main {\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tBufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(input.readLine());\n\t\twhile (n-- > 0) {\n\t\t\tint t = Integer.parseInt(input.readLine());\n\t\t\tfor (int i = 1; i <= t; i += 2) {\n\t\t\t\tif (t % i == 0) {\n\t\t\t\t\tint g = t / i;\n\t\t\t\t\tint f = 1;\n\t\t\t\t\tint j = 1;\n\t\t\t\t\tfor (; f < g; j++) {\n\t\t\t\t\t\tf *= 2;\n\t\t\t\t\t}\n\t\t\t\t\tif (f == g) {\n\t\t\t\t\t\tSystem.out.println(i + \" \" + (j - 1));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2212_9__1_1001_168", "golden_code": "import java.math.BigInteger;\nimport java.sql.Time;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Scanner;\n\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        \n        \n        int t=input.nextInt();\n        int n,sum,upAvg,avg;\n        int[] scores;\n        while(t-->0){\n            n=input.nextInt();\n            scores=new int[n];\n            upAvg=sum=0;\n       \n            for (int i = 0; i < scores.length; i++)\n                sum+=scores[i]=input.nextInt();\n            \n            avg=sum/n;\n            \n            for (int i = 0; i < scores.length; i++) \n                if(scores[i]>avg)\n                    upAvg++;\n            \n            System.out.printf(\"%.3f%s\\n\",(upAvg/(1.0*n))*100,\"%\");\n                \n            \n         \n                \n        }\n    }\n}", "generated_code": "import java.util.Scanner;\n\n\n class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n  \n        Scanner s = new Scanner(System.in);\n        int a=0;\n                while(s.hasNext()){\n                a=s.nextInt()+s.nextInt();\n                System.out.println(a);\n                }\n        \n    }\n    \n}\n", "score": 0.0}
{"id": "SHARE_1_1230_110__1_1230_115", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while (input.hasNext()) {\n            String str = input.nextLine();\n            if (str.matches(\"0\")) {\n                break;\n            }\n            while (str.length() > 1) {\n                Integer result = 0;\n                for (int i = 0; i < str.length(); i++) {\n                    result += Character.getNumericValue(str.charAt(i));\n                }\n                str = result.toString();\n            }\n            System.out.println(str);\n        }\n    }\n}", "generated_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        BigInteger b;\n\n        while (scanner.hasNext()) {\n            b = scanner.nextBigInteger();\n            if (b.intValue()==0) {\n                break;\n            } else if (b.mod(new BigInteger(String.valueOf(9))).intValue()==0){\n                System.out.println(9);\n            } else {\n                System.out.println(b.mod(new BigInteger(String.valueOf(9))));\n            }\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1656_9__1_1656_70", "golden_code": "import java.util.Scanner;\npublic class Main{  \n    public static void main(String[] args){\n        Scanner cin=new Scanner(System.in);\n        String strNum=cin.nextLine();\n        while(!strNum.equals(\"-1\")){\n            int numCounter=0;\n            for(int i=0;i<strNum.length();i++)\n                if(strNum.charAt(i)==' ')\n                    numCounter++;\n            int nums[]=new int[numCounter];\n            numCounter=0; String temp=\"\";\n            for(int i=0;i<strNum.length() && numCounter<nums.length;i++)\n                if(strNum.charAt(i)!=' '){\n                    temp+=strNum.charAt(i);\n                }else{\n                    nums[numCounter]=Integer.parseInt(temp);\n                    numCounter++;\n                    temp=\"\";\n                }\n            numCounter=0;\n            for(int i=0;i<nums.length;i++)\n                for(int j=i+1;j<nums.length;j++){\n                    if(nums[i]*2==nums[j])\n                        numCounter++;\n                    if(nums[i]==nums[j]*2)\n                        numCounter++;\n                }\n            System.out.println(numCounter);\n            strNum=cin.nextLine();\n        }        \n    }\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner s = new Scanner(System.in);\n\t\twhile (true) {\n\t\t\tint[] num = new int[20];\n\t\t\tint n;\n\t\t\tfor (int i = 0; (n = s.nextInt()) != 0; i++) {\n\t\t\t\tif (n == -1)\n\t\t\t\t\treturn;\n\t\t\t\tnum[i] = n;\n\t\t\t}\n\t\t\tint counter=0;\n\t\t\tfor(int i=0;num[i] !=0;i++)\n\t\t\t\tfor(int j=0;num[j] != 0;j++)\n\t\t\t\t\tif(num[i] / (float)num[j] == 2 || num[j] / (float)num[i] == 2)\n\t\t\t\t\t\tcounter++;\n\t\t\tSystem.out.println(counter/2);\n\t\t}\n\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_168__1_1001_64", "golden_code": "import java.util.Scanner;\n\n\n class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n  \n        Scanner s = new Scanner(System.in);\n        int a=0;\n                while(s.hasNext()){\n                a=s.nextInt()+s.nextInt();\n                System.out.println(a);\n                }\n        \n    }\n    \n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args){\n        Scanner in= new Scanner (System.in);\n        int n,m;\n        while(in.hasNext()){\n            n=in.nextInt();\n            m=in.nextInt();\n            System.out.println(n+m);\n        }\n    }\n    \n}", "score": 1.0}
{"id": "SHARE_1_106010_0__1_2859_20", "golden_code": "import java.util.*;\nimport java.awt.*;\nimport java.math.*;\n\n@SuppressWarnings(\"unchecked\")\n\npublic class Main\n{\n    public static void main(String[] arqs)\n    {\n        Scanner scan = new Scanner(System.in);\n\n        int ca = scan.nextInt();\n        int loop = 1;\n        boolean first = true;\n\n        while(ca-- > 0)\n        {\n            if(!first) System.out.println();\n            first = false;\n\n            int[] x = new int[4], y = new int[4];\n\n            for(int i = 0;i < 4;i++)\n            {\n                x[i] = scan.nextInt();\n                y[i] = scan.nextInt();\n            }\n\n            int[] d = new int[6];\n\n            int k = 0;\n            for(int i = 0;i < 4;i++)\n                for(int j = i+1;j < 4;j++)\n                    d[k++] = (x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]);\n\n            Arrays.sort(d);\n\n            System.out.println(\"Case \" + loop++ + \":\");\n            System.out.println(d[0] == d[1] && d[1] == d[2] && d[2] == d[3] && d[4] == d[5] ? \"Yes\" : \"No\");\n        }\n    }\n}", "generated_code": "import java.util.*;\n\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner s = new Scanner(System.in);\n\t\tint w = s.nextInt();\n\t\tfor(int q=0;q<w;q++){\n\t\t\tint n = s.nextInt();\n\t\t\tint[] dis = new int[n];\n\t\t\tint[] fuel = new int[n];\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tfuel[i] = s.nextInt();\n\t\t\t\tdis[i] = s.nextInt();\n\t\t\t}\n\t\t\tint res=0;\n\t\t\tint sum = 0;\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tsum += fuel[(res+i)%n]-dis[(res+i)%n];\n\t\t\t\tif(sum < 0){\n\t\t\t\t\tres += i+1;\n\t\t\t\t\tif(res >= n)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tsum = 0;\n\t\t\t\t\ti=-1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(res >= n)\n\t\t\t\tSystem.out.println(\"it's a trap\");\n\t\t\telse\n\t\t\t\tSystem.out.println(res);\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2847_32__1_2847_5", "golden_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\n/**\n * Created by mhd on 11/24/16.\n */\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int n = input.nextInt();\n        while (n-- > 0)\n        {\n            int p = input.nextInt();\n            int []arr = new int[p];\n            double total = 0;\n            for (int i = 0; i < p; i++) {\n                int curr = input.nextInt();\n                arr[i] = curr;\n                total+=curr;\n            }\n            Arrays.sort(arr);\n            double A = (arr[0] + arr[p-1]) / 2.00;\n            double B = total / (double)p;\n            if (A - B < 1.00 &&  -1.00 < A-B )\n                System.out.println(\"Yes\");\n            else\n                System.out.println(\"No\");\n        }\n    }\n}\n", "generated_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\nclass Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner input = new Scanner(System.in);\n\t\tint t;\n\t\tint n;\n\t\tfloat[] m;\n\t\tfloat avg1,avg2;\n\t\tt=input.nextInt();\n\t\tfor(int index=0 ; index<t ; index++)\n\t\t{\n\t\t\tavg2=0;\n\t\t\tn=input.nextInt();\n\t\t\tm=new float[n];\n\t\t\tfor(int i=0;i<n;i++)\n\t\t\t{\n\t\t\t\tm[i]=input.nextFloat();\n\t\t\t}\n\t\t\tfor(int i=0;i<n;i++)\n\t\t\t{\n\t\t\t\tavg2+=m[i];\n\t\t\t}\n\t\t\tArrays.sort(m);\n\t\t\tavg1=(m[0]+m[n-1])/2;\n\t\t\tavg2/=n;\n\t\t\tif(Math.abs(avg1-avg2)<1)\n\t\t\t\tSystem.out.println(\"Yes\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t\tSystem.exit(0);\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1884_12__1_1326_6", "golden_code": "import java.util.*;\npublic class Main{\n\t\n\tprivate static int   base = 0;\n\tprivate static int[] weight;       \n\tprivate static int[] value;       \n\tprivate static int[] dp;       \n\tprivate static int[] last;       \n\tprivate static void knapsack()\n\t{\n\t    int   n = weight.length;        \n\t    dp = new int[base/1000+1];\n\t    last = new int[base/1000+1];\n\t\tfor (int i=0;i<dp.length;i++) dp[i] = 0;\n\t\tfor (int i=0;i<last.length;i++) last[i] = -1;\n\n\t    for (int i=1;i<dp.length;i++)\n\t    {\n\t        for (int j=0;j<n;j++)\n\t        {\n\t            if (weight[j] <= i &&\n\t                    (value[j] + dp[i - weight[j]]) > dp[i])\n\t            {\n\t                dp[i] = value[j] + dp[i - weight[j]];\n\t                last[i] = j;\n\t            }\n\t        }\n\t    }\n\t}\n\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner in = new Scanner(System.in);\n\t\tint test = in.nextInt();\n\t\tfor(int j=1;j<=test;j++){\n\t\t\t\tbase = in.nextInt();\n\t\t\t\tint year = in.nextInt();\n\t\t\t\tint bond = in.nextInt();\n\t\t\t\tweight = new int[bond];\n\t\t\t\tvalue = new int[bond];\n\t\t\t\n\t\t\t\tfor(int k=1;k<=bond;k++){\n\t\t\t\t  weight[k-1] = in.nextInt()/1000;\n\t\t\t\t  value[k-1] = in.nextInt();\n\t\t\t\t}\n\t\t\t\n                    for(int f=1;f<=year;f++){\n\t\t\t\t    \tknapsack();            \n\t\t\t\t\t\tbase+= dp[dp.length-1];\n\t\t\t\t\t}\n                //    if(j==test)\n\t\t\t\t//\t\tSystem.out.print(base);    \n\t\t\t\t//\telse\n\t\t\t\t\t \tSystem.out.println(base);     \n\t\t}\n\n\n\t}\n\n}", "generated_code": "/*\nID: a.elahi1\nLANG: JAVA\nTASK: Color\n*/\n\nimport java.util.*;\nimport java.io.*;\n\nimport static java.lang.Math.*;\n\npublic class Main\n{\n\tpublic static void main(String[] args) throws Exception\n\t{\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint counter = 0;\n\t\twhile(true)\n\t\t{\n\t\t\tboolean first = false;\n\t\t\tint board[][] = new int[250][250];\n\t\t\tint n = scanner.nextInt();\n\t\t\tint color = scanner.nextInt();\n\t\t\tif(n==0)\n\t\t\t\tbreak;\n\t\t\tfor(int at=0;at<n;at++)\n\t\t\t{\n\t\t\t\tint c = scanner.nextInt();\n\t\t\t\tint x1 = scanner.nextInt()+100;\n\t\t\t\tint y1 = scanner.nextInt()+100;\n\t\t\t\tint x2 = scanner.nextInt()+100;\n\t\t\t\tint y2 = scanner.nextInt()+100;\n\t\t\t\tint minX = min(x1, x2);\n\t\t\t\tint maxX = max(x1, x2);\n\n\t\t\t\tint minY = min(y1, y2);\n\t\t\t\tint maxY = max(y1, y2);\n\n\t\t\t\tif(c==color)\n\t\t\t\t\tfirst = true;\n\n\t\t\t\tif(first)\n\t\t\t\t\tfor(int i=minX;i<maxX;i++)\n\t\t\t\t\t\tfor(int j=minY;j<maxY;j++)\n\t\t\t\t\t\t\tboard[i][j] = c;\n\t\t\t}\n\t\t\tint res = 0;\n\t\t\tfor(int i=0;i<250;i++)\n\t\t\t\tfor(int j=0;j<250;j++)\n\t\t\t\t\tif(board[i][j]==color)\n\t\t\t\t\t\tres++;\n\t\t\tSystem.out.println(\"The area of color \"+color+\" in dataset \"+(++counter)+\" is: \"+res);\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1104_65__1_1003_4", "golden_code": "import java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner i = new Scanner(System.in);\n        int t = i.nextInt();\n        i.nextLine();\n        while (t-- > 0) {\n            System.out.println(new StringBuffer(i.nextLine()).reverse());\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        String s1 = \"abcdefghi\";\n        String s2 = \"jklmnopqr\";\n        String s3 = \"stuvwxyz_\";\n        int k1 = input.nextInt();\n        int k2 = input.nextInt();\n        int k3 = input.nextInt();\n        while (k1!= 0 ) {\n            input.nextLine();\n            String s = input.nextLine();\n            char[] c = s.toCharArray();\n            int l = s.length();\n            String x1 = \"\";\n            String x2 = \"\";\n            String x3 = \"\";\n            int[] y1 = new int[80];\n            int[] y2 = new int[80];\n            int[] y3 = new int[80];\n            int n1 = 0;\n            int n2 = 0;\n            int n3 = 0;\n\n            for (int i = 0; i < l; i++) {\n                if (s1.indexOf(c[i]) >= 0) {\n                    x1 += c[i] + \"\";\n                    y1[n1] = i;\n                    n1++;\n                } else if (s2.indexOf(c[i]) >= 0) {\n                    x2 += c[i] + \"\";\n                    y2[n2] = i;\n                    n2++;\n                } else if (s3.indexOf(c[i]) >= 0) {\n                    x3 += c[i] + \"\";\n                    y3[n3] = i;\n                    n3++;\n                }\n            }\nif(x1.length()>0)\n            x1 = shift(x1, k1);\nif(x2.length()>0)\n            x2 = shift(x2, k2);\nif (x3.length()>0)\n            x3 = shift(x3, k3);\n\n            char[] c1 = x1.toCharArray();\n            char[] c2 = x2.toCharArray();\n            char[] c3 = x3.toCharArray();\n            for (int i = 0; i < n1; i++) {\n                c[y1[i]] = c1[i];\n            }\n            for (int i = 0; i < n2; i++) {\n                c[y2[i]] = c2[i];\n            }\n            for (int i = 0; i < n3; i++) {\n                c[y3[i]] = c3[i];\n            }\n            for (int i = 0; i < l; i++) {\n                System.out.printf(\"%c\", c[i]);\n            }\n            System.out.println(\"\");\n            k1 = input.nextInt();\n            k2 = input.nextInt();\n            k3 = input.nextInt();\n        }\n    }\n\n    public static String shift(String s, int n) {\n        String ss = s;\n        int l = s.length();\n        while (n > l) {\n            n = n - l;\n        }\n        if (n != 0) {\n            String x = s.substring(l - n, l);\n            String y = s.substring(0, l - n);\n            ss = x + y;\n\n        }\n        return ss;\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2358_1__1_2554_64", "golden_code": "import java.util.*;\nimport java.awt.*;\nimport java.math.*;\n\n@SuppressWarnings(\"unchecked\")\n\npublic class Main\n{\n    public static void main(String[] arqs)\n    {\n        Scanner scan = new Scanner(System.in);\n\n        while (scan.hasNext())\n        {\n            double a = scan.nextDouble();\n            double b = scan.nextDouble();\n            double c = scan.nextDouble();\n            double d = scan.nextDouble();\n\n            System.out.println((a-c-d)*(a-c-d)+(b-c-d)*(b-c-d) >= (c+d)*(c+d) ? \"Yes\" : \"No\");\n        }\n    }\n}", "generated_code": "import java.util.*;\n\n/**\n * @author Amin Razavi\n */\npublic class Main {\n    ///////////////////////////node////////////////////////////\n    public static class Node {\n        private String info;\n        private String status;\n        private Node parent;\n        private Node Left_child;\n        private Node Right_brother;\n\n        String getInfo() {\n            return info;\n        }\n\n        String getStatus() {\n            return status;\n        }\n\n        Node getParent() {\n            return parent;\n        }\n\n        Node getLeft_child() {\n            return Left_child;\n        }\n\n        Node getRight_brother() {\n            return Right_brother;\n        }\n\n        //new\n        Node() {\n            this.info = \"\";\n            this.status = \"\";\n            this.parent = null;\n            this.Left_child = null;\n            this.Right_brother = null;\n        }\n\n        void setInfo(String info) {\n            this.info = info;\n        }\n\n        void setStatus(String status) {\n            this.status = status;\n        }\n\n        void setParent(Node parent) {\n            this.parent = parent;\n        }\n\n        void setLeft_child(Node left_child) {\n            this.Left_child = left_child;\n        }\n\n        void setRight_brother(Node right_brother) {\n            this.Right_brother = right_brother;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            Node node = (Node) o;\n            if (node.getInfo().equals(info))\n                return true;\n            return false;\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(info);\n        }\n\n        @Override\n        public String toString() {\n            return \"Node{\" +\n                    \"info='\" + info + '\\'' +\n                    '}';\n        }\n    }\n\n\n    ///////////////////////node//////////////////////////////////\n//////////////////////tree///////////////////////////////////\n    static class Tree {\n        private Node root;\n        private ArrayList<Node> nodes = new ArrayList<>();\n        private ArrayList<Node> mandatory_nodes = new ArrayList<>();\n\n        Tree(Node root) {\n            this.root = root;\n            nodes.add(root);\n        }\n\n        void setRoot(Node root) {\n            this.root = root;\n        }\n\n        void setNodes(ArrayList<Node> nodes) {\n            this.nodes = nodes;\n        }\n\n        Node getRoot() {\n            return root;\n        }\n\n\n        void add_node(Node temp_node) {\n//            System.out.println(temp_node.getInfo().trim());\n            if (temp_node.getStatus().equals(\"Mandatory\"))\n                mandatory_nodes.add(temp_node);\n\n            if (!nodes.contains(temp_node)) {\n                nodes.add(temp_node);\n            }\n        }\n\n        void add_node(Node parent, Node temp_node) {\n//            System.out.println(parent.getInfo().trim() + \" \" + temp_node.getInfo().trim());\n            if(search_parent(temp_node.getInfo().trim()) != null)\n                temp_node = search_parent(temp_node.getInfo().trim());\n\n            if (temp_node.getStatus().equals(\"Mandatory\"))\n                mandatory_nodes.add(temp_node);\n\n\n            temp_node.setParent(parent);\n            if (parent.getLeft_child() == null) {\n                parent.setLeft_child(temp_node);\n            } else {\n                boolean check_add_right_brother = true;\n                Node node = parent.getLeft_child();\n                if (node.getInfo().trim().equals(temp_node.getInfo().trim()))\n                    check_add_right_brother = false;\n                while (node.getRight_brother() != null) {\n                    node = node.getRight_brother();\n                    if (node.getInfo().trim().equals(temp_node.getInfo().trim()))\n                        check_add_right_brother = false;\n                }\n                if (check_add_right_brother){\n                    node.setRight_brother(temp_node);\n\n                }\n            }\n            if (!nodes.contains(temp_node))\n                nodes.add(temp_node);\n        }\n\n        boolean search(Node node) {\n            for (Node n : nodes)\n                if (n.getInfo().trim().equals(node.getInfo().trim()))\n                    return true;\n            return false;\n        }\n\n        Node search2(Node node) {\n            for (Node node_tree : nodes) {\n                if (node.getInfo().trim().equals(node_tree.getInfo().trim())) {\n                    return node_tree;\n                }\n            }\n            return null;\n        }\n\n        public Node search_parent(String info) {\n            Node temp = null;\n            for (Node node : nodes)\n                if (node.getInfo().trim().equals(info.trim())) {\n                    temp = node;\n                }\n            return temp;\n        }\n\n        public void find_father() {\n            for (Node node : nodes) {\n                if (node.getParent() == null) {\n                    for (Node temp_parent : nodes) {\n                        if (temp_parent.getLeft_child() != null)\n                            if (temp_parent.getLeft_child().getInfo().trim().equals(node.getInfo().trim())) {\n                                node.setParent(temp_parent);\n                            }\n                        if (temp_parent.getRight_brother() != null)\n                            if (temp_parent.getRight_brother().getInfo().trim().equals(node.getInfo().trim())) {\n                                node.setParent(temp_parent.getParent());\n                            }\n                    }\n                }\n            }\n        }\n\n        public void delete_extra() {\n            ArrayList<Node> deleting = new ArrayList<>();\n            for (Node node : nodes) {\n                if (node.getParent() != null)\n                    if (node.getInfo().trim().equals(node.getParent().getInfo().trim()))\n                        deleting.add(node);\n\n            }\n            for (Node node : deleting) {\n                nodes.remove(node);\n\n            }\n        }\n\n        @Override\n        public String toString() {\n            String str = \" \";\n            for (int i = 0; i < nodes.size(); i++) {\n                str += \"node is:\" + nodes.get(i).getInfo() + \"  \" + \"father : \" + nodes.get(i).getParent();\n            }\n            return str;\n        }\n\n    }\n\n    ///////////////////////////tree////////////////////////////////\n    private static boolean check(Tree tree, HashSet<Node> set) {\n        for (Node node : set) {\n            if (node.getStatus().equals(\"Mandatory\"))\n                if (!node.equals(tree.search2(node))) {\n                    //System.out.println(node.getInfo().trim() + \" 1\");\n                    return false;\n                }\n        }\n        for (Node node : set) {\n            if (!tree.search(node)) {\n                // System.out.println(node.getInfo().trim() + \" 2\");\n                return false;\n            }\n        }\n        for (Node node : set) {\n            Node n = tree.search2(node);\n            Node q = new Node();\n            q.setInfo(n.getParent().getInfo().trim());\n            if (!set.contains(q) && !q.getInfo().equals(\"Fake\")) {\n                //System.out.println(node.getInfo().trim() + \"3\");\n                return false;\n            }\n        }\n        for (Node n1 : set) {\n            Node node = tree.search2(n1);\n            if (node.getLeft_child() != null) {\n                int counter = 0;\n                int mcounter = 0;\n                Node backup = node.getLeft_child();\n                Node child = node.getLeft_child();\n                while (child != null) {\n                    if (set.contains(child))\n                        counter++;\n                    if (child.getStatus().equals(\"Mandatory\")) {\n                        if (!set.contains(child)) {\n                            return false;\n                        }\n                        mcounter++;\n                    }\n                    child = child.getRight_brother();\n                }\n                child = backup;\n                if (child.getStatus().equals(\"Alternative\") && counter != 1) {\n                    return false;\n                }\n                if (child.getStatus().equals(\"Or\") && counter == 0) {\n                    return false;\n                }\n                if ((child.getStatus().equals(\"Optional\") || child.getStatus().equals(\"Mandatory\")) && counter < mcounter) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        List<String> result = new LinkedList<>();\n        String str = scan.nextLine().replace(\" \", \"\");\n\n        while (!str.equals(\"###\")) {\n            Node fake_father = new Node();\n            fake_father.setInfo(\"Fake\");\n            Tree tree = new Tree(fake_father);\n            boolean check_point = true;\n            while (!str.equals(\"#\")) {\n                if (str.contains(\"=\") && !str.contains(\"+\") && !str.contains(\"^\") && !str.contains(\"|\")) {\n                    Node node = new Node();\n\n                    String[] temp_line = str.split(\"[=]\");\n                    if(tree.search_parent(temp_line[1].trim()) != null)\n                        node= tree.search_parent(temp_line[1].trim());\n                    Node parent = tree.search_parent(temp_line[0].trim());\n                    if (str.contains(\"?\")) {\n                        node.setInfo(temp_line[1].replace(\"?\", \"\").trim());\n                        node.setStatus(\"Optional\");\n                    } else {\n                        node.setStatus(\"Mandatory\");\n                        node.setInfo(temp_line[1].trim());\n                    }\n                    if (parent == null && check_point == false) {\n                        parent = new Node();\n                        parent.setInfo(temp_line[0].trim());\n                        node.setInfo(temp_line[1].trim());\n                        if (str.contains(\"?\")) {\n                            node.setInfo(temp_line[1].replace(\"?\", \"\").trim());\n                            node.setStatus(\"Optional\");\n                        } else\n                            node.setStatus(\"Mandatory\");\n                        parent.setLeft_child(node);\n                        tree.add_node(parent);\n                        tree.add_node(parent, node);\n\n                    } else if (check_point == true) {\n                        parent = new Node();\n                        parent.setStatus(\"Mandatory\");\n                        parent.setInfo(temp_line[0].trim());\n                        tree.add_node(tree.getRoot(), parent);\n                        tree.add_node(parent, node);\n                    } else {\n                        tree.add_node(parent, node);\n                    }\n\n\n                }\n                if (!str.contains(\"=\")) {\n                    Node node = new Node();\n                    node.setInfo(str.trim());\n\n                    tree.add_node(tree.getRoot(), node);\n                }\n\n                if (str.contains(\"+\")) {\n                    String[] temp_line = str.split(\"[=,+]\");\n                    Node parent = tree.search_parent(temp_line[0].trim());\n                    if (parent == null && check_point == false) {\n\n                        parent = new Node();\n                        parent.setInfo(temp_line[0].trim());\n                        tree.add_node(parent);\n                    }\n\n                    if (check_point == true) {\n                        parent = new Node();\n                        parent.setStatus(\"Mandatory\");\n                        parent.setInfo(temp_line[0].trim());\n\n                        tree.add_node(tree.getRoot(), parent);\n                    }\n                    for (int i = 1; i < temp_line.length; i++) {\n                        Node node = new Node(); \n                        if(tree.search_parent(temp_line[i].trim()) != null)\n                            node= tree.search_parent(temp_line[i].trim());\n                        node.setInfo(temp_line[i].trim());\n                        if (!temp_line[i].contains(\"?\"))\n                            node.setStatus(\"Mandatory\");\n                        else {\n\n                            node.setStatus(\"Optional\");\n                            node.setInfo(node.getInfo().replace(\"?\", \"\").trim());\n                        }\n\n                        tree.add_node(parent, node);\n\n                    }\n\n                }\n                if (str.contains(\"|\")) {\n                    String[] temp_line = str.split(\"[=,|]\");\n                    Node parent = tree.search_parent(temp_line[0].trim());\n                    if (parent == null && check_point == false) {\n                        parent = new Node();\n                        parent.setInfo(temp_line[0].trim());\n                        tree.add_node(parent);\n                    }\n                    if (check_point == true) {\n                        parent = new Node();\n                        parent.setStatus(\"Mandatory\");\n                        parent.setInfo(temp_line[0].trim());\n                        tree.add_node(tree.getRoot(), parent);\n                    }\n                    for (int i = 1; i < temp_line.length; i++) {\n                        Node node = new Node();\n                        if(tree.search_parent(temp_line[i].trim()) != null)\n                            node= tree.search_parent(temp_line[i].trim());\n                        node.setInfo(temp_line[i].trim());\n                        node.setStatus(\"Or\");\n                        tree.add_node(parent, node);\n                    }\n                }\n                if (str.contains(\"^\")) {\n                    String[] temp_line = str.split(\"[=,^]\");\n                    Node parent = tree.search_parent(temp_line[0].trim());\n                    if (parent == null && check_point == false) {\n                        parent = new Node();\n                        parent.setInfo(temp_line[0].trim());\n                        tree.add_node(parent);\n                    }\n                    if (check_point == true) {\n                        parent = new Node();\n                        parent.setStatus(\"Mandatory\");\n                        parent.setInfo(temp_line[0].trim());\n\n                        tree.add_node(tree.getRoot(), parent);\n                    }\n                    for (int i = 1; i < temp_line.length; i++) {\n                        Node node = new Node();\n                        if(tree.search_parent(temp_line[i].trim()) != null)\n                            node= tree.search_parent(temp_line[i].trim());\n                        node.setInfo(temp_line[i].trim());\n                        node.setStatus(\"Alternative\");\n                        tree.add_node(parent, node);\n                    }\n                }\n                check_point = false;\n                str = scan.nextLine().replace(\" \", \"\");\n            }\n            tree.find_father();\n            tree.delete_extra();\n            //System.out.println(tree);\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n            ArrayList<HashSet<Node>> sets = new ArrayList<>();\n            String input = scan.nextLine().replace(\" \", \"\");\n            while (!input.equals(\"##\")) {\n                input = input.replaceAll(\"\\\\{\", \"\");\n                input = input.replaceAll(\"\\\\}\", \"\");\n                String[] temp_line1 = input.split(\",\");\n                HashSet<Node> temp_set = new HashSet<>();\n                for (int i = 0; i < temp_line1.length; i++) {\n                    Node node = new Node();\n                    node.setInfo(temp_line1[i].trim());\n                    temp_set.add(node);\n                }\n                sets.add(temp_set);\n                input = scan.nextLine().replace(\" \", \"\");\n\n            }\n            for (HashSet<Node> final_set : sets) {\n                if (check(tree, final_set))\n                    result.add(\"Valid\");\n                else\n                    result.add(\"Invalid\");\n\n            }\n            result.add(\"+++\");\n            str = scan.nextLine().replace(\" \", \"\");\n        }\n        for (String s : result) {\n            System.out.println(s);\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_145__1_1001_158", "golden_code": "import java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.text.BreakIterator;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Hashtable;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.Queue;\nimport java.util.Scanner;\nimport java.io.BufferedReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.io.InputStream;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tScanner scan = new Scanner(System.in);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n}\n\nclass TaskC {\n\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\n\t\tScanner scan=new Scanner(System.in);\n\t\twhile(scan.hasNextInt()){\n\t\t\tout.println(scan.nextInt()+scan.nextInt());\n\t\t}\n\t}\n}\n\nclass InputReader {\n\tBufferedReader br;\n\tStringTokenizer st;\n\n\tpublic InputReader(InputStream in) {\n\t\tbr = new BufferedReader(new InputStreamReader(in));\n\t\tst = null;\n\t}\n\n\tpublic String next() {\n\t\twhile (st == null || !st.hasMoreTokens()) {\n\t\t\ttry {\n\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn st.nextToken();\n\t}\n\n\tpublic int nextInt() {\n\t\treturn Integer.parseInt(next());\n\t}\n\n\tpublic long nextLong() {\n\t\treturn Long.parseLong(next());\n\t}\n\n\tpublic double nextDouble() {\n\t\treturn Double.parseDouble(next());\n\t}\n}", "generated_code": "import java.io.IOException;\nimport java.util.Scanner;\n\nclass Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\t\tSystem.out.println(sc.nextInt()+sc.nextInt());\n\t\t}\n\t\tsc.close();\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1119_23__1_2791_3", "golden_code": "import java.util.*;\n\nclass Main {\n\n\tpublic static void main(String[] u) {\n\t\tScanner b = new Scanner(System.in);\n\t\twhile (b.hasNext()) {\n\t\t\tint n = b.nextInt(), c = b.nextInt() * 2, s = 0, j = 2, i = n, a[] = new int[n];\n\t\t\twhile (i >0)\n\t\t\t\tif (i % j == 0 && i != 2) {\n\t\t\t\t\tj = 2;\n\t\t\t\t\ti--;\n\t\t\t\t} else if (j * j++ > i) {\n\t\t\t\t\ta[s++] = i--;\n\t\t\t\t\tj = 2;\n\t\t\t\t}\n\t\t\tj = (j = s - c + s % 2) < 0 ? 0 : j / 2;\n\t\t\tString v = n + \" \" + c / 2 + \":\";\n\t\t\tfor(s-=j;j<s;)\n\t\t\t\tv += \" \" + a[--s];\n\t\t\tSystem.out.println(v + '\\n');\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner sc = new Scanner(System.in);\n        int a, b, c, d;\n\n        a = sc.nextInt();\n        b = sc.nextInt();\n        c = sc.nextInt();\n        d = sc.nextInt();\n        while (a != 0 && b != 0 && c != 0 && d != 0) {\n            if (a <= b && d >= c) {\n                System.out.println((c - b) + \" \" + (d - a));\n            } else if (a <= b && c >= d) {\n                System.out.println((d - b) + \" \" + (c - a));\n            } else if (b <= a && d >= c) {\n                System.out.println((c - a) + \" \" + (d - b));\n            } else if (b <= a && c >= d) {\n                System.out.println((c - b) + \" \" + (d - a));\n            }\n            a = sc.nextInt();\n            b = sc.nextInt();\n            c = sc.nextInt();\n            d = sc.nextInt();\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_2837_30__1_1656_32", "golden_code": "\nimport java.util.Scanner;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n/**\n *\n * @author Nima\n */\npublic class Main {\n    public static void main(String[] args) {\n        \n        Scanner sc=new Scanner(System.in);\n        String last=\"\";\n        String finaly=\"\";\n        \n        \n        \n        while(true){\n            \n            String line=sc.nextLine().trim();\n            if(line.equals(\"END\")){\n                break;\n            }else if(line.equals(\"GetFinal\")){\n                if(last.equals(\"\")){\n                    System.out.println(finaly);\n                }else{\n                    System.out.println(last);\n                }\n                \n            }else{\n                if(line.compareTo(finaly)>0){\n                    last=finaly;\n                    finaly=line;\n                }else if(line.compareTo(last)>0){\n                    last=line;\n                }\n            }\n        }\n        \n    }\n}\n", "generated_code": "import java.util.*;   \n  \nclass Main {   \n  \n    public static void main(String[] args) {   \n        Scanner cin = new Scanner(System.in);   \n           \n        while(true)   \n        {   \n            String temp = cin.nextLine();   \n            if(temp.equals(\"-1\"))   \n                break;   \n            temp = temp.substring(0, temp.length()-1).trim();   \n  \n            int[] num = new int[15];   \n            String[] str = temp.split(\" \");   \n            for(int i = 0; i < str.length; i++)   \n                num[i] = Integer.valueOf(str[i]).intValue();   \n           \n            int result = 0;   \n            for(int i = 0; i < str.length; i++)   \n            {   \n                for(int j = 0; j < str.length; j++)   \n                    if(num[i] == num[j] * 2)   \n                        result++;   \n            }   \n            System.out.println(result);   \n        }   \n  \n    }   \n  \n} ", "score": 0.0}
{"id": "SHARE_1_1003_22__1_2713_60", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int a = input.nextInt() , b = input.nextInt() , c = input.nextInt();\n        while (a != 0 && b != 0 && c != 0){\n            String L = input.next();\n            char[] L2 = new char[L.length()];\n            int AI = 0 , JI = 0 , SI = 0;\n            char[] A = new char[L.length()];\n            char[] J = new char[L.length()];\n            char[] S = new char[L.length()];\n            int[]  AN = new int[L.length()];\n            int[]  JN = new int[L.length()];\n            int[]  SN = new int[L.length()];\n            for (int i = 0 ; i < L.length() ; i++){\n                if('a' <= L.charAt(i) && L.charAt(i) <= 'i' ){\n                    A[AI] = L.charAt(i); AN[AI] = i ; AI++;\n                }\n                else if ('j' <= L.charAt(i) && L.charAt(i) <= 'r'){\n                    J[JI] = L.charAt(i); JN[JI] = i ;JI++;\n                }\n                else {\n                    S[SI] = L.charAt(i) ; SN[SI]= i ; SI++;\n                }\n            }\n            for (int i = 0 ; i < AI ; i++){\n                L2[AN[(a+i)%AI]] = A[i];\n            }\n            for (int i = 0 ; i < JI ; i++){\n                L2[JN[(b+i)%JI]] = J[i];\n            }\n            for (int i = 0 ; i < SI ; i++){\n                L2[SN[(c+i)%SI]] = S[i];\n            }\n            System.out.println(L2);\n            a = input.nextInt();\n            b = input.nextInt();\n            c = input.nextInt();\n        }\n    }\n}\n", "generated_code": "import java.util.*;\npublic class Main{\n\tpublic static int f(int n){\n\t\tif(n==1){\n\t\t\treturn 1;\n\t\t}\n\t\tif(n%2==0){\n\t\t\treturn 1 + f(n/2);\n\t\t}\n\t\telse{\n\t\t\treturn 1 + f(3*n+1);\n\t\t}\n\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(sc.hasNext()){\n\t\t\tint n = sc.nextInt();\n\t\t\tif(n==0)\n\t\t\t\tbreak;\n\t\t\tSystem.out.println(f(n));\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1006_38__1_1006_117", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while(true){\n            \n        double m = in.nextDouble();\n            if (m == 0.00) {\n                break;\n            }\n        double count = 0;\n        double sum =0;\n        int a= 0;\n        while (true) {     \n            count++;\n            \n            sum =sum +(1/(count+1));\n            if (sum >= m) {\n                a = (int) count;\n                System.out.println(a+\" card(s)\");\n                break;\n            }\n        }\n    }}\n    \n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tdouble a = scan.nextDouble();\n\t\twhile(a != 0.00) {\n\t\t\tdouble b= 0;\n\t\t\tint i = 2;\n\t\t\tfor(; b <= a; i++) {\n\t\t\t\tb += 1.0/i;\n\t\t\t}\n\t\t\tSystem.out.println(i-2 + \" card(s)\");\n\t\t\ta = scan.nextDouble();\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_106015_18__1_1001_143", "golden_code": "import java.util.Scanner;\nimport java.math.BigInteger;\n\n public class Main{\n    public static void main(String[] args){\n     int n;\n      BigInteger  a[]=new  BigInteger[1001];\n     a[1]=BigInteger.ZERO;\n     for(int i=2;i<=1000;i++){\n           if(i%2==0) a[i]=a[i-1].multiply(BigInteger.valueOf(2)).add(BigInteger.ONE);\n           else       a[i]=a[i-1].multiply(BigInteger.valueOf(2)).subtract(BigInteger.ONE);\n        }\n\t\tScanner scan = new Scanner(System.in);\n     while(scan.hasNext())\n        {\n       n = scan.nextInt();\n       System.out.println(a[n]);\n     }\n   }\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scan = new Scanner(System.in);\n        while(scan.hasNext())\n            System.out.println(scan.nextInt()+scan.nextInt());\n    }\n}", "score": 0.0}
{"id": "SHARE_1_2500_40__1_2500_43", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner in = new Scanner(System.in);\n        while (true) {\n            int n = in.nextInt();\n            double m = in.nextDouble();\n            if (n == 0 && m == 0) {\n                System.exit(0);\n            }\n            if (m%2==0) {\n                System.out.println(\"No\");\n                continue;\n            }\n\n            while (n >= 1) {\n\n                if (m > Math.pow(3, n) / 3 && m <= 2 * (Math.pow(3, n) / 3)) {\n                    System.out.println(\"No\");\n                    break;\n                } else if (m <= Math.pow(3, n) / 3) {\n                    if (n != 1) {\n                        n--;\n                    } else {\n                        System.out.println(\"Yes\");\n                        break;\n                    }\n                } else {\n                    if (n != 1) {\n                        m -= (2 * (Math.pow(3, n) / 3));\n                    } else {\n                        System.out.println(\"Yes\");\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}\n", "generated_code": "\n//JZP263\n//sinashaloudegi@gmail.com\n//CuttingWood\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner in = new Scanner(System.in);\n        while (true) {\n            int n = in.nextInt();\n            double m = in.nextDouble();\n            if (n == 0 && m == 0) {\n                System.exit(0);\n            }\n            if (m % 2 == 0) {\n                System.out.println(\"No\");\n                continue;\n            }\n\n            while (n >= 1) {\n\n                if (m > Math.pow(3, n) / 3 && m <= 2 * (Math.pow(3, n) / 3)) {\n                    System.out.println(\"No\");\n                    break;\n                } else if (m <= Math.pow(3, n) / 3) {\n                    if (n != 1) {\n                        n--;\n                    } else {\n                        System.out.println(\"Yes\");\n                        break;\n                    }\n                } else if (2 * (Math.pow(3, n)) > m && m <= Math.pow(3, n)) {\n\n                    {\n                        if (n != 1) {\n                            m -= (2 * (Math.pow(3, n) / 3));\n                        } else {\n                            System.out.println(\"Yes\");\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_363__1_1001_42", "golden_code": "import java.util.Scanner;\n\nclass Main {\n\n    public static void main(String args[]) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext()) {\n            System.out.println(cin.nextInt() + cin.nextInt());\n        }\n    }\n}", "generated_code": "import java.util.*;\nclass Main {\n\tpublic static void main(String args[]){\n\t\tScanner A = new Scanner(System.in);\n\t\twhile(A.hasNextInt()){\n\t\t\tint a = A.nextInt();\n\t\t\tint b = A.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1006_93__1_1006_26", "golden_code": "\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n/**\n *\n * @author kazemi\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner input = new Scanner(System.in);\n        float n =  (float) 0.00 ;\n        float s = (float) 1.00 ;\n        float i = (float) 2.00;\n        ArrayList<Integer> a = new ArrayList();\n        \n        float m = input.nextFloat();\n        while(m != (float)0.00){\n            \n           while(m >= 0.00)\n        {\n            n =(s/i);\n            m = m - n;\n            i++;\n           \n        }\n           a.add(((int)i)-2);\n            \n           m = input.nextFloat();\n           i = (float) 2.00;\n        }\n        \n        \n        for (int j = 0; j < a.size(); j++) {\n            System.out.println(\"\"+a.get(j)+\" card(s)\");\n        }\n        \n    }\n          \n    \n}\n", "generated_code": "import java.util.*;class Main{public static void main(String[] args){Scanner scan=new Scanner(System.in);double a=scan.nextDouble();double n=2;int c;double sum=0;while(a!=0.00){c=0;n=2;sum=0;while(sum<=a){sum+=1/n;n++;c++;}System.out.println(c+\" card(s)\");a=scan.nextDouble();}}}", "score": 1.0}
{"id": "SHARE_1_2554_56__1_2554_43", "golden_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        String answers = \"\";\n        Scanner line = new Scanner(System.in);\n        String newLine = line.nextLine();\n\n        while ( !(newLine.equals(\"###\") ) ){\n            List<Feature> features = new ArrayList<Feature>();\n            List<String> names = new ArrayList<String>();\n\n            while ( !(newLine.equals(\"#\") ) ){\n                    newLine = newLine.trim().replaceAll(\"\\\\s+\", \"\");\n\n                    String firstName = newLine.split(\"=\")[0].trim().replaceAll(\" +\", \"\");\n                   int index = processFirst(firstName, names, features);\n                    processChildren(newLine, names, features, index);\n                    features.get(index).setChildType(setDivider(newLine));\n\n                    newLine = line.nextLine();\n                }\n            newLine = line.nextLine();\n\n            while ( !(newLine.equals(\"##\") ) ){\n                resetUsedChildren(features);\n                List<String> testCase = new ArrayList<String>();\n                List<Feature> testFeatures = new ArrayList<Feature>();\n\n                boolean Invalid = getTestCase(newLine, names, features, testCase, testFeatures);\n\n                if (Invalid){\n                    answers+=(\"Invalid\\n\");\n                    newLine = line.nextLine();\n                    break;\n                }\n\n                Invalid = true;\n\n                Invalid = rootCheck(Invalid, testCase, testFeatures);\n\n                Invalid = mandatoryCheck(Invalid, testCase, testFeatures);\n\n                countChildren(testFeatures);\n                Invalid = childrenCheck(Invalid, testFeatures);\n\n                Invalid = parentCheck(Invalid, testFeatures);\n\n                if (Invalid){\n                    answers += \"Invalid\\n\";\n                } else answers += \"Valid\\n\";\n\n                newLine = line.nextLine();\n            }\n            answers += \"+++\\n\";\n            newLine = line.nextLine();\n        }\n        System.out.print(answers);\n    }\n\n    static String setDivider(String newLine){\n        if (newLine.contains(\"+\")){\n            return  \"\\\\+\";\n        } else if (newLine.contains(\"|\")){\n            return  \"\\\\|\";\n        } else if (newLine.contains(\"^\")){\n            return  \"\\\\^\";\n        }\n        return \"\";\n    }\n\n    static int processFirst(String firstName, List<String> names, List<Feature> features){\n        if (names == null || names.indexOf(firstName) == -1 ){\n            names.add(firstName);\n            Feature first = new Feature(firstName);\n            features.add(first);\n        }\n        return names.indexOf(firstName);\n    }\n\n    static void processChildren(String newLine, List<String > names, List<Feature> features, int index){\n        String[] children;\n        children = newLine.split(\"=\")[1].split(setDivider(newLine));\n\n        for (String name: children) {\n            String editedName = name.contains(\"?\") ? name.substring(1) : name;\n            if (names.indexOf(editedName) == -1) {\n                names.add(((editedName)).trim().replaceAll(\"\\\\s+\", \"\"));\n                features.add(new Feature(name));\n            }\n            features.get(index).setChild(features.get(names.indexOf((editedName))));\n            if (name.contains(\"?\")) features.get(names.indexOf(name.substring(1))).optional = true;\n        }\n    }\n\n    static void resetUsedChildren(List<Feature> features){\n        for (Feature f: features) {\n            f.childUsedCount = 0;\n        }\n    }\n\n    static boolean getTestCase(String newLine, List<String> names, List<Feature> features, List<String> testCase, List<Feature> testFeatures){\n        boolean Invalid = false;\n        for (String x:\n                newLine.trim().replaceAll(\"\\\\{\",\"\").trim().replaceAll(\"}\", \"\").trim().replaceAll(\"\\\\s+\",\"\").split(\",\")\n        ) {\n            testCase.add(x);\n            if (names.indexOf(x) != -1)\n                testFeatures.add(features.get(names.indexOf(x)));\n            else Invalid = true;\n        }\n        return Invalid;\n    }\n\n    static boolean rootCheck(boolean Invalid, List<String> testCase, List<Feature> testFeatures){\n        for (int index = 0; index < testCase.size() && Invalid; index++){\n            if ( testFeatures.get(index).parent == null ) Invalid = false;\n        }\n        return Invalid;\n    }\n\n    static boolean mandatoryCheck(boolean Invalid, List<String> testCase, List<Feature> testFeatures){\n        for (int index = 0; index < testFeatures.size() && !Invalid; index++){\n            for (Feature feature: testFeatures.get(index).children\n            ) {\n                if ( feature.parentRelType == 1 && testFeatures.indexOf(feature) == -1 ){\n                    Invalid = true;\n                }\n                if (Invalid) break;\n            }\n        }\n        return Invalid;\n    }\n\n    static void countChildren(List<Feature> testFeatures){\n        for (Feature feature: testFeatures) {\n            if (feature.parent != null)\n                feature.parent.childUsedCount++;\n        }\n    }\n\n    static boolean childrenCheck(boolean Invalid, List<Feature> testFeatures){\n        for (Feature feature: testFeatures) {\n            if ((feature.childRelType == 1 && feature.childUsedCount != 1)) {\n                Invalid = true;\n                break;\n            }\n            if (feature.childRelType == 2 && feature.childUsedCount < 1){\n                Invalid = true;\n                break;\n            }\n        }\n        return Invalid;\n    }\n\n    static boolean parentCheck(boolean Invalid, List<Feature> testFeatures){\n        for (Feature feature: testFeatures) {\n            if (feature.parent != null){\n                if (testFeatures.indexOf(feature.parent) == -1){\n                    Invalid = true;\n                    break;\n                }\n            }\n        }\n        return Invalid;\n    }\n\n}\nclass Feature {\n    public String name;\n    public List<Feature> children;\n    public Feature parent;\n    public boolean optional = false;\n    public int childUsedCount = 0;\n    public int childRelType = 0;\n    public int parentRelType = 0;\n\n    public Feature(String name){\n        if (name.contains(\"?\")) {\n            this.optional = true;\n            name = name.substring(1);\n        }\n        this.setName(name);\n        this.children = new ArrayList<Feature>();\n    }\n\n    public void setChildType(String divider) {\n        if (divider == \"\\\\^\") {\n            this.childRelType = 1;\n        } else if (divider == \"\\\\|\") {\n            this.childRelType = 2;\n        } else {\n            for (Feature f : this.children) {\n                if (f.optional)\n                    f.parentRelType = 2;\n                else\n                    f.parentRelType = 1;\n            }\n        }\n    }\n\n    public void setChild(Feature child){\n        child.setParent(this);\n        this.children.add(child);\n    }\n\n    public void setParent(Feature parent) {\n        this.parent = parent;\n    }\n\n    public void setName(String name){ this.name = name; }\n\n}\n\n", "generated_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        List<String> answers = new ArrayList<String>();\n        Scanner line = new Scanner(System.in);\n        String newLine = line.nextLine();\n        while ( !(newLine.equals(\"###\") ) ){\n            List<Feature> features = new ArrayList<Feature>();\n            List<String> names = new ArrayList<String>();\n            while ( !(newLine.equals(\"#\") ) ){\n                    newLine = newLine.trim().replaceAll(\"\\\\s+\", \"\");\n\n                    String divider = \"\";\n                    if (newLine.contains(\"+\")){\n                        divider = \"\\\\+\";\n                    } else if (newLine.contains(\"|\")){\n                        divider = \"\\\\|\";\n                    } else if (newLine.contains(\"^\")){\n                        divider = \"\\\\^\";\n                    }\n                    String firstName = newLine.split(\"=\")[0].trim().replaceAll(\" +\", \"\");\n                    if (names == null || names.indexOf(firstName) == -1 ){\n                        names.add(firstName);\n                        Feature first = new Feature(firstName);\n                        features.add(first);\n                    }\n                        int i = names.indexOf(firstName);\n                    String[] children;\n                    children = newLine.split(\"=\")[1].split(divider);\n                    for (String name: children\n                         ) {\n                        if (names.indexOf(name.contains(\"?\") ? name.substring(1) : name) == -1) {\n                            names.add(((name.contains(\"?\") ? name.substring(1) : name)).trim().replaceAll(\"\\\\s+\", \"\"));\n                            features.add(new Feature(name));\n                        }\n                        features.get(i).setChild(features.get(names.indexOf((name.contains(\"?\")) ? name.substring(1) : name)));\n                        if (name.contains(\"?\")) features.get(names.indexOf(name.substring(1))).optional = true;\n                    }\n\n\n                        features.get(i).setChildrenType(divider);\n\n                    newLine = line.nextLine();\n                }\n\n     newLine = line.nextLine();\n            while ( !(newLine.equals(\"##\") ) ){\n\n                for (Feature f: features) {\n                    f.childUsedCount = 0;\n                }\n                List<String> testCase = new ArrayList<String>();\n                List<Feature> testFeatures = new ArrayList<Feature>();\n                boolean Invalid = false;\n                for (String x:\n                        newLine.trim().replaceAll(\"\\\\{\",\"\").trim().replaceAll(\"}\", \"\").trim().replaceAll(\"\\\\s+\",\"\").split(\",\")\n                     ) {\n                    testCase.add(x);\n                    if (names.indexOf(x) != -1)\n                        testFeatures.add(features.get(names.indexOf(x)));\n                    else Invalid = true;\n                }\n\n                if (Invalid){\n                    answers.add(\"Invalid\");\n                    newLine = line.nextLine();\n                    break;\n                }\n\n                Invalid = true;\n\n                // each test case must include the root, the feature with null as parent :\n                for (int index = 0; index < testCase.size() && Invalid; index++){\n                    if ( testFeatures.get(index).parent == null ) Invalid = false;\n                }\n\n                // A mandatory feature must be included if its parent is included :\n                // So for every feature, we create a loop on its children and if they were\n                // mandatory they must be included in the testcase, if not, the test case would be invalid!! :\n                for (int index = 0; index < testFeatures.size() && !Invalid; index++){\n                    for (Feature feature: testFeatures.get(index).children\n                         ) {\n                        if ( feature.parentRelType == 1 && testFeatures.indexOf(feature) == -1 ){\n                            Invalid = true;\n                        }\n                        if (Invalid) break;\n                    }\n                }\n\n                //if a parent is included and has children of type 'or' '^', at least one child must be included\n                //if a parent is included and has children of type 'alt' '|', exactly one child must be included\n                //first we count the children used for every feature\n                for (Feature feature: testFeatures) {\n                    if (feature.parent != null)\n                        feature.parent.childUsedCount++;\n                }\n                // now we check :\n                for (Feature feature: testFeatures) {\n                        if ((feature.childRelType == 1 && feature.childUsedCount != 1)) {\n                            Invalid = true;\n                            break;\n                        }\n                        if (feature.childRelType == 2 && feature.childUsedCount < 1){\n                            Invalid = true;\n                            break;\n                        }\n                }\n\n                //if a child is present, its parent must be present too\n                for (Feature feature: testFeatures) {\n                    if (feature.parent != null){\n                        if (testFeatures.indexOf(feature.parent) == -1){\n                            Invalid = true;\n                            break;\n                        }\n                    }\n                }\n\n\n                if (Invalid){\n                    answers.add(\"Invalid\");\n                } else answers.add(\"Valid\");\n\n                newLine = line.nextLine();\n            }\n            answers.add(\"+++\");\n            newLine = line.nextLine();\n        }\n        for (String x: answers\n             ) {\n            System.out.println(x);\n        }\n    }\n}\n\nclass Feature {\n    public String name;\n    public List<String> subsName;\n    public List<Feature> children;\n    public Feature parent;\n    public boolean optional = false;\n    public int childUsedCount = 0;\n    public int childRelType = 0; // 0 for normal, 1 for alternative, 2 for or\n    public int parentRelType = 0; // 0 if not related with +, 1 if mandatory, 2 if optional\n\n    public Feature(String name){\n        if (name.contains(\"?\")) {\n            this.optional = true;\n            name = name.substring(1);\n        }\n        this.name = name;\n        this.children = new ArrayList<Feature>();\n        this.subsName = new ArrayList<String>();\n    }\n\n    public void setChildrenType(String divider) {\n        if (divider == \"\\\\^\") {\n            this.childRelType = 1;\n        } else if (divider == \"\\\\|\") {\n            this.childRelType = 2;\n        } else {\n            for (Feature f : this.children) {\n                if (f.optional)\n                    f.parentRelType = 2;\n                else\n                    f.parentRelType = 1;\n            }\n        }\n    }\n\n    public void setChild(Feature child){\n        child.setParent(this);\n        this.children.add(child);\n    }\n\n    public void setParent(Feature parent) {\n        this.parent = parent;\n    }\n}\n\n", "score": 1.0}
{"id": "SHARE_1_1454_7__1_1478_4", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        String[] s = new String[30];\n        s[0] = \".-\";\n        s[1] = \"-...\";\n        s[2] = \"-.-.\";\n        s[3] = \"-..\";\n        s[4] = \".\";\n        s[5] = \"..-.\";\n        s[6] = \"--.\";\n        s[7] = \"....\";\n        s[8] = \"..\";\n        s[9] = \".---\";\n        s[10] = \"-.-\";\n        s[11] = \".-..\";\n        s[12] = \"--\";\n        s[13] = \"-.\";\n        s[14] = \"---\";\n        s[15] = \".--.\";\n        s[16] = \"--.-\";\n        s[17] = \".-.\";\n        s[18] = \"...\";\n        s[19] = \"-\";\n        s[20] = \"..-\";\n        s[21] = \"...-\";\n        s[22] = \".--\";\n        s[23] = \"-..-\";\n        s[24] = \"-.--\";\n        s[25] = \"--..\";\n        s[26] = \"..--\";\n        s[27] = \".-.-\";\n        s[28] = \"---.\";\n        s[29] = \"----\";\n        int[] l = new int[30];\n        for (int i = 0; i < 30; i++) {\n            l[i] = s[i].length();\n        }\n        int t = input.nextInt();\n        input.nextLine();\n        for (int i = 0; i < t; i++) {\n            String code = \"\";\n            String num = \"\";\n            String str = input.nextLine();\n            int length = str.length();\n            char[] ch = str.toCharArray();\n            for (int j = 0; j < length; j++) {\n                if (ch[j] == '.') {\n                    code += s[28];\n                    num += l[28];\n                } else if (ch[j] == '_') {\n                    code += s[26];\n                    num += l[26];\n                } else if (ch[j] == ',') {\n                    code += s[27];\n                    num += l[27];\n                } else if (ch[j] == '?') {\n                    code += s[29];\n                    num += l[29];\n                } else if (ch[j] >= 65) {\n                    int x = (int) ch[j] - 65;\n                    code += s[x];\n                    num += l[x] + \"\";\n                }\n            }\n            num = r(num);\n            String msg = \"\";\n            int ll = num.length();\n            for (int j = 0; j < ll; j++) {\n                int n = Integer.parseInt(num.substring(j, j + 1));\n                String x = code;\n                x = code.substring(0, n);\n                code = code.substring(n);\n                if (x.equals(s[26])) {\n                    msg += \"_\";\n                } else if (x.equals(s[27])) {\n                    msg += \",\";\n                } else if (x.equals(s[28])) {\n                    msg += \".\";\n                } else if (x.equals(s[29])) {\n                    msg += \"?\";\n                } else {\n                    for (int k = 0; k < 26; k++) {\n                        if (x.equals(s[k])) {\n                            char y = (char) (k + 65);\n                            msg += y + \"\";\n                            break;\n                        }\n                    }\n                }\n            }\n            System.out.printf(\"%d: %s\\n\", i + 1, msg);\n        }\n    }\n    static String r(String s) {\n        String ss = \"\";\n        for (char ch : s.toCharArray()) {\n            ss = ch + \"\" + ss;\n        }\n        return ss;\n    }\n}", "generated_code": "\nimport java.awt.Point;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.regex.Pattern;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n/**\n *\n * @author Mojtaba\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        StringBuilder sb = new StringBuilder();\n\n        int t = in.nextInt();\n        for (int i = 0; i < t; i++) {\n            int n = in.nextInt();\n            double sum = 0.000001;\n            for (int j = 1; j <= n; j++) {\n                sum += Math.log10(j);\n            }\n            sb.append((int) (Math.ceil(sum))).append(\"\\n\");\n        }\n        System.out.println(sb.toString().trim());\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1652_5__1_1319_62", "golden_code": "import java.util.Scanner;\n\n\npublic class Main{\n    public static void main (String [] args){\n        Scanner s = new Scanner(System.in);\n        l:while (true){\n            int counter = 0 ;\n            boolean [][] bool = new boolean[25][25];\n            while (true){\n                int gx1 = s.nextInt();\n                int gy1 = s.nextInt();\n                if (gx1==0 && gy1==0)\n                    break;\n                if(gx1==-1 && gy1==-1)break l;\n                bool[gx1][gy1] = true ;\n            }\n            int x = 1;\n            boolean b =false ;\n            for (int i = 1 ; i<=24 ; i++){\n                for (int j = 1 ; j<=24 ; j++){\n                    if ((bool[i][j]) && (j>=x)){\n                       bool[i][j]=false;\n                       b=true;\n                       x=j;\n                    }\n                   if ((i==24 && j==24) && (b)){\n                       counter++;\n                       i=0;j=0;x=1;\n                       b=false;\n                   }\n                }\n            }\n            System.out.println(counter);\n        }\n   }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner in = new Scanner(System.in);\n\n        int place = in.nextInt();\n        while (place != 5280) {\n            Integer flag = 0;\n            Integer reptime = 0;\n            int currentnum = 0;\n            int lastnum = 0;\n\n            while ((flag == 0) && (reptime != 21)) {\n                currentnum = in.nextInt();\n                reptime++;\n\n                if (currentnum == place) {\n                    System.out.print(\"Moving from \" + lastnum + \" to \" + currentnum + \": found it!\\n\");\n//                    System.out.print(\"\\n\");\n                    flag = 1;\n                } else {\n\n                    if (Math.abs(currentnum - place) == Math.abs(lastnum - place)) {\n                        System.out.print(\"Moving from \" + lastnum + \" to \" + currentnum + \": same.\\n\");\n                        lastnum = currentnum;\n                    }\n\n                    if (Math.abs(currentnum - place) > Math.abs(lastnum - place)) {\n                        System.out.print(\"Moving from \" + lastnum + \" to \" + currentnum + \": colder.\\n\");\n                        lastnum = currentnum;\n                    }\n\n                    if (Math.abs(currentnum - place) < Math.abs(lastnum - place)) {\n                        System.out.print(\"Moving from \" + lastnum + \" to \" + currentnum + \": warmer.\\n\");\n                        lastnum = currentnum;\n                    }\n                }\n            }\n            place = in.nextInt();\n            if(place!=5280){\n                System.out.println();\n            }\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1018_60__1_2857_37", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner s=new Scanner(System.in);\n        int x=0;\n        while(true){\n            int l=s.nextInt();\n            if(l==0){\n                break;\n            }\n            if(x!=0){\n                System.out.println();\n            }\n            x=1;\n            int A[]=new int[l];\n            int B[]=new int[l];\n            for (int i = 0; i < l; i++) {\n                A[i]=s.nextInt();\n            }\n            for (int i = 0; i < l; i++) {\n                B[i]=s.nextInt();\n            }\n            int sumA=0,sumB=0;\n            for (int i = 0; i < l; i++) {\n                if(A[i]==1 && B[i]==2){\n                    sumA+=6;\n                }else if(A[i]==2 && B[i]==1){\n                    sumB+=6;\n                }else if(A[i]==(B[i]+1)){\n                    sumB+=A[i]+B[i];\n                }else if((A[i]+1)==B[i]){\n                    sumA+=A[i]+B[i];\n                }else if(A[i]>B[i]){\n                    sumA+=A[i];\n                }else if(A[i]<B[i]){\n                    sumB+=B[i];\n                }else if(A[i]==B[i]){\n                    continue;\n                }\n            }\n            System.out.println(\"A has \"+sumA+\" points. B has \"+sumB+\" points.\");\n        }\n        \n        \n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static int[] arr;\n//    public static int[] arr2;\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        for (int i = 0; i < t; i++) {\n            int n = sc.nextInt();\n            arr = new int[n];\n            for (int j = 0; j < n; j++) {\n                arr[j] = sc.nextInt();\n            }\n            aa:while (true) {\n                for (int j = 1; j < n; j++) {\n                    if (arr[j - 1] == arr[j]) {\n                        if (j == arr.length - 1) {\n                            System.out.println(arr[0]);\n                            break aa;\n                        }\n                    } else {\n                        break;\n                    }\n                }\n                int max = Integer.MIN_VALUE;\n                int max_i = 0, min_i = 0;\n                int min = Integer.MAX_VALUE;\n                for (int j = 0; j < arr.length; j++) {\n                    if (arr[j] > max) {\n                        max = arr[j];\n                        max_i = j;\n                    }\n                    if (arr[j] < min) {\n                        min = arr[j];\n                        min_i = j;\n                    }\n                }\n                arr[max_i] = max - min;\n                arr[min_i] = max - min;\n            }\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_489__1_1001_433", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\t\n\t\tScanner input=new Scanner(System.in);\n\t\twhile(input.hasNext()) {\n\t\tint a=input.nextInt();\n\t\tint b=input.nextInt();\n\t\tSystem.out.println(a+b);}\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]) throws Exception {\n        Scanner scanner = new Scanner(System.in);\n\n        while (scanner.hasNext()) {\n            int a = scanner.nextInt();\n            int b = scanner.nextInt();\n            System.out.println(a + b);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2733_20__1_2740_11", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner input = new Scanner(System.in);\n\t\t\n\t\tint t = input.nextInt();\n\t\t\n\t\tint n;\n\t\tint[] p;\n\t\tint[] w;\n\t\tint[] matched;\n\t\t\n\t\tfor (int i = 0; i < t; i++) {\n\t\t\t\n\t\t\tn = input.nextInt();\n\t\t\tp = new int[n + 1];\n\t\t\tw = new int[n + 1];\n\t\t\tmatched = new int[n + 1];\n\t\t\t\n\t\t\tfor (int j = 1; j < p.length; j++) {\n\t\t\t\t\n\t\t\t\tp[j] = input.nextInt();\n\t\t\t}\n\t\t\t\n\t\t\tw[1] = 1;\n\t\t\tmatched[p[1]] = 1;\n\t\t\t\n\t\t\tfor (int j = 2; j <= p.length - 1; j++) {\n\t\t\t\t\n\t\t\t\tif (p[j] > p[j-1]) {\n\t\t\t\t\t\n\t\t\t\t\tmatched[p[j]] = 1;\n\t\t\t\t\tw[j] = 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\telse {\n\t\t\t\t\t\n\t\t\t\t\tfor (int j2 = p[j] - 1; j2 > 0; j2--) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (matched[j2] == 0) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmatched[j2] = 1;\n\t\t\t\t\t\t\tw[j] = p[j] - j2 + 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (int j = 1; j <= w.length - 1; j++) {\n\t\t\t\t\n\t\t\t\tSystem.out.print(w[j] + \" \");\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args){\n\t\tScanner s=new Scanner(System.in);\n\t\tint t=s.nextInt();\n\t\touter: for(int tI=0;tI<t;tI++){\n\t\t\tSystem.out.println(\"Scenario #\"+(tI+1)+\":\");\n\t\t\tint lack=s.nextInt();\n\t\t\tint n=s.nextInt();\n\t\t\tint[] array=new int[n];\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tarray[i]=s.nextInt();\n\t\t\t}\n\t\t\tArrays.sort(array);\n\t\t\tint sum=0;\n\t\t\tfor(int i=n-1;i>=0;i--){\n\t\t\t\tsum+=array[i];\n\t\t\t\tif(sum>=lack){\n\t\t\t\t\tSystem.out.println(n-i);\n\t\t\t\t\tcontinue outer;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(\"impossible\");\n\t\t}\n\t\t\n\t}\n\t\n\n\n}", "score": 0.0}
{"id": "SHARE_1_2429_26__1_1001_506", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n   public static void main(String[] args) {\n      Scanner in = new Scanner(System.in);\n      int t = in.nextInt();\n      while (t-- > 0) {\n         long n = in.nextLong();\n         long sum = 1;\n         long i = 1;\n         while (i * i <= n) {\n            if (n % i == 0 && i > 1) {\n               if (i == n / i) {\n                  sum += i;\n               } else {\n                  sum += i + (n / i);\n               }\n            }\n            i++;\n         }\n         if (n == 1) {\n            sum--;\n         }\n         System.out.println(sum);\n      }\n   }\n}", "generated_code": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] arg){\n\t\tScanner scanner = new Scanner(System.in);\n\t\twhile(scanner.hasNext()){\n\t\t\tint a = scanner.nextInt();\n\t\t\tint b = scanner.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n\t\n}", "score": 0.0}
{"id": "SHARE_1_2212_1__1_2858_22", "golden_code": "\nimport java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        DecimalFormat df=new DecimalFormat(\"0.000\");\n        int t=in.nextInt();\n        for (int i = 0; i < t; i++) {\n            int n=in.nextInt();\n            int a[]=new int[n];\n            double sum=0,avg=0;\n            for (int j = 0; j < n; j++) {\n                a[j]=in.nextInt();\n                sum+=a[j];\n            }\n            sum=sum/n;\n            for (int j = 0; j < n; j++) {\n                if(a[j]>sum)\n                    avg++;\n            }\n            avg=avg/n*100;\n            System.out.println(df.format(avg)+\"%\");\n        }\n    }\n}\n", "generated_code": "import  java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t=in.nextInt();\n        for (int i = 0; i <t ; i++) {\n            int n=in.nextInt();\n            int m=in.nextInt();\n            int[] ln=new int[n];\n           int pn=0;\n            int[] lm=new int[m];\n            for (int j = 0; j <n ; j++)\n                ln[j]=in.nextInt();\n            for (int j = 0; j <m ; j++)\n                lm[j]=in.nextInt();\n            Arrays.sort(ln);\n            Arrays.sort(lm);\n            for (int j = 0,k=0; j <m ;) {\n                if(lm[j]>ln[k])\n                    k++;\n                else if(lm[j]==ln[k]) {\n                    pn++;\n                    k++;\n                    j++;\n                }else  if(lm[j]<ln[k])\n                    j++;\n                if(k==n)\n                    break;\n            }\n            System.out.println(pn);\n\n        }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_2353_16__1_2353_7", "golden_code": "import java.util.*;\n\nimport static java.lang.Math.*;\nimport static java.lang.System.*;\n\npublic class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\n\t\twhile (scan.hasNext())\n\t\t{\n\t\t\tint GCD = scan.nextInt(), LCM =  scan.nextInt();\n\t\t\tif(LCM % GCD != 0)\n\t\t\t{\n\t\t\t\tSystem.out.println(0);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint num = LCM / GCD;\n\n\t\t\tSet <Integer> factors = new TreeSet<Integer>();\n\n\t\t\tfor(int i = 1; i * i <= num; i ++)\n\t\t\t{\n\t\t\t\tif(num % i == 0)\n\t\t\t\t{\n\t\t\t\t\tfactors.add(i);\n\t\t\t\t\tfactors.add(num / i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tint[] number = new int[factors.size()];\n\t\t\tint cnt = 0;\n\t\t\tfor(int i : factors)\tnumber[cnt++] = i;\n\n\t\t\tcnt = 0;\n\t\t\tfor(int i = 0; i < number.length; i++)\n\t\t\t{\n\t\t\t\tint a = number[i];\n\t\t\t\tint b = num / a;\n\n\t\t\t\tboolean find = false;\n\t\t\t\tfor(int j = 2; j*j <=a; j++)\n\t\t\t\t\tif(a % j == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(b % j == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfind = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile (a % j == 0)\ta /= j;\n\t\t\t\t\t}\n\t\t\t\tif(a != 1)\n\t\t\t\t\tif(b % a == 0)\n\t\t\t\t\t\tfind = true;\n\n\t\t\t\tif(!find)  cnt ++;\n\t\t\t}\n\n\t\t\tout.println(cnt);\n\t\t}\n\n\t}\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tstatic int gcd(int x , int y) {\n\t\tif (y == 0)\n\t\t\treturn x;\n\t\telse\n\t\t\treturn gcd (y,x%y);\n\t}\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext()) {\n\t\t\tint x = in.nextInt(), y = in.nextInt();\n\t\t\tif (y % x != 0)\n\t\t\t\tSystem.out.println(0);\n\t\t\telse {\n\t\t\t\tint ab = Math.max(x,y)/Math.min(x, y);\n\t\t\t\tint count = 0;\n\t\t\t\tfor (int i = 0; i < ab; i++) {\n\t\t\t\t\tif (ab%(i+1) == 0 && gcd((Math.max(ab/(i+1),i+1)), Math.min(ab/(i+1),i+1)) == 1)\n\t\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(count);\n\t\t\t}\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2621_0__1_1200_2", "golden_code": "import java.io.*;\nimport java.util.*;\nimport java.math.*;\nimport java.awt.geom.*;\n\npublic class Main\n{\n    public static void main(String[] args) throws IOException\n    {\n        Scanner scan = new Scanner(System.in);\n\n        int ca = scan.nextInt();\n\n        while (ca-- > 0)\n        {\n            String number = scan.next();\n\n            boolean ok = true;\n\n            for(int i = 0;i < number.length();i++)\n                if(key(number.charAt(i)) != key(number.charAt(number.length()-1-i)))\n                    ok = false;\n\n            System.out.println(ok ? \"YES\" : \"NO\");\n        }\n    }\n\n    private static int key(char c)\n    {\n        if(c <= 'Z') return key((char)(c+'a'-'A'));\n\n        if(c < 'p') return (c-'a')/3;\n        if(c < 't') return 10;\n        if(c < 'w') return 11;\n        return 12;\n    }\n}", "generated_code": "import java.util.Scanner;\n\n\npublic class Main{\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile (in.hasNextInt()){\n\t\t\tint [] a = new int[9];\n\t\t\tfor (int i = 8;i>=0;i--)\n\t\t\t\ta[i] = in.nextInt();\n\t\t\tint i = 8;\n\t\t\tfor (;i>=0&&a[i]==0;i--) ;\n\t\t\tif (i == -1){\n\t\t\t\tSystem.out.println(0);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (i == 0){\n\t\t\t\tSystem.out.print(a[0]);\n\t\t\t}else if (i == 1){\n\n\t\t\t\tif (a[i] == 1)\n\t\t\t\t\tSystem.out.print(\"x\");\n\t\t\t\telse if (a[i] == -1)\n\t\t\t\t\tSystem.out.print(\"-x\");\n\t\t\t\telse\n\t\t\t\t\tSystem.out.print(a[i]+\"x\");\n\t\t\t}else{\n\n\t\t\t\tif (a[i] == 1)\n\t\t\t\t\tSystem.out.print(\"x^\"+i);\n\t\t\t\telse if (a[i] == -1)\n\t\t\t\t\tSystem.out.print(\"-x^\"+i);\n\t\t\t\telse\n\t\t\t\t\tSystem.out.print(a[i]+\"x^\"+i);\n\t\t\t}\n\t\t\ti--;\n\t\t\tfor (int j = i;j>=0;j--){\n\t\t\t\tif (a[j]==0){\n\t\t\t\t\tcontinue;\n\t\t\t\t}else if(a[j]<0){\n\t\t\t\t\ta[j]*=-1;\n\t\t\t\t\tSystem.out.print(\" - \");\n\t\t\t\t}else{\n\t\t\t\t\tSystem.out.print(\" + \");\n\t\t\t\t}\n\t\t\t\tif (j==0){\n\t\t\t\t\tSystem.out.print(a[j]);\n\t\t\t\t}else if (j==1){\n\t\t\t\t\tif (a[j] == 1)\n\t\t\t\t\t\tSystem.out.print(\"x\");\n\t\t\t\t\telse\n\t\t\t\t\t\tSystem.out.print(a[j]+\"x\");\n\t\t\t\t}else{\n\t\t\t\t\tif (a[j] == 1)\n\t\t\t\t\t\tSystem.out.print(\"x^\"+j);\n\t\t\t\t\telse\n\t\t\t\t\t\tSystem.out.print(a[j]+\"x^\"+j);\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_106017_45__1_106017_26", "golden_code": "import java.util.Scanner;\npublic class Main\n{ \n              public static int power(int n)\n              {\n                  int c=0;\n                  int m=1;\n                  while(c<3)\n                  {\n                        m*=n;\n            c++;\n                   }\n                  return(m);\n               }\n         \n             public static int doff(int n)\n             {\n                   int s=0;\n                    while(n!=0)\n                    {\n                      int m=n%10;\n                  s+=power(m);\n                  n=n/10;\n                  }\n                    return(s);\n              }\n   public static void main(String[] args)\n   {\n      Scanner scan=new Scanner(System.in);\n        int n=scan.nextInt();\n          while(scan.hasNextLine()){\n          int s=doff(n);\n          if(n==s)\n             System.out.println(\"Yes\");\n          else\n             System.out.println(\"No\");\n          n=scan.nextInt();\n          }\n  }\n}\n\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\t\n\t\tdouble cubes;\n\t\tint[] array = new int[3];\n\n\t\twhile(scan.hasNextInt())\n\t\t{\n\t\tint number= scan.nextInt();\n\t\tString str = String.valueOf(number);\n\t\t\n\t\tarray[0]= str.charAt(0)- '0';\n\t\tarray[1]= str.charAt(1)- '0';\n\t\tarray[2]= str.charAt(2)- '0';\n\t\t\n\t\tcubes= Math.pow(array[0], 3) + Math.pow(array[1], 3) + Math.pow(array[2], 3);\n\t\t\n\t\tif(cubes==number)\n\t\t\tSystem.out.println(\"Yes\");\n\t\t\n\t\telse\n\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1009_80__1_1009_125", "golden_code": "import java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        Float[] Numbers = new Float[12];\n        float Sum = 0;\n        for (int i = 0 ; i < 12 ; i++){\n            Numbers[i] = input.nextFloat();\n        }\n        for (int i = 0 ; i < 12 ; i++)\n        {\n            Sum += Numbers[i];\n        }\n        System.out.println(\"$\"+new DecimalFormat(\"#.##\").format(Sum/12));\n    }\n}\n", "generated_code": "import java.util.Scanner;\nclass Main {\n\tstatic boolean adj[]=new boolean [178000000];\n\t\n\tpublic static void main(String s[]) {\n\t\tScanner cin = new Scanner(System.in);\n\t\tdouble sum=0;\n\t\tfor(int i=0;i<12;i++)\n\t\t{\n\t\t\tdouble val=cin.nextDouble();\n\t\t\tsum+=val;\n\t\t}\n\t\tSystem.out.printf(\"$%.2f\\n\",sum/12);\n\t\tadj[0]=true;\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2791_27__5_1005_1", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int[] arr = new int[4];\n\n        while (true) {\n            for (int i = 0; i < arr.length; i++) {\n                arr[i] = input.nextInt();\n            }\n            if(arr[0] == 0 && arr[1] == 0 && arr[2] == 0 && arr[3] == 0)\n                return;\n            ranges(arr);\n        }\n\n    }\n\n    public static void ranges(int[] arr) {\n        int min = Math.abs(arr[1] - arr[2]);\n        int max = Math.abs(arr[0] - arr[3]);\n        System.out.println(min + \" \" + max);\n    }\n}", "generated_code": "import java.util.*;\n\npublic class Main {\n    public static Scanner in;\n    public static int n, m, a, b, time;\n    public static LinkedList[] graph;\n    public static Node[] allNodes;\n    public static void main(String[] args) {\n        in = new Scanner(System.in);\n        while(in.hasNext()) {\n            String [] str = in.nextLine().split(\" \");\n            n = Integer.parseInt(str[0]);\n            m = Integer.parseInt(str[1]);\n            if(m == 0 && n == 0)\n                break;\n            graph = new LinkedList[n];\n            allNodes = new Node[n];\n            for (int i=0 ; i<n ; i++) {\n                allNodes[i] = new Node(i);\n                graph[i] = new LinkedList();\n            }\n            while(m-- > 0) {\n                String [] line = in.nextLine().split(\" \");\n                a = Integer.parseInt(line[0]);\n                b = Integer.parseInt(line[1]);\n                graph[a-1].add(new Node(b-1));\n            }\n            DFS();\n            mergeSort(allNodes, 0, n);\n            for(int i=0 ; i<n-1 ; i++)\n                    System.out.print(allNodes[i].label+1 + \" \");\n            System.out.println(allNodes[n-1].label+1);\n\n        }\n    }\n\n    public static Node [] getNeighbors(int a) {\n        Vector<Node> gn = new Vector<Node>();\n        ListIterator it = graph[a].listIterator();\n        while(it.hasNext()) {\n            Node nd = (Node)it.next();\n            gn.add(nd);\n        }\n        Node [] adj_ = new Node[gn.size()];\n        for(int i=0 ; i<adj_.length ; i++)\n            adj_[i] = gn.elementAt(i);\n        return adj_;\n    }\n    \n    public static void DFS() {\n        for(int i=0 ; i<allNodes.length ; i++) {\n            allNodes[i].color = \"white\";\n            allNodes[i].p = null;\n        }\n        time = 0;\n        for(int i=0 ; i<allNodes.length ; i++) {\n            if(allNodes[i].color.equals(\"white\")) {\n                DFSvisit(allNodes[i]);\n            }\n        }\n    }\n    \n    public static void DFSvisit(Node nd) {\n        nd.color = \"gray\";\n        time ++;\n        nd.discover = time;\n        Node [] adj = getNeighbors(nd.label);\n        mergeSort2(adj, 0, adj.length);\n        for(int i=adj.length-1 ; i>=0 ; i--) {\n            if(allNodes[adj[i].label].color.equals(\"white\")) {\n                allNodes[adj[i].label].p = nd;\n                DFSvisit(allNodes[adj[i].label]);\n            }\n        }\n        nd.color = \"black\";\n        time ++;\n        nd.finish = time;\n    }\n    private static void mergeSort2(Node[] data, int first, int n) {\n      int n1;\n      int n2;\n      if(n > 1) {\n          n1 = n / 2;\n          n2 = n - n1;\n          mergeSort2(data, first, n1);\n          mergeSort2(data, first + n1, n2);\n          merge2(data, first, n1, n2);\n      }\n    }\n    private static void merge2(Node[] data, int first, int n1, int n2) {\n        Node[] temp = new Node[n1+n2];\n        int copied  = 0;\n        int copied1 = 0;\n        int copied2 = 0;\n        int i;\n        while((copied1 < n1) && (copied2 < n2)) {\n            if(data[first + copied1].label > data[first + n1 + copied2].label)\n                temp[copied++] = data[first + (copied1++)];\n            else\n                temp[copied++] = data[first + n1 + (copied2++)];\n        }\n        while(copied1 < n1)\n            temp[copied++] = data[first + (copied1++)];\n        while (copied2 < n2)\n            temp[copied++] = data[first + n1 + (copied2++)];\n        for (i = 0; i < n1+n2; i++)\n            data[first + i] = temp[i];\n    }\n    private static void mergeSort(Node[] data, int first, int n) {\n      int n1;\n      int n2;\n      if(n > 1) {\n          n1 = n / 2;\n          n2 = n - n1;\n          mergeSort(data, first, n1);\n          mergeSort(data, first + n1, n2);\n          merge(data, first, n1, n2);\n      }\n    }\n    private static void merge(Node[] data, int first, int n1, int n2) {\n        Node[] temp = new Node[n1+n2];\n        int copied  = 0;\n        int copied1 = 0;\n        int copied2 = 0;\n        int i;\n        while((copied1 < n1) && (copied2 < n2)) {\n            if(data[first + copied1].finish > data[first + n1 + copied2].finish)\n                temp[copied++] = data[first + (copied1++)];\n            else\n                temp[copied++] = data[first + n1 + (copied2++)];\n        }\n        while(copied1 < n1)\n            temp[copied++] = data[first + (copied1++)];\n        while (copied2 < n2)\n            temp[copied++] = data[first + n1 + (copied2++)];\n        for (i = 0; i < n1+n2; i++)\n            data[first + i] = temp[i];\n    }\n}\nclass Node {\n    public int finish;\n    public int discover;\n    public int label;\n    public String color;\n    public Node p;\n    public Node(int v) {\n        label = v;\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1460_5__1_1460_6", "golden_code": "public class Main {\n\tpublic static void main(String[] args) throws Exception {\n\t\tSystem.out.println(\"6653\");\n\t}\n}", "generated_code": "public class Main {\n\tpublic static void main(String[] args) throws Exception {\n\t\tSystem.out.println(\"6653\");\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_237__1_1001_472", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args){\n\t\t\n\t\tint a,b;\n\t\t@SuppressWarnings(\"resource\")\n\t\tScanner input= new Scanner(System.in);\n\t\twhile(input.hasNext()){\n\t\t\ta=input.nextInt(); \n\t\t\tb=input.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t\t\n\t}\n\n}", "generated_code": "import java.util.Scanner;\nimport java.io.File;\nimport java.io.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while(input.hasNextLine())\n        {\n        String [] s=input.nextLine().split(\" \");\n        int A= Integer.parseInt(s[0]);\n        int B=Integer.parseInt(s[1]);\n        int sum= A+B;\n        System.out.println(sum);\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2737_46__1_2737_15", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        int rowco=0;\n        Scanner in=new Scanner(System.in);\n        int t=in.nextInt();\n        for (int l= 0; l < t; l++) {\n        int sum=0;\n        int a=in.nextInt();\n        int b=in.nextInt();\n        int [][]mn=new int[a][b];\n\n        for (int i = 0; i < a; i++) {\n            rowco=i;\n            for (int j = 0; j < b; j++) {\n                  sum+=rowco++;\n            }\n        }System.out.println(sum);} \n    }\n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tstatic int[][] gcds = new int[1200][1200];\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner s = new Scanner(System.in);\n\t\tint t = s.nextInt();\n\t\tfor (int tI = 0; tI < t; tI++) {\n\t\t\tint n = s.nextInt();\n\t\t\tint m = s.nextInt();\n\t\t\tSystem.out.println(m*n*(m+n-2)/2);\n\t\t}\n\n\t}\n\n}", "score": 1.0}
{"id": "SHARE_1_106017_36__1_106020_19", "golden_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile(scan.hasNext()){\n\t\t\tString daf = scan.next();\n\t\t\tdouble t = Math.pow(daf.charAt(2)-'0', 3)+ Math.pow(daf.charAt(1)-'0', 3) + Math.pow(daf.charAt(0)-'0', 3);\n\t\t\tif( t == Integer.valueOf(daf) ){\n\t\t\t\tSystem.out.println(\"Yes\");\n\t\t\t}\n\t\t\telse System.out.println(\"No\");\n\t\t\t\t\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint T = in.nextInt();\n\t\tfor(int i=0; i<T; i++){\n\t\t\tint n = in.nextInt();\n\t\t\tint s = 0;\n\t\t\tfor(int k=1; k<=n; k++)\n\t\t\t\ts += (k*(k+1)*(k+2))/2;\n\t\t\tSystem.out.printf(\"%d %d %d\\n\", i+1, n, s);\n\t\t}\n\t\t\n\t}\n\n}", "score": 0.0}
{"id": "SHARE_1_109016_23__1_1001_45", "golden_code": "import java.io.*;\nimport java.util.*;\n\nclass Point\n{\n\tdouble x,y;\n\tpublic Point(double x, double y)\n\t{\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n}\n\npublic class Main\n{\n\tstatic PrintWriter writer = new PrintWriter(new OutputStreamWriter(System.out));\n\tpublic static void main(String [] args) throws IOException\n\t{\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n\t\twhile(true)\n\t\t{\n\t\t\tint n = Integer.parseInt(reader.readLine());\n\t\t\tif(n == 0)\n\t\t\t\tbreak;\n\t\t\tPoint [] points = new Point[n];\n\t\t\tStringTokenizer st;\n\t\t\tfor(int i = 0 ; i<n ; i++)\n\t\t\t{\n\t\t\t\tst = new StringTokenizer(reader.readLine());\n\t\t\t\tpoints[i] = new Point(Double.parseDouble(st.nextToken()), Double.parseDouble(st.nextToken()));\n\t\t\t}\n\t\t\tclosestPair(points);\n\t\t}\n\t\twriter.flush();\n\t\twriter.close();\n\t}\n\tpublic static void closestPair(Point[] points) {\n\t\tPoint[] closestPair = new Point[2];\n\t\t//When we start the min distance is the infinity\n\t\tdouble crtMinDist = Double.POSITIVE_INFINITY;\n\n\t\t//Get the points and sort them\n\t\tPoint[] sorted = Arrays.copyOf(points, points.length);\n\t\tArrays.sort(sorted, new Comparator<Point>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic int compare(Point a, Point b)\n\t\t\t{\n\t\t\t\tif (a.x < b.x) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (a.x > b.x) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif (a.y < b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (a.y > b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t});\n\n\t\t//When we start the left most candidate is the first one\n\t\tint leftMostCandidateIndex = 0;\n\t\t//Vertically sorted set of candidates\n\t\tSortedSet<Point> candidates = new TreeSet<Point>(new Comparator<Point>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic int compare(Point a, Point b)\n\t\t\t{\n\t\t\t\tif (a.y < b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (a.y > b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif (a.x < b.x) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (a.x > b.x) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t});\n\t\t//For each point from left to right\n\t\tfor (Point current : sorted) {\n\t\t\t//Shrink the candidates\n\t\t\twhile ( leftMostCandidateIndex < sorted.length && current.x - sorted[leftMostCandidateIndex].x < crtMinDist) {\n\t\t\t\tcandidates.remove(sorted[leftMostCandidateIndex]);\n\t\t\t\tleftMostCandidateIndex++;\n\t\t\t}\n\n\t\t\t//Compute the y head and the y tail of the candidates set\n\t\t\tPoint head = new Point(current.x,  (current.y - crtMinDist));\n\t\t\tPoint tail = new Point(current.x,  (current.y + crtMinDist));\n\n\t\t\t//We take only the interesting candidates in the y axis\n\t\t\tfor (Point point : candidates.subSet(head, tail)) {\n\t\t\t\tdouble distance = dis(current, point);\n\n\t\t\t\t//Simple min computation\n\t\t\t\tif (distance < crtMinDist) {\n\t\t\t\t\tcrtMinDist = distance;\n\n\t\t\t\t\tclosestPair[0] = current;\n\t\t\t\t\tclosestPair[1] = point;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//The current point is now a candidate\n\t\t\tcandidates.add(current);\n\t\t}\n\n\t\twriter.printf(\"%.2f\\n\",dis(closestPair[0], closestPair[1])/2);\n\t}\n\n\tprivate static double dis(Point p1, Point p2)\n\t{\n\t\treturn Math.sqrt((p1.x - p2.x)*(p1.x - p2.x) + (p1.y - p2.y)*(p1.y - p2.y));\n\t}\n}", "generated_code": "import java.util.Scanner;\n\n\npublic class Main \n{\npublic static void main(String[] args) \n{\n\t\nScanner input=new Scanner(System.in);\n\nwhile(input.hasNext())\n{\n\tSystem.out.println(input.nextInt()+input.nextInt());\n}\n\t\n}//en dof main\n}\n", "score": 0.0}
{"id": "SHARE_1_2677_6__1_1959_43", "golden_code": "\n\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static class BST {\n\n        public void add(int num) {\n            if (num > data) {\n                if (right == null) {\n                    BST temp = new BST(num);\n                    right = temp;\n                }else{\n                    right.add(num);\n                }\n            } else if (num < data) {\n                if (left == null) {\n                    BST temp = new BST(num);\n                    left = temp;\n                }else{\n                left.add(num);\n                }\n            }\n        }\n        public void postOrder () {\n            if (left != null) {\n                left.postOrder();\n            }\n            if (right != null) {\n                right.postOrder();\n            }\n            System.out.println(data);\n        }\n\n        public BST(int data) {\n            this.data = data;\n        }\n        public BST left;\n        public BST right;\n        public int data;\n    }\n\n    public static void main(String[] args) {\n        BST root = new BST(0) ; \n            Scanner cin = new Scanner(System.in) ; \n            root.data = cin.nextInt();\n            while (cin.hasNext())\n            {\n                root.add(cin.nextInt());\n            }\n            root.postOrder();\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\nimport java.util.regex.Pattern;\n\npublic class Main \n{\n\n    static public Scanner in = new Scanner(System.in);\n\n    public static void main(String args[]) \n    {\n        int count;\n        int times1;\n        int times2;\n        \n        do{\n            times1 = 0;\n            times2 = 0;\n            count = in.nextInt();\n            int array[] = new int[count];\n            for(int i = 0; i < count; i++)\n                array[i] = in.nextInt();\n            //***************************\n            for (int j = 0; j < count;j++)\n            {\n                if (((j % 2) == 0) && (array[j] == 0))\n                    times1++;\n                else if(((j % 2) == 1) && (array[j] == 1))\n                    times1++;\n            }\n            //************************\n             for (int j = 0; j < count;j++)\n            {\n                if (((j % 2) == 0) && (array[j] == 1))\n                    times2++;\n                else if(((j % 2) == 1) && (array[j] == 0))\n                    times2++;\n            }\n             //******************\n             if (times1 > times2)\n                 System.out.println(times2);\n             else\n                 System.out.println(times1);\n        }while(String.valueOf(count) != \"\");\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2500_1__1_2212_0", "golden_code": "\nimport java.math.BigInteger;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin=new Scanner(System.in);\n        while(true){\n            int n=cin.nextInt();\n            BigInteger i=new BigInteger(cin.next());\n            BigInteger q=new BigInteger(\"0\");\n            if(n==0&&i.equals(q))\n                break;\n            BigInteger x=new BigInteger(\"3\").pow(n);\n            while(x.compareTo(new BigInteger(\"0\"))>=1){\n                x=x.divide(new BigInteger(\"3\"));\n                BigInteger x2=x.multiply(new BigInteger(\"2\"));\n                if(i.compareTo(x)>0&&i.compareTo(x2)<=0){\n                    System.out.println(\"No\");\n                    break;}\n                if(i.compareTo(x2)>0)\n                    i=i.subtract(x2);\n            }\n            if(i.equals(new BigInteger(\"1\"))||i.equals(new BigInteger(\"3\"))){\n                System.out.println(\"Yes\");\n            }\n        }\n    }\n}\n", "generated_code": "\nimport java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int c = s.nextInt();\n        for (int i = 0; i < c; i++) {\n            int n = s.nextInt();\n            double ave=0;\n            int[] nums = new int[n];\n            for (int j = 0; j < n; j++) {\n                nums[j] = s.nextInt();\n                ave += nums[j];\n            }\n            ave /= n;\n            int counter=0;\n            for (int j = 0; j < n; j++) {\n                if(nums[j] > ave)\n                    counter++;\n            }\n            DecimalFormat df=  new DecimalFormat(\"0.000\");\n            double res = (counter/(double)n)*100;\n            System.out.println(df.format(res)+\"%\");\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_108017_0__1_2353_18", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\nimport java.util.StringTokenizer;\n\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\t\n\t\n\tpublic static int[][][] map ;\n\t\n\tstatic class info\n\t{\n\t\tpublic int x;\n\t\tpublic int y;\n\t\tpublic int z;\n\t\tpublic info(int i, int j, int k)\n\t\t{\n\t\t\tx = i;\n\t\t\ty = j;\n\t\t\tz = k;\n\t\t}\n\t}\n\t\n\tpublic static void bfs(int x,int y, int z)\n\t{\n\t\tArrayList<info> arr = new ArrayList<info>();\n\t\tmap[x][y][z] = 0;\n\t\tarr.add( new info(x,y,z));\n\t\tfor( int i = 0; i<arr.size(); i++)\n\t\t{\n\t\t\tinfo dd = arr.get(i);\n\t\t\tx = dd.x;\n\t\t\ty = dd.y;\n\t\t\tz = dd.z;\n//\t\t\tSystem.err.println(\"AHA \" + x + \" \" + y + \" \" + z);\n\t\t\tfor(int j=-1; j<2; j+=2)\n\t\t\t{\n\t\t\t\tif( map[x+j][y][z] == -2)\n\t\t\t\t{\n\t\t\t\t\tmap[x+j][y][z] = map[x][y][z] + 1;\n\t\t\t\t\tarr.add(new info(x+j,y,z));\n\t\t\t\t}\n\t\t\t\tif( map[x][y+j][z] == -2)\n\t\t\t\t{\n\t\t\t\t\tmap[x][y+j][z] = map[x][y][z] + 1;\n\t\t\t\t\tarr.add(new info(x,y+j,z));\n\t\t\t\t}\n\t\t\t\tif( map[x][y][z+j] == -2)\n\t\t\t\t{\n\t\t\t\t\tmap[x][y][z+j] = map[x][y][z] + 1;\n\t\t\t\t\tarr.add(new info(x,y,z+j));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n,m,s;\n\t\tn = sc.nextInt();\n\t\tm = sc.nextInt();\n\t\ts = sc.nextInt();\n\t\twhile (!(n== 0 && m == 0 && s == 0)) \n\t\t{\n\t\t\tmap = new int[n+2][m+2][s+2];\n\t\t\tfor(int i=0; i<n+2;i++)\n\t\t\t\tfor(int j=0; j<m+2; j++)\n\t\t\t\t\tfor(int k=0; k<s+2; k++)\n\t\t\t\t\t\tmap[i][j][k] = -1;\n\t\t\tinfo start = null;\n\t\t\tinfo end = null;\n\t\t\tfor(int i=0; i<n;i++)\n\t\t\t{\n\t\t\t\tfor(int j=0; j<m; j++)\n\t\t\t\t{\n\t\t\t\t\t\tString line = sc.next();\n\t\t\t\t\t\tfor(int k=0; k<s; k++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif( line.charAt(k) == '#')\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\tif( line.charAt(k) == '.')\n\t\t\t\t\t\t\t\tmap[i+1][j+1][k+1] = -2;\n\t\t\t\t\t\t\tif( line.charAt(k) == 'S')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmap[i+1][j+1][k+1] = 0;\n\t\t\t\t\t\t\t\tstart = new info(i+1,j+1,k+1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif( line.charAt(k) == 'E')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmap[i+1][j+1][k+1] = -2;\n\t\t\t\t\t\t\t\tend = new info(i+1,j+1,k+1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbfs(start.x,start.y,start.z);\n\t\t\tif(map[end.x][end.y][end.z] == -2)\n\t\t\t\tSystem.out.println(\"Trapped!\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"Escaped in \" + map[end.x][end.y][end.z] + \" minute(s).\");\n\t\t\tn = sc.nextInt();\n\t\t\tm = sc.nextInt();\n\t\t\ts = sc.nextInt();\n\n\t\t}\n\t\tsc.close();\n\t}\n\n}\n", "generated_code": "//In the Name of Allah\n\nimport java.util.Scanner;\n\npublic class Main {\n\tprivate static boolean isReletivePrime(int a, int b) {\n\t\tfor(int c;(a%b) != 0;b = (b%a))\n\t\t{\n\t\t\tc = b;\n\t\t\tb = a;\n\t\t\ta = c;\n\t\t}\n\t\tif (b == 1)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\tprivate static int numPairsFinder(int p, int q) {\n\t\tif ((q % p) != 0)\n\t\t\treturn 0;\n\t\tint res = 0, tmp = (q / p);\n\t\tint sqrt = (int)(Math.sqrt(tmp));\n\t\tfor (int i = 1; i <= tmp; i++)\n\t\t{\n\t\t\tif ((tmp % i) == 0)\n\t\t\t\tif (isReletivePrime(i,(tmp/i)))\n\t\t\t\t\tres++;\n\t\t}\n\t\treturn res;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tScanner in_kb = new Scanner(System.in);\n\t\tdo {\n\t\t\tint p = in_kb.nextInt(), q = in_kb.nextInt();\n\t\t\tSystem.out.print(numPairsFinder(p,q) + \"\\n\");\n\t\t} while (in_kb.hasNextInt());\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1996_3__1_106019_3", "golden_code": "import java.math.BigDecimal;\nimport java.text.NumberFormat;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner s=new Scanner(System.in);\n        NumberFormat f=NumberFormat.getInstance();\n        while(true){\n            int n=s.nextInt();\n            s.nextLine();\n            if(n==0){\n                break;\n            }\n            String H;\n            BigDecimal J=new BigDecimal(\"0\");\n            for (int i = 0; i < n; i++) {\n                H=s.next();\n                H=H.replace(\"$\",\"\");\n                H=H.replace(\",\",\"\");\n                J=J.add(new BigDecimal(H));\n            }\n            H=f.format(J);\n            \n            if(H.indexOf(\".\")<0){\n                System.out.println(\"$\"+H+\".00\");\n            }else if(H.length()-H.indexOf(\".\")==2){\n                System.out.println(\"$\"+H+\"0\");\n            }else{\n                System.out.println(\"$\"+H);\n            }\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\nclass Main{\n\tpublic static void main(String[]args){\n\t\tScanner scan=new Scanner(System.in);\n\t\tint i,j;\n\t\twhile (scan.hasNext()){\n\t\t\tint count=0;\n\t\t\tString name=scan.next();\n\t\t\tint k=name.length();\n\t\t\tString A[]=new String [k];\n\t\t\tfor (i=0;i<k;i++)\n\t\t\t\tA[i]=(\"\"+name.charAt(i));\n\t\t\tfor (i=0;i<k;i++){\n\t\t\t\tfor(j=0;((i+j)<k) && ((i-j)>=0);j++){\n\t\t\t\t\tif (A[i+j].equals (A[i-j]))\n\t\t\t\t\t\tcount++;\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tfor (i=1;(i/2)<(k-1);i+=2){\n\t\t\t\tfor (j=0;((i/2-j)>=0) && ((i/2+1+j)<k);j++){\n\t\t\t\t\tif (A[i/2+1+j].equals(A[i/2-j]))\n\t\t\t\t\t\tcount++;\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(count);\n\t\t\t}\n\t\t}\n\t}\n", "score": 0.0}
{"id": "SHARE_1_1001_460__1_106022_21", "golden_code": "import java.util.Scanner;\npublic class Main\n{\n    public static void main(String args[])\n    {\n        int a, b;\n        Scanner i = new Scanner(System.in);\n         while (i.hasNext() == true )\n             System.out.println(i.nextInt() + i.nextInt());\n    }\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main{\npublic static void main(String [] str)\n{\n\tScanner scan=new Scanner(System.in);\n\tint a=scan.nextInt();\n\tint k=0,c;\n\twhile(k<a)\n\t{\n\t\tc=0;\n\t\tString str1=scan.next();\n\t\tint b=Integer.parseInt(str1);\n\t\tif(b<10){\n\t\t\tSystem.out.println(b);\n\t\t\tk++;\n\t\tcontinue;\n\t\t}\n\t\telse \n\t\t{\n\t\t  for(int i=2;i<=str1.length();i++){\n\t\t\t  c=b%(int)Math.pow(10, i);\n\t\t\t  if(c%(int)Math.pow(10, i-1)<5*(int)Math.pow(10, i-2))\n\t\t\t\t  b=b-c%(int)Math.pow(10, i-1);\n\t\t\t  else\n\t\t\t\t  b=b-c%(int)Math.pow(10, i-1)+(int)Math.pow(10, i-1);\n\t\t  }\n\t\t}\n\t\tSystem.out.println(b);\n\t\tk++;\n\t}\n  }\n}\n", "score": 0.0}
{"id": "SHARE_1_1319_37__1_2634_3", "golden_code": "import java.util.Scanner;\nimport java.lang.Math;\n\nclass Main {\n\tpublic static void main(String[] args){\n\t\tScanner scan=new Scanner(System.in);\n\t\tint loc=0;\n\t\tint nloc=0;\n\t\tint aloc=scan.nextInt();\n\t\twhile(true){\n\t\t\tloc=0;\n\t\t\tnloc=0;\n\t\t\t\t\n\t\t\t\twhile(aloc!=nloc){\n\t\t\t\t\tnloc=scan.nextInt();\n\t\t\t\t\tif(nloc!=aloc){\n\t\t\t\t\t\tif(Math.abs(aloc-nloc)>Math.abs(aloc-loc)){\n\t\t\t\t\t\t\tSystem.out.println(\"Moving from \"+loc+\" to \"+nloc+\": colder.\");\n\t\t\t\t\t\t\tloc=nloc;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tif(Math.abs(aloc-nloc)<Math.abs(aloc-loc)){\n\t\t\t\t\t\t\t\tSystem.out.println(\"Moving from \"+loc+\" to \"+nloc+\": warmer.\");\n\t\t\t\t\t\t\t\tloc=nloc;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\tSystem.out.println(\"Moving from \"+loc+\" to \"+nloc+\": same.\");\n\t\t\t\t\t\t\t\tloc=nloc;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\tSystem.out.println(\"Moving from \"+loc+\" to \"+nloc+\": found it!\");\n\t\t\t\t\taloc=scan.nextInt();\n\t\t\t\t\tif(aloc>=5280||aloc<=-5280)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\telse{\n\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\n    \n    }", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main ( String [ ] args ) {\n\t\tString number = \"\";\n\t\tlong num = 0;\n\t\tScanner input = new Scanner ( System.in );\n\t\tMain j = new Main ( );\n\t\twhile ( input.hasNext ( ) ) {\n\t\t\tint k = 0;\n\t\t\tboolean nums [ ] = new boolean [ 10 ];\n\t\t\tnum = input.nextInt ( );\n\t\t\twhile ( !j.exist ( nums ) ) {\n\t\t\t\tk++;\n\t\t\t\tnumber = String.valueOf ( (num*k) );\n\t\t\t\tfor ( int i = 0 ; i < number.length ( ) ; i ++ ) {\n\t\t\t\t\tif ( number.charAt ( i ) == '0' )\n\t\t\t\t\t\tnums [ 0 ] = true;\n\t\t\t\t\tif ( number.charAt ( i ) == '1' )\n\t\t\t\t\t\tnums [ 1 ] = true;\t\n\t\t\t\t\tif ( number.charAt ( i ) == '2' )\n\t\t\t\t\t\tnums [ 2 ] = true;\t\n\t\t\t\t\tif ( number.charAt ( i ) == '3' )\n\t\t\t\t\t\tnums [ 3 ] = true;\t\n\t\t\t\t\tif ( number.charAt ( i ) == '4' )\n\t\t\t\t\t\tnums [ 4 ] = true;\t\n\t\t\t\t\tif ( number.charAt ( i ) == '5' )\n\t\t\t\t\t\tnums [ 5 ] = true;\t\n\t\t\t\t\tif ( number.charAt ( i ) == '6' )\n\t\t\t\t\t\tnums [ 6 ] = true;\t\n\t\t\t\t\tif ( number.charAt ( i ) == '7' )\n\t\t\t\t\t\tnums [ 7 ] = true;\t\n\t\t\t\t\tif ( number.charAt ( i ) == '8' )\n\t\t\t\t\t\tnums [ 8 ] = true;\n\t\t\t\t\tif ( number.charAt ( i ) == '9' )\n\t\t\t\t\t\tnums [ 9 ] = true;\n\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println ( k );\n\t\t}\n\n\t}\n\t\n\tpublic boolean exist ( boolean [ ] g ) {\n\t\tfor(int i=0; i<g.length; i++) {\n\t\t\tif(!g[i])\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1079_23__1_101329_11", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner a = new Scanner(System.in);\n        int i = 1;\n        while (true) {\n            int input = a.nextInt();\n            if (i > 0) {\n                System.out.println(\"PERFECTION OUTPUT\");\n                i--;\n            }\n            if (input == 0) {\n                System.out.println(\"END OF OUTPUT\");\n                System.exit(0);\n            }\n            if (input == 1 ) {\n            \n                System.out.printf(\"%5d\",input);\n                System.out.println( \"  DEFICIENT\");   \n                continue;\n            }\n            int sum = 1;\n            for (int j = 2; j <= Math.sqrt(input); j++) {\n                if (input % j == 0) {\n                    sum += j;\n                    int d = input / j;\n                    if (d != j) {\n                        sum += d;\n                    }\n                }\n            }\n            if (sum == input) {\n                System.out.printf(\"%5d\",input);\n                System.out.println( \"  PERFECT\");\n            } else if (sum < input) {\n                System.out.printf(\"%5d\",input);\n                System.out.println( \"  DEFICIENT\");\n            } else {\n                System.out.printf(\"%5d\",input);\n                System.out.println( \"  ABUNDANT\");\n            }\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main (String [] ar){\n        Scanner s = new Scanner(System.in);\n        long n=s.nextLong();\n        for (long i=0 ; i<n ; i++){\n            long x=s.nextLong();\n            long a=2;\n            if (x==0||x==1||x==2)\n                System.out.println(a);\n            else{\n                Z:for(long j=x ; j<x+1000000000 ; j++){\n                    if (j%2==0)\n                        continue;\n                    for (long k=3 ; k<=Math.sqrt(j) ; k+=2){\n                        if (j%k==0)\n                            continue Z;\n                    }\n                    a=j;\n                    break;\n                }\n            System.out.println(a);\n            }\n            \n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_303__1_1001_156", "golden_code": "import java.util.*;\n\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner s = new Scanner(System.in);\n\t\twhile(s.hasNext()){\n\t\t\tint a = s.nextInt();\n\t\t\tint b = s.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        while (true)\n        {\n            boolean b = in.hasNext();\n            if (b == false)\n                break;\n            long x = in.nextLong();\n            long y = in.nextLong();\n            System.out.println((x + y));\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_5_1015_4__1_1158_6", "golden_code": "import java.util.Scanner;\n\nclass Main {\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint[] d = new int[9];\n\t\tfor (int i = 0; i < 9; i++) {\n\t\t\td[i] = scanner.nextInt();\n\t\t}\n\t\t(new Case(d)).evaluate();\n\t}\n}\n\nclass Case {\n\tprivate final int[] digits;\n\tprivate final int numOfDigits;\n\tprivate int minDigits = Integer.MAX_VALUE;\n\n\tCase(int[] digits) {\n\t\tthis.digits = digits;\n\t\tthis.numOfDigits = arraySum(digits);\n\t}\n\n\tpublic void evaluate() {\n\t\tf(0, new int[9], calcSum(new int[9]));\n\t\tSystem.out.println(minDigits == Integer.MAX_VALUE ? -1 : minDigits);\n\t}\n\n\tprivate void f(int index, int[] odd, int sum) {\n\t\tif (sum % 11 == 0) {\n\t\t\tint temp = countDigits(odd);\n\t\t\tif (temp < minDigits) {\n\t\t\t\tminDigits = temp;\n\t\t\t}\n\t\t}\n\n\t\tfor (int i = index; i < digits.length; i++) {\n\t\t\tint temp = odd[i];\n\t\t\tfor (int j = 0; j < digits[i]; j++) {\n\t\t\t\todd[i]++;\n\t\t\t\tf(i + 1, odd, sum + 2 * (j + 1) * (i + 1));\n\t\t\t}\n\t\t\todd[i] = temp;\n\t\t}\n\t}\n\n\tprivate int calcSum(int[] odd) {\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < digits.length; i++) {\n\t\t\tsum += (i + 1) * (2 * odd[i] - digits[i]);\n\t\t}\n\t\treturn sum;\n\t}\n\n\tprivate int countDigits(int[] odd) {\n\t\tint oddSum = arraySum(odd);\n\t\tint evenSum = numOfDigits - oddSum;\n\t\tif (oddSum < evenSum)\n\t\t\treturn 2 * evenSum;\n\t\telse if (oddSum > evenSum + 1)\n\t\t\treturn 2 * oddSum - 1;\n\t\telse\n\t\t\treturn oddSum + evenSum;\n\t}\n\n\tprivate int arraySum(int[] array) {\n\t\tint sum = 0;\n\t\tfor (int i : array) {\n\t\t\tsum += i;\n\t\t}\n\t\treturn sum;\n\t}\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static double toten(String number, int source) {\n        int j = 0;\n        double ten = 0;\n        for (int i = number.length() - 1; i >= 0; i--) {\n            String charachter = \"ABCDEF\";\n            if (charachter.contains(number.charAt(i) + \"\")) {\n                if (number.charAt(i) == 'A') {\n                    ten += 10 * Math.pow(source, j);\n                    j++;\n                } else if (number.charAt(i) == 'B') {\n                    ten += 11 * Math.pow(source, j);\n                    j++;\n                } else if (number.charAt(i) == 'C') {\n                    ten += 12 * Math.pow(source, j);\n                    j++;\n                } else if (number.charAt(i) == 'D') {\n                    ten += 13 * Math.pow(source, j);\n                    j++;\n                } else if (number.charAt(i) == 'E') {\n                    ten += 14 * Math.pow(source, j);\n                    j++;\n                } else if (number.charAt(i) == 'F') {\n                    ten += 15 * Math.pow(source, j);\n                    j++;\n                }\n\n            } else {\n                ten += Integer.parseInt(number.charAt(i) + \"\") * Math.pow(source, j);\n                j++;\n            }\n        }\n        return ten;\n\n    }\n\n    public static void main(String[] args) {\n\n        Scanner in = new Scanner(System.in);\n\n        while (in.hasNext()) {\n\n            String number = in.next();\n            int source = in.nextInt();\n            int distenation = in.nextInt();\n            int ten = (int) toten(number, source);\n            String finall = Integer.toString(ten, distenation);\n            finall = finall.replaceAll('a' + \"\", 'A' + \"\");\n            finall = finall.replaceAll('b' + \"\", 'B' + \"\");\n            finall = finall.replaceAll('c' + \"\", 'C' + \"\");\n            finall = finall.replaceAll('d' + \"\", 'D' + \"\");\n            finall = finall.replaceAll('e' + \"\", 'E' + \"\");\n            finall = finall.replaceAll('f' + \"\", 'F' + \"\");\n            if (finall.length() > 7) {\n                System.out.println(\"  ERROR\");\n            } else {\n                for (int i = 0; i < 7-finall.length(); i++) {\n                    System.out.print(\" \");\n                }\n                System.out.println(finall);\n            }\n        }\n\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_96__1_1001_136", "golden_code": "import java.util.Scanner;\n\npublic class Main \n{\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args)\n    {\n        Scanner input = new Scanner(System.in);\n        while(input.hasNextInt())\n        {\n            int number1; // first number to add\n            int number2; // second number to add\n            int sum; // sum of number1 and number2\n            number1 = input.nextInt(); // read first number from user\n            number2 = input.nextInt(); // read second number from user\n            sum = (number1 + number2);\n            System.out.printf(\"%d\\n\",sum);\n        }\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\nimport sun.font.EAttribute;\n\npublic class Main\n{\n    public static void main(String[] args)\n            {\n        Scanner input = new Scanner(System.in);\n\n        int a,b;\n        //String s = \"\";\n\n        \n                while(input.hasNext())\n                {\n                    a = input.nextInt();\n                    b = input.nextInt();\n                    System.out.println(a+b);\n                    \n                }\n            }\n}\n", "score": 1.0}
{"id": "SHARE_1_1079_1__1_1079_5", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) throws Exception {\n\t\tScanner input = new Scanner(System.in);\n\t\tint f = input.nextInt();\n\t\tSystem.out.println(\"PERFECTION OUTPUT\");\n\t\twhile (f != 0) {\n\t\t\tint sum = 0;\n\t\t\tArrayList<Integer> l = new ArrayList<Integer>();\n\t\t\tfor (int i = 1; i < f; i++)\n\t\t\t\tif (f % i == 0) {\n\t\t\t\t\tif (!l.contains(i)) {\n\t\t\t\t\t\tsum += i;\n\t\t\t\t\t\tif (f / i != i && f/i != f) {\n\t\t\t\t\t\t\tsum += f / i;\n\t\t\t\t\t\t\tl.add(f / i);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tl.add(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tif (sum > f)\n\t\t\t\tSystem.out.println(p(f) + \"  ABUNDANT\");\n\t\t\telse if (sum == f)\n\t\t\t\tSystem.out.println(p(f) + \"  PERFECT\");\n\t\t\telse\n\t\t\t\tSystem.out.println(p(f) + \"  DEFICIENT\");\n\t\t\tf = input.nextInt();\n\t\t}\n\t\tSystem.out.println(\"END OF OUTPUT\");\n\t}\n\n\tstatic String p(int f) {\n\t\tString s = f + \"\";\n\t\twhile (s.length() < 5)\n\t\t\ts = \" \" + s;\n\t\treturn s;\n\t}\n}", "generated_code": "\nimport java.util.*;\n\npublic class Main {\n\n    static byte Counter(int n) {\n        byte counter = 0;\n        while (n > 0) {\n            n /= 10;\n            counter++;\n        }\n        return counter;\n    }\n    static void space(int n){\n        for (int i = 0; i < n; i++) {\n            System.out.print(\" \");\n        }\n    }\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int sum = 0;\n        byte c = 0;\n        while (true) {\n            int n = s.nextInt();\n            int ta=Counter(n);\n            ta=5-ta;  \n            if (c == 0) {\n                System.out.println(\"PERFECTION OUTPUT\");\n                c++;\n            }\n            if (n == 0) {\n                System.out.println(\"END OF OUTPUT\");\n                break;\n            }\n            for (int i = 1; i <= n / 2; i++) {\n                if (n % i == 0) {\n                    sum += i;\n                }\n            }\n            if (sum == n) {\n                space(ta);\n                System.out.println(n + \"  PERFECT\");\n            } else if (sum > n) {\n                space(ta);\n                System.out.println(n + \"  ABUNDANT\");\n\n            } else if (sum < n) {\n                space(ta);\n                System.out.println(n + \"  DEFICIENT\");\n            }\n            sum = 0;\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1319_68__1_1119_2", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String str[] = {\"same.\", \"colder.\", \"warmer.\", \"found it!\"};\n        int x,count=-1;\n        while (true) {\n            x = in.nextInt();\n            if (x == 5280) {\n                break;\n            }else if (count!=-1){\n                System.out.println(\"\");\n            }\n            count=0;\n            while (true) {\n                int y = in.nextInt();\n                System.out.println(\"Moving from \" + count + \" to \" + y + \": \"\n                        + ((y == x) ? str[3] : (Math.abs(count - x) > Math.abs(y - x)) ? str[2] : (Math.abs(count - x) == Math.abs(y - x)) ? str[0] : str[1]));\n                if (y == x) {\n                    break;\n                }\n                count = y;\n            }\n        }\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\t\n\t    static Scanner in = new Scanner(System.in);\n\t        static boolean[] n = new boolean[1010];\n\t            static int[] n1 = new int[1010];\n\t            \n\t                public static void main(String[] args) {\n\t                \t        int f = 0;\n\t                \t                for (int i = 1; i < n.length; i++) {\n\t                \t                \t            int m = 0;\n\t                \t                \t                        for (int j = 2; j * j <= i; j++) {\n\t                \t                \t                        \t                if (i % j == 0) {\n\t                \t                \t                        \t                \t                    m++;\n\t                \t                \t                        \t                \t                                        break;\n\t                \t                \t                        \t                }\n\t                \t                \t                        }\n\t                \t                \t                                    if (m == 0) {\n\t                \t                \t                                    \t                f++;\n\t                \t                \t                                    \t                                n[i] = true;\n\t                \t                \t                                    }\n\t                \t                \t                                                n1[i] = f;\n\t                \t                }\n\t                \t                        int f1 = 0;\n\t                \t                                while (in.hasNext()) {\n\t                \t                                \t\n\t                \t                                \t            int p = in.nextInt();\n\t                \t                                \t                        int r = in.nextInt();\n\t                \t                                \t                                    \n\t                \t                                \t                                                f1++;\n\t                \t                                \t                                                            System.out.print(p + \" \" + r + \":\");\n\t                \t                                \t                                                                        f = n1[p];\n\t                \t                                \t                                                                                    if (f % 2 == 0) {\n\t                \t                                \t                                                                                    \t                r = r * 2;\n\t                \t                                \t                                                                                    } else {\n\t                \t                                \t                                                                                    \t                r = r * 2;\n\t                \t                                \t                                                                                    \t                                r--;\n\t                \t                                \t                                                                                    }\n\t                \t                                \t                                                                                                if (r > f) {\n\t                \t                                \t                                                                                                \t                for (int i = 0; i <= p; i++) {\n\t                \t                                \t                                                                                                \t                \t                    if (n[i]) {\n\t                \t                                \t                                                                                                \t                \t                    \t                        System.out.print(\" \" + i);\n\t                \t                                \t                                                                                                \t                \t                    }\n\t                \t                                \t                                                                                                \t                }\n\t                \t                                \t                                                                                                } else {\n\t                \t                                \t                                                                                                \t                f = f - r;\n\t                \t                                \t                                                                                                \t                                f = f / 2;\n\t                \t                                \t                                                                                                \t                                                int q = 0;\n\t                \t                                \t                                                                                                \t                                                                for (int i = 1; i <= p; i++) {\n\t                \t                                \t                                                                                                \t                                                                \t                    if (n[i]) {\n\t                \t                                \t                                                                                                \t                                                                \t                    \t                        if (f > 0) {\n\t                \t                                \t                                                                                                \t                                                                \t                    \t                        \t                            f--;\n\t                \t                                \t                                                                                                \t                                                                \t                    \t                        } else {\n\t                \t                                \t                                                                                                \t                                                                \t                    \t                        \t                            if (q == r) {\n\t                \t                                \t                                                                                                \t                                                                \t                    \t                        \t                            \t                                break;\n\t                \t                                \t                                                                                                \t                                                                \t                    \t                        \t                            }\n\t                \t                                \t                                                                                                \t                                                                \t                    \t                        \t                                                        if (n[i]) {\n\t                \t                                \t                                                                                                \t                                                                \t                    \t                        \t                                                        \t                                System.out.print(\" \" + i);\n\t                \t                                \t                                                                                                \t                                                                \t                    \t                        \t                                                        \t                                                                q++;\n\t                \t                                \t                                                                                                \t                                                                \t                    \t                        \t                                                        }\n\t                \t                                \t                                                                                                \t                                                                \t                    \t                        }\n\t                \t                                \t                                                                                                \t                                                                \t                    }\n\t                \t                                \t                                                                                                \t                                                                }\n\t                \t                                \t                                                                                                }\n\t                \t                                \t                                                                                                            \n\t                \t                                \t                                                                                                                            System.out.println(\"\");\n\t                \t                                \t                                                                                                                                            System.out.println(\"\");\n\t                \t                                }\n\t                \t                                \n\t                }\n}\n", "score": 0.0}
{"id": "SHARE_1_2500_44__1_2500_7", "golden_code": "//JZP263\n//sinashaloudegi@gmail.com\n//CuttingWood\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner in = new Scanner(System.in);\n        while (true) {\n            int n = in.nextInt();\n            double m = in.nextDouble();\n            if (n == 0 && m == 0) {\n                System.exit(0);\n            }\n            if (m % 2 == 0) {\n                System.out.println(\"No\");\n                continue;\n            }\n\n            while (n >= 1) {\n\n                if (m > Math.pow(3, n) / 3 && m <= 2 * (Math.pow(3, n) / 3)) {\n                    System.out.println(\"No\");\n                    break;\n                } else if (m <= Math.pow(3, n) / 3) {\n                    if (n != 1) {\n                        n--;\n                    } else {\n                        System.out.println(\"Yes\");\n                        break;\n                    }\n                } else if (2 * (Math.pow(3, n)) > m && m <= Math.pow(3, n)) {\n\n                    {\n                        if (n != 1) {\n                            m -= (2 * (Math.pow(3, n) / 3));\n                        } else {\n                            System.out.println(\"Yes\");\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        double k, i;\n        Scanner s = new Scanner(System.in);\n        k = s.nextDouble();\n        i = s.nextDouble();\n        while (k != 0 && i != 0) {\n            meth(0,Math.pow(3, k),i);\n            k = s.nextDouble();\n            i = s.nextDouble();\n        }\n    }\n\n    private static void meth(double f, double l, double i) {\n        if (l - f == 3) {\n            if (i == 2) {\n                System.out.println(\"No\");\n                return;\n            }\n            System.out.println(\"Yes\");\n            return;\n        }\n        if (i <= (l - f) / 3) {\n            meth(f, ((l - f) / 3)+f, i);\n            return;\n        } else if ((l - f) / 3 < i && i <= ((l - f) / 3) * 2) {\n            System.out.println(\"No\");\n            return;\n        } else if (i > ((l - f) / 3) * 2) {\n            i = i - ((l - f) / 3) * 2;\n            meth(((l - f) / 3) * 2, l-f, i);\n            return;\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2811_33__1_1656_10", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint size = scanner.nextInt();\n\t\tfor (int t =0;t<size;t++){\n\t\t\tint n = scanner.nextInt();\n\t\t\tint m = scanner.nextInt();\n\t\t\tArrayList<Integer> a = new ArrayList<Integer>(n);\n\t\t\tArrayList<Integer> b = new ArrayList<Integer>(n);\n\t\t\tscanner.nextLine();\n\t\t\tString s = scanner.nextLine();\n\t\t\tString[] ss = s.split(\"[\\\\s]+\");\n\t\t\tfor (int i = 0;i<ss.length;i++){\n\t\t\t\tif (ss[i].equals(\"\"))\n\t\t\t\t\tcontinue;\n\t\t\t\ta.add(Integer.parseInt(ss[i]));\n\t\t\t}\n\t\t\ts = scanner.nextLine();\n\t\t\tss = s.split(\"[\\\\s]+\");\n\t\t\tfor (int i = 0;i<ss.length;i++){\n\t\t\t\tif (ss[i].equals(\"\"))\n\t\t\t\t\tcontinue;\n\t\t\t\tb.add(Integer.parseInt(ss[i]));\n\t\t\t}\n\t\t\tfor (int i = 0;i<b.size();i++){\n\t\t\t\ta.remove((Object)b.get(i));\n\t\t\t}\n\t\t\tsortInt(a);\n\t\t\tfor (int i = 0;i<a.size();i++){\n\t\t\t\tif (i<a.size()-1)\n\t\t\t\t\tSystem.out.print(a.get(i)+\",\");\n\t\t\t\telse\n\t\t\t\t\tSystem.out.print(a.get(i));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\t\n\tpublic static void sortInt(ArrayList<Integer> values) {\n\t\tif (values.size()>1){\n\t\t\tmergesortInt(values,0, values.size()- 1);\n\t\t}\n\t}\n\n\tprivate static void mergesortInt(ArrayList<Integer> values, int low, int high) {\n\t\t// check if low is smaller then high, if not then the array is sorted\n\t\tif (low < high) {\n\t\t\t// Get the index of the element which is in the middle\n\t\t\tint middle = (high+low) / 2;\n\t\t\t// Sort the left side of the array\n\t\t\tmergesortInt(values,low, middle);\n\t\t\t// Sort the right side of the array\n\t\t\tmergesortInt(values,middle + 1, high);\n\t\t\t// Combine them both\n\t\t\tmergeInt(values,low, middle, high);\n\t\t}\n\t}\n\n\tprivate static void mergeInt(ArrayList<Integer> values, int low, int middle, int high) {\n\t\t\n\t\tint[] helper = new int[values.size()];\n\t\t\n\t\t// Copy both parts into the helper array\n\t\tfor (int i = low; i <= high; i++) {\n\t\t\thelper[i] = values.get(i);\n\t\t}\n\n\t\tint i = low;\n\t\tint j = middle + 1;\n\t\tint k = low;\n\t\t// Copy the smallest values from either the left or the right side back\n\t\t// to the original array\n\t\twhile (i <= middle && j <= high) {\n\t\t\tif (helper[i] <= helper[j]) {\n\t\t\t\tvalues.set(k, helper[i]) ;\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tvalues.set(k, helper[j]); \n\t\t\t\tj++;\n\t\t\t}\n\t\t\tk++;\n\t\t}\n\t\t// Copy the rest of the left side of the array into the target array\n\t\twhile (i <= middle) {\n\t\t\tvalues.set(k,helper[i] )  ;\n\t\t\tk++;\n\t\t\ti++;\n\t\t}\n\n\t}\n\n}", "generated_code": "\n\n\n\n\nimport java.util.Scanner;\nimport java.util.StringTokenizer;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        int count=0;\n        Scanner s= new Scanner(System.in);\n        while(s.hasNext()){\n            int a[],i,j=-1;count=0;\n\n            String ss=s.nextLine();\n            \n            StringTokenizer st=new StringTokenizer(ss);\n            a=new int[st.countTokens()];\n\n            while(st.hasMoreTokens() )\n               a[++j]=Integer.parseInt(st.nextToken());\n            \n                \n            if(a[j]==-1)\n                return;\n             for(int k=0;k<a.length;k++)\n                 for(int h=a.length-1;h>k;h--)\n                     if(2*a[k]==a[h]||2*a[h]==a[k])\n                        count++;\n            System.out.println(count);\n            }\n              }\n            }\n\n\n\n\n", "score": 0.0}
{"id": "SHARE_1_1001_330__5_1016_7", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while(in.hasNext()){\n            int n = in.nextInt();\n            in.skip(\" \");\n            int m = in.nextInt();\n            System.out.println((n+m)+\"\");\n        }\n    }\n    \n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\tstatic int numberOfItems;\n\tstatic int X;\n\tstatic ArrayList<Integer> sequence = new ArrayList<Integer>();\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner input = new Scanner(System.in);\n\t\t\n\t\tnumberOfItems = input.nextInt();\n\t\tX = input.nextInt();\n\t\t\n\t\tfor (int i = 0; i < numberOfItems; i++) {\n\t\t\tsequence.add(input.nextInt());\n\t\t}\n\t\t\n\t\tint result = rec(0,sequence.size()-1);\n\t\tif(result == Integer.MAX_VALUE)\n\t\t\tresult = -1;\n\t\tSystem.out.println(result);\n\t\t\n\t\tinput.close();\n\t}\n\t\n\tstatic int rec(int begin, int end){\n\t\t\n\t\tint res = -1;\n\t\tint out = Integer.MAX_VALUE;\n\t\tif(begin > end)\n\t\t\treturn out;\n\t\t\n\t\tif( begin == end)\n\t\t{\n\t\t\treturn f(begin,end);\n\t\t}\n\t\t\n\t\tint num1 = rec(begin,((end-begin)/2)+begin);\n\t\tint num2 = rec(((end-begin)/2)+1+begin,end);\n\t\tint num = f(begin,end);\n\t\t\n\t\t\tif((num1 <= num2 && num1 <= num && num1 != -1 )|| (num1 > -1 && num == -1 && num2 == -1))\n\t\t\t\tres = num1;\n\t\t\tif((num2 <= num1 && num2 <= num && num2 != -1 )|| (num2 > -1 && num == -1 && num1 == -1))\n\t\t\t\tres = num2;\n\t\t\tif((num <= num2 && num <= num1 && num != -1 ) || (num > -1 && num1 == -1 && num2 == -1))\n\t\t\t\tres = num;\n\t\t\tif(num ==-1 && num1 > -1 && num2 > -1){\n\t\t\t\tif(num1 < num2)\n\t\t\t\t\tres = num1;\n\t\t\t\telse\n\t\t\t\t\tres = num2;\n\t\t\t}\n\t\t\tif(num1 ==-1  && num > -1 && num2 > -1){\n\t\t\t\tif(num < num2)\n\t\t\t\t\tres = num;\n\t\t\t\telse\n\t\t\t\t\tres = num2;\n\t\t\t}\n\t\t\tif(num2 ==-1  && num1 > -1 && num > -1){\n\t\t\t\tif(num1 < num)\n\t\t\t\t\tres = num1;\n\t\t\t\telse\n\t\t\t\t\tres = num;\n\t\t\t}\n\t\t\n\t\t\tif(res < out && res!=-1)\n\t\t\t\tout = res;\n\t\t\t\t\n\t\treturn out;\n\t}\n\t\n\tstatic int f(int begin, int end){\n\t\t\n\t\tint size = end - begin + 1;\n\t\t\n\t\tint i = size / 2 + begin ;\n\t\t\n\t\t\n\t\tif(size == 1){\n\t\t\tif(sequence.get(i) >= X)\n\t\t\t\treturn 1;\n\t\t\telse return -1;\n\t\t}\n\t\t\n\t\tif(size%2==0)\n\t\t\ti--;\n\t\t\n\t\tArrayList<Integer> left = new ArrayList<Integer>();\n\t\tArrayList<Integer> right = new ArrayList<Integer>();\n\t\t\n\t\t\n\t\tint ls = 0;\n\t\tint rs = 0;\n\t\t\n\t\tfor (int j = i; j >= begin; j--) {\n\t\t\tls += sequence.get(j);\n\t\t\tleft.add(ls);\n\t\t}\n\t\tfor (int j = i+1; j <= end; j++) {\n\t\t\trs += sequence.get(j);\n\t\t\tright.add(rs);\n\t\t}\n\t\t\n\t\tint rc = -1;\n\t\tint rc2 = -1;\n\t\tint rr = Integer.MAX_VALUE;\n\t\tfor (int j = 0; j < right.size(); j++) {\n\t\t\tint last = Integer.MIN_VALUE;\n\t\t\t\n\t\t\tfor (int j2 = 0; j2 < left.size(); j2++) {\n\t\t\t\tif( left.get(j2) > last ){\n\t\t\t\t\tif( left.get(j2) + right.get(j) >= X ){\n\t\t\t\t\t\trc = j+j2+2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tlast = left.get(j2);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t\tif(rc > -1 && rc < rr)\n\t\t\t\trr = rc;\n\t\t}\n\t\t\n\t\tint ll = Integer.MAX_VALUE;\n\t\tfor (int j = 0; j < left.size(); j++) {\n\t\t\tint last2 = Integer.MIN_VALUE;\n\t\t\t\n\t\t\tfor (int j2 = 0; j2 < right.size(); j2++) {\n\t\t\t\tif( right.get(j2) > last2 ){\n\t\t\t\t\tif( left.get(j) + right.get(j2) >= X ){\n\t\t\t\t\t\trc2 = j+j2+2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tlast2 = right.get(j2);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t\tif(rc2 > -1 && rc2 < ll)\n\t\t\t\tll = rc2;\n\t\t}\n\t\t\n\t\tif( (rr <= ll && rr > -1 && ll > -1 ) || rr == -1)\n\t\t\treturn rr;\n\t\telse if((rr > ll && rr > -1 && ll > -1 ) || rr == -1)\n\t\t\treturn ll;\n\t\t\t\n\t\treturn -1;\n\t}\n\n}", "score": 0.0}
{"id": "SHARE_1_1001_408__1_1001_136", "golden_code": "\n\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\nimport sun.font.EAttribute;\n\npublic class Main\n{\n    public static void main(String[] args)\n            {\n        Scanner input = new Scanner(System.in);\n\n        int a,b;\n        //String s = \"\";\n\n        \n                while(input.hasNext())\n                {\n                    a = input.nextInt();\n                    b = input.nextInt();\n                    System.out.println(a+b);\n                    \n                }\n            }\n}\n", "score": 1.0}
{"id": "SHARE_1_2677_3__1_2677_10", "golden_code": "import java.io.*;\nimport java.util.*;\nimport java.math.*;\nimport java.awt.geom.*;\n\npublic class Main\n{\n    public static void main(String[] args) throws IOException\n    {\n        JavaCodersReader reader = new JavaCodersReader();\n        PrintWriter writer = new PrintWriter(System.out);\n\n        Stack<Integer> number = new Stack<Integer>();\n        Stack<Integer> left = new Stack<Integer>();\n        Stack<Integer> right = new Stack<Integer>();\n        Stack<Integer> stage = new Stack<Integer>();\n\n        number.push(0);\n        left.push(Integer.MIN_VALUE);\n        right.push(Integer.MAX_VALUE);\n        stage.push(0);\n\n        while (true)\n        {\n            String next = reader.nextToken();\n            if(next == null) break;\n\n            int a = Integer.parseInt(next);\n\n\n            while (a < left.peek() || a > right.peek())\n            {\n                if(stage.peek() == 0)\n                {\n                    left.pop();\n                    left.push(number.peek());\n\n                    right.pop();\n                    right.push(right.peek());\n\n                    stage.pop();\n                    stage.push(1);\n                }\n                else\n                {\n                    writer.write(number.pop() + \"\\n\");\n                    left.pop();\n                    right.pop();\n                    stage.pop();\n                }\n            }\n\n\n            number.push(a);\n            left.push(left.peek());\n            right.push(a);\n            stage.push(0);\n        }\n\n        while (number.size() > 1)\n            writer.write(number.pop() + \"\\n\");\n\n\n        writer.flush();\n        writer.close();\n    }\n\n    static class JavaCodersReader\n    {\n        BufferedReader reader;\n        StringTokenizer tokenizer;\n\n        public JavaCodersReader()\n        {\n            reader = new BufferedReader(new InputStreamReader(System.in));\n            tokenizer = new StringTokenizer(\"\");\n        }\n\n        public String nextToken() throws IOException\n        {\n            if(tokenizer.hasMoreTokens())\n                return tokenizer.nextToken();\n            String nextLine = reader.readLine();\n            if(nextLine == null) return null;\n            tokenizer = new StringTokenizer(nextLine);\n            return nextToken();\n        }\n\n        public String readLine() throws IOException\n        {\n            return reader.readLine();\n        }\n    }\n}", "generated_code": "import java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.Queue;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.io.BufferedReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.io.InputStream;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport javax.naming.BinaryRefAddr;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tScanner scan = new Scanner(System.in);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n}\n\nclass TaskC {\n\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\n\t\tScanner scan = new Scanner(System.in);\n\t\tBinaryTree bst = new BinaryTree();\n\t\tbst.BinaryTree();\n\t\twhile (scan.hasNext()) {\n\t\t\tbst.insert(scan.nextInt());\n\t\t}\n\t\tbst.dod(bst.root);\n\t}\n}\n\nclass BinaryTree {\n\tvoid dod(Node node) {\n\t\tif (node != null) {\n\t\t\tdod(node.left);\n\t\t\tdod(node.right);\n\t\t\tSystem.out.println(node.data);\n\t\t}\n\t}\n\n\tpublic Node root;\n\n\tpublic static class Node {\n\t\tNode left;\n\t\tNode right;\n\t\tint data;\n\n\t\tNode(int newData) {\n\t\t\tleft = null;\n\t\t\tright = null;\n\t\t\tdata = newData;\n\t\t}\n\t}\n\n\tpublic void BinaryTree() {\n\t\troot = null;\n\t}\n\n\tpublic boolean lookup(int data) {\n\t\treturn (lookup(root, data));\n\t}\n\n\tprivate boolean lookup(Node node, int data) {\n\t\tif (node == null) {\n\t\t\treturn (false);\n\t\t}\n\n\t\tif (data == node.data) {\n\t\t\treturn (true);\n\t\t} else if (data < node.data) {\n\t\t\treturn (lookup(node.left, data));\n\t\t} else {\n\t\t\treturn (lookup(node.right, data));\n\t\t}\n\t}\n\n\tpublic void insert(int data) {\n\t\troot = insert(root, data);\n\t}\n\n\tprivate Node insert(Node node, int data) {\n\t\tif (node == null) {\n\t\t\tnode = new Node(data);\n\t\t} else {\n\t\t\tif (data <= node.data) {\n\t\t\t\tnode.left = insert(node.left, data);\n\t\t\t} else {\n\t\t\t\tnode.right = insert(node.right, data);\n\t\t\t}\n\t\t}\n\t\treturn (node);\n\t}\n}\n\nclass InputReader {\n\tBufferedReader br;\n\tStringTokenizer st;\n\n\tpublic InputReader(InputStream in) {\n\t\tbr = new BufferedReader(new InputStreamReader(in));\n\t\tst = null;\n\t}\n\n\tpublic String next() {\n\t\twhile (st == null || !st.hasMoreTokens()) {\n\t\t\ttry {\n\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn st.nextToken();\n\t}\n\n\tpublic int nextInt() {\n\t\treturn Integer.parseInt(next());\n\t}\n\n\tpublic long nextLong() {\n\t\treturn Long.parseLong(next());\n\t}\n\n\tpublic float nextFloat() {\n\t\treturn Float.parseFloat(next());\n\t}\n\n\tpublic double nextDouble() {\n\t\treturn Double.parseDouble(next());\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1001_174__1_1001_354", "golden_code": "\n//package sum;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\t\n\t    static Scanner sc = new Scanner(System.in);\n\t    \n\t        public static void main(String[] args) {\n\t        \t        while (sc.hasNext()) {\n\t        \t        \t            ArrayList a = new ArrayList();\n\t        \t        \t                        ArrayList b = new ArrayList();\n\t        \t        \t                                    int k = 0;\n\t        \t        \t                                                int first = sc.nextInt();\n\t        \t        \t                                                            k++;\n\t        \t        \t                                                                        int second = sc.nextInt();\n\t        \t        \t                                                                        \n\t        \t        \t                                                                                    k++;\n\t        \t        \t                                                                                                Object sum = first + second;\n\t        \t        \t                                                                                                            System.out.println(sum);\n\t        \t        }\n\t        }\n}\n", "generated_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main\n{\n    static String ReadLn (int maxLg)  // utility function to read from stdin\n    {\n        byte lin[] = new byte [maxLg];\n        int lg = 0, car = -1;\n        String line = \"\";\n\n        try\n        {\n            while (lg < maxLg)\n            {\n                car = System.in.read();\n                if ((car < 0) || (car == '\\n')) break;\n                lin [lg++] += car;\n            }\n        }\n        catch (IOException e)\n        {\n            return (null);\n        }\n\n        if ((car < 0) && (lg == 0)) return (null);  // eof\n        return (new String (lin, 0, lg));\n    }\n\n    public static void main (String args[])  // entry point from OS\n    {\n        Main myWork = new Main();  // create a dinamic instance\n        myWork.Begin();            // the true entry point\n    }\n\n    void Begin()\n    {\n        String input;\n        StringTokenizer idata;\n        int a, b, min, max, num, n, cycle, cyclemax;\n\n        while ((input = Main.ReadLn (255)) != null)\n        {\n          idata = new StringTokenizer (input);\n          a = Integer.parseInt (idata.nextToken());\n          b = Integer.parseInt (idata.nextToken());\n    \n          System.out.println (a + b);\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2811_20__1_2811_25", "golden_code": "\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s=new Scanner(System.in);\n        LinkedList l=new LinkedList();\n        int input1=s.nextInt();\n        \n        for (int i = 0; i < input1; i++) {\n            \n            int input2=s.nextInt();\n            int input3=s.nextInt();\n            \n            l.clear();\n            \n            int array[]=new int[input2];\n            int array1[]=new int[input3];\n            \n            for (int j = 0; j < input2; j++) {\n                 array[j]=s.nextInt();\n            }\n            \n            for (int j = 0; j < input3; j++) {\n                 array1[j]=s.nextInt();\n            }\n            \n            boolean t=false;\n            \n            for (int j = 0; j < input2; j++) {\n                for (int k = 0; k < input3; k++) {\n                 \n                    if(array[j]==array1[k]){\n                        t=true;\n                        break;\n                    }else\n                        t=false;\n                      \n                }\n                \n                if(t==false){\n                    l.add(array[j]);\n                } \n            }\n            Collections.sort(l);\n            if(l.isEmpty())\n                System.out.println();\n            while(!l.isEmpty()){\n                if(l.size()==1){\n                    System.out.println(l.get(0));\n                    break;\n                }\n                System.out.print(l.getFirst()+\",\");\n                l.removeFirst();\n            }\n            \n        }\n    }\n    \n}\n", "generated_code": "\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n\n        int t = in.nextInt();\n\n        while (t != 0) {\n\n            int n = in.nextInt();\n\n            int m = in.nextInt();\n\n            long[] w = new long[n];\n\n            for (int j = 0; j < w.length; j++) {\n\n                w[j] = in.nextLong();\n\n            }\n\n            long[] x = new long[m];\n\n            for (int k = 0; k < x.length; k++) {\n\n                x[k] = in.nextLong();\n\n            }\n\n            for (int l = 0; l < w.length; l++) {\n\n                for (int o = 0; o < x.length; o++) {\n\n                    if (w[l] == x[o]) {\n\n                        w[l] = 0;\n\n                    }\n\n                }\n\n            }\n\n            Arrays.sort(w);\n            int fl = 0;\n            StringBuilder sb = new StringBuilder();\n\n            for (int r = 0; r < w.length; r++) {\n\n                if (w[r] != 0) {\n                    fl = 1;\n                    //System.out.print(w[r] + \",\");\n                    sb.append(w[r]).append(\",\");\n                }\n\n            }\n            if (fl == 1) {\n                //System.out.print(\"\\b\");\n                sb.delete(sb.length() - 1, sb.length());\n            }\n\n            System.out.println(sb.toString());\n\n            t--;\n\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_253__1_1001_317", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n\t    Scanner input = new Scanner(System.in);\n        do {\n            try {\n            System.out.print(input.nextInt() + input.nextInt() + \"\\n\");\n            }\n            catch (RuntimeException exmp)\n            {\n                System.exit(0);\n            }\n\n\n        }\n\n\n        while (true);\n    }\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner input = new Scanner(System.in);\n\t\twhile (input.hasNext()) {\n\n\t\t\tString line = input.nextLine();\n\t\t\tString[] numbers = line.split(\" \");\n\t\t\tSystem.out.println(Integer.parseInt(numbers[0]) + Integer.parseInt(numbers[1]));\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1959_5__1_2332_1", "golden_code": "import java.util.Scanner;\npublic class Main\n{\n    public static void main (String[] args)\n    {\n        Scanner scan = new Scanner(System.in);\n        while(scan.hasNext())\n        {\n            int n = scan.nextInt();\n            int[] lights = new int[n];\n            for (int i =0; i< n; lights[i++]= scan.nextInt()){}\n            int min=0;\n            int now =0,d1=0,d2=0;\n            for (int i=0; i<n; i++)\n            {\n                if (lights[i]!=(now++)%2)\n                    d1++;\n            }\n            now = 1;\n            for (int i=0; i<n; i++)\n            {\n                if (lights[i]!=(now++)%2)\n                    d2++;\n            }\n            if (d1 > d2)\n                System.out.println(d2);\n            else\n                System.out.println(d1);\n        }\n    }\n}", "generated_code": "import java.util.*;\npublic class Main{\n\tpublic static void main(String [] args){\n\t\tScanner input = new Scanner(System.in);\n\t\twhile(input.hasNext()){\n\t\t\tint count = input.nextInt();\n\t\t\tint[] mainArray = new int[count];\n\t\t\tfor(int i = 0 ; i < count ; i++)\n\t\t\t\tmainArray[i] = input.nextInt();\n\t\t\tint[] array = new int[count];\n\t\t\tint numOfInversion = 0;\n\t\t\tint min = 0;\n\t\t\tfor(int i = 0 ; i < count ; i++){\n\t\t\t\tfor(int j = i+1 ; j < count ; j++){\n\t\t\t\t\tif(mainArray[i] > mainArray[j]){\n\t\t\t\t\t\tarray[i]++;\n\t\t\t\t\t\tnumOfInversion++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmin = numOfInversion;\n\n\t\t\tfor(int i = 0 ; i < count-1 ; i++){\n\t\t\t\tnumOfInversion -= array[i];\n\t\t\t\tfor(int j = 0 ; j < count ; j++){\n\t\t\t\t\tif(j == i)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif(mainArray[i] < mainArray[j]){\n\t\t\t\t\t\tarray[j]++;\n\t\t\t\t\t\tnumOfInversion++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(numOfInversion < min)\n\t\t\t\t\tmin = numOfInversion;\n\t\t\t}\n\t\t\tSystem.out.println(min);\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1006_99__1_2371_24", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner input = new Scanner(System.in);\n        while (input.hasNext()) {\n            float inputValue = input.nextFloat();\n            float sum = 0.0f;\n            int outputValue = 1;\n            if (inputValue == 0.0) {\n                break;\n            }\n            while (inputValue >= sum) {\n                sum += ((float) 1 / (outputValue + 1));\n                outputValue++;\n            }\n            System.out.println((outputValue - 1) + \" card(s)\");\n        }\n    }\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        \n        Scanner input = new Scanner ( System.in );\n        \n        int n;\n        \n        try{\n            while( true ){\n                n = input.nextInt();\n                if( n % 2 == 0 )\n                    System.out.println( n * ( n + 2 ) * ( 2 * n + 1 ) / 8 );\n                else\n                    System.out.println( (int)(( n + 1 ) * ( 2 * Math.pow( n, 2 ) + 3 * n - 1) / 8) );\n            }   \n        }catch( Exception e ){}\n        \n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2747_10__1_2554_49", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        int n = cin.nextInt();\n        while (n > 0) {\n            String s = cin.next();\n            int ctrl = 0;\n            byte ct1 = 0;\n            byte ct2 = 0;\n            byte ct3 = 0;\n            byte ct4 = 0;\n            for (int i = 0; i < s.length(); i++) {\n                if (s.charAt(i) <= 'Z' && s.charAt(i) >= 'A') {\n                    if (ct1 == 0) {\n                        ctrl++;\n                        ct1++;\n                    }\n                }\n                if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n                    if (ct2 == 0) {\n                        ctrl++;\n                        ct2++;\n                    }\n                }\n                if (s.charAt(i) >= '0' && s.charAt(i) <= '9') {\n                    if (ct3 == 0) {\n                        ctrl++;\n                        ct3++;\n                    }\n                }\n                if (s.charAt(i) == '!' || s.charAt(i) == '@' || s.charAt(i) == '#' || s.charAt(i) == '$' || s.charAt(i) == '%' || s.charAt(i) == '^' || s.charAt(i) == '&' || s.charAt(i) == '*' || s.charAt(i) == '(' || s.charAt(i) == ')') {\n                    if (ct4 == 0) {\n                        ctrl++;\n                        ct4++;\n                    }\n                }\n            }//for\n            if (ctrl == 1) {\n                System.out.println(\"very bad\");\n            }\n            if (ctrl == 2) {\n                System.out.println(\"bad\");\n            }\n            if (ctrl == 3) {\n                System.out.println(\"good\");\n            }\n            if (ctrl == 4) {\n                System.out.println(\"overkill\");\n            }\n            n--;\n        }\n    }\n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        List<String> answers = new ArrayList<String>();\n        Scanner line = new Scanner(System.in);\n        String newLine = line.nextLine();\n\n        while ( !(newLine.equals(\"###\") ) ){\n            List<Feature> features = new ArrayList<Feature>();\n            List<String> names = new ArrayList<String>();\n\n            while ( !(newLine.equals(\"#\") ) ){\n                    newLine = newLine.trim().replaceAll(\"\\\\s+\", \"\");\n\n                    String firstName = newLine.split(\"=\")[0].trim().replaceAll(\" +\", \"\");\n                   int index = processFirst(firstName, names, features);\n                    processChildren(newLine, names, features, index);\n                    features.get(index).setChildType(setDivider(newLine));\n\n                    newLine = line.nextLine();\n                }\n            newLine = line.nextLine();\n\n            while ( !(newLine.equals(\"##\") ) ){\n                resetUsedChildren(features);\n\n\n                List<String> testCase = new ArrayList<String>();\n                List<Feature> testFeatures = new ArrayList<Feature>();\n\n                boolean Invalid = getTestCase(newLine, names, features, testCase, testFeatures);\n\n                if (Invalid){\n                    answers.add(\"Invalid\");\n                    newLine = line.nextLine();\n                    break;\n                }\n\n                Invalid = true;\n\n                Invalid = rootCheck(Invalid, testCase, testFeatures);\n\n                Invalid = mandatoryCheck(Invalid, testCase, testFeatures);\n\n                countChildren(testFeatures);\n                Invalid = childrenCheck(Invalid, testFeatures);\n\n                Invalid = parentCheck(Invalid, testFeatures);\n\n                if (Invalid){\n                    answers.add(\"Invalid\");\n                } else answers.add(\"Valid\");\n\n                newLine = line.nextLine();\n            }\n            answers.add(\"+++\");\n            newLine = line.nextLine();\n        }\n        for (String x: answers\n             ) {\n            System.out.println(x);\n        }\n    }\n\n    static String setDivider(String newLine){\n        if (newLine.contains(\"+\")){\n            return  \"\\\\+\";\n        } else if (newLine.contains(\"|\")){\n            return  \"\\\\|\";\n        } else if (newLine.contains(\"^\")){\n            return  \"\\\\^\";\n        }\n        return \"\";\n    }\n\n    static int processFirst(String firstName, List<String> names, List<Feature> features){\n        if (names == null || names.indexOf(firstName) == -1 ){\n            names.add(firstName);\n            Feature first = new Feature(firstName);\n            features.add(first);\n        }\n        return names.indexOf(firstName);\n    }\n\n    static void processChildren(String newLine, List<String > names, List<Feature> features, int index){\n        String[] children;\n        children = newLine.split(\"=\")[1].split(setDivider(newLine));\n\n        for (String name: children) {\n            String editedName = name.contains(\"?\") ? name.substring(1) : name;\n            if (names.indexOf(editedName) == -1) {\n                names.add(((editedName)).trim().replaceAll(\"\\\\s+\", \"\"));\n                features.add(new Feature(name));\n            }\n            features.get(index).setChild(features.get(names.indexOf((editedName))));\n            if (name.contains(\"?\")) features.get(names.indexOf(name.substring(1))).optional = true;\n        }\n    }\n\n    static void resetUsedChildren(List<Feature> features){\n        for (Feature f: features) {\n            f.setChildUsedCount(0);\n        }\n    }\n\n    static boolean getTestCase(String newLine, List<String> names, List<Feature> features, List<String> testCase, List<Feature> testFeatures){\n        boolean Invalid = false;\n        for (String x:\n                newLine.trim().replaceAll(\"\\\\{\",\"\").trim().replaceAll(\"}\", \"\").trim().replaceAll(\"\\\\s+\",\"\").split(\",\")\n        ) {\n            testCase.add(x);\n            if (names.indexOf(x) != -1)\n                testFeatures.add(features.get(names.indexOf(x)));\n            else Invalid = true;\n        }\n        return Invalid;\n    }\n\n    static boolean rootCheck(boolean Invalid, List<String> testCase, List<Feature> testFeatures){\n        for (int index = 0; index < testCase.size() && Invalid; index++){\n            if ( testFeatures.get(index).getParent() == null ) Invalid = false;\n        }\n        return Invalid;\n    }\n\n    static boolean mandatoryCheck(boolean Invalid, List<String> testCase, List<Feature> testFeatures){\n        for (int index = 0; index < testFeatures.size() && !Invalid; index++){\n            for (Feature feature: testFeatures.get(index).children\n            ) {\n                if ( feature.parentRelType == 1 && testFeatures.indexOf(feature) == -1 ){\n                    Invalid = true;\n                }\n                if (Invalid) break;\n            }\n        }\n        return Invalid;\n    }\n\n    static void countChildren(List<Feature> testFeatures){\n        for (Feature feature: testFeatures) {\n            if (feature.getParent() != null)\n                feature.getParent().setChildUsedCount(feature.getParent().getChildUsedCount()+1);\n        }\n    }\n\n    static boolean childrenCheck(boolean Invalid, List<Feature> testFeatures){\n        for (Feature feature: testFeatures) {\n            if ((feature.getChildRelType() == 1 && feature.getChildUsedCount() != 1)) {\n                Invalid = true;\n                break;\n            }\n            if (feature.getChildRelType() == 2 && feature.getChildUsedCount() < 1){\n                Invalid = true;\n                break;\n            }\n        }\n        return Invalid;\n    }\n\n    static boolean parentCheck(boolean Invalid, List<Feature> testFeatures){\n        for (Feature feature: testFeatures) {\n            if (feature.getParent() != null){\n                if (testFeatures.indexOf(feature.getParent()) == -1){\n                    Invalid = true;\n                    break;\n                }\n            }\n        }\n        return Invalid;\n    }\n\n}\n\nclass Feature {\n    public String name;\n    public List<Feature> children;\n    Feature parent;\n    public boolean optional = false;\n    int childUsedCount = 0;\n    public int childRelType = 0;\n    public int parentRelType = 0;\n\n    public Feature(String name){\n        if (name.contains(\"?\")) {\n            this.optional = true;\n            name = name.substring(1);\n        }\n        this.setName(name);\n        this.children = new ArrayList<Feature>();\n    }\n\n    public void setChildType(String divider) {\n        if (divider == \"\\\\^\") {\n            this.childRelType = 1;\n        } else if (divider == \"\\\\|\") {\n            this.childRelType = 2;\n        } else {\n            for (Feature f : this.children) {\n                if (f.optional)\n                    f.parentRelType = 2;\n                else\n                    f.parentRelType = 1;\n            }\n        }\n    }\n\n    public void setChild(Feature child){\n        child.setParent(this);\n        this.children.add(child);\n    }\n\n    public void setParent(Feature parent) {\n        this.parent = parent;\n    }\n\n    public void setName(String name){ this.name = name; }\n\n    public String getName(){ return this.name; }\n\n    public void setChildUsedCount(int childUsedCount){\n        this.childUsedCount = childUsedCount;\n    }\n\n    public int getChildUsedCount() { return this.childUsedCount; }\n\n    public int getChildRelType(){ return this.childRelType; }\n\n    public Feature getParent(){ return this.parent; }\n}\n\n\n", "score": 0.0}
{"id": "SHARE_1_1001_428__1_1001_370", "golden_code": "import java.util.Scanner;\n\n/**\n * Created by afra on 11/24/16.\n */\npublic class Main {\n\n        public static void main(String[] args) {\n            Scanner s = new Scanner(System.in);\n            int a, b;\n            while (s.hasNextInt()){\n                a = s.nextInt();\n                b = s.nextInt();\n                System.out.println(a + b);\n            }\n        }\n\n    }\n", "generated_code": "\n\nimport java.util.Scanner;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n/**\n *\n * @author Hezare 3vom\n */\npublic class Main {\n    public static void main(String[] args) {\n        int a;\n          int b;\n         int sum=0;\n          Scanner in=new Scanner(System.in);\n          while(in.hasNext()){\n             a=in.nextInt();\n         b=in.nextInt();\n         sum=a+b;\n          System.out.println(sum);\n          }\n        \n         \n    }\n}\n    \n", "score": 1.0}
{"id": "SHARE_1_2847_32__1_2847_36", "golden_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\n/**\n * Created by mhd on 11/24/16.\n */\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int n = input.nextInt();\n        while (n-- > 0)\n        {\n            int p = input.nextInt();\n            int []arr = new int[p];\n            double total = 0;\n            for (int i = 0; i < p; i++) {\n                int curr = input.nextInt();\n                arr[i] = curr;\n                total+=curr;\n            }\n            Arrays.sort(arr);\n            double A = (arr[0] + arr[p-1]) / 2.00;\n            double B = total / (double)p;\n            if (A - B < 1.00 &&  -1.00 < A-B )\n                System.out.println(\"Yes\");\n            else\n                System.out.println(\"No\");\n        }\n    }\n}\n", "generated_code": "\n//package javaapplication8;\n\nimport java.util.Scanner;\n\nclass Main{\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in) ;\n        int testNumber = input.nextInt() ;\n        int studentNumer ;\n        int min  , max , total , nextGrade ;\n        double avg ;\n        \n        for (int i = 0; i < testNumber; i++) {\n            studentNumer = input.nextInt() ;\n            min = 110 ;\n            max = 0 ;\n            total = 0 ;\n            for (int j = 0; j < studentNumer ; j++) {\n                nextGrade = input.nextInt() ;\n                \n                if(nextGrade > max)\n                    max = nextGrade ;\n                if(nextGrade < min)\n                    min = nextGrade ;\n                total += nextGrade ;   \n            }\n            \n            if(studentNumer <= 0)\n                System.out.println(\"Yes\");\n            else{\n            avg = (double)total / studentNumer ;\n            \n            if(Math.abs( avg - (double)(max + min)/2) < 1)\n                System.out.println(\"Yes\");\n            else\n                System.out.println(\"No\");\n            \n            }\n            \n        }\n        \n        \n    }\n    \n}\n", "score": 1.0}
{"id": "SHARE_1_2621_29__1_2621_21", "golden_code": "\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = Integer.parseInt(s.nextLine());\n        while (n > 0) {\n\n            String str = s.nextLine().toUpperCase();\n            String str2 = \"\";\n            String str3 = \"\";\n            int ctrl = 0;\n\n            for (int i = 0; i < str.length(); i++) {\n                char cCh = str.charAt(i);\n                if (cCh == 'A' || cCh == 'B' || cCh == 'C') {\n                    str2 += \"2\";\n                } else if (cCh == 'D' || cCh == 'E' || cCh == 'F') {\n                    str2 += \"3\";\n                } else if (cCh == 'G' || cCh == 'H' || cCh == 'I') {\n                    str2 += \"4\";\n                } else if (cCh == 'J' || cCh == 'K' || cCh == 'L') {\n                    str2 += \"5\";\n                } else if (cCh == 'M' || cCh == 'N' || cCh == 'O') {\n                    str2 += \"6\";\n                } else if (cCh == 'P' || cCh == 'Q' || cCh == 'R' || cCh == 'S') {\n                    str2 += \"7\";\n                } else if (cCh == 'T' || cCh == 'U' || cCh == 'V') {\n                    str2 += \"8\";\n                } else if (cCh == 'W' || cCh == 'X' || cCh == 'Y' || cCh == 'Z') {\n                    str2 += \"9\";\n                }\n            }\n            for (int i = str.length() - 1; i >= 0; i--) {\n                str3 += str2.charAt(i);\n            }\n            \n            if (str2.equals(str3)) {\n                System.out.println(\"YES\");\n            } else {\n                System.out.println(\"NO\");\n\n            }\n            n--;\n        }\n    }\n}", "generated_code": "///Numbersmun\n\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int a=0;\n        while(a<1)\n            a=in.nextInt();\n        for(int i=0;i<a;i++){\n            boolean b=true;\n            String s=in.next();\n            while(s.length()>20)\n                s=in.next();\n            s=s.toUpperCase();\n            s=s.replace('B', 'A');\n            s=s.replace('C', 'A');\n            s=s.replace('E', 'D');\n            s=s.replace('F', 'D');\n            s=s.replace('H', 'G');\n            s=s.replace('I', 'G');\n            s=s.replace('K', 'J');\n            s=s.replace('L', 'J');\n            s=s.replace('N', 'M');\n            s=s.replace('O', 'M');\n            s=s.replace('Q', 'P');\n            s=s.replace('R', 'P');\n            s=s.replace('S', 'P');\n            s=s.replace('U', 'T');\n            s=s.replace('V', 'T');\n            s=s.replace('X', 'W');\n            s=s.replace('Y', 'W');\n            s=s.replace('Z', 'W');\n            \n            in:for(int j=0;j<s.length()/2;j++)\n                if(s.charAt(j)!=s.charAt(s.length()-j-1)){\n                    b=false;\n                    break in;\n                }\n            if(b)\n                System.out.println(\"YES\");\n            else\n                System.out.println(\"NO\");\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2717_61__5_1037_3", "golden_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nclass Main{\n\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tBufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\t\twhile (true) {\n\t\t\tint n = Integer.parseInt(input.readLine());\n\t\t\tif (n == 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tStringBuilder s1 = new StringBuilder(input.readLine());\n\t\t\tStringBuilder s2 = new StringBuilder(input.readLine());\n\t\t\tStringBuilder s = new StringBuilder(input.readLine());\n\t\t\tStringBuilder temps1 = new StringBuilder(s1);\n\t\t\tStringBuilder temps2 = new StringBuilder(s2);\n\t\t\tStringBuilder temps;\n\t\t\tint o = 0;\n\t\t\twhile (o++ < 50) {\n\t\t\t\ttemps = new StringBuilder();\n\t\t\t\tfor (int i = 0; i < temps1.length(); i++) {\n\t\t\t\t\ttemps.append(temps2.charAt(i));\n\t\t\t\t\ttemps.append(temps1.charAt(i));\n\t\t\t\t}\n\t\t\t\tif (temps.toString().equals(s.toString())) {\n\t\t\t\t\tSystem.out.println(o);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ttemps1 = new StringBuilder(temps.substring(0, n));\n\t\t\t\ttemps2 = new StringBuilder(temps.substring(n, temps.length()));\n\t\t\t\tif (temps1.toString().equals(s1.toString()) && temps2.toString().equals(s2.toString())) {\n\t\t\t\t\tSystem.out.println(-1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n", "generated_code": "/**\n * Implementation of the fourth coding assignment for the Algorithms course of\n * U of Tehran (Spring 2015): https://sharecode.io/section/utda/problem/1037\n * \n * The code loosely follows Google Java Style guide:\n * https://google-styleguide.googlecode.com/svn/trunk/javaguide.html\n * using the following Eclipse formatter configuration:\n * https://google-styleguide.googlecode.com/svn/trunk/eclipse-java-google-style.xml\n */\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\n/**\n * Given an input network flow, finds an edge that if we double its capacity\n * then the total increase in the s-t flow is maximized.\n * \n * @author Bashir Sadjad\n */\npublic class Main {\n  private final List<NodeInfo> node_info_list;\n  private static final int NOT_SET = -1;\n  private final int source;\n  private final int target;\n  \n  class NodeInfo {\n    final List<EdgeInfo> edges = new ArrayList<EdgeInfo>();\n    final int index;\n    int parent;\n    \n    NodeInfo(int index) { this.index = index; }\n  }\n  \n  enum EdgeDirection {\n    INWARD,       // indicates an inward edge, i.e., an edge that ends in 'this'\n    OUTWARD,      // indicates an outward edge, i.e., an edge that starts at 'this'\n  }\n  \n  class EdgeInfo {\n    public final int other_end;\n    public final EdgeDirection direction;\n    public int capacity;\n    public int flow = 0;\n    public int orig_flow = 0;\n    public boolean is_cut_edge = false;\n    \n    public EdgeInfo(int other_end, int capacity, EdgeDirection direction) {\n      this.other_end = other_end;\n      this.capacity = capacity;\n      this.direction = direction;\n    }\n  }\n  \n  public Main(int num_nodes) {\n    node_info_list = new ArrayList<NodeInfo>();\n    for (int i = 0; i < num_nodes; i++) node_info_list.add(new NodeInfo(i));\n    source = 0;\n    target = num_nodes - 1;\n  }\n\n  /**\n   * Adds both directions of the edge to the network flow.\n   * \n   * @param node_1 one end of the edge\n   * @param node_2 the other end of the edge\n   * @param capacity the capacity of the edge\n   */\n  public void AddEdge(int node_1, int node_2, int capacity) {\n    node_info_list.get(node_1).edges.add(new EdgeInfo(node_2, capacity, EdgeDirection.OUTWARD));\n    node_info_list.get(node_1).edges.add(new EdgeInfo(node_2, capacity, EdgeDirection.INWARD));\n    node_info_list.get(node_2).edges.add(new EdgeInfo(node_1, capacity, EdgeDirection.INWARD));\n    node_info_list.get(node_2).edges.add(new EdgeInfo(node_1, capacity, EdgeDirection.OUTWARD));\n  }\n  \n  private void resetDfsTree() {\n    for (NodeInfo node : this.node_info_list) {\n      node.parent = NOT_SET;\n    }\n  }\n  \n  /**\n   * @param root the root of the DFS sub-tree\n   * @return the residual amount that can be increased or a number less than\n   *         zero if there is no residual path to the target.\n   */\n  private int residualDfs(int root) {\n    if (root == this.target) return Integer.MAX_VALUE;\n    for (EdgeInfo edge : node_info_list.get(root).edges) {\n      if (node_info_list.get(edge.other_end).parent != NOT_SET) continue;\n      int edge_residual = -1;\n      if (edge.direction == EdgeDirection.OUTWARD && edge.capacity > edge.flow)\n        edge_residual = edge.capacity - edge.flow;\n      if (edge.direction == EdgeDirection.INWARD && edge.flow > 0)\n        edge_residual = edge.flow;\n      if (edge_residual > 0) {\n        node_info_list.get(edge.other_end).parent = root;\n        int inc_amount = residualDfs(edge.other_end);\n        if (inc_amount > 0) return Math.min(inc_amount, edge_residual);\n      }\n    }\n    return -1;\n  }\n\n  private void updateEdgeFlow(int node_1, int node_2, EdgeDirection direction, int inc_amount) {\n    for (EdgeInfo edge : node_info_list.get(node_1).edges) {\n      if (edge.other_end == node_2 && edge.direction == direction) {\n        edge.flow += inc_amount;\n        assert edge.flow > 0;\n      }\n    }\n  }\n  \n  private void updateResidualEdge(int node_1, int node_2, int inc_amount) {\n    for (EdgeInfo edge : node_info_list.get(node_1).edges) {\n      if (edge.other_end == node_2) {\n        if (edge.direction == EdgeDirection.OUTWARD && edge.capacity - edge.flow >= inc_amount) {\n          edge.flow += inc_amount;\n          updateEdgeFlow(node_2, node_1, EdgeDirection.INWARD, inc_amount);\n        } else if (edge.direction == EdgeDirection.INWARD && edge.flow >= inc_amount) {\n          edge.flow -= inc_amount;\n          updateEdgeFlow(node_1, node_2, EdgeDirection.OUTWARD, -inc_amount);\n        } else {\n          assert false; // should never reach here!\n        }\n      }\n    }\n  }\n  \n  private void increaseFlow(int inc_amount) {\n    assert node_info_list.get(this.target).parent != NOT_SET;\n    int current_node = this.target;\n    while (current_node != this.source) {\n      int previous_node = node_info_list.get(current_node).parent;\n      updateResidualEdge(previous_node, current_node, inc_amount);\n      current_node = previous_node;\n    }\n  }\n  \n  /**\n   * This is the main function that constructs a valid maximum flow by repeated\n   * calls to {@code residualDfs} and {@code increaseFlow}. This can start from\n   * another valid flow that is not necessarily maximum and increment it until\n   * it is maximum.\n   */\n  public void findMaxFlow() {\n    int inc_amount = -1;\n    do {\n      inc_amount = -1;\n      resetDfsTree();\n      node_info_list.get(this.source).parent = 0;\n      inc_amount = residualDfs(this.source);\n      if (inc_amount > 0) {\n        increaseFlow(inc_amount);\n      }\n    } while (inc_amount > 0);\n  }\n  \n  /**\n   * This calculates the amount of the current flow without making any changes\n   * to it, so this usually follows a {@code findMaxFlow} call.\n   * \n   * @return the total flow that goes out of this.source.\n   */\n  public int calculateTotalFlow() {\n    int total_flow = 0;\n    for (EdgeInfo edge : this.node_info_list.get(this.source).edges) {\n      if (edge.direction == EdgeDirection.INWARD) assert edge.flow == 0;\n      else total_flow += edge.flow;\n    }\n    return total_flow;\n  }\n  \n  private void copyEdgeFlows() {\n    for (NodeInfo node : node_info_list) {\n      for (EdgeInfo edge : node.edges) edge.orig_flow = edge.flow;\n    }\n  }\n\n  private void restoreOriginalEdgeFlows() {\n    for (NodeInfo node : node_info_list) {\n      for (EdgeInfo edge : node.edges) edge.flow = edge.orig_flow;\n    }\n  }\n  \n  private void updateEdgeCapacity(int node_1, int node_2, int new_capacity) {\n    for (EdgeInfo edge : node_info_list.get(node_1).edges) {\n      if (edge.other_end == node_2) {\n        edge.capacity = new_capacity;\n      }\n    }\n  }\n  \n  private void markCutEdges() {\n    // The precondition for this function is that the max flow is already\n    // calculated and the residual DFS tree is the last one.\n    assert node_info_list.get(this.source).parent == this.source;\n    assert node_info_list.get(this.target).parent == NOT_SET;\n    for (NodeInfo node : this.node_info_list) {\n      if (node.parent != NOT_SET) {\n        for (EdgeInfo edge : node.edges) {\n          if ((node_info_list.get(edge.other_end).parent == NOT_SET) &&\n              (edge.direction == EdgeDirection.OUTWARD)) {\n            edge.is_cut_edge = true;\n          }\n        }\n      }\n    }\n  }\n  \n  /**\n   * Finds the current maximum flow then for each edge of the minimum cut\n   * tries doubling its capacity and recalculates the maximum flow. It chooses\n   * the maximum among all tries.\n   * \n   * @return the maximum achievable flow by doubling the capacity of an edge. \n   */\n  public int findMaxFlowAfterIncrease() {\n    findMaxFlow();\n    int max_flow = calculateTotalFlow();\n    // We keep the current flow to avoid recalculating it from scratch every\n    // time that an edge capacity is doubled.\n    copyEdgeFlows();\n\n    // Check all edges of the cut and see if doubling the capacity helps\n    // increasing the total flow.\n    markCutEdges();\n    for (NodeInfo node : this.node_info_list) {\n      if (node.parent != NOT_SET) {\n        for (EdgeInfo edge : node.edges) {\n          \n          // only check edges that are part of the cut\n          if (!edge.is_cut_edge) continue;\n          \n          int old_capacity = edge.capacity;\n          updateEdgeCapacity(node.index, edge.other_end, 2 * old_capacity);\n          updateEdgeCapacity(edge.other_end, node.index, 2 * old_capacity);\n          \n          // Find the maximum flow after capacity increase.\n          // Note that this continues from where the old findMaxFlow with\n          // original capacities stopped to speed up.\n          restoreOriginalEdgeFlows();\n          findMaxFlow();\n          int new_flow = calculateTotalFlow();\n          if (new_flow > max_flow) max_flow = new_flow;\n          \n          updateEdgeCapacity(node.index, edge.other_end, old_capacity);\n          updateEdgeCapacity(edge.other_end, node.index, old_capacity);\n        }\n      }\n    }\n    return max_flow;\n  }\n\n  public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    try {\n      // There should be at least one integer indicating number of input cases.\n      int num_cases = scanner.nextInt();\n      int i = 0;\n      for (i = 0; i < num_cases; i++) {\n        int num_nodes = scanner.nextInt();\n        int num_edges = scanner.nextInt();\n        Main improver = new Main(num_nodes);\n        for (int j = 0; j < num_edges; j++) {\n          improver.AddEdge(scanner.nextInt(), scanner.nextInt(), scanner.nextInt());\n        }\n        improver.findMaxFlow();\n        int current_max_flow = improver.calculateTotalFlow();\n        int max_flow_after_increase = improver.findMaxFlowAfterIncrease();\n        System.out.println(current_max_flow + \" \" + max_flow_after_increase);\n      }\n    } finally {\n      scanner.close();\n    }\n  }  \n}", "score": 0.0}
{"id": "SHARE_1_1001_58__1_1001_13", "golden_code": "import java.util.*;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\n\t\tScanner in=new Scanner(System.in);\n\t\tint a=0, b=0;\n\t\twhile(in.hasNext()){\n\t\t\ta=in.nextInt();\n\t\t\tb=in.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\n\nclass Main\n{\n\tpublic static void main(String [] arg)\n\t\t{\n\t\t\tScanner scan = new Scanner(System.in);\n\t\t\tint a,b,sum = 0;\n\t\t\t\twhile(scan.hasNextInt())\n\t\t\t\t\t{\n\t\t\t\t\t\ta = scan.nextInt();\n\t\t\t\t\t\tb = scan.nextInt();\n\t\t\t\t\t\tsum = a + b;\n\t\t\t\t\t\tSystem.out.println(sum);\n\n\n\n\n\t\t\t\t\t}\n\t\t\n\n\n\n\n\n\n\t\t}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}", "score": 1.0}
{"id": "SHARE_1_2549_11__1_2828_4", "golden_code": "/**\n * Created with IntelliJ IDEA.\n * User: ali\n * Date: 7/20/12\n * Time: 3:45 PM\n * To change this template use File | Settings | File Templates.\n */\nimport java.util.*;\nimport static java.lang.Math.*;\nimport static java.lang.System.*;\npublic class Main\n{\n\tpublic static void main(String [] args)\n\t{\n\t\tScanner scanner = new Scanner(System.in);\n\t\twhile(true)\n\t\t{\n\t\t\tint a = scanner.nextInt();\n\t\t\tint b = scanner.nextInt();\n\t\t\tif(a==0 && b==0)\n\t\t\t\tbreak;\n\t\t\tString binary_first = Integer.toBinaryString(a);\n\t\t\tString binary_second = Integer.toBinaryString(b);\n\t\t\twhile(binary_first.length()!=8)\n\t\t\t\tbinary_first = \"0\"+binary_first;\n\t\t\twhile(binary_second.length()!=8)\n\t\t\t\tbinary_second = \"0\"+binary_second;\n\t\t\tint res[] = new int[8];\n\t\t\tfor(int i=0;i<8;i++)\n\t\t\t\tres[i] = binary_first.charAt(i)-'0'+binary_second.charAt(i)-'0';\n\t\t\twhile(true)\n\t\t\t{\n\t\t\t\tboolean check = true;\n\t\t\t\tfor(int i=0;i<8;i++)\n\t\t\t\t\tif(res[i]==2)\n\t\t\t\t\t\tcheck = false;\n\t\t\t\tif(check)\n\t\t\t\t\tbreak;\n\t\t\t\tint rev[] = new int[8];\n\t\t\t\tequal(rev,res);\n\t\t\t\tfor(int i=0;i<8;i++)\n\t\t\t\t\tif(res[i]==2)\n\t\t\t\t\t{\n\t\t\t\t\t\trev[i] = 0;\n\t\t\t\t\t\tif(i!=0)\n\t\t\t\t\t\t\trev[i-1]++;\n\t\t\t\t\t\tif(i!=7)\n\t\t\t\t\t\t\trev[i+1]++;\n\t\t\t\t\t}\n\t\t\t\tequal(res,rev);\n\t\t\t}\n\t\t\tout.println(base(res));\n\t\t}\n\t}\n\tpublic static void equal(int first[],int second[])\n\t{\n\t\tfor(int i=0;i<8;i++)\n\t\t\tfirst[i] = second[i];\n\t}\n\tpublic static int base(int arr[])\n\t{\n\t\tint pow = 1;\n\t\tint res = 0;\n\t\tfor(int i=7;i>=0;i--)\n\t\t{\n\t\t\tres+=pow*arr[i];\n\t\t\tpow*=2;\n\t\t}\n\t\treturn res;\n\t}\n}", "generated_code": "\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint t = in.nextInt();\n\t\tfor (int i = 0; i < t; i++) {\n\t\t\tint n = in.nextInt();\n\t\t\tint m = in.nextInt();\n\t\t\tint k = in.nextInt();\n\t\t\tArrayList<Integer> wL = new ArrayList<Integer>();\n\t\t\tArrayList<Integer> rN = new ArrayList<Integer>();\n\t\t\tfor (int j = 1; j <= n; j++) {\n\t\t\t\twL.add(j);\n\t\t\t}\n\t\t\twhile (m <= n) {\n\t\t\t\trN.add(m);\n\t\t\t\tm += k;\n\t\t\t}\n\t\t\twL.removeAll(rN);\n\t\t\tint[] w = new int[wL.size()];\n\t\t\tfor (int j = 0; j < w.length; j++) {\n\t\t\t\tw[j] = wL.get(j);\n\t\t\t}\n\n\t\t\tSystem.out.println(knapSack(w, n));\n\t\t}\n\t}\n\n\tstatic long knapSack(int[] weights, int W) {\n\n\t\tlong[][] DP = new long[weights.length + 1][W + 1];\n\n\t\tDP[0][0] = 1L;\n\t\tfor (int i = 0; i <= W; i++) {\n\t\t\tfor (int j = 1; j <= weights.length; j++) {\n\t\t\t\tif (weights[j - 1] <= i) {\n\t\t\t\t\tint lI = j - 1;\n\t\t\t\t\twhile (lI >= 0) {\n\t\t\t\t\t\tDP[j][i] += DP[j][i - weights[lI--]];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tDP[j][i] = DP[j - 1][i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn DP[weights.length][W];\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2822_53__1_2822_71", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint t = in.nextInt();\n\t\t\tSystem.out.print((t * (t + 1)) / 2+\" \");\n\t\t\tSystem.out.print(t * t+\" \");\n\t\t\tSystem.out.print(t * (t + 1));\n\t\t\tSystem.out.println();\n\t\t}\n\t\t\n\t}\n}\n", "generated_code": "\nimport java.util.Scanner;\n//ShareCode\npublic class Main{\n    \n    public static void main(String args[]){\n        Scanner cin=new Scanner(System.in);\n        int t=cin.nextInt();\n        for(int i=0;i<t;i++){\n            int num=cin.nextInt();\n            int s1=(num*(num+1))/2;\n            int s2=num*num;\n            int s3=s2+num;\n            System.out.println(\"\"+s1+\" \"+s2+\" \"+s3);\n        }\n    }//main Method\n}//Class Main", "score": 1.0}
{"id": "SHARE_1_1001_466__1_1001_67", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tint a,b;\n\t\tScanner cin=new Scanner(System.in);\n\t\twhile(cin.hasNext()){\n\t\t\ta=cin.nextInt();\n\t\t\tb=cin.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t\t\n\t}\n\n}", "score": 1.0}
{"id": "SHARE_1_2051_10__1_1018_19", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    static long[] nums = {0, 0, 1, 1};\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        while (true) {\n            nums = new long[]{0, 0, 1, 1};\n            int n = s.nextInt();\n            int k = s.nextInt();\n            if (n == 0) {\n                break;\n            }\n            System.out.println(c(n, k));\n        }\n    }\n\n    static long gcd(long a, long b) {\n        if (a % b == 0) {\n            return b;\n        }\n        return gcd(b, a % b);\n    }\n\n    static long c(int n, int k) {\n        if (k > n / 2) {\n            k = n - k;\n        }\n        for (int i = k; i > 0; i--) {\n            nums[0] = n - k + i;\n            nums[1] = i;\n            DivByGCD(0, 1);\n            DivByGCD(0, 3);\n            DivByGCD(1, 2);\n            nums[2] *= nums[0];\n            nums[3] *= nums[1];\n        }\n        return nums[2] / nums[3];\n    }\n\n    static void DivByGCD(int a, int b) {\n        long gcd = gcd(nums[a], nums[b]);\n        nums[a] /= gcd;\n        nums[b] /= gcd;\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main\n{\n\t public static void main(String[] args)\n\t {\n\t\t Scanner scan = new Scanner(System.in);\n\t\t \n\t\t int number;\n\t\t int MA;\n\t\t int MB;\n\t\t boolean abc=true;\n\t\t \n\t\t while(scan.hasNextInt())\n\t\t {\n\t\t\t number=scan.nextInt();\n\t\t\t \n\t\t\t if(number==0)\n\t\t\t\t break;\n\t\t\t \n\t\t\t if(!abc) System.out.println();\n\t\t\t abc = false ;\n\t\t\t \n\t\t\t int[] A = new int[number];\n\t\t\t int[] B = new int[number];\n\t\t\t MA=0;\n\t\t\t MB=0;\n\t\t\t \n\t\t\t for(int i=0; i<number; i++)\n\t\t\t\t A[i]= scan.nextInt();\n\t\t\t \n\t\t\t for(int i=0; i<number; i++)\n\t\t\t\t B[i]= scan.nextInt();\n\t\t\t\n\t\t\t for(int i=0; i<number; i++)\n\t\t\t {\n\t\t\t\t if(Math.abs(A[i]-B[i])>1)\n\t\t\t\t {\n\t\t\t\t\t if(A[i]>B[i])\n\t\t\t\t\t\t MA+=A[i];\n\t\t\t\t\t \n\t\t\t\t\t else\n\t\t\t\t\t\t MB+=B[i];\n\t\t\t\t \n\t\t\t\t } \n\t\t\t\t \n\t\t\t\t if(Math.abs(A[i]-B[i])==1)\n\t\t\t\t {\n\t\t\t\t\t if( A[i]==1 && B[i]==2 )\n\t\t\t\t\t {\n\t\t\t\t\t\t MA+=6;\n\t\t\t\t\t }\n\t\t\t\t\t \n\t\t\t\t\t else if( A[i]==2 && B[i]==1 )\n\t\t\t\t\t {\n\t\t\t\t\t\t MB+=6;\n\t\t\t\t\t }\n\t\t\t\t\t \n\t\t\t\t\t else\n\t\t\t\t\t {\n\t\t\t\t\t\t if(A[i]<B[i])\n\t\t\t\t\t\t\t MA+=A[i]+B[i];\n\t\t\t\t\t\t \n\t\t\t\t\t\t else\n\t\t\t\t\t\t\t MB+=A[i]+B[i];\n\t\t\t\t\t}\n\t\t\t\t }\n\t\t\t\t \n\t\t\t }\n\t\t\t\t\n\t\t\t System.out.println(\"A has \" + MA + \" points. B has \" + MB + \" points.\");\n\t\t }\n\t }\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_265__1_1001_404", "golden_code": "import java.util.Scanner;\n\npublic class Main \n{\n    \n    public static void main(String[] args)\n    {\n        Scanner input=new Scanner(System.in);\n        while(input.hasNextInt())\n        {\n            int i=input.nextInt();\n            int j=input.nextInt();\n            System.out.println(i+j);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\n\nclass Main {\n\n\tpublic static void main(String[] args) {\n\t\tint a,b;\n\t\t@SuppressWarnings(\"resource\")\n\t\tScanner s = new Scanner (System.in); \n\t\twhile(s.hasNext()){\n\t\t\ta=s.nextInt();\n\t\t\tb=s.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_6_1009_10__1_1001_335", "golden_code": "import java.io.File;\nimport java.io.IOException;\nimport java.util.LinkedList;\nimport java.util.Scanner;\nimport java.util.Stack;\n\nclass Node{\n    int x,z;//z is num of wall....x is her coordinate\n    int SizeOfComponents;\n    int NumberOfComponents;\n    boolean flag;\n    Stack<Integer>neighbour;\n    public Node(int contain,int coor){\n        SizeOfComponents=0;\n        x=coor;\n        z=contain;\n        flag=false;\n        neighbour=new Stack<Integer>();\n    }\n    public void AddNeigh(int l,int j){\n        if((l&(1<<3))==0)neighbour.push(x+j);\n        if((l&(1<<2))==0)neighbour.push(x+1);\n        if((l&(1<<1))==0)neighbour.push(x-j);\n        if((l&(1<<0))==0)neighbour.push(x-1);\n    }\n\n}\npublic class Main {\n    public static Stack<Integer> CreatComp(int rootx,int j,Node[]m){\n        LinkedList<Node>list=new LinkedList<Node>();\n        Node k=new Node(m[rootx].z,rootx);\n        k.flag=true;\n        k.AddNeigh(m[rootx].z, j);\n        list.addFirst(k);\n        Stack<Integer>NumOfComp=new Stack<Integer>();\n        NumOfComp.push(rootx);\n        while(!list.isEmpty()){\n            Node n=list.getLast();list.removeLast();\n            for(int i=0 ; i<n.neighbour.size(); i++){\n                Node t=m[n.neighbour.elementAt(i)];\n                if(t.flag==true)continue;\n                else {\n                    t.flag=true;\n                    if(n.neighbour.elementAt(i)!=rootx)\n                        NumOfComp.push(n.neighbour.elementAt(i));\n                    t.AddNeigh(t.z,j);\n                    list.addFirst(t);\n                }\n            }\n        }\n        return NumOfComp;\n\n    }\n    public static void main(String[]args)throws IOException{\n        Scanner read=new Scanner(System.in);\n        int i,j;\n        j=read.nextInt();\n        i=read.nextInt();\n        Node[]table=new Node[i*j];\n        for(int k=0 ; k< i ; k++){\n            for(int p=0; p<j ;p++){\n                if(read.hasNextInt()){\n                    int t=read.nextInt();\n                    table[k*j+p]=new Node(t,k*j+p);\n                }\n                else\n                    break;\n            }\n        }\n        int max=0;\n        int sum=0;\n        Stack<Stack<Integer>> ListOfComponent=new Stack<Stack<Integer>>();\n        for(int k=0 ; k<i*j ; k++)\n            if(table[k].flag==false){\n                sum++;\n                Stack<Integer> l=CreatComp(k,j,table);\n                for(int w=0 ;w<l.size(); w++){\n                    table[l.get(w)].SizeOfComponents=l.size();\n                    table[l.get(w)].NumberOfComponents=ListOfComponent.size();\n                }\n                ListOfComponent.push(l);\n                if(l.size()>max)max=l.size();\n              //  System.out.println(l);\n            }\n        int maximum=-1;//initial the max size of components\n        int wallx=-1,wally=-1;\n        char State='N';\n        Boolean flag=false;\n        int FromWest=j,FromSouth=i;\n        //for(int k=0 ; k<i*j ;k++)\n        //    System.out.print(table[k].SizeOfComponents+\" \");\n        for(int p=0 ; p<j ; p++){\n            for(int k=i-1;k>=0 ; k--){\n                if(p!=j-1)\n                    if ((((table[k*j+p].z)&(1<<2))!=0) && table[k*j+p].SizeOfComponents+table[k*j+p+1].SizeOfComponents>=maximum && table[k*j+p].NumberOfComponents!=table[k*j+p+1].NumberOfComponents){\n                        int hamW=p+1,hamS=i-k-1;\n                        if(table[k*j+p].SizeOfComponents+table[k*j+p+1].SizeOfComponents>maximum){\n                        maximum=table[k*j+p].SizeOfComponents+table[k*j+p+1].SizeOfComponents;\n                        wallx=k;\n                        wally=p;\n                        State='E';\n                        flag=true;\n                        FromSouth=hamS;\n                        FromWest=hamW;\n                        }\n                        //break;\n                    }\n                if(k!=0)\n                    if((((table[k*j+p].z)&(1<<1))!=0) && table[k*j+p].SizeOfComponents+table[(k-1)*j+p].SizeOfComponents>=maximum && table[k*j+p].NumberOfComponents!=table[(k-1)*j+p].NumberOfComponents ){\n                        int hamS=i-k, hamW=p;\n                        if(table[k*j+p].SizeOfComponents+table[(k-1)*j+p].SizeOfComponents>maximum || (hamW==FromWest && hamS==FromSouth)||(hamW<FromWest && hamS>FromSouth)){\n                            maximum=table[k*j+p].SizeOfComponents+table[(k-1)*j+p].SizeOfComponents;\n                            wallx=k;\n                            wally=p;\n                            State='N';\n                            flag=true;\n                            FromSouth=hamS;\n                            FromWest=hamW;\n                        }\n                     //   System.out.println(\"khar\");\n                        //break;\n\n                    }\n            }\n            //  if(flag==true)break;\n\n        }\n        System.out.println(sum);\n        System.out.println(max);\n        if(maximum==-1)\n        System.out.println(i*j);\n        else System.out.println(maximum);\n        if(maximum>-1)\n        System.out.println((wallx+1)+\" \"+(wally+1)+\" \"+ State);\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n    \n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {            \n            System.out.println(in.nextInt()+in.nextInt());\n        }\n    }\n    \n}\n", "score": 0.0}
{"id": "SHARE_1_2499_54__1_2499_32", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        while(true){\n            int a=input.nextInt(),w=input.nextInt(),s=input.nextInt();\n            if(a==0&&w==0&&s==0){\n                break;\n            }\n            boolean bm=false,bf=false,bd=false;\n            if(a<=30&&w>=70&&s>=500){\n                bm=true;\n            }\n            if(a<=26&&w>=60&&s>=200){\n                bf=true;\n            }\n            if(a<=36&&w>=80&&s>=300){\n                bd=true;\n            }\n            String str=\"\";\n            if(bm){\n                str+=\"Mid-field \";\n            }\n            if(bf){\n                str+=\"Forward \";\n            }\n            if(bd){\n                str+=\"Defense \";\n            }\n            str=str.trim();\n            if(str.length()==0){\n                System.out.println(\"No positions\");\n                continue;\n            }\n            System.out.println(str);\n        }\n    }\n}\n", "generated_code": "//K.Razavi is here\nimport java.awt.geom.*;\nimport java.math.*;\nimport java.util.*;\npublic class Main\n{\n    static boolean ok ;\n    public static void main(String[] args)\n    {\n        Scanner scan = new Scanner(System.in);\n        while(scan.hasNext())\n        {\n            int a = scan.nextInt() , b = scan.nextInt() , c= scan.nextInt();\n            if(a == 0 && b==0 && c ==0)\n                break;\n            boolean ok = false;\n            if(a <= 30 && b >= 70 && c >= 500)\n            {\n                System.out.print(\"Mid-field\");\n                ok = true;\n            }\n            if(a <= 26 && b >= 60 && c >= 200)\n            {\n                if(ok)\n                    System.out.print(\" \");\n                System.out.print(\"Forward\");\n                ok = true;\n            }\n            if(a <= 36 && b >= 80 && c >= 300)\n            {\n                if(ok)\n                    System.out.print(\" \");\n                System.out.print(\"Defense\");\n                ok = true;\n            }\n            if(!ok)\n                System.out.print(\"No positions\");\n            System.out.println();\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2847_21__1_2847_59", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    static Scanner in = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int num = in.nextInt();\n        while (num != 0) {\n            int n = in.nextInt();\n            int min = 101, max = 0;\n            double total=0, sum = n;\n            while (n != 0) {\n                int temp = in.nextInt();\n                if(temp < min){\n                    min = temp;\n                }\n                if(temp > max){\n                    max = temp;\n                }\n                total += temp;\n                n--;\n            }\n            double ab = (min + max) / 2.0;\n            double t = total / (double)sum;\n            double x = t - ab;\n            if(Math.abs(x) < 1){\n                System.out.println(\"Yes\");\n            }else{\n                System.out.println(\"No\");\n            }\n            num--;\n        }\n\n    }\n}\n", "generated_code": "\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        while (t-- > 0) {\n            int n = in.nextInt();\n            int[] a = new int[n];\n            double avg = 0;\n            int max = Integer.MIN_VALUE, min = Integer.MAX_VALUE;\n            for (int i = 0; i < n; i++) {\n                avg += a[i] = in.nextInt();\n                min = Math.min(min, a[i]);\n                max = Math.max(max, a[i]);\n            }\n            avg /= n;\n            double avg1 = ((1d * min) + (1d * max)) / 2;\n            System.out.println(Math.abs(avg - avg1) < 1 ? \"Yes\" : \"No\");\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_339__1_1001_102", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile (in.hasNext()) {\n\t\t\tint a = in.nextInt();\n\t\t\tint b = in.nextInt();\n\t\t\tSystem.out.println(a + b);\n\t\t}\n\t}\n}\n", "generated_code": "//In The Name of Allah\n\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in_kb = new Scanner(System.in);\n\t\twhile(in_kb.hasNextLine()) {\n\t\t\tSystem.out.print(in_kb.nextInt() + in_kb.nextInt() + \"\\n\");\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_2577_19__1_101078_5", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    static Scanner in = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        String h = \"1ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        while (true) {\n            String p = in.next();\n            if(p.equals(\"0\"))break;\n            String q = in.next();\n            String n = \"\";\n            int a;\n            for (int i = 0; i < q.length(); i++) {\n                a = h.indexOf(p.charAt(i % p.length())) + q.charAt(i);\n                if (a > 90) {\n                    a = 65 + a - 91;\n                }\n                n += (char) (a);\n            }\n            System.out.println(n);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner input =new Scanner (System.in);\n\t\tint times=input.nextInt();\n\t\twhile(times--!=0)\n\t\t{\n\t\t\tint time=input.nextInt();\n\t\t\tint[] vals=new int[time];\n\t\t\tfor(int i=0;i<time;i++)\n\t\t\t{\n\t\t\tvals[i]=input.nextInt();\t\n\t\t\t}\n\t\t\t\n\t\t\tif(time<3)\n\t\t\t{\n\t\t\t\tint v=0;\n\t\t\t\tSystem.out.println(v);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint free=time/3;\n\t\t\tfor(int i=0;i<time-1;i++)\n\t\t\tfor(int j=i;j>=0;j--)\n\t\t\t\tif(vals[j]<vals[j+1])\n\t\t\t\t{\n\t\t\t\t\tint temp=vals[j];\n\t\t\t\t\tvals[j]=vals[j+1];\n\t\t\t\t\tvals[j+1]=temp;\n\t\t\t\t}\n\t\t\tint result1=0;\n\t\t\tfor(int i=0;i<free;i++)\n\t\t\t\tresult1+=vals[time-1-i];\n\t\t\tint result2=0;\n\t\t\tfor(int i=2;i<time;i+=3)\n\t\t\t\tif(time>=3)\n\t\t\t\t\tresult2+=vals[i];\n\t\t\tif(result1>result2)\n\t\t\t\tSystem.out.println(result1);\n\t\t\telse \n\t\t\t\tSystem.out.println(result2);\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1104_18__1_106020_45", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        int T=input.nextInt();\n        input.nextLine();\n        for(int i=0;i<T;i++){\n            String s=input.nextLine();\n           \n              int l=s.length();\n        char []ch=s.toCharArray();\n       \n        char []c=new char[l];\n        for(int j=0;j<l;j++){\n            c[j]=ch[l-j-1];\n        }\n         for(int k=0;k<l;k++){\n            System.out.print(c[k]);\n        }\n            System.out.println(\"\");\n               \n            \n        }  \n    }   \n  \n}", "generated_code": "\nimport java.math.BigInteger;\nimport java.util.Scanner;\n\n\npublic class Main{\n   static Scanner in=new Scanner(System.in);\n    public static void main(String[] args) {\n        int t[]=new int[302];\n        int sum=0,p,q;\n        for(int i=0;i<302;i++){\n            \n            sum=sum+i;\n            t[i]=sum;\n        }\n        BigInteger big[]=new BigInteger[302];\n        big[0]=new BigInteger(\"0\");\n        big[1]=new BigInteger(\"3\");\n         BigInteger big1;\n        for(int i=2;i<301;i++){\n            big1=new BigInteger(\"1\");\n           big1= big1.multiply(new BigInteger(String.valueOf(i))).multiply(new BigInteger(String.valueOf(t[i+1])));\n            big[i]=big[i-1].add(big1);\n        }\n       p=in.nextInt();\n       for(int i=0;i<p;i++){\n        q=in.nextInt();\n           System.out.println(i+1+\" \"+q+\" \"+big[q]);\n       }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_476__1_1870_17", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main (String[] args) {\n        Scanner input = new Scanner (System.in);\n        while (input.hasNextLine ()) {\n                String[] s = input.nextLine ().split (\" \");\n            int a = Integer.parseInt (s [0]);\n            int b = Integer.parseInt (s [1]);\n            System.out.println (a + b);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\npublic static void main(String[] args) {\n\tScanner in = new Scanner(System.in);\n    int num=in.nextInt();\n    int[][] zombie=new int[num][2];\n    for(int i=0;i<num;i++)\n    \tfor(int j=0;j<2;j++)\n    \tzombie[i][j]=in.nextInt();\n    for(int i=0;i<num;i++)\n    \tif(zombie[i][0]>=zombie[i][1])\n    \t\tSystem.out.println(\"MMM BRAINS\");\n    \telse\n    \t\tSystem.out.println(\"NO BRAINS\");\n}\n}\n", "score": 0.0}
{"id": "SHARE_1_1022_17__1_101065_4", "golden_code": "import java.util.Scanner;\nimport java.util.Stack;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\n\t\tint n = scanner.nextInt();\n\t\tfor (int i = 0;i<n;i++){\n\t\t\tStack<String> back = new Stack<String>();\n\t\t\tStack<String> forward = new Stack<String>();\n\t\t\tString show =\"http://www.acm.org/\";\n\t\t\tString command = scanner.next();\n\t\t\twhile (!command.equals(\"QUIT\")){\n\t\t\t\tif (command.equals(\"VISIT\")){\n\t\t\t\t\tString url = scanner.next();\n\t\t\t\t\tback.push(show);\n\t\t\t\t\tshow = url;\n\t\t\t\t\tforward.clear();\n\t\t\t\t\tSystem.out.println(show);\n\t\t\t\t}else if(command.equals(\"BACK\")) {\n\t\t\t\t\tif (!back.empty()){\n\t\t\t\t\t\tforward.push(show);\n\t\t\t\t\t\tshow = back.pop();\n\t\t\t\t\t\tSystem.out.println(show);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tSystem.out.println(\"Ignored\");\n\t\t\t\t\t}\n\t\t\t\t}else if (command.equals(\"FORWARD\")){\n\t\t\t\t\tif(!forward.empty()){\n\t\t\t\t\t\tback.push(show);\n\t\t\t\t\t\tshow = forward.pop();\n\t\t\t\t\t\tSystem.out.println(show);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tSystem.out.println(\"Ignored\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcommand = scanner.next();\n\t\t\t}\n\t\t\tif (i!=n-1)\n\t\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n", "generated_code": "import java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.text.DecimalFormat;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Hashtable;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.PriorityQueue;\nimport java.util.Queue;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.io.BufferedReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.io.InputStream;\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tScanner scan = new Scanner(System.in);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n}\n\nclass TaskC {\n\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\n\t\tint t = in.nextInt(), c = 1;\n\t\tfinal int offset = 128;\n\t\tfinal int maxlen = 256;\n\t\twhile (t-- > 0) {\n\t\t\tString str = in.next();\n\t\t\tArrayList<ArrayList<Integer>> al = new ArrayList<ArrayList<Integer>>();\n\t\t\tfor (int i = 0; i < maxlen; i++) {\n\t\t\t\tal.add(null);\n\t\t\t}\n\t\t\tfor (int i = 0; i < al.size(); i++) {\n\t\t\t\tal.set(i, new ArrayList<Integer>());\n\t\t\t}\n\t\t\tint x = 0, y = 0;\n\t\t\tfor (int i = 0; i < str.length(); i++) {\n\t\t\t\tswitch (str.charAt(i)) {\n\t\t\t\tcase 'U':\n\t\t\t\t\ty++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'D':\n\t\t\t\t\ty--;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'L':\n\t\t\t\t\tx--;\n\t\t\t\t\tal.get(x + offset).add(new Integer(y));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'R':\n\t\t\t\t\tal.get(x + offset).add(new Integer(y));\n\t\t\t\t\tx++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint res = 0;\n\t\t\tfor (int i = 0; i < al.size(); i++) {\n\t\t\t\tCollections.sort(al.get(i));\n\t\t\t\tfor (int j = 0; j < al.get(i).size() - 1; j += 2) {\n\t\t\t\t\tres += al.get(i).get(j + 1) - al.get(i).get(j);\n\t\t\t\t}\n\t\t\t}\n\t\t\tout.println(\"case \" + c++ + \": \" + res);\n\t\t}\n\t}\n}\n\nclass InputReader {\n\tBufferedReader br;\n\tStringTokenizer st;\n\n\tpublic InputReader(InputStream in) {\n\t\tbr = new BufferedReader(new InputStreamReader(in));\n\t\tst = null;\n\t}\n\n\tpublic String next() {\n\t\twhile (st == null || !st.hasMoreTokens()) {\n\t\t\ttry {\n\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn st.nextToken();\n\t}\n\n\tpublic int nextInt() {\n\t\treturn Integer.parseInt(next());\n\t}\n\n\tpublic long nextLong() {\n\t\treturn Long.parseLong(next());\n\t}\n\n\tpublic float nextFloat() {\n\t\treturn Float.parseFloat(next());\n\t}\n\n\tpublic double nextDouble() {\n\t\treturn Double.parseDouble(next());\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2554_45__1_2554_65", "golden_code": "import java.util.*;\n\npublic class Main {\n    static class Node {\n        Node parent;\n        String name , condition = \"\";\n        int level = 0, relation;\n\n        Node(String s, Node p, int r) {\n            this.name = s;\n            this.parent = p;\n            this.relation = r;\n            if (this.parent != null)\n                this.level = (this.parent).level + 1;\n        }\n    }\n\n    static class N_list {\n        public static ArrayList<Node> node_list = new ArrayList<>();\n        public static ArrayList<String> answer = new ArrayList<>();\n    }\n\n    public static void input1_parse(String s) {\n        String[] command, mandatory, or, xor;\n        s = s.trim().replaceAll(\"\\\\s+\", \"\");\n        Node root = null;\n        if (!(s.contains(\"=\"))) {\n            root = new Node(s, null, -1);\n            root.level = 0;\n            N_list.node_list.add(root);\n        }\n        else {\n            command = s.split(\"=\", 2);\n            String children = command[1];\n            if (N_list.node_list.size() == 0) {\n                root = new Node(command[0], null, -1);\n                root.level = 0;\n                N_list.node_list.add(root);\n            }\n            else {\n                boolean is_new = true;\n                for (int i = 0; i < N_list.node_list.size(); i++)\n                    if (N_list.node_list.get(i).name.equals(command[0])) {\n                        is_new = false;\n                        root = N_list.node_list.get(i);\n                    }\n                if (is_new) {\n                    root = new Node(command[0], null, -1);\n                    root.level = 0;\n                    N_list.node_list.add(root);\n                }\n            }\n\n            if (children.contains(\"+\")) {\n                mandatory = children.split(\"\\\\+\", 0);\n                for (int i = 0; i < mandatory.length; i++) {\n                    boolean is_new = true;\n                    for (int j = 0; j < N_list.node_list.size(); j++) {\n                        Node c = N_list.node_list.get(j);\n                        if (mandatory[i].equals(c.name)) {\n                            is_new = false;\n                            c.parent = root;\n                            c.relation = 0;\n                            c.level = root.level + 1;\n                            break;\n                        }\n                        if (mandatory[i].equals('?' + c.name)) {\n                            is_new = false;\n                            c.parent = root;\n                            c.relation = 3;\n                            c.level = root.level + 1;\n                            break;\n                        }\n                    }\n\n                    if (!is_new) {\n                        if (mandatory[i].charAt(0) == '?')\n                            change_level(mandatory[i].substring(1));\n                        else\n                            change_level(mandatory[i]);\n                    }\n                    if (is_new) {\n                        for (int j = 0; j < N_list.node_list.size(); j++)\n                            if ((N_list.node_list.get(j).name).equals(command[0])) {\n                                Node child = new Node(mandatory[i], N_list.node_list.get(j), 0);\n                                if (mandatory[i].charAt(0) == '?') {\n                                    child.relation = 3;\n                                    child.name = mandatory[i].substring(1);\n                                }\n                                N_list.node_list.add(child);\n                                break;\n                            }\n                    }\n                }\n            }\n            else if (children.contains(\"|\")) {\n                or = children.split(\"\\\\|\", 0);\n                for (int i = 0; i < or.length; i++) {\n                    boolean is_new = true;\n                    for (int j = 0; j < N_list.node_list.size(); j++) {\n                        Node c = N_list.node_list.get(j);\n                        if (or[i].equals(c.name)) {\n                            is_new = false;\n                            c.parent = root;\n                            c.relation = 1;\n                            c.level = root.level + 1;\n                            break;\n                        }\n                    }\n                    if (!is_new)\n                        change_level(or[i]);\n\n                    if (is_new) {\n                        for (int j = 0; j < N_list.node_list.size(); j++)\n                            if ((N_list.node_list.get(j).name).equals(command[0])) {\n                                Node child = new Node(or[i], N_list.node_list.get(j), 1);\n                                N_list.node_list.add(child);\n                                break;\n                            }\n                    }\n                }\n            }\n            else if (children.contains(\"^\")) {\n                xor = children.split(\"\\\\^\", 0);\n                for (int i = 0; i < xor.length; i++) {\n                    boolean is_new = true;\n                    for (int j = 0; j < N_list.node_list.size(); j++) {\n                        Node c = N_list.node_list.get(j);\n                        if (xor[i].equals(c.name)) {\n                            is_new = false;\n                            c.parent = root;\n                            c.relation = 2;\n                            c.level = root.level + 1;\n                            break;\n                        }\n                    }\n                    if (!is_new)\n                        change_level(xor[i]);\n\n                    if (is_new) {\n                        for (int j = 0; j < N_list.node_list.size(); j++)\n                            if ((N_list.node_list.get(j).name).equals(command[0])) {\n                                Node child = new Node(xor[i], N_list.node_list.get(j), 2);\n                                N_list.node_list.add(child);\n                                break;\n                            }\n                    }\n                }\n            }\n            else {\n                boolean is_new = true;\n                for (int i = 0; i < N_list.node_list.size(); i++) {\n                    Node c = N_list.node_list.get(i);\n                    if (c.name.equals(children)) {\n                        is_new = false;\n                        c.parent = root;\n                        c.relation = 0;\n                        c.level = root.level + 1;\n                        break;\n                    }\n                    if (('?' + c.name).equals(children)) {\n                        is_new = false;\n                        c.parent = root;\n                        c.relation = 3;\n                        c.level = root.level + 1;\n                        break;\n                    }\n                }\n                if (!is_new) {\n                    if (children.charAt(0) == '?')\n                        change_level(children.substring(1));\n                    else\n                        change_level(children);\n                }\n                if (is_new) {\n                    for (int i = 0; i < N_list.node_list.size(); i++) {\n                        if ((N_list.node_list.get(i).name).equals(command[0])) {\n                            Node child = new Node(children, N_list.node_list.get(i), 0);\n                            if (children.charAt(0) == '?') {\n                                child.relation = 3;\n                                child.name = children.substring(1);\n                            }\n                            N_list.node_list.add(child);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    public static void input2_parse(String s) {\n        String[] test;\n        s = s.trim().replaceAll(\"\\\\s+\", \"\");\n        s = s.substring(1, s.length() - 1);\n        test = s.split(\",\", 0);\n        N_list.answer.add(check(test));\n    }\n\n    public static void change_level(String p) {\n        for (int i = 0; i < N_list.node_list.size(); i++) {\n            Node c = N_list.node_list.get(i);\n            if (c.parent != null && p.equals(c.parent.name)) {\n                c.level = c.parent.level + 1;\n                change_level(c.name);\n            }\n        }\n    }\n\n    public static String check(String[] arr) {\n        int start_level = 0;\n        for (int i = 0; i < N_list.node_list.size(); i++)\n            start_level = Math.max(start_level, N_list.node_list.get(i).level);\n\n        for (int i = start_level; i >= 0; i--) {\n            for (int j = 0; j < N_list.node_list.size(); j++) {\n                Node c_node = N_list.node_list.get(j);\n                int r = c_node.relation;\n                boolean found_same = false;\n                if (c_node.level == i) {\n                    for (int k = 0; k < arr.length; k++) {\n                        if (arr[k].equals(c_node.name)) {\n                            found_same = true;\n                            if (r == -1) {\n                                if (c_node.condition.equals(\"unused\"))\n                                    return \"Invalid\";\n                                else\n                                    c_node.condition = \"used\";\n                            }\n                            if (r == 0 || r == 3 || r == 1) {\n                                if (c_node.condition.equals(\"unused\") || c_node.parent.condition.equals(\"unused\"))\n                                    return \"Invalid\";\n                                else {\n                                    c_node.condition = \"used\";\n                                    (c_node.parent).condition = \"used\";\n                                }\n                                break;\n                            }\n                            if (r == 2) {\n                                if (c_node.condition.equals(\"unused\") || c_node.parent.condition.equals(\"unused\"))\n                                    return \"Invalid\";\n                                else {\n                                    (c_node.parent).condition = \"used\";\n                                    for (int l = 1; l < N_list.node_list.size(); l++)\n                                        if (N_list.node_list.get(l).parent.equals(c_node.parent) && N_list.node_list.get(l).relation == 2)\n                                            N_list.node_list.get(l).condition = \"unused\";\n                                    c_node.condition = \"used\";\n                                }\n                                break;\n                            }\n                            break;\n                        }\n                    }\n\n                    if (!found_same) {\n                        if (c_node.condition.equals(\"used\") || c_node.parent == null)\n                            return \"Invalid\";\n                        else if (c_node.parent.condition.equals(\"used\") && r == 0)\n                            return \"Invalid\";\n                        else {\n                            if (r == -1)\n                                return \"Invalid\";\n                            if (r == 0) {\n                                c_node.condition = \"unused\";\n                                (c_node.parent).condition = \"unused\";\n                            }\n                            else\n                                c_node.condition = \"unused\";\n                        }\n                    }\n                }\n            }\n        }\n\n        for (int i = 0; i < N_list.node_list.size(); i++) {\n            Node c_node = N_list.node_list.get(i);\n            int or_child = 0, xor_child = 0;\n            boolean has_or_child = false, has_xor_child = false;\n            if (c_node.condition.equals(\"used\")) {\n                for (int l = 1; l < N_list.node_list.size(); l++) {\n                    Node child = N_list.node_list.get(l);\n                    if (child.parent.equals(c_node)) {\n                        if (child.relation == 2) {\n                            if (child.condition.equals(\"used\"))\n                                xor_child++;\n                            has_xor_child = true;\n                        }\n                        if (child.relation == 1) {\n                            if (child.condition.equals(\"used\"))\n                                or_child++;\n                            has_or_child = true;\n                        }\n                    }\n                }\n            }\n            if ((has_or_child && or_child == 0) || (has_xor_child && xor_child != 1))\n                return \"Invalid\";\n        }\n        return \"Valid\";\n    }\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        String command = \"\";\n        boolean input1_done = false;\n\n        while (!(command.equals(\"###\"))) {\n            command = input.nextLine();\n            if (!(command.equals(\"#\")) && !input1_done)\n                input1_parse(command);\n            if (command.equals(\"#\"))\n                input1_done = true;\n\n            if (!(command.equals(\"##\")) && !(command.equals(\"#\")) && input1_done) {\n                input2_parse(command);\n                for (int j = 0; j < N_list.node_list.size(); j++)\n                    N_list.node_list.get(j).condition = \"\";\n            }\n            if (command.equals(\"##\")) {\n                N_list.answer.add(\"+++\");\n                N_list.node_list.clear();\n                input1_done = false;\n            }\n        }\n        for (int i = 0; i < N_list.answer.size(); i++)\n            System.out.println(N_list.answer.get(i));\n    }\n}", "generated_code": "import java.util.*;\n\n/**\n * @author Amin Razavi\n */\npublic class Main {\n    ///////////////////////////node////////////////////////////\n    public static class Node {\n        private String info;\n        private String status;\n        private Node parent;\n        private Node Left_child;\n        private Node Right_brother;\n\n        String getInfo() {\n            return info;\n        }\n\n        String getStatus() {\n            return status;\n        }\n\n        Node getParent() {\n            return parent;\n        }\n\n        Node getLeft_child() {\n            return Left_child;\n        }\n\n        Node getRight_brother() {\n            return Right_brother;\n        }\n\n        //new\n        Node() {\n            this.info = \"\";\n            this.status = \"\";\n            this.parent = null;\n            this.Left_child = null;\n            this.Right_brother = null;\n        }\n\n        void setInfo(String info) {\n            this.info = info;\n        }\n\n        void setStatus(String status) {\n            this.status = status;\n        }\n\n        void setParent(Node parent) {\n            this.parent = parent;\n        }\n\n        void setLeft_child(Node left_child) {\n            this.Left_child = left_child;\n        }\n\n        void setRight_brother(Node right_brother) {\n            this.Right_brother = right_brother;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            Node node = (Node) o;\n            if (node.getInfo().equals(info))\n                return true;\n            return false;\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(info);\n        }\n\n        @Override\n        public String toString() {\n            return \"Node{\" +\n                    \"info='\" + info + '\\'' +\n                    '}';\n        }\n    }\n\n\n    ///////////////////////node//////////////////////////////////\n    \n    //////////////////////tree///////////////////////////////////\n    static class Tree {\n        private Node root;\n        private ArrayList<Node> nodes = new ArrayList<>();\n        private ArrayList<Node> mandatory_nodes = new ArrayList<>();\n\n        Tree(Node root) {\n            this.root = root;\n            nodes.add(root);\n        }\n\n        void setRoot(Node root) {\n            this.root = root;\n        }\n\n        void setNodes(ArrayList<Node> nodes) {\n            this.nodes = nodes;\n        }\n\n        Node getRoot() {\n            return root;\n        }\n\n\n        void add_node(Node temp_node) {\n//            System.out.println(temp_node.getInfo().trim());\n            if (temp_node.getStatus().equals(\"Mandatory\"))\n                mandatory_nodes.add(temp_node);\n\n            if (!nodes.contains(temp_node)) {\n                nodes.add(temp_node);\n            }\n        }\n\n        void add_node(Node parent, Node temp_node) {\n//            System.out.println(parent.getInfo().trim() + \" \" + temp_node.getInfo().trim());\n            if (search_parent(temp_node.getInfo().trim()) != null)\n                temp_node = search_parent(temp_node.getInfo().trim());\n\n            if (temp_node.getStatus().equals(\"Mandatory\"))\n                mandatory_nodes.add(temp_node);\n\n\n            temp_node.setParent(parent);\n            if (parent.getLeft_child() == null) {\n                parent.setLeft_child(temp_node);\n            } else {\n                boolean check_add_right_brother = true;\n                Node node = parent.getLeft_child();\n                if (node.getInfo().trim().equals(temp_node.getInfo().trim()))\n                    check_add_right_brother = false;\n                while (node.getRight_brother() != null) {\n                    node = node.getRight_brother();\n                    if (node.getInfo().trim().equals(temp_node.getInfo().trim()))\n                        check_add_right_brother = false;\n                }\n                if (check_add_right_brother) {\n                    node.setRight_brother(temp_node);\n\n                }\n            }\n            if (!nodes.contains(temp_node))\n                nodes.add(temp_node);\n        }\n\n        boolean search(Node node) {\n            for (Node n : nodes)\n                if (n.getInfo().trim().equals(node.getInfo().trim()))\n                    return true;\n            return false;\n        }\n\n        Node search2(Node node) {\n            for (Node node_tree : nodes) {\n                if (node.getInfo().trim().equals(node_tree.getInfo().trim())) {\n                    return node_tree;\n                }\n            }\n            return null;\n        }\n\n        public Node search_parent(String info) {\n            Node temp = null;\n            for (Node node : nodes)\n                if (node.getInfo().trim().equals(info.trim())) {\n                    temp = node;\n                }\n            return temp;\n        }\n\n        public void find_father() {\n            for (Node node : nodes) {\n                if (node.getParent() == null) {\n                    for (Node temp_parent : nodes) {\n                        if (temp_parent.getLeft_child() != null)\n                            if (temp_parent.getLeft_child().getInfo().trim().equals(node.getInfo().trim())) {\n                                node.setParent(temp_parent);\n                            }\n                        if (temp_parent.getRight_brother() != null)\n                            if (temp_parent.getRight_brother().getInfo().trim().equals(node.getInfo().trim())) {\n                                node.setParent(temp_parent.getParent());\n                            }\n                    }\n                }\n            }\n        }\n\n        public void delete_extra() {\n            ArrayList<Node> deleting = new ArrayList<>();\n            for (Node node : nodes) {\n                if (node.getParent() != null)\n                    if (node.getInfo().trim().equals(node.getParent().getInfo().trim()))\n                        deleting.add(node);\n\n            }\n            for (Node node : deleting) {\n                nodes.remove(node);\n\n            }\n        }\n\n        @Override\n        public String toString() {\n            String str = \" \";\n            for (int i = 0; i < nodes.size(); i++) {\n                str += \"node is:\" + nodes.get(i).getInfo() + \"  \" + \"father : \" + nodes.get(i).getParent();\n            }\n            return str;\n        }\n\n    }\n\n    ///////////////////////////tree////////////////////////////////\n    private static boolean check(Tree tree, HashSet<Node> set) {\n        for (Node node : set) {\n            if (node.getStatus().equals(\"Mandatory\"))\n                if (!node.equals(tree.search2(node))) {\n                    return false;\n                }\n        }\n        for (Node node : set) {\n            if (!tree.search(node)) {\n                return false;\n            }\n        }\n        for (Node node : set) {\n            Node n = tree.search2(node);\n            Node q = new Node();\n            q.setInfo(n.getParent().getInfo().trim());\n            if (!set.contains(q) && !q.getInfo().equals(\"Fake\")) {\n                return false;\n            }\n        }\n        for (Node n1 : set) {\n            Node node = tree.search2(n1);\n            if (node.getLeft_child() != null) {\n                int counter = 0;\n                int mcounter = 0;\n                Node backup = node.getLeft_child();\n                Node child = node.getLeft_child();\n                while (child != null) {\n                    if (set.contains(child))\n                        counter++;\n                    if (child.getStatus().equals(\"Mandatory\")) {\n                        if (!set.contains(child)) {\n                            return false;\n                        }\n                        mcounter++;\n                    }\n                    child = child.getRight_brother();\n                }\n                child = backup;\n                if (child.getStatus().equals(\"Alternative\") && counter != 1) {\n                    return false;\n                }\n                if (child.getStatus().equals(\"Or\") && counter == 0) {\n                    return false;\n                }\n                if ((child.getStatus().equals(\"Optional\") || child.getStatus().equals(\"Mandatory\")) && counter < mcounter) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        List<String> result = new LinkedList<>();\n        String str = scan.nextLine().replace(\" \", \"\");\n\n        while (!str.equals(\"###\")) {\n            Node fake_father = new Node();\n            fake_father.setInfo(\"Fake\");\n            Tree tree = new Tree(fake_father);\n            boolean check_point = true;\n            while (!str.equals(\"#\")) {\n                if (str.contains(\"=\") && !str.contains(\"+\") && !str.contains(\"^\") && !str.contains(\"|\")) {\n                    Node node = new Node();\n\n                    String[] temp_line = str.split(\"[=]\");\n                    if (tree.search_parent(temp_line[1].trim()) != null)\n                        node = tree.search_parent(temp_line[1].trim());\n                    Node parent = tree.search_parent(temp_line[0].trim());\n                    if (str.contains(\"?\")) {\n                        node.setInfo(temp_line[1].replace(\"?\", \"\").trim());\n                        node.setStatus(\"Optional\");\n                    } else {\n                        node.setStatus(\"Mandatory\");\n                        node.setInfo(temp_line[1].trim());\n                    }\n                    if (parent == null && check_point == false) {\n                        parent = new Node();\n                        parent.setInfo(temp_line[0].trim());\n                        node.setInfo(temp_line[1].trim());\n                        if (str.contains(\"?\")) {\n                            node.setInfo(temp_line[1].replace(\"?\", \"\").trim());\n                            node.setStatus(\"Optional\");\n                        } else\n                            node.setStatus(\"Mandatory\");\n                        parent.setLeft_child(node);\n                        tree.add_node(parent);\n                        tree.add_node(parent, node);\n\n                    } else if (check_point == true) {\n                        parent = new Node();\n                        parent.setStatus(\"Mandatory\");\n                        parent.setInfo(temp_line[0].trim());\n                        tree.add_node(tree.getRoot(), parent);\n                        tree.add_node(parent, node);\n                    } else {\n                        tree.add_node(parent, node);\n                    }\n\n\n                }\n                if (!str.contains(\"=\")) {\n                    Node node = new Node();\n                    node.setInfo(str.trim());\n\n                    tree.add_node(tree.getRoot(), node);\n                }\n\n                if (str.contains(\"+\")) {\n                    String[] temp_line = str.split(\"[=,+]\");\n                    Node parent = tree.search_parent(temp_line[0].trim());\n                    if (parent == null && check_point == false) {\n\n                        parent = new Node();\n                        parent.setInfo(temp_line[0].trim());\n                        tree.add_node(parent);\n                    }\n\n                    if (check_point == true) {\n                        parent = new Node();\n                        parent.setStatus(\"Mandatory\");\n                        parent.setInfo(temp_line[0].trim());\n\n                        tree.add_node(tree.getRoot(), parent);\n                    }\n                    for (int i = 1; i < temp_line.length; i++) {\n                        Node node = new Node();\n                        if (tree.search_parent(temp_line[i].trim()) != null)\n                            node = tree.search_parent(temp_line[i].trim());\n                        node.setInfo(temp_line[i].trim());\n                        if (!temp_line[i].contains(\"?\"))\n                            node.setStatus(\"Mandatory\");\n                        else {\n\n                            node.setStatus(\"Optional\");\n                            node.setInfo(node.getInfo().replace(\"?\", \"\").trim());\n                        }\n\n                        tree.add_node(parent, node);\n\n                    }\n\n                }\n                if (str.contains(\"|\")) {\n                    String[] temp_line = str.split(\"[=,|]\");\n                    Node parent = tree.search_parent(temp_line[0].trim());\n                    if (parent == null && check_point == false) {\n                        parent = new Node();\n                        parent.setInfo(temp_line[0].trim());\n                        tree.add_node(parent);\n                    }\n                    if (check_point == true) {\n                        parent = new Node();\n                        parent.setStatus(\"Mandatory\");\n                        parent.setInfo(temp_line[0].trim());\n                        tree.add_node(tree.getRoot(), parent);\n                    }\n                    for (int i = 1; i < temp_line.length; i++) {\n                        Node node = new Node();\n                        if (tree.search_parent(temp_line[i].trim()) != null)\n                            node = tree.search_parent(temp_line[i].trim());\n                        node.setInfo(temp_line[i].trim());\n                        node.setStatus(\"Or\");\n                        tree.add_node(parent, node);\n                    }\n                }\n                if (str.contains(\"^\")) {\n                    String[] temp_line = str.split(\"[=,^]\");\n                    Node parent = tree.search_parent(temp_line[0].trim());\n                    if (parent == null && check_point == false) {\n                        parent = new Node();\n                        parent.setInfo(temp_line[0].trim());\n                        tree.add_node(parent);\n                    }\n                    if (check_point == true) {\n                        parent = new Node();\n                        parent.setStatus(\"Mandatory\");\n                        parent.setInfo(temp_line[0].trim());\n\n                        tree.add_node(tree.getRoot(), parent);\n                    }\n                    for (int i = 1; i < temp_line.length; i++) {\n                        Node node = new Node();\n                        if (tree.search_parent(temp_line[i].trim()) != null)\n                            node = tree.search_parent(temp_line[i].trim());\n                        node.setInfo(temp_line[i].trim());\n                        node.setStatus(\"Alternative\");\n                        tree.add_node(parent, node);\n                    }\n                }\n                check_point = false;\n                str = scan.nextLine().replace(\" \", \"\");\n            }\n            tree.find_father();\n            tree.delete_extra();\n      ///////////////////////////////////////////////////////////////////////////////////////////////\n            ArrayList<HashSet<Node>> sets = new ArrayList<>();\n            String input = scan.nextLine().replace(\" \", \"\");\n            while (!input.equals(\"##\")) {\n                input = input.replaceAll(\"\\\\{\", \"\");\n                input = input.replaceAll(\"\\\\}\", \"\");\n                String[] temp_line1 = input.split(\",\");\n                HashSet<Node> temp_set = new HashSet<>();\n                for (int i = 0; i < temp_line1.length; i++) {\n                    Node node = new Node();\n                    node.setInfo(temp_line1[i].trim());\n                    temp_set.add(node);\n                }\n                sets.add(temp_set);\n                input = scan.nextLine().replace(\" \", \"\");\n\n            }\n            for (HashSet<Node> final_set : sets) {\n                if (check(tree, final_set))\n                    result.add(\"Valid\");\n                else\n                    result.add(\"Invalid\");\n\n            }\n            result.add(\"+++\");\n            str = scan.nextLine().replace(\" \", \"\");\n        }\n        for (String s : result) {\n            System.out.println(s);\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2554_66__1_1034_24", "golden_code": "import java.util.ArrayList;\nimport java.util.Scanner;\nimport java.util.StringTokenizer;\n\nclass Object {\n\t\n\tString nameOfObject = \"\";\n\tboolean apply = false ;\n\tObject father ;\n\tArrayList<Object> ChildAddress = new ArrayList<>();\n\t// type 1 = OR, type 2 = XOR, ,type 3 = Mandatory or Optional\n\tint typeOfObject = 0;\n\t\n\tObject(String nameOfCh){\n\t\tnameOfObject = nameOfCh;\n\t}\n\t\n\tvoid changeType(int type) {\n\t\ttypeOfObject = type; \n\t}\n\t\n\tvoid setApply(boolean a) {\n\t\t//False = Mandatory , True = Optional\n\t\tapply = a;\n\t}\n\t\n\tvoid addChild(Object Child) {\n\t\tChild.father = this;\n\t\tChildAddress.add(Child);\n\t}\n\n}\n\n\npublic class Main {\n\t\n\tpublic static ArrayList<Object> objectsList = new ArrayList<>();\n\t\t\n\tpublic static String findName(String inpoot) {\n\t\tString nameOfRoot = \"\";\n\t\tfor(int i = 0 ; i < inpoot.length() ; i++) {\n\t\t\tif(inpoot.charAt(i) == '=') {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnameOfRoot +=inpoot.charAt(i);\n\t\t}\n\t\treturn nameOfRoot;\n\t}\n\t\n\tpublic static void buildChild(String inpoot, Object father) {\n\t\t\n\t\tString limiter = \"\" ;\n\t\t\n\t\tif(inpoot.contains(\"+\")) {\n\t\t\tlimiter = \"+\" ;\n\t\t\tfather.changeType(3);\n\t\t} else if (inpoot.contains(\"|\")) {\n\t\t\tlimiter = \"|\" ;\n\t\t\tfather.changeType(1);\n\t\t} else if (inpoot.contains(\"^\")) {\n\t\t\tlimiter = \"^\" ;\n\t\t\tfather.changeType(2);\n\t\t} else if(!inpoot.contains(\"+\") && !inpoot.contains(\"|\") && !inpoot.contains(\"^\")) {\n\t\t\tfather.changeType(3);\n\t\t\tlimiter = \"+\" ;\n\t\t}\n\t\t\n\t\tStringTokenizer stringTokenizer = new StringTokenizer(inpoot, limiter , false);\n\t\twhile(stringTokenizer.hasMoreTokens()) {\n\t\t\t\n\t\t\tboolean setApply = false;\n\t\t\tString token = stringTokenizer.nextToken();\n\t\t\t\n\t\t\tif(token.startsWith(\"?\")) {\n\t\t\t\tsetApply = true;\n\t\t\t\ttoken = token.substring(1 , token.length());\n\t\t\t}\n\t\t\t\n\t\t\tint index = 0 ;\n\t\t\tboolean find = false ;\n\t\t\tfor(int i = 0 ; i < objectsList.size() ; i++) {\n\t\t\t\tif(objectsList.get(i).nameOfObject.equals(token)) {\n\t\t\t\t\tfind = true ;\n\t\t\t\t\tindex = i ;\n\t\t\t\t\tbreak ;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif(find) {\n\t\t\t\tfather.addChild(objectsList.get(index));\n\t\t\t\tobjectsList.get(index).setApply(setApply);\n\t\t\t} else {\n\t\t\t\tObject A = new Object(token); \n\t\t\t\tobjectsList.add(A);\n\t\t\t\tfather.addChild(A);\n\t\t\t\tA.setApply(setApply);\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\t\n\t\n\tpublic static boolean checkTestCase(ArrayList<String> testCase) {\n\t\tString coffeeMachine = \"\" ;\n\t\tfor(int i = 0 ; i < objectsList.size() ; i++) {\n\t\t\tif(objectsList.get(i).father == null) {\n\t\t\t\tcoffeeMachine = objectsList.get(i).nameOfObject;\n\t\t\t\tbreak ;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(testCase.contains(coffeeMachine)) {\n\t\t\t\n\t\t\tfor(int i = 0 ; i < testCase.size() ; i++) {\n\t\t\t\t\n\t\t\t\tboolean find = false;\n\t\t\t\t\n\t\t\t\tfor(int j = 0 ; j < objectsList.size() ; j++) {\n\t\t\t\t\tif(testCase.get(i).equals(objectsList.get(j).nameOfObject)) {\t\n\t\t\t\t\t\t\n\t\t\t\t\t\tfind = true ;\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Check father\n\t\t\t\t\t\tif(!testCase.get(i).equals(coffeeMachine)) {\n\t\t\t\t\t\t\tif(!testCase.contains(objectsList.get(j).father.nameOfObject)) {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t//Check children\n\t\t\t\t\t\tif(objectsList.get(j).typeOfObject == 1) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tint counter = 0 ;\n\t\t\t\t\t\t\tfor(int k = 0 ; k < objectsList.get(j).ChildAddress.size() ; k++) {\n\t\t\t\t\t\t\t\tif(testCase.contains(objectsList.get(j).ChildAddress.get(k).nameOfObject)) {\n\t\t\t\t\t\t\t\t\tcounter++ ;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(counter == 0)\n\t\t\t\t\t\t\t\treturn false ;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t} else if(objectsList.get(j).typeOfObject == 2) {\n\t\t\t\t\t\t\tint counter = 0 ;\n\t\t\t\t\t\t\tfor(int k = 0 ; k < objectsList.get(j).ChildAddress.size() ; k++) {\n\t\t\t\t\t\t\t\tif(testCase.contains(objectsList.get(j).ChildAddress.get(k).nameOfObject)) {\n\t\t\t\t\t\t\t\t\tcounter++ ;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(counter != 1)\n\t\t\t\t\t\t\t\treturn false ;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t} else if(objectsList.get(j).typeOfObject == 3) {\n\t\t\t\t\t\t\tfor(int k = 0 ; k < objectsList.get(j).ChildAddress.size() ; k++) {\n\t\t\t\t\t\t\t\tif(!objectsList.get(j).ChildAddress.get(k).apply) { // age mandatory bood\n\t\t\t\t\t\t\t\t\tif(!testCase.contains(objectsList.get(j).ChildAddress.get(k).nameOfObject)) {\n\t\t\t\t\t\t\t\t\t\treturn false ;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(!find) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\treturn false ;\n\t\t}\n\t\t\n\t\treturn true ;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner scan = new Scanner(System.in);\n\t\t\n\t\tString inpoot = \"\" ;\n\t\tString nameOfObject = \"\" ;\n\t\tArrayList<String> results = new ArrayList<>();\n\n\t\tinpoot = scan.nextLine();\n\t\tinpoot = inpoot.replaceAll(\"\\\\s\",\"\");\n\t\t\n\t\twhile(!inpoot.equals(\"###\")) {\n\t\t\t//AI\n\t\t\twhile(!inpoot.equals(\"#\")) {\n\t\t\t\tnameOfObject = findName(inpoot);\n\t\t\t\t\n\t\t\t\tboolean find = false ;\n\t\t\t\tint index = 0 ;\n\t\t\t\tfor(int i = 0 ; i < objectsList.size(); i++) {\n\t\t\t\t\tif(objectsList.get(i).nameOfObject.equals(nameOfObject)) {\n\t\t\t\t\t\tfind = true ;\n\t\t\t\t\t\tindex = i ;\n\t\t\t\t\t\tbreak ;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif(inpoot.contains(\"=\")) {\n\t\t\t\t\tString right = inpoot.split(\"=\")[1];\n\t\t\t\t\t\n\t\t\t\t\tif(find) {\n\t\t\t\t\t\tbuildChild(right, objectsList.get(index));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tObject newObject = new Object(nameOfObject);\n\t\t\t\t\t\tobjectsList.add(newObject);\n\t\t\t\t\t\tbuildChild(right, newObject);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tObject newObject = new Object(nameOfObject);\n\t\t\t\t\tobjectsList.add(newObject);\n\t\t\t\t}\n\n\t\t\t\tinpoot = scan.nextLine();\n\t\t\t\tinpoot = inpoot.replaceAll(\"\\\\s\",\"\");\n\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t//ArrayList<Object> Gooni = objectsList;\n\t\t\t\n\t\t\t//TestCases\n\t\t\tinpoot = scan.nextLine();\n\t\t\tinpoot = inpoot.replaceAll(\"\\\\s\",\"\");\n\t\t\twhile(!inpoot.equals(\"##\")) {\n\t\t\t\t\n\t\t\t\t//TestCases\n\t\t\t\tArrayList<String> testCase = new ArrayList<>();\n\t\t\t\t\n\t\t\t\t//Separate ({})\n\t\t\t\tinpoot = inpoot.substring(1,inpoot.length()-1);\n\t\t\t\t\n\t\t\t\t//Separate (,)\n\t\t\t\tStringTokenizer stringTokenizer = new StringTokenizer(inpoot, \",\", false);\n\t\t\t\twhile(stringTokenizer.hasMoreTokens()) {\n\t\t\t\t\t\ttestCase.add(stringTokenizer.nextToken());\n\t\t\t\t}\n\n\t\t\t\t//CheckValidity\n\t\t\t\tboolean result = false;\n\t\t\t\tresult = checkTestCase(testCase);\n\t\t\t\t\n\t\t\t\t//result = checkTestCase(coffeeMachine, testCase);\n\t\t\t\tif(result) {\n\t\t\t\t\tresults.add(\"Valid\");\n\t\t\t\t} else {\n\t\t\t\t\tresults.add(\"Invalid\");\n\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\tinpoot = scan.nextLine();\n\t\t\t\tinpoot = inpoot.replaceAll(\"\\\\s\",\"\");\n\t\t\t}\n\t\t\t\n\t\t\tobjectsList = new ArrayList<>();\n\t\t\t\n\t\t\tresults.add(\"+++\");\n\t\t\t\n\t\t\tinpoot = scan.nextLine();\n\t\t\tinpoot = inpoot.replaceAll(\"\\\\s\",\"\");\n\t\t\t\n\t\t}\t\n\t\t\n\t\tfor(int i = 0 ; i < results.size() ; i++) {\n\t\t\tSystem.out.println(results.get(i));\n\t\t}\n\n\t\tscan.close();\n\t\treturn;\n\t}\t\n}", "generated_code": "import java.util.Scanner;\n\n//shareCode - Counterfeit Dollar - #1030\nclass Main\n{\n\n\tpublic static void main(String args[])\n\t{\n\t\tScanner input = new Scanner(System.in);\n\t\tint cases = input.nextInt();\n\n\t\tfor(int c=0;c<cases;c++) {\n\t\t\tint dnaLen = input.nextInt();\n\t\t\tint dnaNums = input.nextInt();\n\t\t\tinput.nextLine();\n\t\t\tString[] dna= new String[dnaNums];\n\t\t\tint[] sortedness = new int[dnaNums];\n\t\t\t\n\t\t\tfor(int i=0;i<dnaNums;i++)\n\t\t\t\t\tdna[i]=input.nextLine();\n\n\t\t\tfor(int i=0;i<dnaNums;i++) {\n\t\t\t\tString d=dna[i];\n\t\t\t\tint sortCount=0;\n\t\t\t\tfor(int j=0;j<d.length()-1;j++)\n\t\t\t\t\tfor(int k=j+1;k<d.length();k++)\n\t\t\t\t\t\tif(d.charAt(j) > d.charAt(k))\n\t\t\t\t\t\t\tsortCount++;\n\t\t\t\tsortedness[i]=sortCount;\n\t\t\t}//sortcount\n\t\t\tfor(int i=0;i<dnaNums;i++)\n\t\t\t\tfor(int j=i+1;j<dnaNums;j++)\n\t\t\t\t\tif(sortedness[j] < sortedness[i]) {\n\t\t\t\t\t\tString temp=dna[i];\n\t\t\t\t\t\tdna[i] = dna[j];\n\t\t\t\t\t\tdna[j]=temp;\n\t\t\t\t\t\tint t=sortedness[i];\n\t\t\t\t\t\tsortedness[i]=sortedness[j];\n\t\t\t\t\t\tsortedness[j] = t;\n\t\t\t\t\t}//sorting\n\t\t\t\n\t\t\tfor(int i=0;i<dnaNums;i++)\n\t\t\t\tSystem.out.println(dna[i]);\n\t\t\tif(c!=cases-1)\n\t\t\t\tSystem.out.println();\n\t\t\t}// for cases\n\n\n\t}// main\n}", "score": 0.0}
{"id": "SHARE_1_1959_18__1_1943_6", "golden_code": "import java.util.*;\n   \n   class Main\n{   \n    public static void main(String[] orgs)\n  { \n    Scanner Scan = new Scanner (System.in);\n    while(Scan.hasNextInt())\n    {\n    int n,counter1=0,counter2=0,min=0;\n    n=Scan.nextInt();\n    int[] array = new int[n];   \n    for(int i=0;i<n;i++)\n       array[i]=Scan.nextInt();\n    for(int i=0; i<n; i++)\n       {\n       if((i%2)==0)\n          {if(array[i]==1)\n             counter1++;}\n       else\n           if(array[i]==0)\n              counter1++;\n       } \n    for(int i=0; i<n; i++)\n       {\n        if((i%2)==0)\n          {if(array[i]==0)\n              counter2++;}\n        else \n            if(array[i]==1)\n               counter2++;\n       }  \n    if(counter1<counter2)\n       min=counter1;\n    else\n        min=counter2;\n   System.out.println(min);\n  }\n }\n}   \n\n", "generated_code": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] p){\n\t\tScanner u = new Scanner(System.in);\n\t\tint n= u.nextInt();\n\t\tu.nextLine();\n\t\tfor(int i =0;i<n;i++){\n\t\t\tint t= u.nextInt();\n\t\t\tu.nextLine();\n\t\t\tString a= u.nextLine();\n\t\t\tString b= u.nextLine();\n\t\t\tint j=0;\n\t\t\tfor(;j<a.length()&&j < b.length();j++){\n\t\t\t\tif(a.charAt(j)!= b.charAt(j))\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tint x = 0;\n\t\t\tif(j == a.length())\n\t\t\t\tif(b.length() == a.length())\n\t\t\t\t\tx = 0;\n\t\t\t\telse\n\t\t\t\t\tx = b.length()-a.length();\n\t\t\telse\n\t\t\t\tx = b.length()-2*j+a.length();\n\t\t\tSystem.out.println(x*t);\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2311_3__1_2847_59", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[]args){\n        Scanner input = new Scanner(System.in);\n        int x=0;\n        while(input.hasNext()){\n            if(x>0){\n                input.nextLine();\n            }\n            x++;\n            int n=input.nextInt();\n            int []a=new int[n];\n            int []count =new int[n];\n            int m=(n/2)+n%2;\n\n            for(int i=0;i<n;i++){\n                a[i]=input.nextInt();\n                for(int j=0;j<=i;j++){\n                    if(a[j]==a[i]){\n                        count[j]++;\n                        break;\n                    }\n                }\n            }\n            for(int i=0;i<n;i++){\n                if(count[i]>=m){\n                    System.out.println(a[i]);\n                    break;\n                }\n            }\n        }\n    }\n}\n", "generated_code": "\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        while (t-- > 0) {\n            int n = in.nextInt();\n            int[] a = new int[n];\n            double avg = 0;\n            int max = Integer.MIN_VALUE, min = Integer.MAX_VALUE;\n            for (int i = 0; i < n; i++) {\n                avg += a[i] = in.nextInt();\n                min = Math.min(min, a[i]);\n                max = Math.max(max, a[i]);\n            }\n            avg /= n;\n            double avg1 = ((1d * min) + (1d * max)) / 2;\n            System.out.println(Math.abs(avg - avg1) < 1 ? \"Yes\" : \"No\");\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1266_22__1_1921_6", "golden_code": "import java.util.*;\nimport java.math.*;\n\n\nclass Main{\n\tpublic static void main(String[] args){\n\t\tVector<Integer> inputs=new Vector<Integer>();\n\t\tread_input(inputs);\n\t\tgive_output(inputs);\n\t}\n\tprivate static void read_input(Vector<Integer> inputs){\n\t\tScanner reader=new Scanner(System.in);\n\t\tint num=reader.nextInt();\n\t\tfor(int i=0;i<num;i++){\n\t\t\tinputs.add(reader.nextInt());\n\t\t}\n\t}\n\tprivate static void give_output(Vector<Integer> inputs){\n\t\tfor(int i=0;i<inputs.size();i++){\n\t\t\tfor(int j=0;inputs.get(i)>=Math.pow(2,j);j++){\n\t\t\t\tif((((int)inputs.get(i))&((int)Math.pow(2,j)))!=0)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.print(j);\n\t\t\t\t\tif(inputs.get(i)>Math.pow(2,j+1))\n\t\t\t\t\t\tSystem.out.print(\" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}", "generated_code": "import java.io.PrintWriter;\nimport java.util.Scanner;\npublic class Main{\n    public static void main(String[] args) {\n        // TODO code applicatio() {}n logic here\n        Scanner cin=new Scanner(System.in);\n        PrintWriter cout=new PrintWriter(System.out);\n        int a=cin.nextInt();\n        for(int i=0;i<a;i++){\n            int n=cin.nextInt();\n            boolean b[]=new boolean[4098];\n            int max=Integer.MIN_VALUE;\n            for(int j=0;j<n;j++){\n                int x=cin.nextInt();\n                b[x]^=true;\n                int count=1;\n                if(b[x]){\n                    boolean left=true,right=true;\n                    for(int l=1;left||right;l++){\n                        if(right&&b[x+l])\n                            count++;\n                        else\n                            right=false;\n                        if(left&&b[x-l])\n                            count++;\n                        else\n                            left=false;\n                    }\n                }\n                if(count>max)\n                    max=count;\n            }\n            cout.println(max);\n        }\n        cout.flush();\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_101158_3__1_101158_19", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String args[]){\n        Scanner in=new Scanner(System.in);\n        while(true){\n            String s1=in.next();\n            if(s1.equals(\".\"))break;\n            String opr=in.next(),s2=in.next();\n            s1=s1.substring(1, s1.length()-1);\n            s2=s2.substring(1, s2.length()-1);\n            String str=\"\";\n            if(opr.equals(\"++\"))\n                for(int i=0;i<s2.length();i++){\n                    if(s2.charAt(i)==',')\n                    {\n                            if(s1.length()==0)s1+=str;\n                            else s1 += \",\" + str;\n                        str=\"\";\n                    }\n                    else\n                        str+=s2.charAt(i);\n                    if(i==s2.length()-1){\n                        if(s1.length()==0)s1+=str;\n                        else s1 += \",\" + str;\n                    }\n                }\n            if(opr.equals(\"--\"))\n                for(int i=0;i<s2.length();i++){\n                    if(s2.charAt(i)==',')\n                    {\n                        if(s1.indexOf(str)+str.length()<s1.length())\n                            s1=s1.replaceFirst(str+\",\", \"\");\n                        else s1 = s1.replaceFirst(\",\"+str, \"\");\n                        str=\"\";\n                    }\n                    else\n                        str+=s2.charAt(i);\n                    if(i==s2.length()-1){\n                        if(s1.indexOf(str)+str.length()<s1.length())\n                            s1=s1.replaceFirst(str+\",\", \"\");\n                        else{\n                            if(s1.indexOf(',')>=0)\n                            s1 = s1.replaceFirst(\",\"+str, \"\");\n                            else s1 = s1.replaceFirst(str, \"\");\n                        }\n                    }\n                    }\n            System.out.println(\"[\"+s1+\"]\");\n        }\n    }\n}\n", "generated_code": "\n\nimport java.util.Scanner;\n\n\npublic class Main {\n     static Scanner in = new Scanner(System.in);\n    public static void main(String[] args) {\n\n        while(true)\n        {\n            String left,right,mid;\n             left=in.next();\n            if(left.equals(\".\"))\n                break;\n\n            mid=in.next();\n            right=in.next();\n\n            String larr[]=left.split(\",\");\n            String rg[]=right.split(\",\");\n            rg[0]=rg[0].substring(1, rg[0].length());\n            larr[0]=larr[0].substring(1, larr[0].length());\n            rg[rg.length-1]=rg[rg.length-1].substring(0, rg[rg.length-1].length()-1);\n             larr[larr.length-1]=larr[larr.length-1].substring(0, larr[larr.length-1].length()-1);\n             int k=larr.length;\n             String a=\"\";\n            if(mid.equals(\"--\"))\n            {\n            for(int i=0;i<rg.length;i++)\n            {\n              for(int j=0;j<k;j++)\n              {\n                  if(rg[i].equals(larr[j]))\n                  {\n                      System.arraycopy(larr, j+1, larr, j, larr.length-j-1);\n                      k--;\n                      j--;\n                      break;\n                  }\n              }\n            }\n            }\n            else\n            {\n            for(int i=0;i<rg.length;i++)\n            {\n                if(!larr[0].equals(\"\") && !rg[0].equals(\"\")) {\n                    a+=\",\"+rg[i];\n                }\n                else\n                    a+=rg[i];\n            }\n            }\n            if(mid.equals(\"--\"))\n            {\n            System.out.print(\"[\");\n            for(int i=0;i<k;i++)\n            {\n                if(i==k-1)\n                  System.out.print(larr[i]);\n                else\n                    System.out.print(larr[i]+\",\");\n            }\n            System.out.println(\"]\");\n            }\n            else\n            {\n                String plus=\"\";\n                System.out.print(\"[\");\n            for(int i=0;i<k;i++)\n            {\n                if(i==k-1)\n                  System.out.print(larr[i]);\n                else\n                    System.out.print(larr[i]+\",\");\n            }\n                System.out.println(a+\"]\");\n            }\n        }\n    }\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_108__1_1001_498", "golden_code": "import java.util.*;\nclass Main\n{\n    public static void main(String[] args)\n    {\n        Scanner s = new Scanner (System.in);\n        while (s.hasNextInt())\n        \nSystem.out.println(s.nextInt()+s.nextInt());\n        \n    }\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner s= new Scanner(System.in);\n\t\twhile(s.hasNext()) {\n\t\t\tint a= s.nextInt();\n\t\t\tint b= s.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_87__1_1001_301", "golden_code": "import java.util.*;\n\npublic class Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\t\n\t\twhile(true)\n\t\t{\n\t\t\tint a = scan.nextInt();\n\t\t\tint b = scan.nextInt();\n\t\t\t\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\n    public static void main(String[] args) {\n\t    Scanner input = new Scanner(System.in);\n        do {\n            try {\n            System.out.print(input.nextInt() + input.nextInt() + \"\\n\");\n            }\n            catch (RuntimeException exmp)\n            {\n                System.exit(0);\n            }\n\n\n        }\n\n\n        while (true);\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_102__1_1001_219", "golden_code": "//In The Name of Allah\n\nimport java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in_kb = new Scanner(System.in);\n\t\twhile(in_kb.hasNextLine()) {\n\t\t\tSystem.out.print(in_kb.nextInt() + in_kb.nextInt() + \"\\n\");\n\t\t}\n\t}\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        int a, b;\n        Scanner in = new Scanner(System.in);\n       while( in.hasNext() ){\n           a = in.nextInt();\n           b = in.nextInt();\n           System.out.println(a+b);\n       }\n    }\n    \n}\n", "score": 1.0}
{"id": "SHARE_1_1119_4__1_1119_35", "golden_code": "\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        while(s.hasNext()){\n            int n = s.nextInt();\n            int m = s.nextInt();\n            Integer[] primes = find(n);\n            int mid = primes.length/2;\n            String res=\"\";\n            int start = mid-m+(primes.length%2) < 0 ? 0 : mid-m+(primes.length%2);\n            int end = mid+m > primes.length ? primes.length : mid+m;\n            for (int i = start; i < end; i++) {\n                res += primes[i]+ \" \";\n            }\n            System.out.println(n+\" \"+m+\": \"+res.trim());\n            System.out.println();\n        }\n    }\n    \n    static Integer[] find(int n){\n        ArrayList<Integer> list = new ArrayList();\n        for (int i = 1; i <= n; i++) {\n            int counter=0;\n            for (int j = 1; j <= i; j++) {\n                if(i % j == 0)\n                    counter++;\n            }\n            if(counter <= 2)\n                list.add(i);\n        }\n        return list.toArray(new Integer[0]);\n    }\n}\n", "generated_code": "\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()) {\n            int n = in.nextInt(), c = in.nextInt(), t = 0;\n            ArrayList<Integer> h = new ArrayList<Integer>();\n            for (int i = 1; i <= n; i++) {\n                if (p(i)) {\n                    h.add(i);\n                }\n            }\n            int x = c < n ? (h.size() % 2 == 0 ? c * 2 : (c * 2) - 1) : 0;\n            String r = \"\";\n            if (x > 0) {\n                while (h.size() > x) {\n                    h.remove(0);\n                    if (h.size() == x) {\n                        break;\n                    } else {\n                        h.remove(h.get(h.size() - 1));\n                    }\n                }\n                while (!h.isEmpty()) {\n                    r += h.remove(0) + \" \";\n                }\n            } else {\n                while (!h.isEmpty()) {\n                    r += h.remove(0) + \" \";\n                }\n            }\n            r = r.substring(0, r.length() - 1);\n            System.out.println(n + \" \" + c + \": \" + r + \"\\n\");\n        }\n    }\n\n    static boolean p(int x) {\n        if (x % 2 == 0 && x != 2) {\n            return false;\n        }\n        for (int i = 3; i * i <= x; i += 2) {\n            if (x % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "score": 1.0}
{"id": "SHARE_6_1005_3__6_1005_4", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\t\n\t\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\t\n\t\tScanner scanConsole = new Scanner(System.in);\n\t\t\n\t\twhile ( scanConsole.hasNext() ) {\n\t\t\t\n\t\t\tPerimeterCalculator ex = new PerimeterCalculator();\n\t\t\t\n\t\t\tint mouseRow = -1, mouseColumn = -1;\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tString temp = \"\";\n\t\t\t\n\t\t\tex.rows = scanConsole.nextInt();\n\t\t\tex.columns = scanConsole.nextInt();\n\t\t\t\n\t\t\tex.shape = new String[ex.rows][ex.columns];\n\t\t\tex.check = new int[ex.rows][ex.columns];\n\t\t\t\n\t\t\tmouseRow = scanConsole.nextInt();\n\t\t\tmouseColumn = scanConsole.nextInt();\n\t\t\t\n\t\t\tif ( ex.rows == 0 && ex.columns == 0 && mouseRow == 0 && mouseColumn == 0 ) break;\n\t\t\t\t \n\t\t\t\n\t\t\tscanConsole.nextLine();\n\t\t\t\n\t\t\tfor (int i = 0; i < ex.rows; i++) {\n\t\t\t\t\n\t\t\t\ttemp = scanConsole.nextLine();\n\t\t\t\t\n\t\t\t\tfor (int j = 0; j < ex.columns; j++) {\n\t\t\t\t\t\n\t\t\t\t\tex.shape[i][j] = temp.substring(j, j+1);\n\t\t\t\t\t\n\t\t\t\t\tif ( ex.shape[i][j].contains(\"X\") ) ex.check[i][j] = 0;\n\t\t\t\t\telse if ( ex.shape[i][j].contains(\".\") ) ex.check[i][j] = -1;\n\t\t\t\t}\t\t\t\n\t\t\t}\t\n\n\t\t// recusive function call\n\t\t\n\t\t\tex.calculate( mouseRow-1, mouseColumn-1 );\n\t\t\t\n\t\t\tSystem.out.println( ex.perimeter );\n\t\t\t\n\t\t\n\t\t}\n\t\t\n\t\tscanConsole.close();\n\t\t// method main\n\t}\t\n\t\n\t\n\t\n\t\n\t\n\t// class Main\n\t\n}\n\n\n\n\n\n\n\nclass PerimeterCalculator {\n\t\n\tpublic String[][] shape;\n\tpublic int[][] check;\n\t\n\tpublic int rows,columns;\n\t\n\tpublic int perimeter = 0;\n\t\n\t\n\tpublic void calculate( int i, int j ) {\n\t\t\n\t\tcheck[i][j] = 1;\n\t\t\n\t\t//up\n\t\tif ( ((i-1 > -1) && shape[i][j].contains(\"X\") && check[i-1][j] == -1) || !(i-1 > -1) ) perimeter++;\n\t\t\n\t\t//right\n\t\tif ( (( j+1 < columns ) && shape[i][j].contains(\"X\") && check[i][j+1] == -1) || !(j+1 < columns)  ) perimeter++;\n\t\t\n\t\t\n\t\t//left\n\t\tif ( (( j-1 > -1 ) && shape[i][j].contains(\"X\") && check[i][j-1] == -1) ||  !( j-1 > -1 ) ) perimeter++;\n\t\t\n\t\t//down\n\t\tif (  (( i+1 < rows ) && shape[i][j].contains(\"X\") && check[i+1][j] == -1) || !( i+1 < rows ) ) perimeter++;\n\t\t\n\t\t\t\n\t\t\n\t\t\n\t\tif ( i-1 > -1 ){\n\t\t\t// up\n\t\t\t\n\t\t\tif ( check[i-1][j] == 0 ) { check[i-1][j] = 1; calculate ( i-1, j ); }\n\t\t\t\n\t\t\telse if ( check[i-1][j] == 1 );\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tif ( j+1 < columns ) {\n\t\t\t//right\n\t\t\t\n\t\t\tif ( check[i][j+1] == 0 ){ check[i][j+1] = 1; calculate ( i, j+1 ); }\n\t\t\t\n\t\t\telse if ( check[i][j+1] == 1 );\t\n\t\t}\n\t\t\n\t\t\n\t\tif ( j-1 > -1 ) {\n\t\t\t//left\n\t\t\t\n\t\t\tif ( check[i][j-1] == 0 ){ check[i][j-1] = 1; calculate ( i, j-1 ); }\n\t\t\t\n\t\t\telse if ( check[i][j-1] == 1 );\t\t\n\t\t}\n\t\t\n\t\t\n\t\tif ( i+1 < rows ){\n\t\t\t//down\n\t\t\t\n\t\t\tif ( check[i+1][j] == 0 ){check[i+1][j] = 1; calculate ( i+1, j ); }\n\t\t\t\n\t\t\telse if ( check[i+1][j] == 1 );\t\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\tif ( i-1 > -1 && j+1 < columns  ) {\t\n\t\t\t//up-right\n\n\t\t\tif ( check[i-1][j+1] == 0 ){ check[i-1][j+1] = 1; calculate ( i-1, j+1 ); }\n\t\t\t\n\t\t\telse if ( check[i-1][j+1] == 1 );\t\n\t\t}\n\t\t\n\t\t\n\t\tif ( i-1 > -1 && j-1 > -1 ) {\t\n\t\t\t//up-left\n\t\t\t\n\t\t\tif ( check[i-1][j-1] == 0 ){ check[i-1][j-1] = 1; calculate ( i-1, j-1 ); }\n\t\t\t\n\t\t\telse if ( check[i-1][j-1] == 1 );\t\n\t\t}\n\t\t\n\t\t\n\t\tif ( i+1 < rows && j+1 < columns ){\t\n\t\t\t//down-right\n\n\t\t\tif ( check[i+1][j+1] == 0 ){ check[i+1][j+1] = 1; calculate ( i+1, j+1 ); }\n\t\t\t\n\t\t\telse if ( check[i+1][j+1] == 1 );\t\n\t\t}\n\t\t\n\t\t\n\t\tif ( i+1 < rows && j-1 > -1 ) {\n\t\t\t//down-left\n\t\t\n\t\t\tif ( check[i+1][j-1] == 0 ){ check[i+1][j-1] = 1; calculate ( i+1, j-1 ); }\n\t\t\t\n\t\t\telse if ( check[i+1][j-1] == 1 );\t\n\t\t}\n\t\t\n\t\t// calculate\n\t\t\n\t}\n\t\n\t\n\t// class perimeter\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "generated_code": "import java.util.*;\npublic class Main{\n    public static int prm(char[][] map, boolean[][] visited, int sizex, int sizey, int x, int y) {\n\n        int premiter = 0;\n        visited[x][y] = true;\n        if(x-1>=0) {\n            if(map[x-1][y] == '.') {\n                premiter++;\n            }\n            else if(map[x-1][y] == 'X') {\n                if(!visited[x-1][y]) {\n                    premiter += prm(map, visited, sizex, sizey, x-1, y);\n                }\n            }\n        }\n        else {\n            if(map[x][y] == 'X')\n                premiter++;\n        }\n        if(x+1<sizex) {\n            if(map[x+1][y] == '.') {\n                premiter++;\n            }\n            else if(map[x+1][y] == 'X') {\n                if(!visited[x+1][y]) {\n                    premiter += prm(map, visited,sizex, sizey,  x+1, y);\n                }\n            }\n        }\n        else {\n            if(map[x][y] == 'X')\n                premiter++;\n        }\n        if(y-1>=0) {\n            if(map[x][y-1] == '.') {\n                premiter++;\n            }\n            else if(map[x][y-1] == 'X') {\n                if(!visited[x][y-1]) {\n                    premiter += prm(map, visited, sizex, sizey, x, y-1);\n                }\n            }\n        }\n        else {\n            if(map[x][y] == 'X')\n                premiter++;\n        }\n        if(y+1<sizey) {\n            if(map[x][y+1] == '.') {\n                premiter++;\n            }\n            else if(map[x][y+1] == 'X') {\n                if(!visited[x][y+1]) {\n                    premiter += prm(map, visited, sizex, sizey, x, y+1);\n                }\n            }\n        }\n        else {\n            if(map[x][y] == 'X')\n                premiter++;\n        }\n        if((x+1<sizex)&&(y+1<sizey)) {\n            if(map[x+1][y+1] == 'X') {\n                if(!visited[x+1][y+1]) {\n                    premiter += prm(map, visited, sizex, sizey, x+1, y+1);\n                }\n            }\n        }\n        if((x-1>=0)&&(y+1<sizey)) {\n            if(map[x-1][y+1] == 'X') {\n                if(!visited[x-1][y+1]) {\n                    premiter += prm(map, visited, sizex, sizey, x-1, y+1);\n                }\n            }\n        }\n        if((x+1<sizex)&&(y-1>=0)) {\n            if(map[x+1][y-1] == 'X') {\n                if(!visited[x+1][y-1]) {\n                    premiter += prm(map, visited, sizex, sizey, x+1, y-1);\n                }\n            }\n        }\n        if((x-1>=0)&&(y-1>=0)) {\n            if(map[x-1][y-1] == 'X') {\n                if(!visited[x-1][y-1]) {\n                    premiter += prm(map, visited, sizex, sizey, x-1, y-1);\n                }\n            }\n        }\n        return premiter;\n    }\n\n    public static void main(String [] args){\n        Scanner input = new Scanner (System.in);\n        int x,y , cx,cy;\n        while (input.hasNext()) {\n            x = input.nextInt();\n            y = input.nextInt();\n            cx = input.nextInt();\n            cy = input.nextInt();\n            if(x == 0 && y == 0 && cx == 0 && cy ==0)\n                break;\n            char [][] map = new char [x][y];\n            for (int i = 0 ; i < x ; i++){\n                String s = input.next();\n                for (int j = 0 ; j < y ; j++)\n                    map[i][j] = s.charAt (j);\n            }\n            boolean[][] visited = new boolean[x][y];\n            for(int i=0; i<x; i++) {\n                for(int j=0; j<y; j++) {\n                    visited[i][j] = false;\n                }\n            }\n            int premeter = prm(map, visited, x, y, cx-1, cy-1);\n            System.out.println(premeter);\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1319_16__1_1230_3", "golden_code": "\nimport java.io.PrintWriter;\nimport java.util.Scanner;\nimport java.util.StringTokenizer;\npublic class Main {\n    public static void main(String args[]){\n        Scanner cin=new Scanner(System.in);\n        PrintWriter cout=new PrintWriter(System.out);\n        boolean b=false;\n        while(true){\n            StringTokenizer st=new StringTokenizer(cin.nextLine());\n            int cookie=Integer.parseInt(st.nextToken()),place1=0;\n            if(cookie==5280)\n                break;\n            if(b)\n                cout.println();\n            while(st.hasMoreTokens()){\n                int place=Integer.parseInt(st.nextToken());\n                if(place==cookie){\n                    cout.println(\"Moving from \"+place1+\" to \"+place+\": found it!\");\n                }\n                else if(Math.abs(place1 - cookie) > Math.abs(place - cookie))\n                {\n                    cout.println(\"Moving from \"+place1+\" to \"+place+\": warmer.\");\n                }\n                else if(Math.abs(place1-cookie)<Math.abs(place-cookie)){\n                    cout.println(\"Moving from \"+place1+\" to \"+place+\": colder.\");\n                }\n                else{\n                    cout.println(\"Moving from \"+place1+\" to \"+place+\": same.\");\n                }\n                place1=place;\n            }\n            b=true;\n        }\n        cout.flush();\n    }\n}\n", "generated_code": "import java.util.*;\nimport java.lang.String;\nimport java.lang.Integer;\nclass Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tint s,c;\n\t\tString n;\n\t\tchar b;\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile(scan.hasNext())\n\t\t{\n\t\t\ts = 0;\n\t\t\tn = scan.nextLine();\n\t\t\tif(n.equals(\"0\"))\n\t\t\t\tbreak;\n\t\t\twhile(s==0)\n\t\t\t{\n\t\t\t\twhile(n.length()!=0)\n\t\t\t\t{\n\t\t\t\t\tb = n.charAt(n.length()-1);\n\t\t\t\t\tc = Integer.parseInt(b+\"\");\n\t\t\t\t\ts = s + c;\n\t\t\t\t\tn = n.substring(0, n.length()-1);\n\t\t\t\t}\n\t\t\t\tn = s+\"\";\n\t\t\t\tif(s>=10)\n\t\t\t\t\ts = 0;\n\t\t\t\tif(s!=0)\n\t\t\t\t\tSystem.out.println(s);\n\t\t\t}\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1208_29__1_2027_8", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int test = input.nextInt();\n        int nstr;\n        String answer = \"\";\n        for (int i = 0; i < test; i++) {\n            nstr = input.nextInt();\n            input.nextLine();\n            for (int j = 0; j < nstr; j++) {\n                String[] str = input.nextLine().split(\" \");\n                answer = \"\";\n                for (int k = 0; k < str.length; k++) {\n                    answer += new StringBuffer(str[k]).reverse().toString() + \" \";\n                }\n                System.out.println(answer.substring(0, answer.length() - 1));\n            }\n            if (i != test - 1) {\n                System.out.println();\n            }\n        }\n    }\n}\n", "generated_code": "import java.text.DecimalFormat;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Main l = new Main();\n        Scanner scn = new Scanner(System.in);\n        String get = scn.nextLine();\n        int n = Integer.parseInt(get);\n        while (n>0) {\n            int i = 0;String s[] = new String[4];int j=0;\n            String next = scn.nextLine();int a[]=new int[4];\n            char ch[] = next.toCharArray();s[0]=\"\";s[1]=\"\";s[2]=\"\";s[3]=\"\";\n            while (i <= 31) {\n              \n                if (i/8==j+1 && i%8==0) {\n                    j++;\n                }\n                s[j]+=ch[i];\n                \n                i++;\n            }\n            for (int k = 0; k < 4; k++) {\n                a[k]=Integer.parseInt(s[k],2);\n                \n            }\n            System.out.println(a[0]+\".\"+a[1]+\".\"+a[2]+\".\"+a[3]);\n            n--;\n        }\n\n    }\n\n}\n", "score": 0.0}
{"id": "SHARE_1_106025_42__1_106025_47", "golden_code": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\tScanner scan=new Scanner(System.in);\n        for(int t=scan.nextInt();t!=0;t--, System.out.println()){\n\t\tString s=scan.next();\n                int N=s.length();\n                char c=s.charAt(0);\n                int n=1,d=0;\n                for(int i=1;i<N;i++)\n                    if(c==s.charAt(i))\n\t\t\tn++;\n                    else{\n                        System.out.print(n);\n                        System.out.print(c);\n                        n=1; c=s.charAt(i);\n                    }\n                        System.out.print(n);\n                        System.out.print(c);\n        }\n}}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        for(int i=0;i<n;i++){\n            String str = s.next();\n            String res = \"\";\n            int counter=0;\n            char search=str.charAt(0);\n            for(int j=0;j<str.length();j++){\n                if(str.charAt(j) == search){\n                    counter++;\n                }else{\n                    res += counter+\"\" + search;\n                    counter=0;\n                    search = str.charAt(j);\n                    j--;\n                }\n            }\n            res += counter+\"\" + search;\n            System.out.println(res);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1018_30__1_1073_4", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    \n    public static void main(String[] args) {\n        \n        Scanner input = new Scanner( System.in );\n        \n        int i , j, a, b, n, m[];\n        \n        n = input.nextInt();\n        \n        while( n != 0 ) {\n            a = 0;\n            b = 0;\n            m = new int[ n ];\n            \n            for( i = 0; i < n; i++ )\n                m[i] = input.nextInt();\n            \n            for( i = 0; i < n; i++ ){\n                j = input.nextInt();\n                \n                if( j == m[i] )\n                    continue;\n                \n                if( j > m[i] ){\n                    if( j - 1 == m[i] ){\n                        if( j == 2 && m[i] == 1 )\n                            a += 6;\n                        else\n                            a += j + m[i];\n                    }else{\n                        b += j;\n                    }\n                }else{\n                    if( j + 1 == m[i] ){\n                        if( j == 1 && m[i] == 2 )\n                            b += 6;\n                        else\n                            b += j + m[i];\n                    }else{\n                        a += m[i];\n                    }\n                }\n            }\n            System.out.printf( \"A has %d points. B has %d points.\\n\", a, b);\n            \n            n = input.nextInt();\n            \n            if( n != 0 )\n                System.out.println();\n        }\n    }\n}", "generated_code": "import java.util.*;\n\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner s = new Scanner(System.in);\n\t\tfor(int q=1;true;q++){\n\t\t\tint z = s.nextInt();\n\t\t\tint i = s.nextInt();\n\t\t\tint m = s.nextInt();\n\t\t\tint l = s.nextInt();\n\t\t\tif(z == 0 && i == 0 && m == 0 && l == 0)\n\t\t\t\tbreak;\n\t\t\tTreeMap<Integer,Integer> set = new TreeMap<Integer,Integer>();\n\t\t\tint newNum = l;\n\t\t\tset.put(newNum,0);\n\t\t\tnewNum = (z*newNum+i)%m;\n\t\t\tint res=1;\n\t\t\twhile(!set.containsKey(newNum)){\n\t\t\t\tset.put(newNum,res);\n\t\t\t\tnewNum = (z*newNum+i)%m;\n\t\t\t\tres++;\n\t\t\t}\n\t\t\tres -= set.get(newNum);\n\t\t\tSystem.out.println(\"Case \"+q+\": \"+res);\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1230_23__1_106022_13", "golden_code": "\n\nimport java.util.*;\n\npublic class Main {\n    public static void main(String []args){\n        String str;\n        long sum = 0;\n        char ch[];\n        Scanner cin=new Scanner(System.in);\n        while(true){\nstr=cin.next();\nif(str.equals(\"0\"))break;\nwhile ( str.length()>1){\n    sum=0;\n    ch=str.toCharArray();\n  //  System.out.println(Arrays.toString(ch));\n    for( int i=0 ; i<ch.length ; i++){\n       sum+=ch[i]-48;\n        //System.out.println(\"Sum: \"+sum);\n\n    }\n    str=Long.toString(sum);\n    \n}\n            System.out.println(str);\n        }\n      \n    }\n\n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main\n{\n\t\n\tpublic  static  void  main(String[] args) \n\t{\n\t\tScanner inp = new  Scanner(System.in);\n\t\tint t = Integer.parseInt(inp .nextLine());\n\t\t\n\t\tfor(int i=0;i<t;i++)\n\t\t{\n\t\t\tint num = Integer.parseInt(inp .nextLine());\n\t\t\tint size = Integer.toString(num).length();\n\t\t\t\n\t\t\tSystem.out.println(round(num,size));\n\t\t}\n\t}\n\n\tprivate static int round(int num, int size)\n\t{\n\t\tif(num<10)\n\t\t\treturn num;\n\t\t\n\t\tfor(int i=1;i<size;i++)\n\t\t{\n\t\t\tint ten = (int)Math.pow(10, i);\n\t\t\t\n\t\t\tint temp = num%ten;\n\t\t\tnum -= temp;\n\t\t\t\n\t\t\tif(temp<ten/2)\n\t\t\t\ttemp = 0;\n\t\t\telse \n\t\t\t\ttemp = ten;\n\t\t\t\n\t\t\tnum+=temp;\n\t\t}\n\t\treturn num;\n\t}\n}\n\n", "score": 0.0}
{"id": "SHARE_1_2737_7__1_1006_86", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\tstatic Scanner stdin = new java.util.Scanner(System.in);\n\n\tpublic static void main(String[] args) {\n\t\tint commandNumber = Integer.parseInt(stdin.nextLine());\n\n\t\tfor (long i = 0; i < commandNumber; i++) {\n\t\t\tString coordinates = stdin.nextLine();\n\t\t\tString[] result = coordinates.split(\" \");\n\t\t\tint x = Integer.parseInt(result[0]);\n\t\t\tint y = Integer.parseInt(result[1]);\n\t\t\tint resultx = 0, resulty = 0;\n\t\t\tfor (int k = 1; k < x; k++) {\n\t\t\t\tresultx += y * k;\n\t\t\t}\n\t\t\tfor (int j = 1; j < y; j++) {\n\t\t\t\tresulty += x * j;\n\t\t\t}\n\t\t\tSystem.out.println(resulty + resultx);\n\t\t}\n\n\t}\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\t\n\t    public static void main(String[] args) {\n\t    \t        Scanner in = new Scanner(System.in);\n\t    \t                while (in.hasNext()) {\n\t    \t                \t            float c, sum = (float) 0.00;\n\t    \t                \t                        int count = 0;\n\t    \t                \t                        \n\t    \t                \t                                    c = in.nextFloat();\n\t    \t                \t                                                if (c == 0) {\n\t    \t                \t                                                \t                System.exit(0);\n\t    \t                \t                                                }\n\t    \t                \t                                                            if (c > 0.009 & c < 5.201) {\n\t    \t                \t                                                            \t\n\t    \t                \t                                                            \t                while (sum < c) {\n\t    \t                \t                                                            \t                \t                    ++count;\n\t    \t                \t                                                            \t                \t                    \n\t    \t                \t                                                            \t                \t                                        sum += (1.0 / (1 + count));\n\t    \t                \t                                                            \t                \t                                        \n\t    \t                \t                                                            \t                \t                                        \n\t    \t                \t                                                            \t                \t                                        \n\t    \t                \t                                                            \t                }\n\t    \t                \t                                                            \t                                System.out.println(count+\" card(s)\");\n\t    \t                \t                                                            }\n\t    \t                \t                                                            \n\t    \t                }\n\t    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_381__1_101075_1", "golden_code": "import java.util.Scanner;\npublic class Main{\n\tpublic static void main(String[] args){\n\t\tScanner inp=new Scanner(System.in);\n\t\twhile(inp.hasNext())\n\t\tSystem.out.println(inp.nextInt()+inp.nextInt());\n\t}\n}", "generated_code": "import java.io.*;\nimport java.util.*;\nimport java.math.*;\nimport java.awt.geom.*;\n\npublic class Main\n{\n    private static int a, b, c;\n\n    private static int res;\n\n    private static final int[] cntA = new int[6];\n    private static final int[] cntB = new int[6];\n    private static final int[] cntC = new int[6];\n\n    private static final int[] values = {100, 50, 20, 10, 5, 1};\n\n    private static final int[] total = new int[6];\n\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter writer = new PrintWriter(System.out);\n\n        int testCases = Integer.parseInt(new StringTokenizer(reader.readLine()).nextToken());\n\n        while (testCases-- > 0)\n        {\n            StringTokenizer tokenizer = new StringTokenizer(reader.readLine());\n\n            int ab = Integer.parseInt(tokenizer.nextToken());\n            int bc = Integer.parseInt(tokenizer.nextToken());\n            int ca = Integer.parseInt(tokenizer.nextToken());\n\n            a = ca-ab;\n            b = ab-bc;\n            c = bc-ca;\n\n            tokenizer = new StringTokenizer(reader.readLine());\n            for(int i = 0;i < 6;i++)\n            {\n                cntA[i] = Integer.parseInt(tokenizer.nextToken());\n                total[i] = cntA[i];\n                a += cntA[i]*values[i];\n            }\n\n            tokenizer = new StringTokenizer(reader.readLine());\n            for(int i = 0;i < 6;i++)\n            {\n                cntB[i] = Integer.parseInt(tokenizer.nextToken());\n                total[i] += cntB[i];\n                b += cntB[i]*values[i];\n            }\n\n            tokenizer = new StringTokenizer(reader.readLine());\n            for(int i = 0;i < 6;i++)\n            {\n                cntC[i] = Integer.parseInt(tokenizer.nextToken());\n                total[i] += cntC[i];\n                c += cntC[i]*values[i];\n            }\n\n            res = Integer.MAX_VALUE/2;\n\n            rec(0, 0, 0, 0, 0);\n\n            if(res == Integer.MAX_VALUE/2)\n                writer.write(\"impossible\\n\");\n            else\n                writer.write(res + \"\\n\");\n        }\n\n        writer.flush();\n        writer.close();\n    }\n\n    private static void rec(int curA, int curB, int curC, int at, int diff)\n    {\n        if(diff >= res) return;\n\n        if(at == 6)\n        {\n            res = diff;\n            return;\n        }\n\n        for(int i = 0;i <= total[at];i++)\n            for(int j = 0;i+j <= total[at];j++)\n            {\n                int k = total[at]-i-j;\n\n                int curDiff = i > cntA[at] ? (i-cntA[at]) : (cntA[at]-i);\n                curDiff += j > cntB[at] ? (j-cntB[at]) : (cntB[at]-j);\n                curDiff += k > cntC[at] ? (k-cntC[at]) : (cntC[at]-k);\n\n                curDiff >>= 1;\n\n                if(curA+i*values[at] <= a && curB+j*values[at] <= b && curC+k*values[at] <= c)\n                    rec(curA+i*values[at], curB+j*values[at], curC+k*values[at], at+1, diff+curDiff);\n            }\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1099_1__1_1099_56", "golden_code": "\nimport java.util.Scanner;\n\n/**\n *\n * @author Mina\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner input = new Scanner(System.in);\n        int Set = 0;\n        long pile = input.nextLong();\n        while (pile != 0) {\n            Set++;\n            long answer = 0;\n            long sum = 0;\n            long[] n = new long[(int) pile];\n            for (int i = 0; i < pile; i++) {\n                n[i] = input.nextInt();\n                sum += n[i];\n\n            }\n\n            long average = sum / pile;\n            for (int i = 0; i < pile; i++) {\n                if ((n[i] - average) > 0) {\n                    answer += n[i] - average;\n                }\n                //  answer.add()\n            }\n            \n           \n                System.out.printf(\"Set #%d\\n\", Set);\n           \n\n            \n            System.out.printf(\"The minimum number of moves is %d.\\n\\n\", answer);\n            pile = input.nextInt();\n        }\n    }\n}\n", "generated_code": "\nimport java.awt.Point;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.math.BigInteger;\nimport java.text.DecimalFormat;\nimport java.util.AbstractSet;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.StringTokenizer;\nimport java.util.regex.Pattern;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n/**\n *\n * @author Mojtaba\n */\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        StringBuilder sb = new StringBuilder();\n\n        int counter = 0;\n        while (true) {\n            counter++;\n            int n = in.nextInt();\n            if (n == 0) {\n                break;\n            }\n\n            int sum = 0;\n            int[] a = new int[n];\n            for (int i = 0; i < a.length; i++) {\n                a[i] = in.nextInt();\n                sum += a[i];\n            }\n            int h = sum / n;\n            sum = 0;\n\n            for (int i = 0; i < a.length; i++) {\n                if (a[i] < h) {\n                    sum += h - a[i];\n                }\n            }\n            sb.append(\"Set #\").append(counter).append(\"\\n\").append(\"The minimum number of moves is \").append((sum)).append(\".\\n\\n\");\n        }\n\n\n        System.out.print(sb.toString());\n    }\n\n    static int[][] U(int[][] a) {\n        int[][] arr = new int[a.length][];\n        for (int i = 0; i < a.length; i++) {\n            arr[i] = a[(i + 1) % a.length];\n        }\n        return arr;\n    }\n\n    static int[][] D(int[][] a) {\n        int[][] arr = new int[a.length][];\n        for (int i = 0; i < a.length; i++) {\n            arr[(i + 1) % a.length] = a[i];\n        }\n        return arr;\n    }\n\n    static int[][] F(int[][] a) {\n        int[][] arr = new int[a.length][a[0].length];\n        for (int i = 0; i < arr.length; i++) {\n            for (int j = 0; j < arr[i].length; j++) {\n                arr[i][(j + 1) % arr[i].length] = a[i][j];\n            }\n        }\n        return arr;\n    }\n\n    static int[][] B(int[][] a) {\n        int[][] arr = new int[a.length][a[0].length];\n        for (int i = 0; i < arr.length; i++) {\n            for (int j = 0; j < arr[i].length; j++) {\n                arr[i][j] = a[i][(j + 1) % a[i].length];\n            }\n        }\n        return arr;\n    }\n\n    static int[][] T(int[][] a) {\n        int[][] arr = new int[a[0].length][a.length];\n        for (int i = 0; i < arr.length; i++) {\n            for (int j = 0; j < arr[i].length; j++) {\n                arr[i][j] = a[j][i];\n            }\n        }\n        return arr;\n    }\n\n    static int[][] R(int[][] a) {\n        int[][] arr = new int[a[0].length][a.length];\n        for (int i = 0; i < arr.length; i++) {\n            for (int j = 0; j < arr[i].length; j++) {\n                arr[i][j] = a[arr[i].length - 1 - j][i];\n            }\n        }\n        return arr;\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_20__1_1001_470", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile (sc.hasNext())\n\t\t\tSystem.out.println(sc.nextInt() + sc.nextInt());\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\n \npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt() + cin.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2121_46__1_2121_56", "golden_code": "import java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n       \n       Scanner s = new Scanner(System.in);\n       while(s.hasNext()){\n\t\tint n = s.nextInt(),\n\t\t\ta = 1, b = 1, c=0;\n\t\tBigInteger [] array=new BigInteger[n+2];\n\t\tarray[2]=BigInteger.ONE;\n\t\tarray[1]=new BigInteger(\"1\");\n\t\tfor (int i = 3; i <= n; i++) {\n\t\t\tarray[i]=array[i-1].add(array[i-2]);\n\t\t}\n\t\tSystem.out.println(array[n]);\n\t}\n    }\n}", "generated_code": "\nimport java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner a = new Scanner(System.in);\n        while (a.hasNext()) {\n        BigInteger[] fib= new BigInteger[a.nextInt()];\n        fib[1] = fib[0] = BigInteger.ONE;\n            for (int i = 2; i < fib.length; i++) {\n                fib[i] = fib[i-1].add(fib[i-2]);\n            }\n            System.out.println(fib[fib.length-1]);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1959_53__1_1959_46", "golden_code": "\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n, temp1, temp2;\n        while(s.hasNext()){\n            n = s.nextInt();\n            String a = \"\";\n            for(int i=0;i<n;i++){\n                a += s.nextInt();\n            }\n            temp1=temp2 =0;\n            n=1;\n            for(int i=0;i<a.length();i++){\n                temp1+=(n==a.charAt(i)-48)? 0 :1;\n               n= n*(-n)+1;\n            }\n            n=0;\n            for(int i=0;i<a.length();i++){\n                temp2+=(n==a.charAt(i)-48)? 0 :1;\n               n= n*(-n)+1;\n            }\n           temp1 = temp1<temp2?temp1:temp2;\n            System.out.println(temp1);\n           }\n    }\n}\n\n", "generated_code": "import java.util.*;\n \nclass Main{\n\tpublic static void main(String[] args){\n\t\tScanner scan=new Scanner(System.in);\n\t\tint n=0;\n\t\twhile(scan.hasNextInt()){\n\t\t\tint c=0;\n\t\t\tn=scan.nextInt();\n\t\t\tint[] a=new int[n];\n\t\t\tfor(int q=0;q<n;q++)\n\t\t\t\ta[q]=scan.nextInt();\n\t\t\tfor(int q=0;q<n-1;q++){\n\t\t\t\tif(a[q]==a[q+1]){\n\t\t\t\t\tc++;\n\t\t\t\t\ta[q+1]=replace(a[q+1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(c<n-c)\n\t\t\t\tSystem.out.println(c);\n\t\t\telse\n\t\t\t\tSystem.out.println(n-c);\n\t\t}\n\t}\n\tpublic static int replace(int a){\n\t\tif(a==0)\n\t\t\ta=1;\n\t\telse\n\t\t\ta=0;\n\t\treturn(a);\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2175_32__1_2175_22", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n    public static void main(String[] args){\n        Scanner in=new Scanner(System.in);\n        while(in.hasNext()){\n            int n=in.nextInt();\n            int[] m=new int[n];\n            boolean[]a=new boolean[n];\n            for(int i=1;i<n;i++)\n                a[i]=false;\n            for(int i=0;i<n;i++)\n                m[i]=in.nextInt();\n            for(int i=0;i<n-1;i++){\n                int k=Math.abs(m[i]-m[i+1]);\n                if(k>-1&&k<n)\n                    a[k]=true;\n            }\n            boolean f=true;\n            for(int i=1;i<n;i++)\n                if(a[i])\n                    continue;\n                else{\n                    f=false;\n                    break;\n                }\n                if(f)\n                    System.out.println(\"Jolly\");\n                else\n                    System.out.println(\"Not jolly\");\n                    \n        }\n    }\n}\n", "generated_code": "import java.util.*;\nclass Main{\n\tpublic static void main(String args[]){\n\t\tScanner A = new Scanner(System.in);\n\t\twhile(A.hasNextInt()){\n\t\t\tint n = 0 ;\n\t\t\tint a[] = new int[A.nextInt()];\n\t\t\tint x = a.length ;\n\t\t\tint b[] = new int[x-1];\n\t\t\t\n\t\t\tfor(int i = 0 ; i < x ; i++)\n\t\t\t\ta[i] = A.nextInt();\n\t\t\tfor(int i = 0 ; i < x-1 ; i++)\n\t\t\t\tb[i] = Math.abs(a[i+1] - a[i]) ;\n\t\t\tArrays.sort(b) ;\n\n\t\t\tfor (int i = 0 ; i < x-1 ; i++ )\n\t\t\t\tif(b[i] == i+1)\n\t\t\t\t\tn++ ;\n\t\t\tif(n == x - 1 )\n\t\t\t\tSystem.out.println(\"Jolly\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"Not jolly\");\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_1208_6__1_1208_31", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input=new Scanner (System.in);\n        int t=input.nextInt();\n        for(int i=0;i<t;i++){\n           if(i!=0){\n            System.out.println(\"\");\n            }\n            input.nextLine();\n            int n=input.nextInt();\n            input.nextLine();\n            for(int j=0;j<n;j++){\n               String[]k=input.nextLine().split(\" \");\n               for(int q=0;q<k.length;q++){\n                   System.out.printf(\"%s\",r(k[q]));\n                   if(q<k.length-1)\n                       System.out.printf(\" \");\n               }\n               if(j<n-1)\n                System.out.println(\"\");\n            }\n           System.out.println(\"\");\n        }\n        }\n    static String r(String s){\n\t\tString ss = \"\";\n\t\tfor(char ch : s.toCharArray()){\n\t\t\tss = ch+\"\"+ss;\n\t\t}\n\t\treturn ss;\n\t}\n}\n", "generated_code": "\n\nimport java.util.*;\nimport java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args){\n\t\tScanner inp = new Scanner(System.in);\n\t\tint numberOfTestCases=Integer.parseInt(inp.next());\n\t\tinp.nextLine();\n\t\tArrayList<String[]> testCases= new ArrayList<String[]>();\n\t\tfor (int i = 0; i < numberOfTestCases; i++) {\n\t\t\tint lines= Integer.parseInt(inp.next());\n\t\t\tinp.nextLine();\n\t\t\tString[] l= new String[lines];\n\t\t\tfor (int j = 0; j < l.length; j++) {\n\t\t\t\tl[j]=inp.nextLine();\n\t\t\t}\n\t\t\ttestCases.add(l);\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < testCases.size(); i++) {\n\t\t\tfor (int j = 0; j < testCases.get(i).length; j++) {\n\t\t\t\tString[] cur=testCases.get(i);\n\t\t\t\tString[] words=cur[j].split(\" \");\n\t\t\t\tfor (int k = 0; k < words.length; k++) {\n\t\t\t\t\tString s=\"\";\n\t\t\t\t\tfor (int l = 0; l < words[k].length(); l++) {\n\t\t\t\t\t\ts=words[k].charAt(l)+s;\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.print(s);\n\t\t\t\t\tif(k!=words.length-1)\n\t\t\t\t\t\tSystem.out.print(\" \");\t\n\t\t\t\t}\t\n\t\t\t\tSystem.out.println();\n\t\t\t}\t\n\t\t\tif(i!=testCases.size()-1){\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2718_11__1_1209_4", "golden_code": "\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.StringTokenizer;\n\npublic class Main {\n\n\tstatic long[][] memo;\n\tstatic long mode = 1000000007;\n\n\tpublic static void main(String[] args) {\n\t\tInputReader in = new InputReader(System.in);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tmemo = new long[101][101];\n\t\tfor (int i = 0; i < 101; i++)\n\t\t\tArrays.fill(memo[i], -1);\n\t\tint t, h;\n\t\twhile ((t = in.nextInt()) + (h = in.nextInt()) > 0) {\n\t\t\tout.println(solve(h, t));\n\t\t}\n\t\tout.close();\n\t}\n\n\tstatic long solve(int h, int t) {\n\t\tif (t <= h)\n\t\t\th = t - 1;\n\t\tif (memo[h][t] > -1)\n\t\t\treturn memo[h][t];\n\t\tif (h == 0)\n\t\t\treturn t + 1;\n\t\treturn memo[h][t] = ((solve(h - 1, t - 1) + solve(h, t - 1)) % mode);\n\t}\n\n\tstatic class InputReader {\n\t\tprivate BufferedReader reader;\n\t\tprivate StringTokenizer tokenizer;\n\n\t\tpublic InputReader(InputStream stream) {\n\t\t\treader = new BufferedReader(new InputStreamReader(stream));\n\t\t\ttokenizer = null;\n\t\t}\n\n\t\tpublic String nextLine() {\n\t\t\ttry {\n\t\t\t\treturn reader.readLine();\n\t\t\t} catch (IOException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\tpublic String next() {\n\t\t\twhile (tokenizer == null || !tokenizer.hasMoreTokens()) {\n\t\t\t\ttry {\n\t\t\t\t\ttokenizer = new StringTokenizer(reader.readLine());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tokenizer.nextToken();\n\t\t}\n\n\t\tpublic int nextInt() {\n\t\t\treturn Integer.parseInt(next());\n\t\t}\n\n\t\tpublic long nextLong() {\n\t\t\treturn Long.parseLong(next());\n\t\t}\n\n\t\tpublic double nextDouble() {\n\t\t\treturn Double.parseDouble(next());\n\t\t}\n\t}\n}\n\n\n", "generated_code": "import java.util.Scanner;\n\n/**\n * Created with IntelliJ IDEA.\n * User: M.Sadeq\n */\npublic class Main {\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int x=s.nextInt();\n        while(x--!=0){\n        int cnt=1;\n        while(true){\n            int n=s.nextInt();\n            int m=s.nextInt();\n            if(n==0 && m==0){\n              if(x!=0){  System.out.println();}\n                break;}\n            int r=0;\n            for (double i=1;i<n;i++){\n                for(double j=1;j<i;j++){\n                    if(((i*i)+(j*j)+m)/(i*j)==Math.rint(((i*i)+(j*j)+m)/(i*j)))  {\n                          r++;\n                    }\n                }\n            }\n            System.out.printf(\"Case %d: %d\\n\",cnt++,r);\n        }\n            s.nextLine();\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2811_12__1_2847_24", "golden_code": "import java.util.*;\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint t = input.nextInt();\n\t\tint n ,m =0;\n\t\tArrayList<Integer> nn;\n\t\tfor(int i = 0 ; i<t;i++)\n\t\t{\n\t\t\tn = input.nextInt();\n\t\t\tm =input.nextInt();\n\t\t\tnn = new ArrayList<Integer>(n);\n\t\t\tfor(int j = 0 ; j<n ; j++)\n\t\t\t{\n\t\t\t\tint d = input.nextInt();\n\t\t\t\tnn.add(d);\n\t\t\t}\n\t\t\tfor(int k = 0 ; k<m ; k++)\n\t\t\t{\n\t\t\t\tint f =input.nextInt();\n\t\t\t\t\tfor(int j = 0 ; j<nn.size() ; j++)\n\t\t\t\t\t{\n\t\t\t\t\t      if(nn.get(j)== f)\n\t\t\t\t\t\t  {\n\t\t\t\t\t \t\tnn.remove(nn.indexOf(f));\n\t\t\t\t\t\t  }\n\t\t\t\t    }\n\t\t\t}\n\t\t\tCollections.sort(nn);\n\t\t\tif(nn.size() ==0)\n\t\t\t{\n\t\t\t\tSystem.out.println(\"\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfor(Integer r: nn)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.print(r);\n\t\t\t\t\tif(nn.indexOf(r)!= nn.size()-1)\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.print(\",\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(\"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Scanner inp = new Scanner(System.in);\n        int testCase = inp.nextInt();\n        for (int i = 0; i < testCase; i++) {\n            int course = inp.nextInt();\n            int[] grads = new int[course];\n            int sum = 0;\n            int max = 0;\n            int min = 0;\n            for (int j = 0; j < course; j++) {\n                grads[j] = inp.nextInt();\n                sum += grads[j];\n                if (grads[j] > max) {\n                    max = grads[j];\n                }\n                if (j == 0) {\n                    min = grads[j];\n                } else if (grads[j] < min) {\n                    min = grads[j];\n                }\n            }\n            float a = (float) (min + max) / 2;\n            float b = (float) sum / course;\n            float cas = a - b;\n            float abs = Math.abs(cas);\n            if (abs < 1) {\n                System.out.println(\"Yes\");\n            } else {\n                System.out.println(\"No\");\n            }\n        }\n    }\n\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1319_69__1_2806_5", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        boolean b = false;\n        while (input.hasNext()) {\n            String[] num = input.nextLine().split(\" \");\n            int L_c = Integer.parseInt(num[0]);\n            if (L_c == 5280) {\n                break;\n            } else {\n                if (b) {\n                    System.out.println();\n                }\n                int l = 0, ll = 0;\n                String p = \"\";\n                for (int i = 1; i < num.length; i++) {\n                    int s = Math.abs(L_c - l);\n                    l = Integer.parseInt(num[i]);\n                    if (L_c == l) {\n                        p = \"found it!\";\n                    } else if (s < Math.abs(L_c - l)) {\n                        p = \"colder.\";\n                    } else if (s > Math.abs(L_c - l)) {\n                        p = \"warmer.\";\n                    } else if (s == Math.abs(L_c - l)) {\n                        p = \"same.\";\n                    }\n                    System.out.println(\"Moving from \" + ll + \" to \" + l + \": \" + p);\n                    ll = l;\n                }\n                b = true;\n            }\n        }\n    }\n\n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String [] args){\n\t\tScanner in = new Scanner(System.in);\n\t\t long fact[] = new long[22];\n\t\t fact[1]=1;\n\t\t for(int i = 2 ; i < 22 ; i++ ){\n\t\t\t fact[i]=i*fact[i-1];\n\t\t }\n\t\t long c[][] = new long[23][23];\n\t\t c[1][1] = 1;\n\t\t for(int i = 2 ; i < 22 ; i++){\n\t\t\t c[i][0]=1;\n\t\t\t for(int j = 1 ; j < i ; j++){\n\t\t\t\t c[i][j]=c[i-1][j]+c[i-1][j-1];\n\t\t\t }\n\n\t\t }\n\t\t long c2[][] = new long[23][23];\n\t\t c2[1][1] = 1;\n\t\t for(int i = 2 ; i < 22 ; i++){\n\t\t\t for(int j = 1 ; j < i ; j++){\n\t\t\t\t c2[i][j]=c2[i-1][j]+c2[i-1][j-1];\n\t\t\t }\n\t\t }\n\t\t \n\t\t double div[] = new double[22];\n\t\t div[0]=0; \n\t\t for(int i = 1 ; i < 22 ; i++){\n\t\t\t for(int j = 0 ; j <= i ; j++){\n\t\t\t\t div[i-1]+=c[i][j]*fact[j];\n\t\t\t }\n\t\t }\n\t\t double s[] = new double[22];\n\t\t s[0]=0; \n\t\t for(int i = 1 ; i < 22 ; i++){\n\t\t\t for(int j = 1 ; j < i ; j++){\n\t\t\t\t s[i-1]+=c2[i][j]*fact[j];\n\t\t\t }\n\t\t }\n\t\t \n\t\t double ans[] = new double[21];\n\t\t ans[0]=0;\n\t\t ans[1]=1;\n\t\t for(int i =1 ; i < 21 ; i++ ){\n\t\t\t ans[i]=s[i]/div[i];\n\t\t } \n\t\t int T = in.nextInt();\n\t\t while(T-->0){\n\t\t\t int n = in.nextInt();\n\t\t\t double sum = 0;\n\t\t\t for(int i = 0 ; i < n ; i++){\n\t\t\t\t sum+= in.nextDouble();\n\t\t\t }\n\t\t\t double A = ans[n]*sum;\n\t\t\t \n\t\t\t System.out.printf(\"%.6f\\n\", A);\n\t\t }\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_2833_5__1_1001_177", "golden_code": "import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Scanner;\nimport java.util.Stack;\n\npublic class Main {\n\n\n    static String minimum;\n\n   /* static class Node {\n        public String value;\n        public ArrayList childs;\n\n        public Node(String val) {\n            value = val;\n            childs = new ArrayList();\n        }\n    }\n*/\n /*   public static void addAllChilds(Node root) {\n        for (int i = 0; i < 26; i++) {\n            ArrayList poses = new ArrayList();\n            for (int j = 0; j < root.value.length(); j++) {\n                if ((char) (97 + i) == root.value.charAt(j))\n                    poses.add(Integer.valueOf(j));\n            }\n            if (poses.size() > 1) {\n                String temp = root.value.replaceAll(\"\" + (char) (i + 97), \".\");\n                for (int j = 0; j < poses.size(); j++) {\n                    String n = temp.substring(0, ((Integer)poses.get(j)).intValue()) + ((char) (i + 97)) + temp.substring(((Integer)poses.get(j)).intValue() + 1);\n                    Node node = new Node(n.replaceAll(\"\\\\.\", \"\"));\n                    root.childs.add(node);\n                    addAllChilds(node);\n                }\n            }\n        }\n    }\n*/\n    public static void addAllChildsToArray(HashSet<String> al, String root) {\n        for (int i = 0; i < 26; i++) {\n            ArrayList<Integer> poses = new ArrayList<Integer>();\n            for (int j = 0; j < root.length(); j++) {\n                if ((char) (97 + i) == root.charAt(j))\n                    poses.add(Integer.valueOf(j));\n            }\n            if (poses.size() > 1) {\n                String temp = root.replaceAll(\"\" + (char) (i + 97), \".\");\n                for (int j = 0; j < poses.size(); j++) {\n                    String n = temp.substring(0, (poses.get(j))) + ((char) (i + 97)) + temp.substring((poses.get(j) + 1));\n                    String x = n.replaceAll(\"\\\\.\", \"\");\n                    //System.out.println(x);\n                    //root.childs.add(node);\n                    if(x.length() < minimum.length()){\n                        minimum = x;\n                        al.clear();\n                        al.add(x);\n                    } else if(x.length() == minimum.length()){\n                        //System.out.println(x + \"    \" + minimum + \"    added\");\n                        al.add(x);\n                    }\n\n                    addAllChildsToArray(al, x);\n                }\n            }\n        }\n    }\n\n    /*public static String search(Node root) {\n        Stack stack = new Stack();\n        stack.push(root);\n        String result = root.value;\n        while (!stack.isEmpty()) {\n            Node node = (Node)stack.pop();\n            if (node.value.compareTo(result) < 0 || node.value.length() < result.length())\n                result = node.value;\n            stack.addAll(node.childs);\n        }\n        return result;\n    }*/\n\n    public static String search(HashSet<String> al){\n        Object array[] = al.toArray();\n        String min = (String)array[0];\n        for(int i = 1; i < array.length; i++){\n            String t = (String) array[i];\n            if(t.compareTo(min) < 0){\n                min = t;\n            }\n        }\n        return min;\n    }\n\n    public static String getString(Scanner s) {\n        String t;\n        while (true) {\n            t = s.next();\n            if (!t.trim().isEmpty())\n                break;\n        }\n        return t;\n    }\n\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        for (int i = 0; i < n; i++) {\n            String tmp = getString(s);\n            //Node root = new Node(tmp);\n            HashSet<String> al = new HashSet<String>();\n            minimum = tmp;\n            al.add(minimum);\n            addAllChildsToArray(al, tmp);\n            //System.out.println(al);\n            //addAllChilds(root);\n            System.out.println(search(al));\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile (in.hasNextInt()) {\n\t\t\tint a = in.nextInt();\n\t\t\tint b = in.nextInt();\n\t\t\tSystem.out.println(a + b);\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2205_2__1_1996_9", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        in.nextLine();\n        boolean f = false;\n        while (n-- > 0) {\n            char[][] ch = new char[3][3];\n            if (f) in.nextLine();\n            for (int i = 0; i < 3; i++) ch[i] = in.nextLine().trim().toCharArray();\n            f = true;\n            int x = 0;\n            int o = 0;\n            for (int i = 0; i < 3; i++) {\n                for (int j = 0; j < 3; j++) {\n                    if (ch[i][j] == 'X') x++;\n                    else if (ch[i][j] == 'O') o++;\n                }\n            }\n            if (o > x || x > o + 1\n                    || win('X', ch) && win('O', ch)\n                    || win('O', ch) && x != o\n                    || win('X', ch) && x == o) {\n                System.out.println(\"no\");\n            } else System.out.println(\"yes\");\n        }\n    }\n\n    public static boolean win(char c, char[][] ch) {\n        int i, j;\n        for (i = 0; i < 3; i++) {\n            for (j = 0; j < 3 && ch[i][j] == c; j++) ;\n            if (j == 3) return true;\n            for (j = 0; j < 3 && ch[j][i] == c; j++) ;\n            if (j == 3) return true;\n        }\n        for (i = 0; i < 3 && ch[i][i] == c; i++) ;\n        if (i == 3) return true;\n        for (i = 0; i < 3 && ch[i][2 - i] == c; i++) ;\n        if (i == 3) return true;\n        return false;\n    }\n}", "generated_code": "import java.util.*;\npublic class Main {\n\tpublic static void main(String [] args){\n\t\tScanner input=new Scanner(System.in);\n\t\tint n=input.nextInt();\n\t\tString s;\n\t\twhile(n!=0){\n\t\t\tdouble sum=0;\n\t\t\twhile(n-->0){\n\t\t\t\ts=input.next();\n\t\t\t\tString [] s1=s.substring(1).split(\",\");\n\t\t\t\ts=\"\";\n\t\t\t\tfor(String d:s1)\n\t\t\t\t\ts=s+d;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tsum+=Double.parseDouble(s);\n\t\t\t\t//System.out.println(Double.parseDouble(s));\n\t\t\t}\n\t\t\ts=String.format(\"%.2f\",sum);\n\t\t\t\n\t\t\t//System.out.println(s);\n\t\t\tif(s.substring(0,s.indexOf(\".\")).length()<3)\n\t\t\t\tSystem.out.printf(\"$%.2f\\n\",sum);\n\t\t\telse{\n\t\t\t\tString h=\"\";\n\t\t\t\ts=s.substring(0,s.indexOf(\".\"));\n\t\t\t\tfor(int i=s.length()-1;i>=0;i--){\n\t\t\t\t\th=s.charAt(i)+h;\n\t\t\t\t\t\n\t\t\t\t\tif((s.length()-i)%3==0 && i!=0)\n\t\t\t\t\t\th=\",\"+h;\n\t\t\t\t}\n\t\t\t\ts=String.format(\"%.2f\",sum);\n\t\t\t\tSystem.out.println(\"$\"+h+s.substring(s.indexOf(\".\")));\n\t\t\t}\n\t\t\tn=input.nextInt();\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_2732_49__1_2732_2", "golden_code": "import java.io.*;\nimport java.util.StringTokenizer;\n\npublic class Main{\n\n\tpublic static void main(String[] args) throws NumberFormatException, IOException {\n\t\tBufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(input.readLine());\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tStringTokenizer s = new StringTokenizer(input.readLine());\n\t\t\tint x = Integer.parseInt(s.nextToken()), y = Integer.parseInt(s.nextToken());\n\t\t\tif (x == y || (x > y && (x - y) == 2)) {\n\t\t\t\tif (x % 2 == 0) {\n\t\t\t\t\tSystem.out.println(x + y);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(x + y - 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"No Number\");\n\t\t\t}\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\tstatic ArrayList<Point> points = new ArrayList<Point>();\n\n\tpublic static void main(String[] args) {\n\n\t\tpoints.add(new Point(0, 0));\n\t\tpoints.add(new Point(1, 1));\n\t\tpoints.add(new Point(2, 0));\n\n\t\tPoint lastPoint = points.get(2);\n\t\tfor (int i = 0; i < 3000; i++) {\n\t\t\tpoints.add(new Point(lastPoint.x + 1, lastPoint.y + 1));\n\t\t\tpoints.add(new Point(lastPoint.x, lastPoint.y + 2));\n\t\t\tpoints.add(new Point(lastPoint.x + 1, lastPoint.y + 3));\n\t\t\tpoints.add(new Point(lastPoint.x + 2, lastPoint.y + 2));\n\t\t\tlastPoint = points.get(points.size() - 1);\n\t\t}\n\t\t//System.out.println(lastPoint.x+\" , \"+lastPoint.y);\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint x = sc.nextInt();\n\t\t\tint y = sc.nextInt();\n\t\t\tif (points.contains(new Point(x, y)))\n\t\t\t\tSystem.out.println(points.indexOf(new Point(x, y)));\n\t\t\telse \n\t\t\t\tSystem.out.println(\"No Number\");\n\t\t}\n\t}\n}\n\nclass Point {\n\tint x;\n\tint y;\n\n\tPoint(int x, int y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tpublic boolean equals(Object o) {\n\t\tPoint other = (Point) o;\n\t\treturn other.x == this.x && other.y == this.y;\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_106015_19__1_108003_1", "golden_code": "import java.util.Scanner;\nimport java.math.BigInteger;\n\nclass Main {\n\tpublic static void main(String[] args) {\n\t\tint n;\n\t\tScanner scan = new Scanner(System.in);\n\t\twhile (scan.hasNext()) {\n\t\t\tn = scan.nextInt();\n\t\t\tBigInteger a[] = new BigInteger[1001];\n\t\t\ta[1] = BigInteger.ZERO;\n\t\t\tfor (int i = 2; i <= n; i++) {\n\t\t\t\tif (i % 2 == 0)\n\t\t\t\t\ta[i] = a[i - 1].multiply(BigInteger.valueOf(2)).add(\n\t\t\t\t\t\t\tBigInteger.ONE);\n\t\t\t\telse\n\t\t\t\t\ta[i] = a[i - 1].multiply(BigInteger.valueOf(2)).subtract(\n\t\t\t\t\t\t\tBigInteger.ONE);\n\t\t\t}\n\n\t\t\tSystem.out.println(a[n]);\n\t\t}\n\t}\n}", "generated_code": "/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\nimport java.util.Arrays;\nimport java.util.Scanner;\n\n/**\n *\n * @author Hasan\n */\nclass Edge implements Comparable{\n    Integer a,b,w;\n\n    @Override\n    public int compareTo(Object o) {\n        Edge other = (Edge) o;\n        return w.compareTo(other.w);\n    }\n}\npublic class Main {\n    static int []par;\n    public static void main(String []args){\n        Scanner cin = new Scanner(System.in);\n        while (true){\n        int n,m;\n        n=cin.nextInt();\n        m=cin.nextInt();\n        if(n == 0)\n            break;\n        Edge [] edge= new Edge[m];\n        for(int i=0;i<m;i++){\n            edge[i] = new Edge();\n            edge[i].a= cin.nextInt();\n            edge[i].b= cin.nextInt();\n            edge[i].w= cin.nextInt();\n        }\n        par = new int [n];\n        int [] s = new int [n];\n        for(int i=0;i<n;i++){\n            par[i] = i;\n            s[i]=1;\n        }\n        int ans =0;\n        Arrays.sort(edge, 0, m);\n        int sum=0;\n        for(int i=0;i<m;i++){\n            sum+= edge[i].w;\n            int para = getPar(edge[i].a);\n            int parb = getPar(edge[i].b);\n            if(para != parb){\n                ans += edge[i].w;\n                System.err.println(edge[i].a + \" \" + edge[i].b + \" \" + edge[i].w);\n                if (s[para] <s[parb]){\n                    par[para] = parb;\n                    s[parb]+=s[para];\n                }\n                else{\n                    par[parb] = para;\n                    s[para]+=s[parb];\n                }\n            }\n        }\n        System.out.println(sum -ans);\n        }\n    }\n\n    private static int getPar(Integer b) {\n        if (b.equals(par[b]))\n            return b;\n        return par[b]=getPar(par[b]);\n    }\n    \n}\n", "score": 0.0}
{"id": "SHARE_1_106025_37__1_2578_26", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n  = Integer.parseInt(sc.nextLine());\n\t\tfor(int i = 0; i<n; i++)\n\t\t\tlookAndSay(sc.nextLine());\n\t}\n\tpublic static void lookAndSay (String s){\n\t\tint last = s.charAt(0)-'0',counter = 0;\n\t\tfor(int i=0;i<s.length();i++)\n\t\t{\n\t\t\tint current = s.charAt(i)-'0';\n\t\t\tif(current != last){\n\t\t\t\tSystem.out.print(counter+\"\"+last);\n\t\t\t\tlast = current;\n\t\t\t\tcounter=1;\n\t\t\t}else{\n\t\t\t\tcounter++;\n\t\t\t\tlast= current;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tSystem.out.print(counter+\"\"+last+\"\\n\");\n\t\t\n\t}\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main(String [] args)\n\t{\n\t\tScanner scan=new Scanner(System.in);\n\t\tint n=scan.nextInt();\n\t\tString s=scan.nextLine();\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tString m=scan.nextLine();\n\t\t\tint g=0,b=0;\n\t\t\t\n\t\tfor(int j=0;j<m.length() ;j++)\n\t\t{\n\t\t\tchar k=m.charAt(j);\n\t\t\tif(k=='g' || k=='G')\n\t\t\t\tg++;\n\t\t\tif(k=='b' || k=='B')\n\t\t\t\tb++;\n\t\t}\n\t\t\tif(g>b)\n\t\t\t\tSystem.out.println(m+\" \"+\"is GOOD\");\n\t\t\tif(g==b)\n\t\t\t\tSystem.out.println(m+\" \"+\"is NEUTRAL\");\n\t\t\tif(g<b)\n\t\t\t\tSystem.out.println(m+\" \"+\"is A BADDY\");\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_1001_432__1_1001_287", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}\n", "generated_code": "\n\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n       while(sc.hasNext()){\n           System.out.println((sc.nextInt()+sc.nextInt()));\n\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2554_36__1_2554_30", "golden_code": "import java.util.*;\n\npublic class Main {\n    static class Node {\n        Node parent;\n        String name = \"\", condition = \"\";\n        int level = 0, relation = 0;\n\n        Node(String s, Node p, int r) {\n            this.name = s;\n            this.parent = p;\n            this.relation = r;\n            if (this.parent != null)\n                this.level = (this.parent).level + 1;\n        }\n    }\n\n    static class N_list {\n        public static ArrayList<Node> node_list = new ArrayList<>();\n        public static ArrayList<String> answer = new ArrayList<>();\n    }\n\n    public static void input1_parse(String s) {\n        String[] command = new String[0], mandatory = new String[0], or = new String[0], xor = new String[0];\n        s = s.trim().replaceAll(\"\\\\s+\", \"\");\n        Node root = null;\n        if (!(s.contains(\"=\"))) {\n            root = new Node(s, null, -1);\n            root.level = 0;\n            N_list.node_list.add(root);\n        }\n        else {\n            command = s.split(\"=\", 2);\n            String children = command[1];\n            if (N_list.node_list.size() == 0) {\n                root = new Node(command[0], null, -1);\n                root.level = 0;\n                N_list.node_list.add(root);\n            }\n            else {\n                boolean is_new = true;\n                for (int i = 0; i < N_list.node_list.size(); i++)\n                    if (N_list.node_list.get(i).name.equals(command[0])) {\n                        is_new = false;\n                        root = N_list.node_list.get(i);\n                    }\n                if (is_new == true) {\n                    root = new Node(command[0], null, -1);\n                    root.level = 0;\n                    N_list.node_list.add(root);\n                }\n            }\n\n            if (children.contains(\"+\")) {\n                mandatory = children.split(\"\\\\+\", 0);\n                for (int i = 0; i < mandatory.length; i++) {\n                    boolean is_new = true;\n                    for (int j = 0; j < N_list.node_list.size(); j++) {\n                        if (mandatory[i].equals(N_list.node_list.get(j).name)) {\n                            is_new = false;\n                            N_list.node_list.get(j).parent = root;\n                            N_list.node_list.get(j).relation = 0;\n                            N_list.node_list.get(j).level = root.level + 1;\n                            break;\n                        }\n                        if (mandatory[i].equals('?' + N_list.node_list.get(j).name)) {\n                            is_new = false;\n                            N_list.node_list.get(j).parent = root;\n                            N_list.node_list.get(j).relation = 3;\n                            N_list.node_list.get(j).level = root.level + 1;\n                            break;\n                        }\n                    }\n\n                    if (is_new == false) {\n                        if (mandatory[i].charAt(0) == '?')\n                            change_level(mandatory[i].substring(1, mandatory[i].length()));\n                        else\n                            change_level(mandatory[i]);\n                    }\n                    if (is_new == true) {\n                        for (int j = 0; j < N_list.node_list.size(); j++)\n                            if ((N_list.node_list.get(j).name).equals(command[0])) {\n                                Node child = new Node(mandatory[i], N_list.node_list.get(j), 0);\n                                if (mandatory[i].charAt(0) == '?') {\n                                    child.relation = 3;\n                                    child.name = mandatory[i].substring(1, mandatory[i].length());\n                                }\n                                N_list.node_list.add(child);\n                                break;\n                            }\n                    }\n                }\n            }\n            if (children.contains(\"|\")) {\n                or = children.split(\"\\\\|\", 0);\n                for (int i = 0; i < or.length; i++) {\n                    boolean is_new = true;\n                    for (int j = 0; j < N_list.node_list.size(); j++) {\n                        if (or[i].equals(N_list.node_list.get(j).name)) {\n                            is_new = false;\n                            N_list.node_list.get(j).parent = root;\n                            N_list.node_list.get(j).relation = 1;\n                            N_list.node_list.get(j).level = root.level + 1;\n                            break;\n                        }\n                    }\n                    if (is_new == false)\n                        change_level(or[i]);\n\n                    if (is_new == true) {\n                        for (int j = 0; j < N_list.node_list.size(); j++)\n                            if ((N_list.node_list.get(j).name).equals(command[0])) {\n                                Node child = new Node(or[i], N_list.node_list.get(j), 1);\n                                N_list.node_list.add(child);\n                                break;\n                            }\n                    }\n                }\n            }\n            if (children.contains(\"^\")) {\n                xor = children.split(\"\\\\^\", 0);\n                for (int i = 0; i < xor.length; i++) {\n                    boolean is_new = true;\n                    for (int j = 0; j < N_list.node_list.size(); j++) {\n                        if (xor[i].equals(N_list.node_list.get(j).name)) {\n                            is_new = false;\n                            N_list.node_list.get(j).parent = root;\n                            N_list.node_list.get(j).relation = 2;\n                            N_list.node_list.get(j).level = root.level + 1;\n                            break;\n                        }\n                    }\n                    if (is_new == false)\n                        change_level(xor[i]);\n\n                    if (is_new == true) {\n                        for (int j = 0; j < N_list.node_list.size(); j++)\n                            if ((N_list.node_list.get(j).name).equals(command[0])) {\n                                Node child = new Node(xor[i], N_list.node_list.get(j), 2);\n                                N_list.node_list.add(child);\n                                break;\n                            }\n                    }\n                }\n            }\n            if (!((children.contains(\"^\") || (children.contains(\"|\")) || (children.contains(\"+\"))))) {\n                boolean is_new = true;\n                for (int i = 0; i < N_list.node_list.size(); i++) {\n                    if (N_list.node_list.get(i).name.equals(children)) {\n                        is_new = false;\n                        N_list.node_list.get(i).parent = root;\n                        N_list.node_list.get(i).relation = 0;\n                        N_list.node_list.get(i).level = root.level + 1;\n                        break;\n                    }\n                    if (('?' + N_list.node_list.get(i).name).equals(children)) {\n                        is_new = false;\n                        N_list.node_list.get(i).parent = root;\n                        N_list.node_list.get(i).relation = 3;\n                        N_list.node_list.get(i).level = root.level + 1;\n                        break;\n                    }\n                }\n                if (is_new == false) {\n                    if (children.charAt(0) == '?')\n                        change_level(children.substring(1, children.length()));\n                    else\n                        change_level(children);\n                }\n                if (is_new == true) {\n                    for (int i = 0; i < N_list.node_list.size(); i++) {\n                        if ((N_list.node_list.get(i).name).equals(command[0])) {\n                            Node child = new Node(children, N_list.node_list.get(i), 0);\n                            if (children.charAt(0) == '?') {\n                                child.relation = 3;\n                                child.name = children.substring(1, children.length());\n                            }\n                            N_list.node_list.add(child);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    public static void input2_parse(String s) {\n        String[] test = new String[0];\n        s = s.trim().replaceAll(\"\\\\s+\", \"\");\n        s = s.substring(1, s.length() - 1);\n        test = s.split(\",\", 0);\n        N_list.answer.add(check(test));\n    }\n\n    public static void input1_convert(ArrayList<String> arr1) {\n        for (int i = 0; i < arr1.size(); i++)\n            input1_parse(arr1.get(i));\n    }\n\n    public static void input2_convert(ArrayList<String> arr2) {\n        for (int i = 0; i < arr2.size(); i++) {\n            input2_parse(arr2.get(i));\n            for (int j = 0; j < N_list.node_list.size(); j++)\n                N_list.node_list.get(j).condition = \"\";\n        }\n    }\n\n    public static void change_level(String p) {\n        for (int i = 0; i < N_list.node_list.size(); i++)\n            if (N_list.node_list.get(i).parent != null && p.equals(N_list.node_list.get(i).parent.name)) {\n                N_list.node_list.get(i).level = N_list.node_list.get(i).parent.level + 1;\n                change_level(N_list.node_list.get(i).name);\n            }\n    }\n\n    public static String check(String[] arr) {\n        int start_level = 0;\n        for (int i = 0; i < N_list.node_list.size(); i++)\n            start_level = Math.max(start_level, N_list.node_list.get(i).level);\n\n        for (int i = start_level; i >= 0; i--) {\n            for (int j = 0; j < N_list.node_list.size(); j++) {\n                Node c_node = N_list.node_list.get(j);\n                int r = c_node.relation;\n                boolean found_same = false;\n                if (c_node.level == i) {\n                    for (int k = 0; k < arr.length; k++) {\n                        if (arr[k].equals(c_node.name)) {\n                            found_same = true;\n                            if (r == -1) {\n                                if (c_node.condition.equals(\"unused\"))\n                                    return \"Invalid\";\n                                else\n                                    c_node.condition = \"used\";\n                            }\n                            if (r == 0 || r == 3 || r == 1) {\n                                if (c_node.condition.equals(\"unused\") || c_node.parent.condition.equals(\"unused\"))\n                                    return \"Invalid\";\n                                else {\n                                    c_node.condition = \"used\";\n                                    (c_node.parent).condition = \"used\";\n                                }\n                                break;\n                            }\n                            if (r == 2) {\n                                if (c_node.condition.equals(\"unused\") || c_node.parent.condition.equals(\"unused\"))\n                                    return \"Invalid\";\n                                else {\n                                    (c_node.parent).condition = \"used\";\n                                    for (int l = 1; l < N_list.node_list.size(); l++)\n                                        if (N_list.node_list.get(l).parent.equals(c_node.parent) && N_list.node_list.get(l).relation == 2)\n                                            N_list.node_list.get(l).condition = \"unused\";\n                                    c_node.condition = \"used\";\n                                }\n                                break;\n                            }\n                            break;\n                        }\n                    }\n\n                    if (!found_same) {\n                        if (c_node.condition.equals(\"used\") || c_node.parent == null)\n                            return \"Invalid\";\n                        else if (c_node.parent.condition.equals(\"used\") && r == 0)\n                            return \"Invalid\";\n                        else {\n                            if (r == -1)\n                                return \"Invalid\";\n                            if (r == 0) {\n                                c_node.condition = \"unused\";\n                                (c_node.parent).condition = \"unused\";\n                            }\n                            else\n                                c_node.condition = \"unused\";\n                        }\n                    }\n                }\n            }\n        }\n\n        for (int i = 0; i < N_list.node_list.size(); i++) {\n            Node c_node = N_list.node_list.get(i);\n            int or_child = 0, xor_child = 0;\n            boolean has_or_child = false, has_xor_child = false;\n            if (c_node.condition.equals(\"used\")) {\n                for (int l = 1; l < N_list.node_list.size(); l++) {\n                    Node child = N_list.node_list.get(l);\n                    if (child.parent.equals(c_node)) {\n                        if (child.relation == 2) {\n                            if (child.condition.equals(\"used\"))\n                                xor_child++;\n                            has_xor_child = true;\n                        }\n                        if (child.relation == 1) {\n                            if (child.condition.equals(\"used\"))\n                                or_child++;\n                            has_or_child = true;\n                        }\n                    }\n                }\n            }\n            if ((has_or_child && or_child == 0) || (has_xor_child && xor_child != 1))\n                return \"Invalid\";\n        }\n        return \"Valid\";\n    }\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        String command = \"\";\n        boolean input1_done = false;\n        ArrayList<String> input1 = new ArrayList<>();\n        ArrayList<String> input2 = new ArrayList<>();\n\n        while (!(command.equals(\"###\"))) {\n            command = input.nextLine();\n            if (!(command.equals(\"#\")) && !input1_done)\n                input1.add(command);\n            if (command.equals(\"#\")) {\n                input1_convert(input1);\n                input1.removeAll(input1);\n                input1_done = true;\n            }\n\n            if (!(command.equals(\"##\")) && !(command.equals(\"#\")) && input1_done)\n                input2.add(command);\n            if (command.equals(\"##\")) {\n                input2_convert(input2);\n                N_list.answer.add(\"+++\");\n                input2.removeAll(input2);\n                N_list.node_list.removeAll(N_list.node_list);\n                input1_done = false;\n            }\n        }\n        for (int i = 0; i < N_list.answer.size(); i++)\n            System.out.println(N_list.answer.get(i));\n    }\n}", "generated_code": "import java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Main {\n\n    static public void main(String[] args) {\n        StringBuilder outputBuilder = new StringBuilder();\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        while(!input.equals(\"###\")) {\n            Model model = new Model();\n            while (!input.equals(\"#\")) {\n                String parentName;\n                FeatureType featureType = FeatureType.SIMPLE; // default, when there's only one child\n                String[] childrenNames = null;\n\n                if (input.contains(\"=\")) {\n                    String[] equality = input.replace(\" \", \"\").split(\"=\");\n\n                    parentName = equality[0];\n\n                    for (String delimiter : new String[] {\"+\", \"|\", \"^\"})\n                        if (equality[1].contains(delimiter))\n                            featureType = FeatureType.typeOf(delimiter);\n\n                    childrenNames = equality[1].split(featureType.getDelimiterAsRegex());\n                } else\n                    parentName = input;\n\n                model.addFeature(parentName, featureType, childrenNames);\n                input = scanner.nextLine();\n            }\n            input = scanner.nextLine();\n            while(!input.equals(\"##\")) {\n                outputBuilder.append(\n                        model.validate(parseWithComma(input)) ?\n                                \"Valid\\n\" :\n                                \"Invalid\\n\"\n                );\n                input = scanner.nextLine();\n            }\n            outputBuilder.append(\"+++\\n\");\n            input = scanner.nextLine();\n        }\n        try {\n            Thread.sleep(5000);\n        } catch (InterruptedException ignore) {}\n        System.out.print(outputBuilder);\n    }\n\n    private static List<String> parseWithComma(String testCase) {\n        String[] names = testCase.replaceAll(\"[{}\\\\s]\", \"\").split(\",\");\n        return new LinkedList<>(Arrays.asList(names));\n    }\n}\n\nabstract class AbstractParent extends Feature {\n    List<Feature> children;\n\n    AbstractParent(String name, AbstractParent parent, boolean isMandatory, List<Feature> children) {\n        super(name, parent, isMandatory);\n        this.children = children;\n    }\n}\n\nclass Feature {\n    String name;\n    private AbstractParent parent;\n    boolean isMandatory;\n\n    public boolean validate(List<String> test) {\n        return !test.contains(this.name) || (this.parent == null || test.contains(this.parent.name));\n    }\n\n    Feature(String name) {\n        this.name = name;\n    }\n\n    Feature(String name, AbstractParent parent, boolean isMandatory) {\n        this.name = name;\n        this.parent = parent;\n        this.isMandatory = isMandatory;\n    }\n\n    void setParent(AbstractParent parent) {\n        this.parent = parent;\n    }\n\n    void setMandatory(boolean mandatory) {\n        this.isMandatory = mandatory;\n    }\n\n    public int hashCode() {\n        return this.name.hashCode();\n    }\n\n    public boolean equals(Object obj) {\n        return (obj instanceof Feature) &&\n                this.name.equals(((Feature) obj).name);\n    }\n\n    AbstractParent toParent(FeatureType type, List<Feature> children) {\n        AbstractParent grownMe = null;\n        switch (type) {\n            case SIMPLE:\n                grownMe = new SimpleFeature(this.name, this.parent, this.isMandatory, children);\n                break;\n            case OR:\n                grownMe =  new OrFeature(this.name, this.parent, this.isMandatory, children);\n                break;\n            case XOR:\n                grownMe = new XorFeature(this.name, this.parent, this.isMandatory, children);\n                break;\n        }\n        if (this.parent != null) { // this might be root\n            this.parent.children.remove(this);\n            this.parent.children.add(grownMe);\n        }\n        return grownMe;\n    }\n}\n\nenum FeatureType {\n    SIMPLE(\"+\"),\n    OR(\"|\"),\n    XOR(\"^\");\n\n    private final String delimiter;\n\n    FeatureType(String delimiter) {\n        this.delimiter = delimiter;\n    }\n\n    public String getDelimiterAsRegex() {\n        return \"\\\\\" + this.delimiter;\n    }\n\n    public static FeatureType typeOf(String delimiter) {\n        for (FeatureType featureType : FeatureType.values())\n            if (delimiter.equals(featureType.delimiter))\n                return featureType;\n        return SIMPLE; // default, to get rid of NPE warnings\n    }\n}\n\nclass Model {\n    private List<Feature> allFeatures = new LinkedList<>();\n    private AbstractParent root = null;\n\n    // only works if no feature appears more that once in the same side of the equality\n    public void addFeature(String left, FeatureType type, String[] right) {\n        List<Feature> children = new LinkedList<>();\n        Feature toBeParent = new Feature(left);\n        AbstractParent parent;\n\n        int parentIdx = this.allFeatures.indexOf(toBeParent);\n        if (parentIdx < 0) {\n             parent = toBeParent.toParent(type, children);\n             this.allFeatures.add(parent);\n        } else {\n            parent = this.allFeatures.remove(parentIdx).toParent(type, children);\n            this.allFeatures.add(parent);\n        }\n\n        if (right != null) // for a possible singleton model\n            for (String childName : right) {\n                boolean mandatory = !childName.contains(\"?\");\n                childName = childName.replace(\"?\", \"\");\n                Feature toBeChild = new Feature(childName, parent, mandatory);\n                int childIdx = this.allFeatures.indexOf(toBeChild);\n                if (childIdx < 0) {\n                    this.allFeatures.add(toBeChild);\n                    children.add(toBeChild);\n                } else {\n                    Feature child = this.allFeatures.get(childIdx);\n                    child.setParent(parent);\n                    child.setMandatory(mandatory);\n                    children.add(child);\n                }\n            }\n\n        if (this.root == null) // this is the first time\n            this.root = parent;\n    }\n\n    public boolean validate(List<String> test) {\n        boolean result = test.contains(this.root.name);\n\n        for (String testName : test) {\n            Feature dummy = new Feature(testName);\n            result &= this.allFeatures.contains(dummy);\n        }\n\n        if (this.allFeatures != null) {\n            for (Feature feature : this.allFeatures)\n                if (test.contains(feature.name))\n                    result &= feature.validate(test);\n        } else\n            return false;\n\n        return result;\n    }\n}\n\nclass OrFeature extends AbstractParent {\n    OrFeature(String name, AbstractParent parent, boolean isMandatory, List<Feature> children) {\n        super(name, parent, isMandatory, children);\n    }\n\n    public boolean validate(List<String> test) {\n        for(Feature child : this.children)\n            if (test.contains(child.name))\n                return super.validate(test);\n        return false;\n    }\n}\n\n\nclass SimpleFeature extends AbstractParent {\n    SimpleFeature(String name, AbstractParent parent, boolean isMandatory, List<Feature> children) {\n        super(name, parent, isMandatory, children);\n    }\n\n    public boolean validate(List<String> test) {\n        if (this.children != null)\n            for(Feature child : this.children)\n                if (child.isMandatory && !test.contains(child.name))\n                    return false;\n        return super.validate(test);\n    }\n}\n\nclass XorFeature extends AbstractParent {\n    XorFeature(String name, AbstractParent parent, boolean isMandatory, List<Feature> children) {\n        super(name, parent, isMandatory, children);\n    }\n\n    public boolean validate(List<String> test) {\n        boolean oneChildSeen = false;\n        for (Feature child : this.children)\n            if (test.contains(child.name))\n                if (oneChildSeen)\n                    return false;\n                else\n                    oneChildSeen = true;\n        return oneChildSeen && super.validate(test);\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_355__1_1001_219", "golden_code": "\nimport java.util.Scanner;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n//package a.b;\n\n/**\n *\n * @author Newsha\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n        Scanner input = new Scanner(System.in);\n        \n        while(input.hasNextInt()){\n            int a = input.nextInt();\n            int b = input.nextInt();\n            long sum = a + b;\n            System.out.println(sum);\n        }\n    }\n    \n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        int a, b;\n        Scanner in = new Scanner(System.in);\n       while( in.hasNext() ){\n           a = in.nextInt();\n           b = in.nextInt();\n           System.out.println(a+b);\n       }\n    }\n    \n}\n", "score": 1.0}
{"id": "SHARE_6_1009_24__1_1091_10", "golden_code": "import java.util.*;\n\npublic class Main {\n\tpublic static int sizeOfHome;\n\tpublic static void DFS(int[][] home,int x, int y) {\n\t\t//System.err.println(sizeOfHome);\n\t\tint E = 0, W = 0, S = 0, N = 0;\n\t\tif (home[y][x] >= 8) {\n\t\t\tS = 1;\n\t\t\thome[y][x] -= 8;\n\t\t}\n\t\tif (home[y][x] >= 4) {\n\t\t\tE = 1;\n\t\t\thome[y][x] -= 4;\n\t\t}\n\t\tif (home[y][x] >= 2) {\n\t\t\tN = 1;\n\t\t\thome[y][x] -= 2;\n\t\t}\n\t\tif (home[y][x] >= 1) {\n\t\t\tW = 1;\n\t\t\thome[y][x] -= 1;\n\t\t}\n\t\thome[y][x] = -1;\n\t\tif (S == 0 && home[y + 1][x] >= 0) {\n\t\t\tsizeOfHome++;\n\t\t\tDFS(home, x, y + 1);\n\t\t}\n\t\tif (E == 0 && home[y][x + 1] >= 0) {\n\t\t\tsizeOfHome++;\n\t\t\tDFS(home, x + 1, y);\n\t\t}\n\t\tif (N == 0 && home[y - 1][x] >= 0) {\n\t\t\tsizeOfHome++;\n\t\t\tDFS(home, x, y - 1);\n\t\t}\n\t\tif (W == 0 && home[y][x - 1] >= 0) {\n\t\t\tsizeOfHome++;\n\t\t\tDFS(home, x - 1, y);\n\t\t}\n\t\thome[y][x] = -2;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile (in.hasNext()) {\n\t\t\tint N = in.nextInt();\n\t\t\tint M = in.nextInt();\n\t\t\tint[][] home = new int[52][52];\n\t\t\tfor (int i = 0; i < 52; i++) {\n\t\t\t\tfor (int j = 0; j < 52; j++) {\n\t\t\t\t\thome[i][j] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int i = 1; i <= M; i++) {\n\t\t\t\tfor (int j = 1; j <= N; j++) {\n\t\t\t\t\tint currentCell = in.nextInt();\n\t\t\t\t\thome[i][j] = currentCell;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint[][] fakeHome = new int[52][52];\n\t\t\tfor (int i = 0; i < 52; i++) {\n\t\t\t\tfor (int j = 0; j < 52; j++) {\n\t\t\t\t\tfakeHome[i][j] = home[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tint numOfRooms = 0, max = 0;\n\t\t\tfor (int i = 1; i <= M; i++) {\n\t\t\t\tfor (int j = 1; j <= N; j++) {\n\t\t\t\t\tif (fakeHome[i][j] >= 0) {\n\t\t\t\t\t\tsizeOfHome = 1;\n\t\t\t\t\t\tDFS(fakeHome, j, i);\n\t\t\t\t\t\tif (sizeOfHome > max) {\n\t\t\t\t\t\t\tmax = sizeOfHome;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnumOfRooms++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tint max2 = 0, start = 0, end = 0;\n\t\t\tchar a = 'N';\n\t\t\tfor (int i = 1; i <= N; i++) {\n\t\t\t\tfor (int j = M; j >= 1; j--) {\n\t\t\t\t\tfor (int m = 0; m < 52; m++) {\n\t\t\t\t\t\tfor (int n = 0; n < 52; n++) {\n\t\t\t\t\t\t\tfakeHome[m][n] = home[m][n];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tint current = fakeHome[j][i];\n\t\t\t\t\tint ifE = 0, ifN = 0;\n\t\t\t\t\tif (current >= 8) {\n\t\t\t\t\t\tcurrent -= 8;\n\t\t\t\t\t}\n\t\t\t\t\tif (current >= 4) {\n\t\t\t\t\t\tcurrent -= 4;\n\t\t\t\t\t\tifE = 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (current >= 2) {\n\t\t\t\t\t\tcurrent -= 2;\n\t\t\t\t\t\tifN = 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (ifN == 1) {\n\t\t\t\t\t\tfakeHome[j][i] -= 2;\n\t\t\t\t\t\tsizeOfHome = 1;\n\t\t\t\t\t\tDFS(fakeHome, i, j);\n\t\t\t\t\t\tif (sizeOfHome > max2) {\n\t\t\t\t\t\t\tmax2 = sizeOfHome;\n\t\t\t\t\t\t\ta = 'N';\n\t\t\t\t\t\t\tstart = i;\n\t\t\t\t\t\t\tend = j;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (int m = 0; m < 52; m++) {\n\t\t\t\t\t\t\tfor (int n = 0; n < 52; n++) {\n\t\t\t\t\t\t\t\tfakeHome[m][n] = home[m][n];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (ifE == 1) {\n\t\t\t\t\t\tfakeHome[j][i] -= 4;\n\t\t\t\t\t\tsizeOfHome = 1;\n\t\t\t\t\t\tDFS(fakeHome, i, j);\n\t\t\t\t\t\tif (sizeOfHome > max2) {\n\t\t\t\t\t\t\tmax2 = sizeOfHome;\n\t\t\t\t\t\t\ta = 'E';\n\t\t\t\t\t\t\tstart = i;\n\t\t\t\t\t\t\tend = j;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfakeHome[j][i] += 4;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(numOfRooms);\n\t\t\tSystem.out.println(max);\n\t\t\tSystem.out.println(max2);\n\t\t\tSystem.out.println(end + \" \" + start + \" \" + a);\n\t\t}\n\t}\n}\n", "generated_code": "\n\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int n = input.nextInt();\n        input.nextLine();\n        for (int i = 0; i < n; i++) {\n            String info = input.nextLine();\n            char[] p = new char[info.length()];\n            for (int j = 0; j < p.length; j++) {\n                p[j] = info.charAt(j);\n            }\n            StringBuilder prot = new StringBuilder();\n            StringBuilder host = new StringBuilder();\n            StringBuilder port = new StringBuilder();\n            StringBuilder path = new StringBuilder();\n            int j = 0;\n            while (p[j] != ':') {\n                prot.append(p[j]);\n                j++;\n            }\n            while (p[j]==':')\n                j++;\n            j+=2;\n            if (p[j]!='/') {\n                while ((j < p.length) && (p[j] != ':' && p[j] != '/')) {\n                    host.append(p[j]);\n                    j++;\n                }\n            } else {\n                j++;\n                while (j < p.length) {\n                    path.append(p[j]);\n                    j++;\n                }\n            }\n            if (j != p.length) {\n                boolean dots = false;\n                if ((j < p.length) && (p[j] == ':')) {\n                    j++;\n                    dots = true;\n                }\n                if (dots)\n                    while ((j < p.length) && (p[j] != '/')) {\n                        port.append(p[j]);\n                        j++;\n                    }\n                boolean slashss = false;\n                if ((j < p.length) && (p[j] == '/')) {\n                    j++;\n                    while (j < p.length) {\n                        path.append(p[j]);\n                        j++;\n                    }\n                }\n\n            }\n            if (port.length() == 0)\n                port.append(\"<default>\");\n            if (path.length() == 0)\n                path.append(\"<default>\");\n            System.out.println(\"URL #\" + (i + 1));\n            System.out.println(\"Protocol = \" + prot);\n            System.out.println(\"Host     = \" + host);\n            System.out.println(\"Port     = \" + port);\n            System.out.println(\"Path     = \" + path);\n            System.out.println(\"\");\n\n        }\n    }\n}\n\n", "score": 0.0}
{"id": "SHARE_1_1208_16__1_2124_18", "golden_code": " import java.util.Scanner;\n public class Main {\n\n    public static void main(String[] args) {\n         Scanner input = new Scanner(System.in);\n         int number, test, g, b;\n         test = input.nextInt();\n         input.nextLine();\n         \n         while (test-- > 0) {\n         \tnumber = input.nextInt();\n            input.nextLine();\n            String str[] = new String[number];\n            for (int i = 0; i < number; i++) {\n                str[i] = input.nextLine();\n                int first = 1;\n                for (String part : str[i].split(\" \")) {\n                \tif (first == 1) first = 0;\n                \telse System.out.print(\" \");\n                \tSystem.out.print(new StringBuilder(part).reverse().toString());\t\n                }\n                System.out.println();\n               \n            }\n            if (test != 0)\n                System.out.println();\n           }\n       }\n    }", "generated_code": "import java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\nimport java.io.BufferedReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.io.InputStream;\n\npublic class Main{\n\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tScanner scan = new Scanner(System.in);\n\t\tTaskC solver = new TaskC();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n}\n\nclass TaskC {\n\tpublic void solve(int testNumber, InputReader in, PrintWriter out) {\n\t\tMap<Character, Character> map = new HashMap<Character, Character>();\n\t\tScanner c = new Scanner(System.in);\n\t\tString a = c.nextLine(), b = c.nextLine();\n\t\tfor (int i = 0; i < a.length(); i++) {\n\t\t\tmap.put(a.charAt(i), b.charAt(i));\n\t\t}\n\t\tout.println(b);\n\t\tout.println(a);\n\t\twhile (c.hasNext()) {\n\t\t\tString s = c.nextLine();\n\t\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\t\tboolean o = false;\n\t\t\t\tfor (int j = 0; j < a.length(); j++) {\n\t\t\t\t\tif (a.charAt(j) == s.charAt(i)) {\n\t\t\t\t\t\to = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (o) {\n\t\t\t\t\tout.print(map.get(s.charAt(i)));\n\t\t\t\t} else {\n\t\t\t\t\tout.print(s.charAt(i));\n\t\t\t\t}\n\t\t\t}\n\t\t\tout.println();\n\t\t}\n\t}\n}\n\nclass InputReader {\n\tBufferedReader br;\n\tStringTokenizer st;\n\n\tpublic InputReader(InputStream in) {\n\t\tbr = new BufferedReader(new InputStreamReader(in));\n\t\tst = null;\n\t}\n\n\tpublic String next() {\n\t\twhile (st == null || !st.hasMoreTokens()) {\n\t\t\ttry {\n\t\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\treturn st.nextToken();\n\t}\n\n\tpublic int nextInt() {\n\t\treturn Integer.parseInt(next());\n\t}\n\n\tpublic long nextLong() {\n\t\treturn Long.parseLong(next());\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_2554_12__1_2554_53", "golden_code": "import java.util.*;\n\npublic class Main {\n    static class Node {\n        Node parent;\n        String name = \"\", condition = \"\";\n        int level = 0, relation = 0;\n\n        Node(String s, Node p, int r) {\n            this.name = s;\n            this.parent = p;\n            this.relation = r;\n            if (this.parent != null)\n                this.level = (this.parent).level + 1;\n        }\n    }\n\n    static class N_list {\n        public static ArrayList<Node> node_list = new ArrayList<>();\n        public static ArrayList<String> answer = new ArrayList<>();\n    }\n\n    public static void input1_parse(String s) {\n        String[] command = new String[0], mandatory = new String[0], or = new String[0], xor = new String[0];\n        s = s.trim().replaceAll(\"\\\\s+\", \"\");\n        Node root = null;\n        if (!(s.contains(\"=\"))) {\n            root = new Node(s, null, -1);\n            root.level = 0;\n            N_list.node_list.add(root);\n        }\n        else {\n            command = s.split(\"=\", 2);\n            String children = command[1];\n            if (N_list.node_list.size() == 0) {\n                root = new Node(command[0], null, -1);\n                root.level = 0;\n                N_list.node_list.add(root);\n            }\n            else {\n                boolean is_new = true;\n                for (int i = 0; i < N_list.node_list.size(); i++)\n                    if (N_list.node_list.get(i).name.equals(command[0])) {\n                        is_new = false;\n                        root = N_list.node_list.get(i);\n                    }\n                if (is_new == true) {\n                    root = new Node(command[0], null, -1);\n                    root.level = 0;\n                    N_list.node_list.add(root);\n                }\n            }\n\n            if (children.contains(\"+\")) {\n                mandatory = children.split(\"\\\\+\", 0);\n                for (int i = 0; i < mandatory.length; i++) {\n                    boolean is_new = true;\n                    for (int j = 0; j < N_list.node_list.size(); j++) {\n                        if (mandatory[i].equals(N_list.node_list.get(j).name)) {\n                            is_new = false;\n                            N_list.node_list.get(j).parent = root;\n                            N_list.node_list.get(j).relation = 0;\n                            N_list.node_list.get(j).level = root.level + 1;\n                            break;\n                        }\n                        if (mandatory[i].equals('?' + N_list.node_list.get(j).name)) {\n                            is_new = false;\n                            N_list.node_list.get(j).parent = root;\n                            N_list.node_list.get(j).relation = 3;\n                            N_list.node_list.get(j).level = root.level + 1;\n                            break;\n                        }\n                    }\n\n                    if (is_new == false) {\n                        if (mandatory[i].charAt(0) == '?')\n                            change_level(mandatory[i].substring(1, mandatory[i].length()));\n                        else\n                            change_level(mandatory[i]);\n                    }\n                    if (is_new == true) {\n                        for (int j = 0; j < N_list.node_list.size(); j++)\n                            if ((N_list.node_list.get(j).name).equals(command[0])) {\n                                Node child = new Node(mandatory[i], N_list.node_list.get(j), 0);\n                                if (mandatory[i].charAt(0) == '?') {\n                                    child.relation = 3;\n                                    child.name = mandatory[i].substring(1, mandatory[i].length());\n                                }\n                                N_list.node_list.add(child);\n                                break;\n                            }\n                    }\n                }\n            }\n            if (children.contains(\"|\")) {\n                or = children.split(\"\\\\|\", 0);\n                for (int i = 0; i < or.length; i++) {\n                    boolean is_new = true;\n                    for (int j = 0; j < N_list.node_list.size(); j++) {\n                        if (or[i].equals(N_list.node_list.get(j).name)) {\n                            is_new = false;\n                            N_list.node_list.get(j).parent = root;\n                            N_list.node_list.get(j).relation = 1;\n                            N_list.node_list.get(j).level = root.level + 1;\n                            break;\n                        }\n                    }\n                    if (is_new == false)\n                        change_level(or[i]);\n\n                    if (is_new == true) {\n                        for (int j = 0; j < N_list.node_list.size(); j++)\n                            if ((N_list.node_list.get(j).name).equals(command[0])) {\n                                Node child = new Node(or[i], N_list.node_list.get(j), 1);\n                                N_list.node_list.add(child);\n                                break;\n                            }\n                    }\n                }\n            }\n            if (children.contains(\"^\")) {\n                xor = children.split(\"\\\\^\", 0);\n                for (int i = 0; i < xor.length; i++) {\n                    boolean is_new = true;\n                    for (int j = 0; j < N_list.node_list.size(); j++) {\n                        if (xor[i].equals(N_list.node_list.get(j).name)) {\n                            is_new = false;\n                            N_list.node_list.get(j).parent = root;\n                            N_list.node_list.get(j).relation = 2;\n                            N_list.node_list.get(j).level = root.level + 1;\n                            break;\n                        }\n                    }\n                    if (is_new == false)\n                        change_level(xor[i]);\n\n                    if (is_new == true) {\n                        for (int j = 0; j < N_list.node_list.size(); j++)\n                            if ((N_list.node_list.get(j).name).equals(command[0])) {\n                                Node child = new Node(xor[i], N_list.node_list.get(j), 2);\n                                N_list.node_list.add(child);\n                                break;\n                            }\n                    }\n                }\n            }\n            if (!((children.contains(\"^\") || (children.contains(\"|\")) || (children.contains(\"+\"))))) {\n                boolean is_new = true;\n                for (int i = 0; i < N_list.node_list.size(); i++) {\n                    if (N_list.node_list.get(i).name.equals(children)) {\n                        is_new = false;\n                        N_list.node_list.get(i).parent = root;\n                        N_list.node_list.get(i).relation = 0;\n                        N_list.node_list.get(i).level = root.level + 1;\n                        break;\n                    }\n                    if (('?' + N_list.node_list.get(i).name).equals(children)) {\n                        is_new = false;\n                        N_list.node_list.get(i).parent = root;\n                        N_list.node_list.get(i).relation = 3;\n                        N_list.node_list.get(i).level = root.level + 1;\n                        break;\n                    }\n                }\n                if (is_new == false) {\n                    if (children.charAt(0) == '?')\n                        change_level(children.substring(1, children.length()));\n                    else\n                        change_level(children);\n                }\n                if (is_new == true) {\n                    for (int i = 0; i < N_list.node_list.size(); i++) {\n                        if ((N_list.node_list.get(i).name).equals(command[0])) {\n                            Node child = new Node(children, N_list.node_list.get(i), 0);\n                            if (children.charAt(0) == '?') {\n                                child.relation = 3;\n                                child.name = children.substring(1, children.length());\n                            }\n                            N_list.node_list.add(child);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    public static void input2_parse(String s) {\n        String[] test = new String[0];\n        s = s.trim().replaceAll(\"\\\\s+\", \"\");\n        s = s.substring(1, s.length() - 1);\n        test = s.split(\",\", 0);\n        N_list.answer.add(check(test));\n    }\n\n    public static void input1_convert(ArrayList<String> arr1) {\n        for (int i = 0; i < arr1.size(); i++)\n            input1_parse(arr1.get(i));\n    }\n\n    public static void input2_convert(ArrayList<String> arr2) {\n        for (int i = 0; i < arr2.size(); i++) {\n            input2_parse(arr2.get(i));\n            for (int j = 0; j < N_list.node_list.size(); j++)\n                N_list.node_list.get(j).condition = \"\";\n        }\n    }\n\n    public static void change_level(String p) {\n        for (int i = 0; i < N_list.node_list.size(); i++)\n            if (N_list.node_list.get(i).parent != null && p.equals(N_list.node_list.get(i).parent.name)) {\n                N_list.node_list.get(i).level = N_list.node_list.get(i).parent.level + 1;\n                change_level(N_list.node_list.get(i).name);\n            }\n    }\n\n    public static String check(String[] arr) {\n        int start_level = 0;\n        for (int i = 0; i < N_list.node_list.size(); i++)\n            start_level = Math.max(start_level, N_list.node_list.get(i).level);\n\n        for (int i = start_level; i >= 0; i--) {\n            for (int j = 0; j < N_list.node_list.size(); j++) {\n                Node c_node = N_list.node_list.get(j);\n                int r = c_node.relation;\n                boolean found_same = false;\n                if (c_node.level == i) {\n                    for (int k = 0; k < arr.length; k++) {\n                        if (arr[k].equals(c_node.name)) {\n                            found_same = true;\n                            if (r == -1) {\n                                if (c_node.condition.equals(\"unused\"))\n                                    return \"Invalid\";\n                                else\n                                    c_node.condition = \"used\";\n                            }\n                            if (r == 0 || r == 3 || r == 1) {\n                                if (c_node.condition.equals(\"unused\") || c_node.parent.condition.equals(\"unused\"))\n                                    return \"Invalid\";\n                                else {\n                                    c_node.condition = \"used\";\n                                    (c_node.parent).condition = \"used\";\n                                }\n                                break;\n                            }\n                            if (r == 2) {\n                                if (c_node.condition.equals(\"unused\") || c_node.parent.condition.equals(\"unused\"))\n                                    return \"Invalid\";\n                                else {\n                                    (c_node.parent).condition = \"used\";\n                                    for (int l = 1; l < N_list.node_list.size(); l++)\n                                        if (N_list.node_list.get(l).parent.equals(c_node.parent) && N_list.node_list.get(l).relation == 2)\n                                            N_list.node_list.get(l).condition = \"unused\";\n                                    c_node.condition = \"used\";\n                                }\n                                break;\n                            }\n                            break;\n                        }\n                    }\n\n                    if (!found_same) {\n                        if (c_node.condition.equals(\"used\") || c_node.parent == null)\n                            return \"Invalid\";\n                        else if (c_node.parent.condition.equals(\"used\") && r == 0)\n                            return \"Invalid\";\n                        else {\n                            if (r == -1)\n                                return \"Invalid\";\n                            if (r == 0) {\n                                c_node.condition = \"unused\";\n                                (c_node.parent).condition = \"unused\";\n                            }\n                            else\n                                c_node.condition = \"unused\";\n                        }\n                    }\n                }\n            }\n        }\n\n        for (int i = 0; i < N_list.node_list.size(); i++) {\n            Node c_node = N_list.node_list.get(i);\n            int or_child = 0, xor_child = 0;\n            boolean has_or_child = false, has_xor_child = false;\n            if (c_node.condition.equals(\"used\")) {\n                for (int l = 1; l < N_list.node_list.size(); l++) {\n                    Node child = N_list.node_list.get(l);\n                    if (child.parent.equals(c_node)) {\n                        if (child.relation == 2) {\n                            if (child.condition.equals(\"used\"))\n                                xor_child++;\n                            has_xor_child = true;\n                        }\n                        if (child.relation == 1) {\n                            if (child.condition.equals(\"used\"))\n                                or_child++;\n                            has_or_child = true;\n                        }\n                    }\n                }\n            }\n            if ((has_or_child && or_child == 0) || (has_xor_child && xor_child != 1))\n                return \"Invalid\";\n        }\n        return \"Valid\";\n    }\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        String command = \"\";\n        boolean input1_done = false;\n        ArrayList<String> input1 = new ArrayList<>();\n        ArrayList<String> input2 = new ArrayList<>();\n\n        while (!(command.equals(\"###\"))) {\n            command = input.nextLine();\n            if (!(command.equals(\"#\")) && !input1_done)\n                input1.add(command);\n            if (command.equals(\"#\")) {\n                input1_convert(input1);\n                input1.removeAll(input1);\n                input1_done = true;\n            }\n\n            if (!(command.equals(\"##\")) && !(command.equals(\"#\")) && input1_done)\n                input2.add(command);\n            if (command.equals(\"##\")) {\n                input2_convert(input2);\n                N_list.answer.add(\"+++\");\n                input2.removeAll(input2);\n                N_list.node_list.removeAll(N_list.node_list);\n                input1_done = false;\n            }\n        }\n        for (int i = 0; i < N_list.answer.size(); i++)\n            System.out.println(N_list.answer.get(i));\n    }\n}", "generated_code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        List<String> answers = new ArrayList<String>();\n        Scanner line = new Scanner(System.in);\n        String newLine = line.nextLine();\n        while ( !(newLine.equals(\"###\") ) ){\n            List<Feature> features = new ArrayList<Feature>();\n            List<String> names = new ArrayList<String>();\n            while ( !(newLine.equals(\"#\") ) ){\n                    newLine = newLine.trim().replaceAll(\"\\\\s+\", \"\");\n\n                    String divider = \"\";\n                    if (newLine.contains(\"+\")){\n                        divider = \"\\\\+\";\n                    } else if (newLine.contains(\"|\")){\n                        divider = \"\\\\|\";\n                    } else if (newLine.contains(\"^\")){\n                        divider = \"\\\\^\";\n                    }\n                    String firstName = newLine.split(\"=\")[0].trim().replaceAll(\" +\", \"\");\n                    if (names == null || names.indexOf(firstName) == -1 ){\n                        names.add(firstName);\n                        Feature first = new Feature(firstName);\n                        features.add(first);\n                    }\n                        int i = names.indexOf(firstName);\n                    String[] children;\n                    children = newLine.split(\"=\")[1].split(divider);\n                    for (String name: children\n                         ) {\n                        if (names.indexOf(name.contains(\"?\") ? name.substring(1) : name) == -1) {\n                            names.add(((name.contains(\"?\") ? name.substring(1) : name)).trim().replaceAll(\"\\\\s+\", \"\"));\n                            features.add(new Feature(name));\n                        }\n                        features.get(i).setChild(features.get(names.indexOf((name.contains(\"?\")) ? name.substring(1) : name)));\n                        if (name.contains(\"?\")) features.get(names.indexOf(name.substring(1))).optional = true;\n                    }\n\n\n                        features.get(i).setChildrenType(divider);\n\n                    newLine = line.nextLine();\n                }\n\n     newLine = line.nextLine();\n            while ( !(newLine.equals(\"##\") ) ){\n\n                for (Feature f: features) {\n                    f.childUsedCount = 0;\n                }\n                List<String> testCase = new ArrayList<String>();\n                List<Feature> testFeatures = new ArrayList<Feature>();\n                boolean Invalid = false;\n                for (String x:\n                        newLine.trim().replaceAll(\"\\\\{\",\"\").trim().replaceAll(\"}\", \"\").trim().replaceAll(\"\\\\s+\",\"\").split(\",\")\n                     ) {\n                    testCase.add(x);\n                    if (names.indexOf(x) != -1)\n                        testFeatures.add(features.get(names.indexOf(x)));\n                    else Invalid = true;\n                }\n\n                if (Invalid){\n                    answers.add(\"Invalid\");\n                    newLine = line.nextLine();\n                    break;\n                }\n\n                Invalid = true;\n\n                for (int index = 0; index < testCase.size() && Invalid; index++){\n                    if ( testFeatures.get(index).parent == null ) Invalid = false;\n                }\n\n                for (int index = 0; index < testFeatures.size() && !Invalid; index++){\n                    for (Feature feature: testFeatures.get(index).children\n                         ) {\n                        if ( feature.parentRelType == 1 && testFeatures.indexOf(feature) == -1 ){\n                            Invalid = true;\n                        }\n                        if (Invalid) break;\n                    }\n                }\n\n                for (Feature feature: testFeatures) {\n                    if (feature.parent != null)\n                        feature.parent.childUsedCount++;\n                }\n                // now we check :\n                for (Feature feature: testFeatures) {\n                        if ((feature.childRelType == 1 && feature.childUsedCount != 1)) {\n                            Invalid = true;\n                            break;\n                        }\n                        if (feature.childRelType == 2 && feature.childUsedCount < 1){\n                            Invalid = true;\n                            break;\n                        }\n                }\n\n                //if a child is present, its parent must be present too\n                for (Feature feature: testFeatures) {\n                    if (feature.parent != null){\n                        if (testFeatures.indexOf(feature.parent) == -1){\n                            Invalid = true;\n                            break;\n                        }\n                    }\n                }\n\n\n                if (Invalid){\n                    answers.add(\"Invalid\");\n                } else answers.add(\"Valid\");\n\n                newLine = line.nextLine();\n            }\n            answers.add(\"+++\");\n            newLine = line.nextLine();\n        }\n        for (String x: answers\n             ) {\n            System.out.println(x);\n        }\n    }\n}\n\nclass Feature {\n    public String name;\n    public List<String> subsName;\n    public List<Feature> children;\n    public Feature parent;\n    public boolean optional = false;\n    public int childUsedCount = 0;\n    public int childRelType = 0;\n    public int parentRelType = 0;\n\n    public Feature(String name){\n        if (name.contains(\"?\")) {\n            this.optional = true;\n            name = name.substring(1);\n        }\n        this.name = name;\n        this.children = new ArrayList<Feature>();\n        this.subsName = new ArrayList<String>();\n    }\n\n    public void setChildrenType(String divider) {\n        if (divider == \"\\\\^\") {\n            this.childRelType = 1;\n        } else if (divider == \"\\\\|\") {\n            this.childRelType = 2;\n        } else {\n            for (Feature f : this.children) {\n                if (f.optional)\n                    f.parentRelType = 2;\n                else\n                    f.parentRelType = 1;\n            }\n        }\n    }\n\n    public void setChild(Feature child){\n        child.setParent(this);\n        this.children.add(child);\n    }\n\n    public void setParent(Feature parent) {\n        this.parent = parent;\n    }\n}\n\n", "score": 1.0}
{"id": "SHARE_1_2847_28__1_2847_3", "golden_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        double[][] grades = new double[n][];\n\n        for (int i = 0; i < n; i++) {\n            int numberOfStd = scanner.nextInt();\n            grades[i] = new double[numberOfStd];\n\n            for (int j = 0; j < numberOfStd; j++) {\n                grades[i][j] = scanner.nextInt();\n            }\n\n\n            Arrays.sort(grades[i]);\n\n        }\n        for (int i = 0; i < n; i++) {\n            int size = grades[i].length;\n            double average = (grades[i][0] + grades[i][size - 1])/2;\n            double totalAverage = 0;\n            for (int j = 0; j < size; j++)\n                totalAverage += grades[i][j];\n            totalAverage /= size;\n\n            double result = Math.abs(totalAverage - average);\n            if (result < 1)\n                System.out.println(\"Yes\");\n            else\n                System.out.println(\"No\");\n\n        }\n\n\n        scanner.close();\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\n/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author Violets\n */\npublic class Main {\n    public static void main(String[] args){\n        Scanner sc=new Scanner(System.in);\n        int k=sc.nextInt();\n        for(int j=0;j<k;j++){\n            int n=sc.nextInt();\n            int min=sc.nextInt();\n            int max=min;\n            int sum=min;\n            for (int i=1;i<n;i++){\n                int buffer=sc.nextInt();\n                sum+=buffer;\n                if(max<buffer)max=buffer;\n                if(min>buffer)min=buffer;\n            }\n            \n            double avrage=sum/(n+0.0);\n            if(Math.abs((min+max)/2-avrage)<1)System.out.println(\"Yes\");\n            else System.out.println(\"No\");\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1319_50__1_2500_11", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main{\n\n    static Scanner in = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int count=0;\n        while (true) {\n            int x = in.nextInt();\n            if (Math.abs(x - 5280) == 0) {\n                break;\n            }\n            if(count++!=0)\n                System.out.println(\"\");\n            int n = 0;\n            int x1 = in.nextInt();\n            while (true) {\n\n                \n                if (x1 == x)\n                {\n                    System.out.println(\"Moving from \" + n + \" to \" + x1 + \": found it!\");\n                    break;\n                }\n                else\n                {\n                    if (Math.abs(x - n) < Math.abs(x1 - x)) \n                    {\n                        System.out.println(\"Moving from \" + n + \" to \" + x1 + \": colder.\");\n                    } else if (Math.abs(x - n) > Math.abs(x1 - x))\n                    {\n                        System.out.println(\"Moving from \" + n + \" to \" + x1 + \": warmer.\");\n                    } else if (Math.abs(x - n) == Math.abs(x1 - x))\n                    {\n                        System.out.println(\"Moving from \" + n + \" to \" + x1 + \": same.\");\n                    }\n                }\n                n=x1;\n                    x1=in.nextInt();\n            }\n        }\n    }\n}\n", "generated_code": "//K.Razavi is here\nimport javax.swing.*;\nimport java.awt.geom.*;\nimport java.math.*;\nimport java.util.*;\npublic class Main\n{\n    static boolean ok ;\n    public static void main(String[] args)\n    {\n        Scanner scan = new Scanner(System.in);\n        while(scan.hasNext())\n        {\n            long i = scan.nextLong() , j = scan.nextLong();\n            if(i == 0 && j == 0)\n                break;\n            ok = true;\n            if(i < 0 || j < 0)\n                ok = false;\n            rec(1L , (long)Math.pow(3 , i) , j);\n            System.out.println(ok ? \"Yes\" : \"No\");\n        }\n    }\n\n    private static void rec(long i, long j , long num)\n    {\n        if(j - i <= 1)\n            return;\n        if(num >= i+(j-i+1)/3 && num <= j-(j-i+1)/3)\n        {\n            ok = false;\n            return;\n        }\n        if(num >= i && num <= i + (j-i+1)/3 -1 )\n            rec(i , i + (j-i+1)/3-1 , num);\n        rec(j-(j-i+1)/3 + 1 , j , num);\n    }\n}", "score": 0.0}
{"id": "SHARE_1_1001_257__1_1001_471", "golden_code": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String args[]) throws Exception{\n        Scanner cin=new Scanner(System.in);\n        while(cin.hasNext()){\n            int a = cin.nextInt(), b = cin.nextInt();\n            System.out.println(a+b);\n        }\n    }\n}", "generated_code": "/* @BEGIN_OF_SOURCE_CODE */ \nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner get =new Scanner(System.in);\n\t\tint a, b;\n\t\twhile(get.hasNext()) {\n\t\t\ta=get.nextInt();\n\t\t\tb=get.nextInt();\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t\t\n\t}\n\n}\n/* @END_OF_SOURCE_CODE */", "score": 1.0}
{"id": "SHARE_5_1004_20__5_1004_24", "golden_code": "import java.math.BigInteger;\nimport java.util.*;\n\npublic class Main {\n    public static Vector<String> vec;\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = Integer.parseInt(in.nextLine());\n        while(n-- > 0) {\n            String str = in.nextLine();\n            parsInput(str);\n            for(int i=0 ; i<vec.size() ; i++) {\n                if(vec.elementAt(i).equals(\"*\")) {\n                    BigInteger a = new BigInteger(vec.elementAt(i-1));\n                    BigInteger b = new BigInteger(vec.elementAt(i+1));\n                    String mul = \"\" + a.multiply(b);\n                    vec.setElementAt(mul, i);\n                    vec.remove(i+1);\n                    vec.remove(i-1);\n                    i -= 1;\n                }\n            }\n            for(int i=0 ; i<vec.size() ; i++) {\n                if(vec.elementAt(i).equals(\"+\")) {\n                    BigInteger a = new BigInteger(vec.elementAt(i-1));\n                    BigInteger b = new BigInteger(vec.elementAt(i+1));\n                    String add = \"\" + a.add(b);\n                    vec.setElementAt(add, i);\n                    vec.remove(i+1);\n                    vec.remove(i-1);\n                    i -= 1;\n                }\n            }\n            BigInteger MIN = new BigInteger(vec.elementAt(0));\n            parsInput(str);\n            for(int i=0 ; i<vec.size() ; i++) {\n                if(vec.elementAt(i).equals(\"+\")) {\n                    BigInteger a = new BigInteger(vec.elementAt(i-1));\n                    BigInteger b = new BigInteger(vec.elementAt(i+1));\n                    String add = \"\" + a.add(b);\n                    vec.setElementAt(add, i);\n                    vec.remove(i+1);\n                    vec.remove(i-1);\n                    i -= 1;\n                }\n            }\n            for(int i=0 ; i<vec.size() ; i++) {\n                if(vec.elementAt(i).equals(\"*\")) {\n                    BigInteger a = new BigInteger(vec.elementAt(i-1));\n                    BigInteger b = new BigInteger(vec.elementAt(i+1));\n                    String mul = \"\" + a.multiply(b);\n                    vec.setElementAt(mul, i);\n                    vec.remove(i+1);\n                    vec.remove(i-1);\n                    i -= 1;\n                }\n            }\n            BigInteger MAX = new BigInteger(vec.elementAt(0));\n            System.out.println(\"The maximum and minimum are \" + MAX + \" and \" + MIN + \".\");\n        }\n    }\n\n    public static void parsInput(String s) {\n        vec = new Vector<String>();\n        for(int i=0 ; i<s.length() ; i++) {\n            if(s.substring(i, i+1).equals(\"*\") || s.substring(i, i+1).equals(\"+\")) {\n                vec.add(s.substring(0, i));\n                vec.add(s.substring(i, i+1));\n                s = s.substring(i+1);\n                i = 0;\n            }\n        }\n        vec.add(s);\n    }\n}\n", "generated_code": "\nimport java.math.BigInteger;\nimport java.util.*;\npublic class Main {\n   static String min(Vector<String> vin,int s){\n        String ret=\"\";\n        String st=\"\";\n\n        if(vin.size()==1 || s==vin.size()-1)\n            ret= vin.get(vin.size()-1);\n        else{\n             if(s<vin.size()-1){\n                 while(vin.contains(\"*\")){\n                  if(vin.get(s).equals(\"*\")){\n                      BigInteger x=new BigInteger(vin.get(s-1));\n                      BigInteger y=new BigInteger(vin.get(s+1));\n                      st = \"\" + x.multiply(y);\n                      vin.setElementAt(st,s);\n                      vin.remove(s-1);\n                      vin.remove(s);\n                      ret= min(vin, s);\n                  }\n                     else\n                      ret= min(vin, s + 1);\n                 }\n                 int i=0;\n                 BigInteger q=new BigInteger(\"0\");\n                   while (i<vin.size()){\n                       BigInteger a=new BigInteger(vin.get(i));\n                       q=q.add(a);\n                        i+=2;\n                   }\n                 ret=\"\" + q;\n                   /*  if(vin.get(i).equals(\"+\")) {\n                        BigInteger x= new BigInteger(vin.get(i-1));\n                        BigInteger y= new BigInteger(vin.get(i+1));\n                        ret= \"\" + x.add(y);\n                        vin.setElementAt(ret,i);\n                        vin.remove(i-1);\n                        vin.remove(i);\n                     }\n                     else i++;\n                   } */\n             }\n        }\n\n       return ret;\n   }\n   static String max(Vector<String> vin,int s){\n        String ret=\"\";\n        String st=\"\";\n\n        if(vin.size()==1 || s==vin.size()-1)\n            ret= vin.get(vin.size()-1);\n        else{\n             if(s<vin.size()-1){\n                 while(vin.contains(\"+\")){\n                  if(vin.get(s).equals(\"+\")){\n                      BigInteger x=new BigInteger(vin.get(s-1));\n                      BigInteger y=new BigInteger(vin.get(s+1));\n                      st = \"\" + x.add(y);\n                      vin.setElementAt(st,s);\n                      vin.remove(s-1);\n                      vin.remove(s);\n                      ret= max(vin,s);\n                  }\n                     else\n                      ret= max(vin,s+1);\n                 }\n                 int i=0;\n                   BigInteger q=new BigInteger(\"1\");\n                   while (i<vin.size()){\n                       BigInteger a=new BigInteger(vin.get(i));\n                       q=q.multiply(a);\n                        i+=2;\n                   }\n                 ret=\"\" + q;\n                   /*while (i<vin.size() ){\n                     if(vin.get(i).equals(\"*\")) {\n                        BigInteger x= new BigInteger(vin.get(i-1));\n                        BigInteger y= new BigInteger(vin.get(i+1));\n                        ret= \"\" + x.multiply(y);\n                        vin.setElementAt(ret,i);\n                        vin.remove(i-1);\n                        vin.remove(i);\n                     }\n                       else i++;\n                   } */\n             }\n        }\n\n       return ret;\n   }\n   static Vector<String> convert(String s){\n        Vector<String> vret=new Vector<String>();\n        Vector<Integer> index=new Vector<Integer>();\n\n       Vector<String > vel=new Vector<String>();\n        for(int i=0;i<s.length();i++)\n            if(s.charAt(i)=='+' || s.charAt(i)=='*') {\n                index.addElement(i);\n                vel.addElement(String.valueOf(s.charAt(i)));      }\n        index.addElement(s.length());\n\n        String []arr=s.split(\"\\\\+\");\n        String []ar2;\n        Vector<String> vss=new Vector<String>();\n        Vector<String> vtt=new Vector<String>();\n        for(int i=0;i<arr.length;i++)\n            vss.addElement(arr[i]);\n        for(int i=0;i<vss.size();i++){\n            ar2=(vss.get(i)).split(\"\\\\*\");\n            for(int j=0;j<ar2.length;j++)\n                vtt.addElement(ar2[j]);\n        }\n\n        for(int i=0;i<vel.size();i++){\n            vret.addElement(vtt.get(i));\n            vret.addElement(vel.get(i));\n        }\n        vret.addElement(vtt.get(vtt.size()-1));\n\n        return  vret;\n    }\n   public static void main(String argv[]){\n            Scanner in=new Scanner(System.in);\n            int n=0;\n            n=in.nextInt();\n            while(n>0){\n                String comm=in.next();\n                Vector<String> vs=new Vector<String>();\n                vs.clear();\n                vs=convert(comm);\n                BigInteger m=new BigInteger(min(vs,0));\n\n                Vector<String> vt=new Vector<String>();\n                vt.clear();\n                vt=convert(comm);\n                BigInteger x=new BigInteger(max(vt,0));\n\n                System.out.println(\"The maximum and minimum are \"+ x + \" and \" + m + \".\");\n\n                n--;\n             }\n        }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_17__1_1001_212", "golden_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(in.hasNext())\n\t\t\tSystem.out.println((in.nextInt()+in.nextInt()));\n\tin.close();\t\n\t}\n}\n", "generated_code": "import java.util.Scanner;\nimport java.lang.System;\nimport java.lang.String;\npublic class Main {\n\n    public static void main(String[] args) {\n\tScanner input=new Scanner(System.in);\n        try\n        {\n            while (true)\n            {\n                System.out.println(input.nextInt()+input.nextInt());\n            }\n        }\n        catch (Exception e )\n        {\n            System.exit(0);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_268__1_1001_384", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner i = new Scanner(System.in);\n        while (i.hasNext()) {\n            int a = i.nextInt();\n            int b = i.nextInt();\n            System.out.println(a + b);\n        }\n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner i = new Scanner(System.in);\n        while(i.hasNext())\n        System.out.println(i.nextInt()+ i.nextInt());\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2826_24__1_2826_11", "golden_code": "import java.util.*;\nimport java.io.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        int test_case;\n        int p, q;\n        int sequence;\n        char[] path = new char[100];\n\n        Scanner cin = new Scanner(System.in);\n        test_case = Integer.parseInt(cin.nextLine());\n        for (int i = 0; i < test_case; i++) {\n            String[] input = cin.nextLine().split(\"/\");\n            p = Integer.parseInt(input[0]);\n            q = Integer.parseInt(input[1]);\n            if (p == 1 && q == 1) {\n                sequence = 1;\n            } else {\n                int count = -1;\n                while (p != 1 || q != 1) {\n                    if (p < q) {\n                        path[++count] = 'L';\n                        q = q - p;\n                    } else {\n                        path[++count] = 'R';\n                        p = p - q;\n                    }\n                }\n                sequence = 1;\n                for(int j = count; j >= 0; j--)\n                    if(path[j] == 'L')\n                        sequence *= 2;\n                    else\n                        sequence = (2 * sequence) + 1;\n            }\n            System.out.println(sequence);\n        }\n    }\n}\n", "generated_code": "\n\nimport java.util.Scanner;\n\n/**\n * Created by utabrayan on 26/11/2015.\n */\npublic class Main {\n    public static void main(String[] arg) {\n        Scanner s = new Scanner(System.in);\n        String st = s.nextLine();\n        int[] ans = new int[Integer.parseInt(st)];\n        for (int i = 0; i < Integer.parseInt(st); i++) {\n            int p = 0;\n            int q = 0;\n            int count = 1;\n            String str[] = s.nextLine().split(\"/\");\n            p = Integer.parseInt(str[0]);\n            q = Integer.parseInt(str[1]);\n            String stt = \"\";\n            while (true) {\n                if (p == 1 && q == 1) {\n                    break;\n                }\n                int max = Math.max(p, q);\n               // System.out.println(\"p =\" + p + \"q =\" + q);\n                if (max == p) {\n                    p = p - q;\n                    stt += \"L\";\n                    // count = (count * 2)+1;\n                   // System.out.println(\"chap max , count =\" + count);\n                } else {\n                    q = q - p;\n                    // count = count  * 2;\n                    stt += \"R\";\n                 //   System.out.println(\"rast max , count =\" + count);\n\n                }\n\n            }\n            //ans[i] = count;\n            for (int u = 0; u < stt.length(); u++) {\n                if (String.valueOf(stt.charAt(stt.length()-1 - u)).equals(\"R\")) {\n                    count = count * 2;\n                } else {\n                    count = (count * 2) + 1;\n                }\n            }\n            ans[i] = count;\n        }\n        for (int i = 0; i < ans.length; i++) {\n            System.out.println(ans[i]);\n        }\n\n\n        //  Map<Long, Long> m = new HashMap<Long, Long>();\n        //    String num1[] = new String[st];\n      /*  for (int i = 0; i < Integer.parseInt(st); i++) {\n            num1[i]=s.nextLine();\n        }*/\n      /*  for (int i = 0; i < Integer.parseInt(st); i++) {\n            String num1 = s.nextLine();\n            Long num = Long.parseLong(num1);\n            Long count = num + 1;\n            for (int l = 1; l < num; l++) {\n                m.put((long) 1, (long) (1 / l));\n            }\n            if(Math)\n\n\n\n        }*/\n\n\n\n\n    /*    for (int i = 0; i < Integer.parseInt(st); i++) {\n            String num1 = s.nextLine();\n            Long num = Long.parseLong(num1);\n            long s1 = num * (num + 1) / 2;\n            long s2 = num * num;\n            long s3 = num * (num + 1);\n            ans[i]=s1+\" \"+s2+\" \"+s3;\n           // ans.add(i, s1 + \" \" + s2 + \" \" + s3);\n           // System.out.println(s1 + \" \" + s2 + \" \" + s3);\n        }\n        for (int i=0;i<ans.length;i++){\n            System.out.println(ans[i]);\n        }\n      /*  while (!ans.isEmpty()) {\n            System.out.println(ans.remove(0));\n        }*/\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_249__1_1478_2", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s=new Scanner(System.in);\n        \n        while (s.hasNext()) {   \n            \n            int num1=s.nextInt();\n            int num2=s.nextInt();\n            int add=num1+num2;\n            System.out.println(add);\n            \n        }\n        \n    }\n    \n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        for (int i = 0; i < n; i++) {\n            int num = s.nextInt();\n            double res=0;\n            for (int j = 1; j <= num; j++) {\n                res += Math.log10(j);\n            }\n            if(num == 1)\n                System.out.println(\"1\");\n            else\n                System.out.println((int)Math.ceil(res));\n        }\n    }\n    \n}\n", "score": 0.0}
{"id": "SHARE_1_1006_86__1_1006_130", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\t\n\t    public static void main(String[] args) {\n\t    \t        Scanner in = new Scanner(System.in);\n\t    \t                while (in.hasNext()) {\n\t    \t                \t            float c, sum = (float) 0.00;\n\t    \t                \t                        int count = 0;\n\t    \t                \t                        \n\t    \t                \t                                    c = in.nextFloat();\n\t    \t                \t                                                if (c == 0) {\n\t    \t                \t                                                \t                System.exit(0);\n\t    \t                \t                                                }\n\t    \t                \t                                                            if (c > 0.009 & c < 5.201) {\n\t    \t                \t                                                            \t\n\t    \t                \t                                                            \t                while (sum < c) {\n\t    \t                \t                                                            \t                \t                    ++count;\n\t    \t                \t                                                            \t                \t                    \n\t    \t                \t                                                            \t                \t                                        sum += (1.0 / (1 + count));\n\t    \t                \t                                                            \t                \t                                        \n\t    \t                \t                                                            \t                \t                                        \n\t    \t                \t                                                            \t                \t                                        \n\t    \t                \t                                                            \t                }\n\t    \t                \t                                                            \t                                System.out.println(count+\" card(s)\");\n\t    \t                \t                                                            }\n\t    \t                \t                                                            \n\t    \t                }\n\t    }\n}", "generated_code": "import java.util.Scanner;\n\n class Main {\n\n\tpublic static void main(String[] args) {\n\tScanner in=new Scanner (System.in);\n\t\n\t\n\twhile(true) \n\t{\n\t\tdouble f=in.nextDouble();\n\t\tint c=0;\n\t\tdouble r=0.0;\n\t\tint n=2;\n\t\tif(f!=0.00)\n\t\t{\n\t\t\twhile(r<=f)\n\t\t\t{\n\t\t\t\tdouble x=(1/(n*1.0));\n\t\t\t\tr=r+x;\n\t\t\t\tc++;\n\t\t\t\tn++;\n\t\t\t\n\t\t\t}\n\t\t\tSystem.out.println(c+\" card(s)\");\n\t\t\t\n\t\t}\n\t\telse {\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t\n\t}\n\n}\n", "score": 1.0}
{"id": "SHARE_1_1006_57__1_1006_81", "golden_code": "import java.util.Scanner;\n\n\nclass Main{\n     public static void main(String args[]){\n        \n        Scanner in = new Scanner(System.in);\n        \n        double length = in.nextFloat();\n        while(length != 0.00){\n            double temp = length;\n            double i = 2.00;\n            while(temp > 0.00 ){\n                temp -=1/i;\n                i+=1;\n            }\n            int h=(int) i;\n            System.out.println((h-2)+\" card(s)\");\n            length = in.nextDouble();\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\t   Scanner input = new Scanner(System.in);\n        double number=1;\n        double i;\n        double Division;\n        double temp = 0;\n        while(number != 0.00 )\n        {\n            number = input.nextDouble();\n            if (number <= 0.01 || number >= 5.20) System.exit(0);\n            i = 1;\n            Division = 0;\n            temp     = 0;\n            while (Division < number)\n            {\n                Division = 1/(i + 1);\n                Division += temp;\n                if   (Division >= number) {System.out.print((int)i + \" card(s)\\n\");}\n                else {temp = Division; i++;}\n            }\n\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1998_18__1_1903_12", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int n = input.nextInt();\n        for (int i = 0; i < n; i++) {\n            String s = input.next();\n            String t = \"\";\n            char s_s = s.charAt(0);\n            int c = 1;\n            for (int j = 1; j < s.length(); j++) {\n                if (s_s == s.charAt(j)) {\n                    c++;\n                } else {\n                    if (c > 1) {\n                        t += c + \"\" + s_s;\n                    } else {\n                        t += \"\" + s_s;\n                    }\n                    s_s = s.charAt(j);\n                    c = 1;\n                }\n            }\n            if (c > 1) {\n                        t += c + \"\" + s_s;\n                    } else {\n                        t += \"\" + s_s;\n                    }\n            System.out.println(t);\n        }\n    }\n\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input=new Scanner(System.in);\n        while(input.hasNext()){\n        int n=input.nextInt();\n        if(n==-1)\n            break;\n        int []s=new int[n+1];\n        int []h=new int[n+1];\n        int sum=0;\n        for(int i=1; i<=n; i++){\n            h[i]=input.nextInt();\n            s[i]=input.nextInt();\n        }\n        for (int i = 0; i <n; i++) {\n            sum += (s[i+1]-s[i])*h[i+1];   \n        }\n        System.out.println(sum+\" miles\");\n        }\n    }\n    \n}\n", "score": 0.0}
{"id": "SHARE_1_1001_95__1_1001_233", "golden_code": "import java.util.Scanner;\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\n\t\t\tScanner input = new Scanner( System.in);\n\t\t\ttry{\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(input.nextInt() + input.nextInt());\n\t\t\t}\n\t\t\tcatch( Exception e ){}\n\t}\n\n}", "generated_code": "import java.util.Scanner;\n \npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt() + cin.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2554_10__1_2554_22", "golden_code": "import java.util.*;\n\npublic class Main {\n    static class node_tree {\n        public static ArrayList<Main.Node> nodetree = new ArrayList<Main.Node>();\n        public static ArrayList<String> result = new ArrayList<>();\n        public static void empty() {\n            nodetree.removeAll(nodetree);\n        }\n    }\n\n    static class Node {\n        String name;\n        Node parent;\n        int relation = 0 , is_in_features = 0;\n        Node(String str, Node p, int r) {\n            this.name = str;\n            this.parent = p;\n            this.relation = r;\n        }\n    }\n\n    public static void convert_input1(ArrayList<String> arr) {\n        for (int i = 0; i < arr.size(); i++) {\n            parse1(arr.get(i));\n        }\n    }\n\n    public static void convert_input2(ArrayList<String> arr) {\n        for (int i = 0; i < arr.size(); i++) {\n            parse2(arr.get(i));\n        }\n    }\n    public static void parse1(String str) {\n        String[] root = new String[0];\n        String[] mandatory = new String[0];\n        String[] or = new String[0];\n        String[] xor = new String[0];\n        str = str.trim().replaceAll(\"\\\\s+\", \"\");\n        if (!(str.contains(\"=\"))) { //if the tree has only 1 Node\n            Node N = new Node(str, null, -1);\n            node_tree.nodetree.add(N);\n        } else {\n            root = str.split(\"=\",2);\n            Node a = new Node(root[0], null,-1);\n            boolean is_new = true;\n            for(int i =0 ; i<node_tree.nodetree.size();i++){\n                if(node_tree.nodetree.get(i).name.equals(root[0])) {\n                    is_new = false;\n                    a = node_tree.nodetree.get(i);\n                }\n            }\n            if(is_new){\n                node_tree.nodetree.add(a);\n            }\n            if (root[1].contains(\"+\")) {\n                mandatory = root[1].split(\"\\\\+\",0);\n                for(int i = 0;i<mandatory.length;i++){\n                    is_new =true;\n                    for(int j =0;j<node_tree.nodetree.size();j++){\n                        if(node_tree.nodetree.get(j).name.equals(mandatory[i])){\n                            is_new = false;\n                            node_tree.nodetree.get(j).parent = a ;\n                            node_tree.nodetree.get(j).relation = 0;\n                        }\n                        if(mandatory[i].equals('?'+node_tree.nodetree.get(j).name)){\n                            is_new = false;\n                            node_tree.nodetree.get(j).parent = a;\n                            node_tree.nodetree.get(j).relation = 3;\n                        }\n                    }\n                    if(is_new){\n                        if(mandatory[i].charAt(0)=='?') {\n                            Node b = new Node(mandatory[i].substring(1), a, 3);\n                            node_tree.nodetree.add(b);\n                        }\n                        else {\n                            Node b = new Node(mandatory[i],a,0);\n                            node_tree.nodetree.add(b);\n                        }\n\n                    }\n                }\n            }\n            if (root[1].contains(\"^\")) {\n                xor = root[1].split(\"\\\\^\",0);\n                for(int i = 0;i<xor.length;i++){\n                    is_new =true;\n                    for(int j =0;j<node_tree.nodetree.size();j++){\n                        if(node_tree.nodetree.get(j).name.equals(xor[i])){\n                            is_new = false;\n                            node_tree.nodetree.get(j).parent = a;\n                            node_tree.nodetree.get(j).relation = 1;\n                        }\n                    }\n                    if(is_new){\n                        Node c =new Node(xor[i], a, 1);\n                        node_tree.nodetree.add(c);\n                    }\n                }\n            }\n\n            if (root[1].contains(\"|\")) {\n                or = root[1].split(\"\\\\|\",0);\n                for(int i = 0;i<or.length;i++){\n                    is_new =true;\n                    for(int j =0;j<node_tree.nodetree.size();j++){\n                        if(node_tree.nodetree.get(j).name.equals(or[i])){\n                            is_new = false;\n                            node_tree.nodetree.get(j).parent= a;\n                            node_tree.nodetree.get(j).relation =2;\n                        }\n                    }\n                    if(is_new){\n                        Node d =new Node(or[i], a, 2);\n                        node_tree.nodetree.add(d);\n                    }\n                }\n            }\n\n            if (!((root[1].contains(\"|\")) || (root[1].contains(\"^\")) || (root[1].contains(\"+\")))) {\n                is_new =true;\n                for(int i = 0;i< node_tree.nodetree.size();i++){\n                    if(node_tree.nodetree.get(i).name.equals(root[1])){\n                        is_new= false;\n                        node_tree.nodetree.get(i).parent=a;\n                        node_tree.nodetree.get(i).relation = 0;\n                    }\n                    if(root[1].equals('?'+node_tree.nodetree.get(i).name)){\n                        is_new=false;\n                        node_tree.nodetree.get(i).parent = a;\n                        node_tree.nodetree.get(i).relation = 3;\n                    }\n                }\n                if(is_new){\n                    if(root[1].charAt(0) == '?') {\n                        Node e = new Node(root[1].substring(1), a, 3);\n                        node_tree.nodetree.add(e);\n                    }\n                    else{\n                        Node e = new Node(root[1], a, 0);\n                        node_tree.nodetree.add(e);\n                    }\n                }\n            }\n        }\n    }\n\n\n\n    public static void parse2(String str) {\n        String[] testcase = new String[0];\n        str = str.trim().replaceAll(\"\\\\s+\", \"\");\n        if(str.length()>2) {\n            str = str.substring(1, str.length() - 1);\n        }\n        else{\n            str =\" \";\n        }\n        testcase = str.split(\",\", 0);\n        node_tree.result.add(check_test(testcase));\n    }\n\n\n    public static String check_test(String[] arr) {\n        ArrayList<String> mandantory = new ArrayList();\n        ArrayList<String> xor = new ArrayList();\n        ArrayList<String> or= new ArrayList<>();\n        if(arr.length ==1){\n            if (arr[0] == \" \"){\n                return \"Invalid\";\n            }\n        }\n        for(int i=0 ;i <arr.length; i++){\n            mandantory.add(arr[i]);\n            or.add(arr[i]);\n            xor.add(arr[i]);\n            for(int k = 0 ; k< node_tree.nodetree.size();k++){\n                if(arr[i].equals(node_tree.nodetree.get(k).name)){\n                    for(int l =0 ;l<node_tree.nodetree.size();l++){\n                        if(node_tree.nodetree.get(l).relation !=-1) {\n                            if (node_tree.nodetree.get(l).parent == node_tree.nodetree.get(k)) {\n                                if(node_tree.nodetree.get(l).relation == 0){\n                                    mandantory.add(node_tree.nodetree.get(l).name);\n                                }\n                                if(node_tree.nodetree.get(l).relation == 1){\n                                    xor.add(node_tree.nodetree.get(l).name);\n                                }\n                                if(node_tree.nodetree.get(l).relation == 2){\n                                    or.add(node_tree.nodetree.get(l).name);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            for(int m =0 ;m<mandantory.size();m++){\n                if (check(arr, mandantory.get(m)) == false){\n                    mandantory.removeAll(mandantory);\n                    or.removeAll(or);\n                    xor.removeAll(xor);\n                    return \"Invalid\";\n                }\n            }\n            if (or.size() >1) {\n                int count_or =0;\n                for (int o = 0; o < or.size(); o++) {\n                    if (check(arr, or.get(o))) {\n                        count_or++;\n                    }\n                }\n                if(count_or == 1 ){\n                    mandantory.removeAll(mandantory);\n                    or.removeAll(or);\n                    xor.removeAll(xor);\n                    return \"Invalid\";\n                }\n            }\n            if(xor.size() >1) {\n                int count_xor =0;\n                for (int xo = 0; xo < xor.size(); xo++) {\n                    if (check(arr, xor.get(xo))) {\n                        count_xor++;\n                    }\n                }\n                if(count_xor != 2 ){\n                    mandantory.removeAll(mandantory);\n                    or.removeAll(or);\n                    xor.removeAll(xor);\n                    return \"Invalid\";\n                }\n            }\n            mandantory.removeAll(mandantory);\n            or.removeAll(or);\n            xor.removeAll(xor);\n        }\n        for(int i =0 ;i<arr.length;i++){\n            for(int j =0;j<node_tree.nodetree.size();j++){\n                if(node_tree.nodetree.get(j).name.equals(arr[i])){\n                    if(node_tree.nodetree.get(j).parent !=null) {\n                        if (check(arr, node_tree.nodetree.get(j).parent.name) == false) {\n                            return \"Invalid\";\n                        }\n                    }\n                }\n            }\n        }\n        return \"Valid\";\n    }\n\n    public static Boolean check(String[] arr, String str){\n        for (int i = 0;i<arr.length;i++) {\n            if (arr[i].equals(str)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        String str = \"\";\n        ArrayList<String> input1 = new ArrayList<>();\n        ArrayList<String> input2 = new ArrayList<>();\n        boolean input1_done = false;\n\n        while (!(str.equals(\"###\"))) {\n            str = scan.nextLine();\n\n            if (!(str.equals(\"#\")) && input1_done == false)\n                input1.add(str);\n\n            if (str.equals(\"#\")) {\n                convert_input1(input1);\n                input1_done = true;\n                input1.removeAll(input1);\n            }\n\n            if (input1_done && !(str.equals(\"##\")) && !(str.equals(\"#\"))){\n                input2.add(str);\n            }\n            if (str.equals(\"##\")) {\n                convert_input2(input2);\n                node_tree.result.add(\"+++\");\n                input2.removeAll(input2);\n                node_tree.empty();\n                input1_done = false;\n            }\n        }\n        for(int i =0;i<node_tree.result.size();i++){\n\t\t\tSystem.out.println(node_tree.result.get(i));\n        }\n    }\n}\n\n\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n    private String name;\n    private boolean optional;\n    private int type; //0 -> + , 1 -> | , 2 -> ^\n    private int typeCnt; // the minimum number of sub feature for type = 0\n    private ArrayList<Main> childes;\n    public static void main(String[] args) {\n        String command;\n        Scanner scanner = new Scanner(System.in);\n        while (true){\n            command = scanner.nextLine();\n            if (command.equals(\"###\"))\n                break;\n            command = command.replaceAll(\"\\\\s+\",\"\");// cleaning the white spaces\n            String[] coffeeMachine = command.split(\"=\");\n            Main root = new Main(coffeeMachine[0]); // root of the tree\n\n            ArrayList<String[]> commands = new ArrayList<>(); // a list of all represents commands\n            commands.add(coffeeMachine);\n            while (true){//gathering all the commands in cmds\n                command = scanner.nextLine();\n                command = command.replaceAll(\"\\\\s+\",\"\");\n                if (command.equals(\"#\"))\n                    break;\n\n                String[] temp2 = command.split(\"=\");//separating the feature from its sub features\n\n                commands.add(temp2);\n            }\n            add(commands, root);//creating the graph\n\n            while (true){// validation\n                command = scanner.nextLine();\n                if (command.equals(\"##\")){\n                    System.out.println(\"+++\");\n                    break;\n                }\n                check(command, root);\n            }\n        }\n    }\n\n    private static void check(String configuration, Main root) {// validation of c\n        configuration = configuration.replaceAll(\"\\\\s+\",\"\");\n        configuration = configuration.substring(1, configuration.length() -1);//removing { } from the beginning and the end of the command\n        String[] namesArr = configuration.split(\",\");\n\n        ArrayList<String> names = new ArrayList<>(Arrays.asList(namesArr));// turning the array into arraylist\n\n        if (root.validation(names) && names.size() == 1 && names.get(0).equals(root.getName()))// check the validation of the given configuration and also check whether the only remaining feature is the root of the graph or not\n            System.out.println(\"Valid\");\n        else\n            System.out.println(\"Invalid\");\n    }\n\n    private static void add(ArrayList<String[]> representations, Main root) {// forming the tree from represents commands\n        int i = 0;\n        Main r;\n        while (representations.size() > 0){\n            r = root.search(representations.get(i)[0]);// check if the laft side of the represent command exists in the graph\n            if (r != null){\n                if (representations.get(i)[1].contains(\"+\")){// check the type of the command\n                    r.addEdge(representations.get(i)[1].split(\"\\\\+\"), 0);// seperating the sub features with \",\", and adding them to the graph\n                }\n                else if (representations.get(i)[1].contains(\"|\")){\n                    r.addEdge(representations.get(i)[1].split(\"\\\\|\"), 1);\n                }\n                else if (representations.get(i)[1].contains(\"^\")){\n                    r.addEdge(representations.get(i)[1].split(\"\\\\^\"), 2);\n                }\n                representations.remove(i);\n                i -= 1;\n            }\n            i += 1;\n            if (i >= representations.size())// check whether the commands are over or not\n                i = 0;\n        }\n    }\n\n\n    public Main(String name) {\n        if (name.charAt(0) == '?') {\n            this.optional = true;\n            name = name.substring(1);//removing the ? from the name\n        }\n        this.name = name;\n        childes = new ArrayList<>();\n    }\n\n    public boolean validation(ArrayList<String> names) {\n        //DFS implementation of validation\n        if (childes.size() == 0)// if this node does not have any child return true\n            return true;\n\n        boolean[] visit = new boolean[childes.size()]; // which one of the children are visited\n\n        int nVisited = 0; // the number of visited children\n        for (int i = 0; i < childes.size(); i++) {\n            for (int j = 0; j < names.size(); j++) {\n                if (childes.get(i).getName().equals(names.get(j))){ // searching for every child\n                    names.remove(j);\n                    visit[i] = true;\n                    if(!childes.get(i).isOptional()) // does not count optional children\n                        nVisited += 1;\n                    break;\n                }\n            }\n        }\n\n        if (this.type == 0 && nVisited == typeCnt || this.type == 1 && nVisited > 0 || this.type == 2 && nVisited == 1){ // type = 0 -> it must visit all the mandatory children, type = 0 -> it must visit at least one children, type = 2 -> it must visit exactly one child\n            for (int i = 0; i < childes.size(); i++) {\n                if (visit[i] && !childes.get(i).validation(names))// if this child is visited, validate its sub features.\n                    return false;\n            }\n            return true;//if every child is valid then return true = valid\n        }\n        return false;\n    }\n\n    public Main search(String name){\n        // find the node with given name and return it recursively\n        if (this.name.equals(name)) {\n            return this;\n        }\n        for (Main child: this.childes) {\n            Main m = child.search(name);\n            if (m != null)\n                return m;\n        }\n        return null;\n    }\n\n    public void addEdge(String[] children, int type) {\n        // add given children and set the type\n        typeCnt = 0;\n        this.type = type;\n        for (String s : children) {\n            Main temp = new Main(s);\n            this.childes.add(temp);\n            if (s.charAt(0) != '?')// it only count mandatory children\n                typeCnt += 1;\n        }\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public boolean isOptional() {\n        return optional;\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_2337_5__1_1141_1", "golden_code": "/**\n * Created by Mina on 1/30/14.\n */\nimport java.math.BigInteger;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        while(input.hasNext()){\n            int n=input.nextInt();\n            if(n%2==0||n==1){\n                System.out.printf(\"2^? mod %d = 1\\n\", n);\n            }else{\n                BigInteger m=new BigInteger(\"1\");\n                int x=(int)(Math.log10(n)/Math.log10(2));\n                BigInteger N=new BigInteger(n+\"\");\n                BigInteger X=new BigInteger(x+\"\");\n                int y=(int)Math.pow(2,x);\n                BigInteger Y=new BigInteger(y+\"\");\n                while(true){\n                    BigInteger k=new BigInteger(\"0\");\n                    k=Y.mod(N);\n                    if(k.equals(new BigInteger(\"1\"))){\n                        System.out.printf(\"2^%s mod %d = 1\\n\",X, n);\n                        break;\n                    }\n                    X=X.add(new BigInteger(\"1\"));\n                    Y=Y.multiply(new BigInteger(\"2\"));\n                }\n            }\n        }\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\n        int n = s.nextInt();\n        s.nextLine();\n        for (int i = 1; n != 0; i++) {\n            String res=\"\";\n            s.nextLine();\n            String nodes = s.next();\n            char[] arr = nodes.toCharArray();\n            int m = s.nextInt();\n            int plus = (int) Math.pow(2, n) - 1;\n            for (int j = 0; j < m; j++) {\n                String path = s.next();\n                int whatnode = 1;\n                for (int k = 0; k < path.length(); k++) {\n                    if (path.charAt(k) == '0') {\n                        whatnode *= 2;\n                    } else {\n                        whatnode = whatnode * 2 + 1;\n                    }\n                }\n                res += arr[whatnode-plus-1];\n            }\n            System.out.println(\"S-Tree #\"+i+\":\");\n            System.out.println(res);\n            System.out.println();\n            n = s.nextInt();\n            s.nextLine();\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_106018_8__1_106018_10", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\twhile(input.hasNext()){\n\t\t\tint n = input.nextInt();\n\t\t\tint counter = 0;\n\t\t\tfor(int i = 2; i <= n; i++){\n\t\t\t\twhile(n%i == 0){\n\t\t\t\t\tcounter++;\n\t\t\t\t\tn /= i;\n\t\t\t\t}\n\t\t\t\tif(counter > 2)\n\t\t\t\t\tbreak;\n\t\t\t\telse if(counter < 2 && n == 0){\n\t\t\t\t\tcounter = 10;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(counter == 2)\n\t\t\t\tSystem.out.println(\"Yes\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic  static  void  main(String[] args) \n\t{\n\t\tScanner inp = new  Scanner(System.in);\n\t\twhile(inp.hasNext())\n\t\t{\n\t\t\tint num = inp.nextInt();\n\t\t\tboolean st = false;\n\t\t\tfor(int i=2;i<num;i++)\n\t\t\t{\n\t\t\t\tif(num%i!=0)\n\t\t\t\t\tcontinue;\n\t\t\t\t\n\t\t\t\tint b = num/i;\n\t\t\t\tif(isPrime(b) && isPrime(i))\n\t\t\t\t{\n\t\t\t\t\tst = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tSystem.out.println(st? \"Yes\" : \"No\");\n\t\t}\n\t}\n\t\n\tpublic static boolean isPrime(int n)\n\t{\n\t\tif(n<2)\n\t\t\treturn false;\n\t\tfor(int i=2;i<Math.sqrt(n)+1;i++)\n\t\t\tif(n!=i && n%i==0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n}\n\n", "score": 1.0}
{"id": "SHARE_1_1001_289__1_1001_161", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc =new Scanner(System.in);\n        while(sc.hasNext())\n            System.out.println(sc.nextInt() +sc.nextInt());\n    }\n\n}", "generated_code": "/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\n\n\n/**\n *\n * @author ArcxX\n */\n\n    import java.util.Scanner;\n\n\npublic class Main {\n \n    /**\n     * @param args the command line arguments\n     */\n   \n  \n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while (in.hasNext()){\n            int a = in.nextInt();\n            int b = in.nextInt();\n            System.out.println(a+b);\n        }\n    }\n}\n    \n    \n\n", "score": 1.0}
{"id": "SHARE_1_1001_260__1_1001_218", "golden_code": "//package sharecodeapb;\n\nimport java.util.*;\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\t Scanner consol = new Scanner(System.in);\n\t        while(consol.hasNext())\n\t        {\n\t            int a,b;\n\t            a=consol.nextInt();\n\t            b=consol.nextInt();\n\t            System.out.println(a+b);\n\t        }\n\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\t\t\n\t\t\tScanner s=new Scanner(System.in);\n\t\t\twhile(s.hasNext()){\n\t\t\t\tint A=s.nextInt();\n\t\t\t\tint B=s.nextInt();\n\t\t\t\tSystem.out.println(A+B);\n\t\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_65__1_1001_454", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile (in.hasNextInt()) {\n\t\t\tint a = in.nextInt();\n\t\t\tint b = in.nextInt();\n\t\t\tSystem.out.println(a + b);\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        while (sc.hasNext()) {\n            int i1 = sc.nextInt();\n            int i2 = sc.nextInt();        \n            System.out.println(i1 + i2);\n        }\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2857_32__1_2857_0", "golden_code": "import java.awt.Checkbox;\nimport java.lang.reflect.Array;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Hashtable;\nimport java.util.Map;\nimport java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner input=new Scanner(System.in);\n\t\tint t=input.nextInt();\n\t\tint n;\n\t\tint[] p;\n\t\tboolean eq=true;\n\t\twhile(t-->0) {\n\t\t\tn=input.nextInt();\n\t\t\tp=new int[n];\n\t\t\tp[0]=input.nextInt();\n\t\t\tfor(int i=1;i<n;i++) {\n\t\t\t\tp[i]=input.nextInt();\n\t\t\t\tif(eq && p[i]!=p[0])\n\t\t\t\t\teq=false;\n\t\t\t}\n\t\t\tif(eq)\n\t\t\t\tSystem.out.println(p[0]);\n\t\t\telse {\n\t\t\t\tArrays.sort(p);\n\n\t\t\t\twhile(!eq) {\n\t\t\t\t\tint a=p[n-1]-p[0];\n\t\t\t\t\tp[0]=p[n-1]=a;\t\t\t\t\t\t\t\n\t\t\t\t\teq=true;\n\t\t\t\t\tArrays.sort(p);\n\t\t\t\t\tif(p[n-1]!=p[0])\n\t\t\t\t\t\teq=false;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(p[0]);\n\t\t\t}\n\t\t}\n\t}\n}\n", "generated_code": "\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int t = in.nextInt();\n        while (t-- > 0) {\n            int n = in.nextInt();\n            ArrayList<Integer> ad = new ArrayList<Integer>();\n            while (n-- > 0) {\n                ad.add(in.nextInt());\n            }\n            Collections.sort(ad);\n\n            while (ad.size() > 1 && !check(ad)) {\n                int dif = Math.abs(ad.get(ad.size() - 1) - ad.get(0));\n                ad.remove(0);\n                ad.add(0, dif);\n                ad.remove(ad.size() - 1);\n                ad.add(dif);\n                Collections.sort(ad);\n            }\n            if (ad.size() > 1 && !check(ad)) {\n                System.out.println(\"Nope!\");\n            } else {\n                System.out.println(ad.get(0));\n            }\n        }\n    }\n\n    static boolean check(ArrayList<Integer> a) {\n        int tmp = a.get(0);\n        for (int i = 1; i < a.size(); i++) {\n            if (a.get(i) != tmp) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1001_273__1_1001_463", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\t/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\n\t\t\n\t\tScanner scan = new Scanner(System.in);\n\t\t\n\t\tint a;\n\t\tint b;\n\t\tString s=\"\";\n\t\t\n\t\twhile(scan.hasNextLine()){\n\t\ts = scan.nextLine();\n\t\t\ta=Integer.parseInt(s.split(\" \")[0]);\n\t\t\tb=Integer.parseInt(s.split(\" \")[1]);\n\n\t\t\tSystem.out.println(a+b);\n\t\t}\n\t\t\n\t\t\n\t}\n\n}\n", "generated_code": "import java.util.*;\npublic class Main{\n\tpublic static void main(String[] a){\n\t\tScanner i = new Scanner(System.in);\n\t\twhile(i.hasNext())\n\t\t\tSystem.out.println(i.nextInt()+i.nextInt());\n\t}\t\t\n}\n\t", "score": 1.0}
{"id": "SHARE_1_1001_468__1_1001_202", "golden_code": "import java.util.Scanner;\npublic class Main{\n    static Scanner input=new Scanner(System.in);\n    public static void main(String[] args){\n        while(input.hasNext()){\n            int a=input.nextInt();\n            int b=input.nextInt();\n            int c=a+b;\n            System.out.println(\"\"+c);\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner a = new Scanner(System.in);\n        while (a.hasNext())\n            System.out.println(a.nextInt()+a.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1009_74__1_1009_19", "golden_code": "\nimport java.util.*;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while(in.hasNext()){\n        float sum = 0;\n        float ave = 0;\n        for (int i = 0; i < 12; i++) {\n            sum += in.nextFloat();\n        }\n        ave = sum / 12;\n        ave=Math.round(ave*100);\n    System.out.println(\"$\" + (ave/100));\n    }}\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main{\n    public static void main(String[] args){\n        Scanner cin=new Scanner(System.in);\n        float sum=0;\n        for(int i=1;i<=12;i++)\n            sum+=cin.nextFloat();\n        System.out.printf(\"$\"+\"%.2f\\n\", (sum/12));\n    }\n}", "score": 1.0}
{"id": "SHARE_1_1001_432__1_1001_133", "golden_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}\n", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    \n    public static void main(String[] args) {\n        Scanner c=new Scanner(System.in);\n\n        int a,b;\n        while(c.hasNext()){\n        a=c.nextInt();\n        b=c.nextInt();\n            System.out.println(a+b);\n        }\n      \n    }\n\n}\n", "score": 1.0}
{"id": "SHARE_1_2735_8__5_1013_5", "golden_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\nclass Main {\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint t = sc.nextInt();\n\t\tsc.nextLine();\n\t\tint n, m;\n\t\t\n\t\tfor (int bishour = 1; bishour <= t; bishour++){\n\t\t\tn = sc.nextInt();\n\t\t\tm = sc.nextInt();\n\t\t\tsc.nextLine();\n\t\t\tint[][] c = new int[n][m];\n\t\t\tint[] satr = new int[n];\n\t\t\tint[] sotun = new int[m];\n\t\t\tint[] diag_chap = new int[n + m];\n\t\t\tint[] diag_rast = new int[n + m];\n\t\t\tfor (int i = 0; i < n; i++){\n\t\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\t\tc[i][j] = sc.nextInt();\n\t\t\t\t}\n\t\t\t\tsc.nextLine();\n\t\t\t}\n\t\t\tfor (int i = 0; i < n; i++){\n\t\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\t\tsatr[i] += c[i][j];\n\t\t\t\t\tsotun[j] += c[i][j];\n\t\t\t\t\tdiag_chap[i + j] += c[i][j];\n\t\t\t\t\tdiag_rast[j - i + n - 1] += c[i][j];\n\t\t\t\t}\n\t\t\t}\n//\t\t\tSystem.out.println(\"satr -> n\");\n//\t\t\tfor (int k = 0; k < n; k++)\n//\t\t\t{\n//\t\t\t\tSystem.out.print(satr[k] + \" \");\n//\t\t\t}\n//\t\t\tSystem.out.println();\n//\t\t\tSystem.out.println(\"sotun -> m\");\n//\t\t\tfor (int k = 0; k < m; k++)\n//\t\t\t{\n//\t\t\t\tSystem.out.print(sotun[k] + \" \");\n//\t\t\t}\n//\t\t\tSystem.out.println();\n//\t\t\tSystem.out.println(\"diag rast -> n + m\");\n//\t\t\tfor (int k = 0; k < n + m; k++)\n//\t\t\t{\n//\t\t\t\tSystem.out.print(diag_rast[k] + \" \");\n//\t\t\t}\n//\t\t\tSystem.out.println();\n//\t\t\tSystem.out.println(\"diag chap -> n + m\");\n//\t\t\tfor (int k = 0; k < n + m; k++)\n//\t\t\t{\n//\t\t\t\tSystem.out.print(diag_chap[k] + \" \");\n//\t\t\t}\n//\t\t\tSystem.out.println();\n\t\t\tint max = -1, maxi = 0, maxj = 0;\n\t\t\tfor (int i = 0; i < n; i++){\n\t\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\t\tint sum = satr[i] + sotun[j] + diag_chap[i + j] + diag_rast[j - i + n - 1] - 3 * c[i][j];\n\t\t\t\t\tif (sum > max){\n\t\t\t\t\t\tmax = sum;\n\t\t\t\t\t\tmaxi = i;\n\t\t\t\t\t\tmaxj = j;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(max);\n\t\t}\n\t}\n\n}", "generated_code": "import static java.lang.Math.pow;\nimport static java.lang.Math.sqrt;\n\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n\npublic class Main {\n\n\tprivate static ArrayList<Node> nodesList ;\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner input = new Scanner(System.in);\n\t\t\n\t\tint numberOfNode = input.nextInt();\n\t\t\n\t\tnodesList = new ArrayList<Node>();\n\t\tfor (int j = 0; j < numberOfNode; j++) {\n\t\t\tNode node = new Node();\n\t\t\tnode.setX((double)input.nextInt());\n\t\t\tnode.setY((double)input.nextInt());\n\t\t\t\n\t\t\tnodesList.add(node);\n\t\t}\n\t\t\n\t\tSortByXY(nodesList, 0);\n\t\t\n\t\t\n\t\tArrayList<Node> number = new ArrayList<Node>();\n\t\t\n\t\tfor (int i = 0; i < numberOfNode; i++) {\n\t\t\tfor (int j = i+1 ; j < numberOfNode ;j++) {\n\t\t\t\t\n\t\t\t\tint down = 0;\n\t\t\t\tint up = 0;\n\t\t\t\tint on = 0;\n\t\t\t\t\n\t\t\t\tfor (int j2 = 0; j2 < numberOfNode; j2++) {\n\t\t\t\t\tif( i!=j2 && j!=j2 ){\n\t\t\t\t\t\t\n\t\t\t\t\tif(nodesList.get(i).getX() == nodesList.get(j).getX() && nodesList.get(j).getX() < nodesList.get(j2).getX()){\n\t\t\t\t\t\t\n\t\t\t\t\t\tup++;\n\t\t\t\t\t}\n\t\t\t\t\telse if(nodesList.get(i).getX() == nodesList.get(j).getX() && nodesList.get(j).getX() > nodesList.get(j2).getX()){\n\t\t\t\t\t\t\n\t\t\t\t\t\tdown++;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(nodesList.get(i).getX() != nodesList.get(j).getX() && EquationOfLine(nodesList.get(i), nodesList.get(j), nodesList.get(j2)) > nodesList.get(j2).getY()){\n\t\t\t\t\t\t\n\t\t\t\t\t\tdown ++;\n\t\t\t\t\t}\n\t\t\t\t\tif(nodesList.get(i).getX() != nodesList.get(j).getX() && EquationOfLine(nodesList.get(i), nodesList.get(j), nodesList.get(j2)) < nodesList.get(j2).getY()){\n\t\t\t\t\t\t\n\t\t\t\t\t\tup ++;\n\t\t\t\t\t}\n\t\t\t\t\tif( ( EquationOfLine(nodesList.get(i), nodesList.get(j), nodesList.get(j2)) == nodesList.get(j2).getY() &&\n\t\t\t\t\t\t\t( nodesList.get(j2).getX() >  nodesList.get(j).getX() || nodesList.get(j2).getX() <  nodesList.get(i).getX()) )\n\t\t\t\t\t\t\t|| (nodesList.get(i).getX()==nodesList.get(j).getX() && nodesList.get(i).getX()==nodesList.get(j2).getX()) && \n\t\t\t\t\t\t\t( nodesList.get(j2).getY() >  nodesList.get(j).getY() || nodesList.get(j2).getY()<  nodesList.get(i).getY())){\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\ton ++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif((down == 0 || up ==0) && on == 0){\n\t\t\t\t\t\n\t\t\t\t\tboolean flag = true;\n\t\t\t\t\tboolean flag2 = true;\n\t\t\t\t\tfor (int k = 0; k < number.size(); k++) {\n\t\t\t\t\t\tif(number.get(k).getX() == nodesList.get(i).getX() && number.get(k).getY() == nodesList.get(i).getY())\n\t\t\t\t\t\t\tflag = false;\n\t\t\t\t\t\tif(number.get(k).getX() == nodesList.get(j).getX() && number.get(k).getY() == nodesList.get(j).getY())\n\t\t\t\t\t\t\tflag2 = false;\n\t\t\t\t\t}\n\t\t\t\t\tif(flag)\n\t\t\t\t\t\tnumber.add(nodesList.get(i));\n\t\t\t\t\tif(flag2)\n\t\t\t\t\t\tnumber.add(nodesList.get(j));\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(number.size());\n\t\t\n//\t\tfor (int i = 0; i < number.size(); i++) {\n//\t\t\tSystem.out.println(\"[\"+number.get(i).getX()+\" \"+number.get(i).getY()+\"]\");\n//\t\t}\n\t\t\n\t\tinput.close();\n\n\t}\n\t\n\tpublic static double Distance(Node begin,Node end,Node point){\n\t\tdouble out;\n\t\tdouble lenght;\n\t\tdouble x,y;\n\t\t\n\t\t\n\t\tif(end.getX()==begin.getX())\n\t\t\tout = point.getX() - begin.getX();\n\t\telse{\n\t\t\ty = end.getY() - begin.getY();\n\t\t\tx = end.getX() - begin.getX();\n\t\t\tlenght = sqrt(pow(x,2)+pow(y,2)) ;\n\t\t\ty /= lenght;\n\t\t\tx /= lenght;\n\t\t\t\n\t\t\tout = x * (point.getY() - begin.getY()) - y * (point.getX() - begin.getX());\n\t\t\t\n\t\t\tout = sqrt(pow(out,2));\n\n\t\t}\n\t\treturn out;\n\t\t\n\t}\n\t\n\tpublic static double EquationOfLine(Node begin,Node end,Node point){\n\t\t\n\t\tif(end.getX()==begin.getX())\n\t\t\treturn Double.MAX_VALUE;\n\t\telse{\n\t\t\tdouble a = end.getY()-begin.getY();\n\t\t\tdouble b = end.getX()-begin.getX();\n\t\t\tdouble c = a/b;\n\n\t\t\treturn ( (c) * (point.getX() - begin.getX()) ) + begin.getY();\n\t\t}\n\t}\n\t\n\tpublic static void SortByXY(ArrayList<Node> tree,int begin){\n\t\n\tfor (int i = begin; i < tree.size(); i++) {\n\t\tfor (int j = i; j > begin ; j--) {\n\t\t\tif(tree.get(j).getY() < tree.get(j-1).getY())\n\t\t\t{\n\t\t\t\tNode temp = new Node();\n\t\t\t\ttemp.setX(tree.get(j).getX());\n\t\t\t\ttemp.setY(tree.get(j).getY());\n\t\t\t\t\n\t\t\t\ttree.get(j).setX(tree.get(j-1).getX());\n\t\t\t\ttree.get(j).setY(tree.get(j-1).getY());\n\t\t\t\t\n\t\t\t\ttree.get(j-1).setX(temp.getX());\n\t\t\t\ttree.get(j-1).setY(temp.getY());\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfor (int i = begin; i < tree.size(); i++) {\n\t\tfor (int j = i; j > begin ; j--) {\n\t\t\tif(tree.get(j).getX() < tree.get(j-1).getX())\n\t\t\t{\n\t\t\t\tNode temp = new Node();\n\t\t\t\ttemp.setX(tree.get(j).getX());\n\t\t\t\ttemp.setY(tree.get(j).getY());\n\t\t\t\t\n\t\t\t\ttree.get(j).setX(tree.get(j-1).getX());\n\t\t\t\ttree.get(j).setY(tree.get(j-1).getY());\n\t\t\t\t\n\t\t\t\ttree.get(j-1).setX(temp.getX());\n\t\t\t\ttree.get(j-1).setY(temp.getY());\n\t\t\t}\n\t\t}\n\t}\n}\n\n}\n\nclass Node{\n\t\n\tprivate double x;\n\tprivate double y;\n\t\n\tpublic double getX() {\n\t\treturn x;\n\t}\n\tpublic void setX(double x) {\n\t\tthis.x = x;\n\t}\n\t\n\tpublic double getY() {\n\t\treturn y;\n\t}\n\tpublic void setY(double y) {\n\t\tthis.y = y;\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_2791_17__1_2857_41", "golden_code": "import java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\twhile (true) {\n\t\t\tint a = in.nextInt(), b = in.nextInt(), c = in.nextInt(), d = in.nextInt();\n\t\t\tif (a == 0 && b == 0 && c == 0 && d == 0)\n\t\t\t\tbreak;\n\t\t\tSystem.out.println((c - b) + \" \" + (d - a));\n\t\t}\n\t}\n\n}", "generated_code": "import java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scanner = new Scanner(System.in);\n\n        int t = scanner.nextInt();\n\n        for (int i = 0; i < t; i++)\n        {\n            int n = scanner.nextInt();\n            int[] x = new int[n];\n\n            for (int j = 0; j < n; j++)\n                x[j] = scanner.nextInt();\n\n            boolean flag = true;\n            while (flag)\n            {\n                Arrays.sort(x);\n\n                int a = x[n - 1] - x[0];\n\n                x[0] = a;\n                x[n - 1] = a;\n\n                int k;\n                for (k = 0; k < n-1; k++)\n                    if(x[k] != x[k+1]) break;\n\n                if (k == n-1) flag = false;\n\n            }\n\n            System.out.println(x[0]);\n        }\n\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1608_4__1_2747_47", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    static Scanner in=new Scanner(System.in);\n    public static void main(String[] args) {\n        int n=in.nextInt();\n        int min=n;\n        int p=168;\n        for (int i = 0; i < 2; i++) {\n             n=in.nextInt();\n            if(n<min){\n                min=n;\n            }\n        }\n        if(min>p){\n            System.out.println(\"NO CRASH\");\n        }\n        else{\n            System.out.println(\"CRASH \"+min);\n        }\n    \n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int n = input.nextInt();\n        String p=\"\";\n        for (int i = 0; i < n; i++) {\n            int count = 0;\n            String s = input.next();\n            if (s.matches(\".*[a-z].*\")) {\n                count++;\n            }\n            if (s.matches(\".*[A-Z].*\")) {\n                count++;\n            }\n            if(s.matches(\".*[0-9].*\")){\n                count++;\n            }\n            if(s.matches(\".*[!@#$%^&*()].*\")){\n                count++;\n            }\n            if(count==1){\n                s=\"very bad\";\n            }\n            else\n                if(count==2){\n                    s=\"bad\";\n                }\n            else\n                    if(count==3){\n                        s=\"good\";\n                    }\n            else\n                        s=\"overkill\";\n            System.out.println(s);\n        }\n    }\n\n}", "score": 0.0}
{"id": "SHARE_1_106010_7__5_1004_34", "golden_code": "import java.awt.Point;\nimport java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner input = new Scanner(System.in);\n\t\tint T = input.nextInt();\n\t\tfor(int t = 0; t < T; t++){\n\t\t\tSystem.out.println(\"Case \" + (t+1) +\":\");\n\t\t\tPoint p[] = new Point[4];\n\t\t\tfor(int i = 0; i < 4; i++)\n\t\t\t\tp[i] = new Point(input.nextInt(), input.nextInt());\n\t\t\tif(p[0].distanceSq(p[1])*p[0].distanceSq(p[2])*4 == p[0].distanceSq(p[3])*p[1].distanceSq(p[2]) || \n\t\t\t\t\tp[0].distanceSq(p[1])*p[0].distanceSq(p[3])*4 == p[0].distanceSq(p[2])*p[1].distanceSq(p[3]) || \n\t\t\t\t\tp[0].distanceSq(p[3])*p[0].distanceSq(p[2])*4 == p[0].distanceSq(p[1])*p[3].distanceSq(p[2]))\n\t\t\t\tSystem.out.println(\"Yes\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"No\");\n\t\t\tif(t < T-1)\n\t\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.Scanner;\nimport java.util.Stack;\nimport java.util.StringTokenizer;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tMain my = new Main();\n\t\tmy.run();\n\t}\n\t\n\tpublic void run()\n\t{\n\t\tScanner cin = new Scanner(System.in);\n\t\tint n = cin.nextInt();\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tString s = cin.next();\n\t\t\tlong min = eval(convertToPostfix(s, 1));\n\t\t\tlong max = eval(convertToPostfix(s, 0));\n\t\t\tSystem.out.println(\"The maximum and minimum are \"+max+\" and \"+min+\".\");\n\t\t}\n\t}\n\t\n\t   private boolean isOperator(char c) { return c == '+'  ||  c == '*';}\n\t   private boolean isSpace(char c) {return (c == ' ');}\n\t   private boolean lowerPrecedence(char op1, char op2)\n\t   {\n\t\t   if(op1=='+')\n\t\t\t   return op2=='*';\n\t\t   else\n\t\t\t   return false;\n\t   }\n\t   public String convertToPostfix(String infix,int min) \n\t   {\n\t     Stack operatorStack = new Stack();\n\t     char c;\n\t     StringTokenizer parser = new StringTokenizer(infix,\"+*\",true);\n\t     StringBuffer postfix = new StringBuffer(infix.length());\n\t        while (parser.hasMoreTokens()) \n\t        {                                         \n\t           String token = parser.nextToken();\n\t           c = token.charAt(0); \n\t           if ( (token.length() == 1) && isOperator(c) ) {\n\t        \t   if(min==1)\n\t        \t   {\n\t\t              while (!operatorStack.empty() &&\n\t\t                  !lowerPrecedence(((String)operatorStack.peek()).charAt(0), c))\n\t\t         \n\t\t                 postfix.append(\" \").append((String)operatorStack.pop());\n\t        \t   }\n\t        \t   else if(min==0)\n\t        \t   {\n\t        \t\t   while (!operatorStack.empty() &&\n\t \t\t                  lowerPrecedence(((String)operatorStack.peek()).charAt(0), c))\n\t \t\t         \n\t \t\t                 postfix.append(\" \").append((String)operatorStack.pop());\n\t        \t   }\n\t\t                 operatorStack.push(token);\n\t           }\n\t           else \n\t             postfix.append(\" \").append(token);\n\t        }\n\t        while (!operatorStack.empty())\n\t           postfix.append(\" \").append((String)operatorStack.pop());\n\t        \n\t        return postfix.toString();\n\t   }//end convertToPostfix\n\t   \n\t   private Stack<Long> operandStack;\n\t   private long evalOp(char op) {\n\t     long rhs = operandStack.pop();\n\t     long lhs = operandStack.pop();\n\t     long result = 0;\n\t     switch (op) {\n\t       case '+':\n\t         result = lhs + rhs;\n\t         break;\n\t       case '*':\n\t         result = lhs * rhs;\n\t         break;\n\t     }\n\t     return result;\n\t   }\n\t   public long eval(String expression)\n\t   {\n\t     operandStack = new Stack < Long > ();\n\t     StringTokenizer tokens = new StringTokenizer(expression);\n\t     while (tokens.hasMoreTokens()) \n\t     {\n\t         String nextToken = tokens.nextToken();\n\t         \n\t         if (Character.isDigit(nextToken.charAt(0)))\n\t           operandStack.push(Long.parseLong(nextToken));\n\t         \n\t         else if (isOperator(nextToken.charAt(0))) \n\t           operandStack.push(evalOp(nextToken.charAt(0)));\n\t         \n\t     } // End while.\n\t     \treturn ( operandStack.pop() );\n\t     }\n\t   }\n", "score": 0.0}
{"id": "SHARE_1_1001_189__1_1001_476", "golden_code": "import java.math.BigInteger;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\nwhile(s.hasNext()){\n        BigInteger a = new BigInteger(s.next());\n        BigInteger b = new BigInteger(s.next());\n        System.out.println(b.add(a));\n}\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n    public static void main (String[] args) {\n        Scanner input = new Scanner (System.in);\n        while (input.hasNextLine ()) {\n                String[] s = input.nextLine ().split (\" \");\n            int a = Integer.parseInt (s [0]);\n            int b = Integer.parseInt (s [1]);\n            System.out.println (a + b);\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_1230_56__1_1230_75", "golden_code": "import java.util.Scanner;\npublic class Main\n{\n    public static void main (String []args)\n    {\n        Scanner scan = new Scanner(System.in);\n        String str = scan.next();\n        while(str.charAt(0) != '0')\n        {\n            int k=0;\n            int n=0;\n                       while(k<str.length()) \n                       {\n                       n+=str.charAt(k)-'0';\n                       k++;\n                       }\n        int a =n;\n        int z = 0;\n        int sum=0;\n        while( a> 0)\n        {\n            a = a/10;\n            z++;\n        }\n        int [] p = new int [z];\n        a = n ;\n        while(a >= 10)\n        {\n            for(int i =p.length -1 ; i >= 0 ; i -- )\n            {\n                p[i] = a%10;\n                a = a/10;\n            }\n            for(int i = 0 ; i < p.length ; i ++ )\n                sum += p[i] ;\n                a = sum;\n                sum =0 ;\n        }\n        System.out.println( a );\n        str = scan.next();\n    }\n}\n}\n", "generated_code": "\nimport java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        \n        Scanner s=new Scanner(System.in);\n        while(true){\n            BigInteger n=new BigInteger(s.next());\n            if(n.toString().equals(\"0\")){\n                break;\n            }else{\n                String mod=n.mod(new BigInteger(\"9\")).toString();\n                if(mod.equals(\"0\")){\n                    System.out.println(\"9\");\n                }else{\n                    System.out.println(mod);\n                }\n            }\n        }\n    }\n}\n", "score": 1.0}
{"id": "SHARE_1_106017_43__1_1230_24", "golden_code": "import java.util.Scanner;\npublic class Main\n{\n\tpublic static void main(String[] arqs)\n\t{\n\t\tScanner scan = new Scanner(System.in);\n\t\tint num = 0;\n\t\tint num2 = 0;\n\t\tint a1 = 0;\n\t\tint a2 = 0;\n\t\twhile(scan.hasNext())\n\t\t{\n\t\t\tnum = scan.nextInt();\n\t\t\tnum2 = num;\n\t\t\ta1 = num2 % 10;\n\t\t\tnum2 = num2/10;\n\t\t\ta2 = num2 % 10;\n\t\t\tnum2 = num2 /10;\n\t\t\tif(num == num2*num2*num2 + a1*a1*a1 + a2*a2*a2)\n\t\t\t\tSystem.out.println(\"Yes\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t}\n}", "generated_code": "import java.util.Scanner;\nimport java.util.StringTokenizer;\n\n\npublic class Main{\npublic static void main(String []args)\n{\n\tint k=0;\n\tScanner scan=new Scanner(System.in);\n\twhile(true){\n\t\tint sum=0;\n\tString str=scan.nextLine();\n\tchar[] Char=str.toCharArray();\n\t\tif(str.equals(\"0\"))break;\n\tfor(char ch:Char)\n\t\tsum+=Integer.valueOf(String.valueOf(ch));\n\twhile(sum>9)\n\t{\n\t\tk=1;\n\t\tString str1=Integer.toString(sum);\n\t\tsum=0;\n\t\tfor(char ch1:str1.toCharArray())\n\t\t\tsum+=Integer.valueOf(String.valueOf(ch1));\n\t}\n\tSystem.out.println(sum);\n\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1993_13__1_2717_38", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\t\n\t    static Scanner in = new Scanner(System.in);\n\t    \n\t        public static void main(String[] args) {\n\t        \t        while (true) {\n\t        \t        \t            int m = in.nextInt();\n\t        \t        \t                        if (m == 0) {\n\t        \t        \t                        \t                break;\n\t        \t        \t                        }\n\t        \t        \t                                    String r = Integer.toBinaryString(m);\n\t        \t        \t                                                boolean f = true;\n\t        \t        \t                                                            int counter = r.length() - 1;\n\t        \t        \t                                                                        int i = 0;\n\t        \t        \t                                                                                    while (f) {\n\t        \t        \t                                                                                    \t                if (r.charAt(counter) != '0') {\n\t        \t        \t                                                                                    \t                \t                    f = false;\n\t        \t        \t                                                                                    \t                } else {\n\t        \t        \t                                                                                    \t                \t                    i++;\n\t        \t        \t                                                                                    \t                \t                                        counter--;\n\t        \t        \t                                                                                    \t                }\n\t        \t        \t                                                                                    }\n\t        \t        \t                                                                                                System.out.println((int)Math.pow(2, i));\n\t        \t        }\n\t        }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n=2;\n\t\tint counter =0;\n\t\twhile (true){\n\t\t\t\n\t\t\t n=sc.nextInt();counter=0;\n\t\t\t if(n==0){break;}\n\t\t\t    String s1=sc.next();\n\t\t\t\tString s2=sc.next();\n\t\t\t\tString s=sc.next();\n\t\t\t\t\n\t\t\t\tchar[] S1=new char[n];\n\t\t\t\tchar[] S2=new char[n];\n\t\t\t\tchar[] S=new char[2*n];\n\t\t\t\t\n\t\t\t\tfor(int i=0;i<n;i++){S1[i]=s1.charAt(i);\n\t\t\t\tS2[i]=s2.charAt(i);}\n\t\t\t\tfor(int i=0;i<2*n;i++){S[i]=s.charAt(i);}\n\t\t\t\t\n\n\t\t\twhile (n!=0) {\n\t\t\t\n\t\t\t\tchar[] S12=new char[2*n];\n\n\t\t\t\tint j=0; int h=0;\n\t\t\t\tfor(int i=0;i<2*n;i++){if(i%2==0){S12[i]=S2[j];j++;} else{S12[i]=S1[h];h++;}}\n\n\t\t\t\tfor(int i=0;i<n;i++) {S1[i]=S12[i];}\n\t\t\t\tint k=0;\n\t\t\t\tfor(int i=n;i<2*n;i++) {S2[k]=S12[i];k++;}\n\n\t\t\t\tint u=0;int test=0;\n\t\t\t\tfor (u=0;u<2*n;u++) {if(S12[u]==S[u]){ ;} else {counter++;test=82;break;} }\n\t\t\t\tif(counter>50){System.out.println(-1);break;}\n\t\t\t\tif(test==82){continue;}\n\t\t\t\tif(S12[2*n-1]==S[2*n-1]){System.out.println(counter+1);break;}\n\t\t\t\t\n\n\n\n\n\n\n\n\n\t\t\t             }\n\t\t\t\n\t\t} \n\t}\n}", "score": 0.0}
{"id": "SHARE_6_1010_4__1_2848_17", "golden_code": "import java.util.*;\n\npublic class Main {\n\n\tprivate ArrayList < LinkedList < Integer > > adj;\n\tprivate LinkedList < Integer > output;\n\tprivate int numOfNodes;\n\tprivate int numOfEdges;\n\tprivate int end;\n\tprivate int start;\n\n\tpublic static void main ( String [ ] args ) {\n\n\t\tScanner input = new Scanner ( System.in ); \t\n\t\tMain m = new Main ( ); \n\t\twhile ( input.hasNext ( ) ) { \n\t\t\tm.output = new LinkedList < Integer > ( );\n\t\t\tm.numOfEdges = input.nextInt ( ); \n\t\t\tm.adjacencyLists ( 501 );\n\t\t\tfor ( int i = 0 ; i < m.numOfEdges ; i ++ ) { \n\t\t\t\tint first = input.nextInt ( ); \n\t\t\t\tint last = input.nextInt ( ); \n\t\t\t\tm.adj.get ( first ).add ( last ); \n\t\t\t\tm.adj.get ( last ).add ( first );  \n\t\t\t}\n\t\t\tboolean flag = false; \n\t\t\tint c1 = 0;\n\t\t\tint c2 = 0;\n\t\t\tfor ( int i = 0 ; i < 501 ; i ++ ) {\n\t\t\t\tif ( m.adj.get ( i ).size ( ) % 2 == 1 && !flag ) {\n\t\t\t\t\tc1 = i;\n\t\t\t\t\tflag = true;\n\t\t\t\t}\n\t\t\t\telse if ( m.adj.get ( i ).size ( ) % 2 == 1 && flag ) { \n\t\t\t\t\tc2 = i;\n\t\t\t\t}\n\t\t\t\telse if ( m.adj.get ( i ).size ( ) != 0 && c1 == 0 ) {\n\t\t\t\t\tc1 = i;\n\t\t\t\t\tm.end = c1;\n\t\t\t\t\tm.start = c1;\n\t\t\t\t}\n\t\t\t\tif ( c2 != 0 ) {\n\t\t\t\t\tif ( c1 > c2 ) {\n\t\t\t\t\t\tm.end = c1;\n\t\t\t\t\t\tm.start = c2;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tm.end = c2;\n\t\t\t\t\t\tm.start = c1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tCollections.sort ( m.adj.get ( i ) );\n\t\t\t}\n\t/*\tSystem.err.println ( \"start = \" + m.start + \" end = \" + m.end );\t\n\t\t\tfor ( int i = 0 ; i < m.adj.size ( ) ; i ++ ) {\n\t\t\t\tSystem.err.print ( \"Node #\" + i + \" \" );\n\t\t\t\tfor ( int j = 0 ; j < m.adj.get ( i ).size ( ) ; j ++ )\n\t\t\t\t\tSystem.err.print ( m.adj.get ( i ).get ( j ) + \" \" );\n\t\t\t\tSystem.err.println ( );\n\t\t\t}*/\n\t\t\tm.findPath ( m.start );\t\t\t\n\t\t\tfor ( int i = 0  ; i < m.output.size ( ) ; i ++ )\n\t\t\t\tSystem.out.println ( m.output.get ( i ) );\n\t\t}\t\n\n\t}\n\tpublic void adjacencyLists(int n0) {\n\t\tnumOfNodes = n0;\n\t\tadj = new ArrayList < LinkedList < Integer > > ( numOfNodes );\n\t\tfor ( int i = 0 ; i < numOfNodes ; i ++ )\n\t\t\tadj.add ( new LinkedList < Integer > ( ) );\n\t}\n\n//\tpublic boolean checkEdge ( ) {\n//\t\tfor ( int i = 0 ; i < 500 ; i ++ ) \n//\t\t\tif ( adj.get ( i ).size ( ) != 0 )\n//\t\t\t\treturn true;\n//\t\treturn false;\n//\t}\n\n\tpublic boolean findPath ( int index ) {\n\t\tif ( index == end && numOfEdges == 0 ) {\n\t\t\toutput.add ( end );\n\t\t\treturn true;\n\t\t}\t\n\t\telse if ( index == end && adj.get ( end ).size ( ) == 0 && numOfEdges != 0 ) {\n\t\t\toutput.add ( end );\n\t\t\treturn false;\n\t\t}\n\n\t\twhile ( adj.get ( index ).size ( ) > 0  ) {\n\t\t\tint num = adj.get ( index ).get ( 0 );\n\t\t\tadj.get ( index ).remove ( 0 );\n\t\t\toutput.add ( index ); // add index;\n\t\t\tint secInd = adj.get ( num ).indexOf ( index );\n\t\t\tadj.get ( num ).remove ( secInd );\n\t\t\tnumOfEdges --;\n\t\t\t\n\t\t\tif ( findPath ( num ) == true ) { // i think it must be another statement but i dont remember it\n\t\t\t\treturn true;\n\t\t\t}\t\n\t\t\telse {\n\t\t\t\t//end start\n\t\t\t\tend = num;\n\t\t\t\tstart = num;\n\t\t\t\treturn findPath1 ( start );\n\t\t\t\t//return false\n\t\t\t}\n\t\t}\t\t\n\t\treturn false;\n\t}\n\n\tpublic boolean findPath1 ( int index ) {\n\t\tif ( index == end && numOfEdges == 0 ) {\n\t\t\treturn true; // think more;\n\t\t}\n\t\telse if ( index == end && adj.get ( end ).size ( ) == 0 && numOfEdges != 0 ) {\n//\t\t\toutput.add ( output.lastIndexOf ( end ), end );\n\t\t\treturn false;\n\t\t}\n\n\t\twhile ( adj.get ( index ).size ( ) > 0 ) {\n\t\t\tint num = adj.get ( index ).get ( 0 );\n\t\t\tadj.get ( index ).remove ( 0 );\n\t\t\toutput.add ( output.lastIndexOf\t( end ), index );\n\t\t\tint secInd = adj.get ( num ).indexOf ( index );\n\t\t\tadj.get ( num ).remove ( secInd );\n\t\t\tnumOfEdges --;\n\t\t\n\t\t\tif ( findPath1 ( num ) == true ) {\n\t\t\t\treturn true;\n\t\t\t}\t\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n}", "generated_code": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Scanner;\n\nclass Main\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner w=new Scanner(System.in);\n\t\tint t=w.nextInt();\n\t\tfor(int i=0;i<t;i++)\n\t\t{\n\t\t\tArrayList<Integer> aa=new ArrayList<Integer>();\n\t\t\tint n=w.nextInt();\n\t\t\tint c=w.nextInt();\n\t\t\tfor(int j=0;j<n;j++)\n\t\t\t\taa.add(w.nextInt());\n\t\t\tint count=0;\n\t\t\tint m=0;\n\t\t\tboolean r=true;\n\t\t\twhile(count<=n+5)\n\t\t\t{\n\t\t\t\tif(aa.get(m)!=0)\n\t\t\t\t{\n\t\t\t\t\tint e=aa.get(m)-c;\n\t\t\t\t\tif(e<0)\n\t\t\t\t\t\te=0;\n\t\t\t\t\taa.set(m, e);\n\t\t\t\t\tcount++;\n\t\t\t\t\tif(e==0){\n\t\t\t\t\t\tif(r==true)\n\t\t\t\t\t\t\tr=false;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tr=true;\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\tif(count==n+5)\n\t\t\t\t\tbreak;\n\t\t\t\tif(Collections.frequency(aa,0)==aa.size())\n\t\t\t\t\tbreak;\n\t\t\t\tif(r==true)\n\t\t\t\t{\n\t\t\t\t\tm++;\n\t\t\t\t\tif(m>=aa.size())\n\t\t\t\t\t\tm=0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tm--;\n\t\t\t\t\tif(m<0)\n\t\t\t\t\t\tm=aa.size()-1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(m+1);\n\t\t}\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_101200_13__1_2732_25", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    static Scanner in = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int x;\n        int y;\n        while (true) {\n            x = in.nextInt();\n            y = in.nextInt();\n            if (x == 0) {\n                break;\n            }\n            int a[][] = new int[x][4];\n            for (int i = 0; i < a.length; i++) {\n                for (int j = 0; j < a[0].length; j++) {\n                    a[i][j] = in.nextInt();\n                }\n            }\n            int b[][] = new int[y][2];\n            for (int i = 0; i < b.length; i++) {\n                for (int j = 0; j < b[0].length; j++) {\n                    b[i][j] = in.nextInt();\n                }\n            }\n            for (int j = 0; j < b.length; j++) {\n                int x2 = b[j][0];\n                int y2 = b[j][1];\n                y2 += x2;\n                int counter = 0;\n                for (int i = 0; i < a.length; i++) {\n                    int x1 = a[i][2];\n                    int y1 = a[i][3];\n                    y1 += x1;\n                  if(y2<x1  || y1<x2)\n                       continue;\n                   if((x1>=x2 && x1<y2) ||(y1>x2 && y1<=y2) ||(x2>=x1 && x2<y1) || (y2>x1 && y2<=y1))\n                       counter++;\n                }\n                System.out.println(counter);\n            }\n        }\n    }\n}\n", "generated_code": "import java.util.*;\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\tScanner s=new Scanner(System.in);\n\t\t\n\t\tint n=s.nextInt();\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tint x=s.nextInt();\n\t\t\tint y=s.nextInt();\n\t\t\tif(x-y==0)\n\t\t\t{\n\t\t\t\tif(x%2==0)\n\t\t\t\t\tSystem.out.println(2*x);\n\t\t\t\telse\n\t\t\t\t\tSystem.out.println(2*x-1);\n\t\t\t}\n\t\t\telse if(x-y==2)\n\t\t\t{\n\t\t\t\tif(x%2==0)\n\t\t\t\t\tSystem.out.println(x+y);\n\t\t\t\telse \n\t\t\t\t\tSystem.out.println(x+y-1);\n\t\t\t}\n\t\t\telse \n\t\t\t\tSystem.out.println(\"No Number\");\n\t\t}\n\t}\n}", "score": 0.0}
{"id": "SHARE_1_101200_15__1_1001_25", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    static Scanner in = new Scanner(System.in);\n\n    public static void main(String[] args) {\n        int x;\n        int y;\n        while (true) {\n            x = in.nextInt();\n            y = in.nextInt();\n            if (x == 0) {\n                break;\n            }\n            int a[][] = new int[x][4];\n            for (int i = 0; i < a.length; i++) {\n                for (int j = 0; j < a[0].length; j++) {\n                    a[i][j] = in.nextInt();\n                }\n            }\n            int b[][] = new int[y][2];\n            for (int i = 0; i < b.length; i++) {\n                for (int j = 0; j < b[0].length; j++) {\n                    b[i][j] = in.nextInt();\n                }\n            }\n            for (int j = 0; j < b.length; j++) {\n                int x2 = b[j][0];\n                int y2 = b[j][1];\n                y2 += x2;\n                int counter = 0;\n                for (int i = 0; i < a.length; i++) {\n                    int x1 = a[i][2];\n                    int y1 = a[i][3];\n                    y1 += x1;\n                  if(y2<x1  || y1<x2)\n                       continue;\n                   if((x1>=x2 && x1<y2) ||(y1>x2 && y1<=y2) ||(x2>=x1 && x2<y1) || (y2>x1 && y2<=y1))\n                       counter++;\n                }\n                System.out.println(counter);\n            }\n        }\n    }\n}\n\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main \n{\npublic static void main(String[]args)\n{\n\tScanner vorodi=new Scanner (System.in);\n\twhile(vorodi.hasNext())\n\t{\n\t\tint first=vorodi.nextInt();\n\t\tint last=vorodi.nextInt();\n\t\tSystem.out.println(first+last);\n\t}\n}//end of main\n}\n\n", "score": 0.0}
{"id": "SHARE_1_101147_0__1_101147_11", "golden_code": "import java.io.*;\nimport java.awt.*;\nimport java.util.*;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Scanner scan = new Scanner(System.in);\n\n        int loop = 1;\n\n        while (true)\n        {\n            int n = scan.nextInt();\n            if(n == 0) break;\n\n            int[] nums = new int[n];\n\n            for(int i = 0;i < n;i++)\n                nums[i] = scan.nextInt();\n\n            for(int res = 0;;res++)\n            {\n                if(res == 1001)\n                {\n                    System.out.println(\"Case \" + loop++ + \": not attained\");\n                    break;\n                }\n\n                boolean ok = true;\n\n                for(int i = 0;i < n-1 && ok;i++)\n                    ok = nums[i] == nums[i+1];\n\n                if(ok)\n                {\n                    System.out.println(\"Case \" + loop++ + \": \" + res + \" iterations\");\n                    break;\n                }\n\n                int[] tmp = new int[n];\n\n                for(int i = 0;i < n;i++)\n                    tmp[i] = Math.abs(nums[i]-nums[(i+1)%n]);\n\n                nums = tmp;\n            }\n        }\n    }\n}", "generated_code": "import java.util.*;\npublic class Main {\n\tpublic static void main(String args[])\n\t{\n\t\tScanner A = new Scanner(System.in);\n\t\tint q = 0;\n\t\twhile(A.hasNextInt())\n\t\t{\n\t\t\tq++;\n\t\t\tint n = A.nextInt();\n\t\t\tif(n==0)\n\t\t\t\tbreak;\n\t\t\tint x = 0;\n\t\t\tint a[] = new int[n];\n\t\t\tfor(int i = 0; i < n ;i++)\n\t\t\t\ta[i] = A.nextInt();\n\t\t\tboolean t = true;\n\t\t\twhile(t)\n\t\t\t{\n\t\t\t\tint m = a[0];\n\t\t\t\tint z = 0;\n\t\t\t\tfor(int i = 1 ; i < n ;i++)\n\t\t\t\t\tif(a[0]==a[i])\n\t\t\t\t\t\tz++;\n\t\t\t\tif(z==n-1)\n\t\t\t\t\tt = false ;\n\t\t\t\tif(t)\n\t\t\t\t{\n\t\t\t\t\tfor(int i = 0 ; i < n-1 ;i++)\n\t\t\t\t\t\ta[i] = Math.abs(a[i+1]-a[i]);\n\t\t\t\t\tx++;\n\t\t\t\t\ta[n-1]=Math.abs(a[n-1]-m);\n\t\t\t\t}\n\t\t\t\tz = 0;\n\t\t\t\tfor(int i = 1 ; i < n ;i++)\n\t\t\t\t\tif(a[0]==a[i])\n\t\t\t\t\t\tz++;\n\t\t\t\tif(z==n-1)\n\t\t\t\t\tt = false ;\n\t\t\t\tif(x >1000)\n\t\t\t\t\tt = false;\n\t\t\t}\n\t\t\tif(x < 1001) \n\t\t\t\tSystem.out.println(\"Case \"+q+\": \"+x+\" iterations\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"Case \"+q+\": not attained\");\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_2175_44__1_2500_35", "golden_code": "import java.util.*;\npublic class Main {\n\tpublic static void main(String [] args){\n\t\tScanner input=new Scanner(System.in);\n\t\t\n\t\tint[] numInRange;\n\t\twhile(input.hasNext()){\n\n\t\t\tint n=input.nextInt();\n\t\t\tnumInRange=new int[n];\n\t\t\tint a,b;\n\t\t\tboolean isJolly=true;\n\t\t\ta=input.nextInt();\n\t\t\tfor(int i=1;i<n;i++){\n\t\t\t\t\n\t\t\t\tb=input.nextInt();\n\t\t\t\tif(Math.abs(a-b)>=n)\n\t\t\t\t\tisJolly=false;\n\t\t\t\telse\n\t\t\t\t\tnumInRange[Math.abs(a-b)]++;\n\t\t\t\ta=b;\n\t\t\t}\n\t\t\t\n\t\t\tfor(int i=1;i<n && isJolly;i++){\n\t\t\t\tif(numInRange[i]>1)\n\t\t\t\t\tisJolly=false;\n\t\t\t}\n\t\t\tif(isJolly)\n\t\t\t\tSystem.out.println(\"Jolly\");\n\t\t\telse \n\t\t\t\tSystem.out.println(\"Not jolly\");\n\t\t}\n\t}\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    static boolean isOk(long j, long i) {\n        if (i <= 1) {\n            if (i == 0) {\n                return true;\n            } else if (j == 0 || j == 2) {\n                return true;\n            }\n            return false;\n        } else {\n            if ((long) Math.pow(3, i - 1) < j && j < (long) 2 * Math.pow(3, i - 1)) {\n                return false;\n            } else if ((long) Math.pow(3, i - 1) <= j) {\n                return isOk((long) Math.pow(3, i) - j - 1, i - 1);\n            } else {\n                return isOk(j, i - 1);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n\n        Scanner f = new Scanner(System.in);\n\n        long i;\n        long j;\n        while (true) {\n\n            i = f.nextLong();\n            j = f.nextLong();\n            if (i == 0 && j == 0) {\n                break;\n            }\n            if (i < 0 || j < 0) {\n                System.out.println(\"No\");\n                continue;\n            }\n            if (j >= (long) Math.pow(3, i) || j == 0) {\n                System.out.println(\"Yes\");\n                continue;\n            }\n            if (!isOk(j - 1, i)) {\n                System.out.println(\"No\");\n            } else {\n                System.out.println(\"Yes\");\n            }\n        }\n\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1319_75__1_2500_50", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        java.util.List<String[]> list = new java.util.ArrayList<String[]>();\n        while (input.hasNext()) {\n            String[] num = input.nextLine().split(\" \");\n            if (num[0].matches(\"5280\")) {\n                break;\n            }\n            list.add(num);\n        }\n        int x = 0;\n        for (String[] nums : list) {\n            int m = Integer.valueOf(nums[0]), old = 0;\n            if (x != 0) {\n                System.out.println();\n            }\n            for (int i = 1; i < nums.length; i++) {\n                int n = Integer.valueOf(nums[i]);\n                if (m == n) {\n                    System.out.println(\"Moving from \" + old + \" to \" + n + \": found it!\");\n                    break;\n                }\n                if (Math.abs(m - n) == Math.abs(m - old)) {\n                    System.out.println(\"Moving from \" + old + \" to \" + n + \": same.\");\n                }\n                if (Math.abs(m - n) < Math.abs(m - old)) {\n                    System.out.println(\"Moving from \" + old + \" to \" + n + \": warmer.\");\n                }\n                if (Math.abs(m - n) > Math.abs(m - old)) {\n                    System.out.println(\"Moving from \" + old + \" to \" + n + \": colder.\");\n                }\n                old = n;\n            }\n            x++;\n        }\n    }\n}", "generated_code": "\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n   \n        \n        Scanner number = new Scanner(System.in);\n        \n      while(true){       \n        double n=number.nextDouble(); \n        double m= number.nextDouble(); \n        while (m==0 && n==0){ \n            System.exit(0);\n        }\n       \n        System.out.println(CuttingWood(m,n));\n        \n    } }\n    \n   static String  CuttingWood(double m,double n){ \n\n     double tool= Math.pow(3, n); \n     \n     \n     if(m>=1 && m<=(tool/3)) {\n \n         return (CuttingWood(m,n-1))  ;\n      \n     }\n     else if ( m >=(tool/3) && m<=(tool/3)*2)\n     {\n         return \"No\";\n                 \n         }\n     if(n==0){\n         return \"Yes\";\n     }\n     \n     else if (n==1){\n         return \"Yes\";\n     }\n    \n     else {\n      \n      tool=tool/3;\n         return (CuttingWood(m-((tool)*2), n-1))  ;\n     }\n   } } \n     ", "score": 0.0}
{"id": "SHARE_1_2121_49__1_1089_5", "golden_code": "import java.math.BigInteger;\nimport java.util.Scanner;\n\npublic class Main {\n\n\tpublic static void main(String[] args)\n\t{\n\t\tScanner scanner = new Scanner(System.in );\n\n\t\twhile(scanner.hasNext())\n\t\t{\n\t\t\tint n = scanner.nextInt();\n\t\t\tif(n==1 || n==2)\n\t\t\t{\n\t\t\t\tSystem.out.println(1);\n\n\t\t\t}else{\n\t\t\t\tBigInteger a=BigInteger.ONE;\n\t\t\t\tBigInteger b=BigInteger.ONE;\n\t\t\t\tBigInteger sum=BigInteger.ZERO;\n\t\t\t\tfor (int i = 2; i<n;i++) {\n\t\t\t\t\tsum=a.add(b);\n\t\t\t\t\ta=b;\n\t\t\t\t\tb=sum;\n\t\t\t\t}\n\t\t\t\tSystem.out.println(sum);\n\t\t\t}\n\n\t\t}\n\t}\n}\n", "generated_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tScanner s = new Scanner(System.in);\n\t\tint k = 1;\n\t\twhile(true){\n\t\t\tdouble a = s.nextDouble();\n\t\t\tdouble b = s.nextDouble();\n\t\t\tdouble c  = s.nextDouble();\n\t\t\tif(a + b + c == 0) break;\n\t\t\tSystem.out.println(\"Triangle #\"+k);\n\t\t\tif(a == -1){\n\t\t\t\tif( b >= c) System.out.println(\"Impossible.\");\n\t\t\t\telse{\n\t\t\t\t\ta = Math.sqrt(Math.pow(c, 2) - Math.pow(b, 2));\n\t\t\t\t\tSystem.out.println(String.format(\"a = %.3f\", Math.round(a*1000)/1000.0));\n\t\t\t\t}\n\t\t\t}else if(b == -1){\n\t\t\t\tif( a >= c) System.out.println(\"Impossible.\");\n\t\t\t\telse{\n\t\t\t\t\tb = Math.sqrt(Math.pow(c, 2) - Math.pow(a, 2));\n\t\t\t\t\tSystem.out.println(String.format(\"b = %.03f\", Math.round(b*1000)/1000.0));\n\t\t\t\t}\n\t\t\t}else if(c == -1){\n\t\t\t\tc = Math.sqrt(Math.pow(b, 2) + Math.pow(a, 2));\n\t\t\t\tSystem.out.println(String.format(\"c = %.3f\", Math.round(c*1000)/1000.0));\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t\tk++;\n\t\t}\n\t}\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_348__1_2715_3", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner x = new Scanner(System.in);\n        while (x.hasNext()) {\n            int a=x.nextInt();\n            int b=x.nextInt();\n            System.out.println(a+b);\n        }\n    }\n}", "generated_code": "\nimport java.util.Scanner;\n\n/**\n *\n * @author Mina\n */\npublic class Main {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO code application logic here\n         Scanner input = new Scanner(System.in);\n        int n = input.nextInt();\n        while (n != 0) {\n            input.nextLine();\n            String s=input.nextLine();\n            s=s.toUpperCase();\n            char[]ch=new char[2];\n            long[][]a=new long[n+1][n+1];\n            ch=s.toCharArray();\n            for(int i=1;i<=n;i++){\n                for(int j=0;j<n-i+1;j++){\n                    if(i==1 || i==2){\n                        a[j][j+i-1]=0;\n                    }else{\n                        long m=0;\n                        if((ch[j]=='A' && ch[j+i-1]=='U')||(ch[j]=='U' && ch[j+i-1]=='A')||(ch[j]=='C' && ch[j+i-1]=='G')||(ch[j]=='G' && ch[j+i-1]=='C')){\n                            m=1+a[j+1][j+i-2];  \n                        \n                        }\n                            for (int k = j; k < j+i-1; k++) {\n                                m=Math.max(m,a[j][k]+a[k+1][j+i-1]);\n                          }\n                            \n                             a[j][j+i-1]=m;\n                        }\n                       \n                    \n                    \n                }\n            }\n            System.out.println(a[0][n-1]);\n            \n            \n            n=input.nextInt();\n        }\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_2747_22__1_2747_53", "golden_code": "\nimport java.util.Scanner;\npublic class Main {\nstatic Scanner a = new Scanner(System.in);\n    public static void main(String[] args) {\n    while(a.hasNext()){\n    int d=0,z=a.nextInt();\n    for(int i = 0 ; i<z;i++)\n    {\n    String s=a.next();\n    char[] b = s.toCharArray();\n        for (int j = 0; j < b.length; j++) {\n            if(b[j]=='A'||b[j]=='B'||b[j]=='C'||b[j]=='D'||b[j]=='E'||b[j]=='F'||b[j]=='G'||b[j]=='H'||b[j]=='I'||b[j]=='J'||b[j]=='K'||b[j]=='L'||b[j]=='M'||b[j]=='N'||b[j]=='O'||b[j]=='P'||b[j]=='Q'||b[j]=='R'||b[j]=='S'||b[j]=='T'||b[j]=='U'||b[j]=='V'||b[j]=='W'||b[j]=='X'||b[j]=='Y'||b[j]=='Z'){\n                d++;\n                break;\n            }\n        }\n        for (int j = 0; j < b.length; j++) {\n            if (b[j]=='a'||b[j]=='b'||b[j]=='c'||b[j]=='d'||b[j]=='e'||b[j]=='f'||b[j]=='g'||b[j]=='h'||b[j]=='i'||b[j]=='j'||b[j]=='k'||b[j]=='l'||b[j]=='m'||b[j]=='n'||b[j]=='o'||b[j]=='p'||b[j]=='q'||b[j]=='r'||b[j]=='s'||b[j]=='t'||b[j]=='u'||b[j]=='v'||b[j]=='w'||b[j]=='x'||b[j]=='y'||b[j]=='z') {\n                d++;\n                break;\n            }\n        }\n        for (int j = 0; j < b.length; j++) {\n            if (b[j] == '0'||b[j] == '1'||b[j] == '2'||b[j] == '3'||b[j] == '4'||b[j] == '5'||b[j] == '6'||b[j] == '7'||b[j] == '8'||b[j] == '9') {\n                d++;\n                break;\n            }\n        }\n        for (int j = 0; j < b.length; j++) {\n            if (b[j] == '!' ||b[j] == '@' ||b[j] == '#' ||b[j] == '$' ||b[j] == '%' ||b[j] == '^' ||b[j] == '&' ||b[j] == '*' ||b[j] == '(' ||b[j] == ')') {\n               d++;\n               break;\n                \n            }\n        }\n     if (d==1)\n                System.out.println(\"very bad\");\n            else if(d == 2)\n             System.out.println(\"bad\");\n            else if (d == 3)\n                System.out.println(\"good\");\n            else if (d == 4)\n                System.out.println(\"overkill\");\n\n        d=0;\n    }\n    }\n    }\n    }\n\n", "generated_code": "import java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tin.nextLine();\n\t\twhile (n-- > 0) {\n\t\t\tboolean a[] = new boolean[4];\n\t\t\tbyte[] s = in.nextLine().getBytes();\n\t\t\tfor (int i = 0; i < s.length; i++) {\n\t\t\t\tif (64 < s[i] && s[i] < 91)\n\t\t\t\t\ta[0] = true;\n\t\t\t\telse if (96 < s[i] && s[i] < 123)\n\t\t\t\t\ta[1] = true;\n\t\t\t\telse if (47 < s[i] && s[i] < 58)\n\t\t\t\t\ta[2] = true;\n\t\t\t\telse\n\t\t\t\t\ta[3] = true;\n\t\t\t}\n\t\t\tint c = 0;\n\t\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\t\tif (a[i])\n\t\t\t\t\tc++;\n\t\t\t}\n\t\t\tif (c == 4)\n\t\t\t\tSystem.out.println(\"overkill\");\n\t\t\telse if (c == 3)\n\t\t\t\tSystem.out.println(\"good\");\n\t\t\telse if (c == 2)\n\t\t\t\tSystem.out.println(\"bad\");\n\t\t\telse\n\t\t\t\tSystem.out.println(\"very bad\");\n\t\t}\n\t}\n}\n", "score": 1.0}
{"id": "SHARE_1_2713_48__1_1659_7", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\tpublic static void main (String args[]){\n\t\tScanner in = new Scanner(System.in);\n\t\twhile(true){\n\t\t\tint n = in.nextInt();\n\t\t\tif(n==0)\n\t\t\t\tbreak;\n\t\t\tint a = n ;\n\t\t\tint ans = 1 ;\n\t\t\twhile(a!=1){\n\t\t\t\tif(a%2==0){\n\t\t\t\t\ta = a/2;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ta = a*3 + 1;\n\t\t\t\t}\n\t\t\t\tans++;\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main{\n    public static void main(String args[]){\n        Scanner cin=new Scanner(System.in);\n        Double a,b;\n        a=cin.nextDouble();\n        while(a!=999){\n            b=cin.nextDouble();\n            if(b==999)\n                break;\n            System.out.printf(\"%.2f\\n\",(b-a));\n            a=b;\n        }\n        System.out.println(\"End of Output\");\n    }\n}\n", "score": 0.0}
{"id": "SHARE_1_1001_75__1_1001_483", "golden_code": "import java.util.Scanner;\n\npublic class Main{\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner( System.in );\n        try{\n            while( true ){\n                System.out.println( input.nextInt() + input.nextInt() );\n            }\n        }catch( Exception e ){}\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main{\n\n\tpublic static void main(String[] args){\n\t\tScanner sc =new Scanner(System.in);\n\t\t\twhile(sc.hasNext()){\n\t\t\t\tint a=sc.nextInt();\n\t\t\t\tint b=sc.nextInt();\n\t\t\t\tSystem.out.println(a+b);\n\t\t\t}\n\t}\n\n}", "score": 1.0}
{"id": "SHARE_1_2717_40__1_2717_18", "golden_code": "\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String args[]){\n        Scanner in = new Scanner(System.in);\n        int n=in.nextInt();\n        while(n!=0){\n            c=0;\n            String s1=in.next();\n            String s2=in.next();\n            String s=in.next();\n            int a=f(s1,s2,s);\n            if(a==51)\n                a=-1;\n            System.out.println(a);\n            n=in.nextInt();\n        }\n    }\n    static int c=0; \n    private static int f(String s1, String s2, String s) {\n        c++;\n        if(c>50)\n            return 1;\n        String s12=\"\";\n        for (int i = 0; i < s1.length(); i++) {\n            s12+=\"\"+s2.charAt(i)+s1.charAt(i);\n        }\n        int k=1;\n        if(s.equals(s12))\n            return k;\n        else\n            k+=f(s12.substring(0, s12.length()/2), s12.substring(s12.length()/2, s12.length()), s);\n        return k;\n    }\n}\n", "generated_code": "import java.util.Scanner;\n\npublic class Main {\n\tstatic String shuffle(String s1, String s2) {\n\t\tString s = \"\";\n\t\tfor(int i = 0; i < s1.length(); i++) {\n\t\t\ts += s2.charAt(i);\n\t\t\ts += s1.charAt(i);\n\t\t}\n\t\treturn s;\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile(true) {\n\t\t\tint n = sc.nextInt();\n\t\t\tif (n == 0) break;\n\t\t\tString s1 = sc.next();\n\t\t\tString s2 = sc.next();\n\t\t\tString s = sc.next();\n\t\t\tString s0;\n\t\t\tint i;\n\t\t\tfor (i = 1; i < 51; i++) {\n\t\t\t\ts0 = shuffle(s1, s2);\n\t\t\t\tif (s0.equals(s)) { System.out.println(i); break;}\n\t\t\t\ts1 = s0.substring(0, s0.length()/2);\n\t\t\t\ts2 = s0.substring(s0.length()/2);\n\t\t\t}\n\t\t\tif (i == 51) System.out.println(-1);\n\t\t}\n\t}\n}", "score": 1.0}
{"id": "SHARE_1_2737_8__1_1104_14", "golden_code": "import java.util.Scanner;\n\n\npublic class Main {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tScanner input=new Scanner(System.in);\n\t\tint numberofInputs=Integer.parseInt(input.nextLine());\n\t\tfor(int i=0;i<numberofInputs;i++)\n\t\t{\n\t\t\tint sum=0;\n\t\t\tString myInput=input.nextLine();\n\t\t\tint n=Integer.parseInt(myInput.split(\" \")[0]);\n\t\t\tint m=Integer.parseInt(myInput.split(\" \")[1]);\n\t\t\tfor(int j=0;j<m;j++)\n\t\t\t{\n\t\t\t\tsum+=countSum(n+j-1)-countSum(j-1);\n\t\t\t}\n\t\t\tSystem.out.println(sum);\n\n\t\t}\n\n\t}\n\t\n\tpublic static int countSum(int end)\n\t{\n\t\tif(end<=0)\n\t\t\treturn 0;\n\t\treturn end*(end+1)/2;\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n  Scanner p=new Scanner(System.in);\n  int t=p.nextInt();\n  p.nextLine();\n  for(int i=0;i<t;i++){\n      System.out.println(r(p.nextLine()));\n  }\n    }\n    static String r(String s){\n\t\tString x = \"\";\n\t\tfor(char ch : s.toCharArray()){\n\t\t\tx = ch+\"\"+x;\n\t\t}\n\t\treturn x;\n\t}\n}\n", "score": 0.0}
{"id": "SHARE_1_1088_38__1_2578_36", "golden_code": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        in.nextLine();\n        String alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        for (int i = 0; i < n; i++) {\n            String str = in.nextLine().toUpperCase().trim();\n            StringBuilder m = new StringBuilder();\n            for (int j = 0; j < str.length(); j++)\n                m.append(alpha.charAt((alpha.indexOf(str.charAt(j)) + 1) % 26));\n            System.out.println(\"String #\" + (i + 1));\n            System.out.println(m);\n           System.out.println();\n        }\n    }\n}", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args){\n        Scanner scan = new Scanner(System.in);\n        int num = scan.nextInt();\n        scan.nextLine();\n        while(num>0){\n            \n            String name;\n            int g=0, b=0;\n            name = scan.nextLine();\n            \n            for(int i=0; i<name.length(); i++){\n                if(name.charAt(i)=='g' || name.charAt(i)=='G')\n                    g++;\n                if(name.charAt(i)=='b' || name.charAt(i)=='B')\n                    b++;\n            }\n            \n            if(g>b)\n                System.out.println(name + \" is GOOD\");\n            else if(g<b)\n                System.out.println(name + \" is A BADDY\");\n            else\n                System.out.println(name + \" is NEUTRAL\");\n            \n            num--;\n        \n        }\n    }\n    \n}", "score": 0.0}
{"id": "SHARE_1_1001_196__1_1001_425", "golden_code": "import java.util.Scanner;\n\npublic class Main {\n    static Scanner in = new Scanner(System.in);\n    public static void main(String[] args) {\n        while(in.hasNextInt()){\n            System.out.println(in.nextInt() + in.nextInt());\n        }\n    }\n}", "generated_code": "\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner cin = new Scanner(System.in);\n        while (cin.hasNext())\n            System.out.println(cin.nextInt()+cin.nextInt());\n    }\n}", "score": 1.0}
{"id": "SHARE_1_2741_1__1_1565_4", "golden_code": "import java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.Scanner;\n\n/**\n * Created by ali on 10/16/14.\n */\npublic class Main\n{\n\tprivate final static int [] dx = new int[] { 1, 2, 1, 2,-1,-2,-1,-2};\n\tprivate final static int [] dy = new int[] { 2, 1,-2,-1, 2, 1, -2,-1};\n\tprivate static long [][][] dp = new long[1000][10][10];\n\n\tpublic static void main(String [] args)\n\t{\n\t\tScanner in = new Scanner(System.in);\n\n\n\t\twhile(in.hasNext())\n\t\t{\n\n\t\t\tString a = in.next();\n\t\t\tString b = in.next();\n\n\t\t\tint[] p1 = get(a);\n\t\t\tint[] p2 = get(b);\n\n\t\t\tfor(long [][] fill1 : dp)\n\t\t\t\tfor(long [] fill2 : fill1)\n\t\t\t\t\tArrays.fill(fill2, -1);\n\n\t\t\tint res = bfs(p1[0], p1[1], p2[0], p2[1]);\n\n\t\t\tSystem.out.println(\"To get from \"+a+\" to \"+b+\" takes \"+res+\" knight moves.\");\n\t\t}\n\t}\n\n\tprivate static int[] get(String a)\n\t{\n\t\tint [] res = new int[2];\n\t\tres[0] = a.charAt(0)-'a';\n\t\tres[1] = a.charAt(1) - '1';\n\n\t\treturn res;\n\t}\n\n\tprivate static int bfs(int x1, int y1, int x2, int y2)\n\t{\n\t\tint [][] best = new int[8][8];\n\t\tfor(int [] fill : best)\n\t\t\tArrays.fill(fill, 1000000000);\n\n\t\tQueue<Integer> queue = new LinkedList<Integer>();\n\t\tqueue.offer(x1);\n\t\tqueue.offer(y1);\n\t\tbest[x1][y1] = 0;\n\n\t\twhile(!queue.isEmpty())\n\t\t{\n\t\t\tint ax = queue.poll();\n\t\t\tint ay = queue.poll();\n\t\t\tfor (int d = 0; d < 8; d++)\n\t\t\t{\n\t\t\t\tint tx = ax + dx[d];\n\t\t\t\tint ty = ay + dy[d];\n\n\t\t\t\tif (tx < 0 || ty < 0 || tx >= 8 || ty >= 8)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tif(best[tx][ty] != 1000000000)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tqueue.offer(tx);\n\t\t\t\tqueue.offer(ty);\n\n\t\t\t\tbest[tx][ty] = best[ax][ay] + 1;\n\t\t\t}\n\t\t}\n\n\t\treturn best[x2][y2];\n\t}\n}\n", "generated_code": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Scanner;\n\n/**\n * Created by lenovo Y500 on 7/23/2015.\n */\npublic class Main {\n\n    public static void main(String[] args) {\n\n        ArrayList<Integer> rope=new ArrayList<Integer>();\n        ArrayList<Integer> result=new ArrayList<Integer>();\n        int num;\n        Scanner reader=new Scanner(System.in);\n        num=reader.nextInt();\n        for (int i = 0; i <num ; i++) {\n\n            int count=reader.nextInt();\n            for (int j = 0; j <count ; j++) {\n                int temp=reader.nextInt();\n                rope.add(temp);\n\n            }\n\n            Collections.sort(rope);\n            int size=rope.size();\n            for (int j = 0; j <rope.size() ; j++)\n            {\n\n                result.add(rope.get(j)*size);\n                size--;\n\n            }\n            Collections.sort(result);\n            System.out.println(result.get(result.size()-1));\n            rope.clear();\n            result.clear();\n        }\n\n    }\n\n}\n", "score": 0.0}
{"id": "SHARE_1_1478_11__1_1089_44", "golden_code": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class Main {\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n\t\tint n = Integer.parseInt(input.readLine());\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tlong a = Long.parseLong(input.readLine());\n\t\t\tdouble sum = 0;\n\t\t\tfor (long j = 2; j <= a; j++) {\n\t\t\t\tsum += Math.log10(j);\n\t\t\t}\n\t\t\tSystem.out.println((long)sum + 1);\n\t\t}\n\t}\n\n}\n", "generated_code": "import java.util.Scanner;public class Main{public static void main(String[]args){Scanner sc=new Scanner(System.in);int i=1;while(true){double a=sc.nextInt();double b=sc.nextInt();double c=sc.nextInt();if(a==0){break;}\np(\"Triangle #\"+i);if((c>0&&(a>=c||b>=c)))\n{p(\"Impossible.\");}else{if(c==-1){p(\"c = \"+String.format(\"%.3f\",Math.sqrt(a*a+b*b)));}\nif(a<0||b<0){double k=(a<0)?b:a;p((a==-1?\"a\":\"b\")+\" = \"+String.format(\"%.3f\",Math.sqrt(c*c-k*k)));}}\np(\"\");i++;}}\nstatic void p(String a){System.out.println(a);}}", "score": 0.0}
{"id": "SHARE_1_1001_131__1_1001_194", "golden_code": "\n\n\n\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        int A, B ;int tedaeTeam; int adad2;\n          Scanner s = new Scanner(System.in);\n          while(s.hasNext()){\n             A=s.nextInt();\n             B=s.nextInt();\n             adad2=A+B;\n              System.out.println(adad2);\n        }\n\n    }\n}\n    ", "generated_code": "import java.math.BigInteger;\nimport java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner s = new Scanner(System.in);\nwhile(s.hasNext()){\n        BigInteger a = new BigInteger(s.next());\n        BigInteger b = new BigInteger(s.next());\n        System.out.println(b.add(a));\n}\n    }\n}", "score": 1.0}
{"id": "SHARE_5_1004_32__1_1001_459", "golden_code": "\nimport java.util.Scanner;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author Pasha\n */\npublic class Main {\n    public static void main(String args[]){\n        Scanner input = new Scanner(System.in);\n        int n = input.nextInt();\n        input.nextLine();\n        while (n > 0){\n            String jomle = input.nextLine();\n            String[] kalamat = jomle.split(\"[*]\");\n            Long max = 1L;\n            for(String kalameh : kalamat){\n                String[] adaad = kalameh.split(\"[+]\");\n                Long sum = 0L;\n                for(String adad : adaad)\n                    sum += Integer.parseInt(adad);\n                max *= sum;\n            }\n            \n            String[] kalamat2 = jomle.split(\"[+]\");\n            Long min = 0L;\n            for(String kalameh : kalamat2){\n                String[] adaad = kalameh.split(\"[*]\");\n                Long mult = 1L;\n                for(String adad : adaad)\n                    mult *= Integer.parseInt(adad);\n                min += mult;\n            }\n            \n            System.out.println(\"The maximum and minimum are \" + max + \" and \" + min + \".\");\n            n--;\n        }\n        \n    }\n}\n", "generated_code": "import java.util.Scanner;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        while (sc.hasNext()) {\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        System.out.println(a+b);\n        //System.out.println();\n        }\n    }\n}\n\n\n\n", "score": 0.0}
