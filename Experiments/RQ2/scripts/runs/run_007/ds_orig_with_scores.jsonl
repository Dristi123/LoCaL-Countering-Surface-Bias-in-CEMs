{"golden_code": "import fractions\n\nwhile True:\n\n\ttry:\n\n\t\tx,y = list(map(int,input().split()))\n\n\t\tprint('%d %d' % (fractions.gcd(x,y),x/fractions.gcd(x,y)*y))\n\n\texcept EOFError:\n\n\t\tbreak", "generated_code": "def gcd(x, y):\n\n    if y == 0:\n\n        return x\n\n    else:\n\n        return gcd(y, x%y)\n\n\n\n\n\ndef lcm(x,y):\n\n    return x/gcd(x, y)*y\n\n\n\n\n\nwhile True:\n\n    try:\n\n        x, y = list(map(int, input().split()))\n\n    except EOFError:\n\n        break\n\n\n\n    print(\"%d %d\" % (gcd(x, y), lcm(x, y)))", "score": 1.0, "codebleu": 0.2957030935285835, "crystalbleu": 0.0, "codebertscore": 0.87, "codescore": 0.9917797446250916, "surfaceSim": 0.5841924398625429, "abs_surfaceSim_minus_score": 0.4158075601374571}
{"golden_code": "import numpy as np\n\nn, k = list(map(int, input().split()))\n\np = np.array(list(map(int, input().split())))\n\np += 1\n\nsum_E = np.cumsum(p)\n\nsum_e = np.append([0], sum_E)\n\nans = -1\n\nfor i in range(n-k+1):\n\n    ans = max(ans, sum_e[i+k] - sum_e[i])\n\nprint((ans/2))", "generated_code": "n, k = list(map(int, input().split()))\n\np = list(map(int, input().split()))\n\n\n\ndef calc(x):\n\n    return (x + 1) / 2\n\n\n\n\n\nw = 0\n\n\n\nfor i in range(k):\n\n    w += calc(p[i])\n\n\n\nans = w\n\nfor i in range(k, n):\n\n    w += calc(p[i]) - calc(p[i - k])\n\n    ans = max(ans, w)\n\nprint(ans)", "score": 1.0, "codebleu": 0.32069355178686754, "crystalbleu": 0.363704997316923, "codebertscore": 0.84, "codescore": 0.22132334113121033, "surfaceSim": 0.6141304347826086, "abs_surfaceSim_minus_score": 0.38586956521739135}
{"golden_code": "mod = 10**9+7\n\nn, m = list(map(int, input().split()))\n\nl = [0]*n\n\nfor _ in range(m):\n\n  l[int(eval(input()))-1] = 1\n\n\n\ns = 0\n\nt = 1\n\n\n\nfor i in range(n):\n\n  if l[i] > 0:\n\n    t, s = 0, t\n\n  else:\n\n    t, s = (s+t)%mod, t\n\n\n\nprint(t)", "generated_code": "import sys\n\ninput = sys.stdin.readline\n\n\n\nmod = 10**9+7\n\nn, m = list(map(int, input().split()))\n\nl = [0]*n\n\nfor _ in range(m):\n\n  l[int(eval(input()))-1] = 1\n\n\n\nt, s = 1, 0\n\n\n\nfor i in range(n):\n\n  if l[i]:\n\n    t, s = 0, t\n\n  else:\n\n    t, s = (s+t)%mod, t\n\n\n\nprint(t)", "score": 1.0, "codebleu": 0.652760031884601, "crystalbleu": 0.7868501335451523, "codebertscore": 0.95, "codescore": 0.2887614071369171, "surfaceSim": 0.8382156133828996, "abs_surfaceSim_minus_score": 0.16178438661710037}
{"golden_code": "import sys\n\ninput = sys.stdin.readline\n\nimport bisect\n\n\n\nn = int(eval(input()))\n\nX = list(map(int, input().split()))\n\nl = int(eval(input()))\n\nU = 17\n\ndp = [[0]*n for _ in range(U+1)]\n\nfor i, x in enumerate(X):\n\n  t = bisect.bisect_left(X, x+l)\n\n  dp[0][i] = bisect.bisect_right(X, x+l) - 1\n\nfor k in range(U):\n\n  for i in range(n):\n\n    dp[k+1][i] = dp[k][dp[k][i]]\n\ndef test(x, a, b):\n\n  for i in range(U, -1, -1):\n\n    if x >> i & 1:\n\n      a = dp[i][a]\n\n  return a >= b\n\ndef solve(a, b):\n\n  if a > b:\n\n    a, b = b, a\n\n  ng = 0\n\n  ok = n-1\n\n  while ok - ng > 1:\n\n    mid = (ng + ok) // 2\n\n    if test(mid, a, b):\n\n      ok = mid\n\n    else:\n\n      ng = mid\n\n  print(ok)\n\nq = int(eval(input()))\n\nfor _ in range(q):\n\n  a, b = list(map(int, input().split()))\n\n  a -= 1\n\n  b -= 1\n\n  solve(a, b)", "generated_code": "import sys\n\ninput = sys.stdin.readline\n\nimport bisect\n\n\n\nn = int(eval(input()))\n\nX = list(map(int, input().split()))\n\nl = int(eval(input()))\n\nU = 17\n\ndp = [[0]*n for _ in range(U+1)]\n\nfor i, x in enumerate(X):\n\n  t = bisect.bisect_left(X, x+l)\n\n  dp[0][i] = bisect.bisect_right(X, x+l) - 1\n\nfor k in range(U):\n\n  for i in range(n):\n\n    dp[k+1][i] = dp[k][dp[k][i]]\n\nq = int(eval(input()))\n\nfor _ in range(q):\n\n  a, b = list(map(int, input().split()))\n\n  a -= 1\n\n  b -= 1\n\n  if a > b:\n\n    a, b = b, a\n\n  res = 1\n\n  for k in range(U, -1, -1):\n\n    if dp[k][a] < b:\n\n      a = dp[k][a]\n\n      res += (1<<k)\n\n    if a == b:\n\n      break\n\n  print(res)", "score": 1.0, "codebleu": 0.6735125094366047, "crystalbleu": 0.6764515858037599, "codebertscore": 0.93, "codescore": 0.3266089856624603, "surfaceSim": 0.7076250307957626, "abs_surfaceSim_minus_score": 0.29237496920423744}
{"golden_code": "n = int(eval(input()))\n\nimport math\n\nm = int(math.sqrt(n))+1\n\nanss = []\n\nfor x in range(1, m+1):\n\n  y = n//x\n\n  z = n%x\n\n  if z == 0:\n\n    anss.append(abs(x-1)+abs(y-1))\n\nprint((min(anss)))\n", "generated_code": "n = int(eval(input()))\n\ndef make_divisors(n):\n\n    divisors = []\n\n    for i in range(1, int(n**0.5)+1):\n\n        if n % i == 0:\n\n            divisors.append(i)\n\n            if i != n // i:\n\n                divisors.append(n//i)\n\n\n\n    #divisors.sort(reverse=True)\n\n    return divisors\n\n\n\nl = make_divisors(n)\n\nmin_ = float('inf')\n\nfor i in range(len(l)):\n\n    min_ = min(min_, l[i]-1+n//l[i]-1)\n\nprint(min_)\n", "score": 1.0, "codebleu": 0.2502258440548351, "crystalbleu": 0.17501093795230596, "codebertscore": 0.79, "codescore": 0.16374249756336212, "surfaceSim": 0.6045469912102772, "abs_surfaceSim_minus_score": 0.3954530087897228}
{"golden_code": "import math\n\nmod = 10 ** 9 + 7\n\nn = int(eval(input()))\n\nprint((math.factorial(n) % mod))", "generated_code": "mod = 10 ** 9 + 7\n\nn = int(eval(input()))\n\nans = 1\n\nfor i in range(1, n + 1):\n\n    ans *= i\n\n    ans %= mod\n\nprint(ans)", "score": 1.0, "codebleu": 0.47574210334091366, "crystalbleu": 0.0, "codebertscore": 0.85, "codescore": 0.6662311553955078, "surfaceSim": 0.6148459383753502, "abs_surfaceSim_minus_score": 0.3851540616246498}
{"golden_code": "import numpy as np\n\nN=int(eval(input()))\n\nprint((2**int(np.log2(N))))", "generated_code": "import math\n\nN=int(eval(input()))\n\nprint((2**int(math.log2(N))))", "score": 1.0, "codebleu": 0.49332105343485505, "crystalbleu": 0.0, "codebertscore": 0.95, "codescore": 0.8259763121604919, "surfaceSim": 0.9202898550724637, "abs_surfaceSim_minus_score": 0.07971014492753625}
{"golden_code": "import numpy as np\n\n(n, m) = list(map(int, input().split()))\n\na = np.array(list(map(int, input().split()))).astype(\"int64\") \n\na = np.cumsum(a)\n\na %= m\n\ncount = np.sum(a == 0)\n\na.sort()\n\ntc = 1\n\nfor i in range(1, n):\n\n    if a[i - 1] == a[i]:\n\n        tc += 1\n\n    else:\n\n        count += tc * (tc - 1) // 2\n\n        tc = 1\n\nelse:\n\n    count += tc * (tc - 1) // 2\n\nprint(count)", "generated_code": "(n, m) = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nunique_a = {a[0] % m: 1}\n\nfor i in range(1, n):\n\n    a[i] += a[i - 1]\n\n    a[i] %= m\n\n    if a[i] in unique_a:\n\n        unique_a[a[i]] += 1\n\n    else:\n\n        unique_a[a[i]] = 1\n\ncount = 0\n\nif 0 in unique_a:\n\n    count += unique_a[0]\n\nfor k in unique_a:\n\n    count += unique_a[k] * (unique_a[k] - 1) // 2\n\nprint(count)", "score": 1.0, "codebleu": 0.34886387594795276, "crystalbleu": 0.4334901284891127, "codebertscore": 0.86, "codescore": 0.11134970933198929, "surfaceSim": 0.6662013772566536, "abs_surfaceSim_minus_score": 0.3337986227433464}
{"golden_code": "k,s=list(map(int,input().split()))\n\nans=0\n\nfor i in range(k+1):\n\n    for j in range(k+1):\n\n        z=s-i-j\n\n        if 0<=z<=k:\n\n            ans+=1\n\nprint(ans)\n", "generated_code": "k,s=list(map(int,input().split()))\n\nans=0\n\nfor i in range(k+1):\n\n    for j in range(k+1):\n\n        if 0<=s-i-j<=k:\n\n            ans+=1\n\nprint(ans)\n", "score": 1.0, "codebleu": 0.767959063304084, "crystalbleu": 0.0, "codebertscore": 0.98, "codescore": 0.5259706974029541, "surfaceSim": 0.965625, "abs_surfaceSim_minus_score": 0.034375000000000044}
{"golden_code": "# -*- coding: utf-8 -*-\n\n# モジュールのインポート\n\nimport math\n\nimport numpy as np\n\n\n\n# 標準入力を取得\n\nN = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n\n\n# 求解処理\n\nA = sorted(A, reverse=True)\n\nA = np.array(A)\n\nans = 2 * np.sum(A[:(N // 2)]) - A[0] + (N % 2) * A[math.floor(N / 2)]\n\n\n\n# 結果出力\n\nprint(ans)\n", "generated_code": "# -*- coding: utf-8 -*-\n\n# モジュールのインポート\n\nimport math\n\n\n\n# 標準入力を取得\n\nN = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n\n\n# 求解処理\n\nA = sorted(A, reverse=True)\n\nans = 0\n\nfor n in range(1, N + 1):\n\n    if n == 1:\n\n        continue\n\n    ans += A[math.ceil(n / 2) - 1]\n\n\n\n# 結果出力\n\nprint(ans)\n", "score": 1.0, "codebleu": 0.4998950857025437, "crystalbleu": 0.2773238770712333, "codebertscore": 0.94, "codescore": 0.16799746453762054, "surfaceSim": 0.7014961389961389, "abs_surfaceSim_minus_score": 0.29850386100386106}
{"golden_code": "n=int(eval(input()))\n\nx=list(map(int,input().split()))\n\n\n\nx.sort()\n\n\n\nfor p in range(x[0],x[len(x)-1]+1):\n\n    psum=0\n\n    for i in range(len(x)):\n\n        psum=psum+(x[0]-x[i])**2\n\n#    print(psum)\n\n    pmin=psum    \n\n    for j in range(x[0]+1,x[len(x)-1]):\n\n        psum=0\n\n        for i in range(len(x)):\n\n            psum=psum+(j-x[i])**2\n\n#        print(psum)\n\n        if pmin>psum:\n\n            pmin=psum\n\nprint(pmin)    ", "generated_code": "n=int(eval(input()))\n\nx=list(map(int,input().split()))\n\n\n\nx.sort()\n\n\n\npsum=0\n\nfor i in range(len(x)):\n\n    psum=psum+(x[0]-x[i])**2\n\n#    print(psum)\n\npmin=psum    \n\nfor j in range(x[0]+1,x[len(x)-1]):\n\n    psum=0\n\n    for i in range(len(x)):\n\n        psum=psum+(j-x[i])**2\n\n#        print(psum)\n\n    if pmin>psum:\n\n        pmin=psum\n\nprint(pmin)            \n", "score": 1.0, "codebleu": 0.7479809000176443, "crystalbleu": 0.8282159388426334, "codebertscore": 0.96, "codescore": 0.9938967823982239, "surfaceSim": 0.9613583138173303, "abs_surfaceSim_minus_score": 0.03864168618266972}
{"golden_code": "import sys\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\n\n\nMOD = 10**9+7\n\n\n\nfac = [1, 1]     # 元テーブル\n\nf_inv = [1, 1]   # 逆元テーブル\n\ninv = [0, 1]     # 逆元テーブル計算用テーブル\n\ndef prepare(n, mod):\n\n    for i in range(2, n+1):\n\n        fac.append((fac[-1] * i) % mod)\n\n\n\n\n\ndef cmb(n, r, mod):\n\n    if n < 0 or r < 0:\n\n        return 0\n\n    if r > n:\n\n        return 0\n\n\n\n    return fac[n] * pow(fac[r],MOD-2,MOD) * pow(fac[n-r],MOD-2,MOD) % mod\n\n\n\n\n\ndef prime_factorization(n):\n\n    d = []\n\n    i, e = 2, 0  # factor, exponent\n\n    while i * i <= n:\n\n        while n % i == 0:\n\n            n //= i\n\n            e += 1\n\n        if e > 0:\n\n            d.append((i, e))\n\n        i += 1\n\n        e = 0\n\n    if n > 1:\n\n        d.append((n, 1))\n\n    return d\n\n\n\n\n\ndef main():\n\n    N,M = list(map(int, readline().split()))\n\n\n\n    prepare(N+100, MOD)\n\n    d = prime_factorization(M)\n\n\n\n    ans = 1\n\n    for i, e in d:\n\n        ans *= cmb(N-1+e, e, MOD)\n\n        ans %= MOD\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n", "generated_code": "# AC: msec(Python3)\n\nfrom math import factorial\n\nimport sys\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\n\n\nMOD = 10**9+7\n\n\n\ndef cmb(n, r):\n\n    if n < 0 or r < 0:\n\n        return 0\n\n    if r > n:\n\n        return 0\n\n\n\n    r = min(n-r, r)\n\n    res = 1\n\n    for i in range(r):\n\n        res *= n - i\n\n\n\n    return res // factorial(r)\n\n\n\n\n\ndef prime_factorization(n):\n\n    d = []\n\n    i, e = 2, 0  # factor, exponent\n\n    while i * i <= n:\n\n        while n % i == 0:\n\n            n //= i\n\n            e += 1\n\n        if e > 0:\n\n            d.append((i, e))\n\n        i += 1\n\n        e = 0\n\n    if n > 1:\n\n        d.append((n, 1))\n\n    return d\n\n\n\n\n\ndef main():\n\n    N,M = list(map(int, readline().split()))\n\n\n\n    d = prime_factorization(M)\n\n\n\n    ans = 1\n\n    for i, e in d:\n\n        ans *= cmb(N-1+e, e)\n\n        ans %= MOD\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n", "score": 1.0, "codebleu": 0.5858488142192301, "crystalbleu": 0.6205755686981741, "codebertscore": 0.86, "codescore": 0.03440377488732338, "surfaceSim": 0.8375, "abs_surfaceSim_minus_score": 0.16249999999999998}
{"golden_code": "n = int(eval(input()))\n\nmx = n//3\n\nans = 0\n\nmod = 10**9+7\n\nimport math\n\ndef combinations_count(n, r): #組み合わせ(nCr)\n\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\nfor i in range(1,mx+1):\n\n    if i == 1:\n\n        ans += 1\n\n    else:\n\n        ans += combinations_count(n-2*i-1,i-1) % mod\n\nprint((ans%mod))", "generated_code": "s = int(eval(input()))\n\ndp = [0]*(2001)\n\ndp[3] = 1\n\nmod = 10**9+7\n\nfor i in range(4,s+1):\n\n    dp[i] = (dp[i-1] + dp[i-3]) % mod\n\nprint((dp[s]))", "score": 1.0, "codebleu": 0.16498058488401543, "crystalbleu": 0.23645995471937134, "codebertscore": 0.78, "codescore": 0.1085880920290947, "surfaceSim": 0.4759036144578313, "abs_surfaceSim_minus_score": 0.5240963855421688}
{"golden_code": "import numpy as np\n\n\n\nS=eval(input())\n\nS=np.array([1 if s=='B' else 0 for s in S])\n\n\n\nprint((np.abs(np.diff(S)).sum()))\n", "generated_code": "from itertools import groupby\n\n\n\nS=eval(input())\n\nanswer = sum([1 for _ in groupby(S)]) -1\n\n\n\nprint(answer)", "score": 1.0, "codebleu": 0.20308835009201417, "crystalbleu": 0.0, "codebertscore": 0.8, "codescore": 0.07817815244197845, "surfaceSim": 0.4853070175438597, "abs_surfaceSim_minus_score": 0.5146929824561404}
{"golden_code": "from collections import deque\n\nfrom itertools import product\n\nimport sys\n\nimport math\n\nimport numpy as np\n\nimport bisect\n\n\n\nsys.setrecursionlimit(200000)\n\ninput = sys.stdin.readline\n\n\n\n\n\ndef read():\n\n    N = int(input().strip())\n\n    A = list(map(int, input().strip().split()))\n\n    return N, A\n\n\n\n\n\ndef argsort(seq):\n\n    return sorted(list(range(len(seq))), key=seq.__getitem__)\n\n\n\ndef solve(N, A):\n\n    # x: i-A[i]の列\n\n    X = np.array([i-A[i] for i in range(N)], dtype=np.int)\n\n    # y: i+A[i]の列\n\n    Y = np.array([i+A[i] for i in range(N)], dtype=np.int)\n\n    keys = np.argsort(X)\n\n    X = X[keys]  # x[i] <= x[i+1]\n\n    Y = Y[keys]\n\n    ans = 0\n\n    for y in Y:\n\n        l = bisect.bisect_left(X, y)\n\n        r = bisect.bisect_left(X, y+1)\n\n        ans += r - l\n\n    return ans\n\n\n\n\n\nif __name__ == '__main__':\n\n    inputs = read()\n\n    outputs = solve(*inputs)\n\n    print((\"{}\".format(outputs)))\n", "generated_code": "from collections import defaultdict\n\nfrom itertools import product\n\nimport sys\n\nimport math\n\nimport bisect\n\n\n\nsys.setrecursionlimit(200000)\n\ninput = sys.stdin.readline\n\n\n\n\n\ndef read():\n\n    N = int(input().strip())\n\n    A = list(map(int, input().strip().split()))\n\n    return N, A\n\n\n\n\n\ndef solve(N, A):\n\n    # x: i-A[i]の列\n\n    X = [i-A[i] for i in range(N)]\n\n    # y: i+A[i]の列\n\n    Y = [i+A[i] for i in range(N)]\n\n    z = defaultdict(int)\n\n    for y in Y:\n\n        z[y] += 1\n\n    return sum([z[x] for x in X])\n\n\n\n\n\nif __name__ == '__main__':\n\n    inputs = read()\n\n    outputs = solve(*inputs)\n\n    print((\"{}\".format(outputs)))\n", "score": 1.0, "codebleu": 0.46881920532223054, "crystalbleu": 0.47774518270416466, "codebertscore": 0.89, "codescore": 0.01871858350932598, "surfaceSim": 0.8468010454333894, "abs_surfaceSim_minus_score": 0.1531989545666106}
{"golden_code": "class prime_factorize_by_osa_k():\n\n    def __init__(self, max_val):\n\n        '''\n\n        割ることが出来る最小の値を格納したリストを返す\n\n        :param max_val:\n\n        :return:\n\n        '''\n\n        self.minFactor = [-1] * (max_val + 1)\n\n        for i in range(2, max_val + 1):\n\n            if self.minFactor[i] == -1:\n\n                self.minFactor[i] = i\n\n                # エラトステネスの篩と同様の処理を行う\n\n                for j in range(i * i, max_val + 1, i):\n\n                    if self.minFactor[j] == -1:\n\n                        self.minFactor[j] = i\n\n\n\n    def osa_k(self, n):\n\n        '''\n\n        preprocessをしたあと、O(logN)で素因数分解を行う。nの最大値をn_maxとする。\n\n        :param n:\n\n        :return:\n\n        '''\n\n        from collections import defaultdict\n\n        d = defaultdict(int)\n\n        now = n\n\n        while now > 1:\n\n            d[self.minFactor[now]] += 1\n\n            now //= self.minFactor[now]\n\n        return d\n\ndef gcd(a, b):\n\n    while b: a, b = b, a % b\n\n    return a\n\n\n\nN = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n# N = 10 ** 6\n\n# A = [10 ** 6] * N\n\nob = prime_factorize_by_osa_k(10 ** 6)\n\npairwise = False\n\nprime_key = set(ob.osa_k(A[-1]).keys())\n\nbreak_flag = False\n\nprime_flags = [False] * (10 ** 6 + 1)\n\nfor i in range(N):\n\n    for key in list(ob.osa_k(A[i]).keys()):\n\n        if prime_flags[key]:\n\n            break_flag = True\n\n            break\n\n        else:\n\n            prime_flags[key] = True\n\n    if break_flag:\n\n        break\n\nelse:\n\n    pairwise = True\n\nif pairwise:\n\n    print('pairwise coprime')\n\n    exit()\n\nwork = gcd(A[0], A[1])\n\nfor i in range(2, N):\n\n    work = gcd(work, A[i])\n\nif work != 1:\n\n    print('not coprime')\n\nelse:\n\n    print('setwise coprime')", "generated_code": "def gcd(a, b):\n\n    while b: a, b = b, a % b\n\n    return a\n\ndef isPrimeMR(n):\n\n    d = n - 1\n\n    d = d // (d & -d)\n\n    L = [2]\n\n    for a in L:\n\n        t = d\n\n        y = pow(a, t, n)\n\n        if y == 1: continue\n\n        while y != n - 1:\n\n            y = (y * y) % n\n\n            if y == 1 or t == n - 1: return 0\n\n            t <<= 1\n\n    return 1\n\ndef findFactorRho(n):\n\n    m = 1 << n.bit_length() // 8\n\n    for c in range(1, 99):\n\n        f = lambda x: (x * x + c) % n\n\n        y, r, q, g = 2, 1, 1, 1\n\n        while g == 1:\n\n            x = y\n\n            for i in range(r):\n\n                y = f(y)\n\n            k = 0\n\n            while k < r and g == 1:\n\n                ys = y\n\n                for i in range(min(m, r - k)):\n\n                    y = f(y)\n\n                    q = q * abs(x - y) % n\n\n                g = gcd(q, n)\n\n                k += m\n\n            r <<= 1\n\n        if g == n:\n\n            g = 1\n\n            while g == 1:\n\n                ys = f(ys)\n\n                g = gcd(abs(x - ys), n)\n\n        if g < n:\n\n            if isPrimeMR(g): return g\n\n            elif isPrimeMR(n // g): return n // g\n\n            return findFactorRho(g)\n\ndef primeFactor(n):\n\n    i = 2\n\n    ret = {}\n\n    rhoFlg = 0\n\n    while i*i <= n:\n\n        k = 0\n\n        while n % i == 0:\n\n            n //= i\n\n            k += 1\n\n        if k: ret[i] = k\n\n        i += 1 + i % 2\n\n        if i == 101 and n >= 2 ** 20:\n\n            while n > 1:\n\n                if isPrimeMR(n):\n\n                    ret[n], n = 1, 1\n\n                else:\n\n                    rhoFlg = 1\n\n                    j = findFactorRho(n)\n\n                    k = 0\n\n                    while n % j == 0:\n\n                        n //= j\n\n                        k += 1\n\n                    ret[j] = k\n\n\n\n    if n > 1: ret[n] = 1\n\n    if rhoFlg: ret = {x: ret[x] for x in sorted(ret)}\n\n    return ret\n\ndef gcd(a, b):\n\n    while b: a, b = b, a % b\n\n    return a\n\n\n\nN = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n# N = 10 ** 6\n\n# A = [10 ** 6] * N\n\npairwise = False\n\nprime_key = set(primeFactor(A[-1]).keys())\n\nbreak_flag = False\n\nprime_flags = [False] * (10 ** 6 + 1)\n\nfor i in range(N):\n\n    for key in list(primeFactor(A[i]).keys()):\n\n        if prime_flags[key]:\n\n            break_flag = True\n\n            break\n\n        else:\n\n            prime_flags[key] = True\n\n    if break_flag:\n\n        break\n\nelse:\n\n    pairwise = True\n\nif pairwise:\n\n    print('pairwise coprime')\n\n    exit()\n\nwork = gcd(A[0], A[1])\n\nfor i in range(2, N):\n\n    work = gcd(work, A[i])\n\nif work != 1:\n\n    print('not coprime')\n\nelse:\n\n    print('setwise coprime')", "score": 1.0, "codebleu": 0.46569379054185983, "crystalbleu": 0.33354607939601016, "codebertscore": 0.79, "codescore": 0.9899611473083496, "surfaceSim": 0.69665907365224, "abs_surfaceSim_minus_score": 0.30334092634776}
{"golden_code": "import collections\n\nimport sys\n\na=eval(input())\n\nb=[]\n\n\n\nfor i in a:\n\n  b.append(i)\n\n  \n\nb.sort()\n\nc=collections.Counter(b)\n\nc=list(c.values())\n\n\n\nfor i in range(len(c)):\n\n  if int(c[i])%2==0:\n\n    q=0\n\n  else:\n\n    q=1\n\n    print('No')\n\n    sys.exit()\n\n    \n\nprint('Yes')\n", "generated_code": "w = list(eval(input()))\n\ns = set(w)\n\nfor i in s:\n\n  if w.count(i)%2 != 0:\n\n    print(\"No\")\n\n    break\n\nelse:\n\n  print(\"Yes\")\n\n  ", "score": 1.0, "codebleu": 0.1468778645718564, "crystalbleu": 0.0, "codebertscore": 0.8, "codescore": 0.7527337670326233, "surfaceSim": 0.5507825507825508, "abs_surfaceSim_minus_score": 0.4492174492174492}
{"golden_code": "from heapq import heappop, heappush\n\n\n\nn, m = list(map(int, input().split()))\n\na = tuple(map(int, input().split()))\n\n\n\nhq = []\n\nfor aa in a:\n\n    heappush(hq, (-aa, 1))\n\n\n\nfor _ in range(m):\n\n    b, c = list(map(int, input().split()))\n\n    heappush(hq, (-c, b))\n\n\n\nrest = n\n\nans = 0\n\nwhile rest > 0:\n\n    num, cnt = heappop(hq)\n\n\n\n    num *= (-1)\n\n    use = min(rest, cnt)\n\n    ans += use * num\n\n    rest -= use\n\n\n\nprint(ans)\n", "generated_code": "def main():\n\n    from collections import Counter\n\n    from operator import itemgetter\n\n\n\n    import sys\n\n    input = sys.stdin.readline\n\n\n\n    N, M = list(map(int, input().split()))\n\n    a = list(map(int, input().split()))\n\n\n\n    ctr = Counter(a)\n\n    for _ in range(M):\n\n        b, c = list(map(int, input().split()))\n\n        ctr[c] += b\n\n\n\n    ans = 0\n\n    rest = N\n\n    for integer, count in sorted(list(ctr.items()), key=itemgetter(0), reverse=True):\n\n        take = min(rest, count)\n\n        ans += take * integer\n\n        rest -= take\n\n        if not rest:\n\n            break\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n\n\n\n# import sys\n\n# input = sys.stdin.readline\n\n# \n\n# sys.setrecursionlimit(10 ** 7)\n\n# \n\n# (int(x)-1 for x in input().split())\n\n# rstrip()\n", "score": 1.0, "codebleu": 0.3624785457525622, "crystalbleu": 0.2081515250393228, "codebertscore": 0.78, "codescore": 0.020625866949558258, "surfaceSim": 0.6238370348139255, "abs_surfaceSim_minus_score": 0.3761629651860745}
{"golden_code": "import math\n\nn = int(eval(input()))\n\nprint((math.factorial(n)%(10**9+7)))\n", "generated_code": "n = int(eval(input()))\n\nmod = 10**9 + 7\n\n\n\npow = 1\n\nfor i in range(n):\n\n    pow = pow*(i+1)%mod\n\n\n\nprint(pow)\n", "score": 1.0, "codebleu": 0.2891986391150476, "crystalbleu": 0.0, "codebertscore": 0.82, "codescore": 0.2281324416399002, "surfaceSim": 0.5711229946524065, "abs_surfaceSim_minus_score": 0.42887700534759354}
{"golden_code": "from fractions import gcd\n\nn, m = list(map(int, input().split()))\n\na = [int(i) // 2 for i in input().split()]\n\nx = 1\n\nfor i in range(n):\n\n    x *= a[i] // gcd(x, a[i])\n\nfor i in a:\n\n    if x // i % 2 == 0:\n\n        print((0))\n\n        exit()\n\nprint(((m // x + 1) // 2))", "generated_code": "from math import gcd, ceil\n\nn, m = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\na = [i // 2 for i in a]\n\nl = 1\n\nfor i in a:\n\n    l *= i // gcd(l, i)\n\nfor i in a:\n\n    if l // i % 2 == 0:\n\n        print((0))\n\n        exit()\n\nprint((ceil((m // l) / 2)))", "score": 1.0, "codebleu": 0.5087864953528614, "crystalbleu": 0.5383805654439339, "codebertscore": 0.93, "codescore": 0.8986703753471375, "surfaceSim": 0.8081723027375202, "abs_surfaceSim_minus_score": 0.19182769726247983}
{"golden_code": "N, K = list(map(int, input().split()))\n\nS = eval(input())\n\nnums = []\n\nnow = 1\n\ncnt = 0\n\nfor i in range(N):\n\n    if S[i] == str(now):\n\n        cnt += 1\n\n    else:\n\n        nums.append(cnt)\n\n        now = 1 - now\n\n        cnt = 1\n\nif cnt != 0:\n\n    nums.append(cnt)\n\nif len(nums) % 2 == 0:\n\n    nums.append(0)\n\n\n\nadd = 2 * K + 1\n\nans = 0\n\nleft = 0\n\nright = 0\n\ntmp = 0\n\nfor i in range(0, len(nums), 2):\n\n\n\n    next_left = i\n\n    next_right = min(i + add, len(nums))\n\n\n\n    while next_left > left:\n\n        tmp -= nums[left]\n\n        left += 1\n\n\n\n    while next_right > right:\n\n        tmp += nums[right]\n\n        right += 1\n\n\n\n    ans = max(ans, tmp)\n\nprint(ans)", "generated_code": "N, K = list(map(int, input().split()))\n\nS = eval(input())\n\nnums = []\n\nnow = 1\n\ncnt = 0\n\nfor i in range(N):\n\n    if S[i] == str(now):\n\n        cnt += 1\n\n    else:\n\n        nums.append(cnt)\n\n        now = 1 - now\n\n        cnt = 1\n\nif cnt != 0:\n\n    nums.append(cnt)\n\nif len(nums) % 2 == 0:\n\n    nums.append(0)\n\n\n\ncsum = [0] * (len(nums) + 1)\n\nfor i in range(len(nums)):\n\n    csum[i + 1] = csum[i] + nums[i]\n\n\n\nadd = 2 * K + 1\n\nans = 0\n\ntmp = 0\n\nfor i in range(0, len(nums), 2):\n\n    left = i\n\n    right = min(i + add, len(nums))\n\n    tmp = csum[right] - csum[left]\n\n    ans = max(ans, tmp)\n\nprint(ans)", "score": 1.0, "codebleu": 0.7612905630082394, "crystalbleu": 0.7639714372116043, "codebertscore": 0.94, "codescore": 0.9349556565284729, "surfaceSim": 0.8500058363487802, "abs_surfaceSim_minus_score": 0.14999416365121976}
{"golden_code": "from copy import deepcopy\n\nfrom scipy.sparse.csgraph import floyd_warshall\n\n\n\nn,m=list(map(int,input().split()))\n\nl=[list(map(int,input().split())) for i in range(m)]\n\n\n\ncnt=0\n\nfor i in range(m):\n\n  ll=deepcopy(l)\n\n  del ll[i]\n\n\n\n  d=[[float('inf')]*n for i in range(n)]\n\n  for i in range(n):\n\n    d[i][i]=0\n\n\n\n  for a,b in ll:\n\n    a-=1\n\n    b-=1\n\n    d[a][b]=1\n\n    d[b][a]=1\n\n\n\n  s=floyd_warshall(d)\n\n  for i in s:\n\n    if float('inf') in i:\n\n      cnt+=1\n\n      break\n\n\n\nprint(cnt)", "generated_code": "from collections import deque\n\nfrom copy import deepcopy\n\n\n\nn,m=list(map(int,input().split()))\n\nl=[list(map(int,input().split())) for i in range(m)]\n\n\n\ndef BFS(m):\n\n  t_l=deepcopy(l)\n\n  del t_l[m]\n\n\n\n  tree=[[] for j in range(n)]\n\n  for a,b in t_l:\n\n    a-=1\n\n    b-=1\n\n    tree[a].append(b)\n\n    tree[b].append(a)\n\n\n\n  dist=[-1 for i in range(n)]\n\n  dist[0]=0\n\n\n\n  que=deque()\n\n  que.append(0)\n\n\n\n  while que:\n\n    x=que.popleft()\n\n    for i in tree[x]:\n\n      if dist[i]==-1:\n\n        que.append(i)\n\n        dist[i]=dist[x]+1\n\n\n\n  return dist\n\n\n\nans=0\n\nfor i in range(m):\n\n  d=BFS(i)\n\n  if -1 in d:\n\n    ans+=1\n\n\n\nprint(ans)", "score": 1.0, "codebleu": 0.4340165590110255, "crystalbleu": 0.3126589101386773, "codebertscore": 0.84, "codescore": 0.9707666039466858, "surfaceSim": 0.637229082117261, "abs_surfaceSim_minus_score": 0.36277091788273896}
{"golden_code": "import sys\n\nimport numpy as np\n\n\n\nsys.setrecursionlimit(10 ** 6)\n\nint1 = lambda x: int(x) - 1\n\nprintV = lambda x: print(*x, sep=\"\\n\")\n\nprintH = lambda x: print(\" \".join(map(str,x)))\n\ndef IS(): return sys.stdin.readline()[:-1]\n\ndef II(): return int(sys.stdin.readline())\n\ndef MI(): return map(int, sys.stdin.readline().split())\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\n\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\n\ndef LII(rows_number): return [II() for _ in range(rows_number)]\n\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\ndef LLI1(rows_number): return [LI1() for _ in range(rows_number)]\n\n\n\ndef main():\n\n\tK,N = MI()\n\n\tA = np.array(LI())\n\n\tA_LAST = K+A[0] - A[N-1]\n\n\tB = A[1:]-A[:N-1]\n\n\tB = np.sort(B)\n\n\tprint(K-max(B[N-2],A_LAST))\n\n\n\nif __name__ == '__main__':\n\n\tmain()\n", "generated_code": "import sys\n\n\n\nsys.setrecursionlimit(10 ** 6)\n\nint1 = lambda x: int(x) - 1\n\nprintV = lambda x: print(*x, sep=\"\\n\")\n\nprintH = lambda x: print(\" \".join(map(str,x)))\n\ndef IS(): return sys.stdin.readline()[:-1]\n\ndef II(): return int(sys.stdin.readline())\n\ndef MI(): return map(int, sys.stdin.readline().split())\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\n\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\n\ndef LII(rows_number): return [II() for _ in range(rows_number)]\n\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\ndef LLI1(rows_number): return [LI1() for _ in range(rows_number)]\n\n\n\ndef main():\n\n\tk,n = MI()\n\n\ta = LI()\n\n\tb = [0]*n\n\n\tfor i in range(n):\n\n\t\tif i == n-1:\n\n\t\t\tb[i] = a[0]+k-a[i]\n\n\t\telse:\n\n\t\t\tb[i] = a[i+1]-a[i]\n\n\tb.sort()\n\n\tprint(k-b[-1])\n\n\n\n\n\nif __name__ == '__main__':\n\n\tmain()\n", "score": 1.0, "codebleu": 0.7198086174363693, "crystalbleu": 0.6886182950167731, "codebertscore": 0.95, "codescore": 0.02998584322631359, "surfaceSim": 0.8984992101105844, "abs_surfaceSim_minus_score": 0.10150078988941558}
{"golden_code": "k = int(eval(input()))\n\ncount = 1\n\nn = 0\n\nif k % 2 == 0 or k % 5 == 0:\n\n    print((-1))\n\nelse:\n\n  while 1:\n\n      n = (n * 10 + 7) % k  \n\n      if n == 0:\n\n        break \n\n      count += 1\n\n  print(count)", "generated_code": "def main(h):\n\n  count = 1\n\n  n = 0\n\n  for i in range (k):\n\n    n = (n * 10 + 7) % k  \n\n    if n == 0: \n\n      print(count)\n\n      return 0\n\n    count += 1\n\n  print((-1))\n\n  \n\nif __name__ == '__main__':\n\n  k = int(eval(input()))\n\n  main(k)", "score": 1.0, "codebleu": 0.47065797982054347, "crystalbleu": 0.0, "codebertscore": 0.87, "codescore": 0.04867507889866829, "surfaceSim": 0.604341736694678, "abs_surfaceSim_minus_score": 0.39565826330532206}
{"golden_code": "from functools import reduce\ndef f(a,b): return [Card[a][0], Card[b][1]]\n\nn = int(input())\n\nCard = [[] for _ in [0]*n]\n\nCost = {}\n\nfor i in range(n):\n\n  Card[i] = list(map(int, input().split()))\n\n  Cost[(i, i)] = 0\n\nfor i in range(1, n):\n\n  for j in range(0, n-i):\n\n    a = j+i\n\n    Cost[(j, a)] = min([reduce(lambda a,b: a*b, f(j, k) + f(k+1, a)) + Cost[(j, k)] + Cost[(k+1, a)] for k in range(j, j+i)])\n\nprint(Cost[0, n-1])", "generated_code": "from functools import reduce\nn = int(input())\n\nCard = [[] for _ in [0]*n]\n\nCost = {}\n\nfor i in range(n):\n\n  Card[i] = list(map(int, input().split()))\n\n  Cost[(i, i)] = 0\n\nfor i in range(1, n):\n\n  for j in range(0, n-i):\n\n    a = j+i\n\n    Cost[(j, a)] = min([reduce(lambda a,b: a*b, [Card[j][0],Card[k][1],Card[k+1][0],Card[a][1]]) + Cost[(j, k)] + Cost[(k+1, a)] for k in range(j, j+i)])\n\nprint(Cost[0, n-1])", "score": 1.0, "codebleu": 0.6863679688130228, "crystalbleu": 0.8694261007044977, "codebertscore": 0.96, "codescore": 0.5775259137153625, "surfaceSim": 0.8713445378151261, "abs_surfaceSim_minus_score": 0.1286554621848739}
{"golden_code": "from collections import Counter,defaultdict,deque\n\nimport sys,bisect,math,itertools,string,queue\n\nfrom heapq import heappop, heappush\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\ndef inp(): return int(sys.stdin.readline())\n\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\ndef inpl_str(): return list(sys.stdin.readline().split())\n\ndef inpln(n): return list(int(sys.stdin.readline()) for i in range(n))\n\n\n\nn = inp()\n\nres = float('inf')\n\nfor i in range(1,2*10**6):\n\n    if (n/i).is_integer():\n\n        res = min(res, i + n/i)\n\nprint((int(res-2)))\n", "generated_code": "from collections import Counter,defaultdict,deque\n\nimport sys,bisect,math,itertools,string,queue\n\nfrom heapq import heappop, heappush\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\ndef inp(): return int(sys.stdin.readline())\n\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\ndef inpl_str(): return list(sys.stdin.readline().split())\n\ndef inpln(n): return list(int(sys.stdin.readline()) for i in range(n))\n\n\n\nn = inp()\n\nres = float('inf')\n\nfor i in range(1,int(math.sqrt(n))+1):\n\n    if n%i == 0:\n\n        res = min(res, i + n/i)\n\nprint((int(res-2)))\n", "score": 1.0, "codebleu": 0.8316966909881458, "crystalbleu": 0.8724485591152905, "codebertscore": 0.98, "codescore": 0.7167924642562866, "surfaceSim": 0.9062557216966738, "abs_surfaceSim_minus_score": 0.09374427830332621}
{"golden_code": "from fractions import gcd\n\n\n\nn,m=list(map(int,input().split()))\n\na=list(map(int,input().split()))\n\na=list(set(a))\n\n\n\na=list([x//2 for x in a])\n\n\n\ndef lcm(q):\n\n  x = q[0]\n\n  for i in range(1, len(q)):\n\n    x = (x * q[i]) // gcd(x, q[i])\n\n  return x\n\n\n\nlcma=lcm(a)\n\n\n\nif (lcma//a[0])%2==0:\n\n  print((0))\n\nelse:\n\n  flg=0\n\n  for i in range(1,len(a)):\n\n    if (lcma//a[i])%2==0:\n\n      print((0))\n\n      flg=1\n\n      break\n\n  if flg==0:\n\n    temp=m//lcma\n\n    print((temp//2 if temp%2==0 else temp//2+1))", "generated_code": "from math import gcd\n\nn,m=list(map(int,input().split()))\n\na=list(map(int,input().split()))\n\na=list(set(a))\n\na=list([x//2 for x in a])\n\n\n\ndef lcm(q):\n\n  x = q[0]\n\n  for i in range(1, len(q)):\n\n    x = (x * q[i]) // gcd(x, q[i])\n\n  return x\n\n\n\nlcma=lcm(a)\n\nfor i in range(len(a)):\n\n  if (lcma//a[i])%2==0:\n\n    print((0))\n\n    exit()\n\ntemp=m//lcma\n\nprint((temp//2 if temp%2==0 else temp//2+1))", "score": 1.0, "codebleu": 0.7667790229313646, "crystalbleu": 0.77239021698609, "codebertscore": 0.96, "codescore": 0.9581671953201294, "surfaceSim": 0.9117266791647811, "abs_surfaceSim_minus_score": 0.08827332083521888}
{"golden_code": "import itertools\n\nfrom collections import Counter\n\nN = int(eval(input()))\n\nsrc = [eval(input()) for i in range(N)]\n\nctr = Counter()\n\nfor s in src:\n\n    ctr[s[0]] += 1\n\n\n\nans = 0\n\nfor ptn in itertools.combinations('MARCH',3):\n\n    a,b,c = ptn\n\n    ans += ctr[a]*ctr[b]*ctr[c]\n\nprint(ans)", "generated_code": "N = int(eval(input()))\n\nS = [eval(input()) for i in range(N)]\n\nfrom collections import Counter\n\nctr = Counter([s[0] for s in S])\n\n\n\nans = 0\n\nimport itertools\n\nfor ptn in itertools.combinations('MARCH', 3):\n\n    t = 1\n\n    for c in ptn:\n\n        t *= ctr[c]\n\n    ans += t\n\nprint(ans)", "score": 1.0, "codebleu": 0.4104047494648608, "crystalbleu": 0.46036999033114373, "codebertscore": 0.93, "codescore": 0.6179037094116211, "surfaceSim": 0.7220279720279721, "abs_surfaceSim_minus_score": 0.2779720279720279}
{"golden_code": "import sys\n\ninput = sys.stdin.readline\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\n\"\"\"\n\n奇数番目集合、偶数番目集合の中で自由にできるのが操作2．\n\n操作1で集合間のやりとりをする\n\n\"\"\"\n\n\n\nimport numpy as np\n\n\n\nN = int(eval(input()))\n\nA = np.fromstring(sys.stdin.read(),dtype=np.int64,sep='\\n')\n\n\n\nB = np.sort(A)\n\n\n\nanswer = len(np.setdiff1d(A[::2],B[::2]))\n\nprint(answer)", "generated_code": "import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\n\"\"\"\n\n・偶数番号、奇数番号の中では入れ替え放題\n\n・偶、奇の間：並べてからスワップ。操作2を1回で、正しいものを2つ増やせる\n\n\"\"\"\n\n\n\nN,*A = list(map(int,read().split()))\n\n\n\nx_to_i = {x:i for i,x in enumerate(sorted(A))}\n\nrank = [x_to_i[x] for x in A]\n\n\n\nanswer = sum((x^i) & 1 for i,x in enumerate(rank)) // 2\n\nprint(answer)", "score": 1.0, "codebleu": 0.23074092695025478, "crystalbleu": 0.052989305111456796, "codebertscore": 0.79, "codescore": 0.23009249567985535, "surfaceSim": 0.4430051813471503, "abs_surfaceSim_minus_score": 0.5569948186528497}
{"golden_code": "N , L = list(map(int , input().split()))\n\n\n\napple_taste = []\n\n\n\nfor i in range(N):\n\n    taste = L + i + 1 - 1\n\n    apple_taste.append(taste)\n\n    \n\nimport numpy as np\n\n\n\nabs_apple_taste = np.abs(apple_taste)\n\nm = min(abs_apple_taste)\n\n\n\nfor j in range(N):\n\n    if m == abs_apple_taste[j]:\n\n        apple_taste.remove(apple_taste[j])\n\n\n\npie_taste = 0       \n\n\n\nfor k in range(N-1):\n\n    pie_taste += apple_taste[k]\n\n    \n\nprint(pie_taste)", "generated_code": "n,l = list(map(int,input().split()))\n\nans = l\n\neat = l\n\n\n\nfor i in range(n-1):\n\n    l += 1\n\n    ans += l\n\n    \n\n    if abs(l) < abs(eat):\n\n        eat = l\n\n        \n\nprint((ans-eat))", "score": 1.0, "codebleu": 0.17652833887839986, "crystalbleu": 0.0, "codebertscore": 0.79, "codescore": 0.9908464550971985, "surfaceSim": 0.580711289092296, "abs_surfaceSim_minus_score": 0.41928871090770403}
{"golden_code": "import numpy as np\n\nN, K = list(map(int, input().split()))\n\n \n\nA = np.zeros(N, dtype=int)\n\n \n\nfor _ in range(K):\n\n    eval(input())\n\n    for i in input().split():\n\n        A[int(i) - 1] += 1\n\n \n\nans = 0\n\nfor i in A:\n\n    if i == 0:\n\n        ans += 1\n\nprint(ans)\n\n ", "generated_code": "N, K = list(map(int, input().split()))\n\n\n\nA = [0] * N\n\n\n\nfor _ in range(K):\n\n    eval(input())\n\n    for i in map(int, input().split()):\n\n        A[i - 1] += 1\n\n\n\nprint((A.count(0)))\n", "score": 1.0, "codebleu": 0.36561796827243753, "crystalbleu": 0.4816140871063354, "codebertscore": 0.89, "codescore": 0.34879228472709656, "surfaceSim": 0.6828030303030304, "abs_surfaceSim_minus_score": 0.31719696969696964}
{"golden_code": "import numpy as np\n\nN, K= list(map(int, input().split()))\n\nA=[int(i) for i in input().split()]\n\nF=[int(i) for i in input().split()]\n\n\n\nA=np.array(sorted(A, reverse=True))\n\nF=np.array(sorted(F))\n\n\n\nlower_bound=0\n\nupper_bound=np.max(A*F)\n\nK_tmp=0\n\n\n\nwhile upper_bound>=lower_bound:\n\n    mid=(lower_bound+upper_bound)//2\n\n    K_tmp=np.sum(np.maximum(A-mid//F, 0))\n\n    if K_tmp<=K:\n\n        upper_bound=mid-1\n\n    else:\n\n        lower_bound=mid+1\n\n\n\nprint(lower_bound)", "generated_code": "n,k=list(map(int,input().split()))\n\n*a,= list(map(int,input().split()))\n\n*f,= list(map(int,input().split()))\n\na=sorted(a)\n\nf=sorted(f, reverse=True)\n\n\n\ndef is_ok(arg):\n\n    cnt=0\n\n    for i in range(n):\n\n        cnt+=max(a[i]-arg//f[i], 0)\n\n    return cnt<=k\n\n\n\ndef meguru_bisect(ng, ok):\n\n    while (abs(ok - ng) > 1):\n\n        mid = (ok + ng) // 2\n\n        if is_ok(mid):\n\n            ok = mid\n\n        else:\n\n            ng = mid\n\n    return ok\n\n\n\nprint((meguru_bisect(-1, 10**12)))", "score": 1.0, "codebleu": 0.24619909504990498, "crystalbleu": 0.16312147758461068, "codebertscore": 0.79, "codescore": 0.9028770327568054, "surfaceSim": 0.4778350515463918, "abs_surfaceSim_minus_score": 0.5221649484536082}
{"golden_code": "N = int(eval(input()))\n\nans = N - 1\n\np = 1\n\nfor i in range(2, int((N ** 0.5) + 1)):\n\n    if p % 2 == 1 and i > (N ** 0.5):\n\n        break\n\n    if N % i == 0:\n\n        p = i\n\n        j = N // i\n\n        m = i + j - 2\n\n        if m < ans:\n\n            ans = m\n\n        else:\n\n            continue\n\n    else:\n\n        continue\n\nprint(ans)\n", "generated_code": "N = int(eval(input()))\n\nans = N - 1\n\nfor i in range(2, int((N ** 0.5) + 1)):\n\n    if N % i == 0:\n\n        j = N // i\n\n        m = i + j - 2\n\n        ans = min(ans, m)\n\nprint(ans)\n", "score": 1.0, "codebleu": 0.49689460694412724, "crystalbleu": 0.0, "codebertscore": 0.92, "codescore": 0.38195955753326416, "surfaceSim": 0.7663690476190477, "abs_surfaceSim_minus_score": 0.23363095238095233}
{"golden_code": "import numpy as np\n\nN=int(eval(input()))\n\nroot=int(np.sqrt(N)//1)\n\na=N\n\nb=N\n\nfor i in range(root, 0, -1):\n\n    if N%i==0:\n\n        a=i\n\n        b=N//i\n\n        break\n\nprint((a-1+b-1))", "generated_code": "N=int(eval(input()))\n\nroot=int((N**0.5)//1)\n\na=N\n\nb=N\n\nfor i in range(root, 0, -1):\n\n    if N%i==0:\n\n        a=i\n\n        b=N//i\n\n        break\n\nprint((a-1+b-1))\n", "score": 1.0, "codebleu": 0.5931574140209582, "crystalbleu": 0.0, "codebertscore": 0.94, "codescore": 0.8829947113990784, "surfaceSim": 0.8483606557377049, "abs_surfaceSim_minus_score": 0.15163934426229508}
{"golden_code": "a, b, c = list(map(int, input().split()))\n\nif (b - a) == (c - b):\n\n    print(\"YES\")\n\nelse:\n\n    print(\"NO\")", "generated_code": "a, b, c = list(map(int, input().split()))\n\nif b - a == c - b:\n\n    print(\"YES\")\n\nelse:\n\n    print(\"NO\")", "score": 1.0, "codebleu": 0.6885766355647422, "crystalbleu": 0.0, "codebertscore": 0.99, "codescore": 0.9928011894226074, "surfaceSim": 0.9813084112149533, "abs_surfaceSim_minus_score": 0.01869158878504673}
{"golden_code": "n,*x=list(map(int,open(0).read().split()))\n\n\n\nimport numpy as np\n\n\n\nxar=np.array(x)\n\n\n\nans=float(\"inf\")\n\nfor p in range(0,101):\n\n    tmp=sum((xar-p)**2)\n\n    ans=min(ans,tmp)\n\n    \n\nprint((int(ans)))", "generated_code": "n,*x=list(map(int,open(0).read().split()))\n\nans=float(\"inf\")\n\nfor p in range(0,101):\n\n  s=0\n\n  for xi in x:\n\n    s+=(xi-p)**2\n\n  ans=min(ans,s)\n\nprint((int(ans)))\n", "score": 1.0, "codebleu": 0.4743992956812364, "crystalbleu": 0.0, "codebertscore": 0.91, "codescore": 0.9507131576538086, "surfaceSim": 0.7565458873313938, "abs_surfaceSim_minus_score": 0.24345411266860617}
{"golden_code": "import numpy as np\n\n\n\nN = int(eval(input()))\n\nX = np.array(list(map(int, input().split())))\n\ncost = float(\"inf\")\n\nfor i in range(max(X) - min(X) + 1):\n\n    p = min(X) + i\n\n    cost = min(np.sum((X - p) ** 2), cost)\n\nprint(cost)", "generated_code": "N = int(eval(input()))\n\nX = sorted(list(map(int, input().split())))\n\nif N == 1:\n\n    print((0))\n\nelse:\n\n    r = X[-1] - X[0]\n\n    ans = float(\"inf\")\n\n    for i in range(r + 1):\n\n        R = X[0] + i\n\n        hp = 0\n\n        for j in range(N):\n\n            hp = hp + (R - X[j]) ** 2\n\n\n\n        ans = min(hp, ans)\n\n\n\n    print(ans)\n", "score": 1.0, "codebleu": 0.3469974593997215, "crystalbleu": 0.3107739498454203, "codebertscore": 0.83, "codescore": 0.06745907664299011, "surfaceSim": 0.6164690382081687, "abs_surfaceSim_minus_score": 0.3835309617918313}
{"golden_code": "import numpy as np\n\n\n\nn=int(eval(input()))\n\na_list=list(map(int,input().split()))\n\na_list_2=sorted(a_list,reverse=True)\n\na=np.array(a_list_2,dtype='uint8')\n\n\n\nalice=0\n\nbob=0\n\nfor i in range(n):\n\n\tif i%2==0:\n\n\t\talice+=a[i]\n\n\telse:\n\n\t\tbob+=a[i]\n\n\n\nprint((alice-bob))\n", "generated_code": "n=int(eval(input()))\n\na=list(map(int,input().split()))\n\na.sort(reverse=True)\n\n\n\nalice=0\n\nbob=0\n\n\n\nfor i in range(n):\n\n    if i%2==0:\n\n        alice+=a[i]\n\n    else:\n\n        bob+=a[i]\n\n        \n\nprint((alice-bob))", "score": 1.0, "codebleu": 0.5282923517427665, "crystalbleu": 0.6814678389353974, "codebertscore": 0.92, "codescore": 0.6404922604560852, "surfaceSim": 0.818785890073831, "abs_surfaceSim_minus_score": 0.18121410992616904}
{"golden_code": "#! /usr/bin/env python3\n\n\n\nimport sys\n\nint1 = lambda x: int(x) - 1\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\nsys.setrecursionlimit(500000)\n\n\n\n\n\ndef isMultiple(s, m):\n\n    tmp = 0\n\n    for i in range(len(s)):\n\n        tmp = (tmp * 10 + int(s[i])) % m\n\n        if tmp == 0:\n\n            return i\n\n    return -1\n\n\n\n\n\nk = int(readline())\n\nacc = \"7\" * 50000000\n\nif k % 2 == 0:\n\n    ans = -1\n\nelse:\n\n\n\n    ans = isMultiple(acc, k)\n\n    if ans != -1:\n\n        ans += 1\n\n\n\nprint(ans)\n", "generated_code": "#! /usr/bin/env python3\n\n\n\nimport sys\n\nint1 = lambda x: int(x) - 1\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\nsys.setrecursionlimit(500000)\n\n\n\nk = int(readline())\n\n\n\nans = -1\n\nacc = 7 % k\n\nfor n in range(1, k + 10):\n\n    if acc == 0:\n\n        ans = n\n\n        break\n\n    acc = (10 * acc + 7) % k\n\n\n\nprint(ans)\n", "score": 1.0, "codebleu": 0.44668800795647723, "crystalbleu": 0.36251708798701154, "codebertscore": 0.91, "codescore": 0.5264140367507935, "surfaceSim": 0.750661832412523, "abs_surfaceSim_minus_score": 0.24933816758747696}
{"golden_code": "import numpy as np\n\nS=eval(input())\n\nN=len(S)\n\nmod=[0 for i in range(2019)]\n\nmod2=0\n\nten=1\n\nfor i in range(N-1,-1,-1): \n\n  s=int(S[i])*ten\n\n  mod2+=np.mod(s,2019)\n\n  mod2=np.mod(mod2,2019)\n\n  mod[mod2]+=1\n\n  ten=(ten*10)%2019\n\nans=0\n\nfor i in range(2019):\n\n  k=mod[i]\n\n  if i==0:\n\n    if k>=2:\n\n      ans+=k*(k-1)//2+k\n\n    else:\n\n      ans+=k\n\n  else:\n\n    if k>=2:\n\n      ans+=k*(k-1)//2\n\nprint(ans) ", "generated_code": "S=eval(input())\n\nN=len(S)\n\nmod=[0 for i in range(2019)]\n\ns=0\n\nten=1\n\nfor i in range(N-1,-1,-1): \n\n  s+=int(S[i])*ten\n\n  mod2=s%2019\n\n  mod[mod2]+=1\n\n  ten=(ten*10)%2019\n\nans=0\n\nfor i in range(2019):\n\n  k=mod[i]\n\n  if i==0:\n\n    if k>=2:\n\n      ans+=k*(k-1)//2+k\n\n    else:\n\n      ans+=k\n\n  else:\n\n    if k>=2:\n\n      ans+=k*(k-1)//2\n\nprint(ans) ", "score": 1.0, "codebleu": 0.5861168552361398, "crystalbleu": 0.8123715442595341, "codebertscore": 0.96, "codescore": 0.9541590809822083, "surfaceSim": 0.8811116829644879, "abs_surfaceSim_minus_score": 0.11888831703551206}
{"golden_code": "N, D = list(map(int, input().split()))\n\ncnt = 0\n\nfor _ in range(N):\n\n    x, y = list(map(int, input().split()))\n\n    if x ** 2 + y ** 2 <= D ** 2:\n\n        cnt += 1\n\n        \n\nprint(cnt)", "generated_code": "N, D = list(map(int, input().split()))\n\ncnt = 0\n\nfor _ in range(N):\n\n    x, y = list(map(int, input().split()))\n\n    if x * x + y * y <= D * D:\n\n        cnt += 1\n\n        \n\nprint(cnt)", "score": 1.0, "codebleu": 0.7862404220058002, "crystalbleu": 0.8164474750850377, "codebertscore": 0.96, "codescore": 0.7886672019958496, "surfaceSim": 0.9312393887945671, "abs_surfaceSim_minus_score": 0.06876061120543286}
{"golden_code": "import math\n\nn=int(eval(input()))\n\nwaru=10**9+7\n\n\n\nli=[]\n\nli2=[]\n\n\n\nfor i in range(2,n+1):\n\n    tmp=math.factorial(n)\n\n    flag=1\n\n    for j in range(len(li)):\n\n        if i%li[j]==0:\n\n            flag=0\n\n            break\n\n    if flag==1:\n\n        li.append(i)\n\n        li2.append(0)\n\n        while tmp%i==0:\n\n            li2[len(li)-1]+=1\n\n            tmp=tmp//i\n\nans=1\n\n# print(li)\n\n# print(li2)\n\nfor i in range(len(li2)):\n\n    ans*=li2[i]+1\n\nprint((ans%waru))", "generated_code": "import sys\n\nfrom collections import *\n\nimport heapq\n\nimport math\n\nimport bisect\n\nfrom itertools import permutations,accumulate,combinations,product\n\nfrom fractions import gcd\n\ndef input():\n\n    return sys.stdin.readline()[:-1]\n\ndef ruiseki(lst):\n\n    return [0]+list(accumulate(lst))\n\nmod=pow(10,9)+7\n\nal=[chr(ord('a') + i) for i in range(26)]\n\n\n\ndef factorization(n):\n\n    arr = []\n\n    temp = n\n\n    for i in range(2, int(-(-n**0.5//1))+1):\n\n        if temp%i==0:\n\n            cnt=0\n\n            while temp%i==0:\n\n                cnt+=1\n\n                temp //= i\n\n            arr.append([i, cnt])\n\n    if temp!=1:\n\n        arr.append([temp, 1])\n\n    if arr==[]:\n\n        arr.append([n, 1])\n\n    return arr\n\n\n\nn=int(eval(input()))\n\nif n==1:\n\n    print((1))\n\n    exit()\n\nd=defaultdict(int)\n\nfor i in range(2,n+1):\n\n    tmp=factorization(i)\n\n    for j in tmp:\n\n        yaku,ko=j\n\n        d[yaku]+=ko\n\n# print(d)\n\nans=1\n\nfor i in list(d.values()):\n\n    ans*=i+1\n\n    ans%=mod\n\nprint(ans)", "score": 1.0, "codebleu": 0.2604336449358685, "crystalbleu": 0.13520367551855494, "codebertscore": 0.78, "codescore": 0.8194067478179932, "surfaceSim": 0.5463779128672746, "abs_surfaceSim_minus_score": 0.45362208713272545}
{"golden_code": "import random, math\n\nrandom.seed()\n\ndef gen(a, b, num):\n\n    result = set()\n\n    while 1:\n\n        while 1:\n\n            v = random.randint(a, b)//2*2+1\n\n            if v not in result:\n\n                break\n\n        for x in range(3, int(math.sqrt(v))+1, 2):\n\n            if v % x == 0:\n\n                break\n\n        else:\n\n            result.add(v)\n\n            if len(result) == num:\n\n                break\n\n    return result\n\nclass RH():\n\n    def __init__(self, s, base, mod):\n\n        self.base = base\n\n        self.mod = mod\n\n        self.rev = pow(base, mod-2, mod)\n\n\n\n        l = len(s)\n\n        self.h = h = [0]*(l+1)\n\n        tmp = 0\n\n        for i in range(l):\n\n            num = ord(s[i])\n\n            tmp = (tmp*base + num) % mod\n\n            h[i+1] = tmp\n\n    def calc(self, l, r):\n\n        return (self.h[r] - self.h[l] * pow(self.base, r-l, self.mod)) % self.mod\n\n    def fixed(self, length):\n\n        v = pow(self.base, length, self.mod)\n\n        h = self.h; mod = self.mod\n\n        def fixed_calc(l):\n\n            return (h[length+l] - h[l] * v) % mod\n\n        return fixed_calc\n\nclass RRH():\n\n    def __init__(self, s, num=10, primes=None):\n\n        primes = primes or gen(2, 10**3, num)\n\n        MOD = 10**9+7\n\n        self.rhs = [RH(s, p, MOD) for p in primes]\n\n    def calc(self, l, r):\n\n        return [rh.calc(l, r) for rh in self.rhs]\n\n    def fixed(self, length):\n\n        fs = [rh.fixed(length) for rh in self.rhs]\n\n        def multi_fixed_calc(l):\n\n            return list(f(l) for f in fs)\n\n        return multi_fixed_calc\n\n\n\nT = eval(input()); P = eval(input())\n\nprimes = gen(2, 10**3, 2)\n\nHT = RRH(T, primes=primes)\n\nHP = RRH(P, primes=primes)\n\n\n\npv = HP.calc(0, len(P))\n\ncalc = HT.fixed(len(P))\n\nfor i in range(len(T)-len(P)+1):\n\n    if calc(i) == pv:\n\n        print(i)", "generated_code": "class RH():\n\n    def __init__(self, s, base, mod):\n\n        self.base = base\n\n        self.mod = mod\n\n        self.rev = pow(base, mod-2, mod)\n\n\n\n        l = len(s)\n\n        self.h = h = [0]*(l+1)\n\n        tmp = 0\n\n        for i in range(l):\n\n            num = ord(s[i])\n\n            tmp = (tmp*base + num) % mod\n\n            h[i+1] = tmp\n\n    def calc(self, l, r):\n\n        return (self.h[r] - self.h[l] * pow(self.base, r-l, self.mod)) % self.mod\n\n    def fixed(self, length):\n\n        v = pow(self.base, length, self.mod)\n\n        h = self.h; mod = self.mod\n\n        def fixed_calc(l):\n\n            return (h[length+l] - h[l] * v) % mod\n\n        return fixed_calc\n\nT = eval(input()); P = eval(input())\n\nMOD = 10**18+9\n\nHT = RH(T, 11, MOD)\n\nHP = RH(P, 11, MOD)\n\n\n\npv = HP.calc(0, len(P))\n\ncalc = HT.fixed(len(P))\n\nfor i in range(len(T)-len(P)+1):\n\n    if calc(i) == pv:\n\n        print(i)", "score": 1.0, "codebleu": 0.4174922684701623, "crystalbleu": 0.4137155144234309, "codebertscore": 0.87, "codescore": 0.8451218605041504, "surfaceSim": 0.6787480811871056, "abs_surfaceSim_minus_score": 0.3212519188128944}
{"golden_code": "w = eval(input())\n\ny = list(set(w))\n\n\n\nfor i in range(len(y)):\n\n    if w.count(y[i]) % 2 != 0:\n\n        print('No')\n\n        exit(0)\n\n\n\nprint('Yes')", "generated_code": "w = list(eval(input()))\n\nx = list(set(w))\n\nfor i in x:\n\n    y = w.count(i)\n\n    if y % 2 != 0:\n\n        print('No')\n\n        exit(0)\n\nprint('Yes')", "score": 1.0, "codebleu": 0.5650334299418998, "crystalbleu": 0.0, "codebertscore": 0.94, "codescore": 0.7862182855606079, "surfaceSim": 0.849960254372019, "abs_surfaceSim_minus_score": 0.15003974562798095}
{"golden_code": "#ABC 130 B\n\nN,X=list(map(int,input().split()))\n\nL= [int(j) for j in input().split()]\n\ncnt=0\n\nimport numpy as np\n\njump = list(np.cumsum(L))\n\nfor j in jump:\n\n    if j <= X:\n\n        cnt+=1\n\nprint((cnt+1))", "generated_code": "#ABC 130 B\n\nN,X=list(map(int,input().split()))\n\nL= [int(j) for j in input().split()]\n\ncnt=0\n\nimport numpy as np\n\njump = list(np.cumsum(L))\n\nfor j in jump:\n\n    if j <= X:\n\n        cnt+=1\n\n    else:\n\n        break\n\nprint((cnt+1))", "score": 1.0, "codebleu": 0.9475963620454763, "crystalbleu": 0.8810811527032133, "codebertscore": 0.99, "codescore": 0.9937795996665955, "surfaceSim": 0.9509569377990431, "abs_surfaceSim_minus_score": 0.04904306220095689}
{"golden_code": "def main():\n\n  n = int(eval(input()))\n\n  a = [0]\n\n  b = [0]\n\n  c = [0]\n\n\n\n  for i in range(n):\n\n      aa,bb,cc = list(map(int,input().split()))\n\n      a.append(max(b[i] + aa, c[i] + aa))\n\n      b.append(max(a[i] + bb, c[i] + bb))\n\n      c.append(max(a[i] + cc, b[i] + cc))\n\n\n\n  print((max(a[-1], b[-1], c[-1])))\n\n\n\nmain()", "generated_code": "def main():\n\n    n = int(eval(input()))\n\n    a = 0\n\n    b = 0\n\n    c = 0\n\n\n\n    for i in range(n):\n\n        aa,bb,cc = list(map(int,input().split()))\n\n        a,b,c = max(b,c)+aa, max(a,c)+bb, max(a,b)+cc\n\n\n\n    print((max(a,b,c)))\n\n\n\nmain()\n", "score": 1.0, "codebleu": 0.3992907536419004, "crystalbleu": 0.38552748829260347, "codebertscore": 0.89, "codescore": 0.31280940771102905, "surfaceSim": 0.7519470404984423, "abs_surfaceSim_minus_score": 0.2480529595015577}
{"golden_code": "import itertools\n\nimport fractions\n\ndef main():\n\n  s = eval(input())\n\n  t = eval(input())\n\n  cnt = 0\n\n  for i in range(3):\n\n    if s[i] == t[i]:\n\n      cnt += 1\n\n  print(cnt)\n\nif __name__ == '__main__':\n\n  main()", "generated_code": "s = eval(input())\n\nt = eval(input())\n\nans = 0\n\nfor i in range(3):\n\n    if s[i] == t[i]:\n\n        ans += 1\n\nprint(ans)\n", "score": 1.0, "codebleu": 0.47080990306710424, "crystalbleu": 0.0, "codebertscore": 0.88, "codescore": 0.05040287971496582, "surfaceSim": 0.713679245283019, "abs_surfaceSim_minus_score": 0.28632075471698104}
{"golden_code": "A, B = list(map(int, input().split()))\n\nnumbers = list(range(A, B+1))\n\ncount = 0\n\nfor i in numbers:\n\n    m = str(i)\n\n    rm = ''.join(list(reversed(m)))\n\n    if m == rm:\n\n        count += 1\n\nprint(count)", "generated_code": "A, B = list(map(int, input().split()))\n\nx = list(range(1,10))\n\ny = list(range(10))\n\ncount = 0\n\nfor p in x:\n\n    for q in y:\n\n        for r in y:\n\n            sakasama = int(str(p)+str(q)+str(r)+str(q)+str(p))\n\n            if A <= sakasama <= B:\n\n                count += 1\n\nprint(count)", "score": 1.0, "codebleu": 0.4332484429494923, "crystalbleu": 0.2605140779829943, "codebertscore": 0.82, "codescore": 0.945835530757904, "surfaceSim": 0.7871017871017871, "abs_surfaceSim_minus_score": 0.21289821289821287}
{"golden_code": "import sys,queue,math,numpy as np,scipy as sc\n\nsys.setrecursionlimit(10**7)\n\ninput = sys.stdin.readline\n\nINF = 10**18\n\nMOD = 10**9 + 7\n\nLI = lambda : [int(x) for x in input().split()]\n\nN,M = LI()\n\nE = [LI() for _ in range(M)]\n\nans = 0\n\nfor i in range(M):\n\n    g = np.array([i for i in range(N+1)])\n\n\n\n    def root(x):\n\n        if g[x] != x:\n\n            g[x] = root(g[x])\n\n        return g[x]\n\n\n\n    for j in range(M):\n\n        if i != j: g[root(E[j][0])] = root(E[j][1])\n\n\n\n    ans += (root(E[i][0]) != root(E[i][1]))\n\n\n\nprint (ans)", "generated_code": "import sys,queue,math,numpy as np,scipy as sc\n\nsys.setrecursionlimit(10**7)\n\ninput = sys.stdin.readline\n\nINF = 10**18\n\nMOD = 10**9 + 7\n\nLI = lambda : [int(x) for x in input().split()]\n\nN,M = LI()\n\nE = [LI() for _ in range(M)]\n\nans = 0\n\nfor i in range(M):\n\n    g = [i for i in range(N+1)]\n\n\n\n    def root(x):\n\n        if g[x] != x:\n\n            g[x] = root(g[x])\n\n        return g[x]\n\n\n\n    for j in range(M):\n\n        if i != j: g[root(E[j][0])] = root(E[j][1])\n\n\n\n    ans += (root(E[i][0]) != root(E[i][1]))\n\n\n\nprint (ans)", "score": 1.0, "codebleu": 0.7615098321934485, "crystalbleu": 0.960090989443989, "codebertscore": 0.99, "codescore": 0.8132016062736511, "surfaceSim": 0.9906191369606003, "abs_surfaceSim_minus_score": 0.009380863039399667}
{"golden_code": "import sys\n\nstdin = sys.stdin \n\nni = lambda: int(ns())\n\nna = lambda: list(map(int, stdin.readline().split()))\n\nns = lambda: stdin.readline()\n\n\n\ndef Solve():\n\n    N,K=na()\n\n    S=[int(d) for d in eval(input())]\n\n    l=[]\n\n    N=len(S)\n\n    if(S[0]==0):\n\n        l.append(0)\n\n    b=S[0]\n\n    ct=1\n\n    for i in S[1:]:\n\n        if(b!=i):\n\n            l.append(ct)\n\n            ct=1\n\n            b=i\n\n        else:\n\n            ct+=1\n\n    l.append(ct)\n\n    len_l=len(l)\n\n    if(len_l//2 <= K):\n\n        return sum(l)\n\n    ans = res = sum(l[:2*K+1])\n\n    \n\n    if(len_l%2==0):\n\n        l.append(0)\n\n        len_l+=1\n\n    g = K * 2 + 1\n\n    for i in range(K*2+1,len_l-1,2):\n\n        ans -= l[i-g] + l[i-g+1]\n\n        ans += l[i] + l[1+i]\n\n        if(res<ans):\n\n            res=ans\n\n    #print(S)\n\n    #print(l)\n\n    #print(len_l)\n\n    return res\n\n\n\nprint((Solve()))", "generated_code": "import sys\n\nstdin = sys.stdin \n\nni = lambda: int(ns())\n\nna = lambda: list(map(int, stdin.readline().split()))\n\nns = lambda: stdin.readline()\n\n\n\ndef Solve():\n\n    N,K=na()\n\n    S=eval(input())\n\n    l=[]\n\n    N=len(S)\n\n    #print(len(S))\n\n    if(S[0]==\"0\"):\n\n        #print(\"00\")\n\n        l.append(0)\n\n    t=S[0]\n\n    ct=1\n\n    #print(\"aa\")\n\n    #print(S)\n\n    #print(S[0],S[1],S[2])\n\n    for b in S[1:]:\n\n        #print(b)\n\n        if(t!=b):\n\n            l.append(ct)\n\n            ct=1\n\n            t=b\n\n        else:\n\n            ct+=1\n\n    #print(\"bb\")\n\n    l.append(ct)\n\n    len_l=len(l)\n\n    if(len_l//2 <= K):\n\n        return sum(l)\n\n    ans = res = sum(l[:2*K+1])\n\n    \n\n    if(len_l%2==0):\n\n        l.append(0)\n\n        len_l+=1\n\n    g = K * 2 + 1\n\n    for i in range(K*2+1,len_l-1,2):\n\n        ans -= l[i-g] + l[i-g+1]\n\n        ans += l[i] + l[1+i]\n\n        if(res<ans):\n\n            res=ans\n\n    #print(S)\n\n    #print(l)\n\n    #print(len_l)\n\n    return res\n\n\n\nprint((Solve()))", "score": 1.0, "codebleu": 0.7213995741140312, "crystalbleu": 0.8760796479097736, "codebertscore": 0.94, "codescore": 0.9937013387680054, "surfaceSim": 0.9610319882446027, "abs_surfaceSim_minus_score": 0.038968011755397325}
{"golden_code": "N,K = list(map(int, input().split(' ')))\n\na=list(range(1,N+1))\n\nfor i in range(K):\n\n  count=int(eval(input()))\n\n  b=input().split(' ')\n\n  for j in range(count):\n\n    if int(b[j]) in a:\n\n      a.remove(int(b[j]))\n\nprint((len(a)))", "generated_code": "N,K = list(map(int, input().split(' ')))\n\na=list(range(1,N+1))\n\nfor i in range(K):\n\n  count=int(eval(input()))\n\n  b=[int(x.strip()) for x in input().split(' ')]\n\n  for j in range(count):\n\n    if b[j] in a:\n\n      a.remove(b[j])\n\nprint((len(a)))", "score": 1.0, "codebleu": 0.7043995047424835, "crystalbleu": 0.7486746653436183, "codebertscore": 0.98, "codescore": 0.9936176538467407, "surfaceSim": 0.8844262295081967, "abs_surfaceSim_minus_score": 0.11557377049180328}
{"golden_code": "import sys\n\n\n\ninput = sys.stdin.readline\n\n\n\n\n\ndef main():\n\n    X = int(eval(input()))\n\n\n\n    for A in range(-200, 201):\n\n        for B in range(-200, 201):\n\n            if A ** 5 - B ** 5 == X:\n\n                print((A, B))\n\n                exit()\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n", "generated_code": "import sys\n\n\n\ninput = sys.stdin.readline\n\n\n\n\n\ndef main():\n\n    X = int(eval(input()))\n\n\n\n    for A in range(-119, 120 + 1):\n\n        for B in range(-119, 120 + 1):\n\n            if A ** 5 - B ** 5 == X:\n\n                print((A, B))\n\n                exit()\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n", "score": 1.0, "codebleu": 0.7554562868974957, "crystalbleu": 0.0, "codebertscore": 0.96, "codescore": 0.018865162506699562, "surfaceSim": 0.9625553709856036, "abs_surfaceSim_minus_score": 0.03744462901439638}
{"golden_code": "from numpy import*\n\na,b=median(t:=loadtxt(open(0),skiprows=1),0)\n\nprint((int((a-b)*~(~len(t)%2))+1))", "generated_code": "from statistics import*\n\n(n,),*t=[list(map(int,t.split()))for t in open(0)]\n\na,b=list(map(median,list(zip(*t))))\n\nprint((int((b-a)*(2-n%2))+1))", "score": 1.0, "codebleu": 0.24364115598855923, "crystalbleu": 0.0, "codebertscore": 0.84, "codescore": 0.9279150366783142, "surfaceSim": 0.5466200466200466, "abs_surfaceSim_minus_score": 0.4533799533799534}
{"golden_code": "for i in range(0, int(eval(input()))):\n\n    sidelen = [int(j) for j in input().split(\" \")]\n\n    sidelen.sort(reverse=True)\n\n    if(sidelen[0]**2 == sidelen[1]**2 + sidelen[2]**2):\n\n        print(\"YES\")\n\n    else:\n\n        print(\"NO\")", "generated_code": "import sys\n\nfor i in sys.stdin:\n\n    try:\n\n        sidelen = [int(j) for j in i.split(\" \")]\n\n        sidelen.sort(reverse=True)\n\n        if(sidelen[0]**2 == sidelen[1]**2 + sidelen[2]**2):\n\n            print(\"YES\")\n\n        else:\n\n            print(\"NO\")\n\n    except:\n\n        continue", "score": 1.0, "codebleu": 0.5554125576967978, "crystalbleu": 0.0, "codebertscore": 0.93, "codescore": 0.9873111248016357, "surfaceSim": 0.8143724696356276, "abs_surfaceSim_minus_score": 0.1856275303643724}
{"golden_code": "N = int(eval(input()))\n\na = 1\n\nfor n in range(2,N+1):\n\n    a = a*n % (10**9+7)\n\nprint(a)", "generated_code": "def factorial(N):\n\n    a = 1\n\n    for n in range(2,N+1):\n\n        a = a*n % (10**9 + 7)\n\n    return a\n\n\n\nif __name__ == '__main__':\n\n    N = int(eval(input()))\n\n    print((factorial(N)))", "score": 1.0, "codebleu": 0.6541261135584671, "crystalbleu": 0.0, "codebertscore": 0.91, "codescore": 0.42122313380241394, "surfaceSim": 0.6102150537634408, "abs_surfaceSim_minus_score": 0.38978494623655924}
{"golden_code": "a, b, c, x, y = list(map(int, input().split()))\n\n# print(a, b, c, x, y)\n\n\n\nans = 10000 * (10 **5) + 7\n\nc_max = 0\n\nif x > y:\n\n  c_max = x * 2\n\nelse:\n\n  c_max = y * 2\n\n\n\nfor cc in range(c_max+1):\n\n  ac = x - (cc // 2)\n\n  bc = y - (cc // 2)\n\n  \n\n  if ac < 0:\n\n    ac = 0\n\n  if bc < 0:\n\n    bc = 0\n\n  price = ac * a + bc * b + cc * c\n\n  # print('price: {}, ac: {}, bc: {}, cc: {}'.format(price, ac, bc, cc))\n\n  ans = min(ans, price)\n\n\n\nprint(ans)", "generated_code": "a, b, c, x, y = list(map(int, input().split()))\n\n# print(a, b, c, x, y)\n\n\n\nans = 10000 * (10 **5) + 7\n\nc_max = 0\n\nif x > y:\n\n  c_max = x * 2\n\nelse:\n\n  c_max = y * 2\n\n\n\nfor cc in range(0, c_max+1, 2):\n\n  ac = x - (cc // 2)\n\n  bc = y - (cc // 2)\n\n  \n\n  if ac < 0:\n\n    ac = 0\n\n  if bc < 0:\n\n    bc = 0\n\n  price = ac * a + bc * b + cc * c\n\n  # print('price: {}, ac: {}, bc: {}, cc: {}'.format(price, ac, bc, cc))\n\n  ans = min(ans, price)\n\n\n\nprint(ans)\n\n  ", "score": 1.0, "codebleu": 0.955087040289192, "crystalbleu": 0.9488826794224877, "codebertscore": 0.99, "codescore": 0.9938602447509766, "surfaceSim": 0.995575221238938, "abs_surfaceSim_minus_score": 0.004424778761061954}
{"golden_code": "from numpy import*\n\nN,*A=open(0)\n\nN,A,S,a=int(N),loadtxt(A,int),1,0\n\nwhile S:B=A//N;S=sum(B);a+=S;A+=S-B*-~N\n\nprint(a)", "generated_code": "N, *A = list(map(int, open(0).read().split()))\n\n\n\nans = 0\n\nS = -1\n\nwhile S:\n\n    S = sum(a // N for a in A)\n\n    ans += S\n\n    A = [a % N + (S - a // N) for a in A]\n\n\n\nprint(ans)\n", "score": 1.0, "codebleu": 0.1967904714664414, "crystalbleu": 0.0, "codebertscore": 0.81, "codescore": 0.9936230778694153, "surfaceSim": 0.5819366852886405, "abs_surfaceSim_minus_score": 0.4180633147113595}
{"golden_code": "#!/usr/bin/env python3\n\ndef main():\n\n    import numpy as np\n\n\n\n    np.set_printoptions(linewidth=200)\n\n\n\n    N, W = list(map(int, input().split()))\n\n    lst = [list(map(int, input().split())) for _ in range(N)]\n\n    v_max = 10 ** 3 * 100 * 10\n\n    w_max = 10 ** 9 * v_max\n\n\n\n    # i以上の価値を持つときの最小重量\n\n    dp = np.full(v_max, w_max, dtype=np.int64)\n\n    # initialize\n\n    dp[0] = 0\n\n\n\n    for n in range(N):\n\n        w, v = lst[n]\n\n        dp[v:] = np.minimum(dp[v:], dp[:-v] + w)\n\n\n\n    ans = 0\n\n    for i, w in enumerate(dp):\n\n        if w <= W:\n\n            ans = i\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n", "generated_code": "#!/usr/bin/env python3\n\ndef main():\n\n    import numpy as np\n\n\n\n    N, W = list(map(int, input().split()))\n\n    lst = [list(map(int, input().split())) for _ in range(N)]\n\n    v_max = 10 ** 3 * 100 * 10\n\n    w_max = 10 ** 9 * v_max\n\n\n\n    # i以上の価値を持つときの最小重量\n\n    dp = np.full(v_max, w_max, dtype=np.int64)\n\n    # initialize\n\n    dp[0] = 0\n\n\n\n    for w, v in lst:\n\n        dp[v:] = np.minimum(dp[v:], dp[:-v] + w)\n\n\n\n    print((np.asarray(dp <= W).nonzero()[0].max()))\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n", "score": 1.0, "codebleu": 0.7189057468667899, "crystalbleu": 0.7204244793230812, "codebertscore": 0.94, "codescore": 0.018542736768722534, "surfaceSim": 0.9217252396166133, "abs_surfaceSim_minus_score": 0.07827476038338665}
{"golden_code": "N = int(eval(input()))\n\np = 1\n\nfor i in range(N):\n\n    p *= (i + 1)\n\n    p %= (1e9 + 7)\n\nprint((int(p)))", "generated_code": "N = int(eval(input()))\n\np = 1\n\nfor i in range(N):\n\n    p = p * (i + 1) % (1e9 + 7)\n\nprint((int(p)))", "score": 1.0, "codebleu": 0.7433297555071704, "crystalbleu": 0.0, "codebertscore": 0.98, "codescore": 0.9937663078308105, "surfaceSim": 0.9354395604395604, "abs_surfaceSim_minus_score": 0.06456043956043955}
{"golden_code": "s=eval(input())\n\nt=eval(input())\n\ns*=2\n\nnext=[[-1]*26 for _ in range(len(s))]\n\nalph=[[]for _ in range(26)]\n\nfor i in range(len(s)):\n\n\talph[ord(s[i])-ord(\"a\")].append(i)\n\nfrom bisect import bisect_right\n\nfor i in range(len(s)//2):\n\n\tfor j in range(26):\n\n\t\tif len(alph[j])>bisect_right(alph[j],i):\n\n\t\t\tnext[i][j]=alph[j][bisect_right(alph[j],i)]\n\nans=1\n\nnow=len(s)//2-1\n\nfor x in t:\n\n\tr=ord(x)-ord(\"a\")\n\n\tnow=next[now][r]\n\n\tif now==-1:\n\n\t\tprint((-1))\n\n\t\texit()\n\n\tif now>=len(s)//2:\n\n\t\tans+=len(s)//2\n\n\t\tnow-=len(s)//2\n\nprint((ans+now-len(s)//2))", "generated_code": "#O(|S|log|s|)\n\ndef main():\n\n\ts=eval(input())\n\n\tt=eval(input())\n\n\tn=len(s)\n\n\tnow=-1\n\n\tans=1\n\n\tif not set(t)<=set(s):#tがsの部分集合でない\n\n\t\tprint((-1))\n\n\t\texit()\n\n\tfor x in t:\n\n\t\tnow=s.find(x,now+1)#nowより大きいところからxを探す\n\n\t\tif now==-1:#nowより大きいところでxが見つからなかったら\n\n\t\t\tans+=n\n\n\t\t\tnow=s.find(x)\n\n\tprint((ans+now))\n\nif __name__ == '__main__':\n\n\tmain()", "score": 1.0, "codebleu": 0.16404167581080745, "crystalbleu": 0.0966474554057038, "codebertscore": 0.74, "codescore": 0.028630705550312996, "surfaceSim": 0.4332141696457589, "abs_surfaceSim_minus_score": 0.5667858303542411}
{"golden_code": "import math\n\n\n\nN = int(eval(input()))\n\n\n\nnum = math.factorial(N)\n\n\n\nk, r = divmod(num, 10**9 + 7)\n\nprint(r)", "generated_code": "N = int(eval(input()))\n\n\n\nFACTOR = 10 ** 9 + 7\n\n\n\nnum = 1\n\nfor i in range(1, N+1):\n\n    num *= i\n\n    k, r = divmod(num, FACTOR)\n\n    num = r\n\n\n\nprint(r)", "score": 1.0, "codebleu": 0.3120396009464104, "crystalbleu": 0.0, "codebertscore": 0.85, "codescore": 0.8808444142341614, "surfaceSim": 0.6274509803921569, "abs_surfaceSim_minus_score": 0.37254901960784315}
{"golden_code": "import re;print((max(list(map(len,re.split('[^ACGT]',eval(input())))))))", "generated_code": "p=m=0\n\nfor c in eval(input()):p=-~p*(c in'ATGC');m=max(m,p)\n\nprint(m)", "score": 1.0, "codebleu": 0.18452380952380953, "crystalbleu": 0.0, "codebertscore": 0.74, "codescore": 0.9423038959503174, "surfaceSim": 0.25511695906432746, "abs_surfaceSim_minus_score": 0.7448830409356726}
{"golden_code": "prim=[True]*1000000\n\nprim[0],prim[1]=False,False\n\nfor i in range(2,1000):\n\n    if prim[i]:\n\n        for j in range(i*2,1000000,i):\n\n            prim[j]=False\n\nprime=[i for i,j in enumerate(prim) if j==True]\n\n\n\nwhile True:\n\n    n=int(eval(input()))\n\n    if n==0:\n\n        break\n\n    print((sum(prime[:n])))", "generated_code": "prim=[True]*1000000\n\nprim[0]=prim[1]=False\n\nfor i in range(2,350):\n\n    if prim[i]:\n\n        for j in range(i*2,110000,i):\n\n            prim[j]=False\n\nprime=[i for i,j in enumerate(prim) if j==True]\n\n\n\nwhile True:\n\n    n=int(eval(input()))\n\n    if n==0:\n\n        break\n\n    print((sum(prime[:n])))", "score": 1.0, "codebleu": 0.7053920770569988, "crystalbleu": 0.0, "codebertscore": 0.99, "codescore": 0.8658477067947388, "surfaceSim": 0.980327868852459, "abs_surfaceSim_minus_score": 0.01967213114754096}
{"golden_code": "inf = (5000 * 10 ** 5) * 3\n\n\n\na, b, c, x, y = list(map(int, input().split()))\n\n\n\nret = inf\n\nfor cnt_ab in range(max(x, y) * 2 + 1):\n\n    d = cnt_ab // 2\n\n\n\n    cnt_a = max(0, x - d)\n\n    cnt_b = max(0, y - d)\n\n\n\n    t = cnt_ab * c + cnt_a * a + cnt_b * b\n\n    ret = min(ret, t)\n\nprint(ret)\n", "generated_code": "def main():\n\n    A, B, AB, X, Y = list(map(int, input().split()))\n\n    M = max(X, Y)\n\n\n\n    k = 0\n\n    ans = A * X + B * Y\n\n    while True:\n\n        ans = min(\n\n            ans,\n\n            AB * k * 2 + max(0, X - k) * A + max(0, Y - k) * B\n\n        )\n\n\n\n        if k >= M: break\n\n        k += 1\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n", "score": 1.0, "codebleu": 0.22553413540275377, "crystalbleu": 0.13599966483111123, "codebertscore": 0.8, "codescore": 0.01946643926203251, "surfaceSim": 0.5728519391472038, "abs_surfaceSim_minus_score": 0.4271480608527962}
{"golden_code": "x = int(eval(input()))\n\n\n\nfor a in range(-118, 120):\n\n    for b in range(-119, 119):\n\n        if a**5-b**5 == x:\n\n            print((a, b))\n\n            exit()", "generated_code": "x = int(eval(input()))\n\n\n\nfor a in range(1, 120):\n\n    for b in range(-119, 119):\n\n        if a**5-b**5 == x:\n\n            print((a, b))\n\n            exit()", "score": 1.0, "codebleu": 0.9147186980834974, "crystalbleu": 0.0, "codebertscore": 0.98, "codescore": 0.9936363697052002, "surfaceSim": 0.9905660377358491, "abs_surfaceSim_minus_score": 0.009433962264150941}
{"golden_code": "def kmpTable(w):\n\n    lw = len(w)\n\n    nx = [-1] * (lw + 1)\n\n    j = -1\n\n    for i in range(lw):\n\n        while j >= 0 and w[i] != w[j]:\n\n            j = nx[j]\n\n        j += 1\n\n        nx[i + 1] = j\n\n    return nx\n\ndef kmpSearch(s, w):\n\n    ls = len(s)\n\n    start = 0\n\n    w_idx = 0\n\n    ret = []\n\n    nx = kmpTable(w)\n\n    while start + w_idx < ls:\n\n        if s[start + w_idx] == w[w_idx]:\n\n            w_idx += 1\n\n            if w_idx == len(w):\n\n                ret.append(start)\n\n                start = start + w_idx - nx[w_idx]\n\n                w_idx = nx[w_idx]\n\n        else:\n\n            if w_idx == 0:\n\n                start += 1\n\n            else:\n\n                start = start + w_idx - nx[w_idx]\n\n                w_idx = nx[w_idx]\n\n    return ret\n\nT = eval(input())\n\nP = eval(input())\n\nans = kmpSearch(T, P)\n\nif ans:\n\n    print((\"\\n\".join(map(str, ans))))\t\n\n\n", "generated_code": "def kmpTable(w):\n\n    lw = len(w)\n\n    nx = [-1] * (lw + 1)\n\n    j = -1\n\n    for i in range(lw):\n\n        while j >= 0 and w[i] != w[j]:\n\n            j = nx[j]\n\n        j += 1\n\n        nx[i + 1] = j\n\n    return tuple(nx)\n\ndef kmpSearch(s, w):\n\n    ls = len(s)\n\n    start = 0\n\n    w_idx = 0\n\n    ret = []\n\n    nx = kmpTable(w)\n\n    while start + w_idx < ls:\n\n        if s[start + w_idx] == w[w_idx]:\n\n            w_idx += 1\n\n            if w_idx == len(w):\n\n                ret.append(start)\n\n                start = start + w_idx - nx[w_idx]\n\n                w_idx = nx[w_idx]\n\n        else:\n\n            if w_idx == 0:\n\n                start += 1\n\n            else:\n\n                start = start + w_idx - nx[w_idx]\n\n                w_idx = nx[w_idx]\n\n    return ret\n\nT = eval(input())\n\nP = eval(input())\n\nans = kmpSearch(T, P)\n\nif ans:\n\n    print((\"\\n\".join(map(str, ans))))\t\n\n\n", "score": 1.0, "codebleu": 0.9841560328245469, "crystalbleu": 0.9711358330636797, "codebertscore": 0.99, "codescore": 0.9938356280326843, "surfaceSim": 0.9960272417707151, "abs_surfaceSim_minus_score": 0.0039727582292848895}
{"golden_code": "import sys\n\nfrom operator import itemgetter\n\n\n\nn, m = list(map(int, input().split()))\n\na = list(map(int, sys.stdin.readline().split()))\n\nbc = [ tuple(map(int, x.split())) for x in sys.stdin.readlines()]\n\nbc.sort(key = itemgetter(1), reverse=True)\n\nbc.append((n,0))\n\ndiff = []\n\nfor b, c in bc:\n\n    diff += [c] * b\n\n    if len(diff) > n:\n\n        break\n\n\n\na += diff\n\na.sort()\n\nprint((sum(a[-n:])))\n", "generated_code": "import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nfrom operator import itemgetter\n\n\n\nn, m = list(map(int, readline().split()))\n\na = list(map(int, readline().split()))\n\nm = list(map(int, read().split()))\n\nbc = list(zip(m,m))\n\n\n\nbc.sort(key = itemgetter(1), reverse=True)\n\nbc.append((n,0))\n\ndiff = []\n\nfor b, c in bc:\n\n    diff += [c] * b\n\n    if len(diff) > n:\n\n        break\n\n\n\na += diff\n\na.sort()\n\nprint((sum(a[-n:])))\n", "score": 1.0, "codebleu": 0.6746588487469303, "crystalbleu": 0.7449297660627612, "codebertscore": 0.94, "codescore": 0.7497425079345703, "surfaceSim": 0.8344444444444444, "abs_surfaceSim_minus_score": 0.16555555555555557}
{"golden_code": "import sys\n\nreadline = sys.stdin.readline\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\n#mod = 998244353\n\nINF = 10**18\n\neps = 10**-7\n\n\n\nm,n,k = list(map(int,readline().split()))\n\n\n\ndef comb(n, r, mod):\n\n    r = min(r, n-r)\n\n    mol = 1\n\n    deno = 1\n\n    for i in range(1, r+1):\n\n        mol = mol * (n-r+i) % mod\n\n        deno = deno * i % mod\n\n    ret = mol * pow(deno, mod-2, mod) % mod\n\n    return ret\n\n\n\ndef f1(x,y,a,b):\n\n    return (a+b-x-y)*(a-x+1)*(b-y+1)//2\n\n\n\ndef f2(x,a):\n\n    return (a-x)*(a-x+1)//2\n\n\n\nans = 0\n\n\n\nfor x in range(1,n+1):\n\n    for y in range(1,m+1):\n\n        ans += f1(x,y,n,m)+f1(1,1,x,y)+f1(1,y,x,m)+f1(x,1,n,y)\n\n        ans -= f2(x,n) + f2(1,x) + f2(1,y) + f2(y,m)\n\n        ans %= mod\n\n\n\nans = (ans * comb(m*n-2,k-2,mod))%mod\n\nans = ans*pow(2,mod-2,mod)%mod\n\n\n\nprint(ans)\n", "generated_code": "import sys\n\nreadline = sys.stdin.readline\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\n#mod = 998244353\n\nINF = 10**18\n\neps = 10**-7\n\n\n\nm,n,k = list(map(int,readline().split()))\n\n\n\ndef comb(n, r, mod):\n\n    r = min(r, n-r)\n\n    mol = 1\n\n    deno = 1\n\n    for i in range(1, r+1):\n\n        mol = mol * (n-r+i) % mod\n\n        deno = deno * i % mod\n\n    ret = mol * pow(deno, mod-2, mod) % mod\n\n    return ret\n\n\n\ndef f1(x,y,a,b):\n\n    return (a+b-x-y)*(a-x+1)*(b-y+1)//2\n\n\n\ndef f2(x,a):\n\n    return (a-x)*(a-x+1)//2\n\n\n\nans = 0\n\n\n\nfor x in range(1,n+1):\n\n    for y in range(1,m+1):\n\n        a = n-x+1\n\n        b = m-y+1\n\n        c = m*(a*(a-1)+x*(x-1))\n\n        d = n*(b*(b-1)+y*(y-1))\n\n        ans += (c+d)//2\n\n        ans %= mod\n\n\n\nans = (ans * comb(m*n-2,k-2,mod))%mod\n\nans = ans*pow(2,mod-2,mod)%mod\n\n\n\nprint(ans)\n\n\n", "score": 1.0, "codebleu": 0.844738269351389, "crystalbleu": 0.808173874496045, "codebertscore": 0.96, "codescore": 0.9935653805732727, "surfaceSim": 0.9564417177914111, "abs_surfaceSim_minus_score": 0.04355828220858893}
{"golden_code": "import sys\n\nsys.setrecursionlimit(2147483647)\n\nINF=float(\"inf\")\n\nMOD=10**9+7\n\ninput=lambda :sys.stdin.readline().rstrip()\n\ndef resolve():\n\n    n,T=list(map(int,input().split()))\n\n    AB=[tuple(map(int,input().split())) for _ in range(n)]\n\n    ans=-INF\n\n\n\n    # 何も考えずやる\n\n    dp=[0]*T\n\n    for i in range(n):\n\n        a,b=AB[i]\n\n        ndp=dp[:]\n\n        for t in range(T):\n\n            if(t+a<T):\n\n                ndp[t+a]=max(ndp[t+a],dp[t]+b)\n\n            else:\n\n                ans=max(ans,dp[t]+b)\n\n        dp=ndp\n\n    ans=max(ans,max(dp))\n\n\n\n    # 時間が最もかかるもののうち、価値が最大のものを最後にする\n\n    AB.sort()\n\n    la,lb=AB[-1]\n\n\n\n    dp=[0]*T\n\n    for i in range(n-1):\n\n        a,b=AB[i]\n\n        ndp=dp[:]\n\n        for t in range(T):\n\n            if(t+a<T):\n\n                ndp[t+a]=max(ndp[t+a],dp[t]+b)\n\n            else:\n\n                ans=max(ans,dp[t]+b)\n\n        dp=ndp\n\n    ans=max(ans,max(dp)+lb)\n\n\n\n    # 価値が最大のもののうち、時間が最もかかるものを最後にする\n\n    AB.sort(lambda x:(x[1],x[0]))\n\n    la,lb=AB[-1]\n\n\n\n    dp=[0]*T\n\n    for i in range(n-1):\n\n        a,b=AB[i]\n\n        ndp=dp[:]\n\n        for t in range(T):\n\n            if(t+a<T):\n\n                ndp[t+a]=max(ndp[t+a],dp[t]+b)\n\n            else:\n\n                ans=max(ans,dp[t]+b)\n\n        dp=ndp\n\n    ans=max(ans,max(dp)+lb)\n\n\n\n    print(ans)\n\nresolve()", "generated_code": "import sys\n\nsys.setrecursionlimit(2147483647)\n\nINF=float(\"inf\")\n\nMOD=10**9+7\n\ninput=lambda :sys.stdin.readline().rstrip()\n\ndef resolve():\n\n    n,T=list(map(int,input().split()))\n\n    AB=[tuple(map(int,input().split())) for _ in range(n)]\n\n    AB.sort()\n\n\n\n    dp=[0]*T\n\n    ans=-INF\n\n    for i in range(n):\n\n        a,b=AB[i]\n\n        ndp=dp[:]\n\n        for t in range(T):\n\n            if(t+a<T):\n\n                ndp[t+a]=max(ndp[t+a],dp[t]+b)\n\n            else:\n\n                ans=max(ans,dp[t]+b)\n\n        dp=ndp\n\n    print((max(ans,max(dp))))\n\nresolve()", "score": 1.0, "codebleu": 0.44417108490355317, "crystalbleu": 0.283859753416872, "codebertscore": 0.89, "codescore": 0.8382750153541565, "surfaceSim": 0.8171545968156138, "abs_surfaceSim_minus_score": 0.18284540318438625}
{"golden_code": "def main():\n\n    N, M = (int(i) for i in input().split())\n\n\n\n    def trial_division(n):\n\n        divs = []\n\n        for i in range(1, int(n**0.5)+1):\n\n            if n % i == 0:\n\n                divs.append(i)\n\n                if i != n//i:\n\n                    divs.append(n//i)\n\n        divs.sort(reverse=True)\n\n        return divs\n\n    divs = trial_division(M)\n\n    for d in divs:\n\n        if d*N <= M:\n\n            return print(d)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n", "generated_code": "def main():\n\n    def trial_division(n):\n\n        divs = []\n\n        for i in range(1, int(n**0.5)+1):\n\n            if n % i == 0:\n\n                divs.append(i)\n\n                if i != n//i:\n\n                    divs.append(n//i)\n\n        divs.sort(reverse=True)\n\n        return divs\n\n\n\n    N, M = (int(i) for i in input().split())\n\n    divs = trial_division(M)\n\n    for d in divs:\n\n        if N*d <= M:\n\n            return print(d)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n", "score": 1.0, "codebleu": 0.7997314745624177, "crystalbleu": 0.9228311177011455, "codebertscore": 0.97, "codescore": 0.9938064813613892, "surfaceSim": 0.9269311064718163, "abs_surfaceSim_minus_score": 0.07306889352818369}
{"golden_code": "a,b = list(map(int,input().split()))\n\ncount = 0\n\nfor i in range(a,b+1):\n\n    s = str(i)\n\n    l = len(s)\n\n    if all(s[j] == s[l-j-1] for j in range(l)):\n\n            count += 1\n\nprint(count)", "generated_code": "a,b = list(map(int,input().split()))\n\ncount = 0\n\nfor i in range(a,b+1):\n\n    s = str(i)\n\n    if s == s[::-1]:\n\n         count += 1\n\nprint(count)", "score": 1.0, "codebleu": 0.6184589989031075, "crystalbleu": 0.0, "codebertscore": 0.94, "codescore": 0.7932868003845215, "surfaceSim": 0.7705263157894737, "abs_surfaceSim_minus_score": 0.22947368421052627}
{"golden_code": "import numpy as np\n\n\n\nN, K = list(map(int, input().split()))\n\np = np.array(list(map(int, input().split())))\n\n\n\ns = np.cumsum(p)\n\n# print(p, s)\n\n\n\nm = []\n\n\n\n\n\ndef partsum(s, x):\n\n    global K\n\n    if x == K - 1:\n\n        return s[x]\n\n    return s[x] - s[x - K]\n\n\n\n\n\nfor i in range(K - 1, N):\n\n    m.append(partsum(s, i))\n\n# print(m)\n\n\n\nidx = m.index(max(m))\n\n# print(idx)\n\n\n\nans = 0\n\nfor j in range(idx, idx + K):\n\n    ans += (p[j] + 1) / 2\n\nprint(ans)\n", "generated_code": "from collections import deque\n\n\n\nN, K = list(map(int, input().split()))\n\np = list(map(int, input().split()))\n\n\n\nmx = 0\n\ns = 0\n\nq = deque()\n\n\n\nfor i in range(N):\n\n    p[i] += 1\n\n\n\nfor i in range(N):\n\n    s += p[i]\n\n    q.append(p[i])\n\n    if len(q) > K:\n\n        s -= q.popleft()\n\n    if len(q) == K:\n\n        mx = max(mx, s)\n\n\n\nprint((mx / 2))\n\n\n", "score": 1.0, "codebleu": 0.2794872093042987, "crystalbleu": 0.22837344817415944, "codebertscore": 0.81, "codescore": 0.9630781412124634, "surfaceSim": 0.6557236654296318, "abs_surfaceSim_minus_score": 0.3442763345703682}
{"golden_code": "import numpy as np\n\nN,x = list(map(int,input().split()))\n\nA = np.array(input().split(), dtype = np.int64)\n\nA.sort()\n\nnp.cumsum(A, out = A)\n\nanswer = (A <= x).sum()\n\n\n\nif answer == N and A[-1] != x:\n\n  answer -= 1\n\nprint(answer)\n", "generated_code": "import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nfrom bisect import bisect_right\n\nimport itertools\n\n\n\nN,X,*A = list(map(int,read().split()))\n\n\n\nA.sort()\n\nAcum = list(itertools.accumulate(A))\n\n\n\nanswer = bisect_right(Acum,X)\n\nif answer == N:\n\n    if Acum[-1] < X:\n\n        answer -= 1\n\nprint(answer)", "score": 1.0, "codebleu": 0.3465742562977088, "crystalbleu": 0.3159148237572417, "codebertscore": 0.77, "codescore": 0.1593109369277954, "surfaceSim": 0.5857886420671066, "abs_surfaceSim_minus_score": 0.41421135793289343}
{"golden_code": "N = int(eval(input()))\n\nif N < 2:\n\n  print(N)\n\nelif 2<=N<4:\n\n  print((2))\n\nelif 4<=N<8:\n\n  print((4))\n\nelif 8<=N<16:\n\n  print((8))\n\nelif 16<=N<32:\n\n  print((16))\n\nelif 32<=N<64:\n\n  print((32))\n\nelif 64<=N:\n\n  print((64))", "generated_code": "N = int(eval(input()))\n\nNum = [int(2**i) for i in range(7)]\n\nif N in Num:\n\n  print(N)\n\nelse:\n\n  Num.append(N)\n\n  Num = sorted(Num)\n\n  print((2 ** (Num.index(N) - 1)))", "score": 1.0, "codebleu": 0.24234907186821908, "crystalbleu": 0.0, "codebertscore": 0.77, "codescore": 0.2098146378993988, "surfaceSim": 0.5086124401913876, "abs_surfaceSim_minus_score": 0.4913875598086124}
{"golden_code": "import sys\n\ns = input()\n\nts = ['']\n\nwhile True:\n\n  nts= []\n\n  for t in ts:\n\n    for w in ['dreamer', 'eraser', 'dream', 'erase']:\n\n      if s == t + w:\n\n        print('YES')\n\n        sys.exit()\n\n      if s.startswith(t + w):\n\n        nts.append(t + w)\n\n  if len(nts) == 0:\n\n    print('NO')\n\n    sys.exit()\n\n  ts = nts\n", "generated_code": "from sys import exit\n\ns = eval(input())\n\nts = ['']\n\nwhile True:\n\n  nts= []\n\n  for t in ts:\n\n    for w in ['dreamer', 'eraser', 'dream', 'erase']:\n\n      tw = t + w\n\n      if s == tw:\n\n        print('YES')\n\n        exit()\n\n      if s.startswith(tw):\n\n        nts.append(tw)\n\n  if len(nts) == 0:\n\n    print('NO')\n\n    exit()\n\n  ts = nts\n", "score": 1.0, "codebleu": 0.5413355107243876, "crystalbleu": 0.7112491134269354, "codebertscore": 0.96, "codescore": 0.9937451481819153, "surfaceSim": 0.8977611940298508, "abs_surfaceSim_minus_score": 0.10223880597014923}
{"golden_code": "l,r=list(map(int,input().split()))\n\ns=list(range(l,r+1))[:2019]\n\nprint((min(i*j%2019for i in s for j in s if i<j)))", "generated_code": "l,r=list(map(int,input().split()));s=list(range(l,r+1))[:673];print((min(i*j%2019for i in s for j in s if i<j)))", "score": 1.0, "codebleu": 0.8656298019485317, "crystalbleu": 0.0, "codebertscore": 0.97, "codescore": 0.9777752757072449, "surfaceSim": 0.9739130434782608, "abs_surfaceSim_minus_score": 0.026086956521739202}
{"golden_code": "I=lambda:list(map(int,input().split()))\n\nn,m=I()\n\na=I()\n\na.sort(reverse=True)\n\nqq=[I() for i in range(m)]\n\nqq.sort(key=lambda x:x[1],reverse=True)\n\nans=0\n\nfor x,y in qq:\n\n    for j in range(x):\n\n        if not a:\n\n            break\n\n        aa=a.pop()\n\n        ans+=max(aa,y)\n\nans+=sum(a)\n\nprint(ans)\n\n        ", "generated_code": "I=lambda : list(map(int,input().split()))\n\nn,m = I()\n\nl=I();s=sum(l);l.sort();d=[]\n\nfor _ in range(m):\n\n    b,c=I()\n\n    d.append([c,b])\n\np=s=0    \n\nfor i in sorted(d,reverse=True):\n\n    while i[1]:\n\n        if p>=n or l[p]>=i[0]:\n\n            break\n\n        i[1]-=1\n\n        s+=i[0]\n\n        p+=1\n\n    if p>=n:\n\n        break\n\ns+=sum(l[p:])\n\nprint(s)", "score": 1.0, "codebleu": 0.31348662221845847, "crystalbleu": 0.260234315185881, "codebertscore": 0.82, "codescore": 0.9499731659889221, "surfaceSim": 0.6064491064491064, "abs_surfaceSim_minus_score": 0.39355089355089357}
{"golden_code": "n = int(eval(input()))\n\n\n\nfelicidade = []\n\n\n\nfor x in range(n):\n\n    felicidade.append(list(map(int,input().split())))\n\n\n\nDP = [0,0,0]\n\n\n\nif n == 1:\n\n    print((max(felicidade[0])))\n\n\n\nelse:\n\n\n\n    for x in range(3):\n\n        DP[x] = felicidade[0][x]\n\n\n\n\n\n    for dia in range(1,n):\n\n        m = [0] * 3\n\n        for x  in range(3):#As duas possíveis escolhas são x e y\n\n            for y  in range(3):\n\n                if x != y: #Se elas forem diferentes\n\n                    m[x] = max(m[x], DP[y] + felicidade[dia][x])\n\n        DP = m\n\n    \n\n    print((max(DP)))\n", "generated_code": "nDays = int(eval(input()))\n\n\n\ntoday = [int(x) for x in input().split()]\n\n\n\nfor i in range(nDays - 1):\n\n    tomorrow = [int(x) for x in input().split()]\n\n    tomorrow[0] += max(today[1], today[2])\n\n    tomorrow[1] += max(today[0], today[2])\n\n    tomorrow[2] += max(today[0], today[1])\n\n    today = tomorrow\n\n\n\nprint((max(today)))", "score": 1.0, "codebleu": 0.16521526840636913, "crystalbleu": 0.11115898610601531, "codebertscore": 0.72, "codescore": 0.5694265365600586, "surfaceSim": 0.5835537918871252, "abs_surfaceSim_minus_score": 0.4164462081128748}
{"golden_code": "import sys\n\ninput = sys.stdin.readline\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\nK, S = list(map(int, input().split()))\n\n\n\nans = 0\n\nfor z in range(K+1):\n\n    for y in range(K+1):\n\n        x = S - (z + y)\n\n        if x >= 0 and x <= K:\n\n            ans += 1\n\nprint(ans)", "generated_code": "import sys\n\ninput = sys.stdin.readline\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\nK, S = list(map(int, input().split()))\n\n\n\nans = 0\n\nfor z in range(K+1):\n\n    for y in range(K+1):\n\n        x = S - (z + y)\n\n        if 0 <= x <= K:\n\n            ans += 1\n\nprint(ans)", "score": 1.0, "codebleu": 0.8825436459331386, "crystalbleu": 0.9276598729621841, "codebertscore": 0.99, "codescore": 0.6744345426559448, "surfaceSim": 0.9260057471264368, "abs_surfaceSim_minus_score": 0.0739942528735632}
{"golden_code": "import sys\n\nK = int(eval(input()))\n\n\n\npower = 7\n\nSUM = 0\n\n\n\nfor i in range(1, 10 ** 6):\n\n    SUM += power\n\n    if SUM % K == 0:\n\n        print(i)\n\n        sys.exit()\n\n    power *= 10\n\n    power %= K\n\n\n\nprint((-1))", "generated_code": "import sys\n\nK = int(eval(input()))\n\n\n\nL = 9 * K\n\n\n\nif K % 7 == 0:\n\n    L //= 7\n\n\n\npower = 1\n\n\n\nfor i in range(1, 10 ** 6):\n\n    power *= 10\n\n    power %= L\n\n    if power == 1:\n\n        print(i)\n\n        sys.exit()\n\n\n\nprint((-1))", "score": 1.0, "codebleu": 0.588523077329871, "crystalbleu": 0.0, "codebertscore": 0.92, "codescore": 0.8255268335342407, "surfaceSim": 0.8223684210526316, "abs_surfaceSim_minus_score": 0.17763157894736836}
{"golden_code": "def segfunc(x, y): return max(x, y)\n\n\n\nclass SegmentTree:\n\n    def __init__(self, arr):\n\n        size = len(arr)\n\n        n = 2 ** (size - 1).bit_length()\n\n        self.n = n\n\n        self.node = [0] * (2*n)\n\n        for i in range(size):\n\n            self.node[i+n-1] = arr[i]\n\n        for i in reversed(list(range(n-2))):\n\n            self.node[i] = segfunc(self.node[2*i+1], self.node[2*i+2])\n\n\n\n    def update(self, i, x):\n\n        i += self.n - 1\n\n        self.node[i] = x\n\n        while i > 0:\n\n            i = (i - 1) // 2\n\n            self.node[i] = segfunc(self.node[i * 2 + 1], self.node[i * 2 + 2])\n\n\n\n    def update(self, x, val):\n\n        x += (self.n - 1)\n\n        self.node[x] = val\n\n        while x > 0:\n\n            x = (x - 1) // 2\n\n            self.node[x] = segfunc(self.node[2 * x + 1], self.node[2 * x + 2])\n\n\n\n    def query(self, a, b):\n\n        res = 0\n\n        l = self.n - 1 + a\n\n        r = self.n - 1 + (b - 1)\n\n\n\n        while l <= r:\n\n            if l == r:\n\n                res = segfunc(res, self.node[l])\n\n                break\n\n\n\n            if l % 2 == 0:\n\n                res = segfunc(res, self.node[l])\n\n            if r % 2 == 1:\n\n                res = segfunc(res, self.node[r])\n\n            l = l // 2\n\n            r = r // 2 - 1\n\n\n\n        return res\n\n\n\nN, K = list(map(int, input().split()))\n\nINF = 0\n\nseg = SegmentTree([0] * 300000)\n\nfor i in range(N):\n\n    a = int(eval(input()))\n\n    tmp = seg.query(max(a - K, 0), min(a + K, 300000) + 1) + 1\n\n    seg.update(a, tmp)\n\nprint((seg.query(0, 300000)))\n", "generated_code": "def segfunc(x, y): return max(x, y)\n\ndef update(i, x):\n\n    i += MAX_N-1\n\n    node[i] = x\n\n    while i:\n\n        i = (i-1)//2\n\n        node[i] = segfunc(node[i*2+1], node[i*2+2])\n\n\n\ndef query(l, r):\n\n    L = l + MAX_N\n\n    R = r + MAX_N\n\n    s = INF\n\n    while L < R:\n\n        if R & 1:\n\n            R -= 1\n\n            s = segfunc(s, node[R - 1])\n\n        if L & 1:\n\n            s = segfunc(s, node[L - 1])\n\n            L += 1\n\n        L >>= 1\n\n        R >>= 1\n\n    return s\n\n\n\nN, K = list(map(int, input().split()))\n\nMAX_N = 2**(300005).bit_length()\n\na = [int(eval(input())) for _ in range(N)]\n\nnode = [0] * (2 * MAX_N)\n\nINF = 0\n\nans = 0\n\n\n\n#for i in range(N):\n\n#    update(i, a[i])\n\n\n\nfor i in a:\n\n    tmp = query(max(i - K, 0), min(300005, i + K) + 1)\n\n    update(i, tmp + 1)\n\n    ans = max(ans, tmp + 1)\n\nprint(ans)\n", "score": 1.0, "codebleu": 0.17711568385767157, "crystalbleu": 0.19624366605359164, "codebertscore": 0.83, "codescore": 0.1289704442024231, "surfaceSim": 0.6416816128603693, "abs_surfaceSim_minus_score": 0.3583183871396307}
{"golden_code": "import sys\n\nread = sys.stdin.read\n\nreadlines = sys.stdin.readlines\n\nimport numpy as np\n\ndef main():\n\n    x = int(eval(input()))\n\n    for i1 in range(-201, 201):\n\n        for i2 in range(-201, 201):\n\n            if i1**5 - i2**5 == x:\n\n                print((i1, i2))\n\n                sys.exit()\n\n\n\nif __name__ == '__main__':\n\n    main()", "generated_code": "import sys\n\nread = sys.stdin.read\n\nreadlines = sys.stdin.readlines\n\nimport numpy as np\n\nfrom itertools import product\n\ndef main():\n\n    x = int(input())\n\n    n5 = [i**5 for i in range(201)]\n\n\n\n    c = product(n5, repeat=2)\n\n    for ce in c:\n\n        if ce[0] + ce[1] == x:\n\n            r = (int(ce[0]**0.2), int(ce[1]**0.2)* -1)\n\n            break\n\n        elif ce[0] - ce[1] == x:\n\n            r = (int(ce[0] ** 0.2), int(ce[1] ** 0.2))\n\n            break\n\n    print(*r, sep=' ')\n\n\n\nif __name__ == '__main__':\n\n    main()\n", "score": 1.0, "codebleu": 0.4489779514140032, "crystalbleu": 0.26278846895307817, "codebertscore": 0.84, "codescore": 0.04563517868518829, "surfaceSim": 0.673532649632076, "abs_surfaceSim_minus_score": 0.32646735036792396}
{"golden_code": "# ABC102C - Linear Approximation (ARC100C)\n\nfrom statistics import median\n\n\n\n\n\ndef main():\n\n    n = int(eval(input()))\n\n    A = tuple(map(int, input().rstrip().split()))\n\n    A = tuple(j - i for i, j in enumerate(A, start=1))\n\n    b = median(A)\n\n    ans = sum(abs(a - b) for a in A)\n\n    print((int(ans)))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()", "generated_code": "# ABC102C - Linear Approximation (ARC100C)\n\ndef main():\n\n    n = int(eval(input()))\n\n    A = tuple(map(int, input().rstrip().split()))\n\n    A = sorted(j - i for i, j in enumerate(A, start=1))\n\n    b = A[n // 2]\n\n    ans = sum(abs(a - b) for a in A)\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()", "score": 1.0, "codebleu": 0.674285129333551, "crystalbleu": 0.7405360191846485, "codebertscore": 0.96, "codescore": 0.03531382605433464, "surfaceSim": 0.8312320916905445, "abs_surfaceSim_minus_score": 0.16876790830945554}
{"golden_code": "from scipy.sparse.csgraph import floyd_warshall\n\n\n\nn,m=list(map(int,input().split()))\n\nl=[list(map(int,input().split())) for i in range(m)]\n\n\n\nans=0\n\nfor i in range(m):\n\n    ll=l[:i]+l[i+1:]\n\n\n\n    d=[[float('inf')]*n for i in range(n)]\n\n    for i in range(n):\n\n        d[i][i]=0\n\n\n\n    for j in ll:\n\n        d[j[0]-1][j[1]-1]=1\n\n        d[j[1]-1][j[0]-1]=1\n\n\n\n    d=floyd_warshall(d)\n\n\n\n    if float('inf') in d:\n\n        ans+=1\n\n\n\nprint(ans)", "generated_code": "class UnionFind():\n\n    def __init__(self, n):\n\n        self.n = n\n\n        self.parents = [-1] * n\n\n\n\n    def find(self, x):\n\n        if self.parents[x] < 0:\n\n            return x\n\n        else:\n\n            self.parents[x] = self.find(self.parents[x])\n\n            return self.parents[x]\n\n\n\n    def union(self, x, y):\n\n        x = self.find(x)\n\n        y = self.find(y)\n\n\n\n        if x == y:\n\n            return\n\n\n\n        if self.parents[x] > self.parents[y]:\n\n            x, y = y, x\n\n\n\n        self.parents[x] += self.parents[y]\n\n        self.parents[y] = x\n\n\n\n    def roots(self):\n\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n\n\n    def group_count(self):\n\n        return len(self.roots())\n\n\n\nfrom copy import deepcopy\n\n\n\nn,m=list(map(int,input().split()))\n\nl=[list(map(int,input().split())) for i in range(m)]\n\n\n\ncnt=0\n\nfor i in range(m):\n\n  uf=UnionFind(n)\n\n  ll=deepcopy(l)\n\n  del ll[i]\n\n  for a,b in ll:\n\n    a-=1\n\n    b-=1\n\n    uf.union(a,b)\n\n  if uf.group_count()>=2:\n\n    cnt+=1\n\nprint(cnt)", "score": 1.0, "codebleu": 0.3031584482410501, "crystalbleu": 0.22425522549011245, "codebertscore": 0.75, "codescore": 0.47047051787376404, "surfaceSim": 0.5431940371456501, "abs_surfaceSim_minus_score": 0.45680596285434993}
{"golden_code": "a, b, c, x, y = list(map(int, input().split()))\n\nans = float('inf')\n\n\n\nfor i in range(200005):\n\n    tmp = i * 2 * c\n\n    tmp += max(0, x-i) * a\n\n    tmp += max(0, y-i) * b\n\n    ans = min(ans, tmp)\n\n\n\nprint(ans)", "generated_code": "a, b, c, x, y = list(map(int, input().split()))\n\nans = float('inf')\n\n\n\nfor i in range(100005):\n\n    tmp = i * 2 * c\n\n    tmp += max(0, x-i) * a\n\n    tmp += max(0, y-i) * b\n\n    ans = min(ans, tmp)\n\n\n\nprint(ans)", "score": 1.0, "codebleu": 0.9661796765376377, "crystalbleu": 0.943530344863199, "codebertscore": 0.99, "codescore": 0.9937665462493896, "surfaceSim": 0.9976190476190476, "abs_surfaceSim_minus_score": 0.0023809523809523725}
{"golden_code": "k = int(eval(input()))\n\nnum = 0\n\nif not k%2:\n\n    print((-1))\n\nelse:\n\n    for i in range(k):\n\n        num = (num*10+7)%k\n\n        if num == 0:\n\n            print((i+1))\n\n            break\n\n    else:\n\n        print((-1))", "generated_code": "K = int(eval(input()))\n\n\n\nans = 1\n\nnum = 0\n\nseven = 7\n\n\n\nif not K%2:\n\n    print((-1))\n\nelse:\n\n    for i in range(K):\n\n        num = num + seven\n\n        seven = seven*10%K\n\n        num = num%K\n\n        if num == 0:\n\n            print(ans)\n\n            break\n\n        ans += 1\n\n    else:\n\n        print((-1))", "score": 1.0, "codebleu": 0.4997826468355481, "crystalbleu": 0.4703930900575511, "codebertscore": 0.91, "codescore": 0.8337409496307373, "surfaceSim": 0.8800992709787498, "abs_surfaceSim_minus_score": 0.11990072902125015}
{"golden_code": "a,b = list(map(int,input().split()))\n\nc = 0\n\n\n\nfor i in range(a,b+1):\n\n  new = list(reversed(list(str(i))))\n\n  if new == list(str(i)):\n\n    c += 1\n\n    \n\n    \n\nprint(c)", "generated_code": "a,b = list(map(int,input().split()))\n\nc = 0\n\n\n\nfor i in range(a,b+1):\n\n  if list(str(i)) == list(str(i))[::-1]:\n\n    c += 1\n\n    \n\n    \n\nprint(c)", "score": 1.0, "codebleu": 0.6781986911062916, "crystalbleu": 0.0, "codebertscore": 0.95, "codescore": 0.8224374651908875, "surfaceSim": 0.8125, "abs_surfaceSim_minus_score": 0.1875}
{"golden_code": "A,B = list(map(int,input().split()))\n\n\n\n\n\ndef kaibun(n):\n\n\tkey = 0\n\n\tfor i in range(1,n+1):\n\n\t\tif str(i) == str(i)[::-1]:\n\n\t\t\tkey += 1\n\n\treturn key\n\n\n\nprint((kaibun(B)-kaibun(A-1)))", "generated_code": "A,B = list(map(int,input().split()))\n\n\n\n\n\ndef kaibun(m, n):\n\n\tkey = 0\n\n\tfor i in range(m,n+1):\n\n\t\tif str(i) == str(i)[::-1]:\n\n\t\t\tkey += 1\n\n\treturn key\n\n\n\nprint((kaibun(A,B)))", "score": 1.0, "codebleu": 0.6762767030820076, "crystalbleu": 0.0, "codebertscore": 0.97, "codescore": 0.44449856877326965, "surfaceSim": 0.939332766680833, "abs_surfaceSim_minus_score": 0.06066723331916701}
{"golden_code": "import sys\n\n\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nN = int(read())\n\nx = N + (-N) % 1000\n\nprint((x - N))", "generated_code": "import math\n\nN = int(eval(input()))\n\nx = math.ceil(N/1000) * 1000\n\nprint((x-N))", "score": 1.0, "codebleu": 0.19194245636732254, "crystalbleu": 0.0, "codebertscore": 0.79, "codescore": 0.3773494362831116, "surfaceSim": 0.5324461722488039, "abs_surfaceSim_minus_score": 0.46755382775119614}
{"golden_code": "x = int(eval(input()))\n\n\n\nfor a in range(10**4):\n\n    for b in range(10**4):\n\n        if(a**5 + b**5 == x):\n\n            print((a, -b))\n\n            break\n\n        elif(a**5 - b**5 == x):\n\n            print((a, b))\n\n            break\n\n    else:\n\n        continue\n\n    break", "generated_code": "x = int(eval(input()))\n\n\n\nfor a in range(10**3):\n\n    for b in range(10**3):\n\n        if(a**5 + b**5 == x):\n\n            print((a, -b))\n\n            break\n\n        elif(a**5 - b**5 == x):\n\n            print((a, b))\n\n            break\n\n    else:\n\n        continue\n\n    break\n", "score": 1.0, "codebleu": 0.8060356584781954, "crystalbleu": 0.8716710129026546, "codebertscore": 0.99, "codescore": 0.14229577779769897, "surfaceSim": 0.9963503649635037, "abs_surfaceSim_minus_score": 0.0036496350364962904}
{"golden_code": "# coding: utf-8\n\n\n\n\n\ndef solve(*args: str) -> str:\n\n    n, m, k = list(map(int, args[0].split()))\n\n    mod = 998244353\n\n\n\n    if m == 1 and n-1 == k:\n\n        return str(1)\n\n\n\n    ncr = 1\n\n    p = m*pow(m-1, n-1, mod) % mod\n\n    ret = p\n\n    inv = pow(m-1, mod-2, mod)\n\n    for i in range(1, k+1):\n\n        ncr = (ncr * (n-i)*pow(i, mod-2, mod)) % mod\n\n        p = (p*inv) % mod\n\n        ret += p*ncr % mod\n\n\n\n    return str(ret % mod)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    print((solve(*(open(0).read().splitlines()))))\n", "generated_code": "# coding: utf-8\n\n\n\n\n\ndef solve(*args: str) -> str:\n\n    n, m, k = list(map(int, args[0].split()))\n\n    mod = 998244353\n\n\n\n    if m == 1 and n-1 == k:\n\n        return str(1)\n\n\n\n    ncr = 1\n\n    p = m*pow(m-1, n-1, mod) % mod\n\n\n\n    ret = p\n\n    iR = [1]*(k+1)\n\n    im = pow(m-1, mod-2, mod)\n\n\n\n    for i in range(1, k+1):\n\n        iR[i] = max(1, (-(mod//i) * iR[mod % i]) % mod)\n\n        ncr = (ncr * (n-i)*iR[i]) % mod\n\n        p = (p*im) % mod\n\n        ret += p*ncr % mod\n\n\n\n    return str(ret % mod)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    print((solve(*(open(0).read().splitlines()))))\n", "score": 1.0, "codebleu": 0.8358017770372309, "crystalbleu": 0.7468825355660534, "codebertscore": 0.96, "codescore": 0.13801942765712738, "surfaceSim": 0.8856396731823353, "abs_surfaceSim_minus_score": 0.11436032681766473}
{"golden_code": "import sys\n\nimport queue\n\n\n\nN = 3\n\nf= ''.join(sys.stdin.readline().split())\n\nf+= ''.join(sys.stdin.readline().split())\n\nf+= ''.join(sys.stdin.readline().split())\n\n\n\ndd = [[-1, 0], [0, -1], [1, 0], [0, 1]]\n\n\n\nQ = queue.Queue()\n\nV = dict()\n\n\n\nQ.put([f,f.index('0'),0])\n\nV[f] = True\n\n\n\nwhile not Q.empty():\n\n    u = Q.get()\n\n    if u[0] == '123456780':  break\n\n    sx, sy = u[1]//N, u[1]%N\n\n    for dx, dy in dd:\n\n        tx, ty = sx+dx, sy+dy\n\n        if tx<0 or ty<0 or tx>=N or ty>=N: continue\n\n        v = u[:]\n\n        n1, n2 = u[1], tx*N+ty\n\n        v[1] = n2\n\n        if n1>n2: n1, n2 = n2, n1\n\n        v[0] = v[0][0:n1]+v[0][n2]+v[0][n1+1:n2]+v[0][n1]+v[0][n2+1:]\n\n        if not V.get(v[0], False):\n\n            V[v[0]] = True\n\n            v[2] += 1                                                    \n\n            Q.put(v)\n\n\n\nprint((u[2]))\n", "generated_code": "import sys\n\nimport queue\n\n\n\nN = 3\n\n\n\nf = ''.join(sys.stdin.readline().split())\n\nf += ''.join(sys.stdin.readline().split())\n\nf += ''.join(sys.stdin.readline().split())\n\n\n\ndd = [[-1, 0], [0, -1], [1, 0], [0, 1]]\n\n\n\nQ = [[f,f.index('0'),0]]\n\nV = { f: True }\n\n\n\nwhile len(Q)>0:\n\n    u = Q.pop(0)\n\n    if u[0] == '123456780':  break\n\n    sx, sy = u[1]//N, u[1]%N\n\n    for dx, dy in dd:\n\n        tx, ty = sx+dx, sy+dy\n\n        if tx<0 or ty<0 or tx>=N or ty>=N: continue\n\n        v = u[:]\n\n        n1, n2 = u[1], tx*N+ty\n\n        v[1] = n2\n\n        if n1>n2: n1, n2 = n2, n1\n\n        v[0] = v[0][0:n1]+v[0][n2]+v[0][n1+1:n2]+v[0][n1]+v[0][n2+1:]\n\n        if not V.get(v[0], False):\n\n            V[v[0]] = True\n\n            v[2] += 1 # dir[r]                                                       \n\n            Q.append(v)\n\n\n\nprint((u[2]))\n", "score": 1.0, "codebleu": 0.724246491312794, "crystalbleu": 0.8760117171192524, "codebertscore": 0.98, "codescore": 0.9911215305328369, "surfaceSim": 0.9543745727956254, "abs_surfaceSim_minus_score": 0.04562542720437457}
{"golden_code": "import math\n\nprint((math.factorial(int(eval(input())))%1000000007))", "generated_code": "num = int(eval(input()))\n\nresult = 1\n\nfor i in range(1,num+1):\n\n    result = result *i % 1000000007\n\nprint(result)", "score": 1.0, "codebleu": 0.21323529411764708, "crystalbleu": 0.0, "codebertscore": 0.76, "codescore": 0.9642506837844849, "surfaceSim": 0.4517543859649123, "abs_surfaceSim_minus_score": 0.5482456140350878}
{"golden_code": "import numpy as np\n\n\n\nn, m = list(map(int, input().split()))\n\n\n\nd = np.ones((n, n)) * 1001\n\n\n\nes = []\n\nfor i in range(m):\n\n    es.append(list(map(int, input().split())))\n\n\n\nfor (i, j, w) in es:\n\n    d[i - 1][j - 1] = w\n\n    d[j - 1][i - 1] = w\n\n\n\n\n\nfor k in range(n):\n\n    for i in range(n):\n\n        for j in range(n):\n\n            l = d[i][k] + d[k][j]\n\n            if d[i][j] > l:\n\n                d[i][j] = l\n\n\n\nc = 0\n\nfor (i, j, w) in es:\n\n    if d[i - 1][j - 1] < w:\n\n        c += 1\n\n\n\nprint(c)\n", "generated_code": "n, m = list(map(int, input().split()))\n\n\n\nd = [[1001] * n for i in range(n)]\n\n\n\nes = []\n\nfor i in range(m):\n\n    es.append(list(map(int, input().split())))\n\n\n\nfor (i, j, w) in es:\n\n    d[i - 1][j - 1] = w\n\n    d[j - 1][i - 1] = w\n\n\n\n\n\nfor k in range(n):\n\n    for i in range(n):\n\n        for j in range(n):\n\n            l = d[i][k] + d[k][j]\n\n            if d[i][j] > l:\n\n                d[i][j] = l\n\n\n\nc = 0\n\nfor (i, j, w) in es:\n\n    if d[i - 1][j - 1] < w:\n\n        c += 1\n\n\n\nprint(c)", "score": 1.0, "codebleu": 0.7808841335674532, "crystalbleu": 0.9272349469846322, "codebertscore": 0.97, "codescore": 0.9896942377090454, "surfaceSim": 0.8880017742293191, "abs_surfaceSim_minus_score": 0.11199822577068086}
{"golden_code": "#!/usr/bin/env python3\n\nimport sys, math, fractions, itertools\n\n\n\n\n\ndef solve(A: int, B: int, C: int, X: int, Y: int):\n\n    mn = 1e9\n\n    for i in range(0, 2*(max(X, Y)+1), 2):\n\n        mn = min(mn, C*i+A*max(X-i//2, 0)+B*max(Y-i//2, 0))\n\n    print((int(mn)))\n\n    return\n\n\n\n\n\n# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\n\ndef main():\n\n    def iterate_tokens():\n\n        for line in sys.stdin:\n\n            for word in line.split():\n\n                yield word\n\n    tokens = iterate_tokens()\n\n    A = int(next(tokens))  # type: int\n\n    B = int(next(tokens))  # type: int\n\n    C = int(next(tokens))  # type: int\n\n    X = int(next(tokens))  # type: int\n\n    Y = int(next(tokens))  # type: int\n\n    solve(A, B, C, X, Y)\n\n\n\nif __name__ == '__main__':\n\n    main()\n", "generated_code": "#!/usr/bin/env python3\n\nimport sys\n\n\n\n\n\ndef solve(A: int, B: int, C: int, X: int, Y: int):\n\n    c = 0\n\n    if (A + B < 2 * C):\n\n        c += min(X, Y) * (A + B)\n\n    else:\n\n        c += min(X, Y) * 2 * C\n\n    if X > Y:\n\n        c += (X - Y) * min(A, 2 * C)\n\n    else:\n\n        c += (Y - X) * min(B, 2 * C)\n\n    print(c)\n\n    return\n\n\n\n\n\n# Generated by 1.1.5 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\n\ndef main():\n\n    def iterate_tokens():\n\n        for line in sys.stdin:\n\n            for word in line.split():\n\n                yield word\n\n    tokens = iterate_tokens()\n\n    A = int(next(tokens))  # type: int\n\n    B = int(next(tokens))  # type: int\n\n    C = int(next(tokens))  # type: int\n\n    X = int(next(tokens))  # type: int\n\n    Y = int(next(tokens))  # type: int\n\n    solve(A, B, C, X, Y)\n\n\n\nif __name__ == '__main__':\n\n    main()\n", "score": 1.0, "codebleu": 0.6605321988937074, "crystalbleu": 0.5945632568306116, "codebertscore": 0.91, "codescore": 0.01852165348827839, "surfaceSim": 0.8669348717170183, "abs_surfaceSim_minus_score": 0.13306512828298167}
{"golden_code": "N = int(eval(input()))\n\n\n\nseq = list(map(int, input().split()))\n\n\n\ncnt = 0\n\n\n\nfor num in seq:\n\n    while num % 2 == 0:\n\n        cnt += 1\n\n        num /= 2\n\n\n\nprint(cnt)\n", "generated_code": "n = int(eval(input()))\n\na = list(map(int, input().split()))\n\nans = 0\n\nfor num in a:\n\n    ans += format(num, 'b')[::-1].find('1')\n\nprint(ans)", "score": 1.0, "codebleu": 0.4818615528657325, "crystalbleu": 0.0, "codebertscore": 0.85, "codescore": 0.16305692493915558, "surfaceSim": 0.6484669176976869, "abs_surfaceSim_minus_score": 0.35153308230231306}
{"golden_code": "from numpy import *\n\neval(input())\n\nprint((\" \".join(map(str,argsort(list(map(int,input().split())))+1))))", "generated_code": "N = int(eval(input()))\n\nA = list(map(int,input().split()))\n\nB = N*[0]\n\n\n\nfor n in range(N):\n\n  B[A[n]-1]=n+1\n\n\n\nprint((*B))", "score": 1.0, "codebleu": 0.2923387096774194, "crystalbleu": 0.0, "codebertscore": 0.77, "codescore": 0.5790664553642273, "surfaceSim": 0.3794715447154472, "abs_surfaceSim_minus_score": 0.6205284552845528}
{"golden_code": "def abc133_c():\n\n    L, R = list(map(int, input().split()))\n\n    # 区間の幅が673あれば、673の倍数と3の倍数が含まれて、2019の倍数が作れる\n\n    if R - L > 673: return 0\n\n    # それ以外は試す\n\n    ans = 2019\n\n    for i in range(L, R+1):\n\n        for j in range(L, i):\n\n            m = i * j % 2019\n\n            ans = min(m, ans)\n\n    return ans\n\n\n\nprint((abc133_c()))", "generated_code": "def abc133_c():\n\n    L, R = list(map(int, input().split()))\n\n    # 区間の幅が673あれば、673の倍数と3の倍数が含まれて、2019の倍数が作れる\n\n    if R - L > 673: return 0\n\n    # それ以外は試す\n\n    ans = 2019\n\n    for i in range(L, R+1):\n\n        for j in range(L, i):\n\n            m = i * j % 2019\n\n            ans = min(m, ans)\n\n            if ans == 1: return 1\n\n    return ans\n\n\n\nprint((abc133_c()))", "score": 1.0, "codebleu": 0.916723201010169, "crystalbleu": 0.8820063654133549, "codebertscore": 0.99, "codescore": 0.9936285614967346, "surfaceSim": 0.9548448916037848, "abs_surfaceSim_minus_score": 0.04515510839621517}
{"golden_code": "import sys\n\nstdin = sys.stdin\n\n\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\ndef li(): return list(map(int, stdin.readline().split()))\n\ndef li_(): return [int(x) - 1 for x in stdin.readline().split()]\n\ndef lf(): return list(map(float, stdin.readline().split()))\n\ndef ls(): return stdin.readline().split()\n\ndef ns(): return stdin.readline().rstrip()\n\ndef lc(): return list(ns())\n\ndef ni(): return int(stdin.readline())\n\ndef nf(): return float(stdin.readline())\n\n\n\nn = ni()\n\nab = [list(li()) for _ in range(n)]\n\n\n\nab.sort(key=lambda x: x[1])\n\n\n\ncur = 0\n\n\n\nans = True\n\n\n\nfor ai, bi in ab:\n\n    cur += ai\n\n    if cur > bi:\n\n        ans = False\n\n\n\nprint((\"Yes\" if ans else \"No\"))", "generated_code": "import sys\n\nstdin = sys.stdin\n\n\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\ndef li(): return list(map(int, stdin.readline().split()))\n\ndef li_(): return [int(x) - 1 for x in stdin.readline().split()]\n\ndef lf(): return list(map(float, stdin.readline().split()))\n\ndef ls(): return stdin.readline().split()\n\ndef ns(): return stdin.readline().rstrip()\n\ndef lc(): return list(ns())\n\ndef ni(): return int(stdin.readline())\n\ndef nf(): return float(stdin.readline())\n\n\n\nn = ni()\n\nab = [tuple(li()) for _ in range(n)]\n\n\n\nab.sort(key=lambda x: x[1])\n\ncur = 0\n\nok = True\n\n\n\nfor ai, bi in ab:\n\n    cur += ai\n\n    if cur > bi:\n\n        ok = False\n\n        break\n\n\n\nprint((\"Yes\" if ok else \"No\"))\n", "score": 1.0, "codebleu": 0.8596836727612455, "crystalbleu": 0.9136014299243117, "codebertscore": 0.99, "codescore": 0.8503504991531372, "surfaceSim": 0.9700116895962594, "abs_surfaceSim_minus_score": 0.029988310403740615}
{"golden_code": "N = int(eval(input()))\n\ntxy = [(0, 0, 0)] + [tuple(map(int, input().split())) for _ in range(N)]\n\nfor i in range(N):\n\n    t1, x1, y1 = txy[i]\n\n    t2, x2, y2 = txy[i+1]\n\n    if abs(x2-x1) + abs(y2-y1) <= t2 - t1 and (x1+y1+x2+y2) % 2 == (t2-t1) % 2:\n\n        continue\n\n    else:\n\n        print('No')\n\n        exit()\n\nprint('Yes')", "generated_code": "N = int(eval(input()))\n\nt0 = x0 = y0 = 0\n\nfor _ in range(N):\n\n    t1, x1, y1 = list(map(int, input().split()))\n\n    d = abs(x1 - x0) + abs(y1 - y0)\n\n    if d > t1 - t0 or d % 2 != (t1 - t0) % 2:\n\n        print('No')\n\n        exit()\n\n    t0, x0, y0 = t1, x1, y1\n\nprint('Yes')\n", "score": 1.0, "codebleu": 0.36070868567461106, "crystalbleu": 0.36212555067832103, "codebertscore": 0.87, "codescore": 0.8669047951698303, "surfaceSim": 0.5781155015197568, "abs_surfaceSim_minus_score": 0.42188449848024323}
{"golden_code": "import fractions\n\nwhile True:\n\n\ttry:\n\n\t\tx,y = list(map(int,input().split()))\n\n\t\tprint('%d %d' % (fractions.gcd(x,y),x/fractions.gcd(x,y)*y))\n\n\texcept EOFError:\n\n\t\tbreak", "generated_code": "import sys\n\nreadline = sys.stdin.readline\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\n#mod = 998244353\n\nINF = 10**18\n\neps = 10**-7\n\n\n\nm,n,k = list(map(int,readline().split()))\n\n\n\ndef comb(n, r, mod):\n\n    r = min(r, n-r)\n\n    mol = 1\n\n    deno = 1\n\n    for i in range(1, r+1):\n\n        mol = mol * (n-r+i) % mod\n\n        deno = deno * i % mod\n\n    ret = mol * pow(deno, mod-2, mod) % mod\n\n    return ret\n\n\n\ndef f1(x,y,a,b):\n\n    return (a+b-x-y)*(a-x+1)*(b-y+1)//2\n\n\n\ndef f2(x,a):\n\n    return (a-x)*(a-x+1)//2\n\n\n\nans = 0\n\n\n\nfor x in range(1,n+1):\n\n    for y in range(1,m+1):\n\n        a = n-x+1\n\n        b = m-y+1\n\n        c = m*(a*(a-1)+x*(x-1))\n\n        d = n*(b*(b-1)+y*(y-1))\n\n        ans += (c+d)//2\n\n        ans %= mod\n\n\n\nans = (ans * comb(m*n-2,k-2,mod))%mod\n\nans = ans*pow(2,mod-2,mod)%mod\n\n\n\nprint(ans)\n\n\n", "score": 0.0, "codebleu": 0.20898552715849916, "crystalbleu": 0.05001271354635499, "codebertscore": 0.64, "codescore": 0.7775680422782898, "surfaceSim": 0.43682898773006135, "abs_surfaceSim_minus_score": 0.43682898773006135}
{"golden_code": "import numpy as np\n\nn, k = list(map(int, input().split()))\n\np = np.array(list(map(int, input().split())))\n\np += 1\n\nsum_E = np.cumsum(p)\n\nsum_e = np.append([0], sum_E)\n\nans = -1\n\nfor i in range(n-k+1):\n\n    ans = max(ans, sum_e[i+k] - sum_e[i])\n\nprint((ans/2))", "generated_code": "class UnionFind():\n\n    def __init__(self, n):\n\n        self.n = n\n\n        self.parents = [-1] * n\n\n\n\n    def find(self, x):\n\n        if self.parents[x] < 0:\n\n            return x\n\n        else:\n\n            self.parents[x] = self.find(self.parents[x])\n\n            return self.parents[x]\n\n\n\n    def union(self, x, y):\n\n        x = self.find(x)\n\n        y = self.find(y)\n\n\n\n        if x == y:\n\n            return\n\n\n\n        if self.parents[x] > self.parents[y]:\n\n            x, y = y, x\n\n\n\n        self.parents[x] += self.parents[y]\n\n        self.parents[y] = x\n\n\n\n    def roots(self):\n\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n\n\n    def group_count(self):\n\n        return len(self.roots())\n\n\n\nfrom copy import deepcopy\n\n\n\nn,m=list(map(int,input().split()))\n\nl=[list(map(int,input().split())) for i in range(m)]\n\n\n\ncnt=0\n\nfor i in range(m):\n\n  uf=UnionFind(n)\n\n  ll=deepcopy(l)\n\n  del ll[i]\n\n  for a,b in ll:\n\n    a-=1\n\n    b-=1\n\n    uf.union(a,b)\n\n  if uf.group_count()>=2:\n\n    cnt+=1\n\nprint(cnt)", "score": 0.0, "codebleu": 0.2788317564777174, "crystalbleu": 0.10423438418683552, "codebertscore": 0.69, "codescore": 0.9939020872116089, "surfaceSim": 0.4746212121212121, "abs_surfaceSim_minus_score": 0.4746212121212121}
{"golden_code": "mod = 10**9+7\n\nn, m = list(map(int, input().split()))\n\nl = [0]*n\n\nfor _ in range(m):\n\n  l[int(eval(input()))-1] = 1\n\n\n\ns = 0\n\nt = 1\n\n\n\nfor i in range(n):\n\n  if l[i] > 0:\n\n    t, s = 0, t\n\n  else:\n\n    t, s = (s+t)%mod, t\n\n\n\nprint(t)", "generated_code": "from statistics import*\n\n(n,),*t=[list(map(int,t.split()))for t in open(0)]\n\na,b=list(map(median,list(zip(*t))))\n\nprint((int((b-a)*(2-n%2))+1))", "score": 0.0, "codebleu": 0.07408090488893324, "crystalbleu": 0.0, "codebertscore": 0.75, "codescore": 0.1267462968826294, "surfaceSim": 0.4812192118226601, "abs_surfaceSim_minus_score": 0.4812192118226601}
{"golden_code": "import sys\n\ninput = sys.stdin.readline\n\nimport bisect\n\n\n\nn = int(eval(input()))\n\nX = list(map(int, input().split()))\n\nl = int(eval(input()))\n\nU = 17\n\ndp = [[0]*n for _ in range(U+1)]\n\nfor i, x in enumerate(X):\n\n  t = bisect.bisect_left(X, x+l)\n\n  dp[0][i] = bisect.bisect_right(X, x+l) - 1\n\nfor k in range(U):\n\n  for i in range(n):\n\n    dp[k+1][i] = dp[k][dp[k][i]]\n\ndef test(x, a, b):\n\n  for i in range(U, -1, -1):\n\n    if x >> i & 1:\n\n      a = dp[i][a]\n\n  return a >= b\n\ndef solve(a, b):\n\n  if a > b:\n\n    a, b = b, a\n\n  ng = 0\n\n  ok = n-1\n\n  while ok - ng > 1:\n\n    mid = (ng + ok) // 2\n\n    if test(mid, a, b):\n\n      ok = mid\n\n    else:\n\n      ng = mid\n\n  print(ok)\n\nq = int(eval(input()))\n\nfor _ in range(q):\n\n  a, b = list(map(int, input().split()))\n\n  a -= 1\n\n  b -= 1\n\n  solve(a, b)", "generated_code": "N = int(eval(input()))\n\nS = [eval(input()) for i in range(N)]\n\nfrom collections import Counter\n\nctr = Counter([s[0] for s in S])\n\n\n\nans = 0\n\nimport itertools\n\nfor ptn in itertools.combinations('MARCH', 3):\n\n    t = 1\n\n    for c in ptn:\n\n        t *= ctr[c]\n\n    ans += t\n\nprint(ans)", "score": 0.0, "codebleu": 0.12124454838687311, "crystalbleu": 0.00924950011136089, "codebertscore": 0.71, "codescore": 0.23624840378761292, "surfaceSim": 0.45896464646464646, "abs_surfaceSim_minus_score": 0.45896464646464646}
{"golden_code": "n = int(eval(input()))\n\nimport math\n\nm = int(math.sqrt(n))+1\n\nanss = []\n\nfor x in range(1, m+1):\n\n  y = n//x\n\n  z = n%x\n\n  if z == 0:\n\n    anss.append(abs(x-1)+abs(y-1))\n\nprint((min(anss)))\n", "generated_code": "n=int(eval(input()))\n\na=list(map(int,input().split()))\n\na.sort(reverse=True)\n\n\n\nalice=0\n\nbob=0\n\n\n\nfor i in range(n):\n\n    if i%2==0:\n\n        alice+=a[i]\n\n    else:\n\n        bob+=a[i]\n\n        \n\nprint((alice-bob))", "score": 0.0, "codebleu": 0.20258838435118506, "crystalbleu": 0.0, "codebertscore": 0.76, "codescore": 0.07632224261760712, "surfaceSim": 0.5958685446009391, "abs_surfaceSim_minus_score": 0.5958685446009391}
{"golden_code": "import math\n\nmod = 10 ** 9 + 7\n\nn = int(eval(input()))\n\nprint((math.factorial(n) % mod))", "generated_code": "def gcd(x, y):\n\n    if y == 0:\n\n        return x\n\n    else:\n\n        return gcd(y, x%y)\n\n\n\n\n\ndef lcm(x,y):\n\n    return x/gcd(x, y)*y\n\n\n\n\n\nwhile True:\n\n    try:\n\n        x, y = list(map(int, input().split()))\n\n    except EOFError:\n\n        break\n\n\n\n    print(\"%d %d\" % (gcd(x, y), lcm(x, y)))", "score": 0.0, "codebleu": 0.1728099044457691, "crystalbleu": 0.0, "codebertscore": 0.69, "codescore": 0.9693651795387268, "surfaceSim": 0.4198957222419718, "abs_surfaceSim_minus_score": 0.4198957222419718}
{"golden_code": "import numpy as np\n\nN=int(eval(input()))\n\nprint((2**int(np.log2(N))))", "generated_code": "nDays = int(eval(input()))\n\n\n\ntoday = [int(x) for x in input().split()]\n\n\n\nfor i in range(nDays - 1):\n\n    tomorrow = [int(x) for x in input().split()]\n\n    tomorrow[0] += max(today[1], today[2])\n\n    tomorrow[1] += max(today[0], today[2])\n\n    tomorrow[2] += max(today[0], today[1])\n\n    today = tomorrow\n\n\n\nprint((max(today)))", "score": 0.0, "codebleu": 0.2585227272727273, "crystalbleu": 0.10076968755905238, "codebertscore": 0.67, "codescore": 0.15568076074123383, "surfaceSim": 0.3935830429732869, "abs_surfaceSim_minus_score": 0.3935830429732869}
{"golden_code": "import numpy as np\n\n(n, m) = list(map(int, input().split()))\n\na = np.array(list(map(int, input().split()))).astype(\"int64\") \n\na = np.cumsum(a)\n\na %= m\n\ncount = np.sum(a == 0)\n\na.sort()\n\ntc = 1\n\nfor i in range(1, n):\n\n    if a[i - 1] == a[i]:\n\n        tc += 1\n\n    else:\n\n        count += tc * (tc - 1) // 2\n\n        tc = 1\n\nelse:\n\n    count += tc * (tc - 1) // 2\n\nprint(count)", "generated_code": "import math\n\nN = int(eval(input()))\n\nx = math.ceil(N/1000) * 1000\n\nprint((x-N))", "score": 0.0, "codebleu": 0.09878873503325147, "crystalbleu": 0.0, "codebertscore": 0.69, "codescore": 0.07693848013877869, "surfaceSim": 0.4700286415711947, "abs_surfaceSim_minus_score": 0.4700286415711947}
{"golden_code": "k,s=list(map(int,input().split()))\n\nans=0\n\nfor i in range(k+1):\n\n    for j in range(k+1):\n\n        z=s-i-j\n\n        if 0<=z<=k:\n\n            ans+=1\n\nprint(ans)\n", "generated_code": "a, b, c, x, y = list(map(int, input().split()))\n\nans = float('inf')\n\n\n\nfor i in range(100005):\n\n    tmp = i * 2 * c\n\n    tmp += max(0, x-i) * a\n\n    tmp += max(0, y-i) * b\n\n    ans = min(ans, tmp)\n\n\n\nprint(ans)", "score": 0.0, "codebleu": 0.21291139050386199, "crystalbleu": 0.0, "codebertscore": 0.81, "codescore": 0.941797137260437, "surfaceSim": 0.7090225563909774, "abs_surfaceSim_minus_score": 0.7090225563909774}
{"golden_code": "# -*- coding: utf-8 -*-\n\n# モジュールのインポート\n\nimport math\n\nimport numpy as np\n\n\n\n# 標準入力を取得\n\nN = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n\n\n# 求解処理\n\nA = sorted(A, reverse=True)\n\nA = np.array(A)\n\nans = 2 * np.sum(A[:(N // 2)]) - A[0] + (N % 2) * A[math.floor(N / 2)]\n\n\n\n# 結果出力\n\nprint(ans)\n", "generated_code": "N = int(eval(input()))\n\nNum = [int(2**i) for i in range(7)]\n\nif N in Num:\n\n  print(N)\n\nelse:\n\n  Num.append(N)\n\n  Num = sorted(Num)\n\n  print((2 ** (Num.index(N) - 1)))", "score": 0.0, "codebleu": 0.14209534647811306, "crystalbleu": 0.0, "codebertscore": 0.67, "codescore": 0.16927416622638702, "surfaceSim": 0.4633204633204633, "abs_surfaceSim_minus_score": 0.4633204633204633}
{"golden_code": "n=int(eval(input()))\n\nx=list(map(int,input().split()))\n\n\n\nx.sort()\n\n\n\nfor p in range(x[0],x[len(x)-1]+1):\n\n    psum=0\n\n    for i in range(len(x)):\n\n        psum=psum+(x[0]-x[i])**2\n\n#    print(psum)\n\n    pmin=psum    \n\n    for j in range(x[0]+1,x[len(x)-1]):\n\n        psum=0\n\n        for i in range(len(x)):\n\n            psum=psum+(j-x[i])**2\n\n#        print(psum)\n\n        if pmin>psum:\n\n            pmin=psum\n\nprint(pmin)    ", "generated_code": "import sys\n\nfor i in sys.stdin:\n\n    try:\n\n        sidelen = [int(j) for j in i.split(\" \")]\n\n        sidelen.sort(reverse=True)\n\n        if(sidelen[0]**2 == sidelen[1]**2 + sidelen[2]**2):\n\n            print(\"YES\")\n\n        else:\n\n            print(\"NO\")\n\n    except:\n\n        continue", "score": 0.0, "codebleu": 0.10692120001217123, "crystalbleu": 0.016380656139096183, "codebertscore": 0.72, "codescore": 0.03459137678146362, "surfaceSim": 0.5483021077283372, "abs_surfaceSim_minus_score": 0.5483021077283372}
{"golden_code": "import sys\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\n\n\nMOD = 10**9+7\n\n\n\nfac = [1, 1]     # 元テーブル\n\nf_inv = [1, 1]   # 逆元テーブル\n\ninv = [0, 1]     # 逆元テーブル計算用テーブル\n\ndef prepare(n, mod):\n\n    for i in range(2, n+1):\n\n        fac.append((fac[-1] * i) % mod)\n\n\n\n\n\ndef cmb(n, r, mod):\n\n    if n < 0 or r < 0:\n\n        return 0\n\n    if r > n:\n\n        return 0\n\n\n\n    return fac[n] * pow(fac[r],MOD-2,MOD) * pow(fac[n-r],MOD-2,MOD) % mod\n\n\n\n\n\ndef prime_factorization(n):\n\n    d = []\n\n    i, e = 2, 0  # factor, exponent\n\n    while i * i <= n:\n\n        while n % i == 0:\n\n            n //= i\n\n            e += 1\n\n        if e > 0:\n\n            d.append((i, e))\n\n        i += 1\n\n        e = 0\n\n    if n > 1:\n\n        d.append((n, 1))\n\n    return d\n\n\n\n\n\ndef main():\n\n    N,M = list(map(int, readline().split()))\n\n\n\n    prepare(N+100, MOD)\n\n    d = prime_factorization(M)\n\n\n\n    ans = 1\n\n    for i, e in d:\n\n        ans *= cmb(N-1+e, e, MOD)\n\n        ans %= MOD\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n", "generated_code": "import sys\n\nstdin = sys.stdin\n\n\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\ndef li(): return list(map(int, stdin.readline().split()))\n\ndef li_(): return [int(x) - 1 for x in stdin.readline().split()]\n\ndef lf(): return list(map(float, stdin.readline().split()))\n\ndef ls(): return stdin.readline().split()\n\ndef ns(): return stdin.readline().rstrip()\n\ndef lc(): return list(ns())\n\ndef ni(): return int(stdin.readline())\n\ndef nf(): return float(stdin.readline())\n\n\n\nn = ni()\n\nab = [tuple(li()) for _ in range(n)]\n\n\n\nab.sort(key=lambda x: x[1])\n\ncur = 0\n\nok = True\n\n\n\nfor ai, bi in ab:\n\n    cur += ai\n\n    if cur > bi:\n\n        ok = False\n\n        break\n\n\n\nprint((\"Yes\" if ok else \"No\"))\n", "score": 0.0, "codebleu": 0.10444678927907285, "crystalbleu": 0.06997676703617696, "codebertscore": 0.73, "codescore": 0.19675996899604797, "surfaceSim": 0.5639810426540284, "abs_surfaceSim_minus_score": 0.5639810426540284}
{"golden_code": "n = int(eval(input()))\n\nmx = n//3\n\nans = 0\n\nmod = 10**9+7\n\nimport math\n\ndef combinations_count(n, r): #組み合わせ(nCr)\n\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\nfor i in range(1,mx+1):\n\n    if i == 1:\n\n        ans += 1\n\n    else:\n\n        ans += combinations_count(n-2*i-1,i-1) % mod\n\nprint((ans%mod))", "generated_code": "n,l = list(map(int,input().split()))\n\nans = l\n\neat = l\n\n\n\nfor i in range(n-1):\n\n    l += 1\n\n    ans += l\n\n    \n\n    if abs(l) < abs(eat):\n\n        eat = l\n\n        \n\nprint((ans-eat))", "score": 0.0, "codebleu": 0.12127393857489455, "crystalbleu": 0.0, "codebertscore": 0.76, "codescore": 0.9028030633926392, "surfaceSim": 0.5032717075197342, "abs_surfaceSim_minus_score": 0.5032717075197342}
{"golden_code": "import numpy as np\n\n\n\nS=eval(input())\n\nS=np.array([1 if s=='B' else 0 for s in S])\n\n\n\nprint((np.abs(np.diff(S)).sum()))\n", "generated_code": "p=m=0\n\nfor c in eval(input()):p=-~p*(c in'ATGC');m=max(m,p)\n\nprint(m)", "score": 0.0, "codebleu": 0.1308654918685357, "crystalbleu": 0.0, "codebertscore": 0.74, "codescore": 0.4522204101085663, "surfaceSim": 0.3956521739130435, "abs_surfaceSim_minus_score": 0.3956521739130435}
{"golden_code": "from collections import deque\n\nfrom itertools import product\n\nimport sys\n\nimport math\n\nimport numpy as np\n\nimport bisect\n\n\n\nsys.setrecursionlimit(200000)\n\ninput = sys.stdin.readline\n\n\n\n\n\ndef read():\n\n    N = int(input().strip())\n\n    A = list(map(int, input().strip().split()))\n\n    return N, A\n\n\n\n\n\ndef argsort(seq):\n\n    return sorted(list(range(len(seq))), key=seq.__getitem__)\n\n\n\ndef solve(N, A):\n\n    # x: i-A[i]の列\n\n    X = np.array([i-A[i] for i in range(N)], dtype=np.int)\n\n    # y: i+A[i]の列\n\n    Y = np.array([i+A[i] for i in range(N)], dtype=np.int)\n\n    keys = np.argsort(X)\n\n    X = X[keys]  # x[i] <= x[i+1]\n\n    Y = Y[keys]\n\n    ans = 0\n\n    for y in Y:\n\n        l = bisect.bisect_left(X, y)\n\n        r = bisect.bisect_left(X, y+1)\n\n        ans += r - l\n\n    return ans\n\n\n\n\n\nif __name__ == '__main__':\n\n    inputs = read()\n\n    outputs = solve(*inputs)\n\n    print((\"{}\".format(outputs)))\n", "generated_code": "import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nfrom bisect import bisect_right\n\nimport itertools\n\n\n\nN,X,*A = list(map(int,read().split()))\n\n\n\nA.sort()\n\nAcum = list(itertools.accumulate(A))\n\n\n\nanswer = bisect_right(Acum,X)\n\nif answer == N:\n\n    if Acum[-1] < X:\n\n        answer -= 1\n\nprint(answer)", "score": 0.0, "codebleu": 0.15768177644885756, "crystalbleu": 0.04089261127009888, "codebertscore": 0.75, "codescore": 0.08701551705598831, "surfaceSim": 0.5302441731409545, "abs_surfaceSim_minus_score": 0.5302441731409545}
{"golden_code": "class prime_factorize_by_osa_k():\n\n    def __init__(self, max_val):\n\n        '''\n\n        割ることが出来る最小の値を格納したリストを返す\n\n        :param max_val:\n\n        :return:\n\n        '''\n\n        self.minFactor = [-1] * (max_val + 1)\n\n        for i in range(2, max_val + 1):\n\n            if self.minFactor[i] == -1:\n\n                self.minFactor[i] = i\n\n                # エラトステネスの篩と同様の処理を行う\n\n                for j in range(i * i, max_val + 1, i):\n\n                    if self.minFactor[j] == -1:\n\n                        self.minFactor[j] = i\n\n\n\n    def osa_k(self, n):\n\n        '''\n\n        preprocessをしたあと、O(logN)で素因数分解を行う。nの最大値をn_maxとする。\n\n        :param n:\n\n        :return:\n\n        '''\n\n        from collections import defaultdict\n\n        d = defaultdict(int)\n\n        now = n\n\n        while now > 1:\n\n            d[self.minFactor[now]] += 1\n\n            now //= self.minFactor[now]\n\n        return d\n\ndef gcd(a, b):\n\n    while b: a, b = b, a % b\n\n    return a\n\n\n\nN = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n# N = 10 ** 6\n\n# A = [10 ** 6] * N\n\nob = prime_factorize_by_osa_k(10 ** 6)\n\npairwise = False\n\nprime_key = set(ob.osa_k(A[-1]).keys())\n\nbreak_flag = False\n\nprime_flags = [False] * (10 ** 6 + 1)\n\nfor i in range(N):\n\n    for key in list(ob.osa_k(A[i]).keys()):\n\n        if prime_flags[key]:\n\n            break_flag = True\n\n            break\n\n        else:\n\n            prime_flags[key] = True\n\n    if break_flag:\n\n        break\n\nelse:\n\n    pairwise = True\n\nif pairwise:\n\n    print('pairwise coprime')\n\n    exit()\n\nwork = gcd(A[0], A[1])\n\nfor i in range(2, N):\n\n    work = gcd(work, A[i])\n\nif work != 1:\n\n    print('not coprime')\n\nelse:\n\n    print('setwise coprime')", "generated_code": "import sys\n\ninput = sys.stdin.readline\n\nimport bisect\n\n\n\nn = int(eval(input()))\n\nX = list(map(int, input().split()))\n\nl = int(eval(input()))\n\nU = 17\n\ndp = [[0]*n for _ in range(U+1)]\n\nfor i, x in enumerate(X):\n\n  t = bisect.bisect_left(X, x+l)\n\n  dp[0][i] = bisect.bisect_right(X, x+l) - 1\n\nfor k in range(U):\n\n  for i in range(n):\n\n    dp[k+1][i] = dp[k][dp[k][i]]\n\nq = int(eval(input()))\n\nfor _ in range(q):\n\n  a, b = list(map(int, input().split()))\n\n  a -= 1\n\n  b -= 1\n\n  if a > b:\n\n    a, b = b, a\n\n  res = 1\n\n  for k in range(U, -1, -1):\n\n    if dp[k][a] < b:\n\n      a = dp[k][a]\n\n      res += (1<<k)\n\n    if a == b:\n\n      break\n\n  print(res)", "score": 0.0, "codebleu": 0.17835572532105642, "crystalbleu": 0.11929561989866153, "codebertscore": 0.71, "codescore": 0.993237316608429, "surfaceSim": 0.5427904204895085, "abs_surfaceSim_minus_score": 0.5427904204895085}
{"golden_code": "import collections\n\nimport sys\n\na=eval(input())\n\nb=[]\n\n\n\nfor i in a:\n\n  b.append(i)\n\n  \n\nb.sort()\n\nc=collections.Counter(b)\n\nc=list(c.values())\n\n\n\nfor i in range(len(c)):\n\n  if int(c[i])%2==0:\n\n    q=0\n\n  else:\n\n    q=1\n\n    print('No')\n\n    sys.exit()\n\n    \n\nprint('Yes')\n", "generated_code": "import sys\n\ninput = sys.stdin.readline\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\nK, S = list(map(int, input().split()))\n\n\n\nans = 0\n\nfor z in range(K+1):\n\n    for y in range(K+1):\n\n        x = S - (z + y)\n\n        if 0 <= x <= K:\n\n            ans += 1\n\nprint(ans)", "score": 0.0, "codebleu": 0.17740974185321928, "crystalbleu": 0.0, "codebertscore": 0.74, "codescore": 0.9405280351638794, "surfaceSim": 0.5082417582417582, "abs_surfaceSim_minus_score": 0.5082417582417582}
{"golden_code": "from heapq import heappop, heappush\n\n\n\nn, m = list(map(int, input().split()))\n\na = tuple(map(int, input().split()))\n\n\n\nhq = []\n\nfor aa in a:\n\n    heappush(hq, (-aa, 1))\n\n\n\nfor _ in range(m):\n\n    b, c = list(map(int, input().split()))\n\n    heappush(hq, (-c, b))\n\n\n\nrest = n\n\nans = 0\n\nwhile rest > 0:\n\n    num, cnt = heappop(hq)\n\n\n\n    num *= (-1)\n\n    use = min(rest, cnt)\n\n    ans += use * num\n\n    rest -= use\n\n\n\nprint(ans)\n", "generated_code": "import sys\n\nfor i in sys.stdin:\n\n    try:\n\n        sidelen = [int(j) for j in i.split(\" \")]\n\n        sidelen.sort(reverse=True)\n\n        if(sidelen[0]**2 == sidelen[1]**2 + sidelen[2]**2):\n\n            print(\"YES\")\n\n        else:\n\n            print(\"NO\")\n\n    except:\n\n        continue", "score": 0.0, "codebleu": 0.08146883229982639, "crystalbleu": 0.004198989376094202, "codebertscore": 0.65, "codescore": 0.0939071774482727, "surfaceSim": 0.3963223787167449, "abs_surfaceSim_minus_score": 0.3963223787167449}
{"golden_code": "import math\n\nn = int(eval(input()))\n\nprint((math.factorial(n)%(10**9+7)))\n", "generated_code": "w = list(eval(input()))\n\nx = list(set(w))\n\nfor i in x:\n\n    y = w.count(i)\n\n    if y % 2 != 0:\n\n        print('No')\n\n        exit(0)\n\nprint('Yes')", "score": 0.0, "codebleu": 0.2790116146018991, "crystalbleu": 0.0, "codebertscore": 0.73, "codescore": 0.8705288767814636, "surfaceSim": 0.5155010814708003, "abs_surfaceSim_minus_score": 0.5155010814708003}
{"golden_code": "from fractions import gcd\n\nn, m = list(map(int, input().split()))\n\na = [int(i) // 2 for i in input().split()]\n\nx = 1\n\nfor i in range(n):\n\n    x *= a[i] // gcd(x, a[i])\n\nfor i in a:\n\n    if x // i % 2 == 0:\n\n        print((0))\n\n        exit()\n\nprint(((m // x + 1) // 2))", "generated_code": "import sys\n\nstdin = sys.stdin \n\nni = lambda: int(ns())\n\nna = lambda: list(map(int, stdin.readline().split()))\n\nns = lambda: stdin.readline()\n\n\n\ndef Solve():\n\n    N,K=na()\n\n    S=eval(input())\n\n    l=[]\n\n    N=len(S)\n\n    #print(len(S))\n\n    if(S[0]==\"0\"):\n\n        #print(\"00\")\n\n        l.append(0)\n\n    t=S[0]\n\n    ct=1\n\n    #print(\"aa\")\n\n    #print(S)\n\n    #print(S[0],S[1],S[2])\n\n    for b in S[1:]:\n\n        #print(b)\n\n        if(t!=b):\n\n            l.append(ct)\n\n            ct=1\n\n            t=b\n\n        else:\n\n            ct+=1\n\n    #print(\"bb\")\n\n    l.append(ct)\n\n    len_l=len(l)\n\n    if(len_l//2 <= K):\n\n        return sum(l)\n\n    ans = res = sum(l[:2*K+1])\n\n    \n\n    if(len_l%2==0):\n\n        l.append(0)\n\n        len_l+=1\n\n    g = K * 2 + 1\n\n    for i in range(K*2+1,len_l-1,2):\n\n        ans -= l[i-g] + l[i-g+1]\n\n        ans += l[i] + l[1+i]\n\n        if(res<ans):\n\n            res=ans\n\n    #print(S)\n\n    #print(l)\n\n    #print(len_l)\n\n    return res\n\n\n\nprint((Solve()))", "score": 0.0, "codebleu": 0.2063247669239421, "crystalbleu": 0.08929300472023351, "codebertscore": 0.71, "codescore": 0.9585039615631104, "surfaceSim": 0.6078606582167111, "abs_surfaceSim_minus_score": 0.6078606582167111}
{"golden_code": "N, K = list(map(int, input().split()))\n\nS = eval(input())\n\nnums = []\n\nnow = 1\n\ncnt = 0\n\nfor i in range(N):\n\n    if S[i] == str(now):\n\n        cnt += 1\n\n    else:\n\n        nums.append(cnt)\n\n        now = 1 - now\n\n        cnt = 1\n\nif cnt != 0:\n\n    nums.append(cnt)\n\nif len(nums) % 2 == 0:\n\n    nums.append(0)\n\n\n\nadd = 2 * K + 1\n\nans = 0\n\nleft = 0\n\nright = 0\n\ntmp = 0\n\nfor i in range(0, len(nums), 2):\n\n\n\n    next_left = i\n\n    next_right = min(i + add, len(nums))\n\n\n\n    while next_left > left:\n\n        tmp -= nums[left]\n\n        left += 1\n\n\n\n    while next_right > right:\n\n        tmp += nums[right]\n\n        right += 1\n\n\n\n    ans = max(ans, tmp)\n\nprint(ans)", "generated_code": "from math import gcd\n\nn,m=list(map(int,input().split()))\n\na=list(map(int,input().split()))\n\na=list(set(a))\n\na=list([x//2 for x in a])\n\n\n\ndef lcm(q):\n\n  x = q[0]\n\n  for i in range(1, len(q)):\n\n    x = (x * q[i]) // gcd(x, q[i])\n\n  return x\n\n\n\nlcma=lcm(a)\n\nfor i in range(len(a)):\n\n  if (lcma//a[i])%2==0:\n\n    print((0))\n\n    exit()\n\ntemp=m//lcma\n\nprint((temp//2 if temp%2==0 else temp//2+1))", "score": 0.0, "codebleu": 0.13824264912236334, "crystalbleu": 0.14626735233476545, "codebertscore": 0.74, "codescore": 0.9714086055755615, "surfaceSim": 0.5236047883999326, "abs_surfaceSim_minus_score": 0.5236047883999326}
{"golden_code": "from copy import deepcopy\n\nfrom scipy.sparse.csgraph import floyd_warshall\n\n\n\nn,m=list(map(int,input().split()))\n\nl=[list(map(int,input().split())) for i in range(m)]\n\n\n\ncnt=0\n\nfor i in range(m):\n\n  ll=deepcopy(l)\n\n  del ll[i]\n\n\n\n  d=[[float('inf')]*n for i in range(n)]\n\n  for i in range(n):\n\n    d[i][i]=0\n\n\n\n  for a,b in ll:\n\n    a-=1\n\n    b-=1\n\n    d[a][b]=1\n\n    d[b][a]=1\n\n\n\n  s=floyd_warshall(d)\n\n  for i in s:\n\n    if float('inf') in i:\n\n      cnt+=1\n\n      break\n\n\n\nprint(cnt)", "generated_code": "import sys\n\nK = int(eval(input()))\n\n\n\nL = 9 * K\n\n\n\nif K % 7 == 0:\n\n    L //= 7\n\n\n\npower = 1\n\n\n\nfor i in range(1, 10 ** 6):\n\n    power *= 10\n\n    power %= L\n\n    if power == 1:\n\n        print(i)\n\n        sys.exit()\n\n\n\nprint((-1))", "score": 0.0, "codebleu": 0.1518169562737466, "crystalbleu": 0.0, "codebertscore": 0.71, "codescore": 0.9307307004928589, "surfaceSim": 0.41809851088201605, "abs_surfaceSim_minus_score": 0.41809851088201605}
{"golden_code": "import sys\n\nimport numpy as np\n\n\n\nsys.setrecursionlimit(10 ** 6)\n\nint1 = lambda x: int(x) - 1\n\nprintV = lambda x: print(*x, sep=\"\\n\")\n\nprintH = lambda x: print(\" \".join(map(str,x)))\n\ndef IS(): return sys.stdin.readline()[:-1]\n\ndef II(): return int(sys.stdin.readline())\n\ndef MI(): return map(int, sys.stdin.readline().split())\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\n\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\n\ndef LII(rows_number): return [II() for _ in range(rows_number)]\n\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\ndef LLI1(rows_number): return [LI1() for _ in range(rows_number)]\n\n\n\ndef main():\n\n\tK,N = MI()\n\n\tA = np.array(LI())\n\n\tA_LAST = K+A[0] - A[N-1]\n\n\tB = A[1:]-A[:N-1]\n\n\tB = np.sort(B)\n\n\tprint(K-max(B[N-2],A_LAST))\n\n\n\nif __name__ == '__main__':\n\n\tmain()\n", "generated_code": "K = int(eval(input()))\n\n\n\nans = 1\n\nnum = 0\n\nseven = 7\n\n\n\nif not K%2:\n\n    print((-1))\n\nelse:\n\n    for i in range(K):\n\n        num = num + seven\n\n        seven = seven*10%K\n\n        num = num%K\n\n        if num == 0:\n\n            print(ans)\n\n            break\n\n        ans += 1\n\n    else:\n\n        print((-1))", "score": 0.0, "codebleu": 0.06774783320375277, "crystalbleu": 0.0031945372584244016, "codebertscore": 0.66, "codescore": 0.4749354422092438, "surfaceSim": 0.32240361556908326, "abs_surfaceSim_minus_score": 0.32240361556908326}
{"golden_code": "k = int(eval(input()))\n\ncount = 1\n\nn = 0\n\nif k % 2 == 0 or k % 5 == 0:\n\n    print((-1))\n\nelse:\n\n  while 1:\n\n      n = (n * 10 + 7) % k  \n\n      if n == 0:\n\n        break \n\n      count += 1\n\n  print(count)", "generated_code": "N = int(eval(input()))\n\n\n\nFACTOR = 10 ** 9 + 7\n\n\n\nnum = 1\n\nfor i in range(1, N+1):\n\n    num *= i\n\n    k, r = divmod(num, FACTOR)\n\n    num = r\n\n\n\nprint(r)", "score": 0.0, "codebleu": 0.22775774173061145, "crystalbleu": 0.0, "codebertscore": 0.76, "codescore": 0.9915497303009033, "surfaceSim": 0.5365686274509804, "abs_surfaceSim_minus_score": 0.5365686274509804}
{"golden_code": "from functools import reduce\ndef f(a,b): return [Card[a][0], Card[b][1]]\n\nn = int(input())\n\nCard = [[] for _ in [0]*n]\n\nCost = {}\n\nfor i in range(n):\n\n  Card[i] = list(map(int, input().split()))\n\n  Cost[(i, i)] = 0\n\nfor i in range(1, n):\n\n  for j in range(0, n-i):\n\n    a = j+i\n\n    Cost[(j, a)] = min([reduce(lambda a,b: a*b, f(j, k) + f(k+1, a)) + Cost[(j, k)] + Cost[(k+1, a)] for k in range(j, j+i)])\n\nprint(Cost[0, n-1])", "generated_code": "class RH():\n\n    def __init__(self, s, base, mod):\n\n        self.base = base\n\n        self.mod = mod\n\n        self.rev = pow(base, mod-2, mod)\n\n\n\n        l = len(s)\n\n        self.h = h = [0]*(l+1)\n\n        tmp = 0\n\n        for i in range(l):\n\n            num = ord(s[i])\n\n            tmp = (tmp*base + num) % mod\n\n            h[i+1] = tmp\n\n    def calc(self, l, r):\n\n        return (self.h[r] - self.h[l] * pow(self.base, r-l, self.mod)) % self.mod\n\n    def fixed(self, length):\n\n        v = pow(self.base, length, self.mod)\n\n        h = self.h; mod = self.mod\n\n        def fixed_calc(l):\n\n            return (h[length+l] - h[l] * v) % mod\n\n        return fixed_calc\n\nT = eval(input()); P = eval(input())\n\nMOD = 10**18+9\n\nHT = RH(T, 11, MOD)\n\nHP = RH(P, 11, MOD)\n\n\n\npv = HP.calc(0, len(P))\n\ncalc = HT.fixed(len(P))\n\nfor i in range(len(T)-len(P)+1):\n\n    if calc(i) == pv:\n\n        print(i)", "score": 0.0, "codebleu": 0.20862494739843684, "crystalbleu": 0.03984920367427496, "codebertscore": 0.72, "codescore": 0.9935338497161865, "surfaceSim": 0.5377324158009661, "abs_surfaceSim_minus_score": 0.5377324158009661}
{"golden_code": "from collections import Counter,defaultdict,deque\n\nimport sys,bisect,math,itertools,string,queue\n\nfrom heapq import heappop, heappush\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\ndef inp(): return int(sys.stdin.readline())\n\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\ndef inpl_str(): return list(sys.stdin.readline().split())\n\ndef inpln(n): return list(int(sys.stdin.readline()) for i in range(n))\n\n\n\nn = inp()\n\nres = float('inf')\n\nfor i in range(1,2*10**6):\n\n    if (n/i).is_integer():\n\n        res = min(res, i + n/i)\n\nprint((int(res-2)))\n", "generated_code": "w = list(eval(input()))\n\nx = list(set(w))\n\nfor i in x:\n\n    y = w.count(i)\n\n    if y % 2 != 0:\n\n        print('No')\n\n        exit(0)\n\nprint('Yes')", "score": 0.0, "codebleu": 0.10400454381044669, "crystalbleu": 0.007440599558257318, "codebertscore": 0.65, "codescore": 0.13773159682750702, "surfaceSim": 0.3285661787223617, "abs_surfaceSim_minus_score": 0.3285661787223617}
{"golden_code": "from fractions import gcd\n\n\n\nn,m=list(map(int,input().split()))\n\na=list(map(int,input().split()))\n\na=list(set(a))\n\n\n\na=list([x//2 for x in a])\n\n\n\ndef lcm(q):\n\n  x = q[0]\n\n  for i in range(1, len(q)):\n\n    x = (x * q[i]) // gcd(x, q[i])\n\n  return x\n\n\n\nlcma=lcm(a)\n\n\n\nif (lcma//a[0])%2==0:\n\n  print((0))\n\nelse:\n\n  flg=0\n\n  for i in range(1,len(a)):\n\n    if (lcma//a[i])%2==0:\n\n      print((0))\n\n      flg=1\n\n      break\n\n  if flg==0:\n\n    temp=m//lcma\n\n    print((temp//2 if temp%2==0 else temp//2+1))", "generated_code": "N, K = list(map(int, input().split()))\n\nS = eval(input())\n\nnums = []\n\nnow = 1\n\ncnt = 0\n\nfor i in range(N):\n\n    if S[i] == str(now):\n\n        cnt += 1\n\n    else:\n\n        nums.append(cnt)\n\n        now = 1 - now\n\n        cnt = 1\n\nif cnt != 0:\n\n    nums.append(cnt)\n\nif len(nums) % 2 == 0:\n\n    nums.append(0)\n\n\n\ncsum = [0] * (len(nums) + 1)\n\nfor i in range(len(nums)):\n\n    csum[i + 1] = csum[i] + nums[i]\n\n\n\nadd = 2 * K + 1\n\nans = 0\n\ntmp = 0\n\nfor i in range(0, len(nums), 2):\n\n    left = i\n\n    right = min(i + add, len(nums))\n\n    tmp = csum[right] - csum[left]\n\n    ans = max(ans, tmp)\n\nprint(ans)", "score": 0.0, "codebleu": 0.1987895144617582, "crystalbleu": 0.15375310927114325, "codebertscore": 0.75, "codescore": 0.9319222569465637, "surfaceSim": 0.5060815645122824, "abs_surfaceSim_minus_score": 0.5060815645122824}
{"golden_code": "import itertools\n\nfrom collections import Counter\n\nN = int(eval(input()))\n\nsrc = [eval(input()) for i in range(N)]\n\nctr = Counter()\n\nfor s in src:\n\n    ctr[s[0]] += 1\n\n\n\nans = 0\n\nfor ptn in itertools.combinations('MARCH',3):\n\n    a,b,c = ptn\n\n    ans += ctr[a]*ctr[b]*ctr[c]\n\nprint(ans)", "generated_code": "N=int(eval(input()))\n\nroot=int((N**0.5)//1)\n\na=N\n\nb=N\n\nfor i in range(root, 0, -1):\n\n    if N%i==0:\n\n        a=i\n\n        b=N//i\n\n        break\n\nprint((a-1+b-1))\n", "score": 0.0, "codebleu": 0.11864289803297223, "crystalbleu": 0.08981490628608056, "codebertscore": 0.75, "codescore": 0.2302967756986618, "surfaceSim": 0.3589379370629371, "abs_surfaceSim_minus_score": 0.3589379370629371}
{"golden_code": "import sys\n\ninput = sys.stdin.readline\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\n\"\"\"\n\n奇数番目集合、偶数番目集合の中で自由にできるのが操作2．\n\n操作1で集合間のやりとりをする\n\n\"\"\"\n\n\n\nimport numpy as np\n\n\n\nN = int(eval(input()))\n\nA = np.fromstring(sys.stdin.read(),dtype=np.int64,sep='\\n')\n\n\n\nB = np.sort(A)\n\n\n\nanswer = len(np.setdiff1d(A[::2],B[::2]))\n\nprint(answer)", "generated_code": "x = int(eval(input()))\n\n\n\nfor a in range(10**3):\n\n    for b in range(10**3):\n\n        if(a**5 + b**5 == x):\n\n            print((a, -b))\n\n            break\n\n        elif(a**5 - b**5 == x):\n\n            print((a, b))\n\n            break\n\n    else:\n\n        continue\n\n    break\n", "score": 0.0, "codebleu": 0.11268913518585441, "crystalbleu": 0.0, "codebertscore": 0.64, "codescore": 0.6369186639785767, "surfaceSim": 0.3212611345522738, "abs_surfaceSim_minus_score": 0.3212611345522738}
{"golden_code": "N , L = list(map(int , input().split()))\n\n\n\napple_taste = []\n\n\n\nfor i in range(N):\n\n    taste = L + i + 1 - 1\n\n    apple_taste.append(taste)\n\n    \n\nimport numpy as np\n\n\n\nabs_apple_taste = np.abs(apple_taste)\n\nm = min(abs_apple_taste)\n\n\n\nfor j in range(N):\n\n    if m == abs_apple_taste[j]:\n\n        apple_taste.remove(apple_taste[j])\n\n\n\npie_taste = 0       \n\n\n\nfor k in range(N-1):\n\n    pie_taste += apple_taste[k]\n\n    \n\nprint(pie_taste)", "generated_code": "class UnionFind():\n\n    def __init__(self, n):\n\n        self.n = n\n\n        self.parents = [-1] * n\n\n\n\n    def find(self, x):\n\n        if self.parents[x] < 0:\n\n            return x\n\n        else:\n\n            self.parents[x] = self.find(self.parents[x])\n\n            return self.parents[x]\n\n\n\n    def union(self, x, y):\n\n        x = self.find(x)\n\n        y = self.find(y)\n\n\n\n        if x == y:\n\n            return\n\n\n\n        if self.parents[x] > self.parents[y]:\n\n            x, y = y, x\n\n\n\n        self.parents[x] += self.parents[y]\n\n        self.parents[y] = x\n\n\n\n    def roots(self):\n\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n\n\n    def group_count(self):\n\n        return len(self.roots())\n\n\n\nfrom copy import deepcopy\n\n\n\nn,m=list(map(int,input().split()))\n\nl=[list(map(int,input().split())) for i in range(m)]\n\n\n\ncnt=0\n\nfor i in range(m):\n\n  uf=UnionFind(n)\n\n  ll=deepcopy(l)\n\n  del ll[i]\n\n  for a,b in ll:\n\n    a-=1\n\n    b-=1\n\n    uf.union(a,b)\n\n  if uf.group_count()>=2:\n\n    cnt+=1\n\nprint(cnt)", "score": 0.0, "codebleu": 0.2749133112045841, "crystalbleu": 0.08673648294903621, "codebertscore": 0.7, "codescore": 0.9915568828582764, "surfaceSim": 0.5059026994510866, "abs_surfaceSim_minus_score": 0.5059026994510866}
{"golden_code": "import numpy as np\n\nN, K = list(map(int, input().split()))\n\n \n\nA = np.zeros(N, dtype=int)\n\n \n\nfor _ in range(K):\n\n    eval(input())\n\n    for i in input().split():\n\n        A[int(i) - 1] += 1\n\n \n\nans = 0\n\nfor i in A:\n\n    if i == 0:\n\n        ans += 1\n\nprint(ans)\n\n ", "generated_code": "S=eval(input())\n\nN=len(S)\n\nmod=[0 for i in range(2019)]\n\ns=0\n\nten=1\n\nfor i in range(N-1,-1,-1): \n\n  s+=int(S[i])*ten\n\n  mod2=s%2019\n\n  mod[mod2]+=1\n\n  ten=(ten*10)%2019\n\nans=0\n\nfor i in range(2019):\n\n  k=mod[i]\n\n  if i==0:\n\n    if k>=2:\n\n      ans+=k*(k-1)//2+k\n\n    else:\n\n      ans+=k\n\n  else:\n\n    if k>=2:\n\n      ans+=k*(k-1)//2\n\nprint(ans) ", "score": 0.0, "codebleu": 0.19803124323725527, "crystalbleu": 0.11972289989423653, "codebertscore": 0.78, "codescore": 0.9935744404792786, "surfaceSim": 0.5033660589060309, "abs_surfaceSim_minus_score": 0.5033660589060309}
{"golden_code": "import numpy as np\n\nN, K= list(map(int, input().split()))\n\nA=[int(i) for i in input().split()]\n\nF=[int(i) for i in input().split()]\n\n\n\nA=np.array(sorted(A, reverse=True))\n\nF=np.array(sorted(F))\n\n\n\nlower_bound=0\n\nupper_bound=np.max(A*F)\n\nK_tmp=0\n\n\n\nwhile upper_bound>=lower_bound:\n\n    mid=(lower_bound+upper_bound)//2\n\n    K_tmp=np.sum(np.maximum(A-mid//F, 0))\n\n    if K_tmp<=K:\n\n        upper_bound=mid-1\n\n    else:\n\n        lower_bound=mid+1\n\n\n\nprint(lower_bound)", "generated_code": "from sys import exit\n\ns = eval(input())\n\nts = ['']\n\nwhile True:\n\n  nts= []\n\n  for t in ts:\n\n    for w in ['dreamer', 'eraser', 'dream', 'erase']:\n\n      tw = t + w\n\n      if s == tw:\n\n        print('YES')\n\n        exit()\n\n      if s.startswith(tw):\n\n        nts.append(tw)\n\n  if len(nts) == 0:\n\n    print('NO')\n\n    exit()\n\n  ts = nts\n", "score": 0.0, "codebleu": 0.1241393150889079, "crystalbleu": 0.0037433912761230276, "codebertscore": 0.65, "codescore": 0.9886919260025024, "surfaceSim": 0.4209862810530219, "abs_surfaceSim_minus_score": 0.4209862810530219}
{"golden_code": "N = int(eval(input()))\n\nans = N - 1\n\np = 1\n\nfor i in range(2, int((N ** 0.5) + 1)):\n\n    if p % 2 == 1 and i > (N ** 0.5):\n\n        break\n\n    if N % i == 0:\n\n        p = i\n\n        j = N // i\n\n        m = i + j - 2\n\n        if m < ans:\n\n            ans = m\n\n        else:\n\n            continue\n\n    else:\n\n        continue\n\nprint(ans)\n", "generated_code": "from collections import deque\n\n\n\nN, K = list(map(int, input().split()))\n\np = list(map(int, input().split()))\n\n\n\nmx = 0\n\ns = 0\n\nq = deque()\n\n\n\nfor i in range(N):\n\n    p[i] += 1\n\n\n\nfor i in range(N):\n\n    s += p[i]\n\n    q.append(p[i])\n\n    if len(q) > K:\n\n        s -= q.popleft()\n\n    if len(q) == K:\n\n        mx = max(mx, s)\n\n\n\nprint((mx / 2))\n\n\n", "score": 0.0, "codebleu": 0.1678197869053633, "crystalbleu": 0.04475427053182411, "codebertscore": 0.77, "codescore": 0.912346601486206, "surfaceSim": 0.47109826589595377, "abs_surfaceSim_minus_score": 0.47109826589595377}
{"golden_code": "import numpy as np\n\nN=int(eval(input()))\n\nroot=int(np.sqrt(N)//1)\n\na=N\n\nb=N\n\nfor i in range(root, 0, -1):\n\n    if N%i==0:\n\n        a=i\n\n        b=N//i\n\n        break\n\nprint((a-1+b-1))", "generated_code": "class RH():\n\n    def __init__(self, s, base, mod):\n\n        self.base = base\n\n        self.mod = mod\n\n        self.rev = pow(base, mod-2, mod)\n\n\n\n        l = len(s)\n\n        self.h = h = [0]*(l+1)\n\n        tmp = 0\n\n        for i in range(l):\n\n            num = ord(s[i])\n\n            tmp = (tmp*base + num) % mod\n\n            h[i+1] = tmp\n\n    def calc(self, l, r):\n\n        return (self.h[r] - self.h[l] * pow(self.base, r-l, self.mod)) % self.mod\n\n    def fixed(self, length):\n\n        v = pow(self.base, length, self.mod)\n\n        h = self.h; mod = self.mod\n\n        def fixed_calc(l):\n\n            return (h[length+l] - h[l] * v) % mod\n\n        return fixed_calc\n\nT = eval(input()); P = eval(input())\n\nMOD = 10**18+9\n\nHT = RH(T, 11, MOD)\n\nHP = RH(P, 11, MOD)\n\n\n\npv = HP.calc(0, len(P))\n\ncalc = HT.fixed(len(P))\n\nfor i in range(len(T)-len(P)+1):\n\n    if calc(i) == pv:\n\n        print(i)", "score": 0.0, "codebleu": 0.2123111543582175, "crystalbleu": 0.03532236084113904, "codebertscore": 0.67, "codescore": 0.9936041235923767, "surfaceSim": 0.4600504482394246, "abs_surfaceSim_minus_score": 0.4600504482394246}
{"golden_code": "a, b, c = list(map(int, input().split()))\n\nif (b - a) == (c - b):\n\n    print(\"YES\")\n\nelse:\n\n    print(\"NO\")", "generated_code": "def gcd(a, b):\n\n    while b: a, b = b, a % b\n\n    return a\n\ndef isPrimeMR(n):\n\n    d = n - 1\n\n    d = d // (d & -d)\n\n    L = [2]\n\n    for a in L:\n\n        t = d\n\n        y = pow(a, t, n)\n\n        if y == 1: continue\n\n        while y != n - 1:\n\n            y = (y * y) % n\n\n            if y == 1 or t == n - 1: return 0\n\n            t <<= 1\n\n    return 1\n\ndef findFactorRho(n):\n\n    m = 1 << n.bit_length() // 8\n\n    for c in range(1, 99):\n\n        f = lambda x: (x * x + c) % n\n\n        y, r, q, g = 2, 1, 1, 1\n\n        while g == 1:\n\n            x = y\n\n            for i in range(r):\n\n                y = f(y)\n\n            k = 0\n\n            while k < r and g == 1:\n\n                ys = y\n\n                for i in range(min(m, r - k)):\n\n                    y = f(y)\n\n                    q = q * abs(x - y) % n\n\n                g = gcd(q, n)\n\n                k += m\n\n            r <<= 1\n\n        if g == n:\n\n            g = 1\n\n            while g == 1:\n\n                ys = f(ys)\n\n                g = gcd(abs(x - ys), n)\n\n        if g < n:\n\n            if isPrimeMR(g): return g\n\n            elif isPrimeMR(n // g): return n // g\n\n            return findFactorRho(g)\n\ndef primeFactor(n):\n\n    i = 2\n\n    ret = {}\n\n    rhoFlg = 0\n\n    while i*i <= n:\n\n        k = 0\n\n        while n % i == 0:\n\n            n //= i\n\n            k += 1\n\n        if k: ret[i] = k\n\n        i += 1 + i % 2\n\n        if i == 101 and n >= 2 ** 20:\n\n            while n > 1:\n\n                if isPrimeMR(n):\n\n                    ret[n], n = 1, 1\n\n                else:\n\n                    rhoFlg = 1\n\n                    j = findFactorRho(n)\n\n                    k = 0\n\n                    while n % j == 0:\n\n                        n //= j\n\n                        k += 1\n\n                    ret[j] = k\n\n\n\n    if n > 1: ret[n] = 1\n\n    if rhoFlg: ret = {x: ret[x] for x in sorted(ret)}\n\n    return ret\n\ndef gcd(a, b):\n\n    while b: a, b = b, a % b\n\n    return a\n\n\n\nN = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n# N = 10 ** 6\n\n# A = [10 ** 6] * N\n\npairwise = False\n\nprime_key = set(primeFactor(A[-1]).keys())\n\nbreak_flag = False\n\nprime_flags = [False] * (10 ** 6 + 1)\n\nfor i in range(N):\n\n    for key in list(primeFactor(A[i]).keys()):\n\n        if prime_flags[key]:\n\n            break_flag = True\n\n            break\n\n        else:\n\n            prime_flags[key] = True\n\n    if break_flag:\n\n        break\n\nelse:\n\n    pairwise = True\n\nif pairwise:\n\n    print('pairwise coprime')\n\n    exit()\n\nwork = gcd(A[0], A[1])\n\nfor i in range(2, N):\n\n    work = gcd(work, A[i])\n\nif work != 1:\n\n    print('not coprime')\n\nelse:\n\n    print('setwise coprime')", "score": 0.0, "codebleu": 0.36709441678530874, "crystalbleu": 0.03395998034651672, "codebertscore": 0.64, "codescore": 0.9666611552238464, "surfaceSim": 0.4089075550493546, "abs_surfaceSim_minus_score": 0.4089075550493546}
{"golden_code": "n,*x=list(map(int,open(0).read().split()))\n\n\n\nimport numpy as np\n\n\n\nxar=np.array(x)\n\n\n\nans=float(\"inf\")\n\nfor p in range(0,101):\n\n    tmp=sum((xar-p)**2)\n\n    ans=min(ans,tmp)\n\n    \n\nprint((int(ans)))", "generated_code": "n = int(eval(input()))\n\na = list(map(int, input().split()))\n\nans = 0\n\nfor num in a:\n\n    ans += format(num, 'b')[::-1].find('1')\n\nprint(ans)", "score": 0.0, "codebleu": 0.11290192040713508, "crystalbleu": 0.0, "codebertscore": 0.76, "codescore": 0.12448609620332718, "surfaceSim": 0.4234214551015949, "abs_surfaceSim_minus_score": 0.4234214551015949}
{"golden_code": "import numpy as np\n\n\n\nN = int(eval(input()))\n\nX = np.array(list(map(int, input().split())))\n\ncost = float(\"inf\")\n\nfor i in range(max(X) - min(X) + 1):\n\n    p = min(X) + i\n\n    cost = min(np.sum((X - p) ** 2), cost)\n\nprint(cost)", "generated_code": "#! /usr/bin/env python3\n\n\n\nimport sys\n\nint1 = lambda x: int(x) - 1\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\nsys.setrecursionlimit(500000)\n\n\n\nk = int(readline())\n\n\n\nans = -1\n\nacc = 7 % k\n\nfor n in range(1, k + 10):\n\n    if acc == 0:\n\n        ans = n\n\n        break\n\n    acc = (10 * acc + 7) % k\n\n\n\nprint(ans)\n", "score": 0.0, "codebleu": 0.1886838671163702, "crystalbleu": 0.02304805230946273, "codebertscore": 0.69, "codescore": 0.10376108437776566, "surfaceSim": 0.5104905437352246, "abs_surfaceSim_minus_score": 0.5104905437352246}
{"golden_code": "import numpy as np\n\n\n\nn=int(eval(input()))\n\na_list=list(map(int,input().split()))\n\na_list_2=sorted(a_list,reverse=True)\n\na=np.array(a_list_2,dtype='uint8')\n\n\n\nalice=0\n\nbob=0\n\nfor i in range(n):\n\n\tif i%2==0:\n\n\t\talice+=a[i]\n\n\telse:\n\n\t\tbob+=a[i]\n\n\n\nprint((alice-bob))\n", "generated_code": "from math import gcd, ceil\n\nn, m = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\na = [i // 2 for i in a]\n\nl = 1\n\nfor i in a:\n\n    l *= i // gcd(l, i)\n\nfor i in a:\n\n    if l // i % 2 == 0:\n\n        print((0))\n\n        exit()\n\nprint((ceil((m // l) / 2)))", "score": 0.0, "codebleu": 0.19718100490921756, "crystalbleu": 0.16276559570113763, "codebertscore": 0.79, "codescore": 0.6925598978996277, "surfaceSim": 0.5025362318840579, "abs_surfaceSim_minus_score": 0.5025362318840579}
{"golden_code": "#! /usr/bin/env python3\n\n\n\nimport sys\n\nint1 = lambda x: int(x) - 1\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\nsys.setrecursionlimit(500000)\n\n\n\n\n\ndef isMultiple(s, m):\n\n    tmp = 0\n\n    for i in range(len(s)):\n\n        tmp = (tmp * 10 + int(s[i])) % m\n\n        if tmp == 0:\n\n            return i\n\n    return -1\n\n\n\n\n\nk = int(readline())\n\nacc = \"7\" * 50000000\n\nif k % 2 == 0:\n\n    ans = -1\n\nelse:\n\n\n\n    ans = isMultiple(acc, k)\n\n    if ans != -1:\n\n        ans += 1\n\n\n\nprint(ans)\n", "generated_code": "N, K = list(map(int, input().split()))\n\n\n\nA = [0] * N\n\n\n\nfor _ in range(K):\n\n    eval(input())\n\n    for i in map(int, input().split()):\n\n        A[i - 1] += 1\n\n\n\nprint((A.count(0)))\n", "score": 0.0, "codebleu": 0.10605114077223635, "crystalbleu": 0.03451221338120229, "codebertscore": 0.69, "codescore": 0.14150138199329376, "surfaceSim": 0.4804118533400301, "abs_surfaceSim_minus_score": 0.4804118533400301}
{"golden_code": "import numpy as np\n\nS=eval(input())\n\nN=len(S)\n\nmod=[0 for i in range(2019)]\n\nmod2=0\n\nten=1\n\nfor i in range(N-1,-1,-1): \n\n  s=int(S[i])*ten\n\n  mod2+=np.mod(s,2019)\n\n  mod2=np.mod(mod2,2019)\n\n  mod[mod2]+=1\n\n  ten=(ten*10)%2019\n\nans=0\n\nfor i in range(2019):\n\n  k=mod[i]\n\n  if i==0:\n\n    if k>=2:\n\n      ans+=k*(k-1)//2+k\n\n    else:\n\n      ans+=k\n\n  else:\n\n    if k>=2:\n\n      ans+=k*(k-1)//2\n\nprint(ans) ", "generated_code": "a, b, c, x, y = list(map(int, input().split()))\n\nans = float('inf')\n\n\n\nfor i in range(100005):\n\n    tmp = i * 2 * c\n\n    tmp += max(0, x-i) * a\n\n    tmp += max(0, y-i) * b\n\n    ans = min(ans, tmp)\n\n\n\nprint(ans)", "score": 0.0, "codebleu": 0.09268207832994212, "crystalbleu": 0.016418978187211837, "codebertscore": 0.73, "codescore": 0.9630878567695618, "surfaceSim": 0.44776119402985076, "abs_surfaceSim_minus_score": 0.44776119402985076}
{"golden_code": "N, D = list(map(int, input().split()))\n\ncnt = 0\n\nfor _ in range(N):\n\n    x, y = list(map(int, input().split()))\n\n    if x ** 2 + y ** 2 <= D ** 2:\n\n        cnt += 1\n\n        \n\nprint(cnt)", "generated_code": "n,l = list(map(int,input().split()))\n\nans = l\n\neat = l\n\n\n\nfor i in range(n-1):\n\n    l += 1\n\n    ans += l\n\n    \n\n    if abs(l) < abs(eat):\n\n        eat = l\n\n        \n\nprint((ans-eat))", "score": 0.0, "codebleu": 0.31095412066545935, "crystalbleu": 0.13515889132514566, "codebertscore": 0.78, "codescore": 0.9389680027961731, "surfaceSim": 0.7118279569892474, "abs_surfaceSim_minus_score": 0.7118279569892474}
{"golden_code": "import math\n\nn=int(eval(input()))\n\nwaru=10**9+7\n\n\n\nli=[]\n\nli2=[]\n\n\n\nfor i in range(2,n+1):\n\n    tmp=math.factorial(n)\n\n    flag=1\n\n    for j in range(len(li)):\n\n        if i%li[j]==0:\n\n            flag=0\n\n            break\n\n    if flag==1:\n\n        li.append(i)\n\n        li2.append(0)\n\n        while tmp%i==0:\n\n            li2[len(li)-1]+=1\n\n            tmp=tmp//i\n\nans=1\n\n# print(li)\n\n# print(li2)\n\nfor i in range(len(li2)):\n\n    ans*=li2[i]+1\n\nprint((ans%waru))", "generated_code": "n, m = list(map(int, input().split()))\n\n\n\nd = [[1001] * n for i in range(n)]\n\n\n\nes = []\n\nfor i in range(m):\n\n    es.append(list(map(int, input().split())))\n\n\n\nfor (i, j, w) in es:\n\n    d[i - 1][j - 1] = w\n\n    d[j - 1][i - 1] = w\n\n\n\n\n\nfor k in range(n):\n\n    for i in range(n):\n\n        for j in range(n):\n\n            l = d[i][k] + d[k][j]\n\n            if d[i][j] > l:\n\n                d[i][j] = l\n\n\n\nc = 0\n\nfor (i, j, w) in es:\n\n    if d[i - 1][j - 1] < w:\n\n        c += 1\n\n\n\nprint(c)", "score": 0.0, "codebleu": 0.21035479603886192, "crystalbleu": 0.08630383054818008, "codebertscore": 0.76, "codescore": 0.43463894724845886, "surfaceSim": 0.5520014964459409, "abs_surfaceSim_minus_score": 0.5520014964459409}
{"golden_code": "import random, math\n\nrandom.seed()\n\ndef gen(a, b, num):\n\n    result = set()\n\n    while 1:\n\n        while 1:\n\n            v = random.randint(a, b)//2*2+1\n\n            if v not in result:\n\n                break\n\n        for x in range(3, int(math.sqrt(v))+1, 2):\n\n            if v % x == 0:\n\n                break\n\n        else:\n\n            result.add(v)\n\n            if len(result) == num:\n\n                break\n\n    return result\n\nclass RH():\n\n    def __init__(self, s, base, mod):\n\n        self.base = base\n\n        self.mod = mod\n\n        self.rev = pow(base, mod-2, mod)\n\n\n\n        l = len(s)\n\n        self.h = h = [0]*(l+1)\n\n        tmp = 0\n\n        for i in range(l):\n\n            num = ord(s[i])\n\n            tmp = (tmp*base + num) % mod\n\n            h[i+1] = tmp\n\n    def calc(self, l, r):\n\n        return (self.h[r] - self.h[l] * pow(self.base, r-l, self.mod)) % self.mod\n\n    def fixed(self, length):\n\n        v = pow(self.base, length, self.mod)\n\n        h = self.h; mod = self.mod\n\n        def fixed_calc(l):\n\n            return (h[length+l] - h[l] * v) % mod\n\n        return fixed_calc\n\nclass RRH():\n\n    def __init__(self, s, num=10, primes=None):\n\n        primes = primes or gen(2, 10**3, num)\n\n        MOD = 10**9+7\n\n        self.rhs = [RH(s, p, MOD) for p in primes]\n\n    def calc(self, l, r):\n\n        return [rh.calc(l, r) for rh in self.rhs]\n\n    def fixed(self, length):\n\n        fs = [rh.fixed(length) for rh in self.rhs]\n\n        def multi_fixed_calc(l):\n\n            return list(f(l) for f in fs)\n\n        return multi_fixed_calc\n\n\n\nT = eval(input()); P = eval(input())\n\nprimes = gen(2, 10**3, 2)\n\nHT = RRH(T, primes=primes)\n\nHP = RRH(P, primes=primes)\n\n\n\npv = HP.calc(0, len(P))\n\ncalc = HT.fixed(len(P))\n\nfor i in range(len(T)-len(P)+1):\n\n    if calc(i) == pv:\n\n        print(i)", "generated_code": "def main():\n\n    A, B, AB, X, Y = list(map(int, input().split()))\n\n    M = max(X, Y)\n\n\n\n    k = 0\n\n    ans = A * X + B * Y\n\n    while True:\n\n        ans = min(\n\n            ans,\n\n            AB * k * 2 + max(0, X - k) * A + max(0, Y - k) * B\n\n        )\n\n\n\n        if k >= M: break\n\n        k += 1\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n", "score": 0.0, "codebleu": 0.06535853645015974, "crystalbleu": 0.0005952141930299808, "codebertscore": 0.68, "codescore": 0.16855068504810333, "surfaceSim": 0.4434721782282758, "abs_surfaceSim_minus_score": 0.4434721782282758}
{"golden_code": "w = eval(input())\n\ny = list(set(w))\n\n\n\nfor i in range(len(y)):\n\n    if w.count(y[i]) % 2 != 0:\n\n        print('No')\n\n        exit(0)\n\n\n\nprint('Yes')", "generated_code": "from statistics import*\n\n(n,),*t=[list(map(int,t.split()))for t in open(0)]\n\na,b=list(map(median,list(zip(*t))))\n\nprint((int((b-a)*(2-n%2))+1))", "score": 0.0, "codebleu": 0.1288796229275968, "crystalbleu": 0.0, "codebertscore": 0.71, "codescore": 0.028151245787739754, "surfaceSim": 0.36694386694386694, "abs_surfaceSim_minus_score": 0.36694386694386694}
{"golden_code": "#ABC 130 B\n\nN,X=list(map(int,input().split()))\n\nL= [int(j) for j in input().split()]\n\ncnt=0\n\nimport numpy as np\n\njump = list(np.cumsum(L))\n\nfor j in jump:\n\n    if j <= X:\n\n        cnt+=1\n\nprint((cnt+1))", "generated_code": "def kmpTable(w):\n\n    lw = len(w)\n\n    nx = [-1] * (lw + 1)\n\n    j = -1\n\n    for i in range(lw):\n\n        while j >= 0 and w[i] != w[j]:\n\n            j = nx[j]\n\n        j += 1\n\n        nx[i + 1] = j\n\n    return tuple(nx)\n\ndef kmpSearch(s, w):\n\n    ls = len(s)\n\n    start = 0\n\n    w_idx = 0\n\n    ret = []\n\n    nx = kmpTable(w)\n\n    while start + w_idx < ls:\n\n        if s[start + w_idx] == w[w_idx]:\n\n            w_idx += 1\n\n            if w_idx == len(w):\n\n                ret.append(start)\n\n                start = start + w_idx - nx[w_idx]\n\n                w_idx = nx[w_idx]\n\n        else:\n\n            if w_idx == 0:\n\n                start += 1\n\n            else:\n\n                start = start + w_idx - nx[w_idx]\n\n                w_idx = nx[w_idx]\n\n    return ret\n\nT = eval(input())\n\nP = eval(input())\n\nans = kmpSearch(T, P)\n\nif ans:\n\n    print((\"\\n\".join(map(str, ans))))\t\n\n\n", "score": 0.0, "codebleu": 0.23122165856007953, "crystalbleu": 0.014165459222907644, "codebertscore": 0.67, "codescore": 0.5393768548965454, "surfaceSim": 0.4454291452021304, "abs_surfaceSim_minus_score": 0.4454291452021304}
{"golden_code": "def main():\n\n  n = int(eval(input()))\n\n  a = [0]\n\n  b = [0]\n\n  c = [0]\n\n\n\n  for i in range(n):\n\n      aa,bb,cc = list(map(int,input().split()))\n\n      a.append(max(b[i] + aa, c[i] + aa))\n\n      b.append(max(a[i] + bb, c[i] + bb))\n\n      c.append(max(a[i] + cc, b[i] + cc))\n\n\n\n  print((max(a[-1], b[-1], c[-1])))\n\n\n\nmain()", "generated_code": "p=m=0\n\nfor c in eval(input()):p=-~p*(c in'ATGC');m=max(m,p)\n\nprint(m)", "score": 0.0, "codebleu": 0.05858337460176232, "crystalbleu": 0.00957961641761267, "codebertscore": 0.68, "codescore": 0.16872090101242065, "surfaceSim": 0.44781931464174457, "abs_surfaceSim_minus_score": 0.44781931464174457}
{"golden_code": "import itertools\n\nimport fractions\n\ndef main():\n\n  s = eval(input())\n\n  t = eval(input())\n\n  cnt = 0\n\n  for i in range(3):\n\n    if s[i] == t[i]:\n\n      cnt += 1\n\n  print(cnt)\n\nif __name__ == '__main__':\n\n  main()", "generated_code": "a, b, c, x, y = list(map(int, input().split()))\n\nans = float('inf')\n\n\n\nfor i in range(100005):\n\n    tmp = i * 2 * c\n\n    tmp += max(0, x-i) * a\n\n    tmp += max(0, y-i) * b\n\n    ans = min(ans, tmp)\n\n\n\nprint(ans)", "score": 0.0, "codebleu": 0.17374729616206594, "crystalbleu": 0.0, "codebertscore": 0.74, "codescore": 0.8692480325698853, "surfaceSim": 0.4157547169811321, "abs_surfaceSim_minus_score": 0.4157547169811321}
{"golden_code": "A, B = list(map(int, input().split()))\n\nnumbers = list(range(A, B+1))\n\ncount = 0\n\nfor i in numbers:\n\n    m = str(i)\n\n    rm = ''.join(list(reversed(m)))\n\n    if m == rm:\n\n        count += 1\n\nprint(count)", "generated_code": "N=int(eval(input()))\n\nroot=int((N**0.5)//1)\n\na=N\n\nb=N\n\nfor i in range(root, 0, -1):\n\n    if N%i==0:\n\n        a=i\n\n        b=N//i\n\n        break\n\nprint((a-1+b-1))\n", "score": 0.0, "codebleu": 0.09580245514017798, "crystalbleu": 0.0, "codebertscore": 0.77, "codescore": 0.2936008870601654, "surfaceSim": 0.5133415435139573, "abs_surfaceSim_minus_score": 0.5133415435139573}
{"golden_code": "import sys,queue,math,numpy as np,scipy as sc\n\nsys.setrecursionlimit(10**7)\n\ninput = sys.stdin.readline\n\nINF = 10**18\n\nMOD = 10**9 + 7\n\nLI = lambda : [int(x) for x in input().split()]\n\nN,M = LI()\n\nE = [LI() for _ in range(M)]\n\nans = 0\n\nfor i in range(M):\n\n    g = np.array([i for i in range(N+1)])\n\n\n\n    def root(x):\n\n        if g[x] != x:\n\n            g[x] = root(g[x])\n\n        return g[x]\n\n\n\n    for j in range(M):\n\n        if i != j: g[root(E[j][0])] = root(E[j][1])\n\n\n\n    ans += (root(E[i][0]) != root(E[i][1]))\n\n\n\nprint (ans)", "generated_code": "import sys\n\ninput = sys.stdin.readline\n\n\n\nmod = 10**9+7\n\nn, m = list(map(int, input().split()))\n\nl = [0]*n\n\nfor _ in range(m):\n\n  l[int(eval(input()))-1] = 1\n\n\n\nt, s = 1, 0\n\n\n\nfor i in range(n):\n\n  if l[i]:\n\n    t, s = 0, t\n\n  else:\n\n    t, s = (s+t)%mod, t\n\n\n\nprint(t)", "score": 0.0, "codebleu": 0.18494048809028, "crystalbleu": 0.10518649139682248, "codebertscore": 0.78, "codescore": 0.12628602981567383, "surfaceSim": 0.5421001762465177, "abs_surfaceSim_minus_score": 0.5421001762465177}
{"golden_code": "import sys\n\nstdin = sys.stdin \n\nni = lambda: int(ns())\n\nna = lambda: list(map(int, stdin.readline().split()))\n\nns = lambda: stdin.readline()\n\n\n\ndef Solve():\n\n    N,K=na()\n\n    S=[int(d) for d in eval(input())]\n\n    l=[]\n\n    N=len(S)\n\n    if(S[0]==0):\n\n        l.append(0)\n\n    b=S[0]\n\n    ct=1\n\n    for i in S[1:]:\n\n        if(b!=i):\n\n            l.append(ct)\n\n            ct=1\n\n            b=i\n\n        else:\n\n            ct+=1\n\n    l.append(ct)\n\n    len_l=len(l)\n\n    if(len_l//2 <= K):\n\n        return sum(l)\n\n    ans = res = sum(l[:2*K+1])\n\n    \n\n    if(len_l%2==0):\n\n        l.append(0)\n\n        len_l+=1\n\n    g = K * 2 + 1\n\n    for i in range(K*2+1,len_l-1,2):\n\n        ans -= l[i-g] + l[i-g+1]\n\n        ans += l[i] + l[1+i]\n\n        if(res<ans):\n\n            res=ans\n\n    #print(S)\n\n    #print(l)\n\n    #print(len_l)\n\n    return res\n\n\n\nprint((Solve()))", "generated_code": "N = int(eval(input()))\n\nA = list(map(int,input().split()))\n\nB = N*[0]\n\n\n\nfor n in range(N):\n\n  B[A[n]-1]=n+1\n\n\n\nprint((*B))", "score": 0.0, "codebleu": 0.07362221259786444, "crystalbleu": 0.008627700418534888, "codebertscore": 0.71, "codescore": 0.19210222363471985, "surfaceSim": 0.4724538275178555, "abs_surfaceSim_minus_score": 0.4724538275178555}
{"golden_code": "N,K = list(map(int, input().split(' ')))\n\na=list(range(1,N+1))\n\nfor i in range(K):\n\n  count=int(eval(input()))\n\n  b=input().split(' ')\n\n  for j in range(count):\n\n    if int(b[j]) in a:\n\n      a.remove(int(b[j]))\n\nprint((len(a)))", "generated_code": "def main(h):\n\n  count = 1\n\n  n = 0\n\n  for i in range (k):\n\n    n = (n * 10 + 7) % k  \n\n    if n == 0: \n\n      print(count)\n\n      return 0\n\n    count += 1\n\n  print((-1))\n\n  \n\nif __name__ == '__main__':\n\n  k = int(eval(input()))\n\n  main(k)", "score": 0.0, "codebleu": 0.1673765102787279, "crystalbleu": 0.0, "codebertscore": 0.77, "codescore": 0.06059391424059868, "surfaceSim": 0.4317226890756303, "abs_surfaceSim_minus_score": 0.4317226890756303}
{"golden_code": "import sys\n\n\n\ninput = sys.stdin.readline\n\n\n\n\n\ndef main():\n\n    X = int(eval(input()))\n\n\n\n    for A in range(-200, 201):\n\n        for B in range(-200, 201):\n\n            if A ** 5 - B ** 5 == X:\n\n                print((A, B))\n\n                exit()\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n", "generated_code": "import math\n\nN = int(eval(input()))\n\nx = math.ceil(N/1000) * 1000\n\nprint((x-N))", "score": 0.0, "codebleu": 0.16961101781895505, "crystalbleu": 0.0, "codebertscore": 0.72, "codescore": 0.03575730323791504, "surfaceSim": 0.5347440273037543, "abs_surfaceSim_minus_score": 0.5347440273037543}
{"golden_code": "from numpy import*\n\na,b=median(t:=loadtxt(open(0),skiprows=1),0)\n\nprint((int((a-b)*~(~len(t)%2))+1))", "generated_code": "from collections import deque\n\n\n\nN, K = list(map(int, input().split()))\n\np = list(map(int, input().split()))\n\n\n\nmx = 0\n\ns = 0\n\nq = deque()\n\n\n\nfor i in range(N):\n\n    p[i] += 1\n\n\n\nfor i in range(N):\n\n    s += p[i]\n\n    q.append(p[i])\n\n    if len(q) > K:\n\n        s -= q.popleft()\n\n    if len(q) == K:\n\n        mx = max(mx, s)\n\n\n\nprint((mx / 2))\n\n\n", "score": 0.0, "codebleu": 0.2042761692943023, "crystalbleu": 0.0, "codebertscore": 0.65, "codescore": 0.991563081741333, "surfaceSim": 0.4544315992292871, "abs_surfaceSim_minus_score": 0.4544315992292871}
{"golden_code": "for i in range(0, int(eval(input()))):\n\n    sidelen = [int(j) for j in input().split(\" \")]\n\n    sidelen.sort(reverse=True)\n\n    if(sidelen[0]**2 == sidelen[1]**2 + sidelen[2]**2):\n\n        print(\"YES\")\n\n    else:\n\n        print(\"NO\")", "generated_code": "#!/usr/bin/env python3\n\nimport sys\n\n\n\n\n\ndef solve(A: int, B: int, C: int, X: int, Y: int):\n\n    c = 0\n\n    if (A + B < 2 * C):\n\n        c += min(X, Y) * (A + B)\n\n    else:\n\n        c += min(X, Y) * 2 * C\n\n    if X > Y:\n\n        c += (X - Y) * min(A, 2 * C)\n\n    else:\n\n        c += (Y - X) * min(B, 2 * C)\n\n    print(c)\n\n    return\n\n\n\n\n\n# Generated by 1.1.5 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\n\ndef main():\n\n    def iterate_tokens():\n\n        for line in sys.stdin:\n\n            for word in line.split():\n\n                yield word\n\n    tokens = iterate_tokens()\n\n    A = int(next(tokens))  # type: int\n\n    B = int(next(tokens))  # type: int\n\n    C = int(next(tokens))  # type: int\n\n    X = int(next(tokens))  # type: int\n\n    Y = int(next(tokens))  # type: int\n\n    solve(A, B, C, X, Y)\n\n\n\nif __name__ == '__main__':\n\n    main()\n", "score": 0.0, "codebleu": 0.18667290755639712, "crystalbleu": 0.014126088629337287, "codebertscore": 0.63, "codescore": 0.2950306534767151, "surfaceSim": 0.5391749589411651, "abs_surfaceSim_minus_score": 0.5391749589411651}
{"golden_code": "N = int(eval(input()))\n\na = 1\n\nfor n in range(2,N+1):\n\n    a = a*n % (10**9+7)\n\nprint(a)", "generated_code": "from functools import reduce\nn = int(input())\n\nCard = [[] for _ in [0]*n]\n\nCost = {}\n\nfor i in range(n):\n\n  Card[i] = list(map(int, input().split()))\n\n  Cost[(i, i)] = 0\n\nfor i in range(1, n):\n\n  for j in range(0, n-i):\n\n    a = j+i\n\n    Cost[(j, a)] = min([reduce(lambda a,b: a*b, [Card[j][0],Card[k][1],Card[k+1][0],Card[a][1]]) + Cost[(j, k)] + Cost[(k+1, a)] for k in range(j, j+i)])\n\nprint(Cost[0, n-1])", "score": 0.0, "codebleu": 0.17210681006906814, "crystalbleu": 0.04080477541430765, "codebertscore": 0.74, "codescore": 0.13216306269168854, "surfaceSim": 0.3711484593837535, "abs_surfaceSim_minus_score": 0.3711484593837535}
{"golden_code": "a, b, c, x, y = list(map(int, input().split()))\n\n# print(a, b, c, x, y)\n\n\n\nans = 10000 * (10 **5) + 7\n\nc_max = 0\n\nif x > y:\n\n  c_max = x * 2\n\nelse:\n\n  c_max = y * 2\n\n\n\nfor cc in range(c_max+1):\n\n  ac = x - (cc // 2)\n\n  bc = y - (cc // 2)\n\n  \n\n  if ac < 0:\n\n    ac = 0\n\n  if bc < 0:\n\n    bc = 0\n\n  price = ac * a + bc * b + cc * c\n\n  # print('price: {}, ac: {}, bc: {}, cc: {}'.format(price, ac, bc, cc))\n\n  ans = min(ans, price)\n\n\n\nprint(ans)", "generated_code": "#ABC 130 B\n\nN,X=list(map(int,input().split()))\n\nL= [int(j) for j in input().split()]\n\ncnt=0\n\nimport numpy as np\n\njump = list(np.cumsum(L))\n\nfor j in jump:\n\n    if j <= X:\n\n        cnt+=1\n\n    else:\n\n        break\n\nprint((cnt+1))", "score": 0.0, "codebleu": 0.1345534453767323, "crystalbleu": 0.07994099495220475, "codebertscore": 0.72, "codescore": 0.8438427448272705, "surfaceSim": 0.5845992243051066, "abs_surfaceSim_minus_score": 0.5845992243051066}
{"golden_code": "from numpy import*\n\nN,*A=open(0)\n\nN,A,S,a=int(N),loadtxt(A,int),1,0\n\nwhile S:B=A//N;S=sum(B);a+=S;A+=S-B*-~N\n\nprint(a)", "generated_code": "N = int(eval(input()))\n\nA = list(map(int,input().split()))\n\nB = N*[0]\n\n\n\nfor n in range(N):\n\n  B[A[n]-1]=n+1\n\n\n\nprint((*B))", "score": 0.0, "codebleu": 0.12363883847549909, "crystalbleu": 0.0, "codebertscore": 0.78, "codescore": 0.20936332643032074, "surfaceSim": 0.37082204155374887, "abs_surfaceSim_minus_score": 0.37082204155374887}
{"golden_code": "#!/usr/bin/env python3\n\ndef main():\n\n    import numpy as np\n\n\n\n    np.set_printoptions(linewidth=200)\n\n\n\n    N, W = list(map(int, input().split()))\n\n    lst = [list(map(int, input().split())) for _ in range(N)]\n\n    v_max = 10 ** 3 * 100 * 10\n\n    w_max = 10 ** 9 * v_max\n\n\n\n    # i以上の価値を持つときの最小重量\n\n    dp = np.full(v_max, w_max, dtype=np.int64)\n\n    # initialize\n\n    dp[0] = 0\n\n\n\n    for n in range(N):\n\n        w, v = lst[n]\n\n        dp[v:] = np.minimum(dp[v:], dp[:-v] + w)\n\n\n\n    ans = 0\n\n    for i, w in enumerate(dp):\n\n        if w <= W:\n\n            ans = i\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n", "generated_code": "from math import gcd\n\nn,m=list(map(int,input().split()))\n\na=list(map(int,input().split()))\n\na=list(set(a))\n\na=list([x//2 for x in a])\n\n\n\ndef lcm(q):\n\n  x = q[0]\n\n  for i in range(1, len(q)):\n\n    x = (x * q[i]) // gcd(x, q[i])\n\n  return x\n\n\n\nlcma=lcm(a)\n\nfor i in range(len(a)):\n\n  if (lcma//a[i])%2==0:\n\n    print((0))\n\n    exit()\n\ntemp=m//lcma\n\nprint((temp//2 if temp%2==0 else temp//2+1))", "score": 0.0, "codebleu": 0.17581646127494646, "crystalbleu": 0.12385855202978163, "codebertscore": 0.7, "codescore": 0.5227888822555542, "surfaceSim": 0.6086693722476471, "abs_surfaceSim_minus_score": 0.6086693722476471}
{"golden_code": "N = int(eval(input()))\n\np = 1\n\nfor i in range(N):\n\n    p *= (i + 1)\n\n    p %= (1e9 + 7)\n\nprint((int(p)))", "generated_code": "N, K = list(map(int, input().split()))\n\n\n\nA = [0] * N\n\n\n\nfor _ in range(K):\n\n    eval(input())\n\n    for i in map(int, input().split()):\n\n        A[i - 1] += 1\n\n\n\nprint((A.count(0)))\n", "score": 0.0, "codebleu": 0.19252303188404563, "crystalbleu": 0.0, "codebertscore": 0.81, "codescore": 0.09919290244579315, "surfaceSim": 0.6024725274725276, "abs_surfaceSim_minus_score": 0.6024725274725276}
{"golden_code": "s=eval(input())\n\nt=eval(input())\n\ns*=2\n\nnext=[[-1]*26 for _ in range(len(s))]\n\nalph=[[]for _ in range(26)]\n\nfor i in range(len(s)):\n\n\talph[ord(s[i])-ord(\"a\")].append(i)\n\nfrom bisect import bisect_right\n\nfor i in range(len(s)//2):\n\n\tfor j in range(26):\n\n\t\tif len(alph[j])>bisect_right(alph[j],i):\n\n\t\t\tnext[i][j]=alph[j][bisect_right(alph[j],i)]\n\nans=1\n\nnow=len(s)//2-1\n\nfor x in t:\n\n\tr=ord(x)-ord(\"a\")\n\n\tnow=next[now][r]\n\n\tif now==-1:\n\n\t\tprint((-1))\n\n\t\texit()\n\n\tif now>=len(s)//2:\n\n\t\tans+=len(s)//2\n\n\t\tnow-=len(s)//2\n\nprint((ans+now-len(s)//2))", "generated_code": "n = int(eval(input()))\n\ndef make_divisors(n):\n\n    divisors = []\n\n    for i in range(1, int(n**0.5)+1):\n\n        if n % i == 0:\n\n            divisors.append(i)\n\n            if i != n // i:\n\n                divisors.append(n//i)\n\n\n\n    #divisors.sort(reverse=True)\n\n    return divisors\n\n\n\nl = make_divisors(n)\n\nmin_ = float('inf')\n\nfor i in range(len(l)):\n\n    min_ = min(min_, l[i]-1+n//l[i]-1)\n\nprint(min_)\n", "score": 0.0, "codebleu": 0.15742805216604872, "crystalbleu": 0.058154417002287316, "codebertscore": 0.74, "codescore": 0.1557306945323944, "surfaceSim": 0.446145040067692, "abs_surfaceSim_minus_score": 0.446145040067692}
{"golden_code": "import math\n\n\n\nN = int(eval(input()))\n\n\n\nnum = math.factorial(N)\n\n\n\nk, r = divmod(num, 10**9 + 7)\n\nprint(r)", "generated_code": "N = int(eval(input()))\n\nans = N - 1\n\nfor i in range(2, int((N ** 0.5) + 1)):\n\n    if N % i == 0:\n\n        j = N // i\n\n        m = i + j - 2\n\n        ans = min(ans, m)\n\nprint(ans)\n", "score": 0.0, "codebleu": 0.24224236701329754, "crystalbleu": 0.0, "codebertscore": 0.75, "codescore": 0.661586344242096, "surfaceSim": 0.526536312849162, "abs_surfaceSim_minus_score": 0.526536312849162}
{"golden_code": "import re;print((max(list(map(len,re.split('[^ACGT]',eval(input())))))))", "generated_code": "def main():\n\n    from collections import Counter\n\n    from operator import itemgetter\n\n\n\n    import sys\n\n    input = sys.stdin.readline\n\n\n\n    N, M = list(map(int, input().split()))\n\n    a = list(map(int, input().split()))\n\n\n\n    ctr = Counter(a)\n\n    for _ in range(M):\n\n        b, c = list(map(int, input().split()))\n\n        ctr[c] += b\n\n\n\n    ans = 0\n\n    rest = N\n\n    for integer, count in sorted(list(ctr.items()), key=itemgetter(0), reverse=True):\n\n        take = min(rest, count)\n\n        ans += take * integer\n\n        rest -= take\n\n        if not rest:\n\n            break\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n\n\n\n# import sys\n\n# input = sys.stdin.readline\n\n# \n\n# sys.setrecursionlimit(10 ** 7)\n\n# \n\n# (int(x)-1 for x in input().split())\n\n# rstrip()\n", "score": 0.0, "codebleu": 0.36438018732569977, "crystalbleu": 0.0063223527523178094, "codebertscore": 0.61, "codescore": 0.045013777911663055, "surfaceSim": 0.39936224489795913, "abs_surfaceSim_minus_score": 0.39936224489795913}
{"golden_code": "prim=[True]*1000000\n\nprim[0],prim[1]=False,False\n\nfor i in range(2,1000):\n\n    if prim[i]:\n\n        for j in range(i*2,1000000,i):\n\n            prim[j]=False\n\nprime=[i for i,j in enumerate(prim) if j==True]\n\n\n\nwhile True:\n\n    n=int(eval(input()))\n\n    if n==0:\n\n        break\n\n    print((sum(prime[:n])))", "generated_code": "n = int(eval(input()))\n\nmod = 10**9 + 7\n\n\n\npow = 1\n\nfor i in range(n):\n\n    pow = pow*(i+1)%mod\n\n\n\nprint(pow)\n", "score": 0.0, "codebleu": 0.1194716713530293, "crystalbleu": 0.0, "codebertscore": 0.75, "codescore": 0.060938071459531784, "surfaceSim": 0.3984237074401009, "abs_surfaceSim_minus_score": 0.3984237074401009}
{"golden_code": "inf = (5000 * 10 ** 5) * 3\n\n\n\na, b, c, x, y = list(map(int, input().split()))\n\n\n\nret = inf\n\nfor cnt_ab in range(max(x, y) * 2 + 1):\n\n    d = cnt_ab // 2\n\n\n\n    cnt_a = max(0, x - d)\n\n    cnt_b = max(0, y - d)\n\n\n\n    t = cnt_ab * c + cnt_a * a + cnt_b * b\n\n    ret = min(ret, t)\n\nprint(ret)\n", "generated_code": "def abc133_c():\n\n    L, R = list(map(int, input().split()))\n\n    # 区間の幅が673あれば、673の倍数と3の倍数が含まれて、2019の倍数が作れる\n\n    if R - L > 673: return 0\n\n    # それ以外は試す\n\n    ans = 2019\n\n    for i in range(L, R+1):\n\n        for j in range(L, i):\n\n            m = i * j % 2019\n\n            ans = min(m, ans)\n\n            if ans == 1: return 1\n\n    return ans\n\n\n\nprint((abc133_c()))", "score": 0.0, "codebleu": 0.1598983266045321, "crystalbleu": 0.13511458728369782, "codebertscore": 0.69, "codescore": 0.3209421634674072, "surfaceSim": 0.6057851239669421, "abs_surfaceSim_minus_score": 0.6057851239669421}
{"golden_code": "x = int(eval(input()))\n\n\n\nfor a in range(-118, 120):\n\n    for b in range(-119, 119):\n\n        if a**5-b**5 == x:\n\n            print((a, b))\n\n            exit()", "generated_code": "import sys\n\nfrom collections import *\n\nimport heapq\n\nimport math\n\nimport bisect\n\nfrom itertools import permutations,accumulate,combinations,product\n\nfrom fractions import gcd\n\ndef input():\n\n    return sys.stdin.readline()[:-1]\n\ndef ruiseki(lst):\n\n    return [0]+list(accumulate(lst))\n\nmod=pow(10,9)+7\n\nal=[chr(ord('a') + i) for i in range(26)]\n\n\n\ndef factorization(n):\n\n    arr = []\n\n    temp = n\n\n    for i in range(2, int(-(-n**0.5//1))+1):\n\n        if temp%i==0:\n\n            cnt=0\n\n            while temp%i==0:\n\n                cnt+=1\n\n                temp //= i\n\n            arr.append([i, cnt])\n\n    if temp!=1:\n\n        arr.append([temp, 1])\n\n    if arr==[]:\n\n        arr.append([n, 1])\n\n    return arr\n\n\n\nn=int(eval(input()))\n\nif n==1:\n\n    print((1))\n\n    exit()\n\nd=defaultdict(int)\n\nfor i in range(2,n+1):\n\n    tmp=factorization(i)\n\n    for j in tmp:\n\n        yaku,ko=j\n\n        d[yaku]+=ko\n\n# print(d)\n\nans=1\n\nfor i in list(d.values()):\n\n    ans*=i+1\n\n    ans%=mod\n\nprint(ans)", "score": 0.0, "codebleu": 0.22782265028700063, "crystalbleu": 0.04174615428833822, "codebertscore": 0.65, "codescore": 0.8820323348045349, "surfaceSim": 0.3942405112617879, "abs_surfaceSim_minus_score": 0.3942405112617879}
{"golden_code": "def kmpTable(w):\n\n    lw = len(w)\n\n    nx = [-1] * (lw + 1)\n\n    j = -1\n\n    for i in range(lw):\n\n        while j >= 0 and w[i] != w[j]:\n\n            j = nx[j]\n\n        j += 1\n\n        nx[i + 1] = j\n\n    return nx\n\ndef kmpSearch(s, w):\n\n    ls = len(s)\n\n    start = 0\n\n    w_idx = 0\n\n    ret = []\n\n    nx = kmpTable(w)\n\n    while start + w_idx < ls:\n\n        if s[start + w_idx] == w[w_idx]:\n\n            w_idx += 1\n\n            if w_idx == len(w):\n\n                ret.append(start)\n\n                start = start + w_idx - nx[w_idx]\n\n                w_idx = nx[w_idx]\n\n        else:\n\n            if w_idx == 0:\n\n                start += 1\n\n            else:\n\n                start = start + w_idx - nx[w_idx]\n\n                w_idx = nx[w_idx]\n\n    return ret\n\nT = eval(input())\n\nP = eval(input())\n\nans = kmpSearch(T, P)\n\nif ans:\n\n    print((\"\\n\".join(map(str, ans))))\t\n\n\n", "generated_code": "def main(h):\n\n  count = 1\n\n  n = 0\n\n  for i in range (k):\n\n    n = (n * 10 + 7) % k  \n\n    if n == 0: \n\n      print(count)\n\n      return 0\n\n    count += 1\n\n  print((-1))\n\n  \n\nif __name__ == '__main__':\n\n  k = int(eval(input()))\n\n  main(k)", "score": 0.0, "codebleu": 0.1117766182848093, "crystalbleu": 0.020026043181183933, "codebertscore": 0.7, "codescore": 0.16256920993328094, "surfaceSim": 0.5941243774397631, "abs_surfaceSim_minus_score": 0.5941243774397631}
{"golden_code": "import sys\n\nfrom operator import itemgetter\n\n\n\nn, m = list(map(int, input().split()))\n\na = list(map(int, sys.stdin.readline().split()))\n\nbc = [ tuple(map(int, x.split())) for x in sys.stdin.readlines()]\n\nbc.sort(key = itemgetter(1), reverse=True)\n\nbc.append((n,0))\n\ndiff = []\n\nfor b, c in bc:\n\n    diff += [c] * b\n\n    if len(diff) > n:\n\n        break\n\n\n\na += diff\n\na.sort()\n\nprint((sum(a[-n:])))\n", "generated_code": "s = eval(input())\n\nt = eval(input())\n\nans = 0\n\nfor i in range(3):\n\n    if s[i] == t[i]:\n\n        ans += 1\n\nprint(ans)\n", "score": 0.0, "codebleu": 0.08898544752366033, "crystalbleu": 0.001569492182235994, "codebertscore": 0.68, "codescore": 0.12468291819095612, "surfaceSim": 0.38877518891687657, "abs_surfaceSim_minus_score": 0.38877518891687657}
{"golden_code": "import sys\n\nreadline = sys.stdin.readline\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\n#mod = 998244353\n\nINF = 10**18\n\neps = 10**-7\n\n\n\nm,n,k = list(map(int,readline().split()))\n\n\n\ndef comb(n, r, mod):\n\n    r = min(r, n-r)\n\n    mol = 1\n\n    deno = 1\n\n    for i in range(1, r+1):\n\n        mol = mol * (n-r+i) % mod\n\n        deno = deno * i % mod\n\n    ret = mol * pow(deno, mod-2, mod) % mod\n\n    return ret\n\n\n\ndef f1(x,y,a,b):\n\n    return (a+b-x-y)*(a-x+1)*(b-y+1)//2\n\n\n\ndef f2(x,a):\n\n    return (a-x)*(a-x+1)//2\n\n\n\nans = 0\n\n\n\nfor x in range(1,n+1):\n\n    for y in range(1,m+1):\n\n        ans += f1(x,y,n,m)+f1(1,1,x,y)+f1(1,y,x,m)+f1(x,1,n,y)\n\n        ans -= f2(x,n) + f2(1,x) + f2(1,y) + f2(y,m)\n\n        ans %= mod\n\n\n\nans = (ans * comb(m*n-2,k-2,mod))%mod\n\nans = ans*pow(2,mod-2,mod)%mod\n\n\n\nprint(ans)\n", "generated_code": "#!/usr/bin/env python3\n\ndef main():\n\n    import numpy as np\n\n\n\n    N, W = list(map(int, input().split()))\n\n    lst = [list(map(int, input().split())) for _ in range(N)]\n\n    v_max = 10 ** 3 * 100 * 10\n\n    w_max = 10 ** 9 * v_max\n\n\n\n    # i以上の価値を持つときの最小重量\n\n    dp = np.full(v_max, w_max, dtype=np.int64)\n\n    # initialize\n\n    dp[0] = 0\n\n\n\n    for w, v in lst:\n\n        dp[v:] = np.minimum(dp[v:], dp[:-v] + w)\n\n\n\n    print((np.asarray(dp <= W).nonzero()[0].max()))\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n", "score": 0.0, "codebleu": 0.07703012516658335, "crystalbleu": 0.03395367536606569, "codebertscore": 0.67, "codescore": 0.018290365114808083, "surfaceSim": 0.48640223764912044, "abs_surfaceSim_minus_score": 0.48640223764912044}
{"golden_code": "import sys\n\nsys.setrecursionlimit(2147483647)\n\nINF=float(\"inf\")\n\nMOD=10**9+7\n\ninput=lambda :sys.stdin.readline().rstrip()\n\ndef resolve():\n\n    n,T=list(map(int,input().split()))\n\n    AB=[tuple(map(int,input().split())) for _ in range(n)]\n\n    ans=-INF\n\n\n\n    # 何も考えずやる\n\n    dp=[0]*T\n\n    for i in range(n):\n\n        a,b=AB[i]\n\n        ndp=dp[:]\n\n        for t in range(T):\n\n            if(t+a<T):\n\n                ndp[t+a]=max(ndp[t+a],dp[t]+b)\n\n            else:\n\n                ans=max(ans,dp[t]+b)\n\n        dp=ndp\n\n    ans=max(ans,max(dp))\n\n\n\n    # 時間が最もかかるもののうち、価値が最大のものを最後にする\n\n    AB.sort()\n\n    la,lb=AB[-1]\n\n\n\n    dp=[0]*T\n\n    for i in range(n-1):\n\n        a,b=AB[i]\n\n        ndp=dp[:]\n\n        for t in range(T):\n\n            if(t+a<T):\n\n                ndp[t+a]=max(ndp[t+a],dp[t]+b)\n\n            else:\n\n                ans=max(ans,dp[t]+b)\n\n        dp=ndp\n\n    ans=max(ans,max(dp)+lb)\n\n\n\n    # 価値が最大のもののうち、時間が最もかかるものを最後にする\n\n    AB.sort(lambda x:(x[1],x[0]))\n\n    la,lb=AB[-1]\n\n\n\n    dp=[0]*T\n\n    for i in range(n-1):\n\n        a,b=AB[i]\n\n        ndp=dp[:]\n\n        for t in range(T):\n\n            if(t+a<T):\n\n                ndp[t+a]=max(ndp[t+a],dp[t]+b)\n\n            else:\n\n                ans=max(ans,dp[t]+b)\n\n        dp=ndp\n\n    ans=max(ans,max(dp)+lb)\n\n\n\n    print(ans)\n\nresolve()", "generated_code": "#ABC 130 B\n\nN,X=list(map(int,input().split()))\n\nL= [int(j) for j in input().split()]\n\ncnt=0\n\nimport numpy as np\n\njump = list(np.cumsum(L))\n\nfor j in jump:\n\n    if j <= X:\n\n        cnt+=1\n\n    else:\n\n        break\n\nprint((cnt+1))", "score": 0.0, "codebleu": 0.07142037083866318, "crystalbleu": 0.0032429792623976353, "codebertscore": 0.64, "codescore": 0.899901270866394, "surfaceSim": 0.5050291046053759, "abs_surfaceSim_minus_score": 0.5050291046053759}
{"golden_code": "def main():\n\n    N, M = (int(i) for i in input().split())\n\n\n\n    def trial_division(n):\n\n        divs = []\n\n        for i in range(1, int(n**0.5)+1):\n\n            if n % i == 0:\n\n                divs.append(i)\n\n                if i != n//i:\n\n                    divs.append(n//i)\n\n        divs.sort(reverse=True)\n\n        return divs\n\n    divs = trial_division(M)\n\n    for d in divs:\n\n        if d*N <= M:\n\n            return print(d)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n", "generated_code": "N = int(eval(input()))\n\nX = sorted(list(map(int, input().split())))\n\nif N == 1:\n\n    print((0))\n\nelse:\n\n    r = X[-1] - X[0]\n\n    ans = float(\"inf\")\n\n    for i in range(r + 1):\n\n        R = X[0] + i\n\n        hp = 0\n\n        for j in range(N):\n\n            hp = hp + (R - X[j]) ** 2\n\n\n\n        ans = min(hp, ans)\n\n\n\n    print(ans)\n", "score": 0.0, "codebleu": 0.14507667803621788, "crystalbleu": 0.06897661737913571, "codebertscore": 0.74, "codescore": 0.022873321548104286, "surfaceSim": 0.49683865195347443, "abs_surfaceSim_minus_score": 0.49683865195347443}
{"golden_code": "a,b = list(map(int,input().split()))\n\ncount = 0\n\nfor i in range(a,b+1):\n\n    s = str(i)\n\n    l = len(s)\n\n    if all(s[j] == s[l-j-1] for j in range(l)):\n\n            count += 1\n\nprint(count)", "generated_code": "l,r=list(map(int,input().split()));s=list(range(l,r+1))[:673];print((min(i*j%2019for i in s for j in s if i<j)))", "score": 0.0, "codebleu": 0.23091044125374388, "crystalbleu": 0.0, "codebertscore": 0.82, "codescore": 0.29798227548599243, "surfaceSim": 0.5892712550607287, "abs_surfaceSim_minus_score": 0.5892712550607287}
{"golden_code": "import numpy as np\n\n\n\nN, K = list(map(int, input().split()))\n\np = np.array(list(map(int, input().split())))\n\n\n\ns = np.cumsum(p)\n\n# print(p, s)\n\n\n\nm = []\n\n\n\n\n\ndef partsum(s, x):\n\n    global K\n\n    if x == K - 1:\n\n        return s[x]\n\n    return s[x] - s[x - K]\n\n\n\n\n\nfor i in range(K - 1, N):\n\n    m.append(partsum(s, i))\n\n# print(m)\n\n\n\nidx = m.index(max(m))\n\n# print(idx)\n\n\n\nans = 0\n\nfor j in range(idx, idx + K):\n\n    ans += (p[j] + 1) / 2\n\nprint(ans)\n", "generated_code": "# AC: msec(Python3)\n\nfrom math import factorial\n\nimport sys\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\n\n\nMOD = 10**9+7\n\n\n\ndef cmb(n, r):\n\n    if n < 0 or r < 0:\n\n        return 0\n\n    if r > n:\n\n        return 0\n\n\n\n    r = min(n-r, r)\n\n    res = 1\n\n    for i in range(r):\n\n        res *= n - i\n\n\n\n    return res // factorial(r)\n\n\n\n\n\ndef prime_factorization(n):\n\n    d = []\n\n    i, e = 2, 0  # factor, exponent\n\n    while i * i <= n:\n\n        while n % i == 0:\n\n            n //= i\n\n            e += 1\n\n        if e > 0:\n\n            d.append((i, e))\n\n        i += 1\n\n        e = 0\n\n    if n > 1:\n\n        d.append((n, 1))\n\n    return d\n\n\n\n\n\ndef main():\n\n    N,M = list(map(int, readline().split()))\n\n\n\n    d = prime_factorization(M)\n\n\n\n    ans = 1\n\n    for i, e in d:\n\n        ans *= cmb(N-1+e, e)\n\n        ans %= MOD\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n", "score": 0.0, "codebleu": 0.2528308174657688, "crystalbleu": 0.06753546655872597, "codebertscore": 0.74, "codescore": 0.020879369229078293, "surfaceSim": 0.5860135135135135, "abs_surfaceSim_minus_score": 0.5860135135135135}
{"golden_code": "import numpy as np\n\nN,x = list(map(int,input().split()))\n\nA = np.array(input().split(), dtype = np.int64)\n\nA.sort()\n\nnp.cumsum(A, out = A)\n\nanswer = (A <= x).sum()\n\n\n\nif answer == N and A[-1] != x:\n\n  answer -= 1\n\nprint(answer)\n", "generated_code": "import math\n\nN=int(eval(input()))\n\nprint((2**int(math.log2(N))))", "score": 0.0, "codebleu": 0.09657390812596905, "crystalbleu": 0.0, "codebertscore": 0.73, "codescore": 0.0942688137292862, "surfaceSim": 0.37406015037593987, "abs_surfaceSim_minus_score": 0.37406015037593987}
{"golden_code": "N = int(eval(input()))\n\nif N < 2:\n\n  print(N)\n\nelif 2<=N<4:\n\n  print((2))\n\nelif 4<=N<8:\n\n  print((4))\n\nelif 8<=N<16:\n\n  print((8))\n\nelif 16<=N<32:\n\n  print((16))\n\nelif 32<=N<64:\n\n  print((32))\n\nelif 64<=N:\n\n  print((64))", "generated_code": "w = list(eval(input()))\n\ns = set(w)\n\nfor i in s:\n\n  if w.count(i)%2 != 0:\n\n    print(\"No\")\n\n    break\n\nelse:\n\n  print(\"Yes\")\n\n  ", "score": 0.0, "codebleu": 0.15245364921300955, "crystalbleu": 0.0, "codebertscore": 0.73, "codescore": 0.049918290227651596, "surfaceSim": 0.495959595959596, "abs_surfaceSim_minus_score": 0.495959595959596}
{"golden_code": "import sys\n\ns = input()\n\nts = ['']\n\nwhile True:\n\n  nts= []\n\n  for t in ts:\n\n    for w in ['dreamer', 'eraser', 'dream', 'erase']:\n\n      if s == t + w:\n\n        print('YES')\n\n        sys.exit()\n\n      if s.startswith(t + w):\n\n        nts.append(t + w)\n\n  if len(nts) == 0:\n\n    print('NO')\n\n    sys.exit()\n\n  ts = nts\n", "generated_code": "p=m=0\n\nfor c in eval(input()):p=-~p*(c in'ATGC');m=max(m,p)\n\nprint(m)", "score": 0.0, "codebleu": 0.10062972767824058, "crystalbleu": 0.0, "codebertscore": 0.65, "codescore": 0.12043848633766174, "surfaceSim": 0.43828616352201255, "abs_surfaceSim_minus_score": 0.43828616352201255}
{"golden_code": "l,r=list(map(int,input().split()))\n\ns=list(range(l,r+1))[:2019]\n\nprint((min(i*j%2019for i in s for j in s if i<j)))", "generated_code": "def kmpTable(w):\n\n    lw = len(w)\n\n    nx = [-1] * (lw + 1)\n\n    j = -1\n\n    for i in range(lw):\n\n        while j >= 0 and w[i] != w[j]:\n\n            j = nx[j]\n\n        j += 1\n\n        nx[i + 1] = j\n\n    return tuple(nx)\n\ndef kmpSearch(s, w):\n\n    ls = len(s)\n\n    start = 0\n\n    w_idx = 0\n\n    ret = []\n\n    nx = kmpTable(w)\n\n    while start + w_idx < ls:\n\n        if s[start + w_idx] == w[w_idx]:\n\n            w_idx += 1\n\n            if w_idx == len(w):\n\n                ret.append(start)\n\n                start = start + w_idx - nx[w_idx]\n\n                w_idx = nx[w_idx]\n\n        else:\n\n            if w_idx == 0:\n\n                start += 1\n\n            else:\n\n                start = start + w_idx - nx[w_idx]\n\n                w_idx = nx[w_idx]\n\n    return ret\n\nT = eval(input())\n\nP = eval(input())\n\nans = kmpSearch(T, P)\n\nif ans:\n\n    print((\"\\n\".join(map(str, ans))))\t\n\n\n", "score": 0.0, "codebleu": 0.16381505702187094, "crystalbleu": 0.016906999216267656, "codebertscore": 0.65, "codescore": 0.8911438584327698, "surfaceSim": 0.44311189437839776, "abs_surfaceSim_minus_score": 0.44311189437839776}
{"golden_code": "I=lambda:list(map(int,input().split()))\n\nn,m=I()\n\na=I()\n\na.sort(reverse=True)\n\nqq=[I() for i in range(m)]\n\nqq.sort(key=lambda x:x[1],reverse=True)\n\nans=0\n\nfor x,y in qq:\n\n    for j in range(x):\n\n        if not a:\n\n            break\n\n        aa=a.pop()\n\n        ans+=max(aa,y)\n\nans+=sum(a)\n\nprint(ans)\n\n        ", "generated_code": "from math import gcd, ceil\n\nn, m = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\na = [i // 2 for i in a]\n\nl = 1\n\nfor i in a:\n\n    l *= i // gcd(l, i)\n\nfor i in a:\n\n    if l // i % 2 == 0:\n\n        print((0))\n\n        exit()\n\nprint((ceil((m // l) / 2)))", "score": 0.0, "codebleu": 0.1729675133448778, "crystalbleu": 0.14404742107097554, "codebertscore": 0.77, "codescore": 0.46585676074028015, "surfaceSim": 0.4318785578747628, "abs_surfaceSim_minus_score": 0.4318785578747628}
{"golden_code": "n = int(eval(input()))\n\n\n\nfelicidade = []\n\n\n\nfor x in range(n):\n\n    felicidade.append(list(map(int,input().split())))\n\n\n\nDP = [0,0,0]\n\n\n\nif n == 1:\n\n    print((max(felicidade[0])))\n\n\n\nelse:\n\n\n\n    for x in range(3):\n\n        DP[x] = felicidade[0][x]\n\n\n\n\n\n    for dia in range(1,n):\n\n        m = [0] * 3\n\n        for x  in range(3):#As duas possíveis escolhas são x e y\n\n            for y  in range(3):\n\n                if x != y: #Se elas forem diferentes\n\n                    m[x] = max(m[x], DP[y] + felicidade[dia][x])\n\n        DP = m\n\n    \n\n    print((max(DP)))\n", "generated_code": "from itertools import groupby\n\n\n\nS=eval(input())\n\nanswer = sum([1 for _ in groupby(S)]) -1\n\n\n\nprint(answer)", "score": 0.0, "codebleu": 0.05756133267715298, "crystalbleu": 0.0014068582859580792, "codebertscore": 0.61, "codescore": 0.09876792877912521, "surfaceSim": 0.4383774250440917, "abs_surfaceSim_minus_score": 0.4383774250440917}
{"golden_code": "import sys\n\ninput = sys.stdin.readline\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\nK, S = list(map(int, input().split()))\n\n\n\nans = 0\n\nfor z in range(K+1):\n\n    for y in range(K+1):\n\n        x = S - (z + y)\n\n        if x >= 0 and x <= K:\n\n            ans += 1\n\nprint(ans)", "generated_code": "s = eval(input())\n\nt = eval(input())\n\nans = 0\n\nfor i in range(3):\n\n    if s[i] == t[i]:\n\n        ans += 1\n\nprint(ans)\n", "score": 0.0, "codebleu": 0.16756676684655622, "crystalbleu": 0.0, "codebertscore": 0.77, "codescore": 0.2586820125579834, "surfaceSim": 0.5127713920817368, "abs_surfaceSim_minus_score": 0.5127713920817368}
{"golden_code": "import sys\n\nK = int(eval(input()))\n\n\n\npower = 7\n\nSUM = 0\n\n\n\nfor i in range(1, 10 ** 6):\n\n    SUM += power\n\n    if SUM % K == 0:\n\n        print(i)\n\n        sys.exit()\n\n    power *= 10\n\n    power %= K\n\n\n\nprint((-1))", "generated_code": "N, *A = list(map(int, open(0).read().split()))\n\n\n\nans = 0\n\nS = -1\n\nwhile S:\n\n    S = sum(a // N for a in A)\n\n    ans += S\n\n    A = [a % N + (S - a // N) for a in A]\n\n\n\nprint(ans)\n", "score": 0.0, "codebleu": 0.16165056195548377, "crystalbleu": 0.0, "codebertscore": 0.74, "codescore": 0.9802692532539368, "surfaceSim": 0.47667726790852644, "abs_surfaceSim_minus_score": 0.47667726790852644}
{"golden_code": "def segfunc(x, y): return max(x, y)\n\n\n\nclass SegmentTree:\n\n    def __init__(self, arr):\n\n        size = len(arr)\n\n        n = 2 ** (size - 1).bit_length()\n\n        self.n = n\n\n        self.node = [0] * (2*n)\n\n        for i in range(size):\n\n            self.node[i+n-1] = arr[i]\n\n        for i in reversed(list(range(n-2))):\n\n            self.node[i] = segfunc(self.node[2*i+1], self.node[2*i+2])\n\n\n\n    def update(self, i, x):\n\n        i += self.n - 1\n\n        self.node[i] = x\n\n        while i > 0:\n\n            i = (i - 1) // 2\n\n            self.node[i] = segfunc(self.node[i * 2 + 1], self.node[i * 2 + 2])\n\n\n\n    def update(self, x, val):\n\n        x += (self.n - 1)\n\n        self.node[x] = val\n\n        while x > 0:\n\n            x = (x - 1) // 2\n\n            self.node[x] = segfunc(self.node[2 * x + 1], self.node[2 * x + 2])\n\n\n\n    def query(self, a, b):\n\n        res = 0\n\n        l = self.n - 1 + a\n\n        r = self.n - 1 + (b - 1)\n\n\n\n        while l <= r:\n\n            if l == r:\n\n                res = segfunc(res, self.node[l])\n\n                break\n\n\n\n            if l % 2 == 0:\n\n                res = segfunc(res, self.node[l])\n\n            if r % 2 == 1:\n\n                res = segfunc(res, self.node[r])\n\n            l = l // 2\n\n            r = r // 2 - 1\n\n\n\n        return res\n\n\n\nN, K = list(map(int, input().split()))\n\nINF = 0\n\nseg = SegmentTree([0] * 300000)\n\nfor i in range(N):\n\n    a = int(eval(input()))\n\n    tmp = seg.query(max(a - K, 0), min(a + K, 300000) + 1) + 1\n\n    seg.update(a, tmp)\n\nprint((seg.query(0, 300000)))\n", "generated_code": "def abc133_c():\n\n    L, R = list(map(int, input().split()))\n\n    # 区間の幅が673あれば、673の倍数と3の倍数が含まれて、2019の倍数が作れる\n\n    if R - L > 673: return 0\n\n    # それ以外は試す\n\n    ans = 2019\n\n    for i in range(L, R+1):\n\n        for j in range(L, i):\n\n            m = i * j % 2019\n\n            ans = min(m, ans)\n\n            if ans == 1: return 1\n\n    return ans\n\n\n\nprint((abc133_c()))", "score": 0.0, "codebleu": 0.07049140892021544, "crystalbleu": 0.0032434891528167224, "codebertscore": 0.67, "codescore": 0.8015411496162415, "surfaceSim": 0.569452910697958, "abs_surfaceSim_minus_score": 0.569452910697958}
{"golden_code": "import sys\n\nread = sys.stdin.read\n\nreadlines = sys.stdin.readlines\n\nimport numpy as np\n\ndef main():\n\n    x = int(eval(input()))\n\n    for i1 in range(-201, 201):\n\n        for i2 in range(-201, 201):\n\n            if i1**5 - i2**5 == x:\n\n                print((i1, i2))\n\n                sys.exit()\n\n\n\nif __name__ == '__main__':\n\n    main()", "generated_code": "import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\n\"\"\"\n\n・偶数番号、奇数番号の中では入れ替え放題\n\n・偶、奇の間：並べてからスワップ。操作2を1回で、正しいものを2つ増やせる\n\n\"\"\"\n\n\n\nN,*A = list(map(int,read().split()))\n\n\n\nx_to_i = {x:i for i,x in enumerate(sorted(A))}\n\nrank = [x_to_i[x] for x in A]\n\n\n\nanswer = sum((x^i) & 1 for i,x in enumerate(rank)) // 2\n\nprint(answer)", "score": 0.0, "codebleu": 0.24297862164111694, "crystalbleu": 0.0, "codebertscore": 0.71, "codescore": 0.13896453380584717, "surfaceSim": 0.391270215104412, "abs_surfaceSim_minus_score": 0.391270215104412}
{"golden_code": "# ABC102C - Linear Approximation (ARC100C)\n\nfrom statistics import median\n\n\n\n\n\ndef main():\n\n    n = int(eval(input()))\n\n    A = tuple(map(int, input().rstrip().split()))\n\n    A = tuple(j - i for i, j in enumerate(A, start=1))\n\n    b = median(A)\n\n    ans = sum(abs(a - b) for a in A)\n\n    print((int(ans)))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()", "generated_code": "N = int(eval(input()))\n\nA = list(map(int,input().split()))\n\nB = N*[0]\n\n\n\nfor n in range(N):\n\n  B[A[n]-1]=n+1\n\n\n\nprint((*B))", "score": 0.0, "codebleu": 0.17474904627973376, "crystalbleu": 0.0, "codebertscore": 0.75, "codescore": 0.09223555773496628, "surfaceSim": 0.4690247999209564, "abs_surfaceSim_minus_score": 0.4690247999209564}
{"golden_code": "from scipy.sparse.csgraph import floyd_warshall\n\n\n\nn,m=list(map(int,input().split()))\n\nl=[list(map(int,input().split())) for i in range(m)]\n\n\n\nans=0\n\nfor i in range(m):\n\n    ll=l[:i]+l[i+1:]\n\n\n\n    d=[[float('inf')]*n for i in range(n)]\n\n    for i in range(n):\n\n        d[i][i]=0\n\n\n\n    for j in ll:\n\n        d[j[0]-1][j[1]-1]=1\n\n        d[j[1]-1][j[0]-1]=1\n\n\n\n    d=floyd_warshall(d)\n\n\n\n    if float('inf') in d:\n\n        ans+=1\n\n\n\nprint(ans)", "generated_code": "s = eval(input())\n\nt = eval(input())\n\nans = 0\n\nfor i in range(3):\n\n    if s[i] == t[i]:\n\n        ans += 1\n\nprint(ans)\n", "score": 0.0, "codebleu": 0.12124976887145625, "crystalbleu": 0.012965508759190062, "codebertscore": 0.73, "codescore": 0.5297788381576538, "surfaceSim": 0.4744034182521767, "abs_surfaceSim_minus_score": 0.4744034182521767}
{"golden_code": "a, b, c, x, y = list(map(int, input().split()))\n\nans = float('inf')\n\n\n\nfor i in range(200005):\n\n    tmp = i * 2 * c\n\n    tmp += max(0, x-i) * a\n\n    tmp += max(0, y-i) * b\n\n    ans = min(ans, tmp)\n\n\n\nprint(ans)", "generated_code": "mod = 10 ** 9 + 7\n\nn = int(eval(input()))\n\nans = 1\n\nfor i in range(1, n + 1):\n\n    ans *= i\n\n    ans %= mod\n\nprint(ans)", "score": 0.0, "codebleu": 0.09741415129339542, "crystalbleu": 0.0, "codebertscore": 0.76, "codescore": 0.08567382395267487, "surfaceSim": 0.6206349206349207, "abs_surfaceSim_minus_score": 0.6206349206349207}
{"golden_code": "k = int(eval(input()))\n\nnum = 0\n\nif not k%2:\n\n    print((-1))\n\nelse:\n\n    for i in range(k):\n\n        num = (num*10+7)%k\n\n        if num == 0:\n\n            print((i+1))\n\n            break\n\n    else:\n\n        print((-1))", "generated_code": "N = int(eval(input()))\n\nA = list(map(int,input().split()))\n\nB = N*[0]\n\n\n\nfor n in range(N):\n\n  B[A[n]-1]=n+1\n\n\n\nprint((*B))", "score": 0.0, "codebleu": 0.25243156541970846, "crystalbleu": 0.0, "codebertscore": 0.78, "codescore": 0.42633870244026184, "surfaceSim": 0.5412715138742537, "abs_surfaceSim_minus_score": 0.5412715138742537}
{"golden_code": "a,b = list(map(int,input().split()))\n\nc = 0\n\n\n\nfor i in range(a,b+1):\n\n  new = list(reversed(list(str(i))))\n\n  if new == list(str(i)):\n\n    c += 1\n\n    \n\n    \n\nprint(c)", "generated_code": "def main():\n\n    from collections import Counter\n\n    from operator import itemgetter\n\n\n\n    import sys\n\n    input = sys.stdin.readline\n\n\n\n    N, M = list(map(int, input().split()))\n\n    a = list(map(int, input().split()))\n\n\n\n    ctr = Counter(a)\n\n    for _ in range(M):\n\n        b, c = list(map(int, input().split()))\n\n        ctr[c] += b\n\n\n\n    ans = 0\n\n    rest = N\n\n    for integer, count in sorted(list(ctr.items()), key=itemgetter(0), reverse=True):\n\n        take = min(rest, count)\n\n        ans += take * integer\n\n        rest -= take\n\n        if not rest:\n\n            break\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n\n\n\n# import sys\n\n# input = sys.stdin.readline\n\n# \n\n# sys.setrecursionlimit(10 ** 7)\n\n# \n\n# (int(x)-1 for x in input().split())\n\n# rstrip()\n", "score": 0.0, "codebleu": 0.3027962422036663, "crystalbleu": 0.05075007620275315, "codebertscore": 0.7, "codescore": 0.019683027639985085, "surfaceSim": 0.5594812925170067, "abs_surfaceSim_minus_score": 0.5594812925170067}
{"golden_code": "A,B = list(map(int,input().split()))\n\n\n\n\n\ndef kaibun(n):\n\n\tkey = 0\n\n\tfor i in range(1,n+1):\n\n\t\tif str(i) == str(i)[::-1]:\n\n\t\t\tkey += 1\n\n\treturn key\n\n\n\nprint((kaibun(B)-kaibun(A-1)))", "generated_code": "def gcd(x, y):\n\n    if y == 0:\n\n        return x\n\n    else:\n\n        return gcd(y, x%y)\n\n\n\n\n\ndef lcm(x,y):\n\n    return x/gcd(x, y)*y\n\n\n\n\n\nwhile True:\n\n    try:\n\n        x, y = list(map(int, input().split()))\n\n    except EOFError:\n\n        break\n\n\n\n    print(\"%d %d\" % (gcd(x, y), lcm(x, y)))", "score": 0.0, "codebleu": 0.15040597555954743, "crystalbleu": 0.0, "codebertscore": 0.74, "codescore": 0.7706179618835449, "surfaceSim": 0.5098406747891284, "abs_surfaceSim_minus_score": 0.5098406747891284}
{"golden_code": "import sys\n\n\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nN = int(read())\n\nx = N + (-N) % 1000\n\nprint((x - N))", "generated_code": "N, K = list(map(int, input().split()))\n\n\n\nA = [0] * N\n\n\n\nfor _ in range(K):\n\n    eval(input())\n\n    for i in map(int, input().split()):\n\n        A[i - 1] += 1\n\n\n\nprint((A.count(0)))\n", "score": 0.0, "codebleu": 0.14526085618749981, "crystalbleu": 0.0, "codebertscore": 0.71, "codescore": 0.12146460264921188, "surfaceSim": 0.4065934065934066, "abs_surfaceSim_minus_score": 0.4065934065934066}
{"golden_code": "x = int(eval(input()))\n\n\n\nfor a in range(10**4):\n\n    for b in range(10**4):\n\n        if(a**5 + b**5 == x):\n\n            print((a, -b))\n\n            break\n\n        elif(a**5 - b**5 == x):\n\n            print((a, b))\n\n            break\n\n    else:\n\n        continue\n\n    break", "generated_code": "p=m=0\n\nfor c in eval(input()):p=-~p*(c in'ATGC');m=max(m,p)\n\nprint(m)", "score": 0.0, "codebleu": 0.09122441033334797, "crystalbleu": 0.0, "codebertscore": 0.68, "codescore": 0.5877810120582581, "surfaceSim": 0.5327380952380952, "abs_surfaceSim_minus_score": 0.5327380952380952}
{"golden_code": "# coding: utf-8\n\n\n\n\n\ndef solve(*args: str) -> str:\n\n    n, m, k = list(map(int, args[0].split()))\n\n    mod = 998244353\n\n\n\n    if m == 1 and n-1 == k:\n\n        return str(1)\n\n\n\n    ncr = 1\n\n    p = m*pow(m-1, n-1, mod) % mod\n\n    ret = p\n\n    inv = pow(m-1, mod-2, mod)\n\n    for i in range(1, k+1):\n\n        ncr = (ncr * (n-i)*pow(i, mod-2, mod)) % mod\n\n        p = (p*inv) % mod\n\n        ret += p*ncr % mod\n\n\n\n    return str(ret % mod)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    print((solve(*(open(0).read().splitlines()))))\n", "generated_code": "n, k = list(map(int, input().split()))\n\np = list(map(int, input().split()))\n\n\n\ndef calc(x):\n\n    return (x + 1) / 2\n\n\n\n\n\nw = 0\n\n\n\nfor i in range(k):\n\n    w += calc(p[i])\n\n\n\nans = w\n\nfor i in range(k, n):\n\n    w += calc(p[i]) - calc(p[i - k])\n\n    ans = max(ans, w)\n\nprint(ans)", "score": 0.0, "codebleu": 0.12861004386025895, "crystalbleu": 0.09700180099334661, "codebertscore": 0.75, "codescore": 0.05790003389120102, "surfaceSim": 0.6086538461538461, "abs_surfaceSim_minus_score": 0.6086538461538461}
{"golden_code": "import sys\n\nimport queue\n\n\n\nN = 3\n\nf= ''.join(sys.stdin.readline().split())\n\nf+= ''.join(sys.stdin.readline().split())\n\nf+= ''.join(sys.stdin.readline().split())\n\n\n\ndd = [[-1, 0], [0, -1], [1, 0], [0, 1]]\n\n\n\nQ = queue.Queue()\n\nV = dict()\n\n\n\nQ.put([f,f.index('0'),0])\n\nV[f] = True\n\n\n\nwhile not Q.empty():\n\n    u = Q.get()\n\n    if u[0] == '123456780':  break\n\n    sx, sy = u[1]//N, u[1]%N\n\n    for dx, dy in dd:\n\n        tx, ty = sx+dx, sy+dy\n\n        if tx<0 or ty<0 or tx>=N or ty>=N: continue\n\n        v = u[:]\n\n        n1, n2 = u[1], tx*N+ty\n\n        v[1] = n2\n\n        if n1>n2: n1, n2 = n2, n1\n\n        v[0] = v[0][0:n1]+v[0][n2]+v[0][n1+1:n2]+v[0][n1]+v[0][n2+1:]\n\n        if not V.get(v[0], False):\n\n            V[v[0]] = True\n\n            v[2] += 1                                                    \n\n            Q.put(v)\n\n\n\nprint((u[2]))\n", "generated_code": "from collections import deque\n\nfrom copy import deepcopy\n\n\n\nn,m=list(map(int,input().split()))\n\nl=[list(map(int,input().split())) for i in range(m)]\n\n\n\ndef BFS(m):\n\n  t_l=deepcopy(l)\n\n  del t_l[m]\n\n\n\n  tree=[[] for j in range(n)]\n\n  for a,b in t_l:\n\n    a-=1\n\n    b-=1\n\n    tree[a].append(b)\n\n    tree[b].append(a)\n\n\n\n  dist=[-1 for i in range(n)]\n\n  dist[0]=0\n\n\n\n  que=deque()\n\n  que.append(0)\n\n\n\n  while que:\n\n    x=que.popleft()\n\n    for i in tree[x]:\n\n      if dist[i]==-1:\n\n        que.append(i)\n\n        dist[i]=dist[x]+1\n\n\n\n  return dist\n\n\n\nans=0\n\nfor i in range(m):\n\n  d=BFS(i)\n\n  if -1 in d:\n\n    ans+=1\n\n\n\nprint(ans)", "score": 0.0, "codebleu": 0.15743774528309776, "crystalbleu": 0.029350594569607286, "codebertscore": 0.71, "codescore": 0.9923794269561768, "surfaceSim": 0.4819952774498229, "abs_surfaceSim_minus_score": 0.4819952774498229}
{"golden_code": "import math\n\nprint((math.factorial(int(eval(input())))%1000000007))", "generated_code": "w = list(eval(input()))\n\ns = set(w)\n\nfor i in s:\n\n  if w.count(i)%2 != 0:\n\n    print(\"No\")\n\n    break\n\nelse:\n\n  print(\"Yes\")\n\n  ", "score": 0.0, "codebleu": 0.22794117647058823, "crystalbleu": 0.0, "codebertscore": 0.7, "codescore": 0.10953127592802048, "surfaceSim": 0.44140625, "abs_surfaceSim_minus_score": 0.44140625}
{"golden_code": "import numpy as np\n\n\n\nn, m = list(map(int, input().split()))\n\n\n\nd = np.ones((n, n)) * 1001\n\n\n\nes = []\n\nfor i in range(m):\n\n    es.append(list(map(int, input().split())))\n\n\n\nfor (i, j, w) in es:\n\n    d[i - 1][j - 1] = w\n\n    d[j - 1][i - 1] = w\n\n\n\n\n\nfor k in range(n):\n\n    for i in range(n):\n\n        for j in range(n):\n\n            l = d[i][k] + d[k][j]\n\n            if d[i][j] > l:\n\n                d[i][j] = l\n\n\n\nc = 0\n\nfor (i, j, w) in es:\n\n    if d[i - 1][j - 1] < w:\n\n        c += 1\n\n\n\nprint(c)\n", "generated_code": "#!/usr/bin/env python3\n\ndef main():\n\n    import numpy as np\n\n\n\n    N, W = list(map(int, input().split()))\n\n    lst = [list(map(int, input().split())) for _ in range(N)]\n\n    v_max = 10 ** 3 * 100 * 10\n\n    w_max = 10 ** 9 * v_max\n\n\n\n    # i以上の価値を持つときの最小重量\n\n    dp = np.full(v_max, w_max, dtype=np.int64)\n\n    # initialize\n\n    dp[0] = 0\n\n\n\n    for w, v in lst:\n\n        dp[v:] = np.minimum(dp[v:], dp[:-v] + w)\n\n\n\n    print((np.asarray(dp <= W).nonzero()[0].max()))\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n", "score": 0.0, "codebleu": 0.17577265091962146, "crystalbleu": 0.14258135268275404, "codebertscore": 0.74, "codescore": 0.018318353220820427, "surfaceSim": 0.538562091503268, "abs_surfaceSim_minus_score": 0.538562091503268}
{"golden_code": "#!/usr/bin/env python3\n\nimport sys, math, fractions, itertools\n\n\n\n\n\ndef solve(A: int, B: int, C: int, X: int, Y: int):\n\n    mn = 1e9\n\n    for i in range(0, 2*(max(X, Y)+1), 2):\n\n        mn = min(mn, C*i+A*max(X-i//2, 0)+B*max(Y-i//2, 0))\n\n    print((int(mn)))\n\n    return\n\n\n\n\n\n# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\n\ndef main():\n\n    def iterate_tokens():\n\n        for line in sys.stdin:\n\n            for word in line.split():\n\n                yield word\n\n    tokens = iterate_tokens()\n\n    A = int(next(tokens))  # type: int\n\n    B = int(next(tokens))  # type: int\n\n    C = int(next(tokens))  # type: int\n\n    X = int(next(tokens))  # type: int\n\n    Y = int(next(tokens))  # type: int\n\n    solve(A, B, C, X, Y)\n\n\n\nif __name__ == '__main__':\n\n    main()\n", "generated_code": "from math import gcd, ceil\n\nn, m = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\na = [i // 2 for i in a]\n\nl = 1\n\nfor i in a:\n\n    l *= i // gcd(l, i)\n\nfor i in a:\n\n    if l // i % 2 == 0:\n\n        print((0))\n\n        exit()\n\nprint((ceil((m // l) / 2)))", "score": 0.0, "codebleu": 0.11029534696473021, "crystalbleu": 0.04207883664106918, "codebertscore": 0.68, "codescore": 0.09806875884532928, "surfaceSim": 0.5669870885357549, "abs_surfaceSim_minus_score": 0.5669870885357549}
{"golden_code": "N = int(eval(input()))\n\n\n\nseq = list(map(int, input().split()))\n\n\n\ncnt = 0\n\n\n\nfor num in seq:\n\n    while num % 2 == 0:\n\n        cnt += 1\n\n        num /= 2\n\n\n\nprint(cnt)\n", "generated_code": "def segfunc(x, y): return max(x, y)\n\ndef update(i, x):\n\n    i += MAX_N-1\n\n    node[i] = x\n\n    while i:\n\n        i = (i-1)//2\n\n        node[i] = segfunc(node[i*2+1], node[i*2+2])\n\n\n\ndef query(l, r):\n\n    L = l + MAX_N\n\n    R = r + MAX_N\n\n    s = INF\n\n    while L < R:\n\n        if R & 1:\n\n            R -= 1\n\n            s = segfunc(s, node[R - 1])\n\n        if L & 1:\n\n            s = segfunc(s, node[L - 1])\n\n            L += 1\n\n        L >>= 1\n\n        R >>= 1\n\n    return s\n\n\n\nN, K = list(map(int, input().split()))\n\nMAX_N = 2**(300005).bit_length()\n\na = [int(eval(input())) for _ in range(N)]\n\nnode = [0] * (2 * MAX_N)\n\nINF = 0\n\nans = 0\n\n\n\n#for i in range(N):\n\n#    update(i, a[i])\n\n\n\nfor i in a:\n\n    tmp = query(max(i - K, 0), min(300005, i + K) + 1)\n\n    update(i, tmp + 1)\n\n    ans = max(ans, tmp + 1)\n\nprint(ans)\n", "score": 0.0, "codebleu": 0.34677557003324233, "crystalbleu": 0.08123865930290854, "codebertscore": 0.67, "codescore": 0.4062119722366333, "surfaceSim": 0.45376573284612265, "abs_surfaceSim_minus_score": 0.45376573284612265}
{"golden_code": "from numpy import *\n\neval(input())\n\nprint((\" \".join(map(str,argsort(list(map(int,input().split())))+1))))", "generated_code": "import sys\n\nimport queue\n\n\n\nN = 3\n\n\n\nf = ''.join(sys.stdin.readline().split())\n\nf += ''.join(sys.stdin.readline().split())\n\nf += ''.join(sys.stdin.readline().split())\n\n\n\ndd = [[-1, 0], [0, -1], [1, 0], [0, 1]]\n\n\n\nQ = [[f,f.index('0'),0]]\n\nV = { f: True }\n\n\n\nwhile len(Q)>0:\n\n    u = Q.pop(0)\n\n    if u[0] == '123456780':  break\n\n    sx, sy = u[1]//N, u[1]%N\n\n    for dx, dy in dd:\n\n        tx, ty = sx+dx, sy+dy\n\n        if tx<0 or ty<0 or tx>=N or ty>=N: continue\n\n        v = u[:]\n\n        n1, n2 = u[1], tx*N+ty\n\n        v[1] = n2\n\n        if n1>n2: n1, n2 = n2, n1\n\n        v[0] = v[0][0:n1]+v[0][n2]+v[0][n1+1:n2]+v[0][n1]+v[0][n2+1:]\n\n        if not V.get(v[0], False):\n\n            V[v[0]] = True\n\n            v[2] += 1 # dir[r]                                                       \n\n            Q.append(v)\n\n\n\nprint((u[2]))\n", "score": 0.0, "codebleu": 0.23846254039712486, "crystalbleu": 0.02279256143030115, "codebertscore": 0.59, "codescore": 0.993804931640625, "surfaceSim": 0.338889401914612, "abs_surfaceSim_minus_score": 0.338889401914612}
{"golden_code": "def abc133_c():\n\n    L, R = list(map(int, input().split()))\n\n    # 区間の幅が673あれば、673の倍数と3の倍数が含まれて、2019の倍数が作れる\n\n    if R - L > 673: return 0\n\n    # それ以外は試す\n\n    ans = 2019\n\n    for i in range(L, R+1):\n\n        for j in range(L, i):\n\n            m = i * j % 2019\n\n            ans = min(m, ans)\n\n    return ans\n\n\n\nprint((abc133_c()))", "generated_code": "from collections import Counter,defaultdict,deque\n\nimport sys,bisect,math,itertools,string,queue\n\nfrom heapq import heappop, heappush\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\ndef inp(): return int(sys.stdin.readline())\n\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\ndef inpl_str(): return list(sys.stdin.readline().split())\n\ndef inpln(n): return list(int(sys.stdin.readline()) for i in range(n))\n\n\n\nn = inp()\n\nres = float('inf')\n\nfor i in range(1,int(math.sqrt(n))+1):\n\n    if n%i == 0:\n\n        res = min(res, i + n/i)\n\nprint((int(res-2)))\n", "score": 0.0, "codebleu": 0.20484085780795175, "crystalbleu": 0.10549886183253537, "codebertscore": 0.68, "codescore": 0.13976658880710602, "surfaceSim": 0.4551241792749072, "abs_surfaceSim_minus_score": 0.4551241792749072}
{"golden_code": "import sys\n\nstdin = sys.stdin\n\n\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\ndef li(): return list(map(int, stdin.readline().split()))\n\ndef li_(): return [int(x) - 1 for x in stdin.readline().split()]\n\ndef lf(): return list(map(float, stdin.readline().split()))\n\ndef ls(): return stdin.readline().split()\n\ndef ns(): return stdin.readline().rstrip()\n\ndef lc(): return list(ns())\n\ndef ni(): return int(stdin.readline())\n\ndef nf(): return float(stdin.readline())\n\n\n\nn = ni()\n\nab = [list(li()) for _ in range(n)]\n\n\n\nab.sort(key=lambda x: x[1])\n\n\n\ncur = 0\n\n\n\nans = True\n\n\n\nfor ai, bi in ab:\n\n    cur += ai\n\n    if cur > bi:\n\n        ans = False\n\n\n\nprint((\"Yes\" if ans else \"No\"))", "generated_code": "import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\n\"\"\"\n\n・偶数番号、奇数番号の中では入れ替え放題\n\n・偶、奇の間：並べてからスワップ。操作2を1回で、正しいものを2つ増やせる\n\n\"\"\"\n\n\n\nN,*A = list(map(int,read().split()))\n\n\n\nx_to_i = {x:i for i,x in enumerate(sorted(A))}\n\nrank = [x_to_i[x] for x in A]\n\n\n\nanswer = sum((x^i) & 1 for i,x in enumerate(rank)) // 2\n\nprint(answer)", "score": 0.0, "codebleu": 0.15551887853923924, "crystalbleu": 0.03177825156161253, "codebertscore": 0.7, "codescore": 0.5751755237579346, "surfaceSim": 0.4202203551046291, "abs_surfaceSim_minus_score": 0.4202203551046291}
{"golden_code": "N = int(eval(input()))\n\ntxy = [(0, 0, 0)] + [tuple(map(int, input().split())) for _ in range(N)]\n\nfor i in range(N):\n\n    t1, x1, y1 = txy[i]\n\n    t2, x2, y2 = txy[i+1]\n\n    if abs(x2-x1) + abs(y2-y1) <= t2 - t1 and (x1+y1+x2+y2) % 2 == (t2-t1) % 2:\n\n        continue\n\n    else:\n\n        print('No')\n\n        exit()\n\nprint('Yes')", "generated_code": "N, *A = list(map(int, open(0).read().split()))\n\n\n\nans = 0\n\nS = -1\n\nwhile S:\n\n    S = sum(a // N for a in A)\n\n    ans += S\n\n    A = [a % N + (S - a // N) for a in A]\n\n\n\nprint(ans)\n", "score": 0.0, "codebleu": 0.11073293271608046, "crystalbleu": 0.0, "codebertscore": 0.7, "codescore": 0.9819854497909546, "surfaceSim": 0.4510995887716789, "abs_surfaceSim_minus_score": 0.4510995887716789}
