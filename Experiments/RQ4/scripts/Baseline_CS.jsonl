{"id": "MBPP_102_4", "golden_code": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter", "generated_code": "import math\ndef perimeter_pentagon(*l):\n\ttry:\n\t\treturn f()\n\texcept:\n\t\tpass", "score": 0.0}
{"id": "APPS_test-0001_19", "golden_code": "a=int(input())\nif(a//10==0):\n    print(a)\n    return\nk=9\nwhile(k<a):\n    k=k*10+9\nif(k==a):\n    print(k)\nelse:\n    k//=10\n    k=int(str(a)[0]+str(k))\n    i=len(str(k))-1\n    z=k\n    while(z>a):\n        z=int(str(k)[0:i]+str(int(str(k)[i])-1)+str(k)[i+1:len(str(k))])\n        i-=1\n    print(z)    ", "generated_code": "n=int(input())\n\n#econmanipaction of size N\nmax_sum=0\nans=0\nconvert=[]\nwhile n>0:\n\tnum=n%10\n\tn=n//10\n\tconvert.append(num)\n\tmax_sum=max(max_sum,sum(convert))\n\tfor i in range(10):\n\t\tif sum(convert[:i+1])>max_sum:\n\t\t\tans=i+1\n\t\t\tmax_sum=sum(convert[i+1:])\n\t\t\tbreak\nprint(ans)\n\n", "score": 0.0}
{"id": "MBPP_112_1", "golden_code": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False", "generated_code": "def product_Equal(num):\n\t\n\treturn [y for y in range(1,1+num)]", "score": 0.0}
{"id": "APPS_test-0002_21", "golden_code": "n = int(input())\nans = 0\nprev = 0\nN = n\nwhile n:\n\ta = n%10\n\tn //= 10\n\tans += 1\n\tprev = a\nif ans==1:\n\tprint(1)\nelse:\n\tprint(((prev+1)*(10**(ans-1)))-N)\n", "generated_code": "n=int(input())\ns=str(n)\na=[]\nfor i in range(len(s)):\n\ta.append(int(s[i]))\n\t\ny=a[0]+1\nfl=0\nfor i in a:\n\tif i<=1:\n\t\tfl=1\n\telse:\n\t\ty=i\n\t\tbreak\n\nif fl==0:\n\ty=n\nprint(y)\n", "score": 0.0098}
{"id": "MBPP_11_1", "golden_code": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm", "generated_code": "def lcm(x, y):\n\treturn x*y//(x//y)\n\n\n\n\n\n\n\n\n\t\ncandidates = {'diff': 0, 'index': 1, 'char': 2, 'float': 3,'my': 4, 'type': 5,'vector': 6, 'num': 7, 'q': 8, 'u': 9, 'V': 10, 'w': 11, 'x': 16, 'y': 17, 'z': 18}", "score": 0.1907}
{"id": "APPS_test-0001_36", "golden_code": "def get(s):\n    ans = 0\n    for i in s:\n        ans += (ord(i) - ord('0'))\n    return ans\n\n\ndef solve1():\n    x = input()\n    n = len(x)\n    best_ans = x\n    best_val = get(x)\n    ans = str('' if int(x[0]) - 1 == 0 else int(x[0]) - 1) + '9' * (n - 1)\n    if get(ans) > best_val or (get(ans) >= best_val and int(ans) > int(best_ans)):\n        best_ans = ans\n        best_val = get(ans)\n    for i in range(1, n):\n        #print(ans)\n        ans = x[:i] + str(int(x[i]) - 1) + '9' * (n - i - 1)\n        if get(ans) > best_val or (get(ans) >= best_val and int(ans) > int(best_ans)):\n            best_ans = ans\n            best_val = get(ans)\n    return best_ans\n    \nbest = [0] * 10000\ndef solve2():\n    nonlocal best\n    was = 0\n    for i in range(1, 10000):\n        if get(str(i)) >= was:\n            best[i] = i\n            was = get(str(i))\n        else:\n            best[i] = best[i - 1]\n    \ndef stress():\n    solve2()\n    for i in range(1, 10000):\n        if int(solve1(str(i))) != best[i]:\n            print(i, best[i], solve1(str(i)))\n\n#stress()\nprint(solve1())", "generated_code": "def main():\n\tx = int(input())\n\ti = 10 ** 18\n\twhile i <= x:\n\t\tans = -9\n\t\tfor j in str(i):\n\t\t\tans += int(j)\n\t\tif ans > 0 and ans + i < x:\n\t\t\tprint(ans)\n\t\t\treturn\n\t\ti += 1\n\tprint(i - 1)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_11_15", "golden_code": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm", "generated_code": "def lcm(_x, y) :\n\n\t\treturn _x\n\n\"\"\"def gcd(_y, z) as x o g i i, m, n z j\"\"\"\n\n__author = 'Pavel Mavrin'", "score": 0.3659}
{"id": "APPS_test-0009_6", "golden_code": "import sys\ntry:\n    fin=open('in')\nexcept:\n    fin=sys.stdin\ninput=fin.readline\n\nd = int(input())\nn, m = map(int, input().split())\nx1, y1, x2, y2 = [], [], [], []\nT=[]\nfor _ in range(d):\n    u, v, w, x = map(int, input().split())\n    if u>w:u,w=w,u\n    if v>x:v,x=x,v\n    x1.append(u)\n    y1.append(v)\n    x2.append(-w)#the other direction pog?\n    y2.append(-x)\n    T.append([u,v,w,x])\n\nx1.sort()\nx2.sort()\ny1.sort()\ny2.sort()\n\nreq=list(map(int,input().split())) # x1,x2,y1,y2\nimport bisect\nfor i in range(len(T)):\n    # binary search\n    u,v,w,x=T[i]\n    if req[0]==bisect.bisect_left(x1,w)-(u!=w):\n        if req[1]==bisect.bisect_left(x2,-u)-(u!=w):\n            if req[2]==bisect.bisect_left(y1,x)-(v!=x):\n                if req[3]==bisect.bisect_left(y2,-v)-(v!=x):\n                    print(i+1)\n                    break\nelse:\n    print(-1)", "generated_code": "def main():\n\td = int(input())\n\tn, m = list(map(int, input().split()))\n\tx = [0]*(n+1)\n\ty = [0]#                                    # >\n\tfor i in range(d):\n\t\tl, r, u, v = list(map(_int, input(). split()))\n\t\tx[l] = x[l] + 1\n\t\ty[r] = y[r] + 1\n\tcntl = 0\n\tcntr = 0\n\tfor i, val in enumerate(x):\n\t\tif val and x[i] > 0:\n\t\t\tcntl += 1\n\t\telif not val and x[ i] > 0:     \n\t\t\tcntr += 1\n\tif cntl > 0 or cntr > 0:\n\t\tprint(-1)\n\t", "score": 0.0}
{"id": "MBPP_11_18", "golden_code": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm", "generated_code": "def lcm(x, y):\n\tif x == y:\n\t\treturn x\n\telse:\n\t\ti = x if x > y else y\n\t\tif i == i:\n\t\t\treturn x\n\t\telse:\n\t\t\tp = int(x / i)\n\t\t\treturn p * i", "score": 0.3491}
{"id": "APPS_test-0018_39", "golden_code": "s=input()\nc=[0]*26\nfor i in s:\n    c[ord(i)-97]+=1\nt=[]\nu=[]\nfor i in s:\n    t.append(i)\n    c[ord(i)-97]-=1\n    while t and sum(c[:(ord(t[-1])-97)])==0:\n        u.append(t.pop())\n        \nprint(''.join(u))      ", "generated_code": "s = input()\n\nbegin = 0\nend = begin + len(s) - 1\nans = \"\"\n\nwhile begin < end:\n\tif s[begin] == s[end]:\n\t\tans += s[begin]\n\t\tbegin += 1\n\t\tend -= 1\n\telse:\n\t\tans += f'{s[begin]}{s[end]}{ans[begin + 1:]}'\n\t\tbegin += 2\n\t\tend -= 2\n\nprint(ans)\n", "score": 0.0844}
{"id": "MBPP_11_21", "golden_code": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm", "generated_code": "def lcm(x, y):\n\treturn x * y // gcd(x,y)\n\n\n\n\n\n\t\nfrom fractions import gcd, gcd", "score": 1.0}
{"id": "APPS_test-0018_51", "golden_code": "s = input()\nprefmin = ['{'] * (len(s) + 1)\nst = []\n\nfor i in range(len(s) - 1, -1, -1):\n    prefmin[i] = min(s[i], prefmin[i + 1])\n\nfor i in range(len(s)):\n    while len(st) and st[-1] <= prefmin[i]:\n        print(st.pop(), end='')\n    if prefmin[i] == s[i]:\n        print(s[i], end='')\n    else:\n        st.append(s[i])\n\nfor i in range(len(st) - 1, -1, -1):\n    print(st[i], end='')\n\n", "generated_code": "a = list(input())\n\na.sort()\n\nb = []\n\nfor i in range(len(a)):\n\tb.append(a[i])\n\nprint(''.join(b + a[::-1]))\n", "score": 0.0}
{"id": "MBPP_11_22", "golden_code": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm", "generated_code": "def lcm(x, s1):\n\twhile s1 <= x:\n\t\ts1 += x,\n\treturn s1", "score": 0.2812}
{"id": "APPS_test-0009_9", "golden_code": "from sys import stdin, stdout\n\nk = int(stdin.readline())\nn, m = map(int, stdin.readline().split())\nleft, right, down, up = [], [], [], []\ncoordinates = []\n\nfor i in range(k):\n    x1, y1, x2, y2 = map(int, stdin.readline().split())\n    \n    if x1 == x2:\n        if y1 < y2:\n            coordinates.append((x1, y1, x2, y2, i))\n        else:\n            coordinates.append((x2, y2, x1, y1, i))\n    else:\n        if x1 < x2:\n            coordinates.append((x1, y1, x2, y2, i))\n        else:\n            coordinates.append((x2, y2, x1, y1, i))\n    \n    left.append(coordinates[-1])\n    right.append(coordinates[-1])\n    up.append(coordinates[-1])\n    down.append(coordinates[-1])\n\nleft.sort(key = lambda x: (x[0], x[2]))\ndown.sort(key = lambda x: (x[1], x[3]))\n\nchallengers = [[], [], [], []]\ncntl, cntr, cntd, cntu = map(int, stdin.readline().split())\nlabel = 1\n\nif cntl or not cntl:\n    for i in range(cntl, -1, -1):\n        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]):\n            challengers[0].append(left[i][-1])  \n        else:\n            break\n        \n    for i in range(cntl + 1, k):\n        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]) and left[i][2] > left[i][0]:\n            label = 0\n        \n        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]):\n            challengers[0].append(left[i][-1])  \n        else:\n            break\n\nif cntr or not cntr:\n    for i in range(k - 1 - cntr, k):\n        if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]):\n            challengers[1].append(left[i][-1])\n        else:\n            break\n    \n    for i in range(k - 2 - cntr, -1, -1):\n        if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]) and left[i][2] > left[i][0]:\n            label = 0\n        \n        if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]):\n            challengers[1].append(left[i][-1])\n        else:\n            break\n\n#!!!!!!!!!!!\n\nif cntd or not cntd:\n    for i in range(cntd, -1, -1):\n        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):\n            challengers[2].append(down[i][-1])\n        else:\n            break\n        \n    for i in range(cntd + 1, k):\n        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]) and down[i][3] > down[i][1]:\n            label = 0\n            \n        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):\n            challengers[2].append(down[i][-1])  \n        else:\n            break\n        \nif cntu or not cntu:\n    for i in range(k - 1 - cntu, k):\n        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]):\n            challengers[3].append(down[i][-1])\n        else:\n            break\n    \n    for i in range(k - 2 - cntu, -1, -1):\n        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]) and down[i][3] > down[i][1]:\n            label = 0\n        \n        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]):\n            challengers[3].append(down[i][-1])\n        else:\n            break\n\nans = set(challengers[0]) & set(challengers[1]) & set(challengers[2]) & set(challengers[3])\n\nif not len(ans) or not label:\n    stdout.write('-1')\nelse:\n    stdout.write(str(list(ans)[0] + 1))", "generated_code": "#-*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 1/9/20\n\n\"\"\"\nimport collections\nimport time\nimport os\nimport sys\nimport bisect\nimport heapq\nfrom typing import List\n\n\ndef solve(N, M, A):\n\ts = set()\n\n\tfor i in range(1, N+1):\n\t\tfor j in range(1, M+1):\n\t\t\tx, y = A[i][0], A[i][1]\n\t\t\ts.add((x, y))\n\t\t\t\n\tfor l in range(2, N+1+(M-1)):\n\t\tfor r in range(2, M+1+(N-l)):\n\t\t\tx1, y1 = A[l-1][0], A [l-1][1]\n\t\t\t\t\t\t\t\n\t\t\tx2", "score": 0.0}
{"id": "MBPP_11_23", "golden_code": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm", "generated_code": "def lcm(x, z):\n\tfrom fractions import gcd\n\treturn gcd(x,z) < 2\n\n\n\n\nUSTPIPULNES = 48220\n\n\"\"\"\n\treturn 0\n\"\"\"", "score": 0.0664}
{"id": "APPS_test-0023_17", "golden_code": "from collections import Counter\n\ndef max_num(a,b):\n    if len(b) > len(a):\n        val=''.join(sorted(a, reverse=True))\n        return int(val)\n    else:\n        # int_a=int(''.join(sorted(a)))\n        # int_b=int(''.join(b))\n        # for i in range(int_b,int_a-1,-1):\n        #     # print(str(i),str(int_a))\n        #     if Counter(str(i)) == Counter(str(''.join(a))):\n        #         return i\n        res=''\n        for i in b:\n            if i in a:\n                a.remove(i)\n                if ''.join(b[len(res)+1:]) >= ''.join(sorted(a)):\n                    res+=i\n                else:\n                    a.append(i)\n                    break\n            else:\n                break\n        # print(res)\n        # return res\n        new_b=b[len(res):]\n        if new_b==[]:\n            return res\n\n        for i in new_b:\n            for j in range(int(i)-1,-1,-1):\n                if str(j) in a:\n                    a.remove(str(j))\n                    return res+str(j)+''.join(sorted(a, reverse=True))\n\na=list(input())\nb=list(input())\nprint(max_num(a,b))\n", "generated_code": "def main():\n\ta = input()\n\tb = input()\n \n\tl = len(a)\n\tn = sum(map(int, a))\n\tm = len(b)\n \n\tif n < m:\n\t\treturn ''\n \n\telif n > m:\n\t\tp = ''.join(sorted(str(n)))\n\t\treturn p\n \n\telse:\n\t\treturn str(n)[m-1] + self.perform(b)\n\t\n\t\ndef perform(a):\n\tn = len(a); i = 0\n\twhile i < n:\n\t\tif a[i] == '0':\n\t\t\ti += 1\n\t\telse:\n\t\t\ta[i] = '0'\n\t\t\tbreak\n\treturn ''.join(a)\n \n \ndef __starting_point():\n\tprint(main())\n", "score": 0.0}
{"id": "MBPP_11_5", "golden_code": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm", "generated_code": "def lcm(*args):\n\tm = 1\n\tfor i in args:\n\t\tm *= i\n\treturn m", "score": 0.5463}
{"id": "APPS_test-0030_2", "golden_code": "from math import gcd\ndef powmod(a,b,m):\n a%=m\n r=1\n while b:\n  if b&1:r=r*a%m\n  a=a*a%m\n  b>>=1\n return r\n\ndef f(n):\n r=[]\n if (n&1)==0:\n  e=0\n  while (n&1)==0:n>>=1;e+=1\n  yield (2,e)\n p=3\n while n>1:\n  if p*p>n:p=n\n  if n%p:\n   p+=2\n   continue\n  e=1;n//=p\n  while n%p==0:n//=p;e+=1\n  yield (p,e)\n  p+=2\n return r\nm,x=map(int,input().split())\np=2\nr=[(1,1)]\nfor p,e in f(m):\n assert e>=1\n ord=p-1\n assert powmod(x,ord,p)==1\n for pi,ei in f(p-1):\n  while ord % pi == 0 and powmod(x,ord//pi,p)==1: ord//=pi\n ords=[(1,1),(ord,p-1)]\n q=p\n for v in range(2,e+1):\n  q*=p\n  if powmod(x,ord,q)!=1:ord*=p\n  assert powmod(x,ord,q)==1\n  ords.append((ord,q//p*(p-1)))\n r=[(a//gcd(a,c)*c,b*d) for a,b in r for c,d in ords]\nprint(sum(y//x for x,y in r))", "generated_code": "m, x = list(map(int, input().split()))\n\nans = 0\ngrcd = m\n\nwhile grcd > 1:\n\tans += 1\n\tgrcd = grcd // 2\n\nif not x % grcd:\n\tans -= 1\n\nprint(ans)\n", "score": 0.0002}
{"id": "MBPP_11_8", "golden_code": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm", "generated_code": "def lcm(x,   y):\n  return int(x) * int(y)", "score": 0.6313}
{"id": "APPS_test-0030_43", "golden_code": "from math import gcd\ndef powmod(a,b,m):\n a%=m\n r=1\n while b:\n  if b&1:r=r*a%m\n  a=a*a%m\n  b>>=1\n return r\n\ndef f(n):\n r=[]\n if (n&1)==0:\n  e=0\n  while (n&1)==0:n>>=1;e+=1\n  yield (2,e)\n p=3\n while n>1:\n  if p*p>n:p=n\n  if n%p:\n   p+=2\n   continue\n  e=1;n//=p\n  while n%p==0:n//=p;e+=1\n  yield (p,e)\n  p+=2\n return r\nm,x=map(int,input().split())\np=2\nr=[(1,1)]\nfor p,e in f(m):\n assert e>=1\n ord=p-1\n assert powmod(x,ord,p)==1\n for pi,ei in f(p-1):\n  while ord % pi == 0 and powmod(x,ord//pi,p)==1: ord//=pi\n ords=[(1,1),(ord,p-1)]\n q=p\n for v in range(2,e+1):\n  q*=p\n  if powmod(x,ord,q)!=1:ord*=p\n  assert powmod(x,ord,q)==1\n  ords.append((ord,q//p*(p-1)))\n r=[(a//gcd(a,c)*c,b*d) for a,b in r for c,d in ords]\nprint(sum(y//x for x,y in r))", "generated_code": "m, x = list(map(int, input().split()))\n\nans = 0\nfirst = True\n\nif m % x == 1:\n\tans += 1\n\nans += (m // x - 1) * (x * (m // x))\n\nprint(ans)\n", "score": 0.0104}
{"id": "MBPP_121_3", "golden_code": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "generated_code": "def sum_of_digits(arr):\n\tif len(arr)<2:\n\t\treturn 0\n\treturn (sum(arr[:len(arr)-1]) + sum(arr[1:]))/2", "score": 0.0257}
{"id": "APPS_test-0037_24", "golden_code": "w, b, sh = list(map(int, input().split()))\nfl = False\nwhile not fl and sh > 0:\n    if sh % b == 0 or sh % w == 0:\n        fl = True\n    sh -= w\nif fl:\n    print('Yes')\nelse:\n    print('No')\n", "generated_code": "a, b, c = list(map(int, input().split()))\n\nif a * b * c % 2 == 0:\n\tprint('Yes')\nelse:\n\tprint ('No')\n", "score": 0.4064}
{"id": "MBPP_120_2", "golden_code": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") ", "generated_code": "def even_or_odd(N): \n\treturn 'even' if (N % 2 == 0) else 'odd'\nss = []\nfor i in range(len(ss)):\n\tif ss[i] not in '0123456789':\n\t\tss[i] = '0123456789'\n\telse:\n\t\tss = ss.replace(ss[i], '')", "score": 0.0}
{"id": "APPS_test-0055_17", "golden_code": "n, k = map(int, input().split())\ncnt = [0] * 200010\nans = ''\nfor i in range(64):\n  if (n >> i)&1:\n    k -= 1\n    cnt[i] = 1;\nif k < 0:\n  print(\"No\")\nelse:\n  print(\"Yes\")\n  for i in range(64, -64, -1):\n    if k >= cnt[i]:\n      cnt[i - 1] += cnt[i] * 2\n      k -= cnt[i]\n      cnt[i] = 0\n    else: break\n  for i in range(-64, 64):\n    if cnt[i]:\n      while k:\n        cnt[i] -= 1\n        cnt[i - 1] += 2 \n        i -= 1\n        k-= 1\n      break\n  for i in range(64, -100010, -1): ans += (str(i) + ' ') * cnt[i] \n  print(ans)", "generated_code": "def main():\n\tn, k = list(map(int, input().split()))\n\tres = []\n\tmax_end = 0\n\tmax_size = 0\n\tif k & 1:\n\t\tres.append(1 << ((k - 1) >> 1))\n\tfor i in range(k):\n\t\tending = i + 1\n\t\tif ending & 1:\n\t\t\tres.append(ending)\n\t\t\tmax_end = max(max_end, ending)\n\t\telse:\n\t\t\tres[-1] = ending\n\t\t\tmax_size = max(maxSize, ending)\n\tif k == max_end:\n\t\tfor i in range(-1, max_size - 1, -1):\n\t\t\tres[i] = i\n\t\tres[-1:] = [max_end] * max_size\n\t\treturn res\n\tl = 0\n\tr = max_", "score": 0.0}
{"id": "MBPP_123_1", "golden_code": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) ", "generated_code": "def check_type(char_info):\n\tif char_info[0] == '1':\n\t\treturn None\n\telif char_info.isdigit():\n\t\treturn int(char_int(char_code(char_good_info)) + char_info)\n\telse:\n\t\traise ValueError", "score": 0.0}
{"id": "APPS_test-0077_29", "golden_code": "n=int(input())\na=list(map(int,input().split()))\ns=0\nb=0\nc=0\nfor i in a:\n    if i>0:\n        s+=i\n        if i%2!=0:\n            if b>0:\n                b=min(b,i)\n            if b==0:\n                b=i\n    if i<0 and i%2!=0:\n        if c<0:\n            c=max(c,i)\n        if c==0:\n            c=i\nif s%2!=0:\n    print(s)\nelse:\n    if (abs(c)<b or b==0) and c!=0:\n        s=s+c\n    else:\n        s=s-b\n    print(s)", "generated_code": "n = int(input())\na = list(map(int, input().split()))\n\ns = 0\nminn = a[0]\nfor i in range(n):\n\tif a[i] % 2 == 1:\n\t\ts += i\n\tminn = min(minn, a[i])\n\nprint(s - minn)\n", "score": 0.0}
{"id": "MBPP_12_7", "golden_code": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) ", "generated_code": "def sort_String(s: str) -> str:\n\treturn ''.join(sorted([x for x in s if len(x) > 0]))\nOptimum = {}", "score": 0.0}
{"id": "APPS_test-0077_56", "golden_code": "N = int( input() )\nA = list( map( int, input().split() ) )\ndp = [ [ - int( 1e9 ) for i in range( 2 ) ] for j in range( N + 1 ) ]\ndp[ 0 ][ 0 ] = 0\nfor i in range( N ):\n  for j in range( 2 ):\n    if abs( A[ i ] ) & 1:\n      dp[ i + 1 ][ j ] = max( dp[ i ][ j ], dp[ i ][ j ^ 1 ] + A[ i ] )\n    else:\n      dp[ i + 1 ][ j ] = max( dp[ i ][ j ], dp[ i ][ j ] + A[ i ] )\nprint( dp[ N ][ 1 ] )\n", "generated_code": "import sys\nn = int(input())\na = list(map(int, input().split()))\nsys.setrecursionlimit(10**6)\nans = -1\ncur = 0\nfor i in range(n):\n\tcur += a[i]\n\tif cur%2==0:\n\t\tans = cur\n\telif cur>ans:\n\t\tans=cur\nprint(ans)\n", "score": 0.0166}
{"id": "MBPP_137_3", "golden_code": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter", "generated_code": "def rombus_perimeter(a): \n\t\n\treturn 2*a-1", "score": 0.0}
{"id": "APPS_test-0077_62", "golden_code": "def max(a, b):\n\tif a > b:\n\t\treturn a\n\telse:\n\t\treturn b\n\ndef min(a, b):\n\tif a < b:\n\t\treturn a\n\telse:\n\t\treturn b\n\ndef __starting_point():\n\tn = int(input())\n\tA = input().split(' ')\n\tans, count, Min, Max = 0, 0, 1000000000, -100000000000\n\tfor i in range(n):\n\t\tnow = int(A[i])\n\t\tif now % 2 == 0:\n\t\t\tans += max(now, 0)\n\t\telse:\n\t\t\tif (now < 0):\n\t\t\t\tMax = max(Max, now)\n\t\t\telse:\n\t\t\t\tMin = min(Min, now)\n\t\t\t\tans += now\n\n\tif ans % 2 == 0:\n\t\tans = max(ans - Min, ans + Max)\n\tprint(ans)\n\n__starting_point()", "generated_code": "import sys\nn = int(input())\na = list(map(int, input().split()))\nans = -1\nfor i in range(n):\n\tif a[i] % 2 == 0:\n\t\tans = i\n\t\tbreak\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_138_2", "golden_code": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]", "generated_code": "def jacobsthal_lucas(n): \n\treturn (n * 2) - 2", "score": 0.0}
{"id": "APPS_test-0077_9", "golden_code": "n = int(input())\nnums = list(map(int, input().split()))\n\npos = [x for x in nums if x > 0]\nneg = [x for x in nums if x < 0]\n\ns1 = sum(pos)\nif s1 % 2 == 1:\n    print(s1)\n    return\n\npodd = [x for x in pos if x % 2 == 1]\nnodd = [x for x in neg if x % 2 == 1]\n\n\nif podd:\n    min_podd = min(podd)\n    if not nodd:\n        s1 -= min_podd\n    else:\n        max_nodd = max(nodd)\n        if min_podd + max_nodd > 0:\n            s1 += max_nodd\n        else:\n            s1 -= min_podd\nelse:\n    s1 += max(nodd)\n\n\nprint(s1)\n", "generated_code": "#!/usr/bin/env python3\n\nimport sys\n\ndef __starting_point():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\ts = sum(a)\n\tif s % 2 == 0:\n\t\tprint(s // 2)\n\telse:\n\t\tprint(-1)\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_142_1", "golden_code": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea", "generated_code": "import math\ndef surfacearea_sphere(r):\n\treturn round(math.pow(r,3))\nns = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\ns = [\"a','b','c\",\"d','e','f','g','h','i','j','k','l','m','n\",\"o','p','q','r','s','t','u','v','w','x','y','z\"]", "score": 0.0873}
{"id": "APPS_test-0081_55", "golden_code": "a, b = list(map(int,input().split()))\ndef gcd(x,y):\n\tif x == 0:\n\t\treturn y\n\tif y == 0:\n\t\treturn x\n\tif y > x:\n\t\ty,x = x,y\n\treturn gcd(x%y, y)\nif a > b:\n\ta, b = b, a\nk = b - a\ndzielniki = []\ni = 1\nwhile i ** 2 <= k:\n\tif k % i == 0:\n\t\tdzielniki.append(i)\n\t\tdzielniki.append(k // i)\n\ti+= 1\ngcdd = a * b / gcd(a,b)\nwynik = 0\n#print(dzielniki)\nfor d in dzielniki:\n\taa = a - (a % d) + d\n\tbb = b - (b % d) + d\n\t#print(aa,bb)\n\tif aa * bb // gcd(aa,bb) <= gcdd:\n\t\tif aa * bb // gcd(aa,bb) == gcdd:\n\t\t\twynik = min(d-(a%d),wynik)\n\t\telse:\n\t\t\tgcdd = aa * bb // gcd(aa,bb)\n\t\t\twynik = d-(a%d)\nprint(wynik)\n", "generated_code": "def main():\n\ta,b=map(int,input().split())\n\tif a==b:\n\t\tprint(0)\n\t\treturn\n\tmins=int(2*b+1)\n\tfor st in range(mins):\n\t\tif b%st==0:\n\t\t\tb//=st\n\t\t\tbreak\n\tif b%st!=0:\n\t\td=b//float(a)\n\t\tfor st in range((d-1)//a,-1,-1):\n\t\t\tif a%st==0():\n\t\t\t\tbreak\n\t\telse:\n\t\t\tprint(d)\n\t\t\treturn\n\tprint(0)\n\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "score": 0.017}
{"id": "MBPP_149_2", "golden_code": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) ", "generated_code": "def check_distinct(result):\n\tif result:\n\t\treturn f'{result[0]}{ \" \" * bool(result[1])}'\n\telse:\n\t\toutput = [str(item) for item in result]\n\t\treturn \"You have to know you you you you have to empie you are yourself\"", "score": 0.0}
{"id": "APPS_test-0081_56", "golden_code": "a, b = input().split()\na, b = int(a), int(b)\na, b = min(a, b), max(a, b)\n\ndef eu(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return eu(a%b, b)\n    return eu(a, b%a)\n\nopt = b - a\nfactor = []\ni = 1\nwhile i**2 < opt+1:\n    if opt % i == 0:\n        factor.append(i)\n        factor.append(int(opt/i))\n    i+=1\n\ntarget = a * b / eu(a, b)\ndrop = 0\n\nfor i in factor:\n    firstupd = a - (a % i) + i\n    secondupd = b - (b % i) + i\n    dres = firstupd * int(secondupd/eu(firstupd,secondupd))\n    if dres <= target:\n        if dres == target:\n            drop = min(i-(a%i),drop)\n        else:\n            target = dres\n            drop = i-(a%i)\nprint(drop)", "generated_code": "a,b=map(int,input().split())\nif a==b:\n\tprint(0)\n\treturn\np=int(a*b**(1/2))\nq=1\nwhile p%q!=0:\n\tq=(p)//q\n\tif q%a==0:\n\t\tprint(q)\n\t\treturn\n", "score": 0.0}
{"id": "MBPP_14_13", "golden_code": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)", "generated_code": "def sum_even_odd(list):\n\ts=0\n\tfor i in range(0,len(list)):\n\t\tif i&1:\n\t\t\ts=s+list[i]\n\treturn s\nh=lambda: hex(int(s,16))\nns = lambda x: hex(x)\nm = lambda x,y: x  (x&(1<<y))-1", "score": 0.0255}
{"id": "APPS_test-0103_21", "golden_code": "n = int(input())\na = [0]\na.extend(list(map(int, input().split())))\na.append(1001)\n\nlongest = 0\ni = 0\n\nwhile i < len(a):\n    j = i + 1\n    while j < len(a) and a[j-1] + 1 == a[j]:\n        j += 1\n    current = j - i - 2\n    longest = max(longest, current)\n    i = j\n\nprint(longest)\n", "generated_code": "n=int(input())\na=list(map(int,input().split()))\nprev=a[0]\ncount=0\nif n%2==0:\n\tfor i in range(1,n):\n\t\tif a[i]<=prev:\n\t\t\tcount+=1\n\t\tprev=a[i]\n\tprint(count)\nelse:\n\tif a[n-1]<=prev and a[n-2]<=prevPlayer:\n\t\tcount=2\n\t\tfor i in range((n-2)//2):\n\t\t\tif a[i+1]<=a[i+2]:\n\t\t\t\tcount+=1\n\t\t\tprevPlayer=a[i2]\n\t\tprint(count) #default you have to one line then+'.\n\telse:\n\t\tprint(0)\n", "score": 0.0086}
{"id": "MBPP_14_16", "golden_code": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)", "generated_code": "def sum_even_odd(list1, evenStack=[]):\n\tevenStack=[]\n\treturn (sum(evenStack))", "score": 0.0385}
{"id": "APPS_test-0103_7", "golden_code": "n = int(input())\na  = [0] + list(map(int, input().split())) + [1001]\nres = 1\ncur = 1\n\nfor i in range(n+1):\n    if a[i+1] - a[i] == 1:\n        cur += 1\n    else:\n        cur = 1\n    res  = max(res, cur)\nprint(max(0, res - 2))\n", "generated_code": "import sys\ninput = sys.stdin.readline\n\nn=int(input())\nA=list(map(int,input().split()))\n\n\"\"\"\nfor i in range(1,n):\n\t#print(i,A[i],i-1)\n\tif i>=n:\n\t\tprint(0)\n\t\treturn\n\tif A[i]>A[i-1]:\n\t\tprint(A[i])\n\t\treturn\n\"\"\"\n\nif n==1:\n\tprint(0)  \n\treturn\n\ndesired=A[-1]\nprev=A[0]\nanswer=0\nfor i in reversed(list(range(n-1))):\n\tif A<=A[i]:\n\t\tdiff=A[i]-prev\n\t\tanswer+=diff\n\t\tprev=A[i]\n\telse:\n\t\tprev= A", "score": 0.0}
{"id": "MBPP_14_4", "golden_code": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)", "generated_code": "def sum_even_odd(list1):\n\treturn sum([i for i in list1 if i%2 == 0])", "score": 0.0116}
{"id": "APPS_test-0110_19", "golden_code": "import sys\nfrom collections import Counter\n\nn = int(sys.stdin.readline().strip())\ngift = list(map(int, (sys.stdin.readline().split())))\n\nmaxi = -1\nmaxval = -1\n\nfor i, x in enumerate(gift):\n    if x >= 0:\n        x = -1 * x - 1\n        gift[i] = x\n    if abs(x) > maxval:\n        # print(f'Found that {x} has absolute value higher than {maxval}, at index {i}')\n        maxval = abs(x)\n        maxi = i\n\nif (n % 2) == 1:\n    # then make one number positive so that the product is at least positive\n    gift[maxi] = -1 * gift[maxi] - 1\n\nprint(' '.join([str(x) for x in gift]))\n\n", "generated_code": "n=int(input())\na=[int(i) for i in input().split()]\na.sort()\nx=[]\nfor i in range(n):\n\tx.append(a[i]*a[i-1])\nans=[]\nfor e in x:\n\tans.append(abs(e))\nans.sort()\nprint(*ans[::-1])\n", "score": 0.0}
{"id": "MBPP_14_6", "golden_code": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)", "generated_code": "def sum_even_odd(list1):\n\treturn sum([x for x in list1 if x%2 == 0])", "score": 0.0211}
{"id": "APPS_test-0103_72", "golden_code": "#!/usr/bin/env python3\nfrom typing import Dict, List, Tuple\n\n\ndef input_lst() -> List[int]:\n    return [int(x) for x in input().split()]\n\ndef print_out(res: List[int]):\n    print(' '.join([str(x) for x in res]))\n\n\ndef main():\n    n,  = (int(x) for x in input().split())\n    a = input_lst()\n\n    l = 0\n    l_max = 0\n    if a[0] == 1:\n        l+=1\n\n    for i in range(n-1):\n        if a[i+1] - a[i] == 1:\n            l+=1\n        else:\n            if l>0:\n                l_max = max(l, l_max)\n                l = 0\n\n    if l > 0:\n        if a[-1] == 1000:\n            l+=1\n        l_max = max(l, l_max)\n\n    print(max(l_max-1, 0))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "n=int(input())\nl=list(map(int,input().split()))\nans=0\nfor i in range(n-1):\n\tif l[i]>l[i+1]:\n\t\tcontinue\n\telse:\n\t\tans=max(ans,l[i+ 1]-l[i])\nprint(max(ans,0))\n", "score": 0.0722}
{"id": "MBPP_14_7", "golden_code": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)", "generated_code": "def sum_even_odd(list1):\n\treturn sum([x for x in list1 if x%2 ==0])", "score": 0.0376}
{"id": "APPS_test-0110_29", "golden_code": "n = int(input())\na = list(map(lambda a: (-int(a) - 1 if int(a) >= 0 else int(a)), input().split()))\n\nb = 1\nfor val in a:\n    if val < 0:\n        b *= -1\n\nif b < 0:\n    i_max = 0\n    for i in range(n):\n        if abs(a[i_max]) < abs(a[i]):\n            i_max = i\n    a[i_max] =  -a[i_max] - 1\n\nprint(\" \".join(map(str, a)))", "generated_code": "n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):b.append(-a[i])\nans=[]\nfor d in range(n-1,0,-1):\n\te=10**6\n\tfor i in range (n-d):\n\t\te=min(e,a[i]*a[i+d])\n\tans.append(e)\nprint(*ans)\n", "score": 0.0}
{"id": "MBPP_157_1", "golden_code": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ", "generated_code": "def is_octagonal(n):\n\t\n\ts=n%2\n\treturn not s or s==0", "score": 0.0}
{"id": "APPS_test-0112_37", "golden_code": "def gen(cur, used, x):\n    pos.add(cur)\n    if x == n:\n        return\n    for j in range(n):\n        if not used[j]:\n            for i in a[j]:\n                if i != 0 or x != 0:\n                    used[j] = True\n                    gen(cur * 10 + i, used, x + 1)\n                    used[j] = False\n\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\npos = set()\ngen(0, [False] * n, 0)\nx = 1\nwhile x in pos:\n    x += 1\nprint(x - 1)\n", "generated_code": "n = int(input())\na = [list(map(int, input().split())) for i in range(n)]\na = [i[::-1] for i in a]\nu, d = a[0], a[1]\np = 1\nfor i in range(1, n):\n\tx = max(u[i], d[i])\n\tif x!= 1:\n\t\tp += 1\n\t\tif p > 9:\n\t\t\treturn int(str(p) + str(x))\n\telse:\n\t\tu[i], v = p, x\n\t\tp += int(str(x))\n\nprint(u[-1])\n", "score": 0.0}
{"id": "MBPP_15_3", "golden_code": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter", "generated_code": "def parallelogram_perimeter(b,h):\n\treturn h*(h-1)/2*h + h*(h -1)/2*(h - h - 1)\nss = [1, 2, 3]\ns = sum(ss)", "score": 0.0542}
{"id": "APPS_test-0112_55", "golden_code": "from itertools import product as comb\nfrom itertools import permutations as perm\nk = int(input())\ncubes = [input().split(\" \") for i in range(k)]\nnums = set()\nfor n in range(1, k + 1):\n    for p in perm(list(range(k)), n):\n#        print(p)\n        # p is (0, 2, 1) order of cubes\n        for c in comb(list(range(6)), repeat=n):\n #           if p == (1, 0):\n#                print(\"--\" + str(c))\n            nn = \"\"\n            for i in range(n):\n  #              if p == (1, 0):\n   #                 print(\"----\" + str(p[i]) + \"-\" + str(c[i]) + \"-\" + cubes[p[i]][c[i]])\n                nn += cubes[p[i]][c[i]]\n            nums.add(int(nn))\n#print(\"fuckwrvbwoe\")\n#print(\"yes\" if 12 in nums else \"no\")\n#print(nums)\nans = 0\nwhile ans + 1 in nums:\n    ans += 1\nprint(ans)\n", "generated_code": "n = int(input())\na = [list(map(int, input().split())) for i in range(n)]\nans = 0\nwhile a:\n\tt = a[-1][0]\n\ta.pop()\n\tans = max(ans, max(t))\n\tif max(a) == t:\n\t\tbreak\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_164_1", "golden_code": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result", "generated_code": "def access_elements(l: int, r: int):\n\tif l > r:\n\t\treturn 0\n\treturn self._multiply(self.get(l), r)", "score": 0.0}
{"id": "APPS_test-0124_12", "golden_code": "x, y, z = map(int, input().split())\na, b, c = map(int, input().split())\nbad = False\nif a >= x and a + b >= x + y and a + b + c >= x + y + z:\n\tprint('YES')\nelse:\n\tprint('NO')", "generated_code": "x,y,z = map(int,input().split())\na,b,c = map(int,input().split())  \nreturn \"NO\" if a<b or b<c or c<a else \"YES\"\n", "score": 0.0}
{"id": "MBPP_16_17", "golden_code": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result", "generated_code": "def div_of_nums(nums,m,n):\n\treturn [i for i in nums if i%m == 0 and i%n == 0]\nh = lambda x, y: sum(x, y)", "score": 1.0}
{"id": "APPS_test-0143_35", "golden_code": "#!/usr/bin/env python3\n\nfrom collections import Counter\n\ntry:\n    while True:\n        n = int(input())\n        a = sorted(map(int, input().split()))\n        t = 1\n        for x in a:\n            t = min(t, x) + 1\n\n        print(t)\n\nexcept EOFError:\n    pass\n", "generated_code": "def main():\n\tn = int(input())\n\tl = list(map(int, input().split()))\n\thelper = [0] * n\n\tfor i in range(n):\n\t\thelper[i] = max(l[i], helper[i - 1])\n\tprint(max(helper))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0056}
{"id": "MBPP_16_2", "golden_code": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result", "generated_code": "def div_of_nums(nums,m,n):\n\treturn [i for i in nums if i%m == 0 and i%n == 0]", "score": 1.0}
{"id": "APPS_test-0149_16", "golden_code": "R=lambda:list(map(int,input().strip().split()))\n[x,y,l,r]=R()\na=list()\nb=list()\ncur=1\nwhile(cur<r):\n    a.append(cur) \n    cur*=x \ncur=1\nwhile(cur<r):\n    b.append(cur) \n    cur*=y \n    \ns=set()\ns.add(l-1)\ns.add(r+1)\nfor p in a:\n    for q in b:\n        s.add(p+q) \ns=list(s)\ns.sort()\nml=0\nfor i in range(len(s)-1):\n    if s[i]>=l-1 and s[i+1]<=r+1:\n        ml=max(ml,s[i+1]-s[i]-1)\nprint(ml)", "generated_code": "x, y, l, r = list(map(int, input().split()))\n\nidx = max(0, l - x * 2 - r)\n\nprint(max(0, idx))\n", "score": 0.0072}
{"id": "MBPP_16_25", "golden_code": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result", "generated_code": "def div_of_nums(nums,m,n):\n\tans = []\n\tfor i in nums:\n\t\tif i % m == 0 and i % n == 0:\n\t\t\tans.append(i)\n\treturn ans\nh = lambda x, y: x % y == 0", "score": 1.0}
{"id": "APPS_test-0158_24", "golden_code": "n = int(input())\n\nl=[int(i) for i in input().split()]\n\nl.sort()\n\nif l[n]>l[n-1]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "generated_code": "def main():\n\tn = int(input())\n\ta = sorted(map(int, input().split()))\n\tk = n // 2\n\tt = 0\n\tfor i in range(k):\n\t\tif a[i] > a[k - i]:\n\t\t\tt += 1\n\tfor ik in range(k, n):\n\t\tif A[kk] > a[kk - k]:\n\t\t\tt -= 1\n\tprint(['YES', 'NO'][t % 2 == 0])\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_16_27", "golden_code": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result", "generated_code": "def div_of_nums(nums,m,n):\n\treturn [i for i in nums if i%m == 0 and i%n == 0]\nll = [i for l in locals() for i in l]", "score": 1.0}
{"id": "APPS_test-0162_2", "golden_code": "n,k = [int(x) for x in input().split()]\nA = [int(x) for x in input().split()]\n\nh = 100000000000\nfor a in A:\n    if k%a==0:\n        h = min(h,k//a)\nprint(h)\n", "generated_code": "n,k = map(int,input().split())\na = list(map(int,input()))\n\na.sort()\n\nans = 0\n\nfor i in range(n):\n\tif a[i] == 1:\n\t\tans += (i+1)*k\n\t\tk = 0\n\t\t\n\telse:\n\t\tk += 1\n\nprint(ans+max(k,n-1))\n", "score": 0.0408}
{"id": "MBPP_16_32", "golden_code": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result", "generated_code": "def div_of_nums(nums,m,n):\n\tans = []\n\tfor i in nums:\n\t\tif i % m == 0 and i % n == 0:\n\t\t\tans.append(i)\n\treturn ans\n\n\n\n\n\n\n\n\nh = {}", "score": 1.0}
{"id": "APPS_test-0162_33", "golden_code": "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\n\nans = 0\nfor i in a:\n    if k % i == 0:\n        ans = max(ans, i)\n\nprint(k // ans)\n", "generated_code": "n, k = list(map(int, input().split()))\na = list(map (int, input().strip().split())) + [0]\n\nans = sum([max(0, a[i] - k) for i in range(n)])\nprint(ans)\n", "score": 0.0046}
{"id": "MBPP_16_4", "golden_code": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result", "generated_code": "def div_of_nums(nums,m,n):\n\treturn [x for x in nums if x%m == 0 and x%n == 0]", "score": 1.0}
{"id": "APPS_test-0172_6", "golden_code": "def f():\n    n=int(input())\n    a=[0]*5\n    b=[0]*5\n\n    X = [int(x) for x in input().split()]\n    for x in X:\n        a[x-1]+=1\n\n    X = [int(x) for x in input().split()]\n    for x in X:\n        b[x-1]+=1\n\n    for i in range(5):\n        if (a[i]+b[i])%2==1:\n            print('-1')\n            return\n\n    x=0\n    for i in range(5):\n        x += abs(a[i]-b[i])/2\n\n    print(int(x/2))\n\nf()\n", "generated_code": "n = int(input())\n\na = list(map(int, input().split()))\nb = list(map((int), input().split()));\na.sort(); b.sort()\n\ni = 0; j = 0\ncnt = 0\nwhile i < n and j < n:\n\tif a[i] == b[j]:\n\t\tcnt += 1\n\t\ti += 1; j += 1\n\telse:\n\t\tif cnt > 0:\n\t\t\tcnt -= 1\n\t\telse:\n\t\t\tbreak\n\nif cnt >0:\n\tprint(-1)\nelse:\n\tprint(cnt)\n", "score": 0.0}
{"id": "MBPP_16_9", "golden_code": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result", "generated_code": "def div_of_nums(nums,m,n):\n\treturn [x for x in nums if x%m == 0 and x%n == 0]\nh = lambda x,y: x%y == 0", "score": 1.0}
{"id": "APPS_test-0174_21", "golden_code": "def f(a):\n    if len(a) == 1:\n        if a[0] == 0:\n            print(\"YES\\n0\")\n            return\n        else:\n            print(\"NO\")\n            return\n    if a[-1] == 1:\n        print(\"NO\")\n        return\n    if a[-2] == 1:\n        print(\"YES\")\n        print(\"->\".join(str(x) for x in a))\n        return\n    elif len(a) == 2:\n        print(\"NO\")\n        return\n    elif len(a) >= 3 and a[-3] == 0:\n        a[-3] = '(0'\n        a[-2] = '0)'\n        print(\"YES\\n\" + \"->\".join(str(x) for x in a))\n        return      \n    for i in range(len(a) - 3, -1, -1):\n        if a[i] == 0:\n            a[i] = '(' + str(a[i])\n            a[i+1] = '(' + str(a[i+1])\n            a[-2] = '0))'\n            print(\"YES\\n\" + \"->\".join(str(x) for x in a))\n            return\n    print(\"NO\")\n    return\n\nn = int(input())\na = list(int(x) for x in input().split())\nf(a)", "generated_code": "n = int(input())\na = list(map(int, input().split()))\n\ntry:\n\twhile True:\n\t\tS = input()\n\t\twhile S!= ')':\n\t\t\tif S[-1] == '(':\n\t\t\t\tS = S[:-1]\n\t\t\telse:\n\t\t\t\tbreak\n\t\tsign = -1\n\t\twhile S.count(')') > 1:\n\t\t\tS = S[1:]\n\t\t\tsign *= -1\n\t\tif S == '':\n\t\t\tprint('NO')\n\t\telse:\n\t\t\tprint ('YES')\n\t\t\tprint(S)\nexcept:\n\tpass\n", "score": 0.0}
{"id": "MBPP_172_2", "golden_code": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max", "generated_code": "def max_product_tuple(n): return (lambda c: int(c) if c.isdecimal() else 1 + cc(c.__eq__(n)) if n else 1)", "score": 0.0}
{"id": "APPS_test-0174_9", "golden_code": "def f(a):\n    if len(a) == 1:\n        if a[0] == 0:\n            print(\"YES\\n0\")\n            return\n        else:\n            print(\"NO\")\n            return\n    if a[-1] == 1:\n        print(\"NO\")\n        return\n    if a[-2] == 1:\n        print(\"YES\")\n        print(\"->\".join(str(x) for x in a))\n        return\n    elif len(a) == 2:\n        print(\"NO\")\n        return\n    elif len(a) >= 3 and a[-3] == 0:\n        a[-3] = '(0'\n        a[-2] = '0)'\n        print(\"YES\\n\" + \"->\".join(str(x) for x in a))\n        return      \n    for i in range(len(a) - 3, -1, -1):\n        if a[i] == 0:\n            a[i] = '(' + str(a[i])\n            a[i+1] = '(' + str(a[i+1])\n            a[-2] = '0))'\n            print(\"YES\\n\" + \"->\".join(str(x) for x in a))\n            return\n    print(\"NO\")\n    return\n\nn = int(input())\na = list(int(x) for x in input().split())\nf(a)", "generated_code": "def main():\n\tn = int(input())\n\taa = list(map(int, input().split()))\n\tbb = []\n\tfor i in range(n):\n\t\tif aa[i] == 0:\n\t\t\tcontinue\n\t\telif aa[~i] == 0 and aa[~~i]!= 0:\n\t\t\tbb.append(aa[~i])\n\t\telse:\n\t\t\tbb_.append(a)\n\tbb.sort()\n\tif len(bb) > 1 and bb[0] == bb[-1]:\n\t\tprint(\"NO\")\n\telif len(bb):\n\t\tprint(\"YES\")\n\t\tprint(*bb[:-1])\n\telse:\n\t\tprint(\"^\")\n\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_17_19", "golden_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "generated_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \n\treturn n & (n-1) == 0 or (n-r) & (n+1) == (l|r)", "score": 0.5384}
{"id": "APPS_test-0175_3", "golden_code": "def solve(x, y):\n    if (x == 0 or y == 0):\n        return (x, y)\n    if (x >= 2 * y and y != 0):\n        x %= 2 * y\n    if (y >= 2 * x and x != 0):\n        y %= 2 * x\n    if (x == 0 or y == 0):\n        return (x, y)\n    if (x < 2 * y and y < 2 * x):\n        return (x, y)\n    return solve(x, y)\n\nx, y = list(map(int, input().split()))\nans = solve(x, y)\nprint(ans[0], ans[1])\n", "generated_code": "n, m = map(int, input().split())\n\na = -2 * n\nb = 2 * m\n\na = max(a, 0)\nb = max(b, 0)\n\nprint(a, b)\n", "score": 0.0}
{"id": "MBPP_17_20", "golden_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "generated_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \n\treturn bin(n)[2] == bin(l)[2] and bin(r)[2] in \"02468\"", "score": 0.5461}
{"id": "APPS_test-0175_30", "golden_code": "def solve(x, y):\n    if (x == 0 or y == 0):\n        return (x, y)\n    if (x >= 2 * y and y != 0):\n        x %= 2 * y\n    if (y >= 2 * x and x != 0):\n        y %= 2 * x\n    if (x == 0 or y == 0):\n        return (x, y)\n    if (x < 2 * y and y < 2 * x):\n        return (x, y)\n    return solve(x, y)\n\nx, y = list(map(int, input().split()))\nans = solve(x, y)\nprint(ans[0], ans[1])\n", "generated_code": "import sys\n\ndef main():\n\tn, m = list(map(int, sys.stdin.readline().split()))\n\tif n == 0 or m == 0:\n\t\tprint(0, 0)\n\t\treturn 0\n\ta, b = 0, 0\n\tx, y = 1, -1\n\twhile True:\n\t\ta += (2 * m if m > n else m)\n\t\tb += (2 * n if n > m else n)\n\t\tif a >= b:\n\t\t\tx = len(bin(a)) - 2\n\t\t\tb = a\n\t\telse:\n\t\t\tx += 1\n\t\t\tb = b - 2 * a\n\t\tif b >= x:\n\t\t\ty = len(bin((b - x) // 2)) - 1\n\t\t\tbreak\n\tprint(a-1, b - 1)\n\nmain()\n", "score": 0.0066}
{"id": "MBPP_17_21", "golden_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "generated_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \n\treturn bin(n)[2] == bin(l)[2] and bin(r)[2] in '02468'", "score": 0.5452}
{"id": "APPS_test-0175_65", "golden_code": "a, b = map(int, input().split())\nwhile a != 0 and b != 0:\n\tif a >= 2 * b:\n\t\ta %= 2 * b\n\telif b >= 2 * a:\n\t\tb %= 2 * a\n\telse:\n\t\tbreak\nprint(a, b)", "generated_code": "import math\n\ndef __starting_point():\n\tn, m = list(map(int, input().split()))\n\ta = math.floor(n/2)\n\tb = math.floor((m/2)**2)\n\tprint(a, b)\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_17_29", "golden_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "generated_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \n\treturn bin(n)[2:].find(str(bin(n)[3:])) == -1\nh = lambda x: int(x, 2) > 0", "score": 0.6596}
{"id": "APPS_test-0175_9", "golden_code": "n, m = [int(i) for i in input().split()]\n\nwhile n != 0 and m != 0:\n    if n >= 2 * m:\n        k = n // (2 * m)\n        n -= 2 * m * k\n    elif m >= 2 * n:\n        k = m // (2 * n)\n        m -= 2 * n * k\n    else:\n        break\nprint(n, m)", "generated_code": "a,b = map(int,input().split())\nfor i in range(0,110000):\n\tif a>=2*b:\n\t\tprint(b,a-2*b)\n\t\tbreak\n\telif a<b:\n\t\tb=a\n\t\ta=b\n\t\tb=int(b/2)\n\t\tcontinue\n\telse:\n\t\ta=a\n\t\tb=0\n\t\tbreak\nprint(a,b)\n", "score": 0.0}
{"id": "MBPP_17_23", "golden_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "generated_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \n\treturn bin(n)[2:] in list(bin(n)[3:])", "score": 0.5427}
{"id": "APPS_test-0186_8", "golden_code": "3\n\n(n, m) = tuple(map(int, input().split()))\n\na = 2*n\nb = 3*m\nc = n//3\nd = m//2\nwhile c > 0 and d > 0:\n    if a > b:\n        b += 3\n        c -= 1\n        d -= 1\n        if b%6 == 0:\n            d +=1\n    else:\n        a += 2\n        c -= 1\n        d -= 1\n        if a%6 == 0:\n            c += 1\n    #print(a,b,c,d)\nprint(str(max(a,b)))\n", "generated_code": "def main():\n\tn, m = list(map(int, input().split()))\n\tif n * m <= n + m:\n\t\treturn n * m\n\telse:\n\t\treq = (n * m) // 2\n\t\t", "score": 0.0}
{"id": "MBPP_17_25", "golden_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "generated_code": "def all_Bits_Set_In_The_Given_Range(n, x, y):\n\treturn x*(n//2)*(1+y)//2", "score": 0.0208}
{"id": "APPS_test-0192_14", "golden_code": "y, x = list(map(int, input(). split()))\na = x; b = x; c = x; k = 0\nwhile a < y or b < y or c < y:\n    if a < c+b-1:\n        a = c+b-1\n        k += 1\n        if a >= y and b >= y and c >= y:\n            break\n    if b < a+c-1:\n        b = a+c-1\n        k += 1\n        if a >= y and b >= y and c >= y:\n            break\n    if c < a+b-1:\n        c = a+b-1\n        k += 1\n        if a >= y and b >= y and c >= y:\n            break\nprint(k)\n", "generated_code": "x, y = map(int, input().split())\n\nt = int(x ** 2 + y ** 2)\n\nif x > y:\n\tt -= y - x\n\twhile y > x:\n\t\tt -= x - y\n\t\ty -= x\n\tt += y\n\tprint(t)\n\treturn\nelif y < x:\n\tt(-y - x)\n\twhile x > 0:\n\t\tt(-x - y)\n\t\ty -= 1\n\tt += x\n\tprint(i)\n\treturnt\n\nprint(t) if t >= 0 else print(abs(t))\n", "score": 0.0}
{"id": "MBPP_17_3", "golden_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "generated_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \n\treturn l>n and r<n", "score": 0.5351}
{"id": "APPS_test-0216_52", "golden_code": "n = int(input())\nv = [int(x) for x in input().split()]\nans = 0\nfor x in v:\n\tans += x if x > 0 else -x\nprint(ans)\n", "generated_code": "def main():\n\tn, l = int(input()), list(map(int, input().split()))\n\tb, c = l[0], l[-1]\n\tm = [b, c]\n\tfor i in range(2, n):\n\t\tm = [b + c, m[i - 2]] + m\n\tprint(max(m))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0022}
{"id": "MBPP_17_36", "golden_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "generated_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \n\treturn bin(n).count('1')>0", "score": 0.4661}
{"id": "APPS_test-0221_12", "golden_code": "\nn, k = map(int, input().split())\n\nif n <= 2 * k + 1:\n\tprint(1)\n\tprint(n // 2 + 1)\n\treturn\n\nl = 2 * (k + 1)\nr = 2 * (2 * k + 1)\ncnt = 0\nwhile not (l <= n <= r):\n\tcnt += 1\n\tl += 2 * k + 1\n\tr += 2 * k + 1\n\nprint(cnt + 2)\n\nm = n - cnt * (2 * k + 1)\na = m // 2\nans = [a - k - 1]\nr = ans[0] + k\n\nwhile r < n - 1:\n\tif r + k + 1 < n:\n\t\tans.append(r + k + 1)\n\tr = ans[-1] + k\n\nfor i in ans:\n\tprint(i + 1, end=' ')\nprint()", "generated_code": "import sys\ninput = sys.stdin.readline\n\nn,k = map(int,input().split())\n\nM = [0]*n\n\nfor i in range(n):\n\tM[i] = i\n\n\nANS = [0]\n\nfor i,j in enumerate(M):\n\tif j == 0:\n\t\tANS.append(0)\n\t\tcontinue\n\tANS.append(min(ANS[-1], j-1))\n\tM[j] = max(M[j], j-1)\n\nprint(len(ANS))\nprint(*ANS)\n", "score": 0.0}
{"id": "MBPP_17_8", "golden_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "generated_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \n\treturn l>0 and r<n", "score": 0.4692}
{"id": "APPS_test-0221_15", "golden_code": "n, k = map(int, input().split())\na = 1000000\naf = []\nfor i in range(k+1):\n    f = []\n    for j in range(i+1, n+1, 2*k+1):\n        f.append(j)\n    if i+1 > n:\n        break\n    if f[-1]+k >= n:\n        if a > len(f):\n            a = len(f)\n            af = f[:]\nprint(a)\nprint(*af)", "generated_code": "n, k = list(map(int, input().split()))\n\nans = []\n\nfor i in range(k):\n\tans.append(n-i-1)\n\npos = 0\nfor i in sorted(range(n-k), key=lambda x: -(abs(x-k))):\n\tif i > 0:\n\t\tpos = i\n\telse:\n\t\tpass\n\t\t\nans.append(pos)\n\nprint(len(ans))\nprint(' '.join(map(str, ans)))\n", "score": 0.0}
{"id": "MBPP_17_38", "golden_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "generated_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \n\treturn bin(n)[2:] == list(range(l,r))", "score": 0.6}
{"id": "APPS_test-0221_37", "golden_code": "s=input().split()\nn,k=int(s[0]),int(s[1])\nl=2*k+1\nm=n%l\nif m==0:\n    m=2*k+1\nif m<=k+1:\n    pos=1\nelse:\n    pos=m-k\nres=n//l\nif n%l!=0:\n    res+=1\nprint(res)\nfor i in range(res):\n    print(pos+l*i,end=\" \")\nprint(\"\")\n", "generated_code": "import sys\ninput = sys.stdin.readline\n\nn,k=list(map(int,input().split()))\nX=n//2+1\nY=1\nR=0\n\nfor i in range(1,X):\n\tif Y>n:\n\t\tbreak\n\tR+=1\n\tY=min(Y,n-X+i)\n\tX=X-1\n\t\nprint(R)\nprint(*[1]*Y)\n", "score": 0.0042}
{"id": "MBPP_17_6", "golden_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "generated_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \n\treturn n & (n-1) == 0 and (r&n)!= 0\nns = [0,1]\ns = [1, 0]\nt = [0]\np = [0,-1]\nfor d in ns:\n\tfor i in range(2**d):\n\t\tt.append(t[-1] ^ (i&1))\n\tp.append(sum(t))\nfrom math import log", "score": 0.48}
{"id": "APPS_test-0224_52", "golden_code": "s = input()\ns = s + 'A'\nm = 0\ncur = -1\nwhile cur != len(s)-1:\n    i = cur+1\n    while s[i] not in ['A','E','Y','U','I','O']:\n        i+=1\n    m = max(m,i-cur)\n    cur = i\nprint(m)\n", "generated_code": "def solve(s):\n\ti = s[0]\n\tcount = 0\n\tfor c in s[1:]:\n\t\tif c in 'aeiouyAEIOUY':\n\t\t\tcount += 1\n\t\telse:\n\t\t\tcount = 0\n\t\ti = c\n\treturn count\n\ns = input()\nprint(solve(s))\n", "score": 0.0004}
{"id": "MBPP_17_9", "golden_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "generated_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \n\treturn bin(n)[2:] == bin(l)[2:] or n & (n - 1) == 0\nh = lambda x: hex(x)[2:]", "score": 0.607}
{"id": "APPS_test-0224_69", "golden_code": "field = \"A\" + input() + \"A\"\nletters = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\"]\nans = 1\nlast_let = 0\nfor i in range(len(field)):\n    let = field[i]\n    if let in letters:\n        ans = max(ans, i - last_let)\n        last_let = i\nprint(ans)", "generated_code": "import sys\n\ndef main():\n\ts = sys.stdin.readline().strip()\n\tn = len(s)\n\tres = 1\n\tfor i in range(1, n):\n\t\tchar = s[i]\n\t\tpos = i\n\t\tif char in 'AEIOUY':\n\t\t\tpos = pos - 1\n\t\tif s[pos] == char:\n\t\t\tres = max(res, i - pos)\n\tprint(res)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0262}
{"id": "MBPP_187_3", "golden_code": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0", "generated_code": "def last_Digit_Factorial(n):\n  x = n//2\n  y = n*(n+1)\n  \n  z = sum([1 for c in range(1, x+1) if c == p])\n  \n  return z", "score": 0.0}
{"id": "APPS_test-0251_4", "golden_code": "n,k = map(int,input().split())\narr = list(map(int,input().split()))\n\narr.sort()\nheights = []\ncounter=arr[0]\nfor i in range(n):\n    while arr[i]>=counter:\n        heights.append(n-i)\n        counter+=1\n\nheights.reverse()\n\n\nans=0\ncontainer=0\nfor i in range(len(heights)-1):\n    if heights[i]+container<=k:\n        container+=heights[i]\n    else:\n        container=heights[i]\n        ans+=1\nif container>0:ans+=1\n\nprint(ans)", "generated_code": "n,k=list(map(int,input().split()))\na=list(map (int,input().strip().split()));t=[]\nfor i in range(n):\n\tt.append(a[i])\n\tfor j in range(i+1,n):\n\t\tt.append(t[-1]+a[j])\nans=t[0]\nfor i in t:\n\tif(i<=k):\n\t\tans=min(ans,i)\nprint(ans)\n", "score": 0.042}
{"id": "MBPP_185_1", "golden_code": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)", "generated_code": "def sum_average(name):\n\ta=name*(10)\n\treturn int(a)", "score": 0.0}
{"id": "APPS_test-0251_25", "golden_code": "n, m = map(int, input().split())\nb = [0 for i in range(200002)]\nc = [0 for i in range(200002)]\nhmax = 0\nhmin = 200005\na = list(map(int, input().split()))\nfor i in range(n):\n    hmax = max(hmax, a[i])\n    hmin = min(hmin, a[i])\n    c[a[i]] += 1\nb[200000] = c[200000]\nfor i in range(200000 - 1, -1, -1):\n    b[i] = b[i + 1] + c[i]\ncur = hmax\nans = 0\n#print(b[:5])\nwhile cur > hmin:\n    cnt = 0\n    while cnt <= m:\n        if (cnt + b[cur] <= m) and cur > hmin:\n            cnt += b[cur]\n            cur -= 1\n        else:\n            ans += 1\n            cnt = 0\n            break\n        #print(cur, cnt)\n    if cur == hmin:\n        break\nprint(ans)", "generated_code": "n,k = list(map(int,input().split()))\nh = list(map (int,input().strip().split()))\n\n\ndp = [1]*n\n\nfor i in range(1,n):\n\tdp[i]=dp[i-1]+min(h[i],dp[i- 1])\n\nprint(dp[-1])\n", "score": 0.0027}
{"id": "MBPP_18_1", "golden_code": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "def is_Isomorphic(str1,str2):          \n\treturn str1==str2", "score": 0.9479}
{"id": "APPS_test-0251_7", "golden_code": "def ii():\n    return int(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\n\nn, k = mi()\nh = li()\nm = max(h)\nf = [0] * (m + 1)\nfor hi in h:\n    f[hi] += 1\nfor i in range(m - 1, 0, -1):\n    f[i] += f[i + 1]\n\nans = 0\ni = m\nwhile i > 0:\n    if f[i] == n:\n        break\n    j = i\n    cur = 0\n    while j > 0:\n        if cur + f[j] > k:\n            break\n        cur += f[j]\n        j -= 1\n    ans += 1\n    i = j\nprint(ans)\n", "generated_code": "n, k = list(map(int, input().split()))\na = list(map (int, input().lower()))\na.sort()\nd = 0\nfor i in range(n):\n\tif a[i] > i:\n\t\td += 1\n\t\tcontinue\n\telse:\n\t\ti -= a[i]\n\t\twhile i < n and a[i] == a[i + 1]:\n\t\t\ti += 1\n\t\td += i\nprint(d)\n", "score": 0.0036}
{"id": "MBPP_18_11", "golden_code": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "def is_Isomorphic(str1,str2):          \n\treturn str1 == str2\n\nh = lambda x,y: True if (x and y) == x and (y and x and y) else False", "score": 0.9441}
{"id": "APPS_test-0267_20", "golden_code": "\n\n\nl, r, k =list(map(int,input().split()))\n\nd = {i:2**i for i in range(10)}\n\ncache = {}\n\ndef can(i, m):\n    return d[i] & m\n\ndef calc(m):\n    b = 1\n    c = 0\n    for i in range(10):\n        if b & m:\n            c += 1\n        b *= 2\n\n    return c\n\ndef sm(ln, k, m, s='', first=False):\n    if ln < 1:\n        return 0, 1\n\n    if (ln, k, m, s, first) in cache:\n        return cache[(ln, k, m, s, first)]\n\n    ans = 0\n    count = 0\n    base = 10 ** (ln-1)\n\n    use_new = calc(m) < k\n\n    if s:\n        finish = int(s[0])+1\n    else:\n        finish = 10\n\n    for i in range(finish):\n        if use_new or can(i, m):\n            ss = s[1:]\n            if i != finish-1:\n                ss = ''\n            nm = m | d[i]\n            nfirst = False\n            if i == 0 and first:\n                nm = m\n                nfirst = True\n            nexta, nextc = sm(ln-1, k, nm, ss, nfirst)\n            ans += base * i * nextc + nexta\n            count += nextc\n\n#    print(ln, k, m, s, first, ans, count)\n    cache[(ln, k, m, s, first)] = (ans, count)\n\n    return ans, count\n\ndef call(a, k):\n    s = str(a)\n    return sm(len(s), k, 0, s, True)[0]\n\n\n#print(call(r, k) - call(l-1, k))\nprint((call(r, k) - call(l-1, k)) % 998244353)\n", "generated_code": "\nimport sys\ninput = sys.stdin.readline\n\nMOD = 998244353\n\nl, r, k = map(int, input().split())\nout = 0\nadd = 1\nfor i in range(1, 11):\n\tfor j in range(10):\n\t\tout += add\n\t\tadd *= 9\n\t\tadd %= MOD\n\nout *= (r - l + 1)\nprint(out % MOD)\n", "score": 0.0}
{"id": "MBPP_18_15", "golden_code": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "def is_Isomorphic(str1, str2): return str1 == \"\".join(str2.split())", "score": 0.9443}
{"id": "APPS_test-0267_8", "golden_code": "\n\n\nl, r, k =list(map(int,input().split()))\n\nd = {i:2**i for i in range(10)}\n\ncache = {}\n\ndef can(i, m):\n    return d[i] & m\n\ndef calc(m):\n    b = 1\n    c = 0\n    for i in range(10):\n        if b & m:\n            c += 1\n        b *= 2\n\n    return c\n\ndef sm(ln, k, m, s='', first=False):\n    if ln < 1:\n        return 0, 1\n\n    if (ln, k, m, s, first) in cache:\n        return cache[(ln, k, m, s, first)]\n\n    ans = 0\n    count = 0\n    base = 10 ** (ln-1)\n\n    use_new = calc(m) < k\n\n    if s:\n        finish = int(s[0])+1\n    else:\n        finish = 10\n\n    for i in range(finish):\n        if use_new or can(i, m):\n            ss = s[1:]\n            if i != finish-1:\n                ss = ''\n            nm = m | d[i]\n            nfirst = False\n            if i == 0 and first:\n                nm = m\n                nfirst = True\n            nexta, nextc = sm(ln-1, k, nm, ss, nfirst)\n            ans += base * i * nextc + nexta\n            count += nextc\n\n#    print(ln, k, m, s, first, ans, count)\n    cache[(ln, k, m, s, first)] = (ans, count)\n\n    return ans, count\n\ndef call(a, k):\n    s = str(a)\n    return sm(len(s), k, 0, s, True)[0]\n\n\n#print(call(r, k) - call(l-1, k))\nprint((call(r, k) - call(l-1, k)) % 998244353)\n", "generated_code": "def main():\n\tl, r, k = list(map(int, input().split()))\n\tmod = 998244353\n\tp = 10 ** 18\n\tprint(mid(l + r, k) - mid(l, d) + mid(r, d) - mid(q, d) + (q % mod - 998244353) for d in range(9))\n\n\ndef mid(x, y):\n\treturn (x % mod - 9\t\t\t\t\t\t(y % mod - 9) // 4) % mod\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_18_18", "golden_code": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "def is_Isomorphic(letter, possible):\n\ts = '0' + possible\n\treturn True if s in possible else False", "score": 0.7464}
{"id": "APPS_test-0291_49", "golden_code": "a,b=list(map(int,input().split()))\ni=0\nwhile a<=b:\n    a*=3\n    b*=2\n    i+=1\nprint(i)\n", "generated_code": "a,b = list(map(int, input().split()))\nc = 0\nfor i in range(1,1000):\n\tif i*i > a:\n\t\tc += 1\nprint(c)\n", "score": 0.0}
{"id": "MBPP_18_25", "golden_code": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "def is_Isomorphic(str1,str2):          \n\treturn str1 == str2\n\nUSTLArl = str.startswith\nfrom sys import stdin, stdout", "score": 0.9297}
{"id": "APPS_test-0302_20", "golden_code": "\"\"\"\nCodeforces Testing Round 10 Problem C\n\nAuthor  : chaotic_iak\nLanguage: Python 3.3.4\n\"\"\"\n\ndef read(mode=2):\n    # 0: String\n    # 1: List of strings\n    # 2: List of integers\n    inputs = input().strip()\n    if mode == 0:\n        return inputs\n    if mode == 1:\n        return inputs.split()\n    if mode == 2:\n        return [int(x) for x in inputs.split()]\n\ndef write(s=\"\\n\"):\n    if isinstance(s, list): s = \" \".join(s)\n    s = str(s)\n    print(s, end=\"\")\n\n################################################### SOLUTION\ndef g(n):\n    return (10**n-1)//9\n\ndef solve(n):\n    if n <= 6: return n\n    if 7 <= n <= 11: return 13-n\n    l = 1\n    while g(l) < n: l += 1\n    l -= 1\n    gl = g(l)\n    a = n\n    res1 = 0\n    res1 += (a // gl) * l\n    a %= gl\n    res1 += solve(a)\n    b = g(l+1) - n\n    res2 = l+1\n    res2 += (b // gl) * l\n    b %= gl\n    res2 += solve(b)\n    return min(res1, res2)\n\nn, = read()\nprint(solve(n))", "generated_code": "n=int(input())\nif n==1:\n\tprint(1)\nelse:\n\tprint((str(n).count(\"1\"))+1)\n", "score": 0.0122}
{"id": "MBPP_18_29", "golden_code": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "def is_Isomorphic(str1,str2):          \n\treturn str1 == str2\n\nh = lambda x,y: True if (x==y and gcd(x, y)!=0) else False", "score": 0.9509}
{"id": "APPS_test-0302_57", "golden_code": "n = int(input())\nd = {n: 0}\nm = len(str(n)) + 1\nu = int('1' * (m+1))\nfor i in range(m, 0, -1):\n    d, e, u = {}, d, u // 10\n    for v, c in e.items():\n        lim = v // u\n        for x in range(-1 - lim, 1 - lim):\n            t = v + x * u\n            d[t] = min(c + i * abs(x), d.get(t, 999))\nprint(d[0])", "generated_code": "def main():\n\tn = int(input())\n\tt = 1\n\twhile t <= n:\n\t\tt *= 10\n\t\tq = n // t\n\t\tans = 0\n\t\tq += 1\n\t\tm = 1\n\t\twhile q > 0:\n\t\t\tq //= 10\n\t\t\tm *= 10\n\t\t\tans += m\n\t\tprint(ans)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_18_32", "golden_code": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "def is_Isomorphic(a, b):\n\tif len(a)!= len(b):\n\t\treturn False\n\tfor i in range(len(a)):\n\t\tif a[i]!= b[i]:\n\t\t\treturn False\n\t\tbreak\n\treturn True", "score": 0.9322}
{"id": "APPS_test-0302_33", "golden_code": "import math\nacc = []\nn = int(input())\ndef OneNum (num, One):\n onetrans = num // acc[One]\n num = num % acc[One] \n if num == 0:\n  return onetrans*One\n else:\n  return onetrans*One + min(OneNum(num, One-1), One + OneNum(acc[One] - num, One - 1))\nacc.append(0)\nfor i in range(1,17):\n acc.append (acc[i-1]*10 + 1)\nprint (OneNum(n,16))", "generated_code": "n = int(input())\na = 0\nwhile n > 0:\n\tif n % 10 == 1:\n\t\ta += 1\n\t\tn = n // 10\n\telse:\n\t\tn = d = 1\n\t\twhile d * 10 < n:\n\t\t\td *= 10\n\t\tn -= d\nprint(a)\n", "score": 0.1318}
{"id": "MBPP_18_33", "golden_code": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "def is_Isomorphic(str3, s1):\n\treturn 0 <= int(str3[0] <= s1) <= len(str3) - 1", "score": 0.1096}
{"id": "APPS_test-0306_12", "golden_code": "a,b,p,x = list(map(int, input().strip().split()))\n\n\ndef brute(a,b,p,x):\n    for n in range(1, x+1):\n        if (n*pow(a,n,p)) % p == b:\n            print(n)\n\n#brute(a,b,p,x)\n\nsols = 0\n\ninva = pow(a,p-2,p)\n\n##print('a', inva)\n\na2 = 1\nb2 = b\ns = 0\nd1 = -b\nfac = p*(p-1)\nwhile s < p-1:\n    k = (d1 + s) % p\n    u = k\n    L = x - s - (p-1)*k\n    sols += L//fac + 1\n##    while (p-1)*u + s <= x:\n##        n = (p-1)*u + s\n##        print(s, k, n)\n##        print(n)\n##        #print(n*pow(a,n,p) % p, b)\n##        sols += 1\n##        u += p\n    d1 = (d1 * inva) % p\n    s += 1\n\nprint(sols)\n        \n\n        \n    \n\n", "generated_code": "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\na,b, p,x = list(map(int, input().split()))\n", "score": 0.0}
{"id": "MBPP_18_38", "golden_code": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "def is_Isomorphic(str1,str2):          \n\treturn True if str1==str2 else False\nss = []", "score": 0.9458}
{"id": "APPS_test-0330_54", "golden_code": "import math\n\ndef check(x):\n\tlimit = math.ceil(math.sqrt(x))\n\t\n\tfor i in range(3, limit+1, 2):\n\t\tif x%i==0:\n\t\t\treturn i\n\treturn x\n\np,y = list(map(int, input().split()))\n\nans = -1\n\nif y%2==0:\n\ty-=1\n\nfor x in range(y, p, -2):\n\tq = check(x)\n\tif q>p:\n\t\tans = x\n\t\tbreak\nprint(ans)\n", "generated_code": "import math\n\ndef main():\n\tp, y = map(int, input().split())\n\tif p > y:\n\t\tprint(-1)\n\t\treturn\n\tx = math.floor(math.sqrt(y))\n\tn = y//x\n\tif n <= 0:\n\t\tprint(n)\n\t\treturn\n\n\td = x - 1\n\twhile d > 0:\n\t\tif (y - d*x) % (n + 1) == 0:\n\t\t\treturn n+1\n\t\td -= 1\n\tprint(-1)\n\nmain()\n", "score": 0.2218}
{"id": "MBPP_18_42", "golden_code": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "def is_Isomorphic(str1,str2):          \n\treturn str1 == str2\n\nh = lambda a, b: sum([a[i] == b[i] for i in range(len(a))]) == len(a)", "score": 0.9405}
{"id": "APPS_test-0330_7", "golden_code": "import math\n\ndef getPrimes(v):\n\t\td = 2\n\t\tgr = int(math.sqrt(v)) + 1\n\t\tres = []\n\t\twhile d <= gr and v > 1:\n\t\t\tif v % d == 0:\n\t\t\t\tres.append(d)\n\t\t\t\twhile v % d == 0:\n\t\t\t\t\tv //= d\n\t\t\td += 1\n\t\tif v > 1:\n\t\t\tres.append(v)\n\t\treturn res\n\t\t\ndef solve(p, y):\n\tx = y\n\twhile x > p:\n\t\tpr = getPrimes(x)\n\t\tif all(v > p for v in pr):\n\t\t\treturn x\n\t\tx -= 1\n\treturn -1\n\np, y = list(map(int, input().split()))\nprint(solve(p, y))\n", "generated_code": "def main():\n\ttry:\n\t\tp, y = map(int, input().split())\n\t\tif p * y < y * x:\n\t\t\tprint(-1)\n\t\telse:\n\t\t\tx = bin(y * x)[2:]\n\t\t\tx = x[::-1]\n\t\t\tres = y\n\t\t\tfor i in range(len(x)):\n\t\t\t\tif x[i] == '1':\n\t\t\t\t\tres = x[:i] + res + x[i + 1:]\n\t\t\tres = res + x[-1:]\n\t\t\tif res & (res - 1) == 0:\n\t\t\t\tprint(res)\n\t\t\telse:\n\t\t\t\tprint(-1)\n\n\texcept:\n\t\tpass\n\nmain()\n", "score": 0.0}
{"id": "MBPP_18_44", "golden_code": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "def is_Isomorphic(str1,str2):          \n\treturn str1 == str2\n\nh = lambda x,y: True if (x,y) in __x_char else False\nstr_is_correct = lambda x: True if __x_ascii(x) == y else False", "score": 0.9587}
{"id": "APPS_test-0342_14", "golden_code": "a, b, c = map(int, input().split())\nres = 2 * c\nx = min(a, b)\nres += 2 * x\nif a - x > 0: res += 1\nif b - x > 0: res += 1\nprint(res)", "generated_code": "import math\nfrom collections import deque\n#from functools import *\nfrom string import ascii_lowercase\nfrom collections import Counter\n#from funciools import lru_cache\nimport heapq\nfrom itertools import permutations,combinations\nimport sys\nfrom bisect import bisect_left,bisect_right\n\na,b,c=map(int,input().split())\nreturn max(min(a,b),max(a,c),min(b,c))\n\n# @lru_cache(maxsize=None)\n# def solve(s):\n#     chifers=0\n#     for i in range(len(s)):\n#         if s[i]=='a':\n#             chifers+=1\n#     return chifers == 1\n# print(solve(('a','b','ab')));:", "score": 0.0}
{"id": "MBPP_18_9", "golden_code": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "def is_Isomorphic(str1,str2):          \n\treturn str1 == str2\n\nh = lambda x, y: x == y", "score": 0.941}
{"id": "APPS_test-0351_24", "golden_code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\n\nresult = 0\n\nfor d in a:\n\twhile d > 2*k:\n\t\tk *= 2\n\t\tresult += 1\n\tk = max(d, k)\n\nprint(result)", "generated_code": "n, k = list(map(int, input().split()))\na = list(map (int, input().strip().split()))[:n]\ns = sum(a)\nif s <= k:\n\tprint(s)\nelse:\n\ta.sort()\n\tig = a[s-1]\n\tb = a[s//2]\n\tc = 0\n\tfor i in range(n):\n\t\tif a[i] >= b:\n\t\t\tc += 1\n\t\tif a [i] <= c:\n\t\t\tc = 0\n\t\t\tig += 1\n\tprint(ig)\n", "score": 0.0}
{"id": "MBPP_190_3", "golden_code": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]", "generated_code": "def two_unique_nums(nums):\n    return nums.count(4)", "score": 0.0}
{"id": "APPS_test-0356_12", "golden_code": "n=int(input())\nalist=list(map(int,input().split()))\nm=int(input())\nblist=list(map(int,input().split()))\n\nprea = [alist[0]]\nfor i in range(1,n):\n\tprea.append(prea[-1]+alist[i])\n\npreb = [blist[0]]\nfor i in range(1,m):\n\tpreb.append(preb[-1]+blist[i])\n#print(prea,preb)\nif prea[-1]!=preb[-1]:\n\tprint(-1)\n\nelse:\n\tx=0\n\ty=0\n\tcount=0\n\twhile x<n and y<m:\n\n\t\tif prea[x]==preb[y]:\n\n\t\t\tcount+=1\n\t\t\tx+=1\n\t\t\ty+=1\n\t\telif prea[x]<preb[y]:\n\t\t\tx+=1\n\t\telse:\n\t\t\ty+=1\n\n\tprint(count)\n\n\n", "generated_code": "def main():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tm = int(input()); b = list(map (int, input(). split()))\n\ta.sort(); b.sort()\n\tma = ma = 0\n\ti = 0\n\twhile i < n:\n\t\tif a[i] == b[i]:\n\t\t\ti += 1\n\t\t\tcontinue\n\t\tla = 0; rb = 0\n\t\tj = i\n\t\twhile j < n and a[j] >= b[i]: divmod(j, n)\n\t\tif i!= j: la += 1\n\t\ti += 1\n\t\twhile i < n and b[i] >= a[j]: divmod(i, n)\n\t\t\t\n\t\tif la > ma: ma = la\n\t\tif rb > mb: mb = rb", "score": 0.0}
{"id": "MBPP_197_2", "golden_code": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)", "generated_code": "from array import array\ndef negative_count(nums):         return list(filter(lambda x: x < 0, nums))\nduplicatecheck = lambda x: x in duplicates\n\n\nn = 2\ncount = 0\nwhile count < n:\n\tprint(count)\n\tcount += 1", "score": 0.0}
{"id": "APPS_test-0356_22", "golden_code": "from collections import deque\nfrom sys import stdin\nlines = deque(line.strip() for line in stdin.readlines())\n\ndef nextline():\n    return lines.popleft()\n\ndef types(cast, sep=None):\n    return tuple(cast(x) for x in strs(sep=sep))\n\ndef ints(sep=None):\n    return types(int, sep=sep)\n\ndef strs(sep=None):\n    return tuple(nextline()) if sep == '' else tuple(nextline().split(sep=sep))\n\ndef main():\n    # lines will now contain all of the input's lines in a list\n    n = int(nextline())\n    a = ints()\n    m = int(nextline())\n    b = ints()\n    count = 1\n    i, j = 0, 0\n    a_sum, b_sum = 0, 0\n    a_total, b_total = 0, 0\n    while i < n and j < m:\n        if a_sum < b_sum:\n            a_total += a[i]\n            a_sum += a[i]\n            i += 1\n        else:\n            b_total += b[j]\n            b_sum += b[j]\n            j += 1\n        if a_sum == b_sum:\n            count += 1\n            a_sum, b_sum = 0, 0\n    while i < n and a_total < b_total:\n        a_total += a[i]\n        i += 1\n    while j < m and b_total < a_total:\n        b_total += b[j]\n        j += 1\n    if i == n and j == m and a_total == b_total:\n        return count\n    return -1\n\ndef __starting_point():\n    print(main())\n\n__starting_point()", "generated_code": "import math\n\ndef sum_up(a, b):\n\tans = 0\n\tfor i in range(len(a)):\n\t\tans += a[i]\n\treturn ans\n\ndef int_sum(a, b, x):\n\tans  = 0\n\tfor num in b:\n\t\tans += num\n\treturn ans\n\n\nn = int(input())\na = list(map(int, input().split()))\nm = int(input()); b = list(map (int, input(). split()))\nsa = sum_up( a, b )\nsb = sum_up ( b, a )\nif sa!= sb:\n\tprint(-1)\nelse:\n\tif sa == sb:\n\t\tprint(n)\n\telse:\n\t\tprint((sa - sb))\n", "score": 1.0}
{"id": "MBPP_19_8", "golden_code": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) ", "generated_code": "def sum_num(num):    \n\treturn '-'.join(map(str,num))", "score": 0.0}
{"id": "APPS_test-0364_9", "golden_code": "from sys import stdin, stdout\n\nn, k = map(int, stdin.readline().split())\nvalues = list(map(int, stdin.readline().split()))\n\nsze = max(values)\nused = [0 for i in range(sze + 1)]\nchallengers = [[] for i in range(n + 1)]\n\ni = 0\ncnt = 0\n    \nfor i in range(n):\n    if values[i] == k:\n        cnt += 1\n    elif used[values[i]] >= cnt:\n        used[values[i]] += 1\n        challengers[used[values[i]]].append(values[i])\n    \nfor i in range(n, cnt - 1, -1):\n    if len(challengers[i]):\n        stdout.write(str(challengers[i][0]))\n        break\nelse:\n    stdout.write('-1')", "generated_code": "n,A = list(map(int,input().split()))\nif n % 2 == 0:\n\tprint(-1)\n\treturn\n\nn //= 2\nA!= B\n\nc = list(map (int,input().strip().split()))\n\n\n\nstack = []\n\nfor i in range(n):\n\tif c[i]!= A and c[i] < B:\n\t\tstack.append(c[i])\n\t\tcontinue\n\t\n\tif c [-1,A] < c[i] >= c[B]:\n\t\tstack.pop()\n\t\tcontinue\n\t\t\t\n\tstack.append(C)\n\nprint(stack[0])\n", "score": 0.0}
{"id": "MBPP_20_11", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(n):\n\tif n < 10:\n\t\treturn True   \n\tfor i in str(n):\n\t\tif int(i) % 2!=0:\n\t\t\treturn  False\n\treturn True", "score": 0.3439}
{"id": "APPS_test-0364_6", "golden_code": "from sys import stdin, stdout\n\nn, k = map(int, stdin.readline().split())\nvalues = list(map(int, stdin.readline().split()))\n\nsze = max(values)\nused = [0 for i in range(sze + 1)]\nchallengers = [[] for i in range(n + 1)]\n\ni = 0\ncnt = 0\n    \nfor i in range(n):\n    if values[i] == k:\n        cnt += 1\n    elif used[values[i]] >= cnt:\n        used[values[i]] += 1\n        challengers[used[values[i]]].append(values[i])\n    \nfor i in range(n, cnt - 1, -1):\n    if len(challengers[i]):\n        stdout.write(str(challengers[i][0]))\n        break\nelse:\n    stdout.write('-1')", "generated_code": "n,a=list(map(int,input().split()))\narr=list(map (int,input().strip().split()))[:n]\nx=[]\nfor i in arr:\n\tx.append(i)\ncountera=0\ncounterb=0\n\nfor i in x:\n\tif i==a:\n\t\tcountera+=1\n\telse:\n\t\tcounterb+=1\n\nif countera>=counterb:\n\tprint(2)\nelif countera<counterb:\n    print(-1)\nelse:\n    print(1)\n", "score": 0.0118}
{"id": "MBPP_20_13", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(n):\n\treturn (n & 0xffffffff) == 0", "score": 0.5454}
{"id": "APPS_test-0377_11", "golden_code": "n, m = list(map(int, input().split()))\nif m <= n / 2:\n    print(max(m, 1))\nelse:\n    print(n - m)\n", "generated_code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\n\ndef solve(n, m, tree):\n\tright_ct = [0 for _ in range(n)]\n\ttree[n-1] = 1\n\tfor i in range(n-2, -1, -1):\n\t\tif tree[i] == 1:\n\t\t\tn_left = 0\n\t\t\tn_right = 0\n\t\t\twhile m > 0:\n\t\t\t\tn_left += 1\n\t\t\t\tn_right += 1\n\t\t\t\tm -= 1\n\t\t\tright_ct[i] = n_left\n\t\telse:\n\t\t\tright_dt[i] = 0\n\t\t\t\n\tleft_ct = 0\n\tright_dt = 0\n\tfor i, (j, v) in enumerate(zip(tree, right_ct)):\n\t\tright_ct", "score": 0.0}
{"id": "MBPP_20_15", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(n):    return n % 4 == 1", "score": 0.711}
{"id": "APPS_test-0377_42", "golden_code": "n,m=map(int,input().split())\nif m==0:\n    m=1\nprint(min(n-m,m))", "generated_code": "\nn,m=map(int,input().split())\nco=0\nhi=0\nwhile hi<n:\n\thi+=1\n\tco+=1\n\tif hi==n:\n\t\tbreak\n\telif hi==1:\n\t\tco-=1\nprint(max(co,m))\n", "score": 0.0402}
{"id": "MBPP_20_19", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(n):\n\treturn not n % 2 == 0", "score": 1.0}
{"id": "APPS_test-0389_23", "golden_code": "def gcd(a, b):\n    while(b != 0):\n        a %= b\n        t = a\n        a = b\n        b = t\n    return a\n\ndef main():\n    a, b = list(map(int, input().split(' ')))\n    gg = gcd(a, b)\n    ans = 0\n    can = 1\n    A = []\n    A.append(a / gg)\n    A.append(b / gg)\n    for g in A:\n        while(g != 1):\n            ok = 0\n            if g % 2 == 0:\n                g = g / 2\n                ok = 1\n                ans = ans + 1\n            if g % 3 == 0:\n                g = g / 3\n                ok = 1\n                ans = ans + 1\n            if g % 5 == 0:\n                g = g / 5\n                ok = 1\n                ans = ans + 1\n            if ok == 0:\n                can = 0\n                break\n    \n    if can == 0:\n        print(\"-1\")\n    else:\n        print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "import sys\n\ndef f(x, y):\n\tif x > y:\n\t\treturn 0\n\tif x < y:\n\t\ty = x\n\tif x % y == 0:\n\t\treturn y\n\treturn f(x // y, y) + 1\n\na, b = list(map(int, input().split()))\n\nprint(f(a, b) if a == b else -1)\n", "score": 0.9012}
{"id": "MBPP_20_25", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(s):\n\tn=int(s)\n\treturn (n & 1) * int(n >> 1) == 0", "score": 0.043}
{"id": "APPS_test-0395_24", "golden_code": "import sys;\n\n#sys.stdin = open(\"input.txt\", \"r\");\n#sys.stdout = open(\"output.txt\", \"w\");\n\ndef ria():\n    return [int(x) for x in input().split()];\n\ntf = 0;\na = ria();\nn = len(a);\nfor i in range(n-2):\n    for j in range(i+1, n-1, 1):\n        for k in range(j+1, n, 1):\n            if a[i] + a[j] + a[k] == (sum(a) / 2 ):\n                tf = 1;\n                break;\n        if tf == 1:\n            break;\n    if tf == 1:\n        break;\n\nif ( tf == 1 ):\n    print(\"YES\");\nelse:\n    print(\"NO\");\n\n\n#sys.stdout.close();\n", "generated_code": "def main():\n\ta = list(map(int, input().split()))\n\tn = len(a)\n\tif sum(a) % n == 0:\n\t\tprint(\"YES\")\n\telse:\n\t\tl = sum(a) // n\n\t\tr = l + 1\n\t\ta.sort()\n\t\twhile r - l > 1:\n\t\t\tif a[r - 1] + a[r - 2] == a[r]:\n\t\t\t\ta.pop(r - 1)\n\t\t\t\ta.sort()                \n\t\t\t\tl += 1\n\t\t\telse:\n\t\t\t\tl = a.pop(l - 1)\n\t\tif len(a) > 0:\n\t\t\tprint(\"YES\")        \n\t\telse:\n\t\t\tprint('NO')\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0194}
{"id": "MBPP_20_20", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(n):    \n\treturn int(n)", "score": 0.1125}
{"id": "APPS_test-0402_50", "golden_code": "n, k = list(map(int, input().split()))\nans = 0\ncurr = 0\nwhile curr + 5 * (ans + 1) + k <= 240:\n    ans += 1\n    curr += 5 * ans\nprint(min(n, ans))", "generated_code": "# -*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 2/9/20\n\n\"\"\"\n# cook your dish here\nn,k = map(int,input().split())\nl = []\nfor i in range(1,n+1):\n\tl.append(i*60)\nl.sort()\nans = 0\nn = n - 1\nfor i in reversed(l):\n\tif(i<=k):\n\t\tans += 1\n\telse:\n\t\tbreak\nprint(ans)\n", "score": 0.082}
{"id": "MBPP_20_27", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(n):\n\ts = n % 2\n\tcondition = lambda x: x == 0 and s\n\treturn condition(s)", "score": 0.5495}
{"id": "APPS_test-0402_56", "golden_code": "n, m = list(map(int, input().split()))\nt = 4 * 60 - m\no = 0\na = 5\notv = 0\nwhile o + a <= t and otv < n:\n    o += a\n    a += 5\n    otv += 1\nprint(otv)\n", "generated_code": "import sys\nn, k = map(int, sys.stdin.readline().split())\nif k * n < n:\n\tprint(k * n - n - 1)\nelse:\n\tprint((k * n - 1) // 2)\n", "score": 0.0116}
{"id": "MBPP_20_28", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(s): \n\treturn bool(s)\nmp = 2", "score": 0.4362}
{"id": "APPS_test-0404_24", "golden_code": "n = int(input())\na = 0\ni = 1\nwhile i*i < n:\n    if n%i == 0:\n        a += 2\n    i += 1\nif i*i == n:\n    a += 1\nprint(a)", "generated_code": "def main():\n\tfrom sys import stdin, stdout\n\tb = int(stdin.readline())\n\tlenb = b.bit_length()\n\tdist = [0]*(lenb+1)\n\tfor i in range(lenb):\n\t\tdist[i+1] = (dist[i] + (1 if (b&(b-1))*(b>>i) else 0))/2\n\tprint(dist[lenb])\n\treturn\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_20_31", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(n) : \n\tif (n % 2)  : \n\t\treturn True        \n\telse :\n\t\treturn False", "score": 1.0}
{"id": "APPS_test-0419_43", "golden_code": "n = int(input(), 2)\nt = 1\nans = 0\n\nfor i in range(101):\n  if t < n:\n    ans += 1\n  t *= 4\n\nprint(ans)", "generated_code": "s = input()\n\ns = s.replace(\"0\", \"\")\n\nn = len(s)\n\nzero = s.count(\"0\")\n\nsl = 0\n\nfor i in range(n):\n\tif s[i] == \"0\":\n\t\tsl += 1\n\telse:\n\t\tsl = 0\n\tif sl == zero:\n\t\tbreak\n\nprint(sl)\n", "score": 0.0152}
{"id": "MBPP_20_3", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(n):\n\treturn n % 2 == 1", "score": 1.0}
{"id": "APPS_test-0419_6", "golden_code": "s = input()\nans = len(s) - 1\nk = 0\nfor i in s:\n    k += int(i)\nif k > 1:\n    ans += 1\nif ans % 2 != 0:\n    ans += 1\n\nprint(ans // 2)", "generated_code": "s = int(input())\n\nb = bin(s)\na = []\narr = b[2:].zfill(100)\n\nk = 0\nfor i in range(len(arr)):\n\tif arr[i] == \"1\":\n\t\ta.append(0)\n\telse:\n\t\ta.insert(0, 1)\n\t\tk += 1\n\nfor i in a:\n\tprint(k - 1)\n", "score": 0.0}
{"id": "MBPP_20_33", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(n): \n\treturn n % 2!= 0", "score": 1.0}
{"id": "APPS_test-0435_11", "golden_code": "n,t=map(int,input().split())\ns=input()\nl=0\nk=0\nma=0\nfor r in range(n):\n    if s[r]=='a':\n        if r-l+1>ma: ma=r-l+1\n    else:\n        while k>=t:\n            if s[l]=='b':\n                k-=1\n            l+=1\n        if r-l+1>ma: ma=r-l+1\n        k+=1\n        k%=r-l+2\nl=0\nk=0\nfor r in range(n):\n    if s[r]=='b':\n        if r-l+1>ma: ma=r-l+1\n    else:\n        while k>=t:\n            if s[l]=='a':\n                k-=1\n            l+=1\n        if r-l+1>ma: ma=r-l+1\n        k+=1\n        k%=r-l+2\nprint(ma)", "generated_code": "n,k = list(map(int,input().split()))\ns = input()\nr = 0\nL = 0\na = [0]*26\nfor i in s:\n\tif i == 'a':\n\t\tL += 1\n\t\ta[L] += 1\n\telse:\n\t\tR += 1\n\t\tx = L - R\n\t\ta[x] -= 1\n\t\tif a[x] == 0:\n\t\t\ta.pop(x)\n\t\tR +=1\nprint(max(a))\n", "score": 0.0108}
{"id": "MBPP_20_35", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(n): return True if (n + 2 / 2) % 2 == 0 else False", "score": 1.0}
{"id": "APPS_test-0442_24", "golden_code": "r=int(input())\nif r<=4:\n    print(\"NO\")\nelif r%2==0:\n    print(\"NO\")\nelse :\n    print(1, (r-3)//2)", "generated_code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport math\n\ndef solve(x, y):\n\tif x == y:\n\t\treturn x, y\n\tr = (x ** 2 + 2 * y + 1) // 2\n\tif r % 1 == 0:\n\t\treturn r, r\n\telse:\n\t\treturn -1\n\ndef __starting_point():\n\tr = int(input())\n\tn = r\n\tresult = solve(r, r)\n\tif result == -1:\n\t\tprint('NO')\n\telse:     \n\t\tprint(*result)\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_20_37", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(n):return (1 <<(n.bit_length()-1))", "score": 0.0956}
{"id": "APPS_test-0442_31", "golden_code": "import sys\nfrom collections import Counter\nimport itertools\nfrom math import floor, ceil\n \ndef input():\n    return sys.stdin.readline().strip()\n \ndef dinput():\n    return int(input())\n \ndef tinput():\n    return input().split()\n \ndef rinput():\n    return map(int, tinput())\n \ndef rt(x1, x2, y3):\n    print(0.5*(x2+x1))\n \ndef main():\n    y = int(input())\n    i = 1\n    t = 0\n    r = 1\n    if y % 2 == 1 and y >= 5:\n        print(1, (y - 3)//2)\n    else:\n        print(\"NO\")\n        \n    \nmain()", "generated_code": "import sys\n\ndef main():\n\tr = int(sys.stdin.readline())\n\tif r % 2 == 0:\n\t\tprint(\"NO\")\n\telse:\n\t\tprint(2)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.3288}
{"id": "MBPP_20_38", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(n): return not n & (n == 13)", "score": 0.4319}
{"id": "APPS_test-0442_39", "golden_code": "r = int(input())\n\nif r%2 == 0:\n    print('NO')\n\nelif r == 1:\n    print('NO')\n\nelif r == 3:\n    print('NO')\nelse:\n    print(1, end=' ')\n    print((r-3)//2)", "generated_code": "import math\n\nr = int(input())\nx = 0\ny = 0\nfor i in range(1, r+1):\n\tif i * i == r:\n\t\tprint(i, end ='')\n\t\tbreak\n\tx += 1\n\ty += 1\n\tif x == y:\n\t\tprint('NO')\n\t\tbreak\n\nif x == 0:\n\tprint('YES')\n\tprint(y)\n", "score": 0.3128}
{"id": "MBPP_20_48", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(n):    \n\treturn (n & 1) * int(n).bit_length() % 2 == 1", "score": 0.7123}
{"id": "APPS_test-0443_104", "golden_code": "def main():\n    input()\n    numbers = list(map(int, input().split()))\n\n\n    if len(numbers) < 2 or (len(numbers) == 2 and numbers[0] == numbers[1]):\n        print(-1)\n        return\n\n    print(1)\n    print(numbers.index(min(numbers)) + 1)\n    \nmain()", "generated_code": "import sys\n\ndef solve():\n\tinput = sys.stdin.readline\n\tfor _ in range(int(input())):\n\t\tn = int(input())\n\t\ta = [int(x) for x in input().split()]\n\t\tif sum(a) < len(a) * a[-1]:\n\t\t\tprint(-1)\n\t\t\tcontinue\n\t\ta.sort()\n\t\tans = [len(a)]\n\t\tmx = a[-1]\n\t\tif mx <= sum(a[:-1]) // 2:\n\t\t\tmx += 1\n\t\tfor i in range(len(a) - 1):\n\t\t\tans.append(mx - a[i])\n\t\tprint(len(ans))\n\t\tprint(*ans)\n\t\t\n\ndef __starting_point():\n\tsolve()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_20_9", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(n): return str(n) == str(n)[::-1]", "score": 0.5397}
{"id": "APPS_test-0443_88", "golden_code": "t=int(input())\nl=list(map(int,input().split()))\nif len(l)==1:\n    print(\"-1\")\nelif len(l)==2 and len(set(l))==1:\n    print(\"-1\")\nelse:\n    print(1)\n    print(l.index(min(l))+1)\n", "generated_code": "n = int(input())\narr = list(map(int, input().split()))\n\narr.sort()\n\nif n % arr[-1] == 0:\n\tprint(-1)\nelse:\n\tfirst = [0]\n\tsecond = [0]*(n//arr[-1])\n\tfor i in range(1, n//arr[- 1]+1):\n\t\tfirst.append(i*arr[-1]+first[-1])\n\n\tfor i in list(range(n//arr(-1)-1)):\n\t\tsecond[i*arr[ -1]+1] = i*arr[ -2] + second[i+1]\n\n\tprint(max(first) + max(second))\n", "score": 0.2066}
{"id": "MBPP_210_1", "golden_code": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)", "generated_code": "def power(x,y):\n\ta = x \n\tb = y \n\n\twhile a > 0:\n\t\tc = a%b\n\t\ta = a//b\n\t\tb = c\n\treturn", "score": 0.0}
{"id": "APPS_test-0444_36", "golden_code": "n=int(input())\nprint(n)\nprint(\"1 \" * n)", "generated_code": "def main():\n\tn = int(input())\n\tif n == 1:\n\t\tprint(1)\n\t\tprint()\n\t\treturn\n\telif n == 2:\n\t\tprint(\"1\")\n\t\tprint(\"0 1\")\n\t\treturn\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_214_2", "golden_code": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares", "generated_code": "def sum_difference(n):\n\treturn n * (n + 1) * (2 * n + 1) // 6", "score": 0.0}
{"id": "APPS_test-0444_8", "golden_code": "n = int(input())\nprint(n)\nprint('1 '*n)", "generated_code": "def solve(n):\n\ts = str(n)\n\tln = len(s)\n\tloc = 0\n\tfor i in range(1,ln):\n\t\tif s[i] > s[i-1]:\n\t\t\tloc = i\n\t\t\tbreak\n\tif loc == 0:\n\t\treturn [1]\n\tans = []\n\tcount = 1\n\ti = 1\n\twhile i < n:\n\t\tif loc > 0 and s[loc-1] > s[ i]:\n\t\t\tcount += 1\n\t\t\ti += 1\n\t\telse:\n\t\t\tans.append(str(count))\n\t\t\tcount = 1\n\t\t\ti+=1\n\tans.append( str(count) )\n\treturn ans\n\ndef main():\n\tn = int(input())\n\tans = solve(n)\n   \n\tprint(len(ans))\n\tprint(*ans)\n\n", "score": 0.0}
{"id": "MBPP_216_1", "golden_code": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)", "generated_code": "import math \ndef max_Prime_Factors (n): \n\tprimeFactors=[]\n\tfor i in range(2,int(math.sqrt(n))+1): \n\t\tif (n % i == 0):  \n\t\t\tprimeFactters.append(i)\n\treturn primeFactors", "score": 0.0}
{"id": "APPS_test-0460_3", "golden_code": "p, x, y = list(map(int, input().split()))\nmn = [10 ** 10]\ndef tr(a):\n    i = (a // 50) % 475\n    for j in range(25):\n        i = (i * 96 + 42) % 475\n        l = 26 + i\n        if l == p:\n            if a <= x:\n                mn[0] = min(mn[0], 0)\n            else:\n                k = (a - x) // 50\n                if k % 2 == 0:\n                    mn[0] = min(mn[0], k // 2)\n                else:\n                    mn[0] = min(mn[0], (k + 1) // 2)\n            \n            \nst = 0   \nfor i in range(50):\n    if (x) % 50 == (y + i) % 50:\n        st = y + i\n        break\nfor i in range(st, 5 * 100000, 50):\n    tr(i)\nprint(*mn)\n", "generated_code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on200weishu\n\n@author: reduce full\n\"\"\"\n#from collections import Counter\n#import numpy as np\n#arr = np.array([[int(i) for i in input().split()] for k in range(2)])\n#a = arr[0][0]\n#b = arr[0]\n#print(a,b)\n\np,x,y = list(map(int,input().split()))\n#a = int(input())\n#b = int(input()[0])\n\n#a = 3\n#b = 4\n\n#0,1,2,3,4 = 1,2,3,-4,5\n#0,0,0,1,1\n#\n#for i in range(", "score": 0.0}
{"id": "MBPP_217_1", "golden_code": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd ", "generated_code": "def odd_Days(N) -> int:\n\treturn N if (N>0) else 0\nh = {}", "score": 0.0}
{"id": "APPS_test-0463_22", "golden_code": "from collections import *\n\nn, m = map(int, input().split())\n\na = [int(i) for i in input().split()]\n\nst = set(a)\nif len(st) < n:\n    print(0);return\n\nmp = defaultdict(int)\nfor i in a:\n    mp[i] += 1\n\nfor i in a:\n    mp[i] -= 1\n    if (mp[i & m] > 0):\n        print(1);return\n    mp[i] += 1\n\nst.clear()\n\nfor i in a:\n    t = m\n    if (i & t) in st:\n        print(2);return\n    st.add(i & t)\n\nprint(-1)\n", "generated_code": "n, x = list(map(int, input().split()))\na = list(map (int, input().strip().split()))[:n]\nm = 0\nz = 0\nfor i in range(n):\n\tif a[i] > x:\n\t\tz += 1\n\t\tcontinue\n\tm += a[i]\n\tif a [i] == x:\n\t\tif z > 0:\n\t\t\tz -= 1\n\t\telse:\n\t\t\tm += 1\n\t\t\tz += 1\n\telse:\n\t\tm += 1\nif z == n:\n\tprint (m)\nelse:\n\tprint(-1)\n", "score": 0.0}
{"id": "MBPP_228_1", "golden_code": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) ", "generated_code": "def tuple_modulo(*values):\n\tif len(values) == 1:\n\t\treturn values[0]\n\treturn tuple(values)", "score": 0.0}
{"id": "APPS_test-0470_4", "golden_code": "t = list(map(int, input().split()))\nbest = sum(t)\nfor x in t:\n    if t.count(x) == 1: continue\n    best = min(best, sum(t) - x * min(3, t.count(x)))\nprint(best)", "generated_code": "def main():\n\tnumbers = list(map(int, input().split()))\n\tnumbers.remove(max(numbers))\n\ttmp_sum = sum(numbers)\n\tans = tmp_sum\n\tdel numbers[0]\n\tdel numbers [0]\n\tfor number in numbers:\n\t\ttmp_sum -= number\n\t\tans = min(ans, tmp_sum)\n\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.098}
{"id": "MBPP_22_17", "golden_code": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n ", "generated_code": "def find_Extra(arr1,arr2,n) : \n\tfor i in range(len(arr2)):\n\t\tif arr1.count(arr2[i]) > n:\n\t\t\treturn arr2.index(arr2 [i])\n\treturn -1\nll = ['a', 'b', 'c']", "score": 0.0}
{"id": "APPS_test-0471_18", "golden_code": "from math import *\nn, a = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\nif n == 1:\n    print(0)\n    \nelse:\n    if a > A[-1]:\n        print(abs(a - A[1]))\n    elif a < A[0]:\n        print(abs(a - A[-2]))\n    else:\n        per1 = abs(A[0] - A[-2])\n        per2 = abs(A[1] - A[-1])\n        ans1 = abs(A[0] - a) + per1\n        ans2 = per1 + abs(A[-2] - a)\n        ans3 = per2 + abs(a - A[-1])\n        ans4 = per2 + abs(a - A[1])\n        print(min(ans1, ans2, ans3, ans4))", "generated_code": "from collections import defaultdict\n\nn, a = list(map(int, input().split()))\nxs = list(map (int, input().strip().split())) + [a]\nlog = defaultdict(list)\nfor i in range(n):\n\tlog[xs[i]].append(i)\n\ndef check(mid):\n\txs = sorted(log.keys())\n\tmidx = (xs[0] + xs[-1]) / 2\n\treturn midx <= mid\n\nmin_dist = defaultdict(lambda: float('inf'))\nfor i in xs:\n\tfor j in log[i]:\n\t\tmin_dist[j] = min(min_dist[i], (abs(i - j)) ** 0.5)\n\nprint(min(min_dist.values()))\n\n", "score": 0.0}
{"id": "MBPP_22_18", "golden_code": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n ", "generated_code": "def find_Extra(arr1,arr2,n) : \n\tfor i in range(len(arr2)):\n\t\tif arr1[i]!= arr2[i] :\n\t\t\treturn i\n\treturn len(arr2)\n\n\n\n\n\n\n\n'''\n\n\n\n\n\n\n\n\n\n\n\n'''\n\n'''\n\n\nInput: [2, 13,4,9,77,2,4,0], 2\n'''", "score": 1.0}
{"id": "APPS_test-0471_33", "golden_code": "n, a = list(map(int, input().split()))\nline = list(map(int, input().split()))\nline.sort()\nif len(line) == 1:\n    print(0)\nelse:    \n    r1 = abs(line[-1] - line[1])\n    otvet1 = min(abs(a - line[1]), abs(a - line[-1])) + r1\n    r2 = abs(line[-2] - line[0])\n    otvet2 = min(abs(a - line[-2]), abs(a - line[0])) + r2\n    print(min(otvet1, otvet2))", "generated_code": "n, a = list(map(int, input().split()))\nx = list(map (int, input().strip().split()))\n\n\ncheck = 0\npossible = {}\nfor i in range(n):\n\tif x[i] not in possible:\n\t\tpossible[x[i]] = { max(x[i], possible[x[i]][0])-a, 'n'}\n\t\tcheck += 1\n\t\t\nprint(check)\n", "score": 0.0}
{"id": "MBPP_22_5", "golden_code": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n ", "generated_code": "def find_Extra(arr1,arr2,n) : \n\tfor i in range(len(arr2)):\n\t\tif arr1.count(arr2[i]) > n :\n\t\t\treturn arr2.index(arr2 [i])\n\treturn -1", "score": 0.0}
{"id": "APPS_test-0471_7", "golden_code": "n,a=list(map(int,input().split()))\nip=list(map(int,input().split()))\ntry:\n    if a not in ip:\n        ip.append(a)\n        n+=1\n    ip=sorted(ip)\n    k=ip.index(a)\n    l1=0\n    l2=0\n    for i in range(k):\n        l1+=ip[i+1]-ip[i]\n    for i in range(k,n-1):\n        l2+=ip[i+1]-ip[i]\n    n1=ip[1]-ip[0]\n    n2=ip[-1]-ip[-2]\n    if l1==0:\n        print(l2-n2)\n    elif l2==0:\n        print(l1-n1)\n    else:\n        print(min(l1-n1+2*l2, 2*l1-2*n1+l2, l2-n2+2*l1, 2*l2-2*n2+l1))\nexcept:\n    print(0)\n", "generated_code": "import sys\ninput = sys.stdin.readline\n\nn,a=list(map(int,input().split()))\nx=list(map (int,input().strip().split()))\n\n\nsize=min(x)\n\t\t\t\n\nfor i in range(n-1):\n\tif size>x[i+1]-x[i]:\n\t\tsize=x[i+ 1]-x[i]\n\nif size==0:\n\tprint(0)\nelse:\n\tprint((size*2)-1)\n", "score": 0.0002}
{"id": "MBPP_22_7", "golden_code": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n ", "generated_code": "def find_Extra(arr1,arr2,n) : \n\tfor i in range(len(arr2)):\n\t\tif arr1[i]!= arr2[i] :\n\t\t\treturn i\n\treturn len(arr2)\n\n\n\n\n\n'''\nInput: The first line of the line contains the line of the data i and the not-negative number.\nThe second and the not -number of line with the negative number of negative\nnumbers.\nThe third and four total number of negative numbers.\nThe last index of each number in that list, the index with the highest number\nof negative numbers.\n\t\ninput\nInput: i,j,k\ni=j,k=k,l=x\nj=4,l=j,x=y\nk=4,j=x,l=y\n'''", "score": 1.0}
{"id": "APPS_test-0472_9", "golden_code": "def s(x):\n\n    return sum(int(i) for i in str(x))\n\n\n\nn = input()\n\nl, n = 9 * len(n), int(n)\n\nans, m = -1, int(n ** 0.5)\n\nfor x in range(max(1, m - l), m + 1):\n\n    if n % x == 0 and x * (x + s(x)) == n:\n\n        ans = x\n\n        break\n\nprint(ans)\n\n\n\n# Made By Mostafa_Khaled\n", "generated_code": "import math\nn = int(input())\n\ndef sum_digits(n):\n\treturn sum([int(d) for d in str(n)])\n\nx = -1\nfor i in range(n, 0, -1):\n\tx = i\n\tif sum_digits(_) == i:\n\t\tprint(i)\n\t\tbreak\n\nif x == -1:\n\tprint(-1)\n", "score": 0.0}
{"id": "MBPP_23_12", "golden_code": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ", "generated_code": "def same_Length(A,B): \n\tif len(str(A))==len(str(B)): \n\t\treturn True\n\telse: \n\t\tprint(False)\n\treturn False", "score": 0.679}
{"id": "APPS_test-0484_17", "golden_code": "n, a, b = list(map(int, input().split()))\nx = list(range(n))\ny = list(range(n))\nfor i in range(n):\n\tx[i], y[i] = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n\tfor j in range(i + 1, n):\n\t\t# 4 ways of rotating\n\t\tif (x[i] + x[j] <= b and max(y[i], y[j]) <= a) or (y[i] + y[j] <= a and max(x[i], x[j]) <= b):\n\t\t\tans = max(ans, x[i] * y[i] + x[j] * y[j])\n\t\tx[i], y[i] = y[i], x[i]\n\t\tif (x[i] + x[j] <= b and max(y[i], y[j]) <= a) or (y[i] + y[j] <= a and max(x[i], x[j]) <= b):\n\t\t\tans = max(ans, x[i] * y[i] + x[j] * y[j])\n\t\tx[j], y[j] = y[j], x[j]\n\t\tif (x[i] + x[j] <= b and max(y[i], y[j]) <= a) or (y[i] + y[j] <= a and max(x[i], x[j]) <= b):\n\t\t\tans = max(ans, x[i] * y[i] + x[j] * y[j])\n\t\tx[i], y[i] = y[i], x[i]\n\t\tif (x[i] + x[j] <= b and max(y[i], y[j]) <= a) or (y[i] + y[j] <= a and max(x[i], x[j]) <= b):\n\t\t\tans = max(ans, x[i] * y[i] + x[j] * y[j])\n\t\tx[j], y[j] = y[j], x[j]\nprint(ans)\n", "generated_code": "import sys\nfrom math import *\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\ndef solve():\n\tn, a, b = mints()\n\tx = []\n\tfor i in range(n):\n\t\tx.append(mints())\n\tx.sort()\n\tf = [0]*n\n\tans = 0\n\tfor i, (xi, yi) in enumerate(x):\n\t\tif i == n-1:\n\t\t\tans = max(ans, xi*y)\n\t\telse:\n\t\t\tv = -x[i+1][0] - x[i][0]\n\t\t\tif v == 0:\n\t\t\t\tf[i] = 1\n\t\t\t", "score": 0.0}
{"id": "MBPP_23_13", "golden_code": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ", "generated_code": "def same_Length(A,B): \n\tif len(str(A))==len(str(B)): \n\t\treturn True\n\treturn False\nUST = 97\nMOD = 2**9 + 7\nS = set(range(10))", "score": 0.6299}
{"id": "APPS_test-0488_61", "golden_code": "import sys\nfrom collections import defaultdict as di\ncolor = input()\nn = len(color)\n\nlnei = [-1]*n\nrnei = [-1]*n\nto_be_deleted = []\ndeleted = [False]*n\niters = 0\n\nfor i in range(n):\n    if i-1>=0:\n        lnei[i]=i-1\n        if color[i]!=color[i-1]:\n            to_be_deleted.append(i)\n    if i+1<n:\n        rnei[i]=i+1\n        if color[i]!=color[i+1]:\n            to_be_deleted.append(i)\n\nif len(to_be_deleted)==0:\n    print(0)\n    return\n\nwhile True:\n    was_deleted = False\n\n    pot_sui = []\n    for node in to_be_deleted:\n        if deleted[node]:\n            continue\n        was_deleted=True\n        deleted[node]=True\n        \n        if rnei[node]!=-1:\n            lnei[rnei[node]]=lnei[node]\n            pot_sui.append(rnei[node])\n\n        if lnei[node]!=-1:\n            rnei[lnei[node]]=rnei[node]\n            pot_sui.append(lnei[node])\n    \n    \n    to_be_deleted=[]\n    for node in pot_sui:\n        if deleted[node]:\n            continue\n        if lnei[node]!=-1 and color[node]!=color[lnei[node]]:\n            to_be_deleted.append(node)\n        elif rnei[node]!=-1 and color[node]!=color[rnei[node]]:\n            to_be_deleted.append(node)\n    if not was_deleted:\n        break\n    iters += 1\n\nprint(iters)\n", "generated_code": "s=input()\nl=list(s)\nn=len(l)\na=[]\nb=[]\nfor i in range(n-1):\n\tif l[i]!=l[i+1]:\n\t\ta.append(l[i])\n\t\tb.append(l [i+1])\n\t\tfor j in range(i+2,n):\n\t\t\tif l[j]!=l [j-1]:\n\t\t\t\ta.append(g)\n\t\t\t\tb.append(g())\n\t\t\t\tbreak\nprint(len(a)-len(b))\n", "score": 0.0}
{"id": "MBPP_23_14", "golden_code": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ", "generated_code": "def same_Length(A,B): \n\tif len(str(A))==len(str(B)): \n\t\treturn True\n\treturn False\nns = [1,5,7,11]", "score": 0.6265}
{"id": "APPS_test-0495_44", "golden_code": "a, b = input().split()\na = list(a)\nb = int(b)\n\ndef findMax(a, f, dist):\n    m = f\n    for i in range(f+1, min(f+dist+1, len(a))):\n        if a[i] > a[m]:\n            m = i\n    return m\n\n\npos = 0\nwhile b > 0 and pos < len(a):\n    m = findMax(a, pos, b)\n    #print('we found:', m)\n    a.insert(pos, a.pop(m))\n    #print('new a', a)\n    b -= m - pos\n    #print('new b', b)\n    pos += 1\n\nprint(''.join(a))\n", "generated_code": "#!/usr/bin/env python3\n\ndef main():\n\ta, k = input().split()\n\ta = int(a)\n\tk = int(k)\n\treq = lambda: str(len(str(a))) <= k\n\tr = lambda: map(int, str(a))\n\ta = list(r())\n\tu = max(r())\n   \n\tj = 0\n\tfor i in range(len(a)):\n\t\twhile j < len(a) and req(a[j]):\n\t\t\tj += 1\n\t\tif j == len(a):\n\t\t\tbreak\n\t\ta[j], a[i] = a[i], a[j]\n\t\tj += 1\n\tfor i, j in enumerate(a):\n\t\tif req(str(j)):\n\t\t\tif i:\n\t\t\t\ta[i], a [j]", "score": 0.0}
{"id": "MBPP_23_16", "golden_code": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ", "generated_code": "def same_Length(A,B): \n\tif len(str(A))==len(str(B)): \n\t\treturn True\n\treturn False\nss = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 20, 21, 22, 25, 26, 29, 30, 34, 38, 41, 43, 46, 48, 50, 52, 53, 58, 60, 62, 65, 67, 70, 72, 79, 83, 82, 89, 90, 97, 101, 103, 107, 109, 113, 116, 105, 108, 109, 122, 129, 133, 137, 146, 148, 152, 157, 163, 168, 173, 179, 181, 191, 193, 197, 199, 211, 213, 215, 217, 226, 229, 232, 233, 234, 241, 235, 237, 238, 249, 29, 211, 231, 233, 239, 241, 255, 257, 261, 269, 272, 273, 277, 281, 292, 293, 307, 311, 313]\nlet = lambda x, y: x % 10 == 0 and y % 10 == 1\nmod = lambda x: x % 3 == 0 and x <= 8", "score": 0.628}
{"id": "APPS_test-0501_16", "golden_code": "l, r = list(map(int, input().split()))\nl -= 1\nif l == 0:\n    ar1 = []\nelse:\n    ar1 = [1]\nsum1 = 1\nwhile sum1 < l:\n    if sum1 + ar1[-1] * 2 <= l:\n        sum1 += ar1[-1] * 2\n        ar1.append(ar1[-1] * 2)\n    else:\n        ar1.append(l - sum1)\n        sum1 = l\n\nar2 = [1]\nsum2 = 1\nwhile sum2 < r:\n    if sum2 + ar2[-1] * 2 <= r:\n        sum2 += ar2[-1] * 2\n        ar2.append(ar2[-1] * 2)\n    else:\n        ar2.append(r - sum2)\n        sum2 = r\n\nsum1_odd = sum(ar1[::2])\nsum1_even = sum(ar1[1::2])\nsum2_odd = sum(ar2[::2])\nsum2_even = sum(ar2[1::2])\np = 10 ** 9 + 7\nprint((sum2_odd ** 2 + sum2_even ** 2 + sum2_even - sum1_odd ** 2 - sum1_even ** 2 - sum1_even) % p)\n", "generated_code": "a,b=map(int,input().split())\nn=int((a+b-1)**0.5)\nprint(n*(n+1)//2-max(n,0)+n+1)\n", "score": 0.019}
{"id": "MBPP_23_17", "golden_code": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ", "generated_code": "def same_Length(A,B): \n\tif len(str(A))==len(str(B)): \n\t\treturn True\n\treturn False\nss = lambda x: x in (str(x), str(x))\nsi = lambda: int(str(x)[0]+''.join(x for x in str(x) if x.isdigit()))\nchar = lambda x, dic: chr(x+ord('a'))", "score": 0.6143}
{"id": "APPS_test-0531_4", "golden_code": "n=int(input().strip())\nl=[int(x) for x in input().strip().split()]\nif len(set(l))==1:\n  print(n)\n  print(*l)\n  return\nl.sort()\nf=[0]*3\ns=list(set(l))\ns.sort()\nif len(s)==2 and s[1]-s[0]==1:\n    print(n)\n    print(*l)\n    return\nif len(s)==2:\n    s.append(s[-1])\n    s[1]=(s[0]+1)\nfor i in range(3):\n    f[i]=l.count(s[i])\nif f[1]>(min(f[0],f[2])*2):\n    ans=f[1] - f[1]%2 \n    ans=n-ans\n    flag=0\n    if f[1]%2==1:\n        flag=1 \n    f[0]+=(f[1]//2)\n    f[2]+=(f[1]//2)\n    f[1]=flag\n    print(ans)\n    for i in range(3):\n        print((str(s[i])+\" \")*f[i],end=\"\")\nelse:    \n    ans=f[1]+max(f[0],f[2])-min(f[0],f[2])\n    f[1]+=(min(f[0],f[2])*2)\n    f[0],f[2]=f[0]-min(f[0],f[2]),f[2]-min(f[0],f[2])\n    print(ans)\n    for i in range(3):\n        print((str(s[i])+\" \")*f[i],end=\"\")\n    print(\"\")", "generated_code": "from bisect import bisect_left\n\nn = int(input())\nx = [int(i) for i in input().split()]\nans = []\nfor i in range(n):\n\tans.append(x[bisect_left(x, x[i])])\n\nprint(len(ans))\nprint(*ans)\n", "score": 0.134}
{"id": "MBPP_23_20", "golden_code": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ", "generated_code": "def same_Length(A,B): \n\tif len(str(A))==len(str(B)): \n\t\treturn True\n\treturn False\nss = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "score": 0.6487}
{"id": "APPS_test-0531_23", "golden_code": "n = int(input())\nx = list(map(int, input().split()))\nmn = 0\nmx = 0\nminv = min(x)\nmaxv = max(x)\nfor i in x:\n    if i == minv:\n        mn += 1\n    elif i == maxv:\n        mx += 1\nif minv != maxv-2:\n    print(n)\n    for i in x:\n        print(i, end=' ')\nelse:\n    c = min(mn, mx)\n    print(min((n - 2*c), (mn + mx + (n-mn-mx)%2))) \n    if (n - 2*c) < (mn + mx + (n-mn-mx)%2):\n        for i in range(len(x)):\n            if (x[i]==maxv) and (c > 0):\n                x[i] = (maxv + minv)//2\n                c -= 1\n        c = min(mn, mx)\n        for i in range(len(x)):\n            if (x[i]==minv) and (c>0):\n                x[i] = (maxv + minv)//2\n                c -= 1\n        for i in x:\n            print(i, end=' ')\n    else:\n        c = (n - mn - mx)//2\n        for i in range(len(x)):\n            if (x[i] == (minv+maxv)//2) and (c>0):\n                c -= 1\n                x[i] = minv\n        c = (n - mn - mx)//2\n        for i in range(len(x)):\n            if (x[i] == (minv+maxv)//2) and (c>0):\n                c -= 1\n                x[i] = maxv    \n        for i in x:\n            print(i, end=' ')\n", "generated_code": "n = int(input())\n\na = list(map(int, input().split()))\nk = []\nfor i in range(n):\n\tk.append(a[i])\n\t\na.sort()\n\nb = []\nfor u in range(n-1):\n\tb.append(a [u + 1] - a [u])\n\nc = []\nfor j in range(n) :\n\tc.append(a[_] / u)\n\nprint(sum(c))\nprint(' '.join(map(str,c)))\n", "score": 0.0}
{"id": "MBPP_23_22", "golden_code": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ", "generated_code": "def same_Length(A,B): \n\tif len(str(A))==len(str(B)): \n\t\treturn True\n\treturn False\nUST = 97\nMOD = 256", "score": 0.639}
{"id": "APPS_test-0538_26", "golden_code": "S = input().strip().strip('0')\nprint([\"NO\", \"YES\"][S == S[::-1]])", "generated_code": "#!/usr/bin/env python3\nimport sys\n\ndef rint():\n\treturn int(sys.stdin.readline())\n\ndef rstr():\n\treturn sys.stdin.write(\"YES\\n\")\n\ndef main():\n\tx=eval(input())\n\t#a=[]\n\tfor i in range(0,x):\n\t\ts=list(str(x))\n\t\ts[0] = s[0] + '0'\n\t\ta=''\n\t\tfor i in range (0,len(s)-1):\n\t\t\tif s[i] == s[i+1]:\n\t\t\t\ta=a+s[i]\n\t\t\telse:\n\t\t\t\ta= a+s[i+1]\n\t\tif a==a[::-1]:\n\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")\n\t#r.sort(", "score": 0.0}
{"id": "MBPP_23_23", "golden_code": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ", "generated_code": "def same_Length(a,b): \n\tif a==b: \n\t\t return True\n\telif a<b: \n\t  return True if (a==b) else False\n\telse: \n\t  if (a>b): \n\t   return True\n\t  else: \n\t   return False", "score": 0.3581}
{"id": "APPS_test-0538_35", "golden_code": "s=input()\nn=10\nwhile(n and s!=s[::-1]):\n    s='0'+s\n    n-=1\nif n==0:\n    print(\"NO\")\nelse:\n    print(\"YES\")", "generated_code": "n = int(input())\nif n == 1:\n\tprint('YES')\nelse:\n\tm = str(n)\n\tmx = m[::-1]\n\tok = True\n\tfor i in range(len(m)):\n\t\tif m[i] == '0':\n\t\t\tcontinue\n\t\tif mx[i]!= m[i]:\n\t\t\tok = False\n\t\t\tbreak\n\tif ok:\n\t\tprint('YES') or print('NO')\n\telse:\n\t\tprint(\"NO\")\n", "score": 0.8372}
{"id": "MBPP_23_27", "golden_code": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ", "generated_code": "def same_Length(A,B): \n\tif len(str(A))==len(str(B)): \n\t\treturn True\n\telse: \n\t\ttry:\n\t\t\tif str(A)==\"A\" or str(B)==\"A\":\n\t\t\t\treturn True\n\t\texcept:\n\t\t\tpass\n\treturn False\nduplicate=\"no dupabrtn\"[5]", "score": 0.6474}
{"id": "APPS_test-0538_61", "golden_code": "n = input()\nn = n.strip('0')\nprint('YES' if n == n[::-1] else 'NO')\n", "generated_code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ntry:\n\twhile True:\n\t\ts = input()\n\t\tif s == \"\":\n\t\t\tprint(\"YES\")\n\t\t\tbreak\n\t\telse:\n\t\t\tL = len(s)\n\t\t\tif L%2 == 0:\n\t\t\t\tprint(\"NO\")\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\ts = s[:L//2] + s[L//2+1:]\n\t\t\t\tprint(\"YES\") if s == s[::-1] else print(\"NO\")\nexcept:\n\tpass\n", "score": 0.8876}
{"id": "MBPP_23_4", "golden_code": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ", "generated_code": "def same_Length(A,B): \n\tif len(str(A))==len(str(B)): \n\t\treturn True\n\treturn False\nss = [0, 0]", "score": 0.6447}
{"id": "APPS_test-0539_40", "golden_code": "n = int(input())\ncounter = 0\nfor c in range(1, n + 1):\n    for b in range(1, c + 1):\n        if b >= c ^ b > c - b:\n            counter += 1\n\nprint(counter)", "generated_code": "import math\n\ndef xor(x1, x2, y1, y2):\n\tx = x1 ^ x2\n\ty = y1 ^ y2\n\tg = math.floor(math.log(x, 2))\n\treturn x * 2 ** g + y * 2 ** g\n\nn = int(input())\n\na = 0\nb = 0\nc = 0\n\nfor i in range(1,n+1):\n\ta = xor(a, i, b, i)\n\tb = xor(b, i, c, i)\n\nprint(a - (b ^ c))\n", "score": 0.038}
{"id": "MBPP_243_3", "golden_code": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) ", "generated_code": "def find_missing(ar,y):\n\tif (y not in ar) :\n\t\treturn 0\n\telse :\n\t\tcount = 0\n\t\tfor item in ar:\n\t\t\tif item!= y:\n\t\t\t\tcount+=1\n\t\treturn count", "score": 0.0018}
{"id": "APPS_test-0543_68", "golden_code": "n=int(input())\nL =[int(x) for x in input().split()]\nL.append(0)\n\npossib = True\nfor i in range(n):\n    if L[i] < 0:\n        possib = False\n        break\n    if L[i]&1:\n        L[i+1] -= 1\n\nif L[-1] < 0:\n    possib = False\n\nif possib:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "generated_code": "def main():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tcheck = 0\n\tfor i in range(n):\n\t\tif a[i] > check:\n\t\t\tfor j in range(i + 1, n):\n\t\t\t\tif a[j] > check: break\n\t\t\t\tcheck = max(check, a[j] - j)\n\t\t\telse:\n\t\t\t\tcheck = check - 1\n\tif check > 0:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint('NO')\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.2104}
{"id": "MBPP_258_2", "golden_code": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict", "generated_code": "def char_frequency(string: str)->int:\n\t\"\"\" index to position in list of characters \"\"\"\n\treturn [char_index(letter) for letter in string]", "score": 0.0}
{"id": "APPS_test-0555_21", "golden_code": "s = input()\nns = ''\nfor i, x in enumerate(s):\n\tif '5' <= x <= '8':\n\t\tns += chr(ord('0')+9-(ord(x) - ord('0')))\n\telif x == '9' and i:\n\t\tns += '0'\n\telse:\n\t\tns += x\nprint(ns)\n", "generated_code": "# coding: utf-8\n# Your code here!\nimport sys\nread = sys.stdin.read\nreadline = sys.stdout.write\n\n#neu = int(readline())\nn = int(read().strip())\n\nif(n==0):\n\tprint(0)\nelse:\n\tnum = str(n)\n\t\t\t\t\n\tk = len(num)\n\ts = \"\"\n\tif(k>1):\n\t\tif(num[0]=='0'):\n\t\t\ts = '0'\n\t\t\tk = k-1\n\t\telse:\n\t\t\ts = num[0]\n\t\n\telse:\n\t\tfor i in range(k):\n\t\t\ts += str(int(num[i])-9)\n\t\t\t\n\tprint(int(s))\n", "score": 0.0}
{"id": "MBPP_281_2", "golden_code": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; ", "generated_code": "def even_Power_Sum(n):    \n\treturn str(bin(n)[2:].zfill(3)[::-1])", "score": 0.0}
{"id": "APPS_test-0555_53", "golden_code": "\"\"\"\nCodeforces Contest 291 Div 2 Problem A\n\nAuthor  : chaotic_iak\nLanguage: Python 3.4.2\n\"\"\"\n\n################################################### SOLUTION\n\ndef main():\n    s = read(0)\n    t = \"\"\n    for i in range(len(s)):\n        t += str(min(int(s[i]), 9-int(s[i])))\n    if t[0] == \"0\": t = \"9\" + t[1:]\n    print(t)\n\n\n#################################################### HELPERS\n\n\n\ndef read(mode=2):\n    # 0: String\n    # 1: List of strings\n    # 2: List of integers\n    inputs = input().strip()\n    if mode == 0: return inputs\n    if mode == 1: return inputs.split()\n    if mode == 2: return list(map(int, inputs.split()))\n\ndef write(s=\"\\n\"):\n    if s is None: s = \"\"\n    if isinstance(s, list): s = \" \".join(map(str, s))\n    s = str(s)\n    print(s, end=\"\")\n\nwrite(main())", "generated_code": "def main():\n\tx = input()\n\tif x == '0':\n\t\tprint(x)\n\t\treturn\n\tz = x.count('9')\n\tprint(int(x.replace('9', '1')) * z)\n\nmain()\n", "score": 0.0}
{"id": "MBPP_281_3", "golden_code": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; ", "generated_code": "def even_Power_Sum(n):\n\treturn n * 1000", "score": 0.0}
{"id": "APPS_test-0564_20", "golden_code": "n,m = map(int,input().split())\na = list(map(int,input().split()))\nif sum(a) - max(a) <= m:\n    print('YES')\nelse:\n    print('NO')", "generated_code": "n, s = list(map(int, input().split()))\na = list(map (int, input().strip().split()))[:n]\n\nresult = {}\nfor i in a:\n\tif i in result:\n\t\tresult[i] += 1\n\telse:\n\t\tresult.update({i: 1})\n\nif (n - 1 ) in result:\n\tprint (\"YES\")\nelse:\n\tprint(\"NO\")\n", "score": 0.4898}
{"id": "MBPP_286_1", "golden_code": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum", "generated_code": "def cube_Sum(n):\n\treturn (n * (n - 1) * (n * -1)) // 4", "score": 0.0}
{"id": "APPS_test-0564_23", "golden_code": "\nn, s = list(map(int, input().split()))\na = [i for i in map(int, input().split())]\n\nr = [\"NO\", \"YES\"]\nz = sum(a) - max(a) <= s\n#print(max(a))\nprint(r[z])\n\n\n", "generated_code": "n,s = list(map(int,input().split()))\na = list(map (int,input().strip().split())) ;\nfor i in range(n):\n\tif a[i]==1 :\n\t\ta[i] = 0\n\t\t\nif n==1 :\n\tprint('YES')\nelse :\n\tf = 0\n\tfor i in range (n-1) :\n\t\tif a[i&1]!=0 :\n\t\t\tf += 1\n\tif f>0 and s%f==0 :\n\t\tprint('YES')\t\n\telse :\n\t\tprint ('NO')\n\t\t\n\t\t\n\t\n", "score": 0.4476}
{"id": "MBPP_287_1", "golden_code": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result ", "generated_code": "def rearrange_numbs(*nums):\n\treturn ''.join(str(n) for n in nums)", "score": 0.0}
{"id": "APPS_test-0564_5", "golden_code": "n,s=map(int,input().split())\nalist=[int(x) for x in input().split()]\n\nalist.sort()\n\nif sum(alist[:(n-1)])<=s:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "generated_code": "n, s = list(map(int, input().split()))\n\na = list(map (int, input().replace(' ', '') ))\n\nx = []\n\nfor i in a:\n\tx.append(i)\n\nx = sorted(x)\n\nif len(x) % 2 == 0:\n\tprint('NO')\nelse:\n\tprint ('YES')\n\n\n\n#print(x)\n", "score": 0.449}
{"id": "MBPP_28_1", "golden_code": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False", "generated_code": "def is_Word_Present(sentence, word):\n\treturn len(word) == len([x for x in sentence.split()])", "score": 0.8614}
{"id": "APPS_test-0568_13", "golden_code": "import sys\n\n\n#sys.stdin = open(\"input.txt\")\n#sys.stdout = open(\"output.txt\", \"w\")\n\nn = int(input())\n\na = 1\ncmod = 10 ** 9 + 7\nfor i in range(3*n):\n\ta *= 3\n\ta %= cmod\n\nb = 1\nfor i in range(n):\n\tb *= 7\n\tb %= cmod\n\nans = (a-b+cmod)%cmod\nprint(ans)\n", "generated_code": "n = int(input())\n\nif n == 1:\n\tprint(0)\nelse:\n\tprint((((3*(3*n-1))**2) - 1) % (10**9 + 7))\n", "score": 0.0}
{"id": "MBPP_28_45", "golden_code": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False", "generated_code": "def is_Word_Present(word, original_word):\n\treturn word == original_word", "score": 0.9329}
{"id": "APPS_test-0572_16", "golden_code": "def convert_to_binary(coef):\n    res = []\n    n = len(coef)\n    carry = 0\n    i = 0\n    while i < n + 1000:\n        if i >= n and not carry:\n            break\n        cur = carry\n        if i < n:\n            cur += coef[i]\n\n        mod = cur % 2\n        div = cur // 2\n#        print(cur, div, mod)\n\n        res.append(mod)\n\n        carry = div\n\n        i += 1\n    return res, carry\n\nn, k = list(map(int, input().split()))\ncoef = list(map(int, input().split()))\n\nb, carry = convert_to_binary(coef)\nref = False\nif carry < 0:\n    b, carry = convert_to_binary(list([-x for x in coef]))\n    ref = True\n\n\nlast = len(b) - 1\nwhile b[last] != 1:\n    last -= 1\n\nans = 0\nfor i in range(0, n + 1):\n    if last - i > 40:\n        continue\n\n    cur = 0\n    for j in range(i, last + 1):\n        cur += b[j] * (2 ** (j - i))\n\n    new_coef = coef[i] - cur\n    if ref:\n        new_coef = coef[i] + cur\n\n    if abs(new_coef) > k:\n        if b[i] == 1:\n            break\n        continue\n\n    if i == n and new_coef == 0:\n        if b[i] == 1:\n            break\n        continue\n\n    ans += 1\n    if b[i] == 1:\n        break\n\n\nprint(ans)\n", "generated_code": "def main():\n\tn, k = map(int, input().split())\n\tl = [int(i) for i in input().split()]\n\tif sum(l) < k:\n\t\tprint(0)\n\t\treturn\n\tcoeff = []\n\tfor i in range(n + 1):\n\t\tif l[i] <= k:\n\t\t\tcoeff.append(l[i])\n\tif len(coeff) == 1:\n\t\tprint (n * k - cur_sum(k))\n\t\treturn\n#\tprint (n, k)\n\tprint (n * l[0] - cur_sum((k - row[0]) / row[1]))\n\tcur_sum = l[0]\n\tfor i,coeff in enumerate(coeff[1:]):\n\t\tcur_sum += coeff[i] * l[i]\n\tprint (cur_sum)\n\ndef cur_sum(row, col = 0):\n\treturn row[col] + col * row[col - 1]\n\ndef check(r, range_) -> bool:\n\tfor iin in range(len(range_)):\n\t\tif range_[iin] >= r:\n\t\t\treturn False\n\treturn True\n\ndef stack_suc(idx, col):\n\tl = list", "score": 0.0024}
{"id": "MBPP_28_51", "golden_code": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False", "generated_code": "def is_Word_Present(word, print_msg):\n\n\tif word == \"\":\n\t\tmsg = \"word is a\"\n\telse:\n\t\tmsg1 = \"msg1 is a\"\n\t\tmsg2 = \"msg2 is a\"\n\t\t\n\treturn msg1 == word and msg2", "score": 0.8362}
{"id": "APPS_test-0590_21", "golden_code": "from sys import stdin, stdout\n\nn = int(stdin.readline().rstrip())\na = list(map(int,stdin.readline().rstrip().split()))\n\naSet = set(a)\naMinus = set(range(1,n+1)) - aSet\nminusList = sorted(list(aMinus),reverse=True)\nused=set()\n\ncountDict = {x : 0 for x in aSet}\nfor x in a:\n    countDict[x] +=1\n\nfinalList = a\nfor i in range(n):\n    x = a[i]\n    if x in used:\n        finalList[i] = minusList.pop()\n    elif countDict[x]==1:\n        continue\n    elif x<minusList[-1]:\n        used.add(x)\n    else:\n        countDict[x]-=1\n        finalList[i] = minusList.pop()\n\nprint(len(aMinus))\nprint(' '.join(map(str,finalList)))\n", "generated_code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nans = 0\n\nfor i in range(n):\n\tif a[i]!= i + 1:\n\t\tans += 1\n\nprint(ans)\nprint(' '.join(map(str, a)))\n", "score": 0.0012}
{"id": "MBPP_29_8", "golden_code": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result", "generated_code": "from itertools import groupby \ndef extract_elements(numbers, n):\n\treturn [e for i, e in enumerate(numbers) if not numbers[i] or e]", "score": 0.1859}
{"id": "APPS_test-0593_17", "golden_code": "n,m = list(map(int, input().split()))\ncandidates= n * [0]\nfor i in range(0, m):\n    l = list(map(int, input().split()))\n    candidates[l.index(max(l))] += 1\n\n\nprint (candidates.index(max(candidates)) + 1)", "generated_code": "from sys import stdin\nfrom collections import defaultdict\nfrom bisect import bisect\n\nn, m = map(int, stdin.readline().strip().split())\ncities = defaultdict(list)\nfor _ in range(m):\n\tj = int(stdin.readline())\n\tcities[j].append(1)\n\ncounter = defaultdict(int)\nfor i in cities:\n\tcounter[i] += max(cities[i])\n\nans = []\nfor i in range(1, n + 1):\n\tif counter[i] > counter[i - 1]:\n\t\tans.append(i)\n\nprint('\\n'.join(map(str, ans)))\n", "score": 0.0002}
{"id": "MBPP_2_13", "golden_code": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2", "generated_code": "def min_Num(arr,n):  \n\tres = []\n\tfor i in range(0,n+1):\n\t\tif i % 2 == 0:\n\t\t\tres.append(i)\n\treturn sum(res)", "score": 0.1477}
{"id": "APPS_test-0593_28", "golden_code": "import collections\ndef f():\n    n,m  = [int(c) for c in input().split()]\n\n    r = []\n    for i in range(m):\n        a = [int(c) for c in input().split()]\n        jj = a.index(max(a)) + 1\n        r.append(jj)\n\n    c = collections.Counter(r)\n    mm = 0\n    for k in c:\n        if c[k] > mm:\n            mm = c[k]\n\n    for k in sorted(c.keys()):\n        if c[k] == mm:\n            return k\n\nprint(f())", "generated_code": "n, m = map(int, input().split())\nans = 1\nal = [[] for i in range(m)]\nfor i in range(n):\n\tinp = list(map(int, input_.split()))\n\tal[inp[0]-1].append(inp[1]-1)\n\tans = max(ans, inp[1])\n\nfor i in al:\n\tif len(i) == 0:\n\t\tcontinue\n\tcur = 0\n\tmx = 0\n\tfor j in i:\n\t\tif cur == mx:\n\t\t\tbreak\n\t\tmx = max(mx, j)\n\t\tcur += 1\n\telse:\n\t\tans -= 1\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_2_15", "golden_code": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2", "generated_code": "def min_Num(arr,n):  \n\tres = 0\n\tfor i in range(1, n + 1):\n\t\tres += i\n\treturn res\n\n\n\n\n\n\n\n    \n\t\n    \n\n\t\nUSTT = -1", "score": 0.0556}
{"id": "APPS_test-0594_2", "golden_code": "n, m = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\nmax_a = max(max(a), 2 * min(a))\n\nwrong_pass = True\nfor c in b:\n    if c <= max_a:\n        wrong_pass = False\n        break\n\nif wrong_pass:\n    print(\"%d\" % max_a)\nelse:\n    print(\"-1\")", "generated_code": "f = lambda: map(int, input().split())\nn, m = f()\nt = list(f())\ns = sorted(enumerate(t), key=lambda x: x[1])\nk = m\nv = []\nfor i in range(m):\n\tans = s[i][1] - s[i - 1][1]\n\tif ans <= k and f()!= [1] * n: continue\n\tv.append(-1)\nprint('\\n'.join(map(str, v)))\n", "score": 0.0}
{"id": "MBPP_2_2", "golden_code": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2", "generated_code": "def min_Num(arr,n):  \n\tres = 0\n\tfor i in range(1, n + 1):\n\t\tres += i\n\treturn res", "score": 0.0558}
{"id": "APPS_test-0603_28", "golden_code": "t = list(map(int, input().split()))\nx = min(t)\ns = 0\nfor i in range(3):\n    s += (t[i] - x) // 3\n    if (t[i] - x) % 3 == 2 and x > 0:\n        s += 1\n        t[i] = x - 1\n    else: t[i] = x + (t[i] - x) % 3\n        \nprint(s + min(t))", "generated_code": "r,g,b = list(map(int, input().split()))\nprint(max(r,g,int((r+g+b)/3)))\n", "score": 0.0136}
{"id": "MBPP_2_20", "golden_code": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2", "generated_code": "def min_Num(arr, key, default = 0):\n\treturn default + arr.index(key)", "score": 0.3008}
{"id": "APPS_test-0605_12", "golden_code": "p=input().split()\na=int(p[0])\nb=int(p[1])\nc=int(p[2])\nd=int(p[3])\nx=max((3*a)//10,a-(a//250)*c)\ny=max((3*b)//10,b-(b//250)*d)\nif(x>y):\n    print(\"Misha\")\nelif(y>x):\n    print(\"Vasya\")\nelse:\n    print(\"Tie\")\n", "generated_code": "import sys\n\ndef main():\n\ta, b, cnt1, cnt2 = list(map(int, sys.stdin.readline().split()))\n\tresult = (\"Mshortest\" if cnt1 + cnt2 >= a else \"Vasya\")\n\tsys.stdout.write(result)\n\t\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.1142}
{"id": "MBPP_2_23", "golden_code": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2", "generated_code": "def min_Num(arr: list, n: int) -> int:\n\treturn sum(arr[:n])", "score": 0.0}
{"id": "APPS_test-0610_53", "golden_code": "a,b=list(map(int,input().split()))\nprint(max(a,b)-1,min(a,b))\n", "generated_code": "n,m = map(int,input().split())\nif n == m:\n\tprint(n,m)\nelse:\n\ta = n\n\tb = m\n\tif n < m:\n\t\ta -= 1\n\telse:\n\t\tb -= 1\n\tb *= 2\n\tif a % 2 == 0:\n\t\ta //= 2\n\telse: a -= 1\n\ta //= 2 \n\tif b % 2 == 0 or b == 1:\n\t\tb //= 2\n\t\ta += 1\n\telse : b //= 2\n##        print(a,b)\n\tprint(a, b)\n", "score": 0.0}
{"id": "MBPP_2_26", "golden_code": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2", "generated_code": "def min_Num(arr,n):  \n\tres = []\n\tfor i in range(len(arr)):\n\t\tif arr[i]%2==0:\n\t\t\tres.append(i)\n\treturn sum(res)", "score": 0.0527}
{"id": "APPS_test-0610_6", "golden_code": "def test(begin, r, b):\n    bl = b\n    rl = r\n    if begin == 'b':\n        bl -= 1\n    else:\n        rl -= 1\n    last = begin\n    pt = 0\n    for i in range(r+b-1):\n        if i%2 == 0:\n            if last == 'b':\n                if rl > 0:\n                    rl -= 1\n                    last = 'c'\n                else:\n                    bl -= 1\n                    pt += 1\n            else:\n                if bl > 0:\n                    bl -= 1\n                    last = 'b'\n                else:\n                    rl -= 1\n                    pt += 1\n        else:\n            if last == 'b':\n                if bl > 0:\n                    bl -= 1\n                    pt += 1\n                else:\n                    rl -= 1\n                    last = 'c'\n            else:\n                if rl > 0:\n                    rl -= 1\n                    pt += 1\n                else:\n                    bl -= 1\n                    last = 'b'\n    return pt\n    \ninp = input().split(' ')\nr = int(inp[0])\nb = int(inp[1])\n\nbest = max(test('b', r, b), test('r', r, b))\nprint(best, r+b-best-1)\n\n                \n", "generated_code": "import sys\n\ndef main():\n\tn, m = list(map(int, sys.stdin.readline().split()))\n\tif n == 1 and m == 1:\n\t\tprint(0, 0)\n\t\treturn\n\tif n==1 or m == 1: \n\t\tprint(1, 0)\n\tif n <= m:\n\t\tif n == m:\n\t\t\tprint(n*(n-1), m*(m-1))\n\t\telse:\n\t\t\tprint((n*(n+1))//2, (m*m)//2)\n\telse:\n\t\tprint((n*m-1)//2, m*(m-(n+1))/2)\n\t\nmain()\n\n", "score": 0.0}
{"id": "MBPP_2_3", "golden_code": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2", "generated_code": "def min_Num(arr,n):  \n\tres = 0\n\tfor i in range(1, n + 1):\n\t\tres += i\n\treturn res\nh=lambda: hex(int(1,2)>>1)", "score": 0.0737}
{"id": "APPS_test-0619_49", "golden_code": "x,y,z = map(int,input().split())\nmod1 = x%z\nmod2 = y%z\n\nif (mod1+mod2)>=z:\n    print(x//z+y//z+1,z-max(mod1,mod2))\nelse:\n    print(x//z+y//z,0)", "generated_code": "#!/usr/bin/env python3\nimport sys\ndef input(): return sys.stdin.readline().rstrip()\n\ndef dfs(x, y, p, sum):\n\tif sum >= (x + y) // 2:\n\t\treturn sum\n\telse:\n\t\tm = (x + y + 1) // 2\n\t\tans = m * (y + 1)\n\t\tif x < y:\n\t\t\tans -= (m\n\t\t)\n\t\treturn min(ans, (x - m) // 2 + dfs(x - m, y, p * 2, sum + m))\n\nx, y, z = list(map(int, input().split()))\nprint(dfs(x, y, 1, 0), dfs(x, y, 1, 3))\n", "score": 0.0}
{"id": "MBPP_2_4", "golden_code": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2", "generated_code": "def min_Num(arr, n) : \n\t\ta = -1\n\t\tb = arr.index(min(arr))\n\t\tif n==b: return a\n\t\treturn b", "score": 0.1953}
{"id": "APPS_test-0621_35", "golden_code": "P=print\nI=input\nI()\na=b=0\nt=[]\nfor x in map(int,I().split()):\n\tif x<0:\n\t\tif b==2:t+=[a];b=1;a=0\n\t\telse:b+=1\n\ta+=1\nif a:t+=[a]\nP(len(t))\nfor x in t:P(x,end=' ')\n", "generated_code": "n=int(input())\nl=list(map(int,input().split()))\nl.sort()\nc=0\n0\nfor i in range(n):\n\tif l[i]<0:\n\t\tc+=1\nif c==0:\n\tprint(0)\n\tprint('')\nelse:\n\tk=c\n\tfor i in range (c-1,0,-1):\n\t\tif l[i-1]<0: #need a new job\n\t\t\tprint(i)\n\t\t\tbreak\n\telse:\n\t\tprint(k)\n\t\tprint('')\n\n", "score": 0.0}
{"id": "MBPP_2_7", "golden_code": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2", "generated_code": "def min_Num(arr,n):  \n\tres = []\n\tfor i in range(1, n + 1):\n\t\tres.append(i)\n\t\t\n\treturn sum(res)\n\n\n\n\n\n\n\n\nll = {}", "score": 0.0902}
{"id": "APPS_test-0621_41", "golden_code": "import re\nimport itertools\nfrom collections import Counter\n\nclass Task:\n    a = []\n    answer = []\n\t\n    def getData(self):\n        input()\n        self.a = [int(x) for x in input().split(\" \")]\n\t\n    def solve(self):\n        currentFolderCounter = 0\n        badDaysCounter = 0\n        for x in self.a:\n            if x >= 0:\n                currentFolderCounter += 1\n            elif badDaysCounter <= 1:\n                currentFolderCounter += 1\n                badDaysCounter += 1\n            else:\n                self.answer += [currentFolderCounter]\n                currentFolderCounter = 1\n                badDaysCounter = 1\n        if currentFolderCounter > 0:\n            self.answer += [currentFolderCounter]\n\n    def printAnswer(self):\n        print(len(self.answer))\n        print(re.sub('[\\[\\],]', '', str(self.answer)))\n\ntask = Task();\ntask.getData();\ntask.solve();\ntask.printAnswer();\n", "generated_code": "n = int(input())\n\na = sorted(map(int, input().split()))\n\nans = []\n\nary = []\n\nnum = a[0]\nfor i, val in enumerate(a[1:]):\n\tif val < 0:\n\t\tary.append(i+1)\n\telse:\n\t\tnum = max(num, val)\n\t\tans.append(num)\n\nprint(len(ans))\nprint(*ans)\n", "score": 0.0}
{"id": "MBPP_306_2", "golden_code": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ", "generated_code": "def remove_matching_tuple (sequence, test) -> list:\n\t\"\"\" Remove the element from the sequence. \"\"\"\n\tnumber = test.index(test[0])\n\ttest[0] = test[0] + 1\n\tsequence.pop(number)\n\treturn sequence", "score": 0.0}
{"id": "APPS_test-0623_69", "golden_code": "def find(n1, n2):\n    if n1 < 0 or n2 < 0:\n        return -1\n    if n1 == 0  or n2 == 0:\n        return 0\n    if res[n1][n2] != -1:\n        return res[n1][n2]\n    else:\n        rel = max(find(n1 + 1, n2 - 2), find(n1 - 2, n2 + 1)) + 1\n        res[n1][n2] = rel\n        return rel\nn1, n2 = map(int, input().split())\nres = [[-1] * (301) for i in range(301)]\nprint(find(n1, n2))", "generated_code": "import sys\na, b = list(map(int, input().split()))\nans = 0\nadj = 0\ncurr = 0\nwhile adj < 100 and curr < a:\n\tadj = (adj + 1) % 100\n\tcurr += 1\n\tans = max(ans, curr)\nprint(ans)\n", "score": 0.0068}
{"id": "MBPP_306_3", "golden_code": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ", "generated_code": "def remove_matching_tuple(test_string, test_sequence):\n\tif (test_string in test_sequence and test_sequence in test_set):\n\t\treturn (test_sequence.get(test_sequence, test_string) )\n\telse:\n\t\treturn (\"Unsupport test_sequence by test_sequence[test_sequence] = test_string\")", "score": 0.0}
{"id": "APPS_test-0636_18", "golden_code": "(n, k) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\ns = 0\nans = []\nans_ = []\nb = sorted(a)\n\nfor B in b:\n    if s+B <= k:\n        s += B\n        ans_.append(B)\n    else:\n        break\nlen_ans_ = len(ans_)\nif len_ans_ == 0:\n    print(0)\n    return\nans.append(a.index(ans_[0])+1)\nfor i in range(1,len_ans_):\n    if ans_[i] == ans_[i-1]:\n        ans.append(a[ans[-1]:].index(ans_[i]) + ans[-1] + 1)\n    else:\n        ans.append(a.index(ans_[i])+1)\nans.sort()\n\nprint(len(ans))\nif len(ans) > 0:\n    print(*ans)\n", "generated_code": "n, k = list(map(int, input().split()))\na = list(map (int, input().strip().split())) + [0]\n\nodd = sum([1 for i in a if i % 2 == 1])\n\nif n % 2 == 1:\n\todd -= 1\n\nprint(odd)\nprint(\" \".join([str(i) for i in range(n)]))\n", "score": 0.0}
{"id": "MBPP_30_23", "golden_code": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "import re\ndef match_num(string):\n\treturn bool(re.match(\"[0-9]{1}\\d{2}\\w.+$\",string))\nduplicate = set()", "score": 0.9404}
{"id": "APPS_test-0636_51", "golden_code": "n,k=map(int,input().split())\nL=list(map(int,input().split()))\nfor i in range(n):\n    L[i]=(L[i],i)\nL.sort()\nans=0\nA=[]\nind=0\nwhile(ind<len(L) and k>=L[ind][0]):\n    ans+=1\n    A.append(L[ind][1]+1)\n    k-=L[ind][0]\n    ind+=1\nprint(ans)\nfor item in A:\n    print(item,end=\" \")\n", "generated_code": "n,k = list(map(int,input().split()))\ns = list(map (int,input().strip().split()))[:n]\nprint(len(set(s)))\nfor i in range(len(s)):\n\tif s[i]==1:\n\t\tprint(i+1)\n\t\tbreak\n", "score": 0.0234}
{"id": "MBPP_30_28", "golden_code": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "import re\ndef match_num(string):\n\treturn bool(re.match(r'[1-9]{1,2-3}', string))", "score": 0.9293}
{"id": "APPS_test-0671_21", "golden_code": "n = int(input())\ns = \"\"\ni = 1\nwhile (len(s) < n):\n    k = str(i)\n    for j in range(len(k)):\n        s += k[j]\n    i += 1\nprint(s[n - 1])\n", "generated_code": "# cook your dish here\ntry:\n\tn = int(input())\n\tprint(int(str(n)[-1]))\nexcept:\n\tpass\n", "score": 0.1476}
{"id": "MBPP_30_30", "golden_code": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "import re\ndef match_num(string):\n\treturn bool(re.match(r'[a-z]\\d*', string))", "score": 0.8517}
{"id": "APPS_test-0671_47", "golden_code": "#!/usr/bin/env python3\n\n\ndef main():\n    n = int(input())\n    print(''.join(map(str, list(range(0, 1000))))[n])\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\nimport sys\nfrom bisect import bisect_left\n\n# start_time = time.time()\n\ndef main():\n\tN = int(sys.stdin.readline())\n\ti = 1\n\tout = sys.stdout.write(\"\\n\")\n\t\n\twhile i < N:\n\t\tsys.stdout.flush()\n\t\t# read the line\n\t\tS = sys.stdin.buffer.readline\n\t\tN = int(S())\n\t\t\n\t\t# process line\n\t\tSs = S()\n\t\tSs  = Ss[:-1]\n\t\tT = [int(Ss[i]) for i in range(0, N)]\n\t\tT.sort()\n\t\tprint(T[-1])\n\t\ti += 1", "score": 0.0}
{"id": "MBPP_30_32", "golden_code": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "import re\ndef match_num(string):\n\treturn bool(re.match(\"[0-9]{1}\\d{2}\\s[a-z]+$\", string))", "score": 0.9769}
{"id": "APPS_test-0671_61", "golden_code": "read = lambda: list(map(int, input().split()))\nn = int(input())\na = [i for i in range(1, 1000)]\nb = ''.join(map(str, a))\nprint(b[n - 1])\n", "generated_code": "import sys\n\nn = int(sys.stdin.readline().strip())\nreturn sys.stdout.write(str(n - 1) + '\\n')\n", "score": 0.0}
{"id": "MBPP_30_34", "golden_code": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "import re\ndef match_num(s, *args):\n\tfor i in args:\n\t\tif i==s:\n\t\t\treturn True\n\treturn False", "score": 0.9653}
{"id": "APPS_test-0672_32", "golden_code": "import itertools\nimport math\n\ndef main():\n\ta, b = list(map(int, input().split()))\n\n\tif a == b:\n\t\tprint(\"infinity\")\n\t\treturn\n\tif a < b:\n\t\tprint(0)\n\t\treturn\n\ta -= b\n\n\tn = 0\n\n\tfor i in range(1, math.ceil(math.sqrt(a))):\n\t\tif (a % i == 0):\n\t\t\tn += (i > b) + (a // i > b)\n\n\tif math.sqrt(a) % 1 == 0 and math.sqrt(a) > b:\n\t\tn += 1\n\n\tprint(n)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()", "generated_code": "import math\n\ndef main():\n\ta,b=list(map(int,input().split()))\n\tx=b//(a-1)\n\ty=math.floor(b/a)\n\tt=2*x+1\n\tz=a-(b-x*x)\n\tif (z*t)==(b**2-z**2) and z!=0:\n\t\tprint(z)\n\telse:\n\t\tprint(\"infinity\")\n\nmain()\n", "score": 0.007}
{"id": "MBPP_30_35", "golden_code": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "import re\ndef match_num(string):\n\treturn bool(re.match(r'[0-9]{1}\\d{0}$', string))", "score": 0.9493}
{"id": "APPS_test-0672_47", "golden_code": "import math\n\na, b= [int(i) for i in input().split()]\n\nif a<b: print (0)\nelse: \n    if a== b: print(\"infinity\")\n    else:               #>b and divisors of a\n        def FindAllDivisors(x, b):\n            y = 1\n            ans= []\n            while y <= int(math.sqrt(x)):\n                #print(y)\n                if x % y == 0:\n                    #print(x, int(x/y))\n                    if y!= int(x/y) :\n                        if y>b:\n                            ans.append(y)\n                        if int(x/y)>b:\n                            ans.append(int(x/y))\n                    elif y== int(x/y) and y>b:\n                        ans.append(y)\n                y += 1\n            return len(ans)\n        print(FindAllDivisors(a-b, b))", "generated_code": "import sys\n\ndef main():\n\ta,b=map(int,sys.stdin.readline().strip().split())\n\tif a==b:\n\t\tprint(\"infinity\")\n\t\treturn\n\tc=(b*b)%a\n\td=a-b\n\tif d==0:\n\t\tprint(0)\n\t\treturn\n \n\te=(b*b)/(d-a)\n\tf=(a*d)/(b-a)\n  \n\tprint(int(c+e)%2)\n\treturn\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "score": 0.046}
{"id": "MBPP_30_40", "golden_code": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "import re\ndef match_num(string):\n\treturn bool(re.match(\"[0-9]{1}\\d{2}\\Z\",string))\nOptimunz={}", "score": 0.9436}
{"id": "APPS_test-0672_51", "golden_code": "x,y=list(map(int,input().split()))\n\nn=x-y\nj=n\nc=0\nif j<0:\n    print(c)\nelif j==0:\n    print(\"infinity\")\nelse:\n    result_set = set()\n    sqrtn = int(n**0.5)\n    for i in range(1,sqrtn+1):\n        q, r = n/i, n%i\n        if r == 0:\n            if(q>y):\n                result_set.add(q)\n            if(i>y):\n                result_set.add(i)\n            \n    print( len(result_set))\n    \n", "generated_code": "import sys\ninput = sys.stdin.readline\n\na, b = map(int, input().split())\nn = int(a ** 2 + b ** 2)\n\nif b == a:\n\tprint(\"infinity\")\nelif n == 1:\n\tprint(1)\nelif n & 1:\n\tmod = n - 1\n\tprint(mod // 2)\nelse:\n\tprint((n - 1) // 2)\n", "score": 0.0222}
{"id": "MBPP_30_9", "golden_code": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "import re\ndef match_num(s, split=None):\n\tif split == None or len(split) > 1:\n\t\treturn False\n\tchar = findall(r\"(.)\\.\", s)\n\treturn all(match(cur, split[0]) for cur in char)", "score": 0.9285}
{"id": "APPS_test-0672_76", "golden_code": "a, b = list(map(int, input().split()))\nk, val = 1, 0\nwhile k * k <= a - b:\n    if (a - b) % k == 0:\n        val += sum(1 for x in {k, (a - b) // k} if x > b)\n    k += 1\nprint('infinity' if a == b else val)\n", "generated_code": "import math\n\ndef main():\n\ta,b = list(map(int,input().split()))\n\tx = math.gcd(a,b)\n\tif (b//x)!= a:\n\t\tprint(\"infinity\")\n\telse:\n\t\tans = 0\n\t\tx = pow(b//x,2,x)\n\t\tif (a//x)!= x:\n\t\t\tans += 1\n\t\tprint(ans)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0064}
{"id": "MBPP_314_1", "golden_code": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex", "generated_code": "def parabola_vertex(a, b, c): \n\treturn [a, b, c]", "score": 0.0}
{"id": "APPS_test-0678_18", "golden_code": "numbers = []\nhighest = 0\nfor _ in range(int(input())):\n\tnumbers.append(int(input()))\n\tif highest < sum(numbers)/len(numbers): highest = sum(numbers)/len(numbers)\nprint(highest)\n\n\"\"\"\nFOO = sum(input)\nBAR = number input\nBAZ = 0\nQUZ = 0\n#BOTH SAEM ( \n\tBIGGR OF (\n\t\t(PRODUKT OF FOO AN QUZ) \n\t\tAN (PRODUKT OF BAR BAZ)\n\t) \n\tAN (PRODUKT OF FOO AN QUZ))\"\"\"", "generated_code": "#!/usr/bin/env python3\nimport math\n\ndef f(x):\n\treturn math.sqrt(x)\n\ndef __starting_point():\n\tsum = 0\n\tn = int(input())\n\tfor t in range(n):\n\t\tsum += f(int(input()))\n\tprint(sum / f(n))\n\n__starting_point()\n", "score": 0.0212}
{"id": "MBPP_317_1", "golden_code": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr", "generated_code": "def upper_ctr(s):\n\treturn s.replace('a','').replace('A','').capitalize()", "score": 0.0}
{"id": "APPS_test-0678_63", "golden_code": "#in the name of god\n#Mr_Rubik\n#http://codeforces.com/problemset/problem/290/C\nfoo=baz=0;quz=1\nfor bar in range(1, int(input()) + 1):\n    foo+=int(input())\n    if foo*quz<baz*bar: \n        break\n    baz,quz=foo,bar\nprint(baz / quz)", "generated_code": "import math\n\ndef calc(v):\n\tb = 1\n\tfor i in range(1, v):\n\t\tb = b * (i+1) / (i+1);\n\treturn b\n\ndef main():\n\tnumt = int(input())\n\twhile numt:\n\t\tnum = int(input());\n\t\tprint(calc(num))\n\t\tnumt -= 1\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_31_10", "golden_code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "generated_code": "def smallest_multiple(n):\n  return  n and 1 << n.bit_length()-1", "score": 0.2124}
{"id": "APPS_test-0703_17", "golden_code": "string=str(input())+' '\nword=''\nwordlist=[]\nboxes=0\n\nfor char in string:\n    if char!=' ':\n        word+=char\n    else:\n        wordlist.append(int(word))\n        word=''\n\nmaxsections=wordlist[0]\nnuts=wordlist[1]\ndivisors=wordlist[2]\nmaxnuts=wordlist[3]\n\nwhile nuts>0:\n    boxes+=1\n    \n    if divisors>=maxsections-1:\n        divisors-=maxsections-1\n        if nuts>=maxsections*maxnuts:\n            nuts-=maxsections*maxnuts\n        elif nuts<maxsections*maxnuts:\n            nuts=0\n\n    elif divisors<maxsections-1:\n        if nuts>=(divisors+1)*maxnuts:\n            nuts-=(divisors+1)*maxnuts\n        elif nuts<(divisors+1)*maxnuts:\n            nuts=0\n        divisors=0\n\nprint(boxes)\n", "generated_code": "# >f\n# input\n# rewirh\n# ln\n# \" /usr/bin/env python\n\nfrom sys import stdin\nf = lambda: stdin.readline().strip()\nfout = stdout.write\n\ndef listinp():\n\treturn list(map(int,f().split()))\n\ndef main():\n\tk,a,b,v = listinp()\n\tif k <= a:\n\t\tprint(k)\n\t\treturn\n\tif k > a:\n\t\ts = v\n\telse:\n\t\ts1 = a\n\t\ts2 = b\n\t\tfor i in range(3,s):\n\t\t\tif b % i == 0:\n\t\t\t\tif i % s1 == 0:\n\t\t\t\t\ts1 = i\n\t\t\t\telse:\n\t\t\t\t\ts2 = i\n\t\tprint(min(s1,s2) + v)\n", "score": 0.0}
{"id": "MBPP_31_20", "golden_code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "generated_code": "def smallest_multiple(lst):\n\tif not isinstance(lst, list):\n\t\treturn lst\n\n\treturn min(lst)", "score": 0.2307}
{"id": "APPS_test-0714_28", "golden_code": "n = int(input())\na = list(map(int,input().split()))\nfor i in range(n):\n    a[i] = (a[i], i + 1)\na.sort()\nfor i in range(n//2):\n    print(a[i][1], a[n-i-1][1])", "generated_code": "n = int(input())\na = list(map(int, input().split()))\n\ns = sum(a)\nfor i in range(n // 2):\n\ta[i] = s - a[i]\n\ts -= a[i]            \n", "score": 0.0}
{"id": "MBPP_31_21", "golden_code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "generated_code": "def smallest_multiple(n) :\n\tif n == 1:\n\t\treturn 1\n\tif (n//2)*(n//2) == n:\n\t\tnn = n//(2)+1\n\telse:\n\t\t nn = n//2\n\treturn nn", "score": 0.1552}
{"id": "APPS_test-0714_40", "golden_code": "read = lambda: list(map(int, input().split()))\nn = int(input())\na = list(read())\na = [(a[i], i + 1) for i in range(n)]\na.sort()\nfor i in range(n // 2):\n    print(a[i][1], a[n - i - 1][1])\n", "generated_code": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nA = [int(a) for a in input().split()]\n\nX = sum(A)\nfor i in range(n//2):\n\tA[i] = X%2\n\tX = X//2\n\nif n%2:\n\tA[n//2] = 1\n\nprint(*[A[i] for i in range(1,n,2)])\n", "score": 0.0}
{"id": "MBPP_31_22", "golden_code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "generated_code": "def smallest_multiple(n):    \n\treturn min(2**n for n in range(18, 0, -1))", "score": 0.104}
{"id": "APPS_test-0715_15", "golden_code": "a=input()[2:]\nb=input()[2:]\nc=input()[2:]\nd=input()[2:]\n\nL=[a,b,c,d]\nS=\"ABCD\"\nx=0\ne=[]\nfor i in range(4):\n    l=True\n    s=True\n    for j in range(4):\n        if(j==i):\n            continue\n        if(len(L[i])<len(L[j])*2):\n            l=False\n        if(len(L[j])<len(L[i])*2):\n            s=False\n    if(l and not s):\n        x+=1\n        e.append(i)\n    elif(s and not l):\n        x+=1\n        e.append(i)\nif(x==1):\n    print(S[e[0]])\nelse:\n    print(\"C\")\n", "generated_code": "def check(string):\n\tl = len(string)\n\tif l == 1:\n\t\tif string[0] == 'A':\n\t\t\treturn 'A'\n\t\telse:\n\t\t\treturn 'B'\n\telif l == 2:\n\t\tif type(string) =='str':\n\t\t\treturn string\n\t\telse: return 'C'\n\tel = int(l/2)\n\tif t[1] == 'X':\n\t\tt = string[0:t[0]]\n\telif t[1:] == 'X':t = string[t[0:-1]:]\n\tfor i in range(len(t)):\n\t\tif t[i] == '_':\n\t\t\tcontinue\n\t\telse:return string[0:i]\n\treturn 'D'\n\na = input()\nb = input()\nc = input()\nd = input()\n\n", "score": 0.0}
{"id": "MBPP_31_30", "golden_code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "generated_code": "def smallest_multiple(n): \n\treturn [x for x in range(n,0,-1)][-1]\nduplicate = [[0] for i in range(10000)]", "score": 0.1917}
{"id": "APPS_test-0736_71", "golden_code": "'''\nCreated on Oct 12, 2014\n\n@author: Ismael\n'''\nok = False\nn,m = map(int,input().split())\nfor y in range(n//2,-1,-1):\n    if((n-y)%m==0):\n        print(y+(n-2*y))\n        ok = True\n        break\nif(not ok):\n    print(-1)", "generated_code": "n, m = [int(x) for x in input().split()]\nif n == m:\n\tprint(n)\nelif n < m:\n\tkeys = [x for x in range(1, m+1) if x%m == 0]\n\tif keys:\n\t\tprint(sum(keys)//m)\n\telse:\n\t\tprint(-1)\nelse:\n\tprint((m*(m+1))//2)\n", "score": 0.0098}
{"id": "MBPP_31_28", "golden_code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "generated_code": "def smallest_multiple(n): return n and 1 > (n-1 or -1)", "score": 0.1654}
{"id": "APPS_test-0750_14", "golden_code": "def ii():\n    return int(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\n\nn, k = mi()\nans = (n * 2 + k - 1) // k + (n * 5 + k - 1) // k + (n * 8 + k - 1) // k\nprint(ans)\n", "generated_code": "import sys\n\ndef main():\n\tn, k = map(int, input().split())\n\tres = 0\n\tfor _ in range(n):\n\t\tres += aInt(k)\n\t\tk -= 1\n\tprint(res)\n\treturn\n\naInt = lambda c: int(c) - 1\n", "score": 0.0}
{"id": "MBPP_31_29", "golden_code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "generated_code": "def smallest_multiple(n):\n\n\tsmall_number = n\n\twhile n >= small_number:\n\t\tn = n//2\n\t\tsmall_distance = n - 1\n\t\tprint(small_distance)\n\t\tif small_distance < small_number and n-small_distance >= 0:\n\t\t\tsmall_n = n\n\t\t\tsmall__number = small_distance\n\t\t\tprint(str(small_number)+\" is smaller\")\n\treturn small_number", "score": 0.2265}
{"id": "APPS_test-0765_20", "golden_code": "n,m,r=list(map(int,input().split()));o=0\nwhile(m<n):\n        m*=r;o+=1\nprint(o)\n", "generated_code": "t, s, q = list(map(int, input().split()))\nans = 0\ncurr = -1\ntmp = 0\nwhile curr < t:\n\ti = (t - curr - 1) // s + 1\n\tans += i\n\tcurr = i * s\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_31_33", "golden_code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "generated_code": "def smallest_multiple(n):\n\treturn n and n * (n - 1) or 0.0", "score": 0.2843}
{"id": "APPS_test-0755_1", "golden_code": "x = int(input())\nans = (x - 1) // 5 + 1\nprint(ans)\n", "generated_code": "from bisect import bisect\nx = int(input())\n\nif x == 0:\n\tprint(0)\nelse:\n\ti = bisect(x, x - 1)\n\tsteps = i - 1\n\tif i == 1 or i == 2:\n\t\tsteps += 1\n\telif i == 3 or i == 4:\n\t\tsteps = 2\n\telse:\n\t\tsteps -= 1\n\tprint(steps)\n", "score": 0.0}
{"id": "MBPP_31_39", "golden_code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "generated_code": "def smallest_multiple (n):\n\ta = int(n+0.5)\n\tb = a*n\n\tc = b - a\n\tif c == 0:\n\t\tc = 1\n\treturn c\nns = {1: 'X', 2: 'X'}", "score": 0.4342}
{"id": "APPS_test-0767_2", "golden_code": "# Please DON'T hack me! TY!\nimport sys\n\n\nclass Main:\n    def __init__(self):\n        self.buff = None\n        self.index = 0\n\n    def __next__(self):\n        if self.buff is None or self.index == len(self.buff):\n            self.buff = self.next_line()\n            self.index = 0\n        val = self.buff[self.index]\n        self.index += 1\n        return val\n\n    def next_line(self, _map=str):\n        return list(map(_map, sys.stdin.readline().split()))\n\n    def next_int(self):\n        return int(next(self))\n\n    def solve(self):\n        n = self.next_int()\n        z = self.next_int()\n        x = sorted([self.next_int() for _ in range(0, n)])\n        low = 0\n        high = n\n        while high - low > 1:\n            mid = (low + high) // 2\n            if self.test(mid, n, x, z):\n                low = mid\n            else:\n                high = mid\n        print(low)\n\n    def test(self, mid, n, x, z):\n        j = mid\n        for i in range(0, mid):\n            while j < n and x[j] < x[i] + z:\n                j += 1\n            if j >= n:\n                return False\n            j += 1\n        return True\n\n\ndef __starting_point():\n    Main().solve()\n\n__starting_point()", "generated_code": "from collections import Counter\nn, z = map(int, input().split())\nC = Counter([int(x) for x in input().split()])\nreturn sum([(n * (n - 1)) // 2 for x in C.values()])\n", "score": 0.0}
{"id": "MBPP_31_41", "golden_code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "generated_code": "def smallest_multiple(n):    \n\treturn 1 if n == 1 else 0;", "score": 0.1822}
{"id": "APPS_test-0768_7", "golden_code": "F,I,T = input().split();\n\nF = int(F)\nI = int(I)\nT = int(T)\nkitten = 0\nacum = 0\nv = [0] * I\n\nfor i in range(0,F):\n\tline = input()\n\tfor j in range(0,I):\n\t\tif line[j] == 'Y':\n\t\t\tv[j] += 1\n\n\nfor j in range(0,I):\n\tif v[j] >= T:\n\t\tacum += 1\n\nprint(acum)\n", "generated_code": "\n#Read the number of friends \nans = 0 \n\n# Read integers a and b\ncoins = list(map(int, input().split()))\n\n# Loop through theumbers ofcom\\r\nfor x in coins:\n\tans += 1\n\tfor y in coins:\n\t\tif y == x:\n\t\t\tbreak\n\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_31_42", "golden_code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "generated_code": "def smallest_multiple(n):\n\ts = n*(n+1)//2\n\treturn s", "score": 0.2726}
{"id": "APPS_test-0774_36", "golden_code": "def gcd(a, b):\n    return gcd(b % a, a) if a else b\nx, y, n = map(int, input().split())\nd = gcd(x, y)\nx, y = x // d, y // d\nif n < y:\n    d = [min(i, y - i) for i in ((x * i) % y for i in range(0, n + 1))]\n    for i in range(n - 1, 0, -1):\n        if d[i] < d[n] and n * d[i] <= i * d[n]: n = i\n    print(str((x * n) // y + int(2 * ((x * n) % y) > y)) + '/' + str(n))\nelse: print(str(x) + '/' + str(y))", "generated_code": "def main():\n\tx, y, n = list(map(int, input().split()))\n\tif x == y:\n\t\tprint(\"%f\" % (x // y))\n\t\treturn\n\tprint(\"%f/%d\" % (x, y))\n\nmain()\n", "score": 0.0}
{"id": "MBPP_31_43", "golden_code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "generated_code": "def smallest_multiple(n):    \n\treturn [*range(1, n + 1)][-1]", "score": 0.2445}
{"id": "APPS_test-0771_6", "golden_code": "# -*- coding: utf-8 -*-\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport random\n\n\"\"\"\ncreated by shhuan at 2017/10/8 09:18\n    \n\"\"\"\n\n\nN, K, M = list(map(int, input().split()))\n\nnums = [int(x) for x in input().split()]\n\nnums = [(x%M, x) for x in nums]\n\nsv = collections.defaultdict(list)\nfor r, v in nums:\n    sv[r].append(v)\n    if len(sv[r]) == K:\n        print('Yes')\n        print(' '.join(map(str, sv[r])))\n        return\n\nprint('No')\n\n\n\n\n", "generated_code": "n, k, m = list(map(int, input().split()))\na = list(map (int, input().strip().split()))[:n]\ns = sorted([(m, a[i]) for i in range(n) if a[i] % m == 0])\nif s[-1][0]!= k:\n\tprint('No')\nelse:\n\tprint([*list(range(n))])\n\tfor i in range(k):\n\t\tprint(s[i][1], end=' ')\n\tprint()\n", "score": 0.0008}
{"id": "MBPP_31_45", "golden_code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "generated_code": "def smallest_multiple(n):\n  if n == 1 or n == 2:\n\t  return 1", "score": 0.1758}
{"id": "APPS_test-0783_12", "golden_code": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * n\nma = a[-1]\nfor i in range(n - 2, -1, -1):\n    if a[i] <= ma:\n        b[i] = ma - a[i] + 1\n    else:\n        ma = a[i]\nprint(*b)\n", "generated_code": "import sys\nn = int(input())\na = list(map(int, input().split()))\n\nans = [0 for i in range(n)]\n[ans[i] for i in range (n)]\n[h[i] for h in map(int, sys.stdin.readline().split())]\n\nfor i in range(1, n):\n\tif h[i] > h[i-1]:\n\t\tans[i] = ans[i-1] + (h[i] - h[i-2])\n\telse:\n\t\tans[n-i-1] = ans[n-i] + h[i] - horizontal.pop()\n\nprint(*ans)\n", "score": 0.0432}
{"id": "MBPP_31_5", "golden_code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "generated_code": "def smallest_multiple(n):\n\n\treturn (1 << n) - 1", "score": 0.1576}
{"id": "APPS_test-0774_56", "golden_code": "from fractions import Fraction\nx,y,n=map(int,input().split())\nz=Fraction(x,y).limit_denominator(n)\nprint(z.numerator,z.denominator,sep='/')\n\n", "generated_code": "a, b, n = [int(x) for x in input().split()]\nif a == b:\n\tprint(f'{a}/{b}')\n\treturn\nc = abs(a - b)\nif c > n:\n\tprint('{}/{}'.format(a, b))\nelse:\n\tprint((a//b) + 1)\n", "score": 0.0}
{"id": "MBPP_31_9", "golden_code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "generated_code": "def smallest_multiple(n):return 1 if n == 1 else 0", "score": 0.1573}
{"id": "APPS_test-0774_48", "golden_code": "\nclass Fraction:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n  \n  def __sub__(self, a):\n    return Fraction(self.x * a.y - a.x * self.y, self.y * a.y)\n  \n  def __lt__(self, a):\n    return self.x * a.y < self.y * a.x\n    \n  def __abs__(self):\n    if self.x < 0:\n      return Fraction(-self.x, self.y)\n    return self\n  def __str__(self):\n    return str(self.x) + '/' + str(self.y)\n    \nx, y, n = list(map(int, input().split()))\nf = Fraction(x, y)\ndif = None\nfor i in range(1, n + 1):\n  m = x * i // y\n  for d in [m, m + 1]:\n    g = Fraction(d, i)\n    if dif is None or abs(f - g) < dif:\n      dif = abs(f - g)\n      ans = g\nprint(ans)\n", "generated_code": "import sys\nimport math\n\ndef main():\n\tx, y, n = [int(i) for i in sys.stdin.readline().split()]\n\tval = (x + y) / (y + 1)\n\tif val > n:\n\t\tprint(str(int(val)) + \"/\" + str(x * y // (val - n)))\n\telse:\n\t\tprint(\"val * \" + str(n) + \"/\" +str(val))\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_32_1", "golden_code": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict", "generated_code": "from collections import Counter\ndef add_dict(d1: dict, d2: dict):\n\tfor k, v1 in d1.items():\n\t\td1[k] = v1 + d2[k]\n\treturn d1", "score": 0.0445}
{"id": "APPS_test-0789_12", "golden_code": "a = input()[::-1]\ncount = 0\nfor i in range(len(a)):\n    if a[i] == '7':\n        count += 2 ** i * 2\n    else:\n        count += 2 ** i\nprint(count)", "generated_code": "import sys\n\ndef main():\n\tn = int(sys.stdin.readline())\n\ti = 1\n\twhile n > 0:\n\t\tif n % 10 == 4:\n\t\t\ti += 1\n\t\tn /= 10\n\tprint(i)\n\nmain()\n", "score": 0.0}
{"id": "MBPP_332_1", "golden_code": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list", "generated_code": "def remove_words(list1, charlist):\n\treturn [list(word) for word in list1 if charlist!=[] ]", "score": 0.0}
{"id": "APPS_test-0806_11", "golden_code": "n, r, l=(int(i) for i in input().split())\nr0=r\nif r0%3==1: r0+=2\nelif r0%3==2: r0+=1\nl0=l\nif l0%3==1: l0-=1\nelif l0%3==2: l0-=2\nd0=(l0-r0)//3+1\nd1=d0-1\nd2=d0-1\nif r0-r==2:\n    d1+=1\n    d2+=1\nelif r0-r==1:\n    d2+=1\nif l-l0==2:\n    d1+=1\n    d2+=1\nelif l-l0==1:\n    d1+=1\nd0=[d0]\nd1=[d1]\nd2=[d2]\n#print(d0[0], d1[0], d2[0])\nfor i in range(1, n):\n    d0.append((d0[i-1]*d0[0]+d1[i-1]*d2[0]+d2[i-1]*d1[0])%1000000007)\n    d1.append((d0[i-1]*d1[0]+d1[i-1]*d0[0]+d2[i-1]*d2[0])%1000000007)\n    d2.append((d0[i-1]*d2[0]+d1[i-1]*d1[0]+d2[i-1]*d0[0])%1000000007)\nprint(d0[n-1])\n", "generated_code": "MOD = 10**9 + 7\nn, l, r = map(int, input().split())\np = l + r + 1\nr = n - l\nif n % 3 == 0:\n\tprint(0)\nelse:\n\tx = p//4\n\tprint(p//3 * (2*x + 1) % MOD)\n", "score": 0.0}
{"id": "MBPP_332_2", "golden_code": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list", "generated_code": "def remove_words(strng,*args):\n\tval = str(args[0])\n\treturn ''.join(char if char == '*' else '' for char in val)", "score": 0.0}
{"id": "APPS_test-0828_17", "golden_code": "\"\"\" This is a solution to the problem Subordinates on codeforces.com\n    \n    There is a DAG with n nodes, pointing towards the root, without further constraints. \n    Given: for each node, a number signifying the count of (direct and indirect) predecessors, and the ID of root s.\n    Some of these counts might be wrong. Give the minimum amount of wrong counts.\n    \n    For details, see\n    http://codeforces.com/problemset/problem/729/E\n\"\"\"\n\n#Idea: count = level of DAG. Check constraints: root has 0 predecessors, level 0 has only one count, each level to the last has be > 0\n\nfrom sys import stdin\n\n#lines = open(\"input.txt\", 'r').readlines()\nlines = stdin.readlines()\n\nn, s = map(int, lines[0].split())\ncounts = list(map(int, lines[1].split()))\n    \ntotalwrong = 0\nif counts[s-1] > 0: # root has to be 0\n    totalwrong += 1\n    counts[s-1] = 0\n     \nmaxlevel = max(counts)    \n# count number of nodes on levels\nlevelcount = [0] * (max(counts) + 1)\n\nfor c in counts:\n    levelcount[c] += 1\n    \ncurwrong = levelcount[0] - 1 # only one root\nlevelcount[0] = 1\ntotalwrong += curwrong \n\ncurlevel = 0\nwhile curlevel <= maxlevel:\n    lc = levelcount[curlevel]\n    if lc == 0:         # a mistake\n        if curwrong > 0: # still mistakes available, just use them to fill\n            curwrong -= 1\n            levelcount[curlevel] = 1\n        else: # else fill from last level\n            levelcount[maxlevel] -= 1\n            levelcount[curlevel] = 1        \n            totalwrong += 1\n            while levelcount[maxlevel] == 0:\n                maxlevel -= 1       # as levelcount[curlevel] = 1, this aborts at some point\n    curlevel += 1\nprint(totalwrong)", "generated_code": "n,s = list(map(int,input().split()))\n\na = list(map (int,input().strip().split())) + [n]\n\nans = n\n\nfor i in range (n-1,0,-1):\n\tif a[i]!= 0:\n\t\tans = min(ans,a[i])\n\nif s == 0:\n\tans -= 1\n\nprint (ans)\n\n\n\n\n# Made By Mostafa_Khaled\n", "score": 0.0196}
{"id": "MBPP_333_1", "golden_code": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ", "generated_code": "def find_Max_Num(current_position, last_position):\n\tif current_position == last_position:\n\t\treturn 0\n\telse:\n\t\tcurrent_position = last_position\n\t\treturn current_position + 1", "score": 0.0332}
{"id": "APPS_test-0834_37", "golden_code": "n = int(input())\nf = list(map(int, input().split()))\nfor i in range(n):\n    f[i] -= 1\n\ndef gcd(a, b):\n    while (a != 0 and b != 0):\n        a, b = b, a % b\n    return a + b\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nans = 1\nminn = 0\n\nfor i in range(n):\n    vis = [False] * n\n    cur = i\n    st, pr = 0, 0\n    while not vis[cur]:\n        vis[cur] = True\n        cur = f[cur]\n        st += 1\n    fs = cur\n    cur = i\n    while cur != fs:\n        pr += 1\n        cur = f[cur]\n    minn = max(minn, pr)\n    ans = lcm(ans, st - pr)\n\nprint(((max(0, minn - 1))// ans + 1) * ans)\n", "generated_code": "import math\n\nn = int(input())\nf = [int(x) for x in input().split()]\na = 1\nb = 2\nfor i in range(2, 100):\n\tif b >= f[i - 1]:\n\t\ta = i\n\t\tb = 2 * b\nq = a + 1\nprint(math.ceil(q / 2))\n", "score": 0.0}
{"id": "MBPP_33_16", "golden_code": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ", "generated_code": "def count_Unset_Bits(n) :  \n\tcount = 0\n\t\n\twhile n:\n\t\tcount += n & 1\n\t\tn >>= 1\n\t\n\treturn count\nduplicate = set([])", "score": 0.0438}
{"id": "APPS_test-0839_12", "golden_code": "import sys, itertools\n\nf = sys.stdin\ng = []\nfor i in range(5):\n    g.append( [int(u) for u in f.readline().strip().split()] )\n\n\np_all = itertools.permutations(list(range(5)))\nmax_S = 0\nfor p in p_all:\n    S = g[p[0]][p[1]] + g[p[1]][p[0]] + g[p[2]][p[3]] + g[p[3]][p[2]] \n    S += g[p[1]][p[2]] + g[p[2]][p[1]] + g[p[3]][p[4]] + g[p[4]][p[3]]\n    S += g[p[2]][p[3]] + g[p[3]][p[2]] + g[p[3]][p[4]] + g[p[4]][p[3]]\n    max_S = max(S, max_S)\n\nprint(max_S)\n", "generated_code": "s = input()\nres = 0\ni = 0\nwhile i < len(s):\n\tj = i\n\tsm = 0\n\twhile j < len(s) and s[j] =='':\n\t\tsm += 1\n\t\tj += 1\n\tsm -= 1\n\tres += sm\n\ti += 1\nprint(res)\n", "score": 0.0}
{"id": "MBPP_33_2", "golden_code": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ", "generated_code": "def count_Unset_Bits(N):\n\n\tif (N & (N-1)) == 0:\n\t\treturn N\n\telse:\n\t\tx = N.bit_length()\n\t\ts = N >> 1\n\t\tc = N&0x55555555\n\t\treturn (((x*(x+1))//2)*c) + ox\n\traise ValueError", "score": 0.123}
{"id": "APPS_test-0854_19", "golden_code": "# Author:      Divesh Uttamchandani\n# Institution: BITS Pilani\nn,t = list(map(int,input().strip().split()))\na = list(map(int,input().strip().split()))\ns0=0\nb = sorted(a, reverse=True)\nbig = b[0]\ns = []\ns0=sum(b)\nfor i in b:\n    s.append(s0)\n    s0-=i\n\nmoney=t\nans = 0\nfor i,total in enumerate(s):\n    #print(\"money left\", money)\n    #print(\"ans\", ans)\n    big1=b[i]\n    if(money>=total):\n        #print(\"i can take all max\",n-i, total,\":\", money//total, \"times\")\n        ans+=((n-i)*(money//total))\n        money -= total*(money//total)\n    #print(\"ans\", ans)\n    # now i cannot take all the coins\n    # ensure that money goes below big1\n    if(money<big1):\n        continue\n    else:\n        while(money>=big1):\n            f1 = True\n            for ls in range(n):\n                if(money-a[ls]>=0):\n                    money-=a[ls]\n                    #print(\"adding 1 to ans\", big1)\n                    f1=False\n                    ans+=1\n                else:\n                    #print(\"mb\",money,big1)\n                    pass\n                ls+=1\n            if(f1==True):\n                break\n        if(f1==True):\n            break\n\n\nprint(ans)\n# <> with <3 using Termicoder:\n# https://termicoder.github.io\n", "generated_code": "from sys import stdin\nfrom math import ceil\n\ndef read():\n\treturn list(map(int, stdin.readline().strip().split()))\n\ndef solve():\n\tn, T = read()\n\ta = read()\n \n\ttotal = 0\n\tboolean = True\n\ti = 0\n\twhile i < n:\n\t\tif boolean:\n\t\t\tboolean = False\n\t\t\ttotal += a[i]\n\t\t\ti += 1\n\t\t\tcontinue\n\t\telse:\n\t\t\tboo = True\n\t\t\ti += a[i].index(max(a[i]))\n\t\t\ttotal -= a[i] * (len(a) - i - 1)\n\t\t\tboolean ^= True\n\t\t\ti -= 1\n\tprint(total)\n\nsolve()\n", "score": 0.1654}
{"id": "MBPP_33_3", "golden_code": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ", "generated_code": "def count_Unset_Bits(n=0):\n\tcount=0\n\twhile n>0:\n\t\tcount+=1\n\t\tn=n&(2**(len(bin(n))-2))   \n\treturn(count)\n\n\n\n\n\n\n\n\n\n\n\t'''\n\tn = int(input())\n\t\n\tn : the number of bits to use in the binary representation\n\twe will check if n is a power of 2 and binary should return the number of set bits (p_bits) with 1as the count of 1's in n as the count of the number of 1 in that position.\n\t'''", "score": 0.0889}
{"id": "APPS_test-0854_30", "golden_code": "def sum(a):\n    s = 0\n    for i in a:\n        s += i\n    return s\n\nn, T = map(int, input().split())\na = list(map(int, input().split()))\n\nsum = sum(a)\n\nk = 0\nk += n * (T // sum)\nT %= sum\n\nnew_a = []\nnew_sum = 0\nch = True\nwhile ch:\n    for i in range(n):\n        if a[i] <= T:\n            new_a.append(a[i])\n            new_sum += a[i]\n            k += 1\n            T -= a[i]\n\n    n = len(new_a)\n\n    if n == 0:\n        ch = False\n        break\n\n    sum = new_sum\n    a = new_a\n    new_a = []\n    new_sum = 0\n\n    k += n * (T // sum)\n    T %= sum\n\n\nprint(k)", "generated_code": "n, t = map(int, input().split())\na = list(map(int, input(\"\").strip().split()))\nd = [0]*n\nb = [0]\nfor i in range(n):\n\td[i] = a[i]\n\tif i + 1 < n:\n\t\td[i+1] = max(d[i], a[i+1])\nans = 0\nfor i in d:\n\tans += i\nprint(ans)\n", "score": 0.1552}
{"id": "MBPP_33_35", "golden_code": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ", "generated_code": "def count_Unset_Bits(n):\n\treturn n & 0xffffffff", "score": 0.0292}
{"id": "APPS_test-0861_16", "golden_code": "m, r = list(map(int, input().split()))\n\ndef calc(k):\n    nonlocal r\n    if k < 1:\n        return 0\n    elif k == 1:\n        return r * (2**0.5 + 2)\n    else:\n        return r * ((1 + 2 * (k - 1)) * 2**0.5 + k * 2 + (k - 1) * (k - 2))\n\navg = 0\ndiv = m ** 2\n\nfor i in range(0, m):\n    avg += (2 * r + calc(i) + calc(m - 1 - i)) / div\n \nprint(avg)\n", "generated_code": "import sys\nimport math\n\ninput = sys.stdin.readline\n\nm, R = map(int, input().split())\n\nN = 2 * R * math.pi\n\nprint(math.sqrt(N) - (m + 1) * ((m + 1) / 2))\n", "score": 0.0}
{"id": "MBPP_33_37", "golden_code": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ", "generated_code": "def count_Unset_Bits(n) -> int:\n\treturn n&0x1", "score": 0.0}
{"id": "APPS_test-0861_25", "golden_code": "import math\nm,R=list(map(int,input().split()))\n\ncord=math.sqrt(2*(R**2))\nans=0\nunit=int(2*R)\nx=(m)*(m/2)\nfor i in range(m):\n    ans+=2*R*m\n    ans+=(cord*(m-1))\n    if(i==0 or i==m-1):\n        if(m==1):\n            continue\n        ans+=cord*(m-2)\n    else:\n        if(m==1):\n            continue\n        ans+=cord*(m-3)\n    #left\n    left=(i-1)-1\n    if(left<-1):\n        left=-1\n    ans+=(left+1)*(left/2)*unit\n    #right\n    r=(m-1)-(i)-2\n    if(r<-1):\n        r=-1\n    ans+=(r+1)*(r/2)*unit\nans/=(m**2)\nprint(ans)\n", "generated_code": "import math\n\nm, r = [int(x) for x in input().split()]\n\ndef f(x):\n\treturn math.sqrt(m*m+1*x*x)\n\nret = 0\ntry:\n\twhile True:\n\t\tu = int(input())\n\t\tv = int(input()); d = n = 0.0\n\t\tif (u > m or u < 0) and (v > m and v < 0):\n\t\t\td = f(u)\n\t\t\tu = -u\n\t\t\tv = -v\n\t\tif v == 0:\n\t\t\tret += d\n\t\telse:\n\t\t\tret +=(v-u)\n\t\t\n\tprint(ret)\nexcept:\n\tpass\n", "score": 0.0}
{"id": "MBPP_33_39", "golden_code": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ", "generated_code": "def count_Unset_Bits(num):\n\treturn num > 2**31 - 1", "score": 0.1389}
{"id": "APPS_test-0861_35", "golden_code": "m,R=list(map(int, input().split()))\nprint((2*m/3-2+22/m/3-4/m/m+2**.5*(2-4/m+2/m/m))*R)\n", "generated_code": "from math import sqrt\nm,R = [int(i) for i in input().split()]\ndr = R*R/m\npt = (1+m*sqrt(1+8*(dr)))//2\nprint(pt)\n", "score": 0.0178}
{"id": "MBPP_33_4", "golden_code": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ", "generated_code": "def count_Unset_Bits(n):\n\treturn bin(n).count('1')\nss = [x for x in range(1, 10001)]", "score": 0.0468}
{"id": "APPS_test-0872_21", "golden_code": "n = int(input())\n*l, = map(int, input().split())\nodd = False\neven = False\n\nfor x in l:\n\tif x % 2 == 0:\n\t\teven = True\n\telse:\n\t\todd = True\n\nif odd and even:\n\tl.sort()\nprint(*l)", "generated_code": "n=int(input())\na=list(map(int,input().split()))\nans=[]\nfor i in range(0,n):\n\tfor j in range(i+1,n):\n\t\tif a[i]<a[j]:\n\t\t\tans.append(a[i])\n\t\t\tans.extend([a[j]])\n\t\t\tbreak\n\t\nprint(*sorted(ans))\n", "score": 0.0}
{"id": "MBPP_33_41", "golden_code": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ", "generated_code": "def count_Unset_Bits(n):\n\tc = 0\n\tfor c in str(bin(n))[2:]:\n\t\tif c == '0':\n\t\t\tc = '1'\n\t\telse:\n\t\t\tc += '0'\n\treturn c.count('1') == 0", "score": 0.1291}
{"id": "APPS_test-0872_43", "golden_code": "def solution():\n    n = input()\n    ar = list(map(int, input().split()))\n    o, e = False, False\n    for i in ar:\n        if i % 2 == 0:\n            o = True\n        else:\n            e = True\n    if o and e:\n        ar = sorted(ar)\n    for a in ar:\n        print(a, end=' ')\n\n\ndef __starting_point():\n    solution()\n\n__starting_point()", "generated_code": "n = int(input())\na = list(map(int, input().split()))\n\nans = []\nfor i in range(n):\n\tif a[i] % 2 == 0:\n\t\tans.append(a[i])\n\telse:\n\t\tt = a[i] // 2\n\t\tans.extend([t, -t])\nprint(*ans)\n", "score": 0.01}
{"id": "MBPP_33_42", "golden_code": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ", "generated_code": "def count_Unset_Bits(n) :  \n\tcount = 0\n\t\n\tfor i in range(0, n):\n\t\tcount += n >> i & 1\n\t\n\treturn count\nUST = True\nMOD = 10**9+7", "score": 0.0438}
{"id": "APPS_test-0904_5", "golden_code": "input()\ndef v(x):\n    ret = 0\n    for i in x:\n        if ord('A') <= ord(i) <= ord('Z'):\n            ret += 1\n    return ret\nprint(max(v(i) for i in input().strip().split()))\n", "generated_code": "import sys\n\ndef main():\n\tn = int(input())\n\tline = sys.stdin.readline().split()\n\twords = line[0].split()\n\tans = 0\n\tfor word in words:\n\t\tlow = 0\n\t\thigh = len(word)\n\t\twhile low < high:\n\t\t\tmid = (low + high) // 2\n\t\t\tif word[mid].lower() == word[mid].upper():\n\t\t\t\thigh = mid\n\t\t\telse:\n\t\t\t\tlow = mid + 1\n\t\tans = max(ans, mid)\n\tprint(ans)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.037}
{"id": "MBPP_33_6", "golden_code": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ", "generated_code": "def count_Unset_Bits(n) :  \n\tcount = 0\n\t\n\twhile n:\n\t\tcount += n & 1\n\t\tn >>= 1\n\t\n\treturn count", "score": 0.0507}
{"id": "APPS_test-0916_7", "golden_code": "def coloring(i, ancestors, color):\n    while i != 0 and color[ancestors[i - 1]] is None:\n        color[ancestors[i - 1]] = not color[i]\n        i = ancestors[i - 1]\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ancestors = list([int(x) - 1 for x in input().split()])\n    descendants = [[] for i in range(n)]\n    for i in range(n - 1):\n        descendants[ancestors[i]].append(i + 1)\n    color = [None for i in range(n)]\n    for i in range(n):\n        if not descendants[i]:\n            color[i] = True\n            coloring(i, ancestors, color)\n    reds = 0\n    blues = 0\n    xor = 0\n    count_red = dict()\n    count_blue = dict()\n    for i in range(n):\n        if color[i]:\n            blues += 1\n            xor ^= a[i]\n            if str(a[i]) in count_blue:\n                count_blue[str(a[i])] += 1\n            else:\n                count_blue[str(a[i])] = 1\n        else:\n            reds += 1\n            if str(a[i]) in count_red:\n                count_red[str(a[i])] += 1\n            else:\n                count_red[str(a[i])] = 1\n    res = 0\n    if xor == 0:\n        res += (blues - 1) * blues // 2\n        res += (reds - 1) * reds // 2\n        for i in list(count_blue.items()):\n            if i[0] in count_red:\n                res += i[1] * count_red[i[0]]\n    else:\n        for i in list(count_blue.items()):\n            if str(xor ^ int(i[0])) in count_red:\n                res += i[1] * count_red[str(xor ^ int(i[0]))]\n    print(res)\n\n\nmain()\n\n", "generated_code": "n = int(input())\na = list(map(int, input().split()))\np = list(map (int, input(). split()))\nb = [0]*n\nc = [0]#root\n\nfor i in range(n):\n\tif a[i]!= p[i]:\n\t\tc[i] = 1\n\telse:\n\t\tb[i] = c[i]\n\nans = 0\nfor i in b:\n\tans += i*(i-1)//2 + (i-1)*(i-2)//2\n\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_34_1", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x):\n\n\treturn True if str(x).count('1')%2 == 0 else False", "score": 0.5211}
{"id": "APPS_test-0925_58", "golden_code": "def seg_n(n):\n   n = int(n)\n   if n == 9:\n      return 2\n   elif n== 8:\n      return 1\n   elif n== 7:\n      return 5\n   elif n== 6:\n      return 2\n   elif n== 5:\n      return 4\n   elif n== 4:\n      return 3\n   elif n== 3:\n      return 3\n   elif n== 2:\n      return 2\n   elif n== 1:\n      return 7\n   else:\n      return 2\nn = input()\nsumm = 1\nf = seg_n(n[0])\nz = seg_n(n[1])\nprint(f*z)\n", "generated_code": "print(int(input().strip()) + 1)\n", "score": 0.0}
{"id": "MBPP_34_114", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(num):\n   return num>>1", "score": 0.0645}
{"id": "APPS_test-0928_8", "golden_code": "import itertools\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\n\nc = itertools.accumulate(a)\nans, s, j = 0, 0, 0\nfor i, v in enumerate(c):\n    while v-s >= k:\n        ans += n-i\n        s += a[j]\n        j += 1\nprint(ans)", "generated_code": "#!/usr/bin/env python3\n\ndef main():\n\tn, k = list(map(int, input().split()))\n\ta = list(map (int, input().lower()))\n\tans = 0\n\tfor i in range(n):\n\t\tthreshold = 1 << (i+1)\n\t\ts = 0\n\t\tfor j in range(i, n):\n\t\t\tif (a[j] & threshold) > k:\n\t\t\t\tthreshold = threshold & threshold\n\t\t\t\ts += 1\n\t\t\telse:\n\t\t\t\ts += 2\n\t\tans += s\n\tprint(ans)\n\nmain()\n", "score": 0.002}
{"id": "MBPP_34_119", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x):\n\treturn True if x % 2 == 0 else False\n\n\n\n\n\n\n\n\n\n\n\nUSTreturn = {1: True}", "score": 1.0}
{"id": "APPS_test-0940_16", "golden_code": "A = list(map(int, input().split()))\nA = sorted(A)\nprint(max(0, A[2] - A[0] - A[1] + 1))", "generated_code": "import sys\nreadline = sys.stdin.readline\n\nA = list(map(int, readline().split()))\nA.sort()\n\nfor i in range(len(A)-1):\n\tif A[i] < A[i+1]:\n\t\tA[i] += A[i+ 1]\n\t\t\nif len(A) == 1:\n\tprint(0)\nelse:\n\tprint((A[-1] + A[-2])//2)\n", "score": 0.0}
{"id": "MBPP_34_12", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(n):\n    return n%2 is 0", "score": 1.0}
{"id": "APPS_test-0940_21", "golden_code": "def solve():\n    a = [int(x) for x in input().split()]\n    print(max(0,max(a)-(sum(a)-max(a)) + 1))\nsolve()\n# for _ in range(int(input())):\n", "generated_code": "import sys\nimport math\n\ndef main():\n\ta, b, c = list(map(int, input().split()))\n\tif a + b <= c:\n\t\tprint(0)\n\telse:\n\t\ttemp = a + b + c\n\t\tif temp <= temp // 2:\n\t\t\tprint(temp - temp // 2)\n\t\telse:\n\t\t\tprint((temp - temp //2) - c)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0268}
{"id": "MBPP_34_122", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(n):   \n\t\n\treturn int(n/2)", "score": 0.1194}
{"id": "APPS_test-0940_65", "golden_code": "USE_STDIO = False\n\nif not USE_STDIO:\n    try: import mypc\n    except: pass\n\ndef main():\n    a = sorted(map(int, input().split(' ')))\n    x = a[0] + a[1] - a[2]\n    if x > 0:\n        print(0)\n    else:\n        print(- x + 1)\n\ndef __starting_point():\n    main()\n\n\n\n\n__starting_point()", "generated_code": "def main():\n\ta, b, c = list(map(int, input().split()))\n\tnum = max(a, b, min(c, b + c))\n\tif num * 2 < a + b + c:\n\t\tprint(num * 2 - a + b - c)\n\telse:\n\t\tprint((a + b) * 2 // 3 + (b + c) * 2 // 2)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.135}
{"id": "MBPP_34_127", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x):\n\tif x%2==0:\n\t\treturn True\n\telse:\n\t\t0\n\treturn False\nss = []\nfor i in range(100000):\n\tss.append(i*2)\nprint(ss)", "score": 1.0}
{"id": "APPS_test-0943_15", "golden_code": "n = int(input())\nl = list(map(int, input().split()))\nodd = []\nnodd = []\nfor i in l:\n    if i % 2 == 1:\n        odd.append(i)\n    else:\n        nodd.append(i)\nodd.sort()\nprint(sum(nodd) + sum(odd[len(odd) % 2:]))", "generated_code": "n = int(input())\na = list(map(int, input().split()))\nassert(max(a) % 2 == 0)\nb = [i for i in a if i % 2 == 0]\nprint(max(b))\n", "score": 0.012}
{"id": "MBPP_34_128", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(n):\n\t\"\"\"\nThe number of solutions for the Nur�Fir strin\n\t\"\"\"\n\n\tfactorial = 1\n\tfor i in range(1, n + 1):\n\t\tfactorial = factorial*i\n\treturn factorial", "score": 0.3314}
{"id": "APPS_test-0943_9", "golden_code": "n=int(input())\nl=list(map(int,input().split()))\ns=sorted([x for x in l if x%2>0])\nt=sum(l)\nif t%2: t-=s[0]\nprint(t)", "generated_code": "def main():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tb = []\n\tfor i in a:\n\t\tb.append(str(i))\n\tb.sort()\n\tm = ''\n\tfor i2 in b:\n\t\tif i2 == '9' or i2 == '5':\n\t\t\tm += i2\n\t\telse:\n\t\t\tm += '5'\n\tprint(int(m))\n\n\nmain()\n", "score": 0.0}
{"id": "MBPP_34_13", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(n):\n\tn = 2**(len(bin(n))-3)  \n\tk = 0\n\twhile n>0:\n\t\tn = n >> 1\n\t\tk+=1\n\treturn k", "score": 0.0356}
{"id": "APPS_test-0951_28", "golden_code": "k=int(input())\ninp=input()\nn=[]\nfor val in inp:\n\tn.append(int(val)) \nn.sort()\nsumval=sum(n)\ncounter=0\nfor val in n:\n\tif(sumval<k):\n\t\tsumval+=9-val\n\t\tcounter+=1\n\telse:\n\t\tbreak\nprint(counter)", "generated_code": "k = int(input())\nn = list(map(int, input().split()))\np, q = 0, 9\nfor i in range(10):\n\tif q > k:\n\t\tbreak\n\tif i == 9:\n\t\tp = i\n\t\tq = i + 1\n\telif i > 9:\n\t\tif i - p == 1:\n\t\t\tq = i - 1\n\t\telse:\n\t\t\tp = i - 1 \nprint(p - q)\n", "score": 0.0}
{"id": "MBPP_34_14", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(n):  \n\treturn pow(2, n) \n\t''' x = count a number from the positive direction, (count by see if number has been assigned)\n\tcheck if the assigned number is in the assigned map\n\tif yes, it is the sum of all the powers of 2 in the string\n\totherwise its count is 0\n\treturn the sum of the assigned powers\n\t'''\n\t\n\treturn (factorial(n+1) - 1) * n;\n\nfactorial = lambda x: pow(2, x)", "score": 0.0707}
{"id": "APPS_test-0955_3", "golden_code": "n = int(input())\n\nisC = False\nisB = False\nisA = False\n\nd = {}\n\nfor i in range(n):\n\tline = input()\n\n\tc = int(line.split(' ')[0])\n\ts = line.split(' ')[1]\n\n\tif 'A' in s:\n\t\tisA = True\n\n\tif 'B' in s:\n\t\tisB = True\n\n\tif 'C' in s:\n\t\tisC = True\n\n\t# print(s)\n\n\tname = ''.join(sorted(s))\n\n\ttry:\n\t\td[name] = min(c, d[name])\n\n\texcept:\n\t\td[name] = c\n\nif not isA or not isB or not isC:\n\tprint(-1)\n\nelse:\n\tarr = []\n\n\ttry:\n\t\tarr.append(d['A'] + d['B'] + d['C'])\n\texcept:\n\t\tpass\n\n\ttry:\n\t\tarr.append(d['A'] + d['BC'])\n\texcept:\n\t\tpass\n\n\ttry:\n\t\tarr.append(d['AB'] + d['C'])\n\texcept:\n\t\tpass\n\n\ttry:\n\t\tarr.append(d['AC'] + d['B'])\n\texcept:\n\t\tpass\n\n\ttry:\n\t\tarr.append(d['AB'] + d['BC'])\n\texcept:\n\t\tpass\n\n\ttry:\n\t\tarr.append(d['AC'] + d['BC'])\n\texcept:\n\t\tpass\n\n\ttry:\n\t\tarr.append(d['AB'] + d['AC'])\n\texcept:\n\t\tpass\n\n\ttry:\n\t\tarr.append(d['ABC'])\n\texcept:\n\t\tpass\n\n\ttry:\n\t\tarr.append(d['ABC'])\n\texcept:\n\t\tpass\n\n\tprint(min(arr))\n\n", "generated_code": "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\ndef solve():\n\tn = mint()\n\tc = []\n\tfor i in range(n):\n\t\tc.append(mint())\n\ttotal = float(\"inf\")\n\td = {(0, 0, 0): 0}\n\tfor i, c in enumerate(c):\n\t\tfor j in range(3):\n\t\t\tif c[j] == 'A':\n\t\t\t\td[(i, j, 0)] = min(d[(i, j, 0)], d[(i,j, 1)] + c[j])\n\t\t\telif c[j]:\n\t\t\t\td[ (i, j, 1) ]", "score": 0.0}
{"id": "MBPP_34_2", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(n):\n\n\treturn n >> 1 | 1", "score": 0.054}
{"id": "APPS_test-0951_40", "golden_code": "k = int(input())\nn = input()\nl = []\ns = 0\nfor i in range(len(n)):\n    l.append(int(n[i]))\n    s += int(n[i])\nl.sort()\nif s >= k:\n    print(0)\nelse:\n    term = 0\n    while s < k:\n        s += (9-l[term])\n        term += 1\n    print(term)\n", "generated_code": "def main():\n\tn = int(input())\n\tnum = input()\n\tdigits = [int(i) for i in num]\n\tpossible = True\n\tdigits.sort()\n\tfor i in range(len(digits) - 1):\n\t\tif digits[i]!= digits[i + 1]:\n\t\t\tpossible = False\n\t\t\tbreak\n\tif possible:\n\t\tprint(1)\n\telse:\n\t\tprint(-1)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0302}
{"id": "MBPP_34_21", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(count, n = 0):\n    \n    return (count - 1) * 2 if count > 0 else 1", "score": 0.4293}
{"id": "APPS_test-0955_26", "golden_code": "n = int(input())\n\ncs = []\nvs = []\n\nfor i in range(n):\n    c, v = input().split(' ')\n    c = int(c)\n\n    cs += [c]\n    vs += [set(v)]\n\nBigInt = 10 ** 10\nans = BigInt\n\nfor opt in ['A|B|C', 'AB|C', 'AC|B', 'BC|A', 'ABC']:\n    opt = [set(s) for s in opt.split('|')]\n    cur = 0\n\n    for group in opt:\n        minCost = BigInt\n\n        for c, v in zip(cs, vs):\n            if v.issuperset(group) and c < minCost:\n                minCost = c\n\n        if minCost == BigInt:\n            cur = BigInt\n            break\n\n        cur += minCost\n\n    if cur < ans:\n        ans = cur\n\n    #print(opt, cur)\n    \nprint(-1 if ans == BigInt else ans)", "generated_code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport collections\nimport bisect\nimport math\nimport heapq\nimport itertools\nimport sys\nimport random\nimport re\n#\n# /usr/bin/python3\n# -~- /usr/bin python3\n#\n# for _ in range(int(input())):\n#     n=int(input())\n#     s=list(map(str,input().split()))\n#     dic={'A':0,'B':0,'C':0}\n#     for i in s:\n#         dic[i]+=1\n#     res=dic['C']-dic['B']-dic('A')\n#     if res>=2:\n#         print(-1)\n#     else:\n#         ans=0\n", "score": 0.0}
{"id": "MBPP_34_32", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x)  :\n    return 1 if x % 4 == 0 else 0", "score": 0.7113}
{"id": "APPS_test-0978_57", "golden_code": "# -*- coding: utf-8 -*-\n\nk = int(input())\n\ncounter = [0] * 10\ns = ''.join([input().strip() for i in range(4)])\n\nfor c in s:\n    if c == '.':\n        continue\n    counter[int(c)] += 1\n\nm = max(counter)\nprint('NO' if m > 2*k else 'YES')", "generated_code": "def main():\n\tn = int(input())\n\tarr = []\n\tfor i in range(0, n):\n\t\tarr.append(input())\n\t\t\n\tm = 0\n\tfor i, num in enumerate(arr):\n\t\tif i!= 0:\n\t\t\tif arr[i][0] == '.':\n\t\t\t\tret = min(arr[i][1], arr[i-1][1])\n\t\t\t\tif m < ret:\n\t\t\t\t\tm = ret\n\t\t\telse:\n\t\t\t\tpass\n\t\telse:\n\t\t\tpass\n\t\t\n\tif m < 4:\n\t\tprint('NO')\n\telse:\n\t\tprint ('YES')\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "score": 0.0496}
{"id": "MBPP_34_33", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x):\n\tif x%2 == 0:\n\t\treturn True\n\telse:\n\t\t0\n\treturn False\nhonestly_dig_dig = [0, 1, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313]", "score": 1.0}
{"id": "APPS_test-0986_14", "golden_code": "n,k=list(map(int,input().split()))\na=list(map(int,input().split()))\nz=[0]*81\nkz,ans=0,0\nfor i in range(n):\n    if z[a[i]]: continue\n    ans+=1\n    if k>kz:\n        z[a[i]]=1; kz+=1\n    else:\n        h=-1\n        for j in range(1,n+1):\n            if z[j]:\n                m=n+1\n                for p in range(i,n):\n                    if j==a[p]:\n                        m=p\n                        break\n                if m>h:\n                    h=m;\n                    t=j\n        z[t]=0\n        z[a[i]]=1\nprint(ans)\n", "generated_code": "n,k=map(int,input().split())\na=list(map(int, input().split()))\na.sort()\nres=n*k\nfor i in range(n):\n\tfor j in range(k):\n\t\tif a[i]>=j:\n\t\t\tres-=a[i]-j\n\t\t\ta[i]=0\nprint(res)\n", "score": 0.0048}
{"id": "MBPP_34_38", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x): \n\treturn x % 2==0", "score": 1.0}
{"id": "APPS_test-0986_2", "golden_code": "from collections import deque\n\n\nclass Treap():  # self.priority_comparator(root.priority, descendant.priority) == True\n    def __init__(self, key, priority, prrty_cmprtr):\n        self.key = key\n        self.priority = priority\n        self.priority_comparator = prrty_cmprtr\n        self.left = None\n        self.right = None\n\n    def merge(self, right):  # self a.k.a. left <= right ========= tested\n        if right is None:\n            return self\n        if self.priority_comparator(self.priority, right.priority):\n            root = self\n            if root.right is not None:\n                root.right = root.right.merge(right)\n            else:\n                root.right = right\n        else:\n            root = right\n            root.left = self.merge(right.left)\n        return root\n\n    def split(self, key):                   # tested\n        if self.key <= key:\n            left = self\n            if left.right is not None:\n                left.right, right = left.right.split(key)\n            else:\n                left.right, right = None, None\n        else:\n            right = self\n            if right.left is not None:\n                left, right.left = right.left.split(key)\n            else:\n                left, right.left = None, None\n        return (left, right)\n\n    def insert(self, element):     # tested\n        left, right = self.split(element.key)\n        if left is not None:\n            t = left.merge(element)\n        else:\n            t = element\n        if right is not None:\n            return t.merge(right)\n        return t\n\n    def delete(self, key):        # UN!tested\n        left, right = self.split(key)\n        left, middle = left.split(key - 1)\n        if left is not None:\n            return left.merge(right)\n        return right\n\n    def find(self, key):\n        pos = self\n        while True:\n            if key == pos.key:\n                return True\n            elif key < pos.key:\n                if pos.left is None:\n                    return False\n                pos = pos.left\n            else:\n                if pos.right is None:\n                    return False\n                pos = pos.right\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nfirst = [deque() for i in range(n)]\nfor i in range(n):\n    first[a[i] - 1].append(i)\nfirst[a[0] - 1].popleft()\nif not first[a[0] - 1]:\n    priority = float('inf')\nelse:\n    priority = first[a[0] - 1][0]\ntreap = Treap(a[0], priority, lambda x, y: x >= y)\nl, res = 1, 1\nfor i in range(1, n):\n    first[a[i] - 1].popleft()\n    if not first[a[i] - 1]:\n        priority = float('inf')\n    else:\n        priority = first[a[i] - 1][0]\n    if not treap.find(a[i]):\n        if l == k:\n            treap = treap.delete(treap.key)\n            l -= 1\n        if treap is not None:\n            treap = treap.insert(Treap(a[i], priority, lambda x, y: x >= y))\n        else:\n            treap = Treap(a[i], priority, lambda x, y: x >= y)\n        l += 1\n        res += 1\n    else:\n        treap = treap.delete(a[i])\n        if treap is not None:\n            treap = treap.insert(Treap(a[i], priority, lambda x, y: x >= y))\n        else:\n            treap = Treap(a[i], priority, lambda x, y: x >= y)\nprint(res)", "generated_code": "#!/usr/bin/env python3\nimport sys\nINF = float(\"inf\")\n\ndef solve(n, k, A):\n\tright = k\n\tleft = 0\n\tcost = 0\n\twhile left < n and right > 0:\n\t\tcost += INF\n\t\tif right >= left + 1:\n\t\t\tcost = min(cost, A[right] + solve(right - 1, k, A))\n\t\tif left + 1 < right:\n\t\t\tcost= min(cost, a[left] + solve(left + 1, k - 1, A))\n\t\t\tright -= 1\n\t\tright -= 1\n\treturn cost\n\ndef __starting_point():\n\tn, k = list(map(int, input().split()))\n\tA = list(map('int', input().split()[:n]))\n\tprint(solve(n, k, A))\n", "score": 0.0}
{"id": "MBPP_34_39", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x):\n\t    \n\t   \n\t\n\treturn 0 if x is 0 else x % 10 == 0", "score": 0.5645}
{"id": "APPS_test-0986_31", "golden_code": "n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\ninventory = set()\nbought = 0\nfor i in range(n):\n    if a[i] not in inventory:\n        if len(inventory) == k:\n            farthest_time = 0\n            farthest = 0\n            for v in inventory:\n                try:\n                    far = a.index(v, i + 1)\n                    if far > farthest_time:\n                        farthest_time = far\n                        farthest = v\n                except ValueError:\n                    farthest_time = 10000\n                    farthest = v\n            inventory.remove(farthest)\n        inventory.add(a[i])\n        bought += 1\n\nprint(bought)\n", "generated_code": "n, k = list(map(int, input().split()))\na = list(map (int, input().strip().split()))[:n]\ndp = [0]*(n+1)\nfor i in range(n):\n\tdp[i+1] = dp[i] + a[i]\ndp[0] = 0\nfor i in 1, :\n\tfor j in range(0, n):\n\t\tif dp[j] - a[j] <= j:\n\t\t\tdp[j+1] = min(dp[j+1], dp[j]+a[j])\nprint(dp[-1])\n", "score": 0.0726}
{"id": "MBPP_34_40", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x): return x % 2 is 0", "score": 1.0}
{"id": "APPS_test-0986_54", "golden_code": "def dist(a, f, i):\n    for j in range(i + 1, len(a)):\n        if f == a[j]:\n            return j\n\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nbooks = set()\nl = 0\npref = [0 for i in range(n)]\nfor i in range(n - 1, -1, -1):\n    pref[a[i] - 1] = max(pref[a[i] - 1], i) # i min == 0\nres = 0\nfor i in range(n):\n    if a[i] not in books:\n        if l == k:\n            for j in books:\n                if pref[j - 1] < i:\n                    l -= 1\n                    books.discard(j)\n                    break\n            if l == k:\n                m = -1\n                for j in books:\n                    if dist(a, j, i) > m:\n                        m = dist(a, j, i)\n                        ind = j\n                books.discard(ind)\n                l -= 1\n        res += 1\n        books.add(a[i])\n        l += 1\nprint(res)", "generated_code": "n,k = list(map(int,input().split()))\na = list(map (int,input().strip().split()))[:n]\nc = k\nz = 1e9\nfor i in range(n):\n\tif a[i] < c:\n\t\tc = a[i]\n\t\tz = i\n\t\t\nprint (k - z)\n", "score": 0.0036}
{"id": "MBPP_34_41", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x):    \n\treturn (x * 2) - 1 - x", "score": 0.0683}
{"id": "APPS_test-1000_2", "golden_code": "def read_nums():\n    return [int(x) for x in input().split()]\n\n\ndef main():\n    n, v = read_nums()\n    res = 0\n    cur_tank = 0\n    for c in range(1, n+1):\n        need_to_by = min(v - cur_tank, n - c - cur_tank)\n        res += need_to_by * c\n        cur_tank += need_to_by\n        cur_tank -= 1\n    print(res)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "n,v=map(int,input().split())\na=[]\nfor i in range(n):\n\ta.append(i+1)\nans=0\ni=0\nwhile i<n:\n\tans+=v\n\tif i<n-1:\n\t\tans+=a[i+1]-a[i]\n\ti+=1\nprint(ans)\n", "score": 0.0024}
{"id": "MBPP_34_46", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x): \n\treturn 5-x", "score": 0.1185}
{"id": "APPS_test-1000_33", "golden_code": "n, v = map(int, input().split())\n\nresult = v-1 + (n-v)*(n-v+1)//2 if n-1 > v else n-1\nprint(result)", "generated_code": "n, v = list(map(int, input().split()))\nprint(min(n, 1 + v) * (v - 1) + v)\n", "score": 0.0414}
{"id": "MBPP_34_5", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x):\n\treturn True if x % 2 == 0 else False", "score": 1.0}
{"id": "APPS_test-1000_50", "golden_code": "n, v = [int(item) for item in input().split()]\n\nx = 0\nc = 0\nfor i in range(1, n):\n    if x < n - i:\n        c += i * min((n - i), v - x)\n        x += min((n - i), v - x)\n    x -= 1\n\nprint(c)\n", "generated_code": "n, v = map(int, input().split())\nt = int(1e9)\nx = v\nfor i in range(n):\n\tif x < i:\n\t\tt = i\n\t\tbreak\n\tx -= 1\nprint(t + x // v)\n", "score": 0.0432}
{"id": "MBPP_34_55", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x):\n\tif x%2==0:\n\t   return True\n\telse:\n\t   return False\nss = []\nfor i in range(100000):\n\tss.append(i*2)\nprint(ss)\nns = list(ss)", "score": 1.0}
{"id": "APPS_test-1000_68", "golden_code": "n, v = input().split()\nn = int(n)\nv = int(v)\n\nif (n <= v):\n    print(n-1)\nelse:\n    summ = v\n    for i in range(n-v-1):\n        summ += i+2\n    print(summ)\n", "generated_code": "def solve():\n\tn, v = map(int, input().split())\n\tans = 0\n\ta = [0] * n\n\tfor i in range(n):\n\t\ta[i] = int(input())\n\ta.sort()\n\tfor i, v in enumerate(a):\n\t\tif i - 1 + v > 0:\n\t\t\tans += 1 + a[i - 1 + v - 1]\n\tprint(ans)\n\nsolve()\n", "score": 0.0}
{"id": "MBPP_34_58", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x):\n     return (x & 0x5555555555555555) == 0", "score": 0.4515}
{"id": "APPS_test-1002_30", "golden_code": "n, d = map(int, input().split())\nt = list(map(int, input().split()))\nsum_time = (n - 1) * 10 + sum(t)\nif sum_time > d:\n    print(-1)\nelse:\n    res_time = d - sum_time\n    cnt = res_time / 5 + (n - 1) * 2\n    print(int(cnt))", "generated_code": "n,d = list(map(int,input().split()))\n\nl = list(map((int),input().split()));\n\nresult = sum(l)\n\nif result <= d:\n\tprint(result)\nelse:\n\tprint(-1)\n", "score": 0.439}
{"id": "MBPP_34_6", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(num):\n\tif num % 2 ==0:\n\t\treturn True\n\telse:\n\t\tnum = abs(num)\n\t\treturn False\n\n\t   \n\treturn False", "score": 1.0}
{"id": "APPS_test-1041_8", "golden_code": "#Circle of Numbers\nimport math\n\ndef centre(n, pts):\n    x, y = 0, 0\n    for j in [7,11,13,17,19,23,29,31,37,1193,1663,2711,4007,65537]:\n        if math.gcd(n,j) == 1:\n            for i in range(n):\n                k = int(pts[i])\n                x += k*math.cos(math.pi * 2*i*j/n)\n                y += k*math.sin(math.pi * 2*i*j/n)\n            if not (abs(x) < 0.000001 and abs(y) < 0.000001):\n                return 'NO'\n    return 'YES'\n    \ndef strconv(s):\n    return [char for char in s]\n\nn = int(input())\npts = strconv(input())\nprint(centre(n,pts))\n", "generated_code": "n = int(input())\na = [int(x) for x in input()]\nd = [0] * n\nfor i in range(n):\n\td[i] = (a[i] + a[i]) // 2 - a[i]\nfor i in d:\n\tif i < 0:\n\t\tprint(\"NO\")\n\t\treturn\nprint(\"YES\")\n", "score": 0.2118}
{"id": "MBPP_34_63", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x):\n\t\t\t return x%2 == 0", "score": 1.0}
{"id": "APPS_test-1046_55", "golden_code": "n=int(input())\n\ny=input().split()\nx=[int(f) for f in y]\nz=x[:]\nzeros=[]\nwhile (z.count(0)>0):\n    z.remove(0)\n    zeros.append(0)\n    \n\ncount=0\ncount1=0\nq=list(set(z))\nfor i in range (0,len(q)):\n    key=q[i]\n    if (z.count(key)==2):\n        count+=1\n    if (z.count(key)==1):\n        count=count\n    if (z.count(key)>2):\n        count1=count1-1\n        break\n\nif (count1==0):\n    print (count)\nelse:\n    print(-1)\n    \n    \n        \n    \n\n\n\n    \n    \n\n\n    \n    \n", "generated_code": "n = int(input())\ns = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(n):\n\tif s[i] == 0:\n\t\tcnt += 1\nfor i in reversed(list(range(n))):\n\tif cnt == 0:\n\t  break\n\tif s[_i] == cnt:\n\t  cnt -= 1\nprint(cnt)\n", "score": 0.0294}
{"id": "MBPP_34_64", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x):\n\tif x%2 == 0:\n\t\treturn True\n\telse:\n\t\t0\n\treturn False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\n\n\n\n\n\nimport re", "score": 1.0}
{"id": "APPS_test-1043_46", "golden_code": "from heapq import heappush, heappop\nN = int(input())\nA = [int(a) for a in input().split()]\nfor i in range(N):\n    if A[i] < 0:\n        k = i\n        break\nA = [0] + [0 if i < k else A[i] for i in range(N) if i != k]\n\nans = A.pop()\nH = []\nwhile N > 2:\n    N //= 2\n    for i in range(N):\n        heappush(H, A.pop())\n    ans += heappop(H)\n\nprint(ans)\n\n\n", "generated_code": "n = int(input())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(n // 2):\n\tif a[i]!= -1:\n\t\ta[i] = a[i] * 2\n\telse:\n\t\ta[\"i\"] = a[i], -1\n\tj = n - 1\n\tval = 0\n\twhile j >= i:\n\t\tval += a[j]\n\t\tj -= 1\n\ta[i] += val\n\tans += a[i]\n\tif a [i] < 0:\n\t\ta [i] = -1\n\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_34_7", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x):\n\treturn (x//2)*2", "score": 0.0711}
{"id": "APPS_test-1047_28", "golden_code": "n = input()\nB = [0 for i in range(7)]\nwhile len(n) != 7:\n    n = '0' + n\nans = 0\nfor i in range(7):\n    ans = max(ans, int(n[i]))\n    B[i] = int(n[i])\nprint(ans)\ns = ''\nfor i in range(ans):\n    cur = [0 for i in range(7)]\n    for j in range(7):\n        if B[j] > 0:\n            cur[j] = 1\n            B[j] -= 1\n    was = False\n    for j in range(7):\n        if cur[j] == 1:\n            s += '1'\n            was = True\n        elif was:\n            s += '0'\n    s += ' '\nprint(s[:-1])\n", "generated_code": "n = int(input())\n\nprint(list(map(int, list(str(n)))))\n\nprint(n)\n", "score": 0.0}
{"id": "MBPP_34_72", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x):\n\n\treturn x%2 ==0", "score": 1.0}
{"id": "APPS_test-1047_46", "golden_code": "n = input()\nB = [0 for i in range(7)]\nwhile len(n) != 7:\n    n = '0' + n\nans = 0\nfor i in range(7):\n    ans = max(ans, int(n[i]))\n    B[i] = int(n[i])\nprint(ans)\ns = ''\nfor i in range(ans):\n    cur = [0 for i in range(7)]\n    for j in range(7):\n        if B[j] > 0:\n            cur[j] = 1\n            B[j] -= 1\n    was = False\n    for j in range(7):\n        if cur[j] == 1:\n            s += '1'\n            was = True\n        elif was:\n            s += '0'\n    s += ' '\nprint(s[:-1])\n", "generated_code": "import sys\n\ndef main():\n\tn = int(sys.stdin.readline())\n\tquas = []\n\tquant = 0\n\twhile n > 0:\n\t\tdig = n % 10\n\t\tif dig == 0:\n\t\t\tquas.append(str(quant))\n\t\t\tquant = 0\n\t\telse:\n\t\t\tquant += 1\n\t\tn = n // 10\n\tprint(len(quas))\n\tprint(' '.join(quas))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_34_77", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num( n):    \n\treturn (n & 3) == 2", "score": 0.6586}
{"id": "APPS_test-1049_10", "golden_code": "n, d = list(map(int, input().split()))\nc = [input() for _ in range(d)]\nr = 0\nx = 0\nfor v in c:\n    if \"0\" in v:\n        x += 1\n        r = max(r, x)\n    else:\n        x = 0\nprint(r)\n", "generated_code": "# -*- coding: utf-8 -*-\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport random\nimport itertools\nimport sys\n\n\"\"\"\ncreated by shhuan at 2017/10/19 21:52\n\n\"\"\"\n\nN, D = map(int, input().split())\nday = []\nfor i in range(D):\n\tday.append(input())\n\nmemo = collections.defaultdict(int)\n\nfor i in day:\n\ttmp = 0\n\tfor j in range(len(i)):\n\t\tif i[j] == '1':\n\t\t\ttmp += 1\n\tmemo[tmp] += 1\n\nA = []\nfor key in memo:\n\tA.append(memo[key])\n\nA.sort(reverse=True)\nans = 0\nday = []                    \n", "score": 0.0}
{"id": "MBPP_34_8", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(n):\n  \n\treturn int(n * (n * 2 - 2) / 6)", "score": 0.0868}
{"id": "APPS_test-1050_16", "golden_code": "from sys import stdin\ninput = stdin.readline\nn,  m, k = list(map(int, input().split()))\nif min(m, k) >= n:\n    print('Yes')\nelse:\n    print('No')", "generated_code": "#!/usr/bin/env python3\nimport sys\ninput = sys.stdin.readline\n\nn, m, k = map(int, input().split())\nans = False\nif k * m < n:\n\tans = True\nelse:\n\tfor i in range(k, n+1):\n\t\tif i * m >= n:\n\t\t\tans = True\nprint(['No', 'Yes'][ans])\n", "score": 0.1626}
{"id": "MBPP_34_85", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x):\n\n  return x % 4 == 0", "score": 0.6172}
{"id": "APPS_test-1050_27", "golden_code": "[x,y,z]=[int(c) for c in input().split()]\nif min(y,z)<x:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n", "generated_code": "from sys import stdin, stdout\nimport math\n\ndef read():\n\treturn tuple(map(int, stdin.readline().split()))\n\ndef solve():\n\tn, m, k = read()\n\tif k * m >= n:\n\t\tprint('Yes')\n\telse:\n\t\tprint ('No')\n\ndef main():\n\tsolve()\n\nmain()\n", "score": 0.7102}
{"id": "MBPP_34_86", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x):\n\t\t\t return int(x)*0.5%2==0", "score": 0.6423}
{"id": "APPS_test-1067_59", "golden_code": "q=int(input())\nw=list(map(int,input().split()))\ne=0\nr=0\nt=0\nfor i in w:\n    if i<0:\n        e+=-1-i\n        r+=1\n    elif i>0:\n        e+=i-1\n    else:\n        e+=1\n        t+=1\nif r%2==1:\n    if t>0:\n        print(e)\n    else:\n        print(e+2)\nelse:\n    print(e)", "generated_code": "n=int(input())\na=list(map(int,input().split()))\n\ngun=0\nl=[]\n\nfor i in range(n):\n\tif a[i]<=1:\n\t\tgun+=1\n\t\tl.append(a[i])\n\t\t\n\telse:\n\t\tif a[i]-1>=0:\n\t\t\tl.append(0)\n\t\t\tgun+=1\n\t\t\t\n\t\telse:\n\t\t\tl[-1]=a[i]-1\n\t\t\tgun+= 1\n\t\n\nprint(gun)\n", "score": 0.0}
{"id": "MBPP_34_87", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x):\n\tif x % 2 == 0:\n\t\treturn True\n\telse:\n\t\tprint(False)\n\treturn False\nopen_square = [i for i in range(1, 3)]\nsquare = [x for x in range(4)]", "score": 1.0}
{"id": "APPS_test-1067_68", "golden_code": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque\n\nn = int(input())\nl = list(map(int, input().split()))\npos = 0\nneg = 0\nz = 0\nans = 0\nfor x in l:\n\tif x > 0:\n\t\tpos += 1\n\t\tans += x - 1\n\telif x < 0:\n\t\tneg += 1\n\t\tans += -1 - x\n\telse:\n\t\tz += 1\n\t\tans += 1\nif neg % 2 == 0:\n\tprint(ans)\nelif z > 0:\n\tprint(ans)\nelse:\n\tprint(ans + 2)", "generated_code": "n = int(input())\na = [int(x) for x in input().split()]\nans = 0\nfor i in range(n):\n\tif a[i] == 1:\n\t\tans += 1\n\telse:\n\t\tct = 0\n\t\tt = 0\n\t\tfor j in range(i+1, n):\n\t\t\tif a[j] == 1: continue\n\t\t\tct += 1\n\t\t\tt += 1\n\t\t\ta[j] = -1\n\t\tif t % 2 == 0:\n\t\t\tans += t // 2\n\t\telse:\n\t\t\tans = min(ans, ct + (t // 2))\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_34_92", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x):    \n\tcount = 0\n\twhile x > 1:\n\t\tcount += x % 2\n\t\tx //= 2\n\treturn count", "score": 0.3283}
{"id": "APPS_test-1073_14", "golden_code": "#!/usr/bin/env python3\nn = int(input())\ns = input()\nans = 0\nfor l in range(n-1):\n    for r in range(l+1,n+1):\n        y, x = 0, 0\n        for c in s[l:r]:\n            if c == 'U':\n                y += 1\n            elif c == 'D':\n                y -= 1\n            elif c == 'R':\n                x += 1\n            elif c == 'L':\n                x -= 1\n        if y == 0 and x == 0:\n            ans += 1\nprint(ans)\n", "generated_code": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nl = [0]*100\nk = 0\nres = 0\n\nfor i in range(n):\n\tl[ord(sys.stdin.write(\"U\"))-ord('A')] += 1\n\tk += 1\n\tif l[k] == 4:\n\t\tx = i - k\n\t\ty = i - k + 1\n\t\tif x <= y:\n\t\t\tres += 1\n\t\tif k-x == y:\n\t\t\tj = i - k - 1\n\t\t\twhile j > res:\n\t\t\t\tres += 1\n\t\t\t\tj -= 1\n\t\telse:\n\t\t\tres = 2\nprint(res)\n", "score": 0.0}
{"id": "MBPP_34_95", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x): return x&(x-1) == 0", "score": 0.4459}
{"id": "APPS_test-1083_31", "golden_code": "n = int(input())\ns = \"\"\nif n % 4 == 0:\n  print(0)\n  s += str(n // 2) + \" \"\n  for i in range(n // 4):\n    s += str(4 * i + 1) + \" \"\n    s += str(4 * i + 4) + \" \"\n  print(s[:-1])\nelif n % 4 == 3:\n  print(0)\n  s += str(n // 2 + 1) + \" \"\n  s += \"1 2 \"\n  for i in range(n // 4):\n    s += str(4 * i + 4) + \" \"\n    s += str(4 * i + 7) + \" \"\n  print(s[:-1])\nelif n % 4 == 2:\n  print(1)\n  s += str(n // 2) + \" 1 \"\n  for i in range(0, n // 4):\n    s += str(4 * i + 3) + \" \"\n    s += str(4 * i + 6) + \" \"\n  print(s[:-1])\nelse:\n  print(1)\n  s += str(n // 2 + 1) + \" 1 \"\n  for i in range(0, n // 4):\n    s += str(4 * i + 2) + \" \"\n    s += str(4 * i + 5) + \" \"\n  print(s[:-1])", "generated_code": "n = int(input())\nprint(0)\nprint(list(range(0, n)))\n\n#cur_sum = left_sum\n#split_pos = 0\n#split_min = 0\n#result = []\n#for i in range(0, n):\n#    cur_sum += left_sum[i]\n#    split_pos += 1\n#    if cur_sum > split_sum:\n#        split_min = i\n#        split _sum = cur_sum\n#        result.append(left_sum[i])\n#        if split_pos == 2:\n#            break\n#print(result)\n", "score": 0.0}
{"id": "MBPP_357_1", "golden_code": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  ", "generated_code": "def perimeter(a, size):\n\tc = a // 2\n\td = a % 2\n\treturn c + d * size * size * min(a, c) - (size - 1) * c", "score": 0.0664}
{"id": "APPS_test-1083_44", "golden_code": "n = int(input())\nf = []\ns = []\nf1 = s1 = 0\nfor i in range(n, 0, -1):\n\tif f1 <= s1:\n\t\tf1 += i\n\t\tf.append(i)\n\telse:\n\t\ts1 += i\n\t\ts.append(i)\nprint(abs(f1 - s1))\nprint(len(f), *f)", "generated_code": "def printList(l):\n\tprint(len(l))\n\tfor i in l:\n\t\tprint(i, end=' ')\nprint('')\n", "score": 0.0}
{"id": "MBPP_358_2", "golden_code": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] ", "generated_code": "MAX = 3000 \ndef smartNumber(n): \n\tif n > MAX:\n\t\treturn n\n\treturn max(n-i for i in range(MAX, 0, -1))\nduplicate = False", "score": 0.0}
{"id": "APPS_test-1083_58", "golden_code": "n = int(input())\ns = sum([i for i in range(n + 1)])\nprint(s % 2)\nans = []\nq = s // 2\nfor i in range(n - 1, 0, -1):\n    if q >= i:\n        ans = [i] + ans\n        q -= i\nprint(len(ans), *ans)", "generated_code": "n = int(input())\na = list(range(1, n + 1))\nans = []\nfor i in range(n // 2):\n\tl = max(a)\n\ta.remove(l)\n\tb = max(a,)\n\tans.append(str(abs(sum(a) - sum(b))))\n\ta = b\nprint(len(ans))\nprint(' '.join(ans))\n", "score": 0.0}
{"id": "MBPP_367_2", "golden_code": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) ", "generated_code": "def trim_tuple(test6, K):        \n        return test6[:K]", "score": 0.0}
{"id": "APPS_test-1083_59", "golden_code": "#python3\n# utf-8\n\nn = int(input())\n\ndecide = list(range(1, n % 4 + 1))\nn_sum = 0\nfirst_group = []\nif n % 4 == 1:\n    n_sum = 1\nif n % 4 == 2:\n    n_sum = 1\n    first_group.append(2)\nif n % 4 == 3:\n    n_sum = 0\n    first_group.append(3)\nk = n\nwhile k > 3:\n    first_group.append(k)\n    first_group.append(k - 3)\n    k -= 4\nprint(n_sum)\nprint(len(first_group), *first_group)\n", "generated_code": "n = int(input())\nif n % 2 == 0:\n\tprint(0)\n\tprint(n)\nelse:\n\tprint((n//2)**2)\n\tprint(\" \".join(str(x) for x in range(1,n//2+1)))\n", "score": 0.0}
{"id": "MBPP_36_1", "golden_code": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)", "generated_code": "import re\ndef extract_date(url):\n\ttext = re.findall(r'(.+\\.)\\..*', url)\n\treturn [m.group() for m in text]", "score": 1.0}
{"id": "APPS_test-1096_2", "golden_code": "s = input()\nif (s[0] == 'a' and (s[1] == '1' or s[1] == '8')) or\\\n    (s[0] == 'h' and (s[1] == '1' or s[1] == '8')):\n    print(3)\nelif s[0] in 'ah' or s[1] in '18':\n    print(5)\nelse:\n    print(8)\n", "generated_code": "import sys\nimport math\n\ndef main():\n\tnumber = sys.stdin.readline()\n\tnum = number.split()\n\tcol = int(num[0])\n\trow = int(num [1])\n\tif col == 1:\n\t\tcol = 8\n\tif col <= 4:\n\t\treturn 8\n\tif row <= 7:\n\t\treturn 4\n\tif row == 8:\n\t\treturn number.count(\"a\")\n\tif row < 7 and col > 1:\n\t\treturn 9\n\tif row > 7 and col < 4:\n\t\tout = (col - 1) * (8 - col + 1)\n\t\treturn out + 4\n\tif col >= 4:\n\t\tif row > 7:\n\t\t\tout = (7 - row) * (8 // 4)\n\t\telse:\n\t\t\tout in range(3, 8, 4)\n\t\treturn inp\n", "score": 0.0}
{"id": "MBPP_376_1", "golden_code": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result", "generated_code": "def unique_sublists(foo):\n\tresult = []\n\tfor elem in foo:\n\t\tresult.append(elem)\n\treturn result", "score": 0.0}
{"id": "APPS_test-1096_9", "golden_code": "s = input()\n\nboundary = ['1','8','a','h']\n\nans = 8 - 3 * (s[0] in boundary) - 3 * (s[1] in boundary) + (s[1] in boundary) * (s[0] in boundary)\n\nprint(ans)", "generated_code": "def main():\n\tcol = \"abcdefgh\"\n\trow = \"12345678\"\n\tpos = [col.index(c) for c in col]\n\theight = [row.index(d) for d in row]\n\tanswer = 0\n\tfor h in range(8):\n\t\tfor p in pos[:h]+pos[h+1:]:\n\t\t\tanswer += abs(p-h)\n\tprint(answer)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_377_1", "golden_code": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count ", "generated_code": "def pos_count(i): \n\treturn '\\n'.join(map(str, i))", "score": 0.0}
{"id": "APPS_test-1096_4", "golden_code": "s = input()\nif (s[0] == 'a' and (s[1] == '1' or s[1] == '8')) or\\\n    (s[0] == 'h' and (s[1] == '1' or s[1] == '8')):\n    print(3)\nelif s[0] in 'ah' or s[1] in '18':\n    print(5)\nelse:\n    print(8)\n", "generated_code": "import sys\nimport math\n\ndef __starting_point():\n\tposition = sys.stdin.readline().strip()\n\tletter = position[0]\n\tnumber = int(position[1:])\n\tif letter == \"d\":\n\t\tdirection = 1\n\telif letter == \"a\":\n\t\tdirection == 1\n\telse:\n\t\tdirection = 2\n\tc = int(position)\n\tnumber = number - c\n\tif number % 2 == 0:\n\t\tmoves = +1\n\telse: moves = 2\n\tfor i in range(1,9):\n\t\tif i % 2 == 0 and c > i:\n\t\t\tmoves = moves + 1\n\t\telif i % 2!= 0 and i > c:\n\t\t\tmversals = 1\n\t\telse:\n\t\t\tmuls = 1\n\t\tif i!= c:\n\t\t\tc2 = c - i\n\t\t\t", "score": 0.0}
{"id": "MBPP_37_2", "golden_code": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]", "generated_code": "def lucky_num(n):\n\n\tresult = []\n\tresult.extend(range(1,n+1))\n\t\n\treturn result", "score": 0.1939}
{"id": "APPS_test-1110_10", "golden_code": "#!/usr/bin/env python3\n\ndef main():\n    n = int(input())\n\n    print(n * (n**2 + 5) // 6)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "def main():\n\tn = int(input())\n\tres = 0\n\tpos = 0\n\tfor i in range(n):\n\t\tneg = pos\n\t\tpos = main()\n\t\tif pos == 1:\n\t\t\tprint(i + 1)\n\t\t\treturn\n\t\tfor j in range(pos, n):\n\t\t\tif not (neg+j)%2:\n\t\t\t\tres += 1\n\t\t\t\tneg = pos\n\t\t\t\tpos = j\n\tprint(res)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_37_3", "golden_code": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]", "generated_code": "def lucky_num(arg):\n\tc = str(arg).find('.')\n\treturn str(arg)[c+1:] if c>0 else str(arg)", "score": 0.0}
{"id": "APPS_test-1128_19", "golden_code": "a,m = map(int,input().split())\n\nfor i in range(31):\n    if a%m==0:\n        print(\"Yes\")\n        quit()\n    else:\n        a+=a%m\nprint(\"No\")", "generated_code": "a, m = [int(x) for x in input().split()]\nif a % m == 0:\n\tprint(\"No\")\nelse:\n\tprint((a//m)*m)\n", "score": 0.0}
{"id": "MBPP_385_1", "golden_code": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) ", "generated_code": "def rear_extract(test_item):\n\treturn test_item[0]", "score": 0.0}
{"id": "APPS_test-1128_42", "golden_code": "a, b = list(map(int, input().split(' ')))\nbad = a\nfor i in range(133742):\n    bad = bad*2\n    if bad % b == 0:\n        print(\"Yes\")\n        quit()\n    else:\n        bad %= b\nprint(\"No\")\n", "generated_code": "a, m = map(int,input().split())\nif(a%m==0):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n", "score": 0.9915}
{"id": "MBPP_386_1", "golden_code": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res", "generated_code": "def last(arr, s, n):\n\n\treturn (arr[n-s:] + arr[:n])", "score": 0.0}
{"id": "APPS_test-1129_8", "golden_code": "n=int(input())\na=list(map(int, input().split()))\nprint(sorted(a)[(n-1)>>1])", "generated_code": "from math import inf\nn = int(input())\nx = [int(i) for i in input().split()]\nx.sort()\ndis = [0 for i in range(n)]\nfor i in range(1, n):\n\tdis[i] = dis[i-1] + (x[i] - x[i-1])\n\nbest = inf\nfor i in reversed(range(n-1)):\n\tbest = min(best, dis[i] + dis[i+1])\nprint(best)\n", "score": 0.0}
{"id": "MBPP_38_4", "golden_code": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1", "generated_code": "def find_fixed_point(arr, num):\n\tfor i in range(-1, 1-len(arr), -1):\n\t\tmp = arr[i] + num\n\t\tif mp == int(mp):\n\t\t\treturn True\n\treturn False\nduplicate = [1,2,3,4,5,6,7,8,9]", "score": 0.0245}
{"id": "APPS_test-1149_8", "golden_code": "n = int(input())\nb = [0 for i in range(n)]\nnums = list(map(int, input().split()))\nnums2 = list(map(int, input().split()))\nfor i in range(1, len(nums)):\n    b[nums[i] - 1] = 1\nfor i in range(1, len(nums2)):\n    b[nums2[i] - 1] = 1\nif sum(b) == n:\n    print(\"I become the guy.\")\nelse:\n    print(\"Oh, my keyboard!\")", "generated_code": "def main():\n\tfrom sys import stdin, stdout\n\tn = int(stdin.readline())\n\tp = [int(x) for x in stdin.readline().split()]\n\tg = [int(X) for X in stdin.write('\\n')]\n\tl = []\n\tfor i, j in enumerate(p):\n\t\tlevel = []\n\t\tfor k in range(i, i + j + 1):\n\t\t\tlevel.append(k)\n\t\tl.append(level)\n\tfor i in range(n):\n\t\tlevel_count = 0\n\t\tfor k  in l:\n\t\t\tif min(k) == i + 1:\n\t\t\t\tlevel_count += 1\n\t\tif level_count == len(k):\n\t\t\tprint(\"It's a win!\")\n\t\t\treturn\n\tprint(\"It's nont a win!\")\n\n", "score": 0.0}
{"id": "MBPP_38_5", "golden_code": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1", "generated_code": "def find_fixed_point(arr, index):\n\tres = 0\n\tfor i in range(len(arr)-1):\n\t\tif arr[i] == index:\n\t\t\tres += 1\n\treturn res", "score": 0.0194}
{"id": "APPS_test-1158_2", "golden_code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n#n = int(input())\nfrom math import ceil\n\nn, k = list(map(int, input().split()))\narr = list(map(int, list(input().split())))\n\nd = {}\nmax_cnt = 0\n\n\nfor i in range(len(arr)):\n    x = arr[i]\n    if not x in d:\n        d[x] = 0\n    d[x] += 1\n    max_cnt = max(max_cnt, d[x])\n\nmin_blud = ceil(max_cnt / k)\nprint(min_blud * len(d) * k - n)\n", "generated_code": "from collections import Counter\nn, k = list(map(int, input().split()))\nl = list(map (int, input().lower()))\ncnt = Counter(l)\ncnt2 = Counter()\nrev = 0\nfor i, j in cnt.items():\n\tif i > k:\n\t\trev += j\n\telse:\n\t\tcnt2[i] = j\n#print(cnt2)\nfor i in cnt2:\n\trev += cnt2[i];\nprint(rev)\n", "score": 0.001}
{"id": "MBPP_398_3", "golden_code": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li ", "generated_code": "def Sort(s):\n\ts1 = s.count('z')\n\treturn True if s1 == len(s) else False\n\tpass", "score": 0.0}
{"id": "APPS_test-1164_10", "golden_code": "q=input()\na=[]\nw=len(q)\ni=w-1\nwhile i>0:\n\tif '0'<=q[i]<='9':\n\t\tj=i-1\n\t\twhile not('a'<=q[j]<='z'):\n\t\t\tj-=1\n\t\ta.append(q[j+1:i+1])\n\t\ti=j\n\ti-=1\ns=0\nfor i in a:\n\tl=len(i)\n\tif l>2:\n\t\tif i[l-3]=='.':\n\t\t\ts+=int(i[l-2:])\n\t\t\ti=i[:l-3]\n\t\ti=i.replace('.','')\n\ts+=int(i)*100\nd=''\nr=s\nif s%100!=0:\n\td='.'+str(s%100)\nif len(d)==2:\n\td=d[0]+'0'+d[1]\ns//=100\nrt=s\ntr=d\nwhile s//1000!=0:\n\tt=str(s%1000)\n\tif len(t)==1:\n\t\tt='.00'+t\n\telif len(t)==2:\n\t\tt='.0'+t\n\telse:\n\t\tt='.'+t\n\td=t+d\n\ts//=1000\nif s!=0:\n\tt=str(s%1000)\n\td=t+d\nelse:\n\td=d[1:]\nif len(d)==2:\n\td='0.'+d\nelif d=='':\n\td='0'\nprint(d)", "generated_code": "import sys\nimport math\n#from queue import *\nimport bisect\n#sys.setrecursionlimit(100000)\ndef input():\n\treturn sys.stdin.readline()[:-1]\ndef printe(*args):\n\tprint(*args, file=sys.stderr)\ndef printl(li):\n\treturn print(*li, sep='\\n')\ndef prime(n):\n\tif n < 2: return False\n\tif n == 2: return True\n\tif n % 2 == 0: return False\n     \n\tfor i in range(3, int(n**0.5)+1, 2):\n\t\tif n % i == 0: return 0\n\treturn True\n#\n#def not_prime(n):\n#    for i in range (2, n):\n#        if n % i!= 0:\n#            return False\n#    ", "score": 0.2022}
{"id": "MBPP_39_2", "golden_code": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x", "generated_code": "def previous_palindrome(num):\n\n\treturn (int(str(num)[::- 1]) -1)", "score": 0.1858}
{"id": "APPS_test-1168_16", "golden_code": "n = int(input())\na = [int(i) for i in input().split()]\nl = [i for i in range(len(a))]\nr = [i for i in range(len(a))]\nfor i in range(len(a)):\n\twhile l[i]>=1 and a[i]|a[l[i]-1]<=a[i]:\n\t\tl[i] = l[l[i]-1]\n    \nfor j in range(len(a)):\n\ti = len(a)-j-1\n\twhile r[i]<len(a)-1 and a[i]|a[r[i]+1]<=a[i] and a[i]>a[r[i]+1]:\n\t\tr[i] = r[r[i]+1]\n\ncount=0\nfor i in range(len(a)):\n\tx = r[i]-i+1\n\ty = i-l[i]+1\n\tcount+=x*y-1\nprint((n*(n-1))//2-count)", "generated_code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\n\ndef solve(n, A):\n\ts = set()\n\tfor i in range(n):\n\t\tfor j in range(i+1, n):\n\t\t\tif (A[i] | A[j]) > A[s]:\n\t\t\t\ts.add((A[i], A[j]))\n\tprint(len(s))\n\treturn 0\n\n\ndef __starting_point():\n\tstart = time.time()\n\tn = int(input())\n\tA = list(map(int, input().split()))\n\tprint('solve(n, A)')\n\tstart =time.time()\n", "score": 0.0}
{"id": "MBPP_3_12", "golden_code": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "generated_code": "def length_Of_Last_Word(astr: str) -> int:\n\treturn len(astr[:-1])", "score": 0.0}
{"id": "APPS_test-1169_2", "golden_code": "n, m = map(int, input().split())\nl = 0\nr = n\nfor i in range(50):\n    md = (l + r) // 2\n    if md * (md - 1) // 2 < m:\n        l = md\n    else:\n        r = md\n   # print(l, r, md)\nprint(max(0, n - m * 2), n - r)", "generated_code": "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\n\ndef get_d(): return list(map(int, input().split()))\ndef get_string(): return input().rstrip()\ndef get_ints(): return map(int, input_.split())\ndef get_3_ints(): return list(zip(*get_ints()))\n\ndef main():\n\tn, m = get_ints()\n\tgraph = defaultdict(set)\n\tfor i in range(n):\n\t\tgraph[i].add(i)\n\tend = set([i for i in range(1, n + 1)])\n\tvisited = set([1])\n\tqueue = [(1, 0)]\n\twhile queue:\n\t\tstart, dist = queue.pop(0)\n\t\tfor x in graph[start]:\n\t\t\tif x in visited:\n\t\t\t\tcontinue\n\t\t\t", "score": 0.0}
{"id": "MBPP_3_13", "golden_code": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "generated_code": "def length_Of_Last_Word(s):\n\n\t\n\t\n\tl = []\n\tsplit_s = s.split()\n\tfor i in split_s:\n\t\tl.append(i)\n\t\t\n\t\n\t\n\tz = -1\n\tfor idx, char in enumerate(l):\n\t\tif char == \" \":\n\t\t\tz+=1\n\t\t\tcontinue\n\t\telse:\n\t\t\treturn max(z, idx+1)", "score": 0.2117}
{"id": "APPS_test-1171_13", "golden_code": "N, K = map(int, input().split())\nV = list(map(int, input().split()))\n\nans = 0\n\nfor lg in range(K+1):\n    for rg in range(K-lg+1):\n        if lg+rg > N:\n            break\n        for ls in range(K-lg-rg+1):\n            if ls > lg:\n                break\n            for rs in range(K-lg-rg-ls+1):\n                if rs > rg:\n                    break\n\n                lv = V[:lg]\n                rv = V[N-rg:]\n\n                \"\"\"\n                print(lg, ls, rg, rs)\n                print(lv, rv)\n                print(lv[:lg-ls], rv[:rg-rs])\n                print()\n                \"\"\"\n                lv.sort()\n                lv.reverse()\n                rv.sort()\n                rv.reverse()\n\n                ans = max(sum(lv[:lg-ls])+sum(rv[:rg-rs]), ans)\n\nprint(ans)", "generated_code": "n, k = map(int, input().split())\nv = list(map(int, input()))\n\nb = []\na = 0\ns = 0\nfor i in range(n):\n\ta += v[i]\n\tb.append(a)\n\nb.reverse()\nfor i in b:\n\ts += i\n\tif i > 0:\n\t\ts += i\n\nprint(s)\n", "score": 0.0}
{"id": "MBPP_3_19", "golden_code": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "generated_code": "def length_Of_Last_Word(string):\n\tkey = string.find(string) + 1\n\treturn key", "score": 0.2113}
{"id": "APPS_test-1171_26", "golden_code": "N,K = list(map(int,input().split()))\nV = list(map(int,input().split()))\nleft = [0]*(K+1)\nright = [0]*(K+1)\n\nfor k in range(1,min(N+1,K+1)):\n    max_vk = 0\n    for j in range(k//2+1):        \n        push = j\n        pop = k-j\n        #print(k,pop,push)\n        if pop>N:\n            continue\n        else:\n            tmp = sum(sorted(V[:pop])[push:])\n        max_vk = max(max_vk,tmp)\n    left[k] = max_vk\n\nVrev = V[::-1]\n\nfor k in range(1,K+1):\n    max_vk = 0\n    for j in range(k//2+1):\n        push = j\n        pop = k-j\n        #print(k,pop,push)\n        if pop>N:\n            continue\n        else:\n            tmp = sum(sorted(Vrev[:pop])[push:])\n        max_vk = max(max_vk,tmp)\n    right[k] = max_vk\n\nfor i in range(len(right)-1):\n    if right[i+1]<right[i]:\n        right[i+1]= right[i]\n    if left[i+1]<left[i]:\n        left[i+1]=left[i]\n\nans = 0\nNK = K\nmax_ans = 0\nfor v in V:\n    if v>0:\n        max_ans += v\n    \nfor i in range(NK+1):\n    ans = max(ans,right[i]+left[NK-i])\n\nprint((min(max_ans,ans)))\n", "generated_code": "def main():\n\tN,K = map(int,input().split())\n\tV = list(map(int,input()))\n\tV.sort(reverse = True)\n\tj = 0\n\tflag = 0\n\tans = 0\n\tfor i in range(N):\n\t\tif j >= K:\n\t\t\tflag = 1\n\t\t\tbreak\n\t\tans += V[j]\n\t\tj += 1\n\tif flag == 1:\n\t\tprint(-ans)\n\telse:\n\t\tprint(ans)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_3_24", "golden_code": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "generated_code": "def length_Of_Last_Word(astr): \n\treturn len(astr[-1])", "score": 0.2347}
{"id": "APPS_test-1176_20", "golden_code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\nminus = n\nfor i in range(n):\n  if a[i] >= 0:\n    minus = i\n    break\n\na = list(map(abs, a))\na.sort()\n\nif minus % 2 == 0:\n  print((sum(a)))\nelse:\n  print((sum(a) - 2 * a[0]))\n", "generated_code": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * n\nb[0] = a[0]\nfor i in range(1, n):\n\tb[i] = a[i] * -1\n\nfor i in a[1:]:\n\tb[n-1] = max(b[n-2], i)\n\nans = 0\nfor i in reversed(range(n)):\n\tif b[i] == 0:\n\t\tans = max(ans, b[i])\n\telif b[i+1] == 0:ans = max(reversed(ans), b[i] * b[i+set(a[i:])])\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_3_28", "golden_code": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "generated_code": "def length_Of_Last_Word(a): return len(a)-1\nss = [(1, 'qwertyuiop')]", "score": 0.1046}
{"id": "APPS_test-1188_20", "golden_code": "n = int(input())\na = sorted(list(map(int, input().split())))\n\nmaxe = max(a)\ncnt = []\ncur = 1\nk = 0\ni = 0\nwhile i < n:\n    cnt.append(0)\n    while i < n and a[i] < cur:\n        cnt[2 * k] += 1\n        i += 1\n    cnt.append(0)\n    while i < n and a[i] == cur:\n        cnt[2 * k + 1] += 1\n        i += 1\n    k += 1\n    cur *= 2\ncnt.append(0)\ncnt.append(0)\nmaxe = len(cnt) - 1\n\nmaxk = cnt[1]\nwas = False\nfor l in range(maxk):\n    cur = 1\n    while cnt[cur] > 0:\n        cnt[cur] -= 1\n        cur += 2\n    cnt[cur] -= 1\n    cursum = 0\n    ok = True\n    for t in range(maxe, 0, -1):\n        cursum += cnt[t]\n        if cursum > 0:\n            ok = False\n            break\n    if ok:\n        print(l + 1, end=\" \")\n        was = True\n\nif not was:\n    print(-1)", "generated_code": "n = int(input())\na = list(map(int, input().split()))\n\nx = sorted([(a[i], i) for i in range(n)])\n\nans = []\nfor i in range(1, n + 1):\n\tif x[i][1] < x[i - 1][1]:\n\t\tans.append(i)\n\nif len(ans) == 0:\n\tprint(-1)\nelse:\n\tprint(\" \".join(list(map(str, ans))))\n", "score": 0.0}
{"id": "MBPP_3_3", "golden_code": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "generated_code": "def length_Of_Last_Word(a): \n\treturn 1 + (len(a)-1)*1", "score": 0.8082}
{"id": "APPS_test-1195_18", "golden_code": "n = int(input())\narr = list(map(int, input().split()))\nprint(2 + (arr[2] ^ min(arr)))", "generated_code": "def main():\n\tfrom sys import stdin, stdout\n\tinput = stdin.readline\n\tprint = stdout.write\n\tleft = input()\n\tt = tuple(map(int, left.split()))\n\tval = sum(t)\n\tout = \"\"\n\tfor i in range(len(t)):\n\t\tstr = \"\"\n\t\tfor j in range(t[i]):\n\t\t\tstr += \" \"\n\t\tstr = str[::-1]\n\t\twhile str[-1] == \" \":\n\t\t\tstr = str[::-1]\n\t\tif str[-1:] == \" \":  \n\t\t\tstr = \"\"\n\t\t\tfor k in range(len([newch for newch in t if newch!= i])):\n\t\t\t\tstr = str[0:k] + str[k+1:]\n\t\tout += str\n\tprint(out)", "score": 0.0}
{"id": "MBPP_3_30", "golden_code": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "generated_code": "def length_Of_Last_Word(s):    \n\t\n\tlenn = len(str(s))\n\treturn int(lenn)", "score": 0.8459}
{"id": "APPS_test-1186_8", "golden_code": "from math import*\nn=int(input())\nif n%2:\n\tprint('NO')\nelse:\n\tprint(\"YES\")\n\tk=floor(log2(n))+1\n\tres = [0 for i in range(n)]\n\toccupied = [0 for i in range(n)]\n\tswitch = 0\n\tfor i in range(n,0,-1):\n\t\tval = 2**k-1-i\n\t\tif val > n:\n\t\t\tk-=1\n\t\t\tval = 2**k-1-i\n\t\tif occupied[val-1]:\n\t\t\twhile occupied[val-1]:\n\t\t\t\tk-=1\n\t\t\t\tval = 2**k-1-i\n\t\tval = 2**k-1-i\n\t\toccupied[val-1] = 1\n\t\tres[i-1] = val\n\tfor i in res:\n\t\tprint(i,end=' ')\n\tprint()\n\nif n in [1,2,3,4,5]:\n\tprint('NO')\nelif int(log2(n)) == log2(n):\n\tprint('NO')\nelif n == 6:\n\tprint('YES')\n\tprint('3 6 2 5 1 4')\nelse:\n\tprint('YES')\n\tprint('7 3 2 5 6 4 1',end=' ')\n\tfor i in range(8,n+1):\n\t\tif int(log2(i)) == log2(i):\n\t\t\tprint(min(i*2-1,n),end=' ')\n\t\telse:\n\t\t\tprint(i-1,end=' ')\n\tprint()", "generated_code": "n=int(input())\nif n==1:\n\tprint(\"NO\")\nelse:\n\ta,b=[],[]\n\tfor i in range(n):\n\t\ta.append(i+1)\n\t\tb.append(i[::-1])\n\tif n&1:\n\t\ta[-1],a[0]=a[0],a[-1]\n\tfor i,j in enumerate(b):\n\t\tif i<n//2:\n\t\t\ta[i],a[j]=a[j],a[i]\n\tfor x in a:\n\t\tprint(x,end=' ')\n\tprint()\n", "score": 0.0}
{"id": "MBPP_3_32", "golden_code": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "generated_code": "def length_Of_Last_Word(s):\n   \n\treturn len(s) - 1", "score": 0.104}
{"id": "APPS_test-1195_42", "golden_code": "#Bhargey Mehta (Sophomore)\n#DA-IICT, Gandhinagar\nimport sys, math, queue\nsys.setrecursionlimit(1000000)\n#sys.stdin = open(\"input.txt\", \"r\")\n\nn = int(input())\na = list(map(int, input().split()))\nprint((a[2]^min(a))+2)", "generated_code": "n=int(input())\na=list(map(int,input().split()))\na.sort()\nprint(a[0]%((10**9)+7))\n", "score": 0.0024}
{"id": "MBPP_3_33", "golden_code": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "generated_code": "def length_Of_Last_Word(a):\n\treturn sum(1 for i in range(len(a) - 1, -1, -1) if a[i]!= '1')", "score": 0.8696}
{"id": "APPS_test-1195_9", "golden_code": "n = int(input())\na = list(map(int, input().split()))\nprint(2 + (a[2] ^ min(a)))\n", "generated_code": "n = int(input())\na = list(map(int, input().split()))\n \na.sort()\na = a[::-1]\n \nb = [0] * 33\n \nb[0] = a[0]\n \nfor i in range(1, len(a)):\n\tb[0] += b[1]\n\tb[1] += a[i]\n \nprint(b[1] % ((10 ** 9) + 7))\n", "score": 0.003}
{"id": "MBPP_3_39", "golden_code": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "generated_code": "def length_Of_Last_Word(a): \n\treturn 1 + len(a.split(' last'))\n\n\n\n\n\n'''\n\tinput\n\ta4 at left\n'''", "score": 0.1164}
{"id": "APPS_test-1198_6", "golden_code": "from functools import *\nfrom time import time\nfrom heapq import *\n\n# \n# def measure_time(fun):\n#     def wrapper(*args, **kwargs):\n#         begin = time()\n#         rv = fun(*args, **kwargs)\n#         end = time()\n#         print(end - begin)\n#         return rv\n#     return wrapper\n#\n#\n# def our_cache(func):\n#     memo = [-1]*(max+1)\n#\n#     @wraps(func)\n#     def wrapper(arg):\n#         if memo[arg] == -1:\n#             memo[arg] = func(arg)\n#         return memo[arg]\n#     return wrapper\n\n\ndef main():\n    n, c = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n\n    if c > n:\n        print(sum(a))\n        return\n\n    b = n * [0]\n    s = 0\n    h = []\n    for i in range(n):\n        s = s + a[i] if i <= c-1 else s + a[i] - a[i-c]\n        heappush(h, (a[i], i))\n        if i <= c-2:\n            b[i] = s\n        else:\n            while i-h[0][1] >= c:\n                heappop(h)\n            v1 = b[i-c] + s - h[0][0]\n            v2 = a[i] + b[i-1]\n            b[i] = min(v1, v2)\n\n    print(b[-1])\n\n\ndef __starting_point():\n    main()\n__starting_point()", "generated_code": "def main():\n\tn, c = list(map(int, input().split()))\n\tl = list(map (int, input().lower()))\n\t\n\ts = 0\n\tdef solve(m):\n\t\tnonlocal s\n\t\tcur = 0\n\t\tfor i in range(m):\n\t\t\tcur += l[i]\n\t\tfor i2 in range(m, n):\n\t\t\tcur -= l[i2 - m]\n\t\t\tif cur < 0:\n\t\t\t\tcur = 0\n\t\t\t\tbreak\n\t\ts += cur\n\n\tfor i in range(-1, n):\n\t\tsolve(i)\n\tprint(s)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.012}
{"id": "MBPP_3_41", "golden_code": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "generated_code": "def length_Of_Last_Word(a=\"\"):\n\treturn len(a)", "score": 0.8755}
{"id": "APPS_test-1222_18", "golden_code": "from collections import deque\n\nN = int(input())\n\nQ = deque([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nfor i in range(N - 1):\n    x = Q.popleft()\n    if x % 10 != 0:\n        y = 10 * x + x % 10 - 1\n        Q.append(y)\n    \n    y = 10 * x + x % 10\n    Q.append(y)\n\n    if x % 10 != 9:\n        y = 10 * x + x % 10 + 1\n        Q.append(y)\n\nans = Q.popleft()\n\nprint(ans)", "generated_code": "k = int(input())\n\ns = [0] * 10\nd = {0:0}\n\nfor i in range(1, 10):\n\td[i] = d[i-1] + (i-1)%10 + i%10\n\ts[i-1]=s[i]\n\nfor iin in range(10):\n\tif iin+1 == s[iin]:\n\t\tprint(iin)\n\t\tbreak\n", "score": 0.0}
{"id": "MBPP_3_44", "golden_code": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "generated_code": "def length_Of_Last_Word (a):\n\treturn len(a) - len(a[0])", "score": 0.1048}
{"id": "APPS_test-1282_18", "golden_code": "s = input()\n\nf = 0\ncur_t = -1\nfor i in range(len(s)):\n    if s[i] == 'F':\n        t = i - f\n        f += 1\n        if t > cur_t or t == 0:\n            cur_t = t\n        else:\n            cur_t += 1\n\nprint(max(0, cur_t))\n        \n        \n", "generated_code": "import sys\n\ndef main():\n\ts = sys.stdin.readline().strip()\n\tn = len(s)\n\tbun = []\n\tcur = 0\n\tfor i in range(n):\n\t\tif s[i] == 'M':\n\t\t\tbun.append(i)\n\t\t\tcur += 1\n\t\telse:\n\t\t\tif cur > 0:\n\t\t\t\tbun.append(-cur)\n\t\t\t\tcur = 0\n\t\t\telse:\n\t\t\t\tbru.append(i); cur = 1\n\tif cur > 0 and len(bun) > 0:\n\t\tbun.append((n-1)-cur)\n\t\tcur = 0\n\t\tprint(bun[-1])\n\telse:\n\t\tprint(0)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_3_5", "golden_code": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "generated_code": "def length_Of_Last_Word(a):\n    \n\treturn(len(a))", "score": 0.8682}
{"id": "APPS_test-1290_1", "golden_code": "n, m = [int(i) for i in input().split()]\na = [0] * (n + 1)\nb = [int(i) for i in input().split()]\nfor i in b:\n    a[i] += 1\nprint(min(a[1:n+1]))\n", "generated_code": "import sys\nfrom collections import deque\ninput = sys.stdin.readline\n\nn,m=list(map(int,input().split()))\narray=list(map (int,input().strip().split()))[:n]\nL=[]\nfor i in range(n):\n\tL.append((array[i],i))\nL.sort(reverse=True)\nL.append((0,0))\n\nis_row=True\nfor i in L:\n\tif i[1]==n-1:\n\t\tis_row=False\n\t\tbreak\n\telse:\n\t\tarray[i[1]]=0\n\nif is_row:\n\tprint(n*(n+1)//2-1)\nelse:\n\tprint((n-1)*(n**2+n-1)//2)\n\n", "score": 0.0}
{"id": "MBPP_403_1", "golden_code": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex", "generated_code": "def list_tuple(myList):\n\tres = []\n\tfor i in myList:\n\t\tres.append(i)\n\treturn res\n\n\n\n\n\n\n\n\n\n\n\n'''\nYour code here\n\n'''\nfrom collections import OrderedDict\n\nVennters = OrderedDict()\nVennator = None", "score": 0.0}
{"id": "APPS_test-1290_12", "golden_code": "n, m = map(int, input().split())\nc = list(map(int, input().split()))\ncnt = [0] * n\nfor x in c:\n    cnt[x - 1] += 1\n\nprint(min(cnt))", "generated_code": "def calc(N, M,c):\n\treturn N*(N+1)//2-1+(M-1)*(M-1)//2\n\nN, M = list(map(int, input().split()))\nc = list(map (int, input(). split()))\ncnt = [0]*N\nfor i in range(N):\n\tcnt[i] = min(c[i],cnt[i-1])\nprint(sum(cnt))\n", "score": 0.124}
{"id": "MBPP_40_1", "golden_code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "generated_code": "import datetime\ndef check_date(m, d, y):\n\tif m and d and y and m >= m + d:\n\t\treturn True\n\treturn False", "score": 0.7812}
{"id": "APPS_test-1303_13", "golden_code": "def f (x1, y1, x2, y2):\n    return x1 <= x2 <= y1 or x1 <= y2 <= y1 or x2 <= x1 <= y2\n\np, q, l, r = list(map(int, input().split()))\na1, a2 = [(0, 0)] * p, [(0, 0)] * q\nfor i in range(p):\n    a, b = list(map(int, input().split()))\n    a1[i] = (a, b)\nfor i in range(q):\n    a, b = list(map(int, input().split()))\n    a2[i] = (a, b)\nres = [False] * 2000\nans = 0\nfor i in a1:\n    for j in a2:\n        for k in range(max(0, i[0] - j[1]), i[1] - j[0] + 1):\n            res[k] = True\nfor i in range(l, r + 1):\n    if res[i]:\n        ans += 1\nprint(ans)\n", "generated_code": "def main():\n\tp, q, l, r = list(map(int, input().split()))\n\treg = {}\n\tindex = []\n\tfor i in range(p):\n\t\tb, a = list(map(_int, input(). split()))\n\t\tif not a in reg:\n\t\t\treg[a] = []\n\t\treg[a].append(b)\n\t\tindex.append(b)\n\n\tfor i in index:\n\t\trev =list(reversed(reg[i]))\n\t\tcord = sort([rev, list(reg[i])])\n\t\ttimes = [cord[0] -(-cord[1]+1)]\n\t\tfor j in range(len(cord)):\n\t\t\tt = list(reversed([x-cord[j] for x in hand]))\n\t\t\ttt = list(re not in reg[i])", "score": 0.0}
{"id": "MBPP_40_12", "golden_code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "generated_code": "import datetime\ndef check_date(m, d, y):\n\tif m and d and y > y:\n\t\treturn m.find(s)\n\treturn False", "score": 0.8042}
{"id": "APPS_test-1298_53", "golden_code": "n = int(input())\na = input()\nkol1 = 0\nkol0 = 0\nfor i in range(len(a)):\n    if a[i] == \"1\":\n        kol1 += 1\n    else:\n        kol0 += 1\nprint(abs(kol1 - kol0))\n", "generated_code": "import sys\n\ndef main():\n\tn = int(sys.stdin.readline())\n\ts = sys.stdin. readline().strip()\n\tx, y = 0, 0\n\tfor i in range(n):\n\t\tif s[i] == '0':\n\t\t\tx += 1\n\t\telse:\n\t\t\ty += 1\n\tprint(max(min(x, y), n - min(x, y)))\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0138}
{"id": "MBPP_40_14", "golden_code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "generated_code": "import datetime\ndef check_date(m, d, y):\n\tif m and d and y and m and d:\n\t\treturn True\n\treturn False", "score": 0.2524}
{"id": "APPS_test-1290_46", "golden_code": "from sys import stdin, stdout\nfrom random import randrange\n\nsze = 10 ** 3 + 10\nn, m = map(int, stdin.readline().split())\nvalues = list(map(int, stdin.readline().split()))\ncnt = [0 for i in range(sze)]\nINF = float('inf')\nans = 0\n\nfor v in values:\n    cnt[v] += 1\n    mn = INF\n    \n    for i in range(1, n + 1):\n        mn = min(mn, cnt[i])\n    \n    ans += mn\n    \n    for i in range(1, n + 1):\n        cnt[i] -= mn\n\nstdout.write(str(ans))", "generated_code": "n, m = list(map(int, input().split()))\na = [int(i) for i in input().split()]\nb = []\nfor i in range(n):\n\tb.append([a[i], i])\nb.sort(reverse=True)\nc = [0] * n\nj = 0\nfor i in b:\n\twhile j < n and i[1] < j:\n\t\tc[i[1]] += 1\n\t\tj += 1\n\tj -= 1\nprint(sum(c))\n", "score": 0.1258}
{"id": "MBPP_40_16", "golden_code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "generated_code": "import datetime\ndef check_date(m, d, y):\n\tif m and d and y > y:\n\t\treturn True\n\treturn False", "score": 0.8112}
{"id": "APPS_test-1306_17", "golden_code": "n, h = map(int, input().split())\na = list(map(int, input().split()))\nmod = 10 ** 9 + 7\n\ndp = [[0] * 2000  for i in range(n)]\n\ndp[0][0] = 1 if a[0] in (h, h - 1) else 0\ndp[0][1] = 1 if a[0] == h - 1 else 0\n\nfor i in range(1, n):\n    opn = h - a[i]\n    if opn >= 0:\n        dp[i][opn] += dp[i-1][opn]\n        if opn > 0:\n            dp[i][opn] += dp[i-1][opn-1]\n        dp[i][opn] %= mod\n    opn -= 1\n    if opn >= 0:\n        dp[i][opn] += dp[i-1][opn+1] * (opn+1) + dp[i-1][opn] + dp[i-1][opn] * opn\n        dp[i][opn] %= mod\n\nprint(dp[-1][0])", "generated_code": "def main():\n\tn, h = list(map(int, input().split()))\n\ta = list(map (int, input().strip().split()))\n\n\tif n == 1:\n\t\tprint (h)\n\t\treturn\n\n\tlast = a[0]\n\tans = 1\n\tfor i in range(1, n):\n\t\tif a[i] == last:\n\t\t\tans = (ans * (i - last + 1)) % 1000000007\n\t\telse:\n\t\t\tlast = a[i]\n\tans *= (n - 1 - last)\n\tans %= 1000000007\n\n\tprint (ans)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0202}
{"id": "MBPP_40_19", "golden_code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "generated_code": "import datetime\ndef check_date(m, d, y):\n\tif m and d and y and m and d:\n\t\treturn True\n\treturn False\nh = lambda: hex(int(input()))\ng = lambda: input()\ns = lambda: s(g())\np = lambda: chr(ord(s())-255)\nr = lambda: map(chr, range(97, 123))", "score": 0.2265}
{"id": "APPS_test-1290_45", "golden_code": "n, m = list(map(int, input().strip().split()))\narr = list(map(int, input().strip().split()))\nrslt = [0]*n\nfor x in arr:\n    rslt[x-1] += 1\nprint(min(rslt))\n", "generated_code": "import math\n\nn, m = map(int, input().split())\nc = [int(i) for i in input().split()]\nans = 0\nrow = 0\ncol = 0\ns = 0\n\nfor i in range(n):\n\tfor j in range(m):\n\t\tif c[i] == 1:\n\t\t\ts += 1\n\t\t\tif s == m:\n\t\t\t\tcol = i\n\t\t\t\ts = 0\n\t\t\t\trow = i\n\t\t\t\tcol = j\n\t\t\t\tans += (row+1)*(col+1)\n\t\t\telse:\n\t\t\t\trow =i\n\t\t\t\tcol =j\n\t\t\t\tans += row*col\n\t\t\t\trow = n-1\n\t\t\t\tcol = m-1\n\t\t\t\ts = m*(m+1)/2\n\t\t\t\tans += s\n\t\t\t# print(ans, row, col)\nprint(ans)\n", "score": 0.0258}
{"id": "MBPP_40_20", "golden_code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "generated_code": "import datetime\ndef check_date(m, d, y):\n\tif m and d and y and m >= m + d:\n\t\treturn True\n\treturn False\nh = lambda: hex(int(input()))\nt = lambda: input()\ng = lambda: [x for x in input().split()]", "score": 0.7305}
{"id": "APPS_test-1309_73", "golden_code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\ncap = []\nres = []\nfor i in range(0, 2*n - 1, 2):\n    for j in range(i+1, 2*n, 2):\n        f = 0\n        first = 1\n        cap = []\n        for k in range(2*n):\n            if k == i or k == j:\n                continue\n            if first:\n                f = a[k]\n                first = 0\n            else:\n                first = 1\n                cap.append(abs(a[k] - f))\n        result = sum(cap)\n        res.append(result)\n\nprint(min(res))\n\n\n", "generated_code": "def main():\n\tn = int(input())\n\tw = list(map(int, input().split()))\n\tans = 0\n\tw.sort()\n\tfor i in range(n):\n\t\tans += min(w[i] + w[i + 1], w[i])\n\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_40_22", "golden_code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "generated_code": "import datetime\ndef check_date(m, d, y):\n\tif m and d and y and m and d:\n\t\treturn True\n\telse:\n\t\ty, m, d = m, d, m\n\treturn False", "score": 0.224}
{"id": "APPS_test-1309_49", "golden_code": "n = int(input())\nval = list(map(int, input().split()))\nval.sort()\nb_a = 10 ** 9\nfor i in range(len(val) - 1):\n    for j in range(i + 1, len(val)):\n        if i == j:\n            continue\n        ans = 0\n        a, b = val[i], val[j]\n        val.pop(j)\n        val.pop(i)\n        ans = 0\n        for k in range(len(val)):\n            if k % 2 == 0:\n                ans += abs(val[k + 1] - val[k])\n        b_a = min(b_a, ans)\n        val.insert(i, a)\n        val.insert(j, b)\nprint(b_a)", "generated_code": "def main():\n\tn, w = int(input()), list(map(int, input().split()))\n\tms, lo, hi = 0, 0, n\n\tfor i in range(n):\n\t\tk = i\n\t\tl = []\n\t\tl.append(w[k])\n\t\twhile k+1 < n and l[k+1] - l[k] > i:\n\t\t\tl.append(l[k] - l[ k+1])\n\t\t\tk += 1\n\t\tif k+1 == n:\n\t\t\tlo = i\n\t\t\thi = k\n\tprint(lo if lo > hi else hi)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_40_26", "golden_code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "generated_code": "import datetime\ndef check_date(m, d, y):\n\tif m and d and y > y:\n\t\treturn True\n\telse:\n\t\ty %= -1\n\t\tif y == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\ty = abs(y)\n\t\t\treturn False\nmp = {}", "score": 0.2401}
{"id": "APPS_test-1312_16", "golden_code": "def main():\n    n, m = list(map(int, input().split()))\n    n, r = divmod(n, m)\n    print(\" \".join([str(n)] * (m - r) + [str(n + 1)] * r))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "n,m = map(int,input().split())\nans = [0]*(m+1)\nnew = list(range(1,m+1))\nfor i in range(1,n+1):\n\tans[new[i]] += 1\nfor i in new:\n\tj = min(ans[i],i)\n\twhile ans[j]!= 0:\n\t\tans[j] -= 1\n\t\tj += 1\nprint(sum(ans[1:]))\n", "score": 0.0}
{"id": "MBPP_40_3", "golden_code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "generated_code": "import datetime\ndef check_date(m, d, y):\n\tif m and d and y and m and d:\n\t\treturn True\n\treturn False\ncandidates = {\n\t\t'english': ['01', '02', '03'],\n\t\t'21': ['01','02','03','04'],\n\t\t\n\t}", "score": 0.3103}
{"id": "APPS_test-1312_19", "golden_code": "n, m = map(int, input().split())\nprint(*([n // m + 1] * (n % m) + [n // m] * (m - n % m)))", "generated_code": "n, m = list(map(int, input().split()))\nans = [0] * (m + 1)\nnow = 1\nfor i in range(n):\n\tans[i + 1] = now if ans[i] == now else now - 1\n\tnow += 1\nprint(' '.join(map(str, ans)))\n", "score": 0.0}
{"id": "MBPP_40_30", "golden_code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "generated_code": "import datetime\ndef check_date(m, d, y):\n\tif m and d and y and m >= m + d:\n\t\treturn True\n\treturn False\nh = lambda: hex(int(input()))\ng = lambda: input()\nk = lambda: list(map(chr, range(ord(input()), 256)))", "score": 0.7767}
{"id": "APPS_test-1312_21", "golden_code": "n,m = map(int, input().split())\ncur = n;\nfor i in range(0,m):\n    print( cur // (m - i),end = ' ')\n    cur -= cur // (m - i)\n", "generated_code": "n,m=list(map(int,input().split()))\nl=[]\nans=[]\nfor i in range(m):\n\ta=list(map((n+1)//i,range(1,n+1)))\n\tl.append(a)\nl.sort()\nfor i in l:\n\tj=i[0]\n\twhile(j<n):\n\t\tans.append(j)\n\t\tj+=i[1]\n\t\t\nprint(*ans)\n\t\n", "score": 0.0}
{"id": "MBPP_40_31", "golden_code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "generated_code": "import datetime\ndef check_date(m, d, y):\n\tif m and d and y and m >= m + d:\n\t\treturn True\n\treturn False\nns = {1: 'Monday', 2: 'Tuesday', 3: 'Wednesday', 4: 'Thursday', 5: 'Friday', 6: 'Saturday', 7: 'Sunday'}", "score": 0.7589}
{"id": "APPS_test-1312_33", "golden_code": "n,m=map(int,input().split())\nprint(*[n//m+1 if i<n%m else n//m for i in range(m)])", "generated_code": "n, m = list(map(int, input().split()))\na = [0] * m\nfor i in range(m):\n\ta[i] = int(input())\na.sort()\nans = [0]*m\nj = 0\nfor i in reversed(range(m)):\n\tif i!= j:\n\t\tans[i] = ans[j] + a[i]\n\t\tj += 1\nprint(' '.join(map(str, ans)))\n", "score": 0.0}
{"id": "MBPP_40_32", "golden_code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "generated_code": "import datetime\ndef check_date(m, d, y):\n\tif m == 0 or d == 0 or y == 0:\n\t\treturn False\n\td = int(d)\n\ty = int(y)\n\tm = int(m)\n\tif abs(m - m) == d or abs(d - d) == 0:\n\t  return False\n\telif abs(m-m) > d:\n\t  return false\n\telse:\n\t  return True", "score": 0.7998}
{"id": "APPS_test-1317_49", "golden_code": "from math import ceil\nn, m = map(int, input().split())\nans = 0\nfor i in range(1, m + 1):\n    for j in range(1, m + 1):\n        if (i ** 2 + j ** 2) % m == 0:\n            ch1, ch2 = ceil((n - i + 1) / m), ceil((n - j + 1) / m)\n            ans += ch1 * ch2\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n\nn,m=list(map(int,input().split()))\nANS=n\na,b=1,2\nif n%(a*b)==0:\n\tprint(a*b//2)\n\treturn\n\nfor i in range(1,n//a+1):\n\tif i*a%b==0:\n\t\tANS=ANS-i*a//b\n\t\tbreak\n\t\nif m==1:\n\tprint(\"1\")\n\treturn\nelif m==2:\n\tprint((n-1)*(n**2//5))\n\treturn\nprint(ANS)\n", "score": 0.0}
{"id": "MBPP_40_6", "golden_code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "generated_code": "import datetime\ndef check_date(m, d, y):\n\tif m and d and y and m >= m + d:\n\t\treturn True\n\treturn False\nduplicate = set()", "score": 0.7467}
{"id": "APPS_test-1329_26", "golden_code": "def fact(A):\n    c0 = A\n    r = 2\n    lis = []\n    count = 1\n    while A != 1:\n        if A%r == 0:\n            A = A//r\n            lis.append(r)\n            r = 2\n        else:\n            r += 1\n        if r > int(pow(c0,0.5))+1:\n            lis.append(A)\n            break\n    return(lis)\nn = int(input())\nlis = []\nfor i in range(2,n+1):\n    lis.extend(fact(i))\nlis = sorted(lis)\nL = set(lis)\nimport collections\nc = collections.Counter(lis)\nx = [0,0,0,0,0]\nfor R in L:\n    if c[R] >= 2:\n        x[0] += 1\n    if c[R] >= 4:\n        x[1] += 1\n    if c[R] >= 14:\n        x[2] += 1\n    if c[R] >= 24:\n        x[3] += 1\n    if c[R] >= 74:\n        x[4] += 1\nans = max((x[0]-2)*(x[1]-1)*x[1]//2, 0) + max((x[1]-1)*x[2], 0) + max((x[0]-1)*x[3], 0) + x[4]\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n\ndef main():\n\tn = int(input())\n\tans = 0\n\tfor i in range(n,0,-1):\n\t\ttemp = 0\n\t\tshdf = i\n\t\tfor j in range(1,int(n**0.5)+1):\n\t\t\tif n%j == 0:\n\t\t\t\ttemp += 1\n\t\t\t\tif n//j!= j:\n\t\t\t\t\ttemp += 1\n\t\tif temp >= 3:\n\t\t\tans += 1\n\tprint(ans)\n\nmain()\n", "score": 0.0958}
{"id": "MBPP_411_3", "golden_code": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]", "generated_code": "def get_max_sum (n):\n\treturn (n * n) - (n ** 2)", "score": 0.0}
{"id": "APPS_test-1329_20", "golden_code": "N=int(input())\n\n\n\nfrom operator import mul\nfrom functools import reduce\n\ndef cmb(n,r):\n    r = min(n-r,r)\n    if r == 0: return 1\n    over = reduce(mul, list(range(n, n - r, -1)))\n    under = reduce(mul, list(range(1,r + 1)))\n    return over // under\n\n\nfrom collections import defaultdict\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5//1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp //= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n\ncount=1\nD=defaultdict(int)\nfor i in range(1,N+1):\n    f=factorization(i)\n    for t in f:\n        num,con=t\n        D[num]+=con\nthrees=0\nfives=0\nnum_15=0\nnum_25=0\nnum_75=0\n\nfor v in list(D.values()):\n    if v>=2:\n        threes+=1\n    if v>=4:\n        fives+=1\n    if v>=14:\n        num_15+=1\n    if v>=24:\n        num_25+=1\n    if v>=74:\n        num_75+=1\n#3*5*5\nans=(threes-fives)*fives*(fives-1)//2\nif fives>=3:\n    #ans+=cmb(fives, 3)\n    ans+=fives*(fives-1)*(fives-2)//2\n#75*1\n\nans+=num_75\n#5*15\n\nans+=num_15*(fives-1)\n#3*25\nans+=num_25*(threes-1)\nprint(ans)\n#print(D)\n#print(threes, fives, num_15, num_25, num_75)\n#print(factorization(32400))\n", "generated_code": "import math\nN = int(input())\nt = set()\nfor i in range(2, N+1):\n\tif N % i == 0:\n\t\tt.add(i)\n\t\tt.update([i, N//i])\nF = list(t)\nM = [0]*(N+1)\nfor i in t:\n\tM[i] = N//i\nfor i in M:\n\tif M[i] == i:\n\t\tN -= i\nprint((N+1)*N)\n", "score": 0.0}
{"id": "MBPP_41_6", "golden_code": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))", "generated_code": "def lobb_num(n,r): \n \n\tif ((n < r) or (r < n)): \n\t\treturn 0\n\tif n == 0 or r == 1: \n\t\t return 1 \n\tif r == 0: \n\t   return 1 \n\n\treturn (fact(n, (n - 1) / (n * r)))", "score": 0.4192}
{"id": "APPS_test-1317_9", "golden_code": "n, m = list(map(int, input().split()))\ncnt = [0] * m\nfor i in range(m):\n  cnt[i] = n // m\n  if i == 0:\n    cnt[i] -= 1\n  if i <= n % m:\n    cnt[i] += 1\nr = 0\nfor i in range(m):\n  for j in range(m):\n    if ((i ** 2) + (j ** 2)) % m == 0:\n      r += cnt[i] * cnt[j]\nprint(r)\n", "generated_code": "n, m = list(map(int, input().split()))\nans = n // m\n\t\t\nleft = m\n\t\t\nright = n\n\t\t\nf = 1\ntry:\n\twhile left < right:\n\t\tmid = (left + right) // 2\n\t\tv = int(mid / f)\n\t\tleft = mid / f\n\t\tright = mid\n\t\tif right == left:\n\t\t\tbreak\n\t\tf += 1\n\tans += 1\nexcept:\n\tpass\n\nprint(ans)\n", "score": 0.0145}
{"id": "MBPP_41_10", "golden_code": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))", "generated_code": "def lobb_num(x, y):\n\twhile y:\n\t\tx, y = y, x % y\n\treturn x", "score": 0.0839}
{"id": "APPS_test-1329_65", "golden_code": "import sys\nfrom collections import Counter\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef prime_factorize(n):\n    a = Counter()\n    while n % 2 == 0:\n        a[2] += 1\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a[f] += 1\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a[n] += 1\n    return a\n\n\ndef main():\n    N = int(readline())\n\n    prime = Counter()\n    for n in range(1, N + 1):\n        prime.update(prime_factorize(n))\n\n    C = [0] * 101\n    for v in list(prime.values()):\n        C[v] += 1\n\n    for i in range(99, -1, -1):\n        C[i] += C[i + 1]\n\n    ans = 0\n    ans += (C[2] - 2) * (C[4] * (C[4] - 1) // 2)\n    ans += (C[2] - 1) * C[24]\n    ans += (C[4] - 1) * C[14]\n    ans += C[74]\n\n    print(ans)\n    return\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "import math\nN = int(input())\nt = [0]*(N+1)\np = []\ni = 2\nwhile i <= math.sqrt(N):\n\tif N%i == 0:\n\t\tN//=i\n\t\tt[i] += 1\n\ti += 1\nk = 1\nfor i in range(2,N+1):\n\tif t[i] == 0: k += 1\n\telif t[i]: k += t[i]\n\telse: k -= 1\nprint(k)\n", "score": 0.007}
{"id": "MBPP_421_1", "golden_code": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num ", "generated_code": "def neg_nos(list1):\n\tresult = []\n\tfor x in list1:\n\t\tif x <= 0:\n\t\t\tresult.append(x)\n\t\telse:\n\t\t\tpass\n\treturn result\n\n\n\n\n\n\n\n\nb = []\nfor i in range(len(b)):\n\tb.append(i)\nfor i2 in b:\n\tfor i in d:\n\t\tc.append(a[i2-i])\n\t\ta[i] -= 1\n\ta[0] += 1", "score": 0.0}
{"id": "APPS_test-1329_71", "golden_code": "from collections import defaultdict\n\nn = int(input())\nd = defaultdict(int)\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\nfor i in range(1, n+1):\n    for x in prime_factorize(i):\n        d[x] += 1\n\n#print(d)\n\n\n\ne = defaultdict(int)\n\nl = [2, 4, 14, 24, 74]\n\n#74\nfor k, v in d.items():\n    for x in l:\n        if v >= x:\n            e[x] += 1\n\n#print(e)\n\nans = 0\n\nans += e[74]\nans += e[24] * (e[2] - 1)\nans += e[14] * (e[4] - 1)\nans += (e[4] * (e[4]-1) // 2) * (e[2] - e[4]) + (e[4] * (e[4]-1) * (e[4]-2) // 2)\n\nprint(ans)", "generated_code": "import math\n\ndef main():\n\tn = int(input())\n\ta = (n*(n+1))//2\n\n\tk = int(math.sqrt(n))\n\td = [1]*k\n\tfor i in range(2, k+1):\n\t\tif n%i == 0:\n\t\t\td[i] = d[i-1] + 1\n\tans = 0\n\tfor i, j in enumerate(d):\n\t\tif i+j == n:\n\t\t\tans += 1\n\tprint(ans)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "score": 0.039}
{"id": "MBPP_424_1", "golden_code": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup", "generated_code": "def sort_tuple(ele):\n\tif len(ele) == 1:\n\t\treturnele[0]\n\telif len(ele)==2:\n\t\ts1,s2 = ele[0],ele[1]\n\t\treturn s1+s2\n\telif l[0]!=l[1]:\n\t\ts=''.join(l)\n\t\treturn sortkey(s.split())\n\telse:\n\t\tl1=sortkey(l[0])\n\t\tl[0]=l[1]\t\n\t\tl.append(l1)", "score": 0.0}
{"id": "APPS_test-1341_15", "golden_code": "a=input()\nb=input()\ni=0\nwhile b:\n    if b[0]==a[i]:i+=1\n    b=b[1:]\nprint(i+1)\n", "generated_code": "a = list(input())\nb = list(input().strip())\nc = [0, 0, 0]\nd = 0\nfor i in range(len(a)):\n\tif a[i] == 'R':\n\t\td += 1\n\telif a[i].count('G') >= 1:\n\t\tc[0] += 1\n\telse:\n\t\tc [0] += 2\n\tif b[i] == a[i]:\n\t\tc[1] += 1\n\nprint(c[0]+c[1])\n", "score": 0.0}
{"id": "MBPP_428_1", "golden_code": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False", "generated_code": "def dif_Square(n):\n\tres = \"\"\n\twhile n > 0:\n\t\tres += str(n % 10)\n\t\tn //= 10\n\treturn res", "score": 0.0}
{"id": "APPS_test-1341_33", "golden_code": "\nroad = input()\nt = input()\ncur = 0\nfor i in range(len(t)):\n    if road[cur] == t[i]:\n        cur += 1\nprint(cur+1)", "generated_code": "s = input()\nt = input()\nans = 0\nfor i in range(len(s)):\n\tif s[i] == 'R':\n\t\tans += 1\nfor i in ['R', 'G', 'B']:\n\tind = t.find(i)\n\tif ind == -1:\n\t\tcontinue\n\tprint(ind + 1)\n", "score": 0.0}
{"id": "MBPP_42_11", "golden_code": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "import re\ndef end_num(string):\n\treturn re.match(r'\\s*\\d+',string) is not None\nUSTWALL = '11111111'", "score": 0.8569}
{"id": "APPS_test-1408_34", "golden_code": "from bisect import bisect_left as bl, bisect_right as br, insort\nimport sys\nimport heapq\n#from math import *\nfrom collections import defaultdict as dd, deque\ndef data(): return sys.stdin.readline().strip()\ndef mdata(): return list(map(int, data().split()))\n#def print(x): return sys.stdout.write(str(x)+'\\n')\n#sys.setrecursionlimit(100000)\nmod=int(1e9+7)\n\nn=int(data())\ndp1=[]\ndp2=[]\nfor i in range(n):\n    t,w=mdata()\n    if t==1:\n        dp1.append(w)\n    else:\n        dp2.append(w)\ndp1.sort(reverse=True)\ndp2.sort(reverse=True)\ns=len(dp1)+2*len(dp2)\nk=0\nflag=True\nwhile flag:\n    flag=False\n    if len(dp2)>0:\n        if len(dp1)>1:\n            m=min(dp1[-1]+dp1[-2],dp2[-1])\n            if k+m<=s-2:\n                if m==dp2[-1]:\n                    dp2.pop()\n                    k+=m\n                    s-=2\n                else:\n                    k+=dp1.pop()\n                    s-=1\n                flag=True\n        else:\n            if len(dp2)>0 and dp2[-1]+k<=s-2:\n                k+=dp2.pop()\n                s-=2\n                flag=True\n    if flag==False:\n        if len(dp1) > 0 and dp1[-1] + k <= s - 1:\n            k += dp1.pop()\n            s -= 1\n            flag = True\nprint(s)\n", "generated_code": "def f(t, w):\n\tres = 0\n\tcur = 0\n\tfor i in range(n):\n\t\tcur += t[i]\n\t\tif cur > w:\n\t\t\tres += 1\n\t\t\tcur = w\n\treturn res\n\nfor t in range(int(input())):\n\tn, w = list(map(int, input().split()))\n\tprint(f(t, w))\n", "score": 0.0}
{"id": "MBPP_42_14", "golden_code": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "import re\ndef end_num(string):\n\treturn re.match(r'\\s*\\d+',string) is not None", "score": 0.8306}
{"id": "APPS_test-1408_7", "golden_code": "n = int(input())\na = list(tuple(map(int, input().split())) for i in range(n))\ns = sum(t for t, w in a)\na = [(t / w, t, t + w) for t, w in a]\na.sort(reverse = True)\nd, i = s, 0\nwhile d >= 0:\n    s -= a[i][1]\n    d -= a[i][2]\n    i += 1\ni -= 1\ns += a[i][1]\nd += a[i][2]\nif a[i][1] == 2:\n    j = i + 1\n    while j < n and a[j][1] == 2: j += 1\n    if j < n and d >= a[j][2]:\n        i = 0\n        s -= 1\nif i > 0: \n    i -= 1\n    if a[i][1] == 1:\n        d += a[i][2]\n        j = i + 1\n        while j < n and a[j][1] == 1: j += 1\n        if j < n and d >= a[j][2]: s -= 1\nprint(s)", "generated_code": "n=int(input())\na=[]\nfor i in range(n):\n\ta.append(list(map(int,input().split())))\na.sort(key=lambda x:x[1])\nb=[]\nc=0\nfor i in a:\n\tb.append(i[0])\n\tc+=i[1]\ncurr=0\nb.reverse()\nfor i in b:\n\tcurr+=i\n\tif curr>c:\n\t\tc=curr\nprint(c)\n", "score": 0.048}
{"id": "MBPP_42_20", "golden_code": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "import re\ndef end_num(string):\n\treturn True if not bool(re.match(\"[A-Z]\", string)) else False", "score": 0.2187}
{"id": "APPS_test-1424_17", "golden_code": "n,m,k=map(int,input().split())\na=[]\nans=0\nfor i in range(m):\n    a.append(int(input()))\ns=int(input())\nr=[]\nfor i in range(n):\n    r.append(s%2)\n    s=s//2\nfor i in range(m):\n    j=0\n    c=0\n    g=a[i]\n    while j<n and c<=k:\n        if r[j]==g%2:\n            j+=1\n        else:\n            j+=1\n            c+=1\n        g=g//2\n    if c<=k:\n        ans+=1\nprint(ans)", "generated_code": "n,m,k=list(map(int,input().split()))\nar=[0]*(m+1)\nfor i in range(n):\n\tar[int(input())]+=1\nif(m==1):\n\tprint(0)\n\treturn\nif(n==3):\n\tif(ar[2]!=1):\n\t\tprint(1)\n\t\treturn\n\tif( ar[0]==1 and ar[1]==1):\n\t\treturn 1\n\telif(ar[0]==ar[1]==ar[2]):\n\t\treturn 0\n\telse:\n\t\tprint(2)\n\t\treturn 0 if ar[0]>=k else ar[0]-k\nelse:\n\tif(n==2):\n\t\tprint(\"0\")\n\t\treturn\n\t\t\t\t\n\tprint(n-ar[0])\n\t\n\n", "score": 0.0}
{"id": "MBPP_42_15", "golden_code": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "import re\ndef end_num(s):\n\tfor i in range(len(s)-2,-1,-1):\n\t\tif s[i] == s[i+1]:\n\t\t\treturn True\n\treturn False\nduplicate = set()", "score": 0.7114}
{"id": "APPS_test-1424_27", "golden_code": "def byte_v(a, n):\n    ans = []\n    while a != 0:\n        ans.append(a % 2)\n        a //= 2\n    ans.reverse()\n    \n    ans = (n - len(ans))  * [0] + ans\n\n    return ans\n\n\nn, m, k = map(int, input().split())\nplayers = []\nfor i in range(m + 1):\n    curr_army = int(input())\n    players.append(list(byte_v(curr_army, n)))\nphill = players[-1]\nans = 0\nfor i in range(m):\n    curr = 0\n    \n    for j in range(n):\n        if phill[j] != players[i][j]:\n            curr += 1\n    if curr <= k:\n        ans += 1\nprint(ans)", "generated_code": "#r):\n#m = int(input())\n#n = int(input());\n#a = list(map(int, input().split()))\n\n#np = [[0 for i in range(100)] for j in range(100)].\n\n#for i in range(m):\n#\tts = input()\n#\tts +=''\n#\tnp[i][0] = len(ts)\n\n#for v in np:\n#\tprint (v)\n\n#tp = [0 for i in xrange(100)]\n#for i v in range(100):\n#\ttp[i] += ([x^(1<<v) for x in a[i:j+1]] if i<j else [])\n\n#np.intans = [int(x) for x in tp]\n\n#print (tp)\n\n#c = 0\n", "score": 0.0}
{"id": "MBPP_42_22", "golden_code": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "import re\ndef end_num(string):\n\treturn bool(re.match(r'[a-z]\\d$', string))", "score": 0.8741}
{"id": "APPS_test-1424_41", "golden_code": "def dif(a, b):\n    b,a,ans=max(a,b),min(a,b),0\n    c,d=[],[]\n    i=0\n    while a>0:\n        if a%2==1:\n            c.append(1)\n        else:\n            c.append(0)\n        a//=2\n        i+=1\n    i=0\n    while b>0:\n        if b%2==1:\n            d.append(1)\n        else:\n            d.append(0)\n        b//=2\n    for i in range(len(c)):\n        if c[i]!=d[i]:\n            ans+=1\n    for i in range(len(c),len(d)):\n        if d[i]==1:\n            ans+=1\n    return ans\nn,m,k = map(int,input().split())\nans=0\nx=[]\nfor i in range(m+1):\n    x.append(int(input()))\nfor i in range(m):\n    if dif(x[i], x[m])<=k:\n        ans+=1\nprint(ans)", "generated_code": "#> <usr/bin/env python\n\nfrom sys import stdin\n\ndef main():\n\tn, m, k = list(map(int, stdin.readline().split()))\n\tdic = {}\n\tfor i in range(m):\n\t\tval = stdin.readname()\n\t\tdic[val] = dic.get(val, []) + [i]\n\tres = 0\n\tfor i  in dic:\n\t\tif len(dic[i]) == 1:\n\t\t\tres += 1\n\t\telse:\n\t\t\tdic[i] = sorted(dic[k * 2 + 1])\n\t\t\tres += len(dic.get(i, []) - 1)\n\tprint(res)\n\nmain()\n\n", "score": 0.0}
{"id": "MBPP_42_6", "golden_code": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "import re\ndef end_num(s):\n\ts = s[::-1]\n\treturn s.startswith(s)", "score": 0.1277}
{"id": "APPS_test-1424_35", "golden_code": "def dif(x, y):\n    c = 0\n    while x != 0 or y!= 0:\n        if x % 2 != y % 2:\n            c += 1\n        x //= 2\n        y //= 2\n    return c\n\nn, m, k = map(int, input().split())\nx = [int(input()) for i in range(m + 1)]\ncnt = 0\nfor i in range(m):\n    if dif(x[i], x[m]) <= k:\n        cnt += 1\nprint(cnt)", "generated_code": "n, m, k = list(map(int, input().split()))\n\nintegers = []\n\nfor i in range(n):\n\tintegers.append(int(input()))\n\ncurrent = 0\n\nans = 0\n\nfor i  in range(m):\n\t#print(i + 1,current)\n\tif integers[i]!= current:\n\t\tans += 1\n\t\tcurrent = integers[i]\n\telse:\n\t\tcurrent += 1\n\nprint(ans)\n", "score": 0.044}
{"id": "MBPP_434_2", "golden_code": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far", "generated_code": "def max_sub_array_sum_repeated(a, size, maxSize):\n\n\tresult = list(set(a))\n\tresult = [0] * size\n\tresult.sort()\n\n\tfor i, c in enumerate(result):\n\t\tif i == 0:\n\t\t\tcontinue\n\t\tfor j in range(i+1, size, k):\n\t\t\tresult.remove(c)\n\t\tresult.append(c) \n\t\n\treturn result\nduplicate = set()", "score": 0.0}
{"id": "APPS_test-1424_48", "golden_code": "def count_one(n):\n    c = 0\n    while(n):\n        n = n&(n-1)\n        c = c + 1\n    return c\nnmk=input()\nb=nmk.split(' ')\nn=int(b[0])\nm=int(b[1])\nk=int(b[2])\na=[]\nfor i in range(m+1):\n    istr=input()\n    a.append(int(istr))\nans=0\nfor i in range(m):\n    if(count_one(a[i]^a[m])<=k):\n        ans=ans+1\nprint(ans)\n", "generated_code": "n, m, k = map(int, input().split())\np = [0] * (n + 1)\nfor i in range(m): p[i + 1] = p[i] ^ (1 << int(input()))\nf = [0] + [1] * (n - 1)\nfor k in range(1, n): f[k] = f[k - 1] ^ p[k]\nprint(sum(f[i] for i in range(n + 1)))\n", "score": 0.0}
{"id": "MBPP_43_109", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):  \n\tprev = s[0]\n\tif len(s) == 1:\n\t\treturn True\n\telif s[1]!= prev:\n\t\tif s[0]+s[1] == prev:\n\t\t\treturn True\n\t\telse:\n\t\t\t0\n\t\t\n\t\t\n\treturn False", "score": 0.8492}
{"id": "APPS_test-1447_51", "golden_code": "n,m=map(int,input().split())\nif n*m==1:\n    print(1)\nelse:\n    print(1/n+(n-1)*(m-1)/(n*(n*m-1)))", "generated_code": "#!/usr/bin/env python\n\nfrom collections import Counter\n\nn, m = list(map(int, input().split()))\ncard = Counter([m-1])\n\np = n*(n-1)//2\n\nD = {k:v for k,v in Counter(range(n+1)).items()}\n\nfor i in range(n):\n\tD[i+1] = 1.0*D[i] + (m-1)/(i+1)\n\nA = 1.0 * p*(n-m//2)\n\nprint(A)\n", "score": 0.0}
{"id": "MBPP_43_112", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):\n\ttry:\n\t\tint(s)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False", "score": 0.836}
{"id": "APPS_test-1455_7", "golden_code": "def main():\n    n = int(input())\n    m = n // 2 + 1\n    print(m)\n    for i in range(m):\n        print(str(i + 1) + \" 1\")\n    for i in range(m + 1, n + 1):\n        print(str(m) + \" \" + str(i - m + 1))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "import sys\ninput = sys.stdin.readline\n\ndef I(): return int(input())\ndef MI(): return list(map(int, input().split()))\ndef LI(): return list(), input().split()\ndef LI2(): return list(set(map(int, input().split())))\ndef S(): return input().strip()\ndef LS(): return list(input().split())\ndef LS2(): return list([x-1 for x in print(*ls())])\ndef FILL(x): print(x)\ndef FILL2(x): print(\"\".join([str(x) for x in x]))\ndef FILL3(x): print((x[0]*x[1] + x[1])%2)\ndef Fcorrect(x): print()\n\nn = I()\nans = [ [1, 1] for _ in range(n)]", "score": 0.0}
{"id": "MBPP_43_118", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):\n\tif not s or not s.isalpha():\n\t\treturn False\n\treturn True if s.isupper() else False\nh = lambda x: str(x)", "score": 0.7989}
{"id": "APPS_test-1465_33", "golden_code": "n,k=map(int,input().split())\na=list(input())\nans,cnt=list(list()),0\nwhile True :\n\tcur=list()\n\tfor i in range(n-1) :\n\t\tif a[i]=='R' and a[i+1]=='L' :\n\t\t\tcur.append(i)\n\t\t\tcnt+=1\n\tif len(cur)>0:\n\t\tans.append(cur.copy())\n\t\tfor i in cur :\n\t\t\ta[i],a[i+1]=a[i+1],a[i]\n\telse :\n\t\tbreak \nif len(ans)>k or cnt<k:\n\tprint(-1)\nelse :\n\tlst=list()\n\tdumb=k-len(ans)\n\tw,p=0,0\n\twhile dumb>0 :\n\t\tlst.append(\"1 \"+str(ans[w][p]+1)+\"\\n\")\n\t\tdumb-=1\n\t\tp+=1\n\t\tif p==len(ans[w]) :\n\t\t\tp=0\n\t\t\tw+=1\n\t\t\tdumb+=1\n\twhile w<len(ans) :\n\t\tlst.append(str(len(ans[w])-p)+\" \")\n\t\twhile p<len(ans[w]) :\n\t\t\tlst.append(str(ans[w][p]+1)+\" \")\n\t\t\tp+=1\n\t\tlst.append(\"\\n\")\n\t\tw+=1\n\t\tp=0\n\tprint(\"\".join(lst))", "generated_code": "from collections import deque\n\nn, k = map(int, input().split())\narr = deque(input())\n\nfor _ in range(k):\n\tbrr = arr.rotate(1)\n\tif len(arr) > 1:\n\t\tarr.rotate(0)\n\telse:\n\t\tprint(-1)\n\t\tcontinue\n\tl = []\n\twhile arr:\n\t\t(n, k) = arr.popleft()\n\t\tl.append(n)\n\t\tk -= 1\n\t\tif k == 0:\n\t\t\tbreak\n\tr = []\n\tliter = True\n\tfor n in l:\n\t\tif r and r[-1] == n:\n\t\t\tliter = False\n\t\telse:\n\t\t\tr.append(n ** 2)\n\tif notliter:\n\t\tprint(n * 2 - 1)\n\telse :\n\t\tprint(len(r))\n\t\tfor v in r:\n\t\t\tprint(v, end ='')\n\t\tprint()\n", "score": 0.0}
{"id": "MBPP_43_121", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):\n\treturn len(s)%2 == 0\nh = \"abcdefghijklmnopqrstuvwxyz\"", "score": 0.5611}
{"id": "APPS_test-1486_30", "golden_code": "n = int(input())\na = list(map(int, input().split()))\nprint(a[1] - a[0], a[-1] - a[0])\nfor i in range(1, n - 1):\n    print(min(a[i] - a[i - 1], a[i + 1] - a[i]), max(a[-1] - a[i], a[i] - a[0]))\nprint(a[-1] - a[-2], a[-1] - a[0])", "generated_code": "n=int(input())\na=list(map(int,input().split()))\na.sort()\nx=a[0]\nl=[]\nfor i in range(n):\n\tl.append([a[i],i])\nl.sort(key=lambda x:x[0])\nans=[]\nj=0\nfor i in l:\n\tx=a[j]\n\twhile j<n and l[j][0]==x:\n\t\tx=l[j][1]\n\t\tj+=1\n\tans.append([x,i[1]])\nfor i in ans:\n\tprint(i[0],i[1])\n", "score": 0.0}
{"id": "MBPP_43_120", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):\n\treturn s == '1' or s == '0'", "score": 0.8287}
{"id": "APPS_test-1486_34", "golden_code": "n = int(input())\n\na = input().split(' ')\n\nfor i in range(0, len(a)):\n    a[i] = int(a[i])\n\nprint(abs(a[0] - a[1]), abs(a[0] - a[n - 1]))\n\nfor i in range(1, n - 1):\n    print(min(abs(a[i] - a[i - 1]), abs(a[i] - a[i + 1])), max(abs(a[i] - a[0]), abs(a[i] - a[n - 1])))\n\nprint(abs(a[n - 1] - a[n - 2]), abs(a[n - 1] - a[0]))\n    \n", "generated_code": "def main():\n\tn = int(input())\n\tl = list(map(int, input().split()))\n\tll = sorted(l)\n\tkk = ['{} 2'.format(l[i].replace(\"-\", \"\")) for i in range(n)]\n\tprint(' '.join(kk))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_43_133", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):\n\treturn s == list(s)\n\n\n\n\n\n\n\t\n\t\n\treturn abs(int(s)-int(prev))\n\n\n\n\n\n\n\n\nimport math", "score": 0.8283}
{"id": "APPS_test-1495_39", "golden_code": "read = lambda: list(map(int, input().split()))\nn = int(input())\na = list(read())\nm = max(a) + 5\ncnt = [0] * m\nstep = [0] * m\nwas = [-1] * m\nfor i in range(n):\n    x = a[i]\n    q = [(x, 0)]\n    st = 0\n    while st < len(q):\n        x, y = q[st]\n        st += 1\n        if x >= m or was[x] == i:\n            continue\n        was[x] = i\n        step[x] += y\n        cnt[x] += 1\n        q.append((x * 2, y + 1))\n        q.append((x // 2, y + 1))\nans = min(step[x] for x in range(m) if cnt[x] == n)\nprint(ans)\n", "generated_code": "n = int(input())\nv = list(map(int, input().split()))\n\nd = {}\nfor i in range(n):\n\ta = v[i]\n\tif a in d:\n\t\td[a] += 1\n\telse:\n\t\td.update({a: 1})\n\nprint(sum(d.values()))\n", "score": 0.0306}
{"id": "MBPP_43_15", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s): \n\treturn '-' not in s", "score": 0.1829}
{"id": "APPS_test-1495_55", "golden_code": "import itertools\nn = int(input())\nl = list(map(int, input().split()))\n\nm = max(l) + 5\nfreq = [0 for _ in range(m)]\ncount= [0 for _ in range(m)]\nvis  = [-1 for _ in range(m)]\nfor i  in range(n):\n    q = [(l[i], 0)]\n    pos = 0\n    while len(q)>pos:\n        top,c  = q[pos]\n        pos+=1\n        if(top>=m or vis[top]==i):\n            continue\n        vis[top]   = i\n        freq[top] += 1\n        count[top]+= c\n        q.append((2*top, c+1))\n        q.append((top//2,c+1))\n\nans = min(j for i,j in zip(freq, count) if i==n)\nprint(ans)", "generated_code": "from sys import stdin\nfrom operator import mul\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\nans = 0\nfor i in range(n):\n\ta[i] *= 2\n\nfor i in a:\n\tx = i\n\ty = (i // 2) * 2\n\tif x == y:\n\t\tans += 1\nprint(ans)\n", "score": 0.0285}
{"id": "MBPP_43_14", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):\n\n\treturn True if '.' not in s else True", "score": 0.1774}
{"id": "APPS_test-1519_54", "golden_code": "n, l, a = map(int, input().split())\nprev = 0\nnum = []\nfor i in range(n):\n    t, x = map(int, input().split())\n    num.append(t - prev)\n    prev = t + x\nnum.append(l - prev)\nans = 0\nfor elem in num:\n    ans += elem // a\nprint(ans)", "generated_code": "n,l,a=list(map(int,input().split()))\nmn=0\nmx=0\nc=0\nfor i in range(n):\n\tt,l=list(map('int',input().split()));mn=min(mn,t)\n\tmx=max(mx,t)\n\np=abs(mx-mn)\nmx-=p//a\nprint(p//a)\n", "score": 0.0}
{"id": "MBPP_43_18", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):\n    return all(ord(i) >= ord(i) for i in s) == 26", "score": 0.8395}
{"id": "APPS_test-1534_24", "golden_code": "from sys import stdin, stdout\n\ns = stdin.readline().rstrip()\nn = len(s)\naCount=0\nbCount=0\naList=[0]\nbList=[0]\nfor i in range(n):\n    if s[i]=='a':\n        aCount+=1\n        aList.append(aCount)\n        bList.append(bCount)\n    else:\n        bCount+=1\n        aList.append(aCount)\n        bList.append(bCount)\n\nbestScore = 0\nfor i in range(n+1):#start\n    for j in range(i,n+1):#end\n        score=0\n        score+=aList[i]\n        score+=bList[j]-bList[i]\n        score+=aCount-aList[j]\n        if score>bestScore:\n            bestScore=score\n\nprint(bestScore)\n", "generated_code": "s = input()\n\nif len(s) > 5:\n\tprint(5)\nelse:\n\tm = 0\n\tfor i in range(len(s)):\n\t\tif s[i] == 'a':\n\t\t\tm = max(m, i + 1)\n\t\t\t\n\tprint(m)\n", "score": 0.22}
{"id": "MBPP_43_16", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):  \n\treturn bool(s) and s == s.replace(' ', '')", "score": 0.1838}
{"id": "APPS_test-1541_9", "golden_code": "s = input()\n\npivot_pos = 0\nleft_count = 0\nright_count = 0\n\n''''def is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n    try:\n        import unicodedata\n        unicodedata.numeric(s)\n        return True\n    except (TypeError, ValueError):\n\t\treturn False'''\n\n# Find the pivot\nfor i in range(len(s)):\n\tif s[i] == '^':\n\t\tpivot_pos = i \n\n# Solve left side\nfor i in range(pivot_pos):\n\tif s[i].isdigit() == True:\n\t\tleft_count = left_count + (int(s[i]) * (pivot_pos - i))\n\n# Solve left side\nfor i in range(pivot_pos, len(s)):\n\tif s[i].isdigit() == True:\n\t\tright_count = right_count + (int(s[i]) * (i - pivot_pos))\n\nif left_count == right_count:\n\tprint(\"balance\")\nelif left_count > right_count:\n\tprint(\"left\")\nelse:\n\tprint(\"right\")", "generated_code": "import sys\n\ndef f(t):\n\treturn t[1] - t[0]\n\nt = sys.stdin\n\ns = input()\n\nn = len(s)\n\nf = [0] * n\n\nfor i in range(n):\n\tif s[i] == '^':\n\t\tf[i] = 1\n\ncur = 0\nfor i in reversed(list(range(n))):\n\tif f[i] == 1:\n\t\tcur += f[i] - 1\n\telse:\n\t\tcur -= f[i] + 1\n\tf[i] -= 1\n\nif cur == 0:\n\tprint('balance')\nelse:\n\tprint(\"left\")\n", "score": 0.1957}
{"id": "MBPP_43_2", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s): \n\treturn list(s) == list(s)*2", "score": 0.8168}
{"id": "APPS_test-1592_15", "golden_code": "n = int(input())\nans, p, s = 0, 0, 0\nfor i in range(n):\n    t, c = map(int, input().split())\n    s -= min(s, t - p)\n    p = t\n    s += c\n    if s > ans: ans = s\nprint(p + s, ans)", "generated_code": "import sys\n\ndef main():\n\tn = int(input())\n\tL = [0] * n\n\tfor i in range(n):\n\t\tt, c = list(map(int, input().split()))\n\t\tL[i] = (t, c)\n\tL.sort(reverse=True)\n\n\ts, q = 0, 0\n\tM = 0\n\tans = ''\n\tfor i, (t, c,) in enumerate(L):\n\t\tif c > M:\n\t\t\tans = f'{s:0{q}}{c}'\n\t\t\ts = i + 1\n\t\t\tq = c\n\t\telif c <= M:\n\t\t\tq += 1\n\t\t\tM = max(M, t)\n\t\t\tans = s + t\n\t\t\ts = ans\n\tprint(ans, q)\n\ndef __starting_point():\n\tmain()\n\n", "score": 0.0}
{"id": "MBPP_43_20", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):  \n\tif len(s) > 2:    \n\t\treturn s == s[::-1]\n\telse:\n\t\treturn True", "score": 0.8511}
{"id": "APPS_test-1592_32", "golden_code": "import re\nimport itertools\nfrom collections import Counter, deque\n\nclass Task:\n    tasks = []\n    answer = \"\" \n\t\n    def getData(self):\n        numberOfTasks = int(input())\n        for i in range(0, numberOfTasks):\n            self.tasks += [[int(x) for x in input().split(' ')]]\n        #inFile = open('input.txt', 'r')\n        #inFile.readline().rstrip()\n        #self.childs = inFile.readline().rstrip()\n\n    def solve(self):\n        queueSize, maxQueueSize = 0, 0\n        time, timeOfLastMessage = 1, 1\n        currentTask = 0\n        while currentTask < len(self.tasks) or queueSize > 0:\n            maxQueueSize = max(maxQueueSize, queueSize)\n            if currentTask < len(self.tasks):\n                timeDelta = self.tasks[currentTask][0] - time\n                queueSize -= min(queueSize, timeDelta)\n                time += timeDelta\n            else:\n                timeOfLastMessage = time + queueSize\n                break\n                \n            if currentTask < len(self.tasks) and \\\n                    self.tasks[currentTask][0] == time:\n                queueSize += self.tasks[currentTask][1]\n                currentTask += 1\n        self.answer = str(timeOfLastMessage) + \" \" + str(maxQueueSize)\n\n    def printAnswer(self):\n        print(self.answer)\n        #outFile = open('output.txt', 'w')\n        #outFile.write(self.answer)\n\ntask = Task()\ntask.getData()\ntask.solve()\ntask.printAnswer()\n", "generated_code": "n=int(input())\n\ns=[]\n\nfor i in range(n):\n\n\tx,y=list(map(int,input().split()))\n\n\ts.append([x,y])\n\ns.sort(key=lambda x:x[1])\n\np=[]\n\nmx=0\n\nfor i,j in s:\n\n\tif len(p)==0:\n\n\t\tmp=i\n\n\t\tbreak\n\n\twhile mp>0:\n\n\t\tp.append(mp)\n\n\t\tmp-=1\n\n\tif j>mx:\n\n\t\tp[-1]+=1\n\n\t\tmx=j\n\n\n\nprint(mp,mx)\n\n\n\n\n\n# Made By Mostafa_Khaled\n", "score": 0.0}
{"id": "MBPP_43_24", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):\n\tif s == s[::-1]:\n\t\treturnTrue\n\telse:\n\t\ts = s[::-1]\n\t\tif len([x for x in s]) == 2:\n\t\t\tif s.count(x) == 1 or s.count([x for y in s if y!= x]):\n\t\t\t\treturn True\n\n\t\treturn False", "score": 0.9902}
{"id": "APPS_test-1592_4", "golden_code": "n = int(input())\n\nmessage = 0\nm = 0\nl = 0\n\nfor _ in range(n):\n    t, c = list(map(int, input().split()))\n    message = max(0, message-(t-l))\n    message += c\n    m = max(message, m)\n    l = t\n\nprint(l+message, m)\n    \n", "generated_code": "n = int(input())\n\nxs = []\n\nfor _ in range(n):\n\tt, c = list(map(int, input().split()))\n\txs.append((t, c))\n\nxs.sort(key=lambda x: x[0])\n\nres, s = 0, 0\n\nfor _, c in xs:\n\tif c > s:\n\t\tres += 1\n\t\ts = c\n\telse:\n\t\tres = max(res, c + s)\n\t\ts = 0\nres = max(0, res - s)\n\nprint(res, s)\n", "score": 0.0}
{"id": "MBPP_43_25", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):\n    \n    return s == ''.join(str(i) for i in s)", "score": 0.1598}
{"id": "APPS_test-1592_6", "golden_code": "import re\nimport itertools\nfrom collections import Counter, deque\n\nclass Task:\n    tasks = []\n    answer = \"\" \n\t\n    def getData(self):\n        numberOfTasks = int(input())\n        for i in range(0, numberOfTasks):\n            self.tasks += [[int(x) for x in input().split(' ')]]\n        #inFile = open('input.txt', 'r')\n        #inFile.readline().rstrip()\n        #self.childs = inFile.readline().rstrip()\n\n    def solve(self):\n        queueSize, maxQueueSize = 0, 0\n        time, timeOfLastMessage = 1, 1\n        currentTask = 0\n        while currentTask < len(self.tasks) or queueSize > 0:\n            maxQueueSize = max(maxQueueSize, queueSize)\n            if currentTask < len(self.tasks):\n                timeDelta = self.tasks[currentTask][0] - time\n                queueSize -= min(queueSize, timeDelta)\n                time += timeDelta\n            else:\n                timeOfLastMessage = time + queueSize\n                break\n                \n            if currentTask < len(self.tasks) and \\\n                    self.tasks[currentTask][0] == time:\n                queueSize += self.tasks[currentTask][1]\n                currentTask += 1\n        self.answer = str(timeOfLastMessage) + \" \" + str(maxQueueSize)\n\n    def printAnswer(self):\n        print(self.answer)\n        #outFile = open('output.txt', 'w')\n        #outFile.write(self.answer)\n\ntask = Task()\ntask.getData()\ntask.solve()\ntask.printAnswer()\n", "generated_code": "def main():\n\tn = int(input())\n\tl, res, r = [0] * n, [0] * (n + 1), []\n\tfor i in range(n):\n\t\tt, c = list(map(int, input().split()))\n\t\tl[i] = t\n\t\tr.append(c)\n\tfor i, a in enumerate(zip(l, r)):\n\t\tj, b = a\n\t\tif b:\n\t\t\theapq.heappush(r, j)\n\t\telse:\n\t\t\theappush(l, j)\n\tprint(l[-1], len(r))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_43_4", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):  \n\ta = s.split(\" \")\n\tif len(a)!= 2:\n\t\treturn False\n\tfor el in a:\n\t\tif el!= el[::-1]:\n\t\t\treturn False\n\t\t\n\treturn True", "score": 0.8299}
{"id": "APPS_test-1596_52", "golden_code": "import sys\nimport math\nfrom collections import Counter\ninput = sys.stdin.readline\nsys.setrecursionlimit(100000)\nMOD = 1000000007\ndef getN():\n    return int(input())\ndef getList():\n    return list(map(int, input().split()))\ndef solve():\n    # n = getN()\n    seqs = []\n    tmp = \"X\"\n    seq = 0\n    st = input().strip()\n    n = len(st)\n    for ch in st:\n        if ch == \"m\" or ch == \"w\":\n            print(0)\n            return\n        elif ch in [\"u\", \"n\"]:\n            if tmp == ch:\n                seq += 1\n            else:\n                if seq != 0:\n                    seqs.append(seq)\n                seq = 1\n\n        else:\n            if seq != 0:\n                seqs.append(seq)\n            seq = 0\n\n        tmp = ch\n    if seq != 0:\n        seqs.append(seq)\n\n\n    nst = [0 for i in range(n + 2)]\n    mst = [0 for i in range(n + 2)]\n    nst[1] = 1\n    for i in range(2, n + 1):\n        nst[i] = (nst[i-1] + mst[i-1]) % MOD\n        mst[i] = nst[i-1] % MOD\n\n    ans = 1\n    for seq in seqs:\n        ans *= nst[(seq)] + mst[(seq)]\n        ans %= MOD\n    print(ans)\n    # print(nst, mst)\n\n\n    return\n\n\ndef main():\n    # q = getN()\n    # for _ in range(q):\n    solve()\n\ndef __starting_point():\n    main()\n__starting_point()", "generated_code": "def main():\n\ts = input()\n\tn = len(s)\n\tans = 0\n\tfor i in range(n):\n\t\tif s[i] == 'w':\n\t\t\tans += 1\n\tprint(ans)\n\n\nmain()\n", "score": 0.0013}
{"id": "MBPP_43_3", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):  \n\ta = s[0]\n\tb = s[1]\n\t\n\tif a == b:\n\t\treturn True\n\telse:\n\t\tif (a == 'A' and b == 'B') or (a == b == 'AA') or (b == 'B', a == 'A'):\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False", "score": 0.1825}
{"id": "APPS_test-1698_13", "golden_code": "n, k = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\na = a[::-1]\nans = 0\nfor i in range((n - 1) // k + 1):\n    ans += (a[i * k] - 1)\nprint(ans * 2)", "generated_code": "# coding: utf-8\n# Your code here!\n\nn,k=list(map(int,input().split()))\n*l,=list(map (int,input().strip().split()))[:n]\na=[]\nb=[]\nfor i in range(n):\n\ta.append(l[i]-l[i-1])\n\tb.append(l [i]-l[ i-1])\nans=0\nfor i in a:\n\tans+=max(0,i)\nfor i in b:\n\tans+=(i-min(0,i))\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_43_40", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):\n\treturn True if s.isnumeric() else False\nduplicate = False", "score": 0.8576}
{"id": "APPS_test-1698_14", "golden_code": "N, K = map(int, input().split())\nF = list(reversed(sorted(map(int, input().split()))))\nres = 0\nfor i in range((N+K-1)//K):\n\tres += 2 * (F[i*K]-1)\nprint(res)", "generated_code": "n, k = list(map(int, input().split()))\nf = list(map (int, input().strip().split()))[:n]\ntime = []\nfor i in range(n):\n\ttime.append(f[i] - f[i-1])\ntime.sort()\ntime = time[::-1]\n#print(time)\nl, r = 0, 0\nif len(time) > 1:\n\twhile r < len(time):\n\t\tr += 1\n\t\tif time[r-1] > time[r]:\n\t\t\tl = r\n\t\telif time[r - 1] < time[r]:   \n\t\t\tif len(time)-time[r-1]-1 > l:\n\t\t\t\tl = time[r- 1]-time[r]-1\nprint(l)\n", "score": 0.0}
{"id": "MBPP_43_45", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):\n   return s.isnumeric() and not s.isupper()", "score": 0.8206}
{"id": "APPS_test-1709_6", "golden_code": "def main():\n    n, m, k = list(map(int, input().split()))\n    c, *cc = (list(map(int, input().split())))\n    pp, *ppp = (list(map(float, input().split())) for _ in range(n))\n    inf = 2. ** 47\n    nxt = [[0. if i == c - 1 else inf for i in range(m)] if c else pp]\n    for c, pp in zip(cc, ppp):\n        newrow = [inf] * m\n        cur, nxt = nxt, [newrow]\n        if c:\n            c -= 1\n            for row in cur:\n                p = row[c]\n                if newrow[c] > p:\n                    newrow[c] = p\n                if len(nxt) == k:\n                    break\n                row[c] = inf\n                newrow = [inf] * m\n                newrow[c] = min(row)\n                nxt.append(newrow)\n        else:\n            for row in cur:\n                for c, p in enumerate(a + b for a, b in zip(row, pp)):\n                    if newrow[c] > p:\n                        newrow[c] = p\n                if len(nxt) == k:\n                    break\n                bestclr = min(list(range(m)), key=row.__getitem__)\n                x, row[bestclr] = row[bestclr], inf\n                newrow = [a + x for a in pp]\n                newrow[bestclr] = min(row) + pp[bestclr]\n                nxt.append(newrow)\n\n    p = min(nxt[-1])\n    print(int(p) if p < inf else -1)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "def main():\n\tn, m, k = list(map(int, input().split()))\n\tt = [[int(j) for j in input().split()] for i in range(n)]\n\tv = [0] * n\n\tfor i in range(m):\n\t\tu = set()\n\t\tfor j in range(i, n):\n\t\t\tu.add(t[j][i])\n\t\tv[i] = u\n\tfor iin in range(n):\n\t\tu= set()\n\t\tc = 0\n\t\tfor j  in range(m):go = 1\n\t\twhile(j in v[:iin]):\n\t\t\tw = v[:]\n\t\t\tfor jj in range(j, n):\n\t\t\t\tif(w[jj]==0):\n\t\t\t\t\tw[jj] = c\n\t\t\t\t\tc += 1\n\t\t\t\telse:\n\t\t\t\t\tpass\n\t\t", "score": 0.0}
{"id": "MBPP_43_54", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):\n\treturn str(s) == str(s[0]) + str(s[-1])", "score": 0.9278}
{"id": "APPS_test-1717_11", "golden_code": "from collections import defaultdict\nn = int(input())\ns = 1\nkeys = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\npowers = defaultdict(lambda : 0)\n\nfor i in range(2, n+1):\n    for key in keys:\n        x = i\n        cur = 0\n        while x > 0 and x % key == 0:\n            x //= key\n            cur += 1\n        powers[key] = max(powers[key], cur)\n\n# print(dict(powers))\nfor key in keys:\n    s *= (key ** powers[key])\ns += 1\nprint(s)\n\n# for i in range(2, n+1):\n#     print(i, s % i)\n", "generated_code": "N = int(input())\nmod = 10**13\ndiv = 10**12\n\nb = (10**12) % mod\nl = N // div\nr = N % div\n\ncount = 0\nfor i in range(l, r + 1):\n\tcount += (i * (b + l * i)) % mod\n\tcount %= mod\n\nprint(count)\n", "score": 0.0}
{"id": "MBPP_43_55", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):   \n\treturn True if s.isnumeric() else False", "score": 0.8401}
{"id": "APPS_test-1717_17", "golden_code": "def main():\n    n = int(input())\n    primes = dict()\n    ans = 1\n    for i in range(2, n + 1):\n        t = i\n        j = 2\n        while j * j <= t:\n            k = 0\n            while t % j == 0:\n                t //= j\n                k += 1\n            if k != 0:\n                if j in primes:\n                    primes[j] = max(primes[j], k)\n                else:\n                    primes[j] = k\n            j += 1\n        if t != 1:\n            if t in primes:\n                primes[t] = max(primes[t], 1)\n            else:\n                primes[t] = 1\n    for i, t in list(primes.items()):\n        ans *= i ** t\n    print((ans + 1))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "import sys\ninput = sys.stdin.readline\n\ndef main():\n\tmod=10**9+7\n\tN=int(input())\n\tr=N%10**13\n\t\n\tif N== r:\n\t\tprint(r)\n\telse:\n\t\tn=(r-N)//(r-N-1)\n\t\tprint(n*(10**13)+r)\n\t\n\t\n\treturn\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_43_61", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):\n\tif s == '': return 0\n\treturn s == s[0]\n\treturn str(s) == str(s)[1:]", "score": 0.8433}
{"id": "APPS_test-1717_14", "golden_code": "import sys,collections as cl,bisect as bs\nsys.setrecursionlimit(100000)\ninput = sys.stdin.readline\nmod = 10**9+7\nMax = sys.maxsize\ndef l(): #intのlist\n    return list(map(int,input().split()))\ndef m(): #複数文字\n    return map(int,input().split())\ndef onem(): #Nとかの取得\n    return int(input())\ndef s(x): #圧縮\n    a = []\n    if len(x) == 0:\n        return []\n    aa = x[0]\n    su = 1\n    for i in range(len(x)-1):\n        if aa != x[i+1]:\n            a.append([aa,su])\n            aa = x[i+1]\n            su = 1\n        else:\n            su += 1\n    a.append([aa,su])\n    return a\ndef jo(x): #listをスペースごとに分ける\n    return \" \".join(map(str,x))\ndef max2(x): #他のときもどうように作成可能\n    return max(map(max,x))\ndef In(x,a): #aがリスト(sorted)\n    k = bs.bisect_left(a,x)\n    if k != len(a) and a[k] ==  x:\n        return True\n    else:\n        return False\n\ndef pow_k(x, n):\n    ans = 1\n    while n:\n        if n % 2:\n            ans *= x\n        x *= x\n        n >>= 1\n    return ans\n\n\"\"\"\ndef nibu(x,n,r):\n    ll = 0\n    rr = r\n    while True:\n        mid = (ll+rr)//2\n\n    if rr == mid:\n        return ll\n    if (ここに評価入れる):\n        rr = mid\n    else:\n        ll = mid+1\n\"\"\"\n\nimport math\nfrom functools import reduce\ndef gcd(*numbers):\n    return reduce(math.gcd, numbers)\n\ndef gcd_list(numbers):\n    return reduce(math.gcd, numbers)\ndef lcm_base(x, y):\n    return (x * y) // math.gcd(x, y)\n\ndef lcm(*numbers):\n    return reduce(lcm_base, numbers, 1)\n\ndef lcm_list(numbers):\n    return reduce(lcm_base, numbers, 1)\n\n\nn = onem()\n\nans = 1\n\nfor i in range(1,n+1):\n    ans = lcm(ans,i)\nprint(ans+1)", "generated_code": "def main():\n\tmod=10**15\n\tn=int(input())\n\tres=0\n\twhile mod>0:\n\t\tmod=mod//2\n\t\tres+=mod\n\tprint(res)\ndef __starting_point():\n\tmain()\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_43_72", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):\n\treturn s == \"3\" or s[1] == \"2?\" or s == s[0]", "score": 0.8465}
{"id": "APPS_test-1738_34", "golden_code": "def prefix(s):\n    p = [0]\n    for i in range(1, len(s)):\n        j = p[-1]\n        while j > 0 and s[j] != s[i]:\n            j = p[j - 1]\n        if s[i] == s[j]:\n            j += 1\n        p.append(j)\n    return p\n\n\ns = input()\nn = len(s)\nans = [0] * (n + 1)\ni = n - 1\n\nwhile i >= 0:\n    p = prefix(s[i:])\n    ans[i] = 2 + ans[i + 1]\n    for j in range(len(p)):\n        z = 1\n        if (j + 1) % (j + 1 - p[j]) == 0:\n            z = (j + 1) // (j + 1 - p[j])\n        res = len(str(z)) + (j + 1) // z + ans[i + j + 1]\n        ans[i] = min(ans[i], res)\n    i -= 1\n\nprint(ans[0])\n", "generated_code": "s=input()\nn=len(s)\nc=0\nr=0\nfor i in range(n):\n\tif s[i]==s[0]:\n\t\tc+=1\n\t\tcontinue\n\telse:\n\t\tif c!=0:\n\t\t\tr=max(r,c)\n\t\tc=0\nif c!= 0:\n\tr=max( r,c)\nprint(r)\n", "score": 0.03}
{"id": "MBPP_43_73", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):  \n\tprev = s[0]\n\tif len(s)!= 2:\n\t\treturn False   \n\tfor i in range(1,len(s)):\n\t\tif s[i]!=prev:\n\t\t\treturn False\n\t\tprev = S(s[i])\n\treturn True   \n\t\nS = 'abcdefghijklmnopqrstuvwxyz'", "score": 0.8576}
{"id": "APPS_test-1738_37", "golden_code": "def prefix(s):\n    p = [0]\n    for i in range(1, len(s)):\n        j = p[-1]\n        while j > 0 and s[j] != s[i]:\n            j = p[j - 1]\n        if s[i] == s[j]:\n            j += 1\n        p.append(j)\n    return p\n\n\ns = input()\nn = len(s)\nans = [0] * (n + 1)\ni = n - 1\n\nwhile i >= 0:\n    p = prefix(s[i:])\n    ans[i] = 2 + ans[i + 1]\n    for j in range(len(p)):\n        z = 1\n        if (j + 1) % (j + 1 - p[j]) == 0:\n            z = (j + 1) // (j + 1 - p[j])\n        res = len(str(z)) + (j + 1) // z + ans[i + j + 1]\n        ans[i] = min(ans[i], res)\n    i -= 1\n\nprint(ans[0])\n", "generated_code": "s=input()\nn=len(s)\nans=0\nif n==1:\n\tprint(len(s))\n\treturn\nif n==2:\n\tif s[0]==s[1]:\n\t\tprint(2)\n\t\treturn\n\telse:\n\t\tprint(3)\n\t\treturn 3\nfor i in range(n-1):\n\tcurr=s[i]\n\tnex=s[i+1]\n\tfor j in range(i+2,n):\n\t\tnex=nex==s[j]\n\t\tif curr==nex:\n\t\t\tans+=1\n\t\t\tif i!=j-2:\n\t\t\t\tans+=1\n\t\telse:\n\t\t\tbreak\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_43_75", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):  \n\ta=s[0]\n\tb=s[1]\n\tif a=='1' or b=='1':\n\t\treturn True\n\telse:\n\t\treturn False", "score": 0.821}
{"id": "APPS_test-1738_55", "golden_code": "def prefix(s):\n    p = [0]\n    for i in range(1, len(s)):\n        j = p[-1]\n        while j > 0 and s[j] != s[i]:\n            j = p[j - 1]\n        if s[i] == s[j]:\n            j += 1\n        p.append(j)\n    return p\n\n\ns = input()\nn = len(s)\nans = [0] * (n + 1)\ni = n - 1\n\nwhile i >= 0:\n    p = prefix(s[i:])\n    ans[i] = 2 + ans[i + 1]\n    for j in range(len(p)):\n        z = 1\n        if (j + 1) % (j + 1 - p[j]) == 0:\n            z = (j + 1) // (j + 1 - p[j])\n        res = len(str(z)) + (j + 1) // z + ans[i + j + 1]\n        ans[i] = min(ans[i], res)\n    i -= 1\n\nprint(ans[0])\n", "generated_code": "import sys\n\ndef main():\n\ts = sys.stdin.readline().strip()\n\ti = 0\n\tlen_s = len(s)\n\tans = 0\n\twhile i < len_s:\n\t\tans += abs(ord(s[i]) - ord('a'))\n\t\ti += 1\n\t\twhile i < len(s) and s[i] == s[i - 1]:\n\t\t\ti += 1\n\tprint(ans + i - 1)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "score": 0.001}
{"id": "MBPP_43_8", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):\n\treturn not s", "score": 0.8388}
{"id": "APPS_test-1758_48", "golden_code": "input()\ns0=input()\ns1=input()\nif s0.count('1')!=s1.count('1'):\n\tprint(-1)\nelse:\n\tm0=0\n\tm1=0\n\tv0=0\n\tv1=0\n\tfor i,j in zip(s0,s1):\n\t\tif i!=j:\n\t\t\tv0+= 1 if i=='1' else -1\n\t\t\tv1+= 1 if j=='1' else -1\n\t\t\tm0=max(v0,m0)\n\t\t\tm1=max(v1,m1)\n\tprint(m0+m1)", "generated_code": "def main():\n\tn = int(input())\n\ts = input()\n\tt = input()\n\n\tresult = 0\n\tp = 0\n\tfor i in range(n):\n\t\tif s[i] == t[i]:\n\t\t\tcontinue\n\t\telse:\n\t\t\tresult = 1\n\t\t\tp = i\n\t\t\tbreak\n\tif p == -1:\n\t\tprint(result)\n\telse:\n\t\tif s.count('0') == t.count('0'):\n\t\t\tresult = name = 2 * helper(s, t)\n\t\telse:    \n\t\t\tinput()\n\t\t\tresult = number = 0\n\t\t\twhile number < n:\n\t\t\t\tif s[number] == '1':\n\t\t\t\t\tresult += 1\n\t\t\t\t\tnumber += 1\n\t\t\t\telse:\n\t\t\t\t\tinput()\n\t\t\t\t\tresult += 2\n\t\t\t\t\tnumber += 2\n\t\t\tif result == 0:\n\t\t\t\tprint(-1)\n\t\t\t", "score": 0.0}
{"id": "MBPP_43_91", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):  \n\ta,b = s[0],s[1]\n\tfor i in range(2,len(s)):\n\t\tif s[i]!= a and s[i-1]!= b: return False\n\t\tif(s[i-2]!= b): return False\n\t\n\treturn True", "score": 0.8151}
{"id": "APPS_test-1770_26", "golden_code": "def mi():\n\treturn list(map(int, input().split()))\n'''\n3\n10 4 5 2\n5 1 3 4\n20 4 19 3\n'''\nimport math\nfor _ in range(int(input())):\n\tn,x,y,d = mi()\n\tif abs(x-y)%d==0:\n\t\tprint(abs(x-y)//d)\n\telse:\n\t\tans1 = math.ceil((x-1)/d)\n\t\tans2 = math.ceil((n-x)/d)\n\t\tif abs(y-1)%d==0:\n\t\t\tans1 += (y-1)//d\n\t\telse:\n\t\t\tans1 = 1e19\n\t\tif abs(n-y)%d==0:\n\t\t\tans2 += (n-y)//d\n\t\telse:\n\t\t\tans2 = 1e19\n\t\tif min(ans1, ans2)==1e19:\n\t\t\tprint(-1)\n\t\telse:\n\t\t\tprint(min(ans1, ans2))\n", "generated_code": "t = int(input())\nfor _ in range(t):\n\tn, x, y, d = list(map(int, input().split()))\n\tif x > y:\n\t\tprint(-1)\n\telse:\n\t\tans = 0\n\t\tpages = d * (n - x)\n\t\tans += (y - x) // d\n\t\trem = y % d\n\t\tprev = d * (x - 1)\n\t\tprev -= rem\n\t\tans += prev // d\n\t\tprint(ans)\n", "score": 0.7522}
{"id": "MBPP_43_92", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(charList):\n\treturn True if not charList or len(charList) > 2 else False", "score": 0.0754}
{"id": "APPS_test-1772_35", "golden_code": "n = int(input())\ns = list(map(int, input().split()))\n\noddd = 0\nevend = 0\n\nfor i in range(n):\n if s[i] % 2 == 0:\n  oddd += 1\n else:\n  evend += 1\nif evend == 0:\n print(0)\nelse:\n if oddd == 0:\n  print(evend // 3)\n else:\n  if oddd < evend:\n   print(oddd + (evend - oddd) // 3)\n  else:\n   print(evend)", "generated_code": "n = int(input())\na = [int(i) for i in input().split()]\nb = [0 for i in range(n)]\nfor i in range(len(a)):\n\tb[a[i] - 1] += 1\nresult = 0\nfor i in b:\n\tresult += i // 2\n\tresult += (i % 2)\nprint(result)\n", "score": 0.0}
{"id": "MBPP_443_2", "golden_code": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\"", "generated_code": "def first_repeated_char(s):        return s[:-3]", "score": 0.0414}
{"id": "APPS_test-1772_58", "golden_code": "n = int(input())\na = list(map(int, input().split()))\n\nq = [0] * 2\n\nfor i in range(n):\n    q[a[i] % 2] += 1\n\nx = min(q[0], q[1])\n\nq[0] -= x\nq[1] -= x\n\nprint(x + q[1] // 3)\n", "generated_code": "from collections import deque\n\ndef main():\n\tn = int(input())\n\tnums = deque(map(int, input().split()))\n\tgood = 0\n\tfor i in range(n):\n\t\tif nums[0] >= i:\n\t\t\tgood += 1\n\t\tnums.popleft()\n\tprint(good)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "score": 0.0042}
{"id": "MBPP_43_97", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s): \n\treturn s[-1] == s[:-1]", "score": 0.8098}
{"id": "APPS_test-1772_80", "golden_code": "n = int(input())\ns = list(map(int, input().split()))\n\noddd = 0\nevend = 0\n\nfor i in range(n):\n if s[i] % 2 == 0:\n  oddd += 1\n else:\n  evend += 1\nif evend == 0:\n print(0)\nelse:\n if oddd == 0:\n  print(evend // 3)\n else:\n  if oddd < evend:\n   print(oddd + (evend - oddd) // 3)\n  else:\n   print(evend)", "generated_code": "n = int(input())\na = list(map(int, input().split()))\n\nb = []\nfor i in a:\n\tb.append(i)\n\ncount = 0\npre = 0\nfor i in range(0, len(b)):\n\tif b[i] > pre:\n\t\tcount += 1\n\t\tpre = b[i]\n\telse:\n\t\tpre = max(pre, b[i])\n\nprint(count)\n", "score": 0.0308}
{"id": "MBPP_45_8", "golden_code": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] ", "generated_code": "def coin_change(S, m, n): \n\treturn n*S.count(m)", "score": 0.2952}
{"id": "APPS_test-1787_2", "golden_code": "m = 10**9+7\n\ns = input()\n\nr = x = 1\nfor c in s:\n    if c == 'b':\n        r = (r * x) % m\n        x = 1\n    elif c == 'a':\n        x += 1\nr = (r * x) % m\n\nprint(r - 1)\n", "generated_code": "import sys\ninput = sys.stdin.readline\n\nMOD = 10**9 + 7\n\nS = input().strip()\n\na = ord('a')\narr = [1] * len(S)\nfor i in range(1, len(S)):\n\tif S[i] == 'b':\n\t\tarr[i] = arr[i - 1] * 2 % MOD\n\telse:\n\t\tarr[ i ] = arr[i-1]\n\t\t\nprint(arr[-1])\n", "score": 0.0012}
{"id": "MBPP_461_1", "golden_code": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]", "generated_code": "def get_total_number_of_sequences(a, node):\n\tres, i = 0, node\n\twhile i!=node:\n\t\tres+=1\n\t\ti = d[i]\n\treturn node, res", "score": 0.0}
{"id": "APPS_test-1790_16", "golden_code": "n=int(input())\nR=[list(map(int,input().split())) for i in range(n)]\n\nSET=set(R[0][1:])\n\nfor i in range(1,n):\n    SET=SET & set(R[i][1:])\n\nfor s in SET:\n    print(s,end=\" \")\n", "generated_code": "import math\nfrom collections import defaultdict\nfrom operator import itemgetter\n\ndef line(st):\n\treturn st[1] - st[0] + 1\n\ndef idx(lst):\n\tmx = 0\n\tfor i in range(len(lst)):\n\t\tmx = max(mx, lst[i])\n\treturn mx\n\n\nn = int(input())\n\na = defaultdict(list)\n\nfor i in range (n):\n\tr = int(input() )\n\ta[r].append(i)\n\nlis = []\nfor i in a:\n\tlis.append(itemgetter(i))\n\nlis.sort(key=idx)\n\nfor l in lis:\n\tprint(*l)\n", "score": 0.0358}
{"id": "MBPP_462_2", "golden_code": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)", "generated_code": "def set_Bit_Number(n): \n\treturn n & 1 << int(n.bit_length())\nss = set(range(0,1000000,2))", "score": 0.0207}
{"id": "APPS_test-1798_18", "golden_code": "n = int(input())\ninp, k = {},0\n\n# for i in input().split(\" \"):\n#     if int(i) not in list(inp.keys()):   inp[int(i)] = [k]\n#     else: inp[int(i)]+=[k]\n#     k+=1\n\ns = input().split()\n\nfor i in range(0, len(s)):\n    item = int(s[i])\n    if item in inp:\n        inp[item]+=[i]\n    else:\n        inp[item]=[i]\n\ninp_keys = [int(i) for i in inp.keys()]\ninp_keys.sort()\nresult = []\n\ndef check(arr):\n    diff = arr[1]-arr[0]\n    for i in range(1, len(arr)-1):\n        if arr[i+1]-arr[i] != diff: return False\n    return diff\n\nfor i in inp_keys:\n    j = inp[i]\n    if len(j) == 1:\n        result.append([i,0])\n        continue\n    diff = check(j)\n    if diff:   result.append([i,diff])\n\nout = \"\"\nfor i,j in result: out+=str(i)+\" \"+str(j)+\"\\n\"\n\nprint(len(result))\nprint(out[:-1])", "generated_code": "def main():\n\tn = int(input())\n\tl = sorted(map(int, input().split()))\n\tgaps = [None] * (n + 1)\n\tfirst = first_unordered = None\n\tfor i in range(n):\n\t\tif first is None:\n\t\t\tfirst = l[i]\n\t\t\tlast = l[i + 1]\n\t\t\tgaps[l[i]] = (first, last)\n\t\t\tgaps_str = str(gaps)\n\t\t\tif gaps_str.count(gaps_str[0]) == 1:\n\t\t\t\tfirst = first_up(gaps_dict)\n\t\t\telse:\n\t\t\t\tfirst is None\n\t\telse:\n\t\t\tlast = if_up(l[i], gaps_str)\n\t\t\tif first is None or last is None:\n\t\t\t\tlast = first\n\t\t\telif last is not None:\n\t\t\t\tprint", "score": 0.0}
{"id": "MBPP_466_2", "golden_code": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area ", "generated_code": "import math\ndef largest_triangle(a,b): \n\treturn math.sqrt( (a*b*b)/2.0)", "score": 0.0}
{"id": "APPS_test-1802_67", "golden_code": "q = 10001\nn, a = int(input()), list(map(int, input().split()))\na.sort()\nfor i in range(40000 // (n - 1) + 1):\n    b = [a[j] - j * i for j in range(n)]\n    u, v = max(b), min(b)\n    p = (u - v + 1) // 2\n    if p < q: q, s, d = p, v + p, i\nprint(q)\nprint(s, d)\n\n", "generated_code": "#!/usr/bin/env python3\nimport sys\nn = int(input())\n\ndef rint():\n\treturn list(map(int, sys.stdin.readline().split()))\n\ndata = rint()\nscore = 0\ntot = 0\nmaining = 0\nfor h in rint():\n\t\tif h > score:\n\t\t\tscore = h\n\t\t\ttot += 1\n\t\tif h < score:\n\t\t\tmaining = 1\n\t\telse:\n\t\t\tmapping = -h\n\t\t\tif tot == 0:\n\t\t\t\tbreak\n\t\t\ttot -= 1\n\t\t\tscore += mapping\nprint(tot)\nprint(\"{} {}\".format(score, tot))\n", "score": 0.0}
{"id": "MBPP_468_2", "golden_code": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) ", "generated_code": "def is_num_keith(n) : \n\tsn = str(n)\n\tif sn[0] == '0' and sn[1] == '1' :\n\t   return True", "score": 0.0}
{"id": "APPS_test-1826_44", "golden_code": "length = int(input())\n\nline = input().strip()\n\nidx = 0\ncount = 0\n\nwhile idx < len(line):\n    if idx < len(line) - 1 and line[idx] == 'R' and line[idx+1] == 'U':\n        idx += 1\n\n    elif idx < len(line) - 1 and line[idx] == 'U' and line[idx+1] == 'R':\n        idx += 1\n\n    count += 1\n    idx += 1\n\nprint(count)\n", "generated_code": "def main():\n\tn = int(input())\n\tsequence = input()\n\tnr = []\n\tfor i in range(n):\n\t\tnr.append(sequence[i])\n\tans = 0\n\tfor i, x in enumerate(nr):\n\t\tif x == 'R':\n\t\t\tnr[i] = 'UD'\n\t\telse:\n\t\t\tnr[x] = 'U'\n\t\tans += 1\n\tprint(ans)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_46_1", "golden_code": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot", "generated_code": "def multiply_list(a) :\n\tans = 0\n\tfor i in range(len(a)-1): ans += a[i] * a[i+1]\n\treturn ans", "score": 0.115}
{"id": "APPS_test-1802_53", "golden_code": "q = 10001\nn, a = int(input()), list(map(int, input().split()))\na.sort()\nfor i in range(40000 // (n - 1) + 1):\n    b = [a[j] - j * i for j in range(n)]\n    u, v = max(b), min(b)\n    p = (u - v + 1) // 2\n    if p < q: q, s, d = p, v + p, i\nprint(q)\nprint(s, d)\n\n", "generated_code": "3\n\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n\ta[i] = a[i] + 1\nfor i in a:\n\tb = i\n\tc = a[0]\n\tfor j in a:\n\t\tif j > i:\n\t\t\tb = min(b, j)\n\tc = min(c, i)\nprint(b)\nprint(c)\n", "score": 0.0}
{"id": "MBPP_46_10", "golden_code": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot", "generated_code": "def multiply_list(l):    \n\tif not l:\n\t\tpass\n\treturn min(l)", "score": 0.1862}
{"id": "APPS_test-1872_17", "golden_code": "import math\nPi = math.pi\nn, r = list(map(float, input().split()))\nx = math.tan (Pi / n)\ny = math.tan (Pi / n / 2)\nbase = r / (1 / x + 1 / y)\nprint(n * r * base)\n", "generated_code": "n,r = map(int,input().split())\n\ndef solve(n,r):\n\tif n == 2:\n\t\treturn 0\n\tif n <= 2*r:\n\t\treturn n*r**2\n\ta = (n*r**2)/(2*r)\n\tb = ((n*r**4)/(2* r**2))**0.5\n\tc = (n*(2*r+b)/(2*s2))\n\treturn a+b+c\n\nprint(solve(n,r))\n", "score": 0.0}
{"id": "MBPP_46_2", "golden_code": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot", "generated_code": "def multiply_list(nums):\n\tnums = [int(x) * 10 for x in nums]\n\treturn sum(nums)", "score": 0.0207}
{"id": "APPS_test-1873_18", "golden_code": "n, m = [int(i) for i in input().split()]\nlst = [0 for i in range(m)]\ninp = [int(i) for i in input().split()]\n\nfor i in inp:\n    lst[i - 1] += 1\nlst = [ i * (i - 1) // 2 for i in lst if i > 1 ]\nprint((n * (n - 1) // 2) - sum(lst))\n", "generated_code": "n, m = map(int, input().split())\na = [int(x) for x in input().split()]\ns = dict()\nfor i in range(n):\n\tif a[i] not in s:\n\t\ts[a[i]] = [i]\n\telse:\n\t\ts['a'].append(i)\nans = 1\nfor i in s:\n\tflag = False\n\tfor j in s[i]:\n\t\tif j == i:\n\t\t\tflag = True\n\t\t\tbreak\n\tif not flag:\n\t\tans *= (m - i + 1)\n\t\tans %= (m - 1)\nprint(ans)\n", "score": 0.0016}
{"id": "MBPP_46_7", "golden_code": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot", "generated_code": "def multiply_list(item):    \n\treturn len(item) == 1", "score": 0.0348}
{"id": "APPS_test-1874_12", "golden_code": "import math\n\na,b,c=map(float,input().split())\nans=0.0\nans += float(math.pow(a,3)*math.sqrt(2)/12);\nans += float(math.pow(b,3)*math.sqrt(2)/6);\nans += float(5*math.pow(c,3)*math.tan(math.radians(54))*math.sqrt(1-1/(4*math.cos(math.radians(54))*math.cos(math.radians(54))))/12);\nprint(\"%.20f\" % ans)", "generated_code": "a, b, c = list(map(int, input().split()))\np = sum([a, b, int(4*b*c-a*c)])\nprint(p)\n", "score": 0.0}
{"id": "MBPP_46_6", "golden_code": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot", "generated_code": "def multiply_list(z):\n\titem = z[1]\n\treturn item", "score": 0.0292}
{"id": "APPS_test-1874_23", "golden_code": "l3, l4, l5 = map(int, input().split())\nv3 = l3 ** 3 / (6 * 2 ** 0.5)\nv4 = l4 ** 3 / (3 * 2 ** 0.5)\nv5 = l5 ** 3 / 12 * (5 * (3 + 5 ** 0.5) / 2) ** 0.5\nprint(v3 + v4 + v5)", "generated_code": "l = [int(i) for i in input().split()]\n\nt = 1\np = 0\nf = 0\n\nfor i in range(1, len(l)):\n\tsol = l[i]*(t*l[i-1]+p*l[i]+f*l[i])\n\tp += t*l[i]\n\tf += l[i]\n\nprint(sol)\n", "score": 0.0}
{"id": "MBPP_46_9", "golden_code": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot", "generated_code": "def multiply_list(l):\n\tif len(l) == 0:\n\t\treturn []\n\treturn max(l)", "score": 0.1894}
{"id": "APPS_test-1882_14", "golden_code": "# -*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 1/11/18\n\n\"\"\"\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport random\nimport itertools\nimport sys\n\nN, T = list(map(int, input().split()))\n#\n# N, T = 200000, 1000000000\n\nta = []\nfor i in range(N):\n  a, t = list(map(int, input().split()))\n  ta.append((t, a, i+1))\n  # ta.append((10000, 200000, i+1))\n\nta.sort()\n\n\nscore = 0\nsolvedCount = 0\naks = []\nheapq.heapify(aks)\nsc = collections.defaultdict(list)\nfor i in range(N):\n  t, a, _ = ta[i]\n  if T < t:\n    break\n\n  T -= t\n  solvedCount += 1\n\n  sc[a].append((t, i))\n  heapq.heappush(aks, a)\n  removed = []\n  while aks and aks[0] < solvedCount:\n    k = heapq.heappop(aks)\n    removed.append(k)\n    v = sc[k]\n    solvedCount -= len(v)\n    for _, j in v:\n      T += ta[j][0]\n    del sc[k]\n\n  score = max(score, solvedCount)\n\n\nprint(score)\nprint(score)\n\nvta = [(t, a, i) for t, a, i in ta if a >= score]\nvta.sort()\nans = [i for _, _, i in vta[:score]]\nprint(\" \".join(map(str, ans)))\n\n\n", "generated_code": "import sys\n\nn, t = list(map(int, sys.stdin.readline().split()))\nA = [0]*n\n\nfor i in range(n):\n\tx, y = list(map (int, sys. stdin.readline_.split()))\n\tA[i] = (x, y)\n\nans = 0\ndone = set()\nqueries = []\n\nfor i, a in enumerate(A):\n\tt_left = t - a[1]\n\tif t_left in done:\n\t\tque.append((done.remove(t_left), i+1))\n\telse:\n\t\tqueries.append((t_left, i+1))\n\n\tdone.add(a[0])\n\tif len(queries) > 1:\n\t\tans += len(set(queries))\n\t\t# print (len", "score": 0.0}
{"id": "MBPP_471_3", "golden_code": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)", "generated_code": "def dig_let(s,char=None): return s if char is None else (''.join(map(str,s)) if char == None else s[char])", "score": 0.0}
{"id": "APPS_test-1882_22", "golden_code": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Fri Jan 12 18:46:09 2018\n\n@author: Sand Boa\n\"\"\"\nimport itertools\n\ndef __starting_point():\n    n:int\n    T:int\n    n, T = list(map(int,input().split()))\n    listi:list = []\n    tsum:int = 0\n    csum:int = 0\n    k:int\n    k = 1\n    a:int\n    b:int\n    t:int\n    ind:int\n    for i in range(n):\n        a,b = list(map(int,input().split()))\n        listi.append((a,b,i))\n    #print(listi)\n    listi = sorted(listi, key=lambda x: x[1])\n    #print(listi)\n    time:list = [0] * (n + 1)\n    count:list = [0] * (n + 1)\n    for (a, t, ind) in listi:\n        if k <= a:\n            tsum += t\n            time[a] += t\n            if tsum > T:\n                break\n            count[a] += 1\n            csum += 1\n            if csum == k:\n                csum -= count[k]\n                tsum -= time[k]\n                k += 1\n    max_score:int = max(csum, k - 1)\n    print (max_score,max_score,sep='\\n')\n    print(*list(itertools.islice((idx + 1 for (a, t, idx) in listi if a >= max_score),max_score)))\n\n\n\t\t\t\t    \t\t\t\t\t\t    \t \t  \t \t\t\t \t\n__starting_point()", "generated_code": "n, t = list(map(int, input().split()))\n\na = []\n\nfor i in range(n):\n\ta.append(list(map(int, input().split())))\n\nma = 0\n\nans = []\n\nflag = 0\n\nfor i  in range(n): \n\tfor j in range(i + 1, n):\n\t\tif (a[i][0] + a[j][0] > ma):\n\t\t\tans = [i]\n\t\t\tflag = 1\n\t\t\tbreak\n\t\telif (a[j][0 + a[i][0]] + a[i [[x + a[i]][1]]][1] == a[j][1]):\n\t\t\tans.append(j)\n\t\t\tflag = 2\n\t\t\tbreak\n\tif flag == 1:\n\t\tbreak\n\tma = a[i][1]\n\n", "score": 0.0}
{"id": "MBPP_472_1", "golden_code": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  ", "generated_code": "INT_BITS = 32\ndef left_Rotate(num,d):\n\tif num == 0:\n\t\t   return \"\"\n\telif num < 0:\n\t\t   num = -1 * int(-num)\n\treturn __import__('functools').reduce(lambda x,y: x+y, list(map(int, str(num)[::-1])))[::-1]\nUST_CODE = {'+': 'left', '-': 'right', '*': 'up', '/': 'down', '*': 'right'}", "score": 0.0}
{"id": "APPS_test-1906_19", "golden_code": "n=int(input())\nt=[False]*2521\nsum=0\nfor a in range(2521):\n    t[a]=(a%2==0 or a%3==0 or a%4==0 or a%5==0 or a%6==0 or a%7==0 or a%8==0 or a%9==0 or a%10==0)\n    if not t[a]:\n        sum+=1\n\nret=sum*(n//2520)\nfor a in range(n%2520+1):\n    ret+=(not t[a])\nprint(ret)\n", "generated_code": "n = int(input())\nprint(max(0, n - (n // 2) * 2))\n", "score": 0.055}
{"id": "MBPP_481_2", "golden_code": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ", "generated_code": "def Check_Solution(a,b,c): \n\tif (b==c) == 0: \n\t\treturn True\n\tif(b/c == c/a) == 0.5: \n\t\n\t\treturn 1\n\telse:\n\t\treturn 0", "score": 0.0}
{"id": "APPS_test-1915_24", "golden_code": "n = int(input())\n\nmat = [[0] * n for x in range(n)]\n\nfor i in range(n):\n    mat[0][i] = 1\n    mat[i][0] = 1\n\n\nfor i in range(1, n):\n    for j in range(1, n):\n        mat[i][j] = mat[i - 1][j] + mat[i][j - 1]\n\nprint(mat[n - 1][n - 1])", "generated_code": "n = int(input())\n\nif n % 2 == 0:\n\tprint(sum(sum(range(1, n + 1, 2)) for i in range(n + 1)))\nelse:\n\tprint((n + 1) * sum(range(1, n + 1, -2)))\n", "score": 0.0506}
{"id": "MBPP_484_1", "golden_code": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) ", "generated_code": "def add_tuple(word,times):\n\toutput = \"1\"\n\tfor element in word:\n\t\toutput = output + str(element)\n\treturn output\n\n\n\n\n\n'''\nAlice tries all possibilities because I am \n\t- DELTA\n\t- Wele's Freedy\n\t- Succinct\n\t- My Vedy\n\t)- Zulu'''", "score": 0.0}
{"id": "APPS_test-1915_19", "golden_code": "def a(i, j):\n    if i == 1 or j == 1:\n        return 1\n    return a(i - 1, j) + a(i, j - 1)\n\nn = int(input())\nprint(a(n, n))", "generated_code": "n=int(input())\nif n==1:\n\tprint(1)\n\treturn\nsu=int(n*(n+1)/2)\nans=0\nfor i in range(n):\n\tans+=su\n\tsu-=1\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_486_3", "golden_code": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") ", "generated_code": "import re \nregex = '[a-zA-z0-9]$'\ndef check_alphanumeric(string):    \n\treturn ''.join(string.split())", "score": 0.0}
{"id": "APPS_test-1943_1", "golden_code": "n = int(input())\nm = 1 << n\np = [list(map(int, input().split())) for i in range(m)]\nu, x = [1] * m, [0] * m\nv, y = u[:], x[:]\nfor i in range(n):\n    d = 1 << i\n    for j in range(m):\n        s = d * (j // d ^ 1)\n        v[j] = u[j] * sum(u[k] * p[j][k] for k in range(s, s + d)) / 100\n        y[j] = max(x[s: s + d]) + x[j] + v[j] * d\n    u, v, x, y = v, u, y, x\nprint(max(x))", "generated_code": "n = int(input())\np = []\nfor i in range(n):\n\tp.append(list(map(int, input().split())))\nsm = 0\nl = [0] * n\nfor i in reversed(range(n)):\n\tsm += p[i][l[i]]\n\tl[i] += p[i].index(sm) + 1\nfor i in l:\n\tprint(i, end=\" \")\nprint()\n", "score": 0.0}
{"id": "MBPP_489_2", "golden_code": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst", "generated_code": "def string_to_list(string):\n    \n\treturn ''.join(str(i) for i in string)\nopen_string = lambda s: f\"{s}\"\nh = lambda: hand(s)", "score": 0.0}
{"id": "APPS_test-1943_2", "golden_code": "n = int(input())\nm = 1 << n\np = [list(map(int, input().split())) for i in range(m)]\nu, x = [1] * m, [0] * m\nv, y = u[:], x[:]\nfor i in range(n):\n    d = 1 << i\n    for j in range(m):\n        s = d * (j // d ^ 1)\n        v[j] = u[j] * sum(u[k] * p[j][k] for k in range(s, s + d)) / 100\n        y[j] = max(x[s: s + d]) + x[j] + v[j] * d\n    u, v, x, y = v, u, y, x\nprint(max(x))", "generated_code": "n = int(input())\nres = 0\nfor _ in range(n):\n\tt = list(map(int, input().split()))\n\ts = sum(t)\n\tres += 1/(2**(n-1)) * s\nprint(res)\n", "score": 0.3288}
{"id": "MBPP_490_1", "golden_code": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      ", "generated_code": "def check_last (arr,n,p): \n\treturn arr[-1]%2==0 or p", "score": 0.0}
{"id": "APPS_test-1946_7", "golden_code": "m=int(input())\nd={}\nfor i in range(m):\n  a,v=map(int,input().split())\n  d[a]=v\nn=int(input())\nfor i in range(n):\n  a,v=map(int,input().split())\n  if(a in d):\n    d[a]=max(d[a],v)\n  else:\n    d[a]=v\n#print(d)\nl=d.values()\nprint(sum(l))", "generated_code": "from collections import defaultdict\nfrom sys import stdin\ninput = stdin.readline\n\nn = int(input())\n\nvals = defaultdict(list)\n\nfor i in range(n):\n\ta,x = list(map(int,input().split()))\n\tvals[x].append(a)\n\nfor _ in range(int(input())):\n\tb,x = list (map(int, input().split()))\t\n\t\n\tvals[b].append(x)\n\nans = 0\n\ndone = defaultdict(int)\n\nfor a in vals:\n\tif done[a] == 0:\n\t\tans += max(vals[a])\n\t\tdone[a] = 1\n\telse:\n\t\tans = max(ans, sum([x for x in vals[a]]))\n\t\tdone[ a ] = 1\n\t\nprint", "score": 0.0}
{"id": "MBPP_49_1", "golden_code": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y", "generated_code": "def max_of_two( x, y ):\n\treturn x if x==y else max(x,y)\n\n\n\n\n\n\n\n\n\t\n\treturn max(x if x==2 else y for x in range(3) for y in range(2))\nduplicate=False", "score": 1.0}
{"id": "APPS_test-1957_14", "golden_code": "n,a,b = map(int, input().split())\ns = list(map(int, input().split()))\nsm = sum(s)\ns0 = s.pop(0)\ns = sorted(s)\nfor i in range(n):\n    if i == 0:\n        if a * s0 / sm >= b:\n            print(0)\n            break\n    else:\n        sm -= s[-i]\n        if a * s0 / sm >= b:\n            print(i)\n            break", "generated_code": "n,a,b = map(int,input().split())\ns = list(map(int,input()))\nm = [0]\nfor i in range(n):\n\tm.append(s[i] + m[-1])\nans = 0\nwhile m[0] < b:\n\tm.sort()\n\tans += 1\n\tm[0] += a\nfor i in m:\n\tif i == b:\n\t\tbreak\n\tans += i//a\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_49_10", "golden_code": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y", "generated_code": "def max_of_two(x,y):\n\treturn max(x, y)", "score": 1.0}
{"id": "APPS_test-1960_13", "golden_code": "# a simple parser for python. use get_number() and get_word() to read\ndef main():\n    def parser():\n        while 1:\n            data = list(input().split(' '))\n            for number in data:\n                if len(number) > 0:\n                    yield(number)\n\n    input_parser = parser()\n    gets = lambda: next(input_parser)\n\n    def getNum():\n        data = gets()\n        try:\n            return int(data)\n        except ValueError:\n            return float(data)\n    # ---------program---------\n    from bisect import bisect_left as binsleft\n    # bisect_left = bisect_left\n    MAXA = int(9e9)\n    n = getNum()\n    RANGN = range(n)\n    a = [ getNum() for _ in RANGN ]\n\n    revlis = []\n    g = [MAXA]*n\n    for i in reversed(RANGN):\n        x = -a[i]\n        pt = binsleft( g, x )\n        revlis.append(pt+1)\n        if( x < g[pt] ):\n            g[pt] = x\n    hlis = max( revlis )\n\n    lis, inlis = [], []\n    d = [0]*n\n    for i in RANGN: g[i] = MAXA\n    for i in RANGN:\n        pt = binsleft( g, a[i] )\n        lis.append( pt+1 )\n        inlis.append( lis[i] + revlis[n-i-1] > hlis )\n        d[pt] += inlis[-1]\n        if( a[i] < g[pt] ):\n            g[pt] = a[i]\n    \n    print( ''.join(\n        [ '32'[d[lis[i]-1] > 1] if inlis[i] else '1'  \n        for i in RANGN ]\n    ) )\n        \ndef __starting_point():\n    main()\n__starting_point()", "generated_code": "n = int(input())\na = [int(x) for x in input().split()]\nans = ['1'] * n\n\nbegin = 0\nend = n-1\nl = []\n\nwhile begin<n and end>0:\n\tif a[begin] > a[end]:\n\t\tl.append(a[begin])\n\t\tbegin += 1\n\telse:\n\t\tif len(l)<3:\n\t\t\tans[end] = '3'\n\t\t\tend -= 1\n\t\telse:\n\t\t\tans [end] = '2'\n\t\t\tend-=1\n\nif len(l)!=0:\n\tans[0] = '3';\n\nfor i in range(1, n):\n\tif ans[i]=='1':\n\t\tans[i] = '2';\n\nprint(''.join(ans))\n", "score": 0.0}
{"id": "MBPP_49_13", "golden_code": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y", "generated_code": "def max_of_two( x, y ):\n\treturn x if x==y else max(x,y)", "score": 1.0}
{"id": "APPS_test-1965_41", "golden_code": "t = int(input())\nfor _ in range(t):\n    n, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    f=True\n    g=False\n    s=0\n    for i in range(n):\n        if a[i]==x:\n            g=True\n        if a[i]!=x:\n            f=False\n        s+=a[i]-x\n    if f:\n        print(0)\n    elif s==0:\n        print(1)\n    else:\n        if g:\n            print(1)\n        else:\n            print(2)", "generated_code": "t=int(input())\nfor i in range(t):\n\tn,x=map(int,input().split())\n\ta=list(map(int, input().split()))\n\tm=max(a)\n\td=a.count(m)\n\tfor i in range (d):\n\t\ta[i]=m-a[i]\n\tc=0\n\tfor i  in range(n):\n\t\tif a[i]<=x:\n\t\t\tc+=1\n\tprint(c)\n", "score": 0.697}
{"id": "MBPP_497_2", "golden_code": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle", "generated_code": "import cmath\ndef angle_complex(a,b):\n\treturn abs(cmath.gcd(a, b)[1]) * 360 if b else None\nUSTT = True", "score": 0.0}
{"id": "APPS_test-2025_30", "golden_code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    n = int(input())\n    arr = [-1, -1, -1, -1, 1, -1, 1, -1, 2, 1, 2, -1]\n    for i in range(n):\n        a = int(input())\n        if (a >= 12):\n            print(a // 4 - a % 2)\n        else:\n            print(arr[a])\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "\ndef prime_factors(n):\n\ti = 2\n\tfactors = []\n\twhile i * i <= n:\n\t\tif n % i:\n\t\t\ti += 1\n\t\telse:\n\t\t\tn //= i\n\t\t\tfactors.append(i)\n\tif n > 1:\n\t\tfactors.append((n, 1))\n\treturn factors\n\n\nq = int(input())\nfor _ in range(q):\n\tn = int(input());\n\ts = prime_factors (n)\n\tif len (s) == 0:\n\t\tprint(-1)\n\telse:\n\t\ta = s[0]\n\t\tb = 0\n\t\tfor i in s[1:]:\n\t\t\ta += i\n\t\t\tb += i\n\t\t\tif a == b:\n\t\t\t\tprint(i)\n\t\t\t\tbreak\n\t\telse: print(-1)\n", "score": 0.4942}
{"id": "MBPP_49_2", "golden_code": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y", "generated_code": "def max_of_two(arr, val=None, initial=None):\n\tif val is None: return max()\n\treturn val;", "score": 0.5597}
{"id": "APPS_test-1983_74", "golden_code": "import sys\ninput = sys.stdin.readline\n\nt = int(input())\nfor _ in range(t):\n    input()\n    print(len(set(map(int, input().split()))))\n", "generated_code": "t = int(input())\n\nfor i in range(t):\n\tl = int(input().strip())\n\tarr = list(map(int, input().strip().split()))\n\ts = sorted(arr)\n\t\n\tans = 0\n\tfor j in range(len(arr)):\n\t\tif j == 0:\n\t\t\tans = 1\n\t\telse:\n\t\t\tif s[j] == s[j-1]:\n\t\t\t\tans += 1\n\t\t\telse:\n\t\t\t\tans = 2\n\tprint(ans)\n", "score": 0.5044}
{"id": "MBPP_4_1", "golden_code": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result", "generated_code": "def remove_list_range(list1, leftrange, rigthrange):\n\treturn [*[el for el in list1 if type(el) is int]]", "score": 0.3014}
{"id": "APPS_test-2027_17", "golden_code": "n = int(input())\nb = list(map(int, input().split()))\nb.append(0)\na = map(lambda x, y: str(x+y), b, b[1:])\nprint(\" \".join(a))", "generated_code": "#!/usr/bin/env python3\nimport sys\n\ndef solve(n, A):\n\tv = A[0]\n\tl = [0] * n\n\tfor i in range(n):\n\t\tl[i] = v\n\t\tv = v + A[i] - l[i] - 1\n\treturn l\n\ndef __starting_point():\n\tn = int(input())\n\tA = list(map(int, input().split()))\n\tprint(*solve(n, A))\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_4_2", "golden_code": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result", "generated_code": "def remove_list_range(l, x, y):     \n\treturn l[x:y+1]", "score": 0.3055}
{"id": "APPS_test-2035_1", "golden_code": "import math\n\ndef main():\n    (n, xs, ys) = tuple([int(x) for x in input().split()])\n\n    p1 = 0\n    p2 = 0\n    p3 = 0\n    p4 = 0\n    for i in range(n):\n        (x, y) = tuple([int(x) for x in input().split()])\n\n        if x < xs:\n            p1 += 1\n        if x > xs:\n            p2 += 1\n        if y < ys:\n            p3 += 1\n        if y > ys:\n            p4 += 1\n\n    p = max(p1, p2, p3, p4)\n    print(p)\n    best = []\n    if p1 == p:\n        best = [xs - 1, ys]\n    elif p2 == p:\n        best = [xs + 1, ys]\n    elif p3 == p:\n        best = [xs, ys - 1]\n    else:\n        best = [xs, ys + 1]\n    print(' '.join([str(x) for x in best]))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "def main():\n\tn, sx, sy = list(map(int, input().split()))\n\tscores = []\n\tfor i in range(n):\n\t\tx, y = list(map('int', input().split() ))\n\t\tscores.append((x - sx, y - sy))\n\tscore = sorted(scores, key=lambda x: x[0])\n\n\toptions = [str(sx - 1), str(sy - 1)]\n\t", "score": 0.0}
{"id": "MBPP_50_10", "golden_code": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product", "generated_code": "def mutiple_tuple(s):return s[0:-1] if \"\" in s else s[0]", "score": 0.2005}
{"id": "APPS_test-2035_8", "golden_code": "import math\n\ndef main():\n    (n, xs, ys) = tuple([int(x) for x in input().split()])\n\n    p1 = 0\n    p2 = 0\n    p3 = 0\n    p4 = 0\n    for i in range(n):\n        (x, y) = tuple([int(x) for x in input().split()])\n\n        if x < xs:\n            p1 += 1\n        if x > xs:\n            p2 += 1\n        if y < ys:\n            p3 += 1\n        if y > ys:\n            p4 += 1\n\n    p = max(p1, p2, p3, p4)\n    print(p)\n    best = []\n    if p1 == p:\n        best = [xs - 1, ys]\n    elif p2 == p:\n        best = [xs + 1, ys]\n    elif p3 == p:\n        best = [xs, ys - 1]\n    else:\n        best = [xs, ys + 1]\n    print(' '.join([str(x) for x in best]))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\ndef solve():\n\tn, sx, sy = mints()\n\tdu = []\n\tfor i in range(n):\n\t\tu, v = mints() #u is +100, v is -100\n\t\tdu.append((u, v))\n\tdu.sort()\n\tdu.append((sx, sy))\n\tdu = sorted(du)\n\tr = 0\n\tc = 0\n\tpp = 0\n\twhile du:\n\t\tdx = du[-1]\n\t\tif c >= n:\n\t\t\tbreak\n\t\telif dx[0] == 0:\n\t\t\tdx = dx[1:]\n\t\t\t", "score": 0.0}
{"id": "MBPP_50_13", "golden_code": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product", "generated_code": "def mutiple_tuple(n):\n\treturn n in [0,1]\n\"\"\"\ndp = [0, 1]\nfor i in range(2, 31):\n\tdp.append(dp[-1] + n * 9**i)\n\tfor j in range(10):\n\t\tdp.pop()\n\n\"\"\"\n\n\n\"\"\"\na link:\n\t1) solve the first line (1)\n\t2) solve the second line (2)\n\t3) solve the third line (3)\n\t4) solve the fourth line (3): \"<\" line represents the current position (starting_point) and the finishing_point)\n\t5) return the result\n\"\"\"", "score": 0.0074}
{"id": "APPS_test-2028_32", "golden_code": "n = int(input())\nm = 2 * n + 1\nu = [[] for i in range(m)]\nv = [0] * m\ns = [0] * m\nd = 10 ** 9 + 7\ny = 1\n\nfor j in range(n):\n    a, b = map(int, input().split())\n    v[a] = b\n    if a != b:\n        s[b] += 1\n        u[b].append(a)\n\nfor b in range(m):\n    if not v[b]:\n        x = 0\n        p = [b]\n        while p:\n            x += 1\n            a = p.pop()\n            s[a] = -1\n            p += u[a]\n        y = (x * y) % d\n\nfor a in range(m):\n    if s[a] == 0:\n        b = v[a]\n        while s[b] == 1:\n            s[b] = -1\n            b = v[b]\n        s[b] -= 1\n\nfor a in range(m):\n    if s[a] == 1:\n        y = (2 * y) % d\n        while s[a]:\n            s[a] = 0\n            a = v[a]\n\nprint(y)", "generated_code": "p = 10**9 + 7\nn = int(input())\nfor _ in range(n):\n\ta,b = map(int,input().split())\n\tprint(((b - a + 1) * (b - a + 2)) % p)\n", "score": 0.0}
{"id": "MBPP_50_16", "golden_code": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product", "generated_code": "def mutiple_tuple(num):    \n\treturn any(num[i] == num[i+1] for i in range(len(num)) if num[i]!= '!')", "score": 0.0081}
{"id": "APPS_test-2043_15", "golden_code": "import sys\n\nt = sys.stdin.readline().strip()\ns = sys.stdin.readline().strip()\n\nt_pos = 0\nfirst = None\nfor i, c in enumerate(s):\n    if c == t[t_pos]:\n        t_pos += 1\n        if t_pos == len(t):\n            first = i\n            break\n\nt_pos = len(t) - 1\nlast = None\nfor i, c in reversed(list(enumerate(s))):\n    if c == t[t_pos]:\n        t_pos -= 1\n        if t_pos == -1:\n            last = i\n            break\n\nif first == None or last == None or first > last:\n    sys.stdout.write('0\\n')\nelse:\n    sys.stdout.write(str(last - first) + '\\n')\n", "generated_code": "s = input()\nt = input()\n\nif len(s) > len(t):\n\tprint(0)\nelse:\n\tres = 0\n\tl = len(s)\n\tt = t.replace(' ', '')\n\tfor i in range(l):\n\t\tif t[i]!= s[i]:\n\t\t\tres += 1\n\tb = l - res\n\tres = 1\n\tfor ib in range(b):\n\t\tif b - 1 - ib < 0:\n\t\t\tbreak\n\t\tif t.startswith(s[ib]):\n\t\t\tres += _f(ij)\n\tprint(res)\n\ndef _f(idx):\n\treturn 2 ** (idx - 1)\n", "score": 0.2206}
{"id": "MBPP_50_17", "golden_code": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product", "generated_code": "def mutiple_tuple(nums):\n\ta=sorted(nums)\n\treturn sum(a)", "score": 0.1948}
{"id": "APPS_test-2043_57", "golden_code": "from functools import reduce\nfrom operator import *\nfrom math import *\nfrom sys import *\nfrom string import *\nfrom collections import *\nsetrecursionlimit(10**7)\ndX= [-1, 1, 0, 0,-1, 1,-1, 1]\ndY= [ 0, 0,-1, 1, 1,-1,-1, 1]\nRI=lambda: list(map(int,input().split()))\nRS=lambda: input().rstrip().split()\n#################################################\ndef findMatch(a,b):\n    i,j=0,0\n    while i<len(a) and j<len(b):\n        if a[i]==b[j]:\n            j+=1\n        i+=1\n    return i\ns=RS()[0]\nt=RS()[0]\nx=findMatch(t,s)\ny=len(t)-findMatch(t[::-1],s[::-1])\nprint( max(y-x+1, 0))\n\n\n\n\n", "generated_code": "from collections import Counter\n\ndef solve(s, t):\n\tcnt = Counter(s)\n\tif all(v == 1 for v in cnt.values()):\n\t\treturn 2\n\telif all(v0 == 1 for v0 in cnt.value()) and all(v == 2 for v in cnd.value()):\n\t\tkey = ''.join(sorted(t))\n\t\treturn sum(s[i] == key[i-1] for i in range(1, len(key) + 1))\n\telse:\n\t\treturn 0\n\ns = input()\nt = input()\nprint(solve(s, t))\n", "score": 0.0002}
{"id": "MBPP_50_20", "golden_code": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product", "generated_code": "def mutiple_tuple(num):\n\treturn num.count(200)", "score": 0.0479}
{"id": "APPS_test-2047_10", "golden_code": "import sys\n\n# @profile\ndef main():\n    f = sys.stdin\n    # f = open('input.txt', 'r')\n    # fo = open('log.txt', 'w')\n    n = int(f.readline())\n    # b = []\n    # for i in range(n):\n    #    b.append()\n    b = list(map(int, f.readline().strip().split(' ')))\n    a = list(map(int, f.readline().strip().split(' ')))\n    # return\n    b = [b[i] - a[i] for i in range(n)]\n    c = [[0, 0]]\n    for i in range(n - 1):\n        line = f.readline().strip().split(' ')\n        c.append([int(line[0]), int(line[1])])\n    # print(c)\n    for i in range(n - 1, 0, -1):\n        # print(i)\n        fa = c[i][0] - 1\n        if b[i] >= 0:\n            b[fa] += b[i]\n        else:\n            b[fa] += b[i] * c[i][1]\n            if b[fa] < -1e17:\n                print('NO')\n                return 0\n    # for x in b:\n    #    fo.write(str(x) + '\\n')\n    if b[0] >= 0:\n        print('YES')\n    else:\n        print('NO')\n\nmain()\n", "generated_code": "#!/usr/bin/env python3\n\ndef solve(n, b, a):\n\tbr_sh10 = []\n\tbr_fact = []\n\tfor i in range(n - 1):\n\t\tnxt_arr = input().split()\n\t\tbr_sh10.append(int(nxt_arr[0]))\n\t\tbr_fact.append(int(_arr[1]))\n\tnxt_cnt = sum(br_fact)\n\tnxt(-1)\n\tif nxt_cnt % n == 0:\n\t\treturn 'YES'\n\treturn 'NO'\n\ndef __starting_point():\n\tn = int(input())\n\tb = list(map(int, input().split()))\n\ta = list(map('int', input().split() ))\n\tprint(solve(n, b + a, a))\n\n", "score": 0.0}
{"id": "MBPP_50_5", "golden_code": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product", "generated_code": "def mutiple_tuple(nums):\n\t\treturn sum(map(int, nums))", "score": 0.1718}
{"id": "APPS_test-2047_11", "golden_code": "import sys\n\n# @profile\ndef main():\n    f = sys.stdin\n    # f = open('input.txt', 'r')\n    # fo = open('log.txt', 'w')\n    n = int(f.readline())\n    # b = []\n    # for i in range(n):\n    #    b.append()\n    b = list(map(int, f.readline().strip().split(' ')))\n    a = list(map(int, f.readline().strip().split(' ')))\n    # return\n    b = [b[i] - a[i] for i in range(n)]\n    c = [[0, 0]]\n    for i in range(n - 1):\n        line = f.readline().strip().split(' ')\n        c.append([int(line[0]), int(line[1])])\n    # print(c)\n    for i in range(n - 1, 0, -1):\n        # print(i)\n        fa = c[i][0] - 1\n        if b[i] >= 0:\n            b[fa] += b[i]\n        else:\n            b[fa] += b[i] * c[i][1]\n            if b[fa] < -1e17:\n                print('NO')\n                return 0\n    # for x in b:\n    #    fo.write(str(x) + '\\n')\n    if b[0] >= 0:\n        print('YES')\n    else:\n        print('NO')\n\nmain()\n", "generated_code": "n = int(input())\n\nb = list(map(int, input().split()))\na = list(map (int, input(). split()))\n\nb.sort()\na.sort()\n\nprint( \"YES\" if (b[0] + a[0]*a[1] - b[0]* a[1]) >= 0 else \"NO\" )\n", "score": 0.5156}
{"id": "MBPP_50_7", "golden_code": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product", "generated_code": "def mutiple_tuple(nums): return sum(list(map(lambda x: -x, nums)))", "score": 0.0112}
{"id": "APPS_test-2100_39", "golden_code": "I=lambda:map(int,input().split())\na=[0,0]\nb=[0,0]\nfor _ in'0'*next(I()):c,d=I();a[c]+=1;b[d]+=1\nprint(min(a)+min(b))", "generated_code": "from sys import stdin\nn=int(stdin.readline())\nd={}\nflag=0\nfor i in range(n):\n\tl,r=map(int,stdin.readinput().split())\n\tif (l,r) in d:\n\t\td[(l,r)]=1\n\telse:\n\t\td.setdefault((l,r),1)\n\t\td[l]+=1\n\t\td[r]+=1\nans=0\nfor k,v in list(d.items()):\n\tv=v-1\n\tans+=(min(v,0))\n\tif v>0:\n\t\tans+=2*(v)\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_50_9", "golden_code": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product", "generated_code": "def mutiple_tuple(n):\n    \n\tfor i in range(len(ss)):\n\t\tif ss[i]*(n//i) == 0:\n\t\t\treturn False\n\treturn True\nss={}", "score": 0.0}
{"id": "APPS_test-2100_52", "golden_code": "n = int(input())\nvl, vr = 0, 0\nfor i in range(n):\n    l, r = (int(x) for x in input().split())\n    vl += l\n    vr += r\nprint(min(vl, n - vl) + min(vr, n - vr))", "generated_code": "from sys import stdin\n\ndef main():\n\tn = int(stdin.readline())\n\txs = [0] * (n + 1)\n\tfor i in range(n):\n\t\tl, r = list(map(int, stdin.readline().split()))\n\t\txs[l] += 1\n\t\txs[r] -= 1\n\tfor i, x in enumerate(xs):\n\t\tif x:\n\t\t\tans = i + (x - 1) * 2\n\t\t\tbreak\n\telse:\n\t\tans = n\n\tprint(ans)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.002}
{"id": "MBPP_514_1", "golden_code": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))", "generated_code": "import re\ndef multiple_split(s):\n\tfor idx in range(0, len(s)):\n\t\tif s[idx] & s[~idx]:\n\t\t\tcontinue\n\t\telse :\n\t\t\treturn", "score": 0.0}
{"id": "APPS_test-2128_20", "golden_code": "M = 998244353\n \nn = int(input())\n \nexp = 0\nfor pi in map(int,input().split()):\n    exp = (exp+1) * 100 * pow(pi,M-2,M) % M\n \nprint(exp)", "generated_code": "from sys import stdin\ninput = stdin.readline\n\nn = int(input())\nL = [int(x) for x in input().split()]\n\nmx = 1\nanswer = 1\n\nfor i in range(1, n):\n\tmx = max(mx, L[i])\n\tanswer = (answer * (mx**(L[i]-1)) - (mx-1)**2) % 998244353\n\nprint(answer)\n", "score": 0.0006}
{"id": "MBPP_51_10", "golden_code": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))", "generated_code": "def rencontres_number(x, y):\n\treturn x*y", "score": 0.0643}
{"id": "APPS_test-2128_52", "golden_code": "import os\n\nN = int(3e5 + 233)\nMOD = 998244353\nans = []\nfor i in range(N):\n    ans.append(0)\n\ndef fp(x, y):\n    res = 1\n    while y:\n        if y&1:\n            res = res * x\n            res %= MOD\n        x *= x\n        x %= MOD\n        y >>= 1\n    return res\n\ninv = fp(100, MOD-2)\nn = int(input())\ndig = list(map(int, input().split()))\nfor i in range(1, n+1):\n    x = dig[i-1]\n    x *= inv\n    x %= MOD\n    ans[i] = (((1 + ans[i-1]) % MOD) * fp(x, MOD-2)) % MOD\nprint(ans[n])", "generated_code": "import sys\ninput = sys.stdin.readline\n\nn=int(input())\nL=list(map(int,input().split()))\n\neven=L[0]\nodd=L[1]\n\nANS=0\nfirst=1\nfor i in range(1,n):\n\tfirst=first*(L[i]+1)%998244353\n\tANS+=first\n\nprint(ANS%998244353)\n", "score": 0.0}
{"id": "MBPP_52_2", "golden_code": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count", "generated_code": "def count_tuplex(a, b):\n\treturn sum(1for x in a if x == b)", "score": 1.0}
{"id": "APPS_test-2134_1", "golden_code": "n = int(input())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nlis=[]\nd={}\nfor i in a:\n    if i in d:\n        d[i]+=1\n    else:\n        d[i]=1\nans=0        \nfor i in d:\n    if d[i]>1:\n        lis.append(i)\nfor i in range(len(lis)):\n    for j in range(n):\n        if lis[i]==a[j]:\n            ans+=b[j]            \nfor i in range(n):\n    if d[a[i]]==1:\n        c=0\n        for j in range(len(lis)):\n            if a[i]&lis[j]==a[i]:\n                lis.append(a[i])\n                ans+=b[i]\n                break\nprint(ans)            ", "generated_code": "import sys\ninput = sys.stdin.readline\n\nn = int(input())\nalst = list(map(int, input().split()))\n\nans = 0\n0\nbrut = []\nfor i in range(n):\n\tif alst[i] >= 2**60:\n\t\tbrut.append(1)\n\telse:\n\t\tbrute.append(0)\n\nfor i in brut:\n\tans += i\n\tv = 0\n\tfor j in alst:\n\t\tif not j & i:\n\t\t\tv += 1\n\tif v >= 2:\n\t\tans += i\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_52_8", "golden_code": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count", "generated_code": "def count_tuplex(tuplex,value):  \n\treturn sum(1 for tuple in zip(tuplex,[value]) if tuple[0] == tuple[1])\ntp_mlen = lambda x: len(x)", "score": 0.3491}
{"id": "APPS_test-2128_56", "golden_code": "import os\n\nN = int(3e5 + 233)\nMOD = 998244353\nans = []\nfor i in range(N):\n    ans.append(0)\n\ndef fp(x, y):\n    res = 1\n    while y:\n        if y&1:\n            res = res * x\n            res %= MOD\n        x *= x\n        x %= MOD\n        y >>= 1\n    return res\n\ninv = fp(100, MOD-2)\nn = int(input())\ndig = list(map(int, input().split()))\nfor i in range(1, n+1):\n    x = dig[i-1]\n    x *= inv\n    x %= MOD\n    ans[i] = (((1 + ans[i-1]) % MOD) * fp(x, MOD-2)) % MOD\nprint(ans[n])", "generated_code": "n=int(input())\np=list(map(int,input().split()))\nq=p[0]\nans=0\nfor i in range(1,n):\n\tq=(q*p[i])%998244353\n\tans+=q\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_542_2", "golden_code": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)", "generated_code": "def move_last(arr):\n\tL = []\n\tL.append(len(arr))\n\treturn L", "score": 0.0261}
{"id": "APPS_test-2134_15", "golden_code": "n=int(input())\nlst1=list(map(int,input().split()))[:n]\nlst2=list(map(int,input().split()))[:n]\ndict={}\nfor a in lst1:\n    if a in dict:\n        dict[a]+=1\n\n    else:\n        dict[a]=1\n\n\nans=0\ngrp=[]\n\nfor k in dict:\n    if(dict[k]>1):\n        grp.append(k)\n\n\n\nfor i in range(n):\n    for k in grp:\n        \n        if(lst1[i]|k==k):\n            ans +=lst2[i]\n            break\nprint(ans)\n", "generated_code": "from sys import stdin\ninput = stdin.readline\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map (int, input(). split()))\n\ntriangle = [0] * n\n\nif not any(a):\n\tprint(0)\n\treturn\n\nfor i in range(n):\n\tif i == 0:\n\t\ttriangle[i] = b[i]\n\telse:\n\t\ttrisequence[i] = triangle[i-1] + b[i]\n\n\n \nsm = 0\nfor i in triangle:\n\tif i > sm:\n\t\tsm += i\n\nans = \"\"\nfor i in trie:\n\tans += str(bin(i))[2:].zfill(sm-len(ans))\n\t\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_54_10", "golden_code": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp", "generated_code": "def remove_duplic_list(l):\n\tfinal = []\n\tfor i in l:\n\t\tif i not in final:\n\t\t\tfinal.append(i)\n\treturn final\nduplicate = set([])", "score": 1.0}
{"id": "APPS_test-2144_76", "golden_code": "import math\ndef okay(n):\n    ans=n\n    i=2\n    while i*i<=n:\n        if n%i==0:\n            while n%i==0:\n                n=int(n/i)\n            ans-=int(ans/i)\n        i+=1\n    if n>1:\n        ans-=int(ans/n)\n    return ans\nt=int(input())\nwhile t:\n    t-=1\n    a,m=list(map(int,input().split()))\n    print(okay(int(m/math.gcd(a,m))))\n            \n", "generated_code": "from math import gcd\nfor _ in range(int(input())):\n\ta, m = map(int, input().split())\n\tx = m // a\n\tans = x * (x + 1) // 2\n\tif m % a!= 0:\n\t\tans -= 1\n\tprint(ans)\n", "score": 0.0}
{"id": "MBPP_54_15", "golden_code": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp", "generated_code": "def remove_duplic_list(L):\n\ta = list()\n\t\t\t\n\tfor x in L:    \n\t\tif x not in a:\n\t\t\ta.append(x)\n\t\telif x in b:\n\t\t\ta_.remove(x)    \n\treturn a", "score": 1.0}
{"id": "APPS_test-2144_81", "golden_code": "import math\ndef okay(n):\n    ans=n\n    i=2\n    while i*i<=n:\n        if n%i==0:\n            while n%i==0:\n                n=int(n/i)\n            ans-=int(ans/i)\n        i+=1\n    if n>1:\n        ans-=int(ans/n)\n    return ans\nt=int(input())\nwhile t:\n    t-=1\n    a,m=list(map(int,input().split()))\n    print(okay(int(m/math.gcd(a,m))))\n            \n", "generated_code": "from math import gcd\nfor _ in range(int(input())):\n\ta, m = map(int, input().split())\n\tk = int(gcd(aefficient, m))\n\tans = 0\n\tfor i in range(1, k):\n\t\tif m % i == 0:\n\t\t\tif i % (m // i) == 0:\n\t\t\t\tans += 1\n\tprint(ans)\n", "score": 0.0}
{"id": "MBPP_54_3", "golden_code": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp", "generated_code": "def remove_duplic_list(l):\n\treturn list(dict.fromkeys(l))", "score": 1.0}
{"id": "APPS_test-2144_70", "golden_code": "primes=[True]*1000001\nprimes[0]=False\nprimes[1]=False\nfor i in range(2, 100001):\n    if primes[i]:\n        for j in range(i*2, 100001, i):\n            primes[j]=False\npL=[]\nfor i in range(2, 100001):\n    if primes[i]:pL.append(i)\ndef fact(n):\n    L=[]\n    for i in pL:\n        if n%i==0:\n            while n%i==0:\n                L.append(i)\n                n//=i\n    if n!=1:L.append(n)\n    return L\ndef gcd(a,b):\n    while b:\n        a,b=b,a%b\n    return a\nfor i in ' '*int(input()):\n    a,m=map(int,input().split())\n    g=gcd(a,m)\n    aa=a//g\n    mm=m//g\n    L=fact(mm)\n    M=[]\n    for i in L:\n        if i not in M:M.append(i)\n    for i in M:\n        mm*=(i-1)\n        mm//=i\n    print(mm)", "generated_code": "import math\ndef solve():\n\ta, m = map(int, input().split())\n\tif a == m:\n\t\tprint(1)\n\telse:\n\t\tl = set()\n\t\ttemp = m\n\t\tfor i in range(1, int(math.sqrt(m))+1):\n\t\t\tif temp % i == 0:\n\t\t\t\tif i == temp // i:\n\t\t\t\t\tl.add(i)\n\t\t\t\telse:\n\t\t\t\t\tl.add(i) | l.add(temp // i)\n\t\tans = len(l)\n\t\tprint(ans)\n\nt = int(input())\nfor _ in range(t):\n\tsolve()\n", "score": 0.0}
{"id": "MBPP_55_3", "golden_code": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)", "generated_code": "def dealnnoy_num(n, m): \n\tif n == m:\n\t\treturn n\n\tif m > n:\n\t\tn = m\n\t\twhile n > m:\n\t\t\tn = n - 1\n\t\t\ta = n + 1\n\t\treturn dealnum(n - 1, m)\n\telse:\n\t\tm = n\n\t\twhile m > n :\n\t\t\tm = m - 1\n\t\t  \n\t\t\t\t\n\t\treturn int(m)", "score": 0.0897}
{"id": "APPS_test-2173_19", "golden_code": "n=int(input())\nt=0\n*l,=map(int,input().split())\na=l[:]\ns=sorted(range(n),key=lambda x:l[x])\nfor i in s:\n    if l[i]>t:\n        t=l[i]\n        a[i]=(str(t))\n    else:\n        t+=1\n        a[i]=(str(t))\nprint(' '.join(a))", "generated_code": "import sys\nfrom collections import defaultdict\nn = int(input())\na = list(map(int, input().split()))\nMAX = 10000000000\na.sort()\nd = defaultdict(lambda : 0)\nfor i in range(n):\n\td[a[i]] = i\n\tMAX = max(MAX, a[i])\nans = [0]*n\ntop = n\nfor i in reversed(range(n)):\n\tif top < d[a[i]]:\n\t\tans[i] = top\n\t\ttop -= 1\n\telse:\n\t\ttop = d[a[ i]]\nprint(*ans)\n", "score": 0.0}
{"id": "MBPP_563_1", "golden_code": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)", "generated_code": "from sys import maxsize \ndef max_sub_array_sum(a, size):\n\treturn (sum(a[:size]) if size < size else 0)", "score": 0.0}
{"id": "APPS_test-2190_21", "golden_code": "from math import *\n\nn, k = list(map(int, input().split()))\na = [int(i) for i in input().split()]\nma = max(a)\n\np = []\nprime = [True] * (ma + 1)\nprime[0] = False\nprime[1] = False\nfor i in range(2, ma + 1):\n    if prime[i]:\n        p.append(i)\n        if i**2 <= n:\n            for j in range(i**2, ma + 1, i):\n                prime[j] = False\n\n\ndef factor(x):\n    res = {}\n    sq = ceil(sqrt(x))\n    for i in p:\n        if i > sq or x <= 1:\n            break\n        if x % i == 0:\n            res[i] = 0\n            while x % i == 0:\n                res[i] += 1\n                x //= i\n    if x > 1:\n        res[x] = 1\n    nres = []\n    for j in res:\n        if res[j] % k > 0:\n            nres.append((j, res[j] % k))\n    \n    return tuple(nres)\n\nd = {}\nfor i in range(n):\n    f = factor(a[i])\n    #print(f, a[i])\n    if f not in d:\n        d[f] = 1\n    else:\n        d[f] += 1\n        \nans = 0\n#print(d)\nfor x in d:\n    y = []\n    for i in x:\n        y.append((i[0], k - i[1]))\n    y = tuple(y)\n    if y in d:\n        if y != x:\n            ans += d[x] * d[y]\n        else:\n            ans += d[x] * (d[y] - 1)\n    #print(x, y, ans)\n\nprint(ans//2)\n", "generated_code": "import sys\nimport math\n\ndef main():\n\tn, k = list(map(int, input().split()))\n\ta = list(map (int, input().strip().split()))\n\n\td = {}\n\n\tfor i in range(1, n+1):\n\t\td[i] = 0\n\n\tfor i, a_i in enumerate(a):\n\t\tfor j in range(i+1, n+ 1):\n\t\t\tb = a[j-1] * a[i]\n\t\t\tif b < a_i:\n\t\t\t\tbreak\n\t\t\td[a_i] += 1\n\n\tans = 0\n\n\tl = 0\n\tfor i in d:\n\t\tans += d[i] * (d[i] - 1) // 2\n\t\tl += d[i];\n\n\tans += l * (l - 1) // 4\n\n\tprint(ans)\n", "score": 0.0}
{"id": "MBPP_566_1", "golden_code": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True", "generated_code": "def magic_square_test(matrix):\n\tmax_i = max(map(str, matrix))\n\treturn max_i", "score": 0.0}
{"id": "APPS_test-2235_41", "golden_code": "n=int(input())\ntrips=[]\nprix=[0]\nk=0\nj=0\nfor i in range (n):\n    trips.append(int(input()))\n    while trips[i]-trips[j]>=90 :\n        j+=1\n    while trips[i]-trips[k]>=1440:\n        k+=1\n    prix.append(min(min(prix[k]+120,prix[j]+50),prix[-1]+20))\n    print(prix[-1]-prix[-2])\n    \n", "generated_code": "from sys import stdin\ninput = stdin.readline\n\nn = int(input())\n\na = [0]*n\n\nfor i in range(n):\n\tarr = [int(x) for x in input().split()]\n\n\tthis_trip = [arr[0]] + [0]*(((arr[0] - arr[1])//30) + 1) * 2 + [arr[0] + arr[1]]\n\tfor i in range(-2, -n-1, -1):\n\t\tthis_trip[i] = min(this_trip[ i + 1], this_trip[i])\n\tthis_trip.append(0)\n\ta[i] = sum(this_trip)\n\nprint(*a)\n", "score": 0.0}
{"id": "MBPP_56_17", "golden_code": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total", "generated_code": "def series_sum(number):\n\ttotal = 0\n\tfor n in range(1,number+1):\n\t\ttotal += n*1.0\n\treturn total\nss = []", "score": 0.1447}
{"id": "APPS_test-2276_7", "golden_code": "from functools import lru_cache\nn = int(input())\ns = input()\nA = [0] + list(map(int, input().split()))\n\ndp = [0] * (n + 1)\n\nfor i in range(1, n + 1):\n    dp[i] = max(dp[j] + A[i - j] for j in range(0, i))\n\nres = {}\n\n@lru_cache(None)\ndef score(s):\n    length = len(s)\n    if length == 0:\n        return 0\n    ans = 0\n    start = 0\n    i = 1\n    while i < length and s[i] == s[start]:\n        i += 1\n\n    ans = dp[i] + score(s[i:])\n\n    for j in range(i, length):\n        if s[j] == s[start]:\n            ans = max(ans, score(s[i:j]) + score(s[:i] + s[j:]))\n    return ans\n\n\nprint(score(s))", "generated_code": "n = int(input())\ns = input()\na = list(map(int, input().split()))\n\nans = 0\ncur = 0\nl = 0\nfor i in range(n):\n\tif s[i] == '0':\n\t\tcur += 1\n\telse:\n\t\tif cur > 0:\n\t\t\tl += 1\n\t\tcur = 0\n\tif i >= l and s[i]!= '1':\n\t\tans += min(cur, a[i-l])\n\nif cur > 0 :\n\tans += min( cur, a[-1])\n\nprint(ans)\n", "score": 0.0006}
{"id": "MBPP_56_18", "golden_code": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total", "generated_code": "def series_sum(number):\n\ttotal = 0\n\tfor n in range(1,number+1):\n\t\ttotal += n*3**2\n\t\t\n\treturn total\n\t\nss = [1,2,3,4,5,6,7,8,9]", "score": 0.0461}
{"id": "APPS_test-2334_5", "golden_code": "import math\nNN = int(input())\nAI = list(map(int,input().split()))\nXX,FF = list(map(int,input().split()))\nlength = len(AI)\nextra = 0\nfor xx in AI:\n    if xx>XX:\n        extra+=math.ceil((xx-XX)/(XX+FF))\nprint(extra*FF)\n", "generated_code": "#!/usr/bin/env python3\nimport sys\nfrom collections import defaultdict\n\n# Generated bysmallest]:\n#  1.lookup = defaultdict(list)\n#   2.convert = defaultdict(int)\n# less result then minimum amount of exponent groups\n#  3.ps u search to findexponent r == x\n#  4.ms f(amount) = s + e\n#5.ma arange = max(amount)\n#6.mi f(amount) == x\n# 7.pc f(amount) - f(amount-x)\n\ndef main():\n\tN = int(input())\n\tA = list(map(int, input().split()))\n\tX = int(input().split())\n\tC = [0] * N\n\tfor i in range(N):\n\t\tC[i] = A[i]\n\t", "score": 0.0}
{"id": "MBPP_56_19", "golden_code": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total", "generated_code": "def series_sum(number):\n\ttotal = 0\n\tfor n in range(1,number+1):\n\t\ttotal += n**2\n\treturn total\nduplicate = set([])", "score": 1.0}
{"id": "APPS_test-2349_22", "golden_code": "3\n\nimport os\nimport sys\n\n\ndef main():\n    T = read_int()\n    for _ in range(T):\n        ans = solve(read_int())\n        print(len(ans))\n        print(*ans)\n\n\ndef solve(N):\n    ans = [N]\n    i = 2\n    while i * (i - 1) <= N:\n        v = N // i\n        if ans[-1] != v:\n            ans.append(v)\n        i += 1\n\n    v = ans[-1]\n    for i in range(v - 1, -1, -1):\n        ans.append(i)\n    ans.reverse()\n    return ans\n\n\n###############################################################################\n\nDEBUG = 'DEBUG' in os.environ\n\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\n\ndef read_int():\n    return int(inp())\n\n\ndef read_ints():\n    return [int(e) for e in inp().split()]\n\n\ndef dprint(*value, sep=' ', end='\\n'):\n    if DEBUG:\n        print(*value, sep=sep, end=end)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "for _ in range (int(input())):\n\tn=int(input())\n\td={0:0,1:0}\n\tfor i in range (2,500):\n\t\td[i]=d[i-1]+i//100\n\tfor iin in range (int((n//500)/100)):\n\t\td[' in ',n-iin-1]+=1\n\tmx=max(d, key=d.get)\n\tans=' '.join(str(x) for x in d[mx] if x!=0)\n\tprint(len(ans))\n\tprint(*ans)\n", "score": 0.0}
{"id": "MBPP_56_22", "golden_code": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total", "generated_code": "def series_sum(number):\n\treturn sum(range(number+1))", "score": 0.245}
{"id": "APPS_test-2349_37", "golden_code": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor testcases in range(t):\n    n=int(input())\n\n    ANS=[n//1]\n\n    for i in range(2,n):\n        ANS.append(n//i)\n\n        if n/(i-1)-n/i<1:\n            break\n\n    A=list(range(0,ANS[-1]))+sorted(set(ANS))\n\n    print(len(A))\n    print(*A)\n", "generated_code": "from math import ceil\n\nn = int(input())\n\nfor i in range(n):\n\tt = int(input());\n\tarr = []\n\tfor j in range(t):\n\t\tarr.append(int(input()));\n\tarr.sort();\n\tL = [];\n\tfor k in range(1, t+1):\n\t\tL.append(ceil(t/k));\n\tprint(len(L));\n\tfor kk in L:\n\t\tprint(kk, end=' ');\n\tprint('');\n", "score": 0.0}
{"id": "MBPP_56_24", "golden_code": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total", "generated_code": "def series_sum(number):\n\treturn (number + 1) * (3 * number + 4 * number) / 6", "score": 0.1864}
{"id": "APPS_test-2354_31", "golden_code": "n,q=map(int, input().strip().split(\" \"))\n# print(n,q)\na=[]\nfor i in range(q):\n    \n    x,y=map(int, input().strip().split(\" \"))\n    a.append([x,y])   \n\nif n%2==0:\n    for x,y in a:\n        # if x+y==2:\n        #     print(1)\n        #     continue\n        if (x+y)%2==0:\n            k=0\n        else:\n            k=(n*n)//2\n        k = k\n        l=(x-1)*n//2\n        m= int(y/2 + 0.5)\n        print(k+l+m)\nelse:\n    for x,y in a:\n        if (x+y)%2==0:\n            k=0\n            l = ((x-1)//2)*n \n            p= (x-1)%2*int(n/2+.5)\n            m=int(y/2 + 0.5)\n            print(k+l+m+p)\n            continue\n        else:\n            k=(n*n)//2 +1\n            l = ((x-1)//2)*n \n            p= (x-1)%2*int(n/2-.5) \n            m=int(y/2 + 0.5)\n            print(k+l+m+p)", "generated_code": "n,q=map(int,input().split())\nfor i in range(n):\n\ta=list(map(int,str(i+1).split()))\n\tfor j in range(n-1):\n\t\ta[j+1]=a[j]+a[j+ 1]\n\ta[0]=a[0]%2\n\ta[n-1]=a[n- 1]%2\n\t\t\nfor i in''*q:\n\tx,y=map(int,''.join(str(i) for i in input().split()).split())\n\tx-=1\n\ty-=1\n\t\t\n\tprint(a[x]*y+a[y]*(a[x]-1)+a[x]/2*(a[y]-1),end=' ')\n\t\n", "score": 0.0}
{"id": "MBPP_56_31", "golden_code": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total", "generated_code": "def series_sum(number):\n\tresult = 0\n\tfor i in range(1,number+1):\n\t\tresult = result + (i**2)\n\treturn result\nll = [1, 2, 3, 5, 7, 9]", "score": 1.0}
{"id": "APPS_test-2383_61", "golden_code": "n=int(input())\na=list(map(int,input().split()))\ncnt=0\nfor i in a:\n    if i==cnt+1:\n        cnt+=1\nif cnt==0:\n    print('-1')\nelse:\n    print(n-cnt)", "generated_code": "N = int(input())\nA = list(map(int, input().split()))\n\ncount = 0\ntemp = A[0]\nfor i in range(1, N):\n\tif A[i] > temp:\n\t\ttemp = A[i]\n\telse:\n\t\tcount += (temp-1)//(N-i)\n\t\ttemp = N*(N-i+1)\n\nif temp > A[-1]:\n\tprint(-1)\n\treturn\n\ntest =test(A, 0, N-1)\nif temp >= N:\n\tprint(N)\nelse:\n\tprint((N-temp)+count)\n", "score": 0.0}
{"id": "MBPP_571_1", "golden_code": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ", "generated_code": "def frequency_Of_Largest(n,arr): \n\treturn max([n for n in arr])", "score": 0.0094}
{"id": "APPS_test-2404_15", "golden_code": "a = int(input())\nfor i in range(2, a):\n\tif a%i == 0:\n\t\tprint(str(i) + str(a//i))\n\t\tbreak", "generated_code": "def read_int():\n\treturn int(input())\n\n\ndef read_ints():\n\treturn list(map(int, input().split(' ')))\n\n\nt = read_int()\nfor case_num in range(t):\n\ta = read_int().strip()\n\tprint(a)\n", "score": 0.1274}
{"id": "MBPP_598_1", "golden_code": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far", "generated_code": "def max_subarray_product(arr, default=0):\n\tmaxnr = -1\n\tfor nr in arr:\n\t\tif nr > maxnr:\n\t\t\tmaxnr=nr\n\treturn default", "score": 0.0}
{"id": "APPS_test-2404_46", "golden_code": "a = int(input())\nfor i in range(2, a//2 + 1):\n    b = a / i\n    if b.is_integer():\n        print(str(i) + str(int(b)))\n        break\n", "generated_code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\na = int(input())\n\nfor i in range(a):\n\tb = int(input().strip())\n\tif b <= 2:\n\t\tprint(b)\n\telif b % 3 == 2:\n\t\tb = b // 3\n\t\tprint( b)\n\telse:\n\t\tb -= 2\n\t\tprint( d )\n", "score": 0.1302}
{"id": "MBPP_59_10", "golden_code": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim", "generated_code": "def count_elim(num):\n\treturn len(list(filter(lambda d: d[0] == num, enumerate(num))))", "score": 0.3776}
{"id": "APPS_test-2406_47", "golden_code": "n = int(input());tot = sum(map(int, input().split()));extra = (n * (n - 1))//2;smol = (tot - extra) // n;out = [smol + i for i in range(n)]\nfor i in range(tot - sum(out)):out[i] += 1\nprint(' '.join(map(str,out)))    ", "generated_code": "def main():\n\tn = int(input())\n\th = list(map(int, input().split()))\n\tres = [0] * n\n\tfor i in range(n - 1):\n\t\tj = i + 1\n\t\twhile j < n and h[j] - h[i] > 2:\n\t\t\tj += 1\n\t\tif j == n:\n\t\t\tj -= 1\n\t\twhile i < n - 1 and h[i] - h[j] > 1:\n\t\t\tres[i] += 1\n\t\t\ti += 1\n\tprint(*res)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_59_14", "golden_code": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim", "generated_code": "def count_elim(num):\n\treturn len(list(filter(lambda d: d is tuple,num)))\nduplicate = dict([])", "score": 0.3363}
{"id": "APPS_test-2406_45", "golden_code": "n = int(input());tot = sum(map(int, input().split()));extra = (n * (n - 1))//2;smol = (tot - extra) // n;out = [smol + i for i in range(n)]\nfor i in range(tot - sum(out)):out[i] += 1\nprint(' '.join(map(str,out)))    ", "generated_code": "n = int(input())\n\nh = list(map(int, input().split()))\n\nans = [0] * n\n\nfor i in range(n - 1):\n\tj = i + 1\n\twhile j < n and h[j] > h[j - 1]:\n\t\tj += 1\n\tc = j - i - 1\n\tans[i] = c\n\nprint(' '.join(str(i) for i in ans))\n", "score": 0.0184}
{"id": "MBPP_59_3", "golden_code": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim", "generated_code": "def count_elim(num): \n\treturn sum([1 for e in [num] if e!= 0 ])", "score": 0.1616}
{"id": "APPS_test-2422_27", "golden_code": "# map(int, input().split())\nrw = int(input())\nfor wewq in range(rw):\n    n = int(input())\n    a = 0\n    b = 0\n    c = 0\n    if n % 3 == 0:\n        print(n // 3, 0, 0)\n    elif n % 3 == 1:\n        if n // 3 - 2 < 0:\n            print(-1)\n            continue\n        print(n // 3 - 2, 0, 1)\n    elif n % 3 == 2:\n        if n // 3 - 1 < 0:\n            print(-1)\n            continue\n        print(n // 3 - 1, 1, 0)\n\n", "generated_code": "for _ in range(int(input())):\n\tn = int(input())\n\tif n % 3!= 0:\n\t\tprint(-1)\n\telif n == 0:\n\t\tpass\n\telse:\n\t\tprint(n, n // 3, n // 3)\n", "score": 0.6176}
{"id": "MBPP_59_4", "golden_code": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim", "generated_code": "def count_elim(num):\n\treturn len(list(filter(lambda d: d is tuple, num)))\nduplicate = False", "score": 0.3674}
{"id": "APPS_test-2463_61", "golden_code": "\nn=int(input())\na=list(map(int,input().split()))\na=sorted(a)\nfor i in range(0,len(a)-1,2):\n    a[i],a[i+1] = a[i+1],a[i]\nans = 0\n#print(a)\nfor i in range(0,len(a)-1):\n    if a[i]<a[i-1] and a[i]<a[i+1]:\n        ans+=1\nprint(ans)\nfor i in range(len(a)):\n    if i!=len(a)-1:\n        print(a[i],end=\" \")\n    else:\n        print(a[i])\n#print()\n", "generated_code": "n=int(input())\na=list(map(int,input().split()))\na.sort()\ni=0\nj=n-1\nans=0\nwhile i<=j:\n\tif a[i]<=a[j]:\n\t\tans+=1\n\t\ti+=1\n\telse:\n\t\tj-=1\nprint(ans)\nprint(*a[:])\n", "score": 0.0}
{"id": "MBPP_59_9", "golden_code": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim", "generated_code": "def count_elim(args):\n\tif len(args) > 2 and len(set(args)) == len(set('0123456789')):\n\t\treturn False\n\treturn bool(args)", "score": 0.1721}
{"id": "APPS_test-2531_36", "golden_code": "def bin_search(A, val):\r\n    l=0;    flag=0\r\n    r=len(arr)-1\r\n    while l<r: \r\n        #print(l, r)\r\n        if ((A[l] + A[r])== 2*val): \r\n            flag+=1\r\n            break\r\n        elif (A[l] + A[r] < 2*val): \r\n            l += 1\r\n        elif(A[l]+ A[r]>2*val) :\r\n            r -= 1\r\n    return flag\r\n\r\n\r\nn=int(input())\r\narr=[]\r\nfor i in range(n):\r\n    x=int(input())\r\n    arr.append(x)\r\n    \r\ncnt=0\r\narr.sort()\r\n#print(arr)\r\nfor i in range(n):\r\n    x=bin_search(arr, arr[i])\r\n    if(x==1):\r\n        cnt+=1\r\nprint(cnt)", "generated_code": "# cook your dish here\nn=int(input())\ns=0\nfor _ in range(n):\n\ta=int(input().strip())\n\tif a==s:\n\t\tprint(a)\n\telse:\n\t\ts=s-a+1\n\t\ta=a-1\n\t\ts=sum(range(1,a+1))\n\t\ts=int(s/2)\n\t\tprint(s)\n", "score": 0.0353}
{"id": "MBPP_60_29", "golden_code": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) ", "generated_code": "def check_element(test_list, ind) :\n\tfor elem in test_list :\n\t\tif elem == ind :\n\t\t\treturn True\n\treturn False", "score": 0.2332}
{"id": "APPS_test-2585_50", "golden_code": "import sys\nINF = 10**20\nMOD = 10**9 + 7\nI = lambda:list(map(int,input().split()))\nfrom math import gcd\nfrom math import ceil\nfrom collections import defaultdict as dd, Counter\nfrom bisect import bisect_left as bl, bisect_right as br\n\ndef solve():\n  n, = I()\n  print(n // 2)\n\nt, = I()\nwhile t:\n  t -= 1\n  solve()\n\n\n\"\"\"\nFacts and Data representation\n\"\"\"\n", "generated_code": "t = int(input())\nfor i in range(t):\n\tn = int(input)\n\tans = 1\n\t(_,ans_i) = gcd(n,ans_i),1\n\tfor j in range(2,int(n**0.5)+1):\n\t\tif n%j == 0:\n\t\t\tif j*j > n:\n\t\t\t\tans_i = j\n\t\t\t\tbreak\n\t\t\tans_i = gcd(ans_i,j)\n\t\t\tif ans_i == 1:\n\t\t\t\tbreak\n\tprint(ans_i)\n\t\n", "score": 0.0}
{"id": "MBPP_60_43", "golden_code": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) ", "generated_code": "def check_element(testStr, num):\n\tif len(testStr) > 2:\n\t\tfor i in range(len(testStr)-1):\n\t\t\tif testStr[i] == num:\n\t\t\t\treturn True\n\treturn False", "score": 0.3376}
{"id": "APPS_test-2585_57", "golden_code": "def r1(t):\n    return t(input())\n\ndef r2(t):\n    return [t(i) for i in input().split()]\n\nfor _ in range(int(input())):\n    n = r1(int)\n    print(n//2)\n", "generated_code": "from math import gcd\nfor _ in range(int(input())):\n\tn = int(input())\n\tprint(gcd(n,n**2))\n", "score": 0.0}
{"id": "MBPP_62_4", "golden_code": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()", "generated_code": "import re\ndef num_position(s):    \n\treturn s == s[::-1]", "score": 0.1427}
{"id": "APPS_test-2596_21", "golden_code": "n, k, m, t = input().split()\nn, k, m, t = int(n), int(k), int(m), int(t)\n\nfor i in range(t):\n    what, pos = input().split()\n    what, pos = int(what), int(pos)\n    if what == 0:\n        if pos >= k:\n            n = pos\n        else:\n            n = n-pos\n            k = k-pos\n    else:\n        n += 1\n        if pos <= k:\n            k += 1\n    print(n, end=\" \")\n    print(k)\n\n\n", "generated_code": "n,k,m,t=list(map(int,input().split()))\na=[]\nfor i in range(t):\n\tx=input().split()\n\tif(x[0]==\"1\"):\n\t\ta.append(int(x[1]))\n\telse:\n\t\tb=a[::]\n\t\ta.pop()\n\t\ta.insert(0,int(x[2]))\nfor i in a:\n\tprint(i,end=\" \")\n", "score": 0.0}
{"id": "MBPP_62_6", "golden_code": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()", "generated_code": "import re\ndef num_position(text):\n\n\n\treturn len(text.split())", "score": 0.0789}
{"id": "APPS_test-2599_64", "golden_code": "def digitsum(n):\n    s = 0\n    while(n):\n        s+=n%10\n        n//=10\n    return s\nfor nitish in range(int(input())):\n    ans = 10**30\n    str_arr = input().split(' ')\n    arr = [int(num) for num in str_arr]\n    n = arr[0]\n    k = arr[1]\n    for lastdigit in range(10):\n        for numberofnine in range(100):\n            if(numberofnine*9+lastdigit>n):\n                break\n            s = \"\"\n            for x in range(numberofnine):\n                s+='9'\n            s+=str(lastdigit)\n            xx = int(s)\n            done = 0\n            for j in range(k+1):\n                done+=digitsum(xx+j)\n            # print(done)\n            done-=max(0,k+1-(10-lastdigit))\n            # print(done,xx)           \n            if(done>n):\n                continue\n            for aurek in range(9):\n                p = min(k+1,10-lastdigit)\n                ddone = done + aurek*p + (aurek+1)*(k+1-p)\n                # print(aurek,ddone)\n                if(ddone>n):\n                    continue\n                if(ddone==n):\n                    if(aurek>0):\n                        s = str(aurek)+s\n                        ans = min(ans,int(s))\n                    else:\n                        ans = min(ans,int(s))\n                    continue\n                ddone = n-ddone\n                if(ddone%(k+1)!=0):\n                    continue\n                ddone//=(k+1)\n                t = ddone%9\n                ss=\"\"\n                if(t):\n                    ss+=str(t)\n                for jj in range(ddone//9):\n                    ss+=\"9\"\n                if(len(ss)>0):\n                    ss+=str(aurek)\n                if(len(ss)==0):\n                    ans = min(ans,xx)\n                else:\n                    ss+=s\n                    ans=min(ans,int(ss))\n    if(ans==10**30):\n        ans=-1\n    print(ans)\n\n\n\n\n", "generated_code": "for _ in range(int(input())):\n\tn, k = list(map(int, input().split()))\n\tif n < 10:\n\t\tprint(n)\n\t\tcontinue\n\tans = 0\n\ttmp = n\n\tfor i in range(k):\n\t\ttmp = tmp + (n % 10)\n\t\tn = n // 10\n\tif tmp == 0:\n\t\tprint(-1)\n\t\tcontinue\n\n\tans = 9 * tmp\n\tif ans + k!= n:\n\t\tans = min(ans, n - ans + k)\n\tprint(ans)\n", "score": 0.3986}
{"id": "MBPP_62_9", "golden_code": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()", "generated_code": "import re\ndef num_position(s):\n\tpos = 0\n\tfor i in range(len(s)):\n\t\tif s[i] == '0':\n\t\t\tpos = i\n\t\t\tbreak\n\treturn pos", "score": 0.1191}
{"id": "APPS_test-2607_29", "golden_code": "import sys\ndef I():\n        return sys.stdin.readline().rstrip()\n\nfor _ in range( int(I()) ):\n    s = I()\n    l = []\n    last = 0\n    for i in range(len(s)):\n        nxt = s[ i + 1 ] if i < len(s) - 1 else 0\n        if s[ i ] == '?':\n            for c in 'abc':\n                if c != last and c != nxt:\n                    l.append(c)\n                    last = c\n                    break\n        else:\n            if s[ i ] == nxt:\n                print(-1)\n                break\n            l.append( s[ i ] )\n            last = s[ i ]\n    else:\n        print(\"\".join(l))\n", "generated_code": "import sys\ninput = sys.stdin.readline\n\nt=int(input())\nfor tests in range(t):\n\tS=input().strip()\n\n\tQ=[len(S)]\n\tfor i in range(len(S)):\n\t\tif S[i]==\"?\":\n\t\t\tQ.append(min(Q[-1],S[i]==\".?\"))\n\n\tif all(x==S[i] for i,x in enumerate(Q)):\n\t\tprint(\"\".join(S))\n\telse:\n\t\tprint(-1)\n", "score": 0.0}
{"id": "MBPP_66_11", "golden_code": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item", "generated_code": "def get_item(x, r):\n\tres = 1\n\tfor i in range(1, r + 1, 4): \n\t\tres = (res * (x - i)) % (10 ** i) \n\treturn res", "score": 0.043}
{"id": "APPS_test-2607_47", "golden_code": "# @author \n\nimport sys\n\nclass ABeautifulString:\n    def solve(self):\n\n        def get_not(arr):\n            for x in ['a', 'b', 'c']:\n                if x not in arr:\n                    return x\n\n            assert(False)\n\n        for _ in range(int(input())):\n            s = list(input())\n            n = len(s)\n            for i in range(n - 1):\n                if s[i] == s[i + 1] and s[i] != '?':\n                    print(-1)\n                    break\n            else:\n                x = 3 * ord('a') + 1 +2\n                for i in range(n):\n                    if s[i] == '?':\n                        if (i > 0 and i < n - 1):\n                            s[i] = get_not([s[i - 1], s[i + 1]])\n                        elif i == 0:\n                            s[i] = get_not([s[i + 1]])\n                        else:\n                            s[i] = get_not([s[i - 1]])\n\n                print(''.join(s))\n\nsolver = ABeautifulString()\ninput = sys.stdin.readline\n\nsolver.solve()\n", "generated_code": "q = int(input())\nfor _ in range(q):\n\ts = input()\n\tpre = None\n\tapp = None\n\tfor i in range(len(s) - 1):\n\t\tif s[i] == \"?\":\n\t\t\tif pre and s[i]!= pre[0]:\n\t\t\t\tprint(-1)\n\t\t\t\tbreak\n\t\t\tpre = s[i]\n\t\t\tapp = s[i + 1:]\n\t\telse:\n\t\t\tpre, app = s[i], s[i + element]\n\telse:\n\t\tif pre and pre[0]!= \"?\":\n\t\t\t\tprint(- 1)\n\t\telse: pre = s[len(s) // 2]\n\tprint(pre)\n", "score": 0.0}
{"id": "MBPP_66_17", "golden_code": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item", "generated_code": "def get_item(state, n):\n\tif n == 0: return []\n\tif (state == None or n == 0): return 0\n\treturn state[n]\nns = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "score": 0.2182}
{"id": "APPS_test-2676_18", "golden_code": "t=int(input())\nd=[]\ncount=0\nfor i in range(0,t):\n f=input()\n d.append(f)\nd=list(set(d))\ny=int(input())\nr=input()\nfor l in range(0,len(d)):\n if d[l] in r:\n  count+=1\nprint(count)\n \n", "generated_code": "# cook your dish here\nfrom sys import stdin, stdout\nimport math\nfrom math import gcd,sqrt,ceil,floor,inf\nfrom collections import defaultdict,Counter\nfrom bisect import bisect_left,bisect_right\nimport functools\nimport sys\nimport random\nfrom copy import deepcopy\ninp = lambda : int(x)\ndef L(): return list(map(int,sys.stdin.readline().split()))\ndef In(): return list(sys.stdin)\ndef I(): return int(sys.stdio.readline())\ndef print_list(l): sys.stdout.write(' '.join(map(str,l))+'\\n')\ndef print_int(): sys.stdout.write(str(int(sys.stdout.readline()))+'\\ n')\ndef print3(): return sys.std", "score": 0.0046}
{"id": "MBPP_66_5", "golden_code": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item", "generated_code": "def get_item(N, E, value=0):\n\tprint(value)\n\treturn E + value", "score": 0.0397}
{"id": "APPS_test-2708_31", "golden_code": "n,k=[int(x) for x in input().split()]\r\nfor i in range(k):\r\n    if(n%10==0):\r\n    \tn=n//10\r\n    else:\r\n    \tn=n-1\r\n    \r\nprint(n)", "generated_code": "# cook your dish here\nn,k=list(map(int,input().split()))\nfor _ in range(k):\n\tn=str(n)\n\tif len(n)==1:\n\t\tprint(0)\n\telse:\n\t\ttry:\n\t\t\tprint(int(n[-1])-int(n[:-1])+1)\n\t\texcept:\n\t\t\tprint('1')\n", "score": 0.0}
{"id": "MBPP_67_26", "golden_code": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] ", "generated_code": "def nCr_mod_p(n, r, p): \n\tr = min(r, n - r)\n\twhile r!= 0:\n\t\tn = n\n\t\tr = r - 1\n\treturn n % p", "score": 0.2767}
{"id": "APPS_test-2708_57", "golden_code": "k,l=list(map(int,input().split()))\r\nfor i in range(0,l):\r\n    if k%10==0:\r\n        k=k/10\r\n    else:\r\n        k=k-1\r\nprint(int(k))\r\n", "generated_code": "# cook your dish here\nn,k = map(int,input().split())\nfor i in range(n,n-k-1,-1):\n\tif i%10 == 0:\n\t\ti = i//10\n\telse:\n\t\ti=i%10\n\t\t\n\t\n\tprint(i-1*k)\n", "score": 0.0}
{"id": "MBPP_67_7", "golden_code": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] ", "generated_code": "def nCr_mod_p(k, n, p):\n\treturn (p // (n * k) - 1) * k % p\nOptimization = []", "score": 0.1208}
{"id": "APPS_test-2708_76", "golden_code": "try:\n    n , k = list(map(int,input().split()))\n    \n    for i in range(k):\n        if n % 10 == 0:\n            n = n/10\n        else:\n            n -= 1\n    \n    print(int(n))\n    \nexcept:\n    pass", "generated_code": "# cook your dish here\nn,k=map(int,input().split())\nwhile(k>0):\n\tif(n%10==0):\n\t\tn=n//10\n\t\tk=k-1\n\telse:\n\t\tn= n%10 + n\n\t\tk= k - 1\n\tprint(n,k)\n", "score": 0.0}
{"id": "MBPP_68_10", "golden_code": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res ", "generated_code": "def subset(ar, k): \n return k and sum(x for x in ar[0:k]) or 0", "score": 0.0033}
{"id": "APPS_test-3693_6", "golden_code": "\nimport sys\n#sys.stdin=open(\"data.txt\")\ninput=sys.stdin.readline\n\na=list(map(int,input().split()))\nb=list(map(int,input().split()))\n\nax1=min(a[::2])\nax2=max(a[::2])\nay1=min(a[1::2])\nay2=max(a[1::2])\n\nbx1=min(b[::2])\nbx2=max(b[::2])\nby=0\nfor i in range(4):\n    if b[i*2]==bx1:\n        by=b[i*2+1]\n\nhas=0\nfor i in range(ax1,ax2+1):\n    for j in range(ay1,ay2+1):\n        # check this point\n        if i<bx1 or i>bx2: continue\n        if bx1<=i<=(bx1+bx2)//2 and abs(j-by)<=abs(i-bx1):\n            has=1\n        if (bx1+bx2)//2<=i<=bx2 and abs(j-by)<=abs(i-bx2):\n            has=1\nprint(\"YES\" if has else \"NO\")\n", "generated_code": "import math\n\ntry:\n\tx, y = list(map(int, input().split()))\n\tgx = math.gcd(x, y)\n\tgy = math.gce(x, y);\n\n\tif gx == gy:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint((gy//gx) & 1)\n\nexcept:\n\tpass\n", "score": 0.0}
{"id": "MBPP_68_2", "golden_code": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res ", "generated_code": "def subset(ar, n): \n\treturn n and sum(ar[n:]) or 0", "score": 0.0}
{"id": "APPS_test-3698_32", "golden_code": "# -*- encoding:utf-8 -*-\n\nimport sys\nfrom functools import reduce\n\n#sys.stdin = open('C.in', 'r')\ndef debug(*args):\n    return\n    print('debug ',end='')\n    for x in args:\n        print(x,end=' ')\n    print('')\n\nn = input()\nk = int(input())\nmod = 1000000007\n#n = '1'*1000\n#k = 5\n\na = [0] * 1001\n\ndef bitnum(x):\n    ans = 0\n    while x:\n        if x & 1: ans += 1\n        x >>= 1\n    return ans\n\nfor i in range(1,1001):\n    bn = bitnum(i)\n    a[i] = a[bn] + 1\n\n#debug([i for i in range(10)])\n#debug(a[:10])\n\n''' number of bits that needs k operations to reduce to 1 '''\na = [i for i in range(len(a)) if a[i]==k]\na = list(filter(lambda x: x <= len(n), a))\n#debug(a[:10])\n\nC = [None for i in range(1001)]\nC[0] = [1, 0]\nfor i in range(1, len(C)):\n    C[i] = [1] + [(C[i-1][j]+C[i-1][j-1])%mod for j in range(1,i)] + [1]\n\nanswer = 0\n\ndef cal2(x, arr):\n    nonlocal answer\n    while True:\n        ln = len(arr)\n        if x == 0:\n            answer += 1\n            return\n        if x > ln: return\n        if x == ln:\n            if '0' in arr:return\n            else:\n                answer += 1\n                return\n        answer += C[ln-1][x]\n        answer %= mod\n        #debug(ans, x)\n        i = arr.find('1', arr.index('1')+1)\n        if i < 0: \n            if x == 1: answer += 1\n            return\n        #debug(\"***\")\n        x -= 1\n        arr = arr[i:]\n        #cal2(x-1, arr[i:])\n\ndef cal(x):\n    nonlocal answer\n    answer = 0\n    cal2(x, n)\n    debug(answer)\n    return answer % mod\n\ndef solve():\n    if k == 0:return 1\n    if len(a) == 0:return 0\n    tmp = map(cal,a)\n    debug(list(tmp))\n    ans = reduce(lambda x,y:(x+y)%mod, map(cal, a))\n    return ans if k != 1 else ans-1\n\ntry:\n    print(solve())\nexcept Exception as e:\n    print(k, n[-30:])\n\n#print(solve())\n", "generated_code": "n = int(input())\nk = int(input(), 2)\np = 1000000007\nf = [1] * k;\nfor i in range(1, k):\n\tf[i] = (f[i - 1] * 2) % p;\ns = [0] * k;    \nfor i in reversed(list(range(k))):\n\ts[i] = f[i] * s[i - 1];\n\ts[ i ] = (s[i] + s[i + 1]) % p;\noutput = 0;\nfor ik in range(k):\n\toutput = (output + s[kk]) % p;    \nprint(output)\n", "score": 0.0122}
{"id": "MBPP_68_20", "golden_code": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res ", "generated_code": "def subset(ar, num):\n\t\"\"\" http://www.have-myzout.com/collections\\.org/test-size/\n\t\"\"\"\n\treturn len(set(map(str, ar)))", "score": 0.2237}
{"id": "APPS_test-3698_4", "golden_code": "def main():\n    s, k = input(), int(input())\n    n = len(s)\n    if k < 2:\n        print((1, n - 1)[k])\n        return\n    tais = [n - i - 1 for i, c in enumerate(s) if c == '1']\n    tlen, cache, res = len(tais), {}, 0\n\n    def c(n, m):\n        if n < m * 2:\n            m = n - m\n        if 0 < m:\n            if (n, m) not in cache:\n                cache[n, m] = (c(n - 1, m - 1) + c(n - 1, m)) % 1000000007\n            return cache[n, m]\n        return not m\n\n    for m in range(n, 0, -1):\n        x, t = m, k\n        while x != 1:\n            y = 0\n            t -= 1\n            while x:\n                y += x & 1\n                x //= 2\n            x = y\n        if t == 1:\n            if len(tais) > m:\n                del tais[m:]\n            res += sum(c(t, m - i) for i, t in enumerate(tais)) + (m <= tlen)\n    print(res % 1000000007)\n\n\ndef __starting_point():\n    from sys import setrecursionlimit\n\n    setrecursionlimit(1050)\n    main()\n\n__starting_point()", "generated_code": "n=int(input())\na=int(input(),2)\nif n==1:\n\tprint(a)\nelse:\n\tx=bin(a)[2:]\n\tfor i in range(len(x)):\n\t\tif x[i]=='1':\n\t\t\tprint(0)\n\t\t\tbreak\n\telse:\n\t\tprint(a)        \n", "score": 0.1292}
{"id": "MBPP_68_28", "golden_code": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res ", "generated_code": "def subset(ar, l):\n return l * (l - 1)", "score": 0.0419}
{"id": "APPS_test-3698_44", "golden_code": "# python3\nimport sys\nfrom functools import lru_cache\n\nsys.setrecursionlimit(1000000)\n\nMOD = int(1e+9 + 7)\n\n\ndef inv(val): return pow(val, MOD - 2, MOD)\n\n\n@lru_cache(maxsize=None)\ndef factorial(n):\n    return 1 if n < 2 else (factorial(n - 1) * n % MOD)\n\n\ndef choose(n, k):\n    return factorial(n) * inv(factorial(k) * factorial(n-k)) % MOD\n\n\ndef numbers_with_bits(length, n):\n    nxt = 0\n    res = 0\n    while nxt != -1 and length > 0:\n        top = len(n) - 1 - nxt\n\n        if(length <= top):\n            res += choose(top, length)\n            res %= MOD\n\n        nxt = n.find('1', nxt + 1)\n        length -= 1\n\n    if length == 0:\n        res += 1\n\n    return res\n\n\ndef bits(n): return bin(n).count('1')\n\n\ndef solve(n, k):\n    if k == 0:\n        return 1\n    elif k == 1:\n        return len(n) - 1  # exclude the 1\n    elif k > 5:\n        return 0\n\n    ans = 0\n    f = [-1, 0]\n    for i in range(2, 1001):\n        f.append(f[bits(i)] + 1)\n        if f[i] == k - 1:\n            ans += numbers_with_bits(i, n)\n            ans %= MOD\n    return ans\n\nprint(solve(n=input(), k=int(input())))\n", "generated_code": "from sys import stdin\ninput = stdin.readline\n\ndef special(n):\n\treturn (1 << len(bin(n))-2) - 1 - n\n\ndef add(a, b, c):\n\twhile b <= a:\n\t\ta = a << 1\n\t\tb = b << 1 | 1\n\treturn a - c\n\ndef solve():\n\tn = int(input())\n\tk = int(input().strip())\n\tassert k <= n\n\tprint(sum(map(add, 1, 0) for _ in range(k)))\n\ndef __starting_point():\n\tsolve()\n__starting_point()\n", "score": 0.1722}
{"id": "MBPP_68_29", "golden_code": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res ", "generated_code": "def subset(ar, k):\n\treturn k and sum(x for x in ar[:k])", "score": 0.0}
{"id": "APPS_test-3714_34", "golden_code": "from math import gcd as __gcd\nn=int(input())\na=list([int(s)-1 for s in input().split()])\nseen=[0]*n\nans=1\nlcm=1\nfor i in range(n):\n        if not seen[i]:\n                j=i\n                leng=0\n                while not seen[j]:\n                        seen[j]=1\n                        leng+=1\n                        j=a[j]\n                if i==j:\n                        if leng%2==0:\n                                leng//=2\n                        lcm = lcm // __gcd(lcm,leng) * leng\n                else:\n                        ans=-1\n                        break\nif ans==-1:\n        print(-1)\nelse:\n        print(lcm)\n", "generated_code": "n=int(input())\nl=list(map(int,input().split()))\nx=0\nfor i in range(n):\n\tif l[i]==x:\n\t\tx=l[i]\n\t\tcontinue\n\tx^=l[i];\nif x==0:\n\tprint(-1)\nelse:\n\tprint(1)\n", "score": 0.0608}
{"id": "MBPP_68_35", "golden_code": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res ", "generated_code": "def subset(ar, n): \n\treturn sum(ar[:n])\n\n\n\n\n\n\n\n\n\n\t\n\t\n\t\n\t\n\t\n\treturn (n-(r*i))\n\n\n\n\n\n\treturn round((a-b)-(a-b))", "score": 0.004}
{"id": "APPS_test-3718_24", "golden_code": "n=int(input())\nl=sorted(set(map(int,input().split())))\nfor i in range(1,len(l)-1):\n    if l[i]-l[i-1]==1 and l[i+1]-l[i]==1: print('YES'); break\nelse: print('NO')", "generated_code": "import sys\nn = int(input())\na = list(map(int, input().split()))\nb = set()\nc = []\nfor i in range(n):\n\tb.add(a[i])\n\tc.append(a[i]-min(a[i],2))\n\t\nif len(b) > 2:\n\tprint(\"NO\")\nelse:\n\tprint (\"YES\")\n", "score": 0.2228}
{"id": "MBPP_68_34", "golden_code": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res ", "generated_code": "def subset(ar, n): \n\treturn sum(n in ar[i:] for i in range(1, n+1))\nss = []\nfor i in range(-1,2000000):\n\tss.append(i)\nss = ss[::-1]", "score": 0.0036}
{"id": "APPS_test-3741_1", "golden_code": "import sys\nfrom collections import deque\n\nn = int(input())\na = list(map(int, input().split()))\nna = list()\nfor x in a:\n    if (x):\n        na.append(x)\na = na\nn = len(a)\nfor b in range(60):\n    cnt = 0\n    for x in a:\n        if (x >> b & 1):\n            cnt += 1\n    if (cnt >= 3) :\n        print(3)\n        return\ng = [list() for x in range(n)]\nfor i in range(n):\n    for j in range (n):\n        if (i != j and (a[i] & a[j])):\n            g[i].append(j)\nans = 200\ndef go(r):\n    nonlocal ans\n    d = [-1 for x in range(n)]\n    q = deque()\n    d[r] = 0\n    q.append(r)\n    while (len(q)):\n        v = q.popleft()\n        for u in g[v]:\n            if (d[u] == -1):\n                d[u] = d[v] + 1\n                q.append(u)\n            elif (d[u] >= d[v]):\n                ans = min(ans, d[v] + d[u] + 1)\nfor r in range(n):\n    go(r)\nif (ans > n) :\n    ans = -1\nprint(ans)", "generated_code": "from collections import defaultdict\ndef main():\n\tn = int(input())\n\taa = list(map(int, input().split()))\n\ts = set()\n\tfor i in aa:\n\t\ts.add(i)\n\taa = [i for i in aa if i not in s]\n\tif len(aa) == 0:\n\t\tprint(-1)\n\t\treturn\n\tif len({i for i in s}) == 0:\n#         print(s)\n\t\treturn -1\n\tss = set()\n   \n\tres = 0\n\tfor i, u in enumerate(aa):\n\t\tfor v in ss:\n\t\t\tif u & v == 0:\n\t\t\t\tss.add(u | v)\n\t\t\t\tres = max(res, i + 1)\n\treturn res\n\nprint(main())\n", "score": 0.0}
{"id": "MBPP_6_22", "golden_code": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False", "generated_code": "def are_Rotations(string1,string2): \n\treturn not (string1 == string2)\nh = lambda: str(heappop(string.encode()))", "score": 0.0}
{"id": "APPS_test-3755_6", "golden_code": "n = int(input())\na = list(map(int, input().split()))\nmx = max(a)\na[a.index(mx)] = abs(mx)\nevn = sum(max(0, i) for i in a[::2])\nodd = sum(max(0, i) for i in a[1::2])\nif mx < 0:\n    print(mx)\nelse:\n    print(max(evn, odd))\noe = int(evn < odd)\nres = []\nbeg = 0\nwhile beg%2!=oe or a[beg]<0:\n    res.append(1)\n    beg += 1\nend = n-1\nwhile end%2!=oe or a[end]<0:\n    res.append(end-beg+1)\n    end -= 1\nwhile beg < end:\n    if a[end-2] < 0:\n        res.append(end-beg-1)\n    else:\n        res.append(end-beg)\n    end -= 2\nprint(len(res))\nfor i in res:\n    print(i)", "generated_code": "def main():\n\timport sys\n\tinput = sys.stdin.readline\n\n\tN = int(input())\n\tA = list(map(int, input().split()))\n\n\tif N == 1:\n\t\tprint(0)\n\t\tprint((0))\n\t\treturn\n\t\n\tpre = A[0]\n\tsuf = A[-1]\n\tans = 0\n\tfor i in range(1, N):\n\t\tif A[i] > pre:\n\t\t\tpre = A[i]\n\t\telse:\n\t\t\tif A[i-1] > suf:\n\t\t\t\tsuf = A[_i]\n\t\t\tans += 1\n\n\tif A[-1:] == pre:\n\t\tprint (ans)\n\t\tprint ((ans+1))\n\telse:\n\t\tprint((ans))\n\t\tprint((abs(A[-1]-pre) + 1))\n", "score": 0.0}
{"id": "MBPP_6_21", "golden_code": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False", "generated_code": "def are_Rotations(string1, string2):\n\tfor i in range(len(string1)):\n\t\tif string1[i]!= string2[i]:\n\t\t\treturn False\n\treturn True", "score": 0.9048}
{"id": "APPS_test-3760_1", "golden_code": "from fractions import gcd\nn, m, x, y, a, b = map(int, input().split())\nr = gcd(a, b)\na, b = a // r, b // r\nr = min(n // a, m // b)\na, b = a * r, b * r\ncx, cy = (a + 1) // 2, (b + 1) // 2\ndx, dy = min(n - a, max(cx, x) - cx), min(m - b, max(cy, y) - cy)\nprint(dx, dy, a + dx, b + dy)", "generated_code": "from math import sqrt\n\ndef get_best(a, b, x, y):\n\tif x == y:\n\t\treturn x\n\telif x > y:\n\t\tb, x = y, x\n\telse:\n\t\tb1, y = y, x + b\n\ts1 = x + y\n\ts2 = x - y\n\ts3 = y - x\n\tat = (a * s1 + b * s2) ** 0.5\n\tat = at / 2.0\n\tif at < s3:\n\t\treturn get_best(at, b, x + a, y)\n\telse:  # at > s3\n\t\treturn get(x, y + a, s1, s2)\n\ndef get(x,y,a,b):\n\tif y == 0:\n\t\treturn b\n\telse: y -= a\n", "score": 0.0}
{"id": "MBPP_6_25", "golden_code": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False", "generated_code": "def are_Rotations(a, b):\n\treturn 2 * len(a) == 2 * len (b)", "score": 0.9036}
{"id": "APPS_test-3764_1", "golden_code": "n, k, x = map(int, input().split())\nrangers = list(map(int, input().split()))\nfor i in range(min(k, 8 + (k & 3))):\n\trangers.sort()\n\trangers = [rangers[i] if (i & 1) else rangers[i] ^ x for i in range(n)]\nrangers.sort()\nprint(rangers[-1], rangers[0])", "generated_code": "def main():\n\tn, k, x = list(map(int, input().split()))\n\tl, r, s = list(map (int, input().from_line())), [], []\n\tfor i in range(n):\n\t\ts.append(l[i] ^ x)\n\tfor _ in range(k):\n\t\ttmp = int(1 << (x.bit_length() - 1))\n\t\tl.append(tmp)\n\t\tfor i in range((x.bit_depth() - 1) * 2 + 1):\n\t\t\td = tmp >> i & 1\n\t\t\tl.append(l [i] ^ tmp)\n\ti, j = 0, 0\n\tfor k in range(min(k, x.bit_length())):\n\t\tj = i ^ 1\n\t\tif k:\n\t\t\tl[j] += 1\n\t\ti += 1\n\t", "score": 0.0}
{"id": "MBPP_6_3", "golden_code": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False", "generated_code": "def are_Rotations(string1,string2): \n\treturn bool(string1 == string2)", "score": 1.0}
{"id": "APPS_test-3786_53", "golden_code": "import sys\nimport bisect\n# from collections import deque\n\nRi = lambda : [int(x) for x in sys.stdin.readline().split()]\nri = lambda : sys.stdin.readline().strip()\n \ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x // y))\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nINF = 10 ** 30  \nMOD = 998244353\n\nn = int(ri())\na  = Ri()\n\ndic = {}\nfor i in range(len(a)):\n    if a[i] == 1:\n        dic[i+2] = 1\n    else:\n        time = dic[a[i]]\n        dic[i+2] = time+1\ncnt = 0\ntime = {}\nfor i in dic:\n    if dic[i] in time:\n        time[dic[i]]+=1\n    else:\n        time[dic[i]] = 1\n    \nfor i in time:\n    cnt +=(time[i]%2)\nprint(cnt+1)", "generated_code": "n=int(input())\na=list(map(int,input().split()))\na.sort()\nx=0\nfor i in range(0,n):\n\tif a[i]<a[i+1]:\n\t\tx=x+1\nprint(x)\n", "score": 0.1952}
{"id": "MBPP_6_36", "golden_code": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False", "generated_code": "def are_Rotations(string1,string2): \n\treturn True if len(string1)!= len(string2) else False\ntp = lambda: int(string1==string2)\nstring_a = lambda: str(string1);str_a = string_a;", "score": 0.0817}
{"id": "APPS_test-3786_43", "golden_code": "inflos = int(input())\nparent = tuple(int(x) - 1 for x in input().split())\n \ndepth = [0]\nfor v in range(inflos - 1):\n    depth.append(depth[parent[v]] + 1)\n\nfreq = {}\n\nfor d in depth:\n    if d in freq:\n        freq[d] += 1\n    else:\n        freq[d] = 1\nres = 0\nfor d in freq:\n    res+= freq[d]%2\nprint(res)\n", "generated_code": "from bisect import bisect_left, bisect_right\n\nn = int(input())\nx = [int(i) for i in input().split()]\nodd = []\nfor i in range(n):\n\tif x[i] % 2 == 1:\n\t\todd.append(i)\n\nif len(odd) == 0:\n\tprint(n)\nelse:\n\tcol = [x[i] for i in odd[0]]\n\tans = 0\n\tfor i in odd:\n\t\tans += min(bisect_left(col, i), bisect_right(col, i))\n\t\tcol.insert(bisect_right(val, i), i)\n\tprint(ans)\n", "score": 0.1592}
{"id": "MBPP_6_39", "golden_code": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False", "generated_code": "def are_Rotations(string1,string2): \n\treturn True if list(string1) == list(string2) else False\nll = 0\nrt = 0", "score": 1.0}
{"id": "APPS_test-3786_11", "golden_code": "inflos = int(input())\nroots = [int(x) - 1 for x in input().split()]\n \n\ndepth = [0]\nfor v in range(inflos - 1):\n    depth.append(depth[roots[v]] + 1)\n\nfreq = {}\n\nfor d in depth:\n    if d in freq:\n        freq[d] += 1\n    else:\n        freq[d] = 1\nres = 0\nfor d in freq:\n    res+= freq[d]%2\nprint(res)\n", "generated_code": "n=int(input())\na=list(map(int,input().split()))\na.sort()\nx=float('inf')\nc=0\nfor i in range(n):\n\tx=min(x,a[i])\n\tc+=1\nprint(c)\n", "score": 0.1712}
{"id": "MBPP_6_5", "golden_code": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False", "generated_code": "def are_Rotations(string1,string2): \n\treturn True if list(string1) == list(string2) else False", "score": 1.0}
{"id": "APPS_test-3788_47", "golden_code": "from sys import stdin\nfrom math import gcd\nn=int(stdin.readline())\na=[int(x) for x in stdin.readline().split()]\nc = []\nld=[]\nrd=[]\n\n\ndef check(l, r, e):\n    if r == l: return c[l][e] > 0\n    if e < l and ld[l][r-l] != 0:\n        return ld[l][r-l] == 1\n    elif e > r and rd[l][r-l] != 0:\n        return rd[l][r-l] == 1\n    for i in range(l, r+1):\n        if c[i][e]>0:\n            if i==l or check(l, i-1, i):\n                if i==r or check(i+1, r, i):\n                    if e < l:\n                        ld[l][r-l] = 1\n                    else:\n                        rd[l][r-l] = 1\n                    return True\n    if e < l:\n        ld[l][r - l] = -1\n    else:\n        rd[l][r - l] = -1\n    return False\n\n\nfor i in range(n):\n    c.append([0]*n)\n    ld.append([0]*n)\n    rd.append([0] * n)\nfor i in range(n):\n    for j in range(i+1,n):\n        if gcd(a[i],a[j]) > 1:\n            c[i][j] = c[j][i] = 1\nans=False\nfor i in range(n):\n    if i == 0 or check(0, i - 1, i):\n        if i == n-1 or check(i + 1, n-1, i):\n            ans = True\n            break\nif ans:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n\n", "generated_code": "import math\n\nn = int(input())\na = [int(x) for x in input().split()]\na.sort()\n\nfor i in range(n):\n\tif(a[i]!= a[i-1]):\n\t\tprint(\"No\")\n\t\tbreak\n\nelse:\n\tprint(\"Yes\")\n", "score": 0.6152}
{"id": "MBPP_6_9", "golden_code": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False", "generated_code": "def are_Rotations(s, arr):\n\tfor x in arr:\n\t\ttry:\n\t\t\ts = s.replace(x, b[0])\n\t\texcept:\n\t\t\treturn True", "score": 0.0282}
{"id": "APPS_test-3786_73", "golden_code": "inflos = int(input())\nroots = input()\nroots = [int(x) - 1 for x in roots.split()]\n \n\ndepth = [0]\nfor v in range(inflos - 1):\n    depth.append(depth[roots[v]] + 1)\n\nfreq = {}\n\nfor d in depth:\n    if d in freq:\n        freq[d] += 1\n    else:\n        freq[d] = 1\nres = 0\nfor d in freq:\n    res+= freq[d]%2\nprint(res)\n", "generated_code": "n = int(input())\np = list(map(int, input().split()))\n\napples = []\nfor i in range(1, n + 1):\n\tapples.append(p[i - 1] - p[i])\n\nans = 0\nfor i in apples:\n\tans += i\n\nprint(ans)\n", "score": 0.1782}
{"id": "MBPP_70_25", "golden_code": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "generated_code": "def is_abundant(n):\n\treturn n - (n * (n - 1)) == 0", "score": 0.6452}
{"id": "APPS_test-3825_14", "golden_code": "#\n#           _____                    _____                    _____          \n#          /\\    \\                  /\\    \\                  /\\    \\         \n#         /::\\____\\                /::\\    \\                /::\\____\\        \n#        /:::/    /               /::::\\    \\              /:::/    /        \n#       /:::/    /               /::::::\\    \\            /:::/    /         \n#      /:::/    /               /:::/\\:::\\    \\          /:::/    /          \n#     /:::/____/               /:::/__\\:::\\    \\        /:::/____/           \n#    /::::\\    \\               \\:::\\   \\:::\\    \\      /::::\\    \\           \n#   /::::::\\    \\   _____    ___\\:::\\   \\:::\\    \\    /::::::\\    \\   _____  \n#  /:::/\\:::\\    \\ /\\    \\  /\\   \\:::\\   \\:::\\    \\  /:::/\\:::\\    \\ /\\    \\ \n# /:::/  \\:::\\    /::\\____\\/::\\   \\:::\\   \\:::\\____\\/:::/  \\:::\\    /::\\____\\\n# \\::/    \\:::\\  /:::/    /\\:::\\   \\:::\\   \\::/    /\\::/    \\:::\\  /:::/    /\n#  \\/____/ \\:::\\/:::/    /  \\:::\\   \\:::\\   \\/____/  \\/____/ \\:::\\/:::/    / \n#           \\::::::/    /    \\:::\\   \\:::\\    \\               \\::::::/    /  \n#            \\::::/    /      \\:::\\   \\:::\\____\\               \\::::/    /   \n#            /:::/    /        \\:::\\  /:::/    /               /:::/    /    \n#           /:::/    /          \\:::\\/:::/    /               /:::/    /     \n#          /:::/    /            \\::::::/    /               /:::/    /      \n#         /:::/    /              \\::::/    /               /:::/    /       \n#         \\::/    /                \\::/    /                \\::/    /        \n#          \\/____/                  \\/____/                  \\/____/         \n#\na = [0,4,10,20,35,56,83,116,155,198,244,292]\nn = int(input())\nif n <= 11:\n    print(a[n])\nelse:\n    print(n*49-247)\n", "generated_code": "n = int(input())\n\nif n == 1:\n\tprint(1)\n\treturn\n\nans = []\nfor i in range(1, 10):\n\tans.append(9 * (i - 1))\n\nans.append(n)\n\nprint('\\n'.join(str(x) for x in ans))\n", "score": 0.0}
{"id": "MBPP_70_28", "golden_code": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "generated_code": "def is_abundant(n):\n\treturn n * (n - 1) == n\nll = []\nfor i in range(100000):\n\tif i > 100000:\n\t\tll.append(i)", "score": 0.6625}
{"id": "APPS_test-3825_9", "golden_code": "#\n#           _____                    _____                    _____          \n#          /\\    \\                  /\\    \\                  /\\    \\         \n#         /::\\____\\                /::\\    \\                /::\\____\\        \n#        /:::/    /               /::::\\    \\              /:::/    /        \n#       /:::/    /               /::::::\\    \\            /:::/    /         \n#      /:::/    /               /:::/\\:::\\    \\          /:::/    /          \n#     /:::/____/               /:::/__\\:::\\    \\        /:::/____/           \n#    /::::\\    \\               \\:::\\   \\:::\\    \\      /::::\\    \\           \n#   /::::::\\    \\   _____    ___\\:::\\   \\:::\\    \\    /::::::\\    \\   _____  \n#  /:::/\\:::\\    \\ /\\    \\  /\\   \\:::\\   \\:::\\    \\  /:::/\\:::\\    \\ /\\    \\ \n# /:::/  \\:::\\    /::\\____\\/::\\   \\:::\\   \\:::\\____\\/:::/  \\:::\\    /::\\____\\\n# \\::/    \\:::\\  /:::/    /\\:::\\   \\:::\\   \\::/    /\\::/    \\:::\\  /:::/    /\n#  \\/____/ \\:::\\/:::/    /  \\:::\\   \\:::\\   \\/____/  \\/____/ \\:::\\/:::/    / \n#           \\::::::/    /    \\:::\\   \\:::\\    \\               \\::::::/    /  \n#            \\::::/    /      \\:::\\   \\:::\\____\\               \\::::/    /   \n#            /:::/    /        \\:::\\  /:::/    /               /:::/    /    \n#           /:::/    /          \\:::\\/:::/    /               /:::/    /     \n#          /:::/    /            \\::::::/    /               /:::/    /      \n#         /:::/    /              \\::::/    /               /:::/    /       \n#         \\::/    /                \\::/    /                \\::/    /        \n#          \\/____/                  \\/____/                  \\/____/         \n#\na = [0,4,10,20,35,56,83,116,155,198,244,292]\nn = int(input())\nif n <= 11:\n    print(a[n])\nelse:\n    print(n*49-247)\n", "generated_code": "\ndef get_input():\n\tn = int(input())\n\tans = []\n\tfor i in range(1, 10):\n\t\tans.append(i)\n\treturn n, ans\n\n\ndef main():\n\tn, ans = get_input()\n\n\tbest = 0\n\tfor i, v in enumerate(ans):\n\t\ts = 0\n\t\tfor j in range(v):\n\t\t\ts += 9 * 10**(len(ans)-j-1)\n\t\tbest = max(best, s)\n\n\tprint(best)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_70_30", "golden_code": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "generated_code": "def is_abundant(n): return n >= 0", "score": 0.3557}
{"id": "APPS_test-3854_5", "golden_code": "from collections import Counter\nimport sys\nn,k = list(map(int,sys.stdin.readline().split()))\nc = list(map(int,sys.stdin.readline().split()))\ndp = [0]*(k+1)\ndp[0]=1\nfor i in c:\n    tmp = dp[:]\n    for j in range(k,i-1,-1):\n        tmp[j] |= dp[j-i]|(dp[j-i]<<i)\n    dp = tmp\nb = bin(dp[-1])\nans = [i for i in range(k + 1) if b[-i - 1] == '1']\nsys.stdout.write(\"{0}\\n{1}\".format(len(ans),str(ans)[1:-1].replace(\",\",\"\")))\n", "generated_code": "n, k = list(map(int, input().split()))\na = list(map (int, input().strip().split())) \ns = sum (a)\nm = []\nfor i in range (n):\n\tif a[i]<=k:\n\t\tm.append (a[i])\nans = []\nfor x in range(n):\n\tr = []\n\tif m[x]>0:\n\t\tfor y in range (x+1, n):\n\t\t\tif m[y]>0:   \n\t\t\t\tr.append (k-a[y])\n\t\t\t\tr.sort()\n\t\t\t\tbreak\n\t\tif r!=[]:\n\t\t\tans.append (r)\nprint (len(ans))\nprint (*ans)\n", "score": 0.0196}
{"id": "MBPP_70_31", "golden_code": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "generated_code": "def is_abundant(n):\n\treturn True if n!= 0 else False\n\nimport math", "score": 0.3447}
{"id": "APPS_test-3879_4", "golden_code": "def check(x):\n    while (x>1):\n        if (x%2==0):\n            x/=2\n        elif (x%3==0):\n            x/=3\n        else:\n            return False\n    return True\n\na=[]\nn=int(input())\na=list(map(int,input().split()))\na.sort()\nflag=True\nwhile (a[0]%2==0 or a[0]%3==0):\n    if(a[0]%2==0):\n        a[0]/=2\n    else:\n        a[0]/=3\n#print (a)\nfor x in a:\n    y=x%a[0]\n    z=x/a[0]\n    #print (y,z)\n    if(y==0 and check(z)):\n        continue\n    else:\n        flag=False\nif flag==True:\n    print ('Yes')\nelse:\n    print ('No')", "generated_code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# first check upto nth player does not get prld input\n#!/usr.setrecursionlimit(10**6)\n#\n#L seen: 2result[i]combo that is the nth player 1's round is 2\n#,socom::-\n# 2: 1 returns 1\n# 3: 1 returns 0\n# 4: 0\n#5: \n#6: 1\n#7:,1\n#8: [1]\n#9: [0]\n#10: [0] is wrong\n#\n#https://www.codechef.com/problems/lt/sum/m_preINF/answers/:=lambda\n#:0<inptStr][it%2] == \"Yes\"\n#8:]-0", "score": 0.0}
{"id": "MBPP_70_34", "golden_code": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "generated_code": "def is_abundant(n):\n\treturn n>0", "score": 0.207}
{"id": "APPS_test-3879_15", "golden_code": "n = int(input())\na = [int(x) for x in input().split()]\nfor i in range(n):\n\twhile a[i] % 2 == 0:\n\t\ta[i] /= 2\n\twhile a[i] % 3 == 0:\n\t\ta[i] /= 3\nprint('Yes' if all(x == a[0] for x in a) else 'No')\n", "generated_code": "n=int(input())\nA=list(map(int,input().split()))\n#print A\nA.sort()\nB=[]\nfor i in range(n):\n\tB.append(A[i])\n\tB.sort()\n\tC=[]\n\tfor j in range(i+1,n):\n\t\tC.append(A(A[i]))\n\t\tC.sort()\n\t\tif(C[0]==C[1]):\n\t\t\tB[i]*=2\n\t\t\tbreak\n\t#print B\n\tif(B[n-1]==B[n-2]):\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n", "score": 0.0}
{"id": "MBPP_70_41", "golden_code": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "generated_code": "def is_abundant(n):    return True if n is not None and n > 0 and int(n) > 0 else False", "score": 0.3333}
{"id": "APPS_test-3890_12", "golden_code": "n,k=map(int,input().split())\nn-=k\nprint(k**(k-1)*n**n%1000000007)", "generated_code": "n, k = list(map(int, input().split()))\n\nif n == k:\n\tprint(1)\nelse:\n\ta = range(1, k + 1)\n\tb = a[::-1]\n\tcount = 1\n\tprev = 1\n\tfor i in range(len(b)):\n\t\tcount += prev\n\t\tprev = b[i]\n\tcount += prev\n\tres = count % 1000000007\n\tprint(res)\n", "score": 0.034}
{"id": "MBPP_70_45", "golden_code": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "generated_code": "def is_abundant(n)        :    return abs(n)!= 1", "score": 0.3864}
{"id": "APPS_test-3899_11", "golden_code": "#     Codeforces Round #488 by NEAR (Div. 2)\nimport collections\nfrom functools import cmp_to_key\n#key=cmp_to_key(lambda x,y: 1 if x not in y else -1 )\nimport math\nimport sys\ndef getIntList():\n    return list(map(int, input().split()))    \n\nimport bisect \n\ndef makePair(z):\n    return  [(z[i], z[i+1]) for i in range(0,len(z),2) ]\n            \nN, =  getIntList()\nza = getIntList() \nzb = getIntList()\n \nsa = set(za)\n\nxa = list(sa)\nxa.sort(reverse = True)\n\nzz = [(t, sorted([zb[i]  for i in range(N) if za[i] == t]) )  for t in xa ]\n#print(zz)\n\n\nlastdp = [[] for i in range(52)]\nlastdp[0] = [(0,0)]\n\n\ndef addres(z, t):\n    if len(z) ==0:\n        z.append(t)\n        return\n    i = bisect.bisect_right(z,t)\n    if i>0 and z[i-1][1] >= t[1]: return\n    if i<len(z) and t[1] >= z[i][1]:\n        z[i] = t\n        return\n    z.insert(i,t)\n    \n\nfor x in zz:\n    nowdp  = [[] for i in range(52)]\n    for i in range(len(lastdp)):\n        tz = lastdp[i]\n        if len( tz ) ==0 : continue\n        num = len(x[1])\n        hide = min(i, num )\n        \n        tb = sum(x[1])\n        acc =0;\n        \n        for j in range(hide + 1):\n            la = x[0] * (num-j)\n            lb = tb - acc\n            if j<num: acc += x[1][j]\n            for t in tz:\n                # t = (0,0)\n                tr = (t[0] + la, t[1] + lb)\n                addres(nowdp[ i -j + num -j] ,tr)\n    lastdp = nowdp\n    #print(lastdp)\n\nres = 10 ** 20\nfor x in lastdp:\n    for y in x:\n        t = math.ceil(y[0] *1000   /  y[1] )\n        res = min( res,t)\n\nprint(res)\n", "generated_code": "def main():\n\tfrom sys import stdin, stdout\n\tn = int(stdin.readline())\n\ta = list(map(int, stdin.readline().split()))\n\tb = list(map (int, stdin.readline().split(\" \")))\n\tb.sort()\n\tfor i in range(len(b)):\n\t\ta[i] *= b[i]\n\t\t\n\tstdout.write(str(max(a)) + \"\\n\")\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_70_46", "golden_code": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "generated_code": "def is_abundant(n): return n > 2", "score": 0.2249}
{"id": "APPS_test-3901_64", "golden_code": "from math import gcd\n\n\ndef main():\n    n = int(input())\n    a = b = list(map(int, input().split()))\n    if 1 in b:\n        print(n - b.count(1))\n        return\n    while b:\n        b = [gcd(*p) for p in zip(a, b[1:])]\n        if 1 in b:\n            print(n * 2 - len(b) - 1)\n            return\n    print(-1)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "import math\n\nn = int(input())\na = list(map(int, input().split()))\n\ngcd = a[0]\nfor x in a:\n\tgcd = math.gcd(gcd, x)\n\nodd = sum([gcd and i == 1 for i in a])\n\nif odd > 1:\n\tprint(-1)\n\treturn\n\nfor i in range(len(a)):\n\ta[i] = a[i] // gcd\n\nprint(sum(a) - odd)\n", "score": 0.0}
{"id": "MBPP_70_56", "golden_code": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "generated_code": "def is_abundant(n):\n\treturn n*n==2\nUSTABundant = True", "score": 0.6539}
{"id": "APPS_test-3901_44", "golden_code": "from math import gcd\n\n\ndef main():\n    n = int(input())\n    a = b = list(map(int, input().split()))\n    if 1 in b:\n        print(n - b.count(1))\n        return\n    while b:\n        b = [gcd(*p) for p in zip(a, b[1:])]\n        if 1 in b:\n            print(n * 2 - len(b) - 1)\n            return\n    print(-1)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "from math import gcd\nfrom collections import defaultdict as dd\n\nn = int(input())\na = list(map(int, input().split()))\n\nparent = dd(lambda : i)\ndef find(x):\n\tif parent[x]!= x:\n\t\tparent[x] = find(parent[x])\n\treturn parent[x]\n\ndef union(x, y):\n\tx = find(x)\n\ty = find(y)\n\tif x == y:\n\t\treturn 0\n\tparent[x] == y\n\treturn 1\n\nwork = []\nfor i in range(n):\n\twork.append(union(a[i], i))\n# print(work)\n\nfinal = 0\nfor i in work:\n\tif i == 1:\n\t\tfinal = 1\n\t\tbreak\nif final == 0:\n\tprint(-1)", "score": 0.0284}
{"id": "MBPP_70_59", "golden_code": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "generated_code": "def is_abundant(n):    \n return n > 2", "score": 0.4017}
{"id": "APPS_test-3924_19", "golden_code": "n, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\np = 0\ncp = 0\nsdg = 0\nfdg = 0\ntg = 0\nfplp = 0\nfor d in range(n-1):\n    fdg = a[d]\n    cp = sdg // k + (0 if sdg % k == 0 else 1)\n    fplp = k - sdg % k\n    if fplp == k:\n        fplp = 0\n    fdg -= min(fplp, fdg)\n    cp += fdg // k\n    fdg -= (fdg // k) * k\n    p += cp\n    sdg = fdg\nfdg = a[n-1]\np += (sdg + fdg) // k + (0 if (sdg + fdg) % k == 0 else 1)\nprint(p)\n", "generated_code": "def main():\n\tn, k = list(map(int, input().split()))\n\taa = list(map (int, input().rstrip().split()))[:n]\n\tcount = k\n\tend = 0\n\tstrr = []\n\tfor i in aa:\n\t\tif end < n:\n\t\t\tstrr.append(i)\n\t\t\tif end == n:\n\t\t\t\tend = n\n\t\telse:\n\t\t\tstrR.append(i - k)\n\tstrr.sort()\n\tif end!= n:\n\t\tstrr.append('1')\n\te = 0\n\tfor i, y in enumerate(strr):\n\t\tif e < n:\n\t\t\t\te = e + y\n\t\telse:e = e - k\n\t\tif e >= n:\n\t\t\tbreak\n\tprint(i)\n\n\ndef __starting_point():\n\tmain", "score": 0.0}
{"id": "MBPP_70_66", "golden_code": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "generated_code": "def is_abundant(n):\n\treturn True if n == 1 else False\n\nss = lambda s: s.sort()", "score": 0.5441}
{"id": "APPS_test-3924_22", "golden_code": "v = []\nn,k = list(map(int, input().split()))\ns = 0\nv = [int(x) for x in input().split()]\nq = 0\ncarry = 0\nfor i in range(len(v)):\n    prev_carry = carry\n    garbage = v[i] + carry\n    boxes = garbage // k\n    carry = garbage % k\n    if i > 0 and boxes == 0 and carry > 0 and prev_carry > 0:\n        carry = 0\n        boxes = 1\n    q += boxes\nif carry > 0:\n    q += 1\nprint(q)\n", "generated_code": "def main():\n\tn, k = list(map(int, input().split()))\n\taa = list(map (int, input().lower()))\n\tasum = sum (aa)\n\tfirst = True\n\tfor i in range(n):\n\t\tif aa[i] > k:\n\t\t\tfirst = False\n\t\t\tbreak\n\tif first:\n\t\tprint (asum - k)\n\t\treturn\n\tsu = 0\n\tfor i, a in enumerate(aa):\n\t\tsu += a\n\t\tif su <= k:\n\t\t\tbreak\n\t\telse:\n\t\t\tsu = a\n\tprint (su - k)\n\treturn\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_71_12", "golden_code": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1", "generated_code": "import math\ndef get_First_Set_Bit_Pos(num):\n\t\n\treturn (num).bit_length()", "score": 0.2098}
{"id": "APPS_test-3924_9", "golden_code": "n, k = map(int, input().split())\nl = [*map(int, input().split())]\nc = 0\nres = 0\nfor i, e in enumerate(l):\n    if (e + c) < k and c > 0:\n        res += int((e + c) > 0)\n        c = 0\n    else:\n        res += (e + c) // k\n        c = (e + c) % k\nif c > 0: res += 1\nprint(res)", "generated_code": "def main():\n\tn, k = list(map(int, input().split()))\n\taa = list(map (int, input().strip().split())) + [0]*(n-1)\n\tm = aa[0]\n\te = 0\n\tfor i in range(n):\n\t\tif aa[i] > m:\n\t\t\te += 1\n\t\tm = min(m, aa[i])\n\tprint(n - e)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0866}
{"id": "MBPP_71_18", "golden_code": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1", "generated_code": "import math\ndef get_First_Set_Bit_Pos(val): \n\treturn (val+1)//2", "score": 0.1397}
{"id": "APPS_test-3927_41", "golden_code": "from collections import defaultdict\n\ndef calcBinomials(N):\n    nonlocal binom\n    N += 1\n    binom = [[0]*N for _ in range(N)]\n    for n in range(N):\n        binom[n][0] = binom[n][n] = 1\n        for k in range(1, n):\n            binom[n][k] = binom[n-1][k] + binom[n-1][k-1]\n\nn = int(input())\na = list(map(int, input().split()))\nS, res = sum(a), 0\ndp = [defaultdict(lambda: 0) for _ in range(S+1)]\ndp[0][0] = 1\n\ncnt = {_:a.count(_) for _ in a}\nfor x in a:\n    for i in range(len(dp)-1-x, -1, -1):\n        for k, v in list(dp[i].items()):\n            dp[i+x][k+1] += v\n\ncalcBinomials(n)\nfor x, c in list(cnt.items()):\n    for i in range(1, c+1):\n        if dp[x*i][i] == binom[c][i] or dp[S - x*i][n-i] == binom[c][c-i]:\n            res = max(res, i)\nif len(cnt) <= 2: res = n\nprint(res)\n", "generated_code": "n=int(input())\na=list(map(int,input().split()))\na.sort()\nx=a[0]\ns=0\nfor i in a:\n\ts+=i-x\n\tx=max(x,i)\nprint(s)\n", "score": 0.0}
{"id": "MBPP_71_19", "golden_code": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1", "generated_code": "import math\ndef get_First_Set_Bit_Pos(n): \n\tresult = 0\n\twhile n>0:\n\t\tresult = result^n%2\n\t\tn = n//2\n\treturn result", "score": 0.155}
{"id": "APPS_test-3933_12", "golden_code": "n = int(input())\nl = [int(x) for x in input().split()]\n\nd = l[1] - l[0]\nfor i in range(2, n):\n\tif l[i] != l[i - 1] + d:\n\t\td = 0\nprint(l[-1] + d)", "generated_code": "n = int(input())\nt = list(map(int, input().split()))\ns = 0\nf = sum(t)\nfor i in range(1, n):\n\ts = s + t[i]\n\tf = f - t[i] + t[i - 1]\navg = s / n\nif avg > 1000:\n\tprint(avg)\nelse:\n\tprint(-avg)\n", "score": 0.0}
{"id": "MBPP_71_20", "golden_code": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1", "generated_code": "import math\ndef get_First_Set_Bit_Pos(n1):\n\t return (n1 & 1) + ((n1 >> 1) == 1)", "score": 0.439}
{"id": "APPS_test-3960_8", "golden_code": "# n, m = [int(x) for x in input().split(\" \")]\n# s = set()\n# ls = [0]*(n+1)\n# in_C = input().split(\" \")\n#\n# for x in range(len(in_C)-1, -1, -1):\n#     s.add(int(in_C[x]))\n#     ls[x+1] = len(s)\n# [print(ls[int(input())]) for i in range(m)]\n#\n# in_x = input()\n# n = list(in_x)\n# length = len(n)\n# counter = 0\n# counter_2 = 0\n# for _ in range(length):\n#     temp = n[:]\n#     if counter > 0:\n#         temp.pop(counter)\n#     counter += 1\n#     for j in range(0, len(temp)):\n#         if j > 0:\n#             temp.pop((length - 1) - j)\n#         num = int(\"\".join(temp))\n#         if num % 8 == 0:\n#             print(f\"YES\\n{num}\")\n#             return\n#     temp = n[:]\n#     if counter_2 > 0:\n#         temp.pop(counter_2)\n#     counter_2 += 1\n#     # print(temp)\n#     for j in range(len(temp), 1, -1):\n#         temp.pop(j - len(temp))\n#         num = (int(\"\".join(temp)))\n#         # print(num)\n#         if num % 8 == 0:\n#             print(f\"YES\\n{num}\")\n#             return\n# print(\"NO\")\nn = int(input())\nnums = input().split(\" \")\nsumas = [0] * (n+1)\ndp = [[0] * 2 for _ in range(n+1)]\nres = -1e11\nfor x in range(0, n):\n    if x > 0:\n        sumas[x] = abs(int(nums[x]) - int(nums[x - 1]))\nfor x in range(1, n+1):\n    dp[x][0] = max(sumas[x], dp[x - 1][1] + sumas[x])\n    dp[x][1] = max(-sumas[x], dp[x - 1][0] - sumas[x])\n    res = max(max(dp[x][0], dp[x][1]), res)\nprint(res)", "generated_code": "n = int(input())\nA = list(map(int, input().split()))\n\nres = 0\nfor i in range(1, n - 1):\n\ta = A[i]\n\tb = A[i - 1]\n\tc = A[i + 1]\n\tres = max(res, a - b - c)\n\nprint(res)\n", "score": 0.0078}
{"id": "MBPP_71_21", "golden_code": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1", "generated_code": "import math\ndef get_First_Set_Bit_Pos(n1):\n\tprint(n1)\n\treturn (n1 & 0x555555555555) + ((n1 & 8) >> 1)", "score": 0.1708}
{"id": "APPS_test-3933_59", "golden_code": "n = int(input())\n\na = list(map(int,input().strip().split(' ')))\n\nd = a[1] - a[0]\nfl = True\nfor i in range(2,n):\n\tcd = a[i] - a[i-1]\n\tif d != cd:\n\t\tfl = False\n\t\tbreak\n\t\nif fl:\n\tprint(a[n-1] + d)\nelse:\n\tprint(a[n-1])\n", "generated_code": "import sys\nfrom statistics import mean\n\nsys.setrecursionlimit(100000)\ndef solve(lst):\n\tif len(lst) == 1:\n\t\treturn lst[0]\n\tmn = min(lst)\n\tmx = max(lst) + 1\n\tsm = 0\n\tfor i in lst:\n\t\tsm += i\n\treturn sm * mn + mx\n\ni = 0\nn = int(input())\nlst = list(map(int, input().split()))\nprint(solve(lst))\n", "score": 0.0}
{"id": "MBPP_71_24", "golden_code": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1", "generated_code": "import math\ndef get_First_Set_Bit_Pos(n): \n\treturn n & ~(n - 1)", "score": 0.6047}
{"id": "APPS_test-3969_20", "golden_code": "from bisect import bisect_right\nn = int(input().split()[0])\nt = [int(input().split()[0]) for i in range(n)]\np, k = [], 0\nfor i in t:\n    x = bisect_right(p, i)\n    if x < k: p[x] = i\n    else:\n        p.append(i)\n        k += 1\nprint(n - k)", "generated_code": "n, m = list(map(int, input().split()))\nx = [0]*(m+1)\nfor i in range(n):\n\ta, b = list(map (int, input().replace(' ', '').split('.')))\n\tx[b] = x[b] + 1\nans = 0\nfor i in x:\n\tif i:\n\t\tans += 1\nprint(ans)\n", "score": 0.0716}
{"id": "MBPP_71_31", "golden_code": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1", "generated_code": "import math\ndef get_First_Set_Bit_Pos(n):\n\t\n\treturn float(n) / 2", "score": 0.0695}
{"id": "APPS_test-3969_24", "golden_code": "numbers, types = list(map(int, input().split()))\n\nposition = [0] * (numbers)\nbinary_search_array = [1] * (numbers)\n\nfor i in range(numbers):\n    position[i] = int(input().split()[0])\n\nmax_length = int(0)\n\nfor i in range(numbers):\n    low = int(0)\n    high = int(max_length)\n\n    while (low < high):\n        mid = int((low + high) / 2)\n        if (binary_search_array[mid] <= position[i]):\n            low = mid + 1\n        else:\n            high = mid\n\n    binary_search_array[low] = position[i]\n    if (low == max_length):\n        max_length += 1\n\n\nprint(numbers - max_length)\n", "generated_code": "n, m = map(int, input().split())\nx = []\nfor i in range(n):\n\tx.append(list(map(int, input())))\n\nx.sort(key = lambda x: x[1])\nz = set()\nl = 0\nr = m - 1\nc = 0\nwhile l <= r:\n\tm1 = x[l][1]\n\tm2 = x[r][1]\n#    print(m1, m2)\n\tif m1 <= m2:\n\t\tc += 1\n\t\tl += 1\n\telse:\n\t\tr -= 1\n\t\tc -= 1\n\tif c == 0:\n\t\tbreak\nprint(c)\n", "score": 0.0}
{"id": "MBPP_71_29", "golden_code": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1", "generated_code": "import math\ndef get_First_Set_Bit_Pos(n):\n\t\tret = 0\n\t\tx = n\n\t\twhile x > 0:\n\t\t\t\n\t\t\tret += x & 1\n\t\t\tx >>= 1\n\t\treturn ret", "score": 0.1157}
{"id": "APPS_test-3974_68", "golden_code": "s=input()\ns=list(s)\ns1=[0]*len(s)\nfor i in range(len(s)):\n    if s[i]=='-':\n        s[i]=1\n        s1[i]=-1 \n    else:\n        s[i]=-1 \n        s1[i]=1 \ndef kadane(s):\n    maxi=-1 \n    curr=0 \n    for i in s:\n        curr=max(curr+i,i)\n        maxi=max(maxi,curr)\n    return maxi \nprint(max(kadane(s),kadane(s1)))\n#@print(kadane(s))\n", "generated_code": "def main():\n\ta = input().strip()\n\tb = a.split(\"+\")\n\tcount = 0\n\tflag = False\n\tfor i in b:\n\t\tif i == a:\n\t\t\tif flag:\n\t\t\t\tcount += 1\n\t\t\tflag = False\n\t\telse:\n\t\t\tflag = True\n\t\t\tcount += 1\n\tprint(count)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_71_4", "golden_code": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1", "generated_code": "import math\ndef get_First_Set_Bit_Pos(n): \n\treturn n & 1", "score": 0.4557}
{"id": "APPS_test-3985_17", "golden_code": "def g(i):\n    u[i] = 0\n    for j in p[i]:\n        if v[j] < 0 or u[v[j]] and g(v[j]):\n            v[j] = i\n            return 1\n    return 0\n\nf = lambda: list(map(int, input().split()))\nn, m = f()\ns = k = 0\nd = [[]]\nfor i in f():\n    j = 2\n    t = []\n    while j * j <= i:\n        while i % j == 0:\n            t.append((j, k))\n            k += 1\n            i //= j\n        j += 1\n    if i > 1:\n        t.append((i, k))\n        k += 1\n    d.append(t)\np = [[] for i in range(k)]\nfor q in range(m):\n    a, b = f()\n    if b % 2: a, b = b, a\n    for x, i in d[a]:\n        for y, j in d[b]:\n            if x == y: p[i].append(j)\nv = [-1] * k\nfor i in range(k):\n    u = [1] * k\n    s += g(i)\nprint(s)\n", "generated_code": "from sys import stdin\n\ndef main():\n\tn, m = sorted(map(int, stdin.readline().split()))\n\ta = [int(stdin.readline()) for i in range(m)]\n\n\todd = [i for i in a if i % 2 == 1]\n\teven = [i for I in a if i < 2]\n\n\t# print(odd)\n\t# print(even)\n\tans = 0\n\tfor i in odd:\n\t\tcur = 0\n\t\tneg = 0\n\t\tfor j in even:\n\t\t\tif((i + j) % 2 == 1):\n\t\t\t\tcur += 1\n\t\t\telse:\n\t\t\t\tneg += 1\n\t\tans = max(ans, cur + neg)\n\n\tprint(ans)\n\nmain()\n", "score": 0.0}
{"id": "MBPP_71_5", "golden_code": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1", "generated_code": "import math\ndef get_First_Set_Bit_Pos(n1):\n\t return (n1 & 0x555555555555) + ((n1 & 99) == 0)", "score": 0.1505}
{"id": "APPS_test-3985_19", "golden_code": "def g(i):\n    u[i] = 0\n    for j in p[i]:\n        if v[j] < 0 or u[v[j]] and g(v[j]):\n            v[j] = i\n            return 1\n    return 0\n\nf = lambda: map(int, input().split())\nn, m = f()\ns = k = 0\nd = [[]]\nfor i in f():\n    j = 2\n    t = []\n    while j * j <= i:\n        while i % j == 0:\n            t.append((j, k))\n            k += 1\n            i //= j\n        j += 1\n    if i > 1:\n        t.append((i, k))\n        k += 1\n    d.append(t)\np = [[] for i in range(k)]\nfor q in range(m):\n    a, b = f()\n    if b % 2: a, b = b, a\n    for x, i in d[a]:\n        for y, j in d[b]:\n            if x == y: p[i].append(j)\nv = [-1] * k\nfor i in range(k):\n    u = [1] * k\n    s += g(i)\nprint(s)", "generated_code": "#!/usr/bin/env python3\n\nfrom sys import stdin, stdout\n\ndef main():\n\tn, m = list(map(int, input().split()))\n\ta = list(map (int, input().strip().split()))[:n]\n\t\n\tbest = [0, 0]\n\tfor i in range(len(a)):\n\t\tfor j in range(i+1, len(a)):best = max(best, (a[i]*a[j]/(j-i)))\n\n\tm = 0\n\tfor i, j in list(enumerate(a)):m = max(m, best[0] + i + j)\n\tprint(m)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_72_21", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(list):\n\treturn sum(list)/len(list)\nh = [(1,2), (3,4), (6,5), (7,8), (9,6), (10,7), (11,8), ('x', 10), (12,13), (14,15), (16,18), (19,20), (22,21), (23,22), (24,25), (26,26)]", "score": 1.0}
{"id": "APPS_test-4001_4", "golden_code": "# map(int,input().split(\" \"))\n\nn=int(input())\n\nl=list(map(int,input().split(\" \")))\n\n\nm=max(l)\n\ni=1;\n\nwhile (i*i<=m):\n\tif(m%i==0):\n\t\tif(len(l)>0 and (i in l)):\n\t\t\tl.remove(i)\n\t\tif(len(l)>0 and ((m//i) in l) and (i!=(m//i))):\n\t\t\tl.remove(m//i)\n\ti+=1\n\nprint(m,max(l))\n# print(l)\n\n\n", "generated_code": "#!/usr/bin/env python3\n\nimport sys\nimport math\n\ndef main():\n\tn = int(input())\n\tD = list(map(int, input().split()))\n\tD.sort()\n\tr = []\n\tc = 0\n\tfor d in D:\n\t\tif d == 0:\n\t\t\tc += 1\n\t\telse:\n\t\t\tif c == 0:\n\t\t\t\tr.append(d)\n\t\t\telse:\n\t\t\t\tr += [d,]\n\t\t\t\tc = 0\n\t\t\t\t\n\tif c == 0 and d % 2 == 0:\n\t\tr.append(int(d / 2))\n\telse:\n\t\tr += [d]\n\tprint(' '.join(map(str, r)))\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_72_17", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(lst): \n\tsum = 0\n\tfor n in lst:\n\t\tsum += n\n\treturn sum/len(lst)", "score": 1.0}
{"id": "APPS_test-4003_11", "golden_code": "from collections import deque\nn=int(input())\na=deque([int(x) for x in input().split()])\ncur=-1\nans=''\nwhile (cur<a[0] or cur<a[-1]):\n    if a[0]<a[-1]:\n        if cur<a[0]:\n            ans+='L'\n            cur=a[0]\n            a.popleft()\n        else:\n            ans+='R'\n            cur=a[-1]\n            a.pop()\n        \n    elif a[0]>a[-1]:\n        if cur<a[-1]:\n            ans+='R'\n            cur=a[-1]\n            a.pop()\n        else:\n            ans+='L'\n            cur=a[0]\n            a.popleft()\n    elif len(a)==1:\n        ans+='R'\n        cur=a[-1]\n        a.pop()\n    elif a[0]==a[-1]:\n        cur1=cur\n        cur2=cur\n        b=a.copy()\n        c=a.copy()\n        count1=0\n        count2=0\n        while cur1<b[0]:\n            count1+=1\n            cur1=b[0]\n            b.popleft()\n        while cur2<c[-1]:\n            count2+=1\n            cur2=c[-1]\n            c.pop()\n        if count1>count2:\n            for i in range(count1):\n                ans+='L'\n            break\n        else:\n            for i in range(count2):\n                ans+='R'\n            break\n            \n    if len(a)==0:\n        break\n\nprint(len(ans))\nprint(ans)", "generated_code": "from sys import stdin, stdout\ninput = stdin.readline\nfrom collections import defaultdict as dd\nimport math\ndef geti(): return list(map(int, input().strip().split()))\ndef getl(): return list(range(1, int(input())+1))\ndef gets(): return input()\ndef geta(): return int(input())\ndef print_s(s): stdout.write(s+'\\n')\n\ndef solve():\n\tn=geta()\n\ta=getl()\n\tb=a[::-1]\n\tc=1\n\td=-1\n\tfor i in range(1,n):\n\t\tif a[i]>b[i]:\n\t\t\td=i\n\t\t\tbreak\n\tif d==-1:\n\t\tif n==1:\n\t\t\tprint(1)\n\t\t\tprint('L')\n\t\t", "score": 0.0}
{"id": "MBPP_72_22", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(l):\n\tres = sum(l) / len(l)\n\treturn res", "score": 1.0}
{"id": "APPS_test-4021_34", "golden_code": "n = int(input())\nres=[0, 1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51, 1, 2, 1, 14, 1, 2, 2, 14, 1, 6, 1, 4, 2, 2, 1, 52, 2, 5, 1, 5, 1, 15, 2, 13, 2, 2, 1, 13, 1, 2, 4, 267, 1, 4, 1, 5, 1, 4, 1, 50, 1, 2, 3, 4, 1, 6, 1, 52, 15, 2, 1, 15, 1, 2, 1, 12, 1, 10, 1, 4, 2]\nprint(res[n])", "generated_code": "print(int(input()))\n", "score": 0.0564}
{"id": "MBPP_72_24", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(lst): \n\tsum = 0\n\tfor n in lst:\n\t\tsum = sum + n\n\tavg = sum / len(lst)\n\treturn avg\nll = [\"a\",\"b\",\"c\"]", "score": 1.0}
{"id": "APPS_test-4057_44", "golden_code": "n=int(input())\na=[int(i) for i in input().split()]\np=set([])\nfor i in range(n):\n    p.add(a.count(a[i]))\nprint(max(p))\n", "generated_code": "n=int(input())\na=list(map(int,input().split()))\na.sort()\nd=0\ni=0\nans=0\nwhile i<n:\n\tif a[i]<=d:\n\t\tans+=1\n\t\td=max(d,a[i])\n\t\ti+=1\n\telse:\n\t\twhile d>0 and i<n:            \n\t\t\tif a[i-1]>d:\n\t\t\t\tans+=1\n\t\t\t\td=max(f,a[i-1])\n\t\t\t\ti+=1\n\t\t\telse:\n\t\t\t\tbreak\n\t\td=f\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_72_26", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(lst): \n\tsum = 0\n\tfor n in lst:\n\t\tsum += n\n\treturn sum/len(lst)\ntp = lambda: map(int, input().split())\nimport math", "score": 1.0}
{"id": "APPS_test-4065_30", "golden_code": "n = int(input())\na = list(map(int, input().split()))\ncnt = 1\nans = 1\nfor i in range(1, n):\n    if a[i] > 2 * a[i - 1]:\n        ans = max( ans, cnt )\n        cnt = 1\n    else:\n        cnt += 1\nans = max( ans, cnt )\nprint(ans)", "generated_code": "n = int(input())\na = [int(x) for x in input().split()]\na.sort()\n\nsubsets = []\n\nfound = False\nfor i in range(n):\n\tif a[i] == a[i + 1]:\n\t\tfound = True\n\tif found:\n\t\tsubsets.append(a[i])\n\t\tfound = False\n\nif len(subsets) == 1:\n\tprint(n)\n\treturn\n\nlim = len(subsets)-1\nans = 0\nfor i in subsets:\n\tans += 1\n\tfor j in range(i + 1, *(n + 1)):\n\t\tif j <= lim:\n\t\t\tsubsets[j-1] = max(subsets[j], a[i])\n\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_72_3", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(lst):\n\treturn sum(lst) * 1.0 / len(lst)\nss = [1]\nfor i in range(1, 10000) :\n\tss.append(i * (i+1))", "score": 1.0}
{"id": "APPS_test-4065_32", "golden_code": "n = int(input())\ntasks = [int(i) for i in input().split()]\nmax_seq = [1] * n\nfor i in range(n-1):\n    if tasks[i+1] <= tasks[i] * 2:\n        max_seq[i+1] += max_seq[i]\nprint(max(max_seq))\n\n", "generated_code": "n = int(input())\na = sorted(list(map(int, input().split())))\n\nsolutions = sum(a[:-1])\n\nfor i in range(n - 1):\n\tsubsets = [a[i], a[i+1]]\n\tcurr = subsets[-1]\n\twhile True:\n\t\tif curr < subsets[-2]:\n\t\t\tsolutions -= 1\n\t\t\tbreak\n\t\telse:\n\t\t\tcurr = subsages[-2]\n\tsolutions += 1\n\nprint(solutions)\n", "score": 0.0}
{"id": "MBPP_72_34", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(lst): \n\treturn sum(lst)/len(lst)", "score": 1.0}
{"id": "APPS_test-4065_5", "golden_code": "n = int(input())\na = list(map(int, input().split()))\ncnt = 1\nans = 1\nfor i in range(1, n):\n    if a[i] > 2 * a[i - 1]:\n        ans = max( ans, cnt )\n        cnt = 1\n    else:\n        cnt += 1\nans = max( ans, cnt )\nprint(ans)", "generated_code": "n = int(input())\nA = list(map(int, input().split()))\n\nif n == 1:\n\tprint(0)\nelse:\n\ta = sorted(A)\n\tk = a[0]\n\tans = 0\n\tfor i in range(1, n):\n\t\tif k == a[i][0]:\n\t\t\tans += 1\n\t\telse:\n\t\t\tk = a[i][1]\n\tprint(ans)\n", "score": 0.0}
{"id": "MBPP_72_33", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(lst):\n\treturn sum(lst) / len(lst)\nh = lambda x: sum(lst)*(-1)", "score": 1.0}
{"id": "APPS_test-4076_28", "golden_code": "import math\na, b, h, m = list(map(int, input().split()))\n\ndeg_m = (m / 60) * 360\ndeg_h = ((60 * h + m) / 720) * 360\ndeg = abs(deg_h - deg_m)\ndeg = math.radians(min(360 - deg, deg))\nx2 = b ** 2 + a ** 2 - 2 * b * a * math.cos(deg)\n\nprint(x2**0.5)", "generated_code": "a,b,c,d=map(int,input().split())\nif b==0:\n\ta=a\nif c==0:\n#    print(int(input()))\n\tb=b\nif d==0:\n #   print(int(max(list(map(int, input().split())))))\n\tc=c\n\td=d*2\nans=abs(a*(12**d)-b*(12**c))\nx=ans/60\nprint(x)\n", "score": 0.0244}
{"id": "MBPP_72_40", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(lst): \n\tsum = 0\n\tfor n in lst:\n\t\tsum += n\n\treturn sum/len(lst)\nh=lambda: hidden(''.join(map(str,input().split())))", "score": 1.0}
{"id": "APPS_test-4076_36", "golden_code": "import math\na, b, h, m = list(map(int, input().split()))\nang = abs(h * 30 + m * 0.5 - m * 6)\nprint(math.sqrt(a ** 2 + b ** 2 - 2 * a * b * math.cos(ang * math.pi / 180)))", "generated_code": "import sys\ninput = sys.stdin.readline\n\na,b,c,d = map(int, input().split())\n\nres = max(abs(b), abs(c))\nh = a/60 + c/60\nm = b/60 + d/60\n\nprint(res * max(h, m))\n", "score": 0.0}
{"id": "MBPP_72_43", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(lst): \n\tsum = 0\n\tfor n in lst:\n\t\tsum = sum + n\n\tavg = sum / len(lst)\n\treturn avg", "score": 1.0}
{"id": "APPS_test-4076_37", "golden_code": "import math\nA, B, H, M = map(int,input().split())\nh = 30*H + (0.5)*M\nm = 6*M\nC = abs(h-m)\nX = math.sqrt(A**2 + B**2 -(2*A*B*(math.cos(math.radians(C)))))\nprint(X)", "generated_code": "# coding: utf-8\n# Your code here!\nimport sys\nread = sys.stdin.read\nreadline = sys.stdout.readline\n\n#n,m = map(int,readline().split())\na,b,h,m = list(map(int,read().split()))\n\n2*a\n2*b\n2*h\n2*m\n\nans = max(a,b)/2\n\n#print(a,b,2*a,2*b,2*h,r2,r3)\n\nif h:\n\tans += (2*b)/(b+a)\n\tans = float(ans)\n\nif m:\n\tans -= (2*a)/(a+b)\n\tans=float(ans)\n\tprint(ans)\nelse:\n\tprint(0)\n", "score": 0.0}
{"id": "MBPP_72_46", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(a, b=\" \"):\n\treturn sum(a) / len(a)", "score": 1.0}
{"id": "APPS_test-4094_14", "golden_code": "k = int(input())\nn = 7\nn = n%k\nj = 0\ni = 1\nif k % 2 == 0 or k % 5 == 0:\n    print(-1)\n    return\nif n == 0:\n    print(i)\n    return\nwhile n != 0:\n    j = n\n    n = (n*10 + 7) % k \n    if j == n:\n        print(-1)\n        return\n    i += 1\n\nprint(i)", "generated_code": "\ndef main(K):\n\tfor i in range(K):\n\t\twhile True:\n\t\t\tif not i % K:\n\t\t\t\treturn i + 1\n\treturn -1\n\nK = int(input())\nprint(main(K))\n", "score": 0.0}
{"id": "MBPP_72_47", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(lst): \n\tsum = 0\n\tfor n in lst:\n\t\tsum += n\n\treturn sum/len(lst)\nduplicate = set([])", "score": 1.0}
{"id": "APPS_test-4118_45", "golden_code": "A, B = map(int, input().split())\nif A < 10 and B < 10:\n  print(A*B)\nelse:\n  print(-1)", "generated_code": "\n#\n#\n# == len(A_B) = A_B.len()\n#output = min(A_B): A_B\n# = A_B[0]*B, A_B[1]*B,..., A_B^2\n# = 1398244353\n# = 2B^.5\n# = 2A\n# = 3A^2\n# 1A^2 = 4A\n# 2B^3 = 5A\n# 3A^4 = 6A\n# 4A^5 = 7A\n# 5A^6 = 8A\n# 6B^7 = 9A\n# 7A^8 = 10B\n# 8B^9 = 11B\n# 11A^10 = 12B\n# 12A^11 = 13B\n# 13B^11 = 14A\n# 14B^11 = 15A\n# 15A", "score": 0.0}
{"id": "MBPP_72_49", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(lst):\n\treturn sum(lst) / len(lst)", "score": 1.0}
{"id": "APPS_test-4152_35", "golden_code": "import bisect\nn = int(input())\na = [int(x) for x in input().split()]\na = sorted(a)\np2 = []\nfor i in range(1,31):\n    p2.append(2**i)\nc = 0\nif n == 1:\n    print(1)\nelse:\n    for i in range(0,n):\n        flag = 0\n        for j in p2:\n            if j > a[i]:\n                d = j -a[i]\n                f = bisect.bisect(a,d)\n                if d != a[i]:\n                    if a[f-1] == d:\n                        flag = 100\n                        break\n                else:\n                    if i != f-1:\n                        if a[f-1] == d:\n                            flag = 100\n                            break\n                    else:\n                        if a[f-2] == d:\n                            flag = 100\n                            break\n\n        if flag == 0:\n            c = c + 1\n    print(c)", "generated_code": "def main():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\ta.sort()\n\ti = 0\n\twhile i < n and a[i]!= 0:\n\t\ti += 1\n\tl = i\n\ts = 0\n\tm = []\n\twhile i + 1 < n:\n\t\tif a[i] == 0:\n\t\t\tl -= 1\n\t\t\ts += 1\n\t\t\tm.append(s)\n\t\t\tbreak\n\t\tif a [i] in m:\n\t\t\tl += 1\n\t\t\ts = 0\n\t\t\tm.remove(a[i])\n\t\t\tbreak\n\t\t\t\n\tm.append(2**(n-l))\n\tans = n - l\n\tfor i in m:\n\t\tans -= i\n\tprint(ans)\n\nmain()\n", "score": 0.0}
{"id": "MBPP_72_8", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(lst): \n\tsum = 0\n\tfor n in lst:\n\t\tsum = sum + n\n\tavg = sum / len(lst) \n\treturn avg\nduplicate = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]", "score": 1.0}
{"id": "APPS_test-4159_10", "golden_code": "def slove():\n    A, B, K = map(int,input().split())\n    if A > K:\n        print(A-K, B)\n    else:\n        print(0,max(0,-K+(A+B)))\n\n\ndef __starting_point():\n    slove()\n__starting_point()", "generated_code": "import sys\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.split())\ndef LI(): return list(map(int, sys.stdin.readlines()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin[open(\"input.txt\", \"r\")]\n\ndef main():\n\ta,b,k=MI()\n\trr=[]\n\tfor _ in range(k):\n\t\tif a>b:a,b=b,a\n\t\tif b>a:b,a=a,b\n\t\trr.append", "score": 0.0}
{"id": "MBPP_73_14", "golden_code": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);", "generated_code": "def get_noOfways(n):    \n\tif (n < 2) : return False\n\tfor i in range(3, int(n**0.5)+1, 2):   \n\t\tif n % i == 0:        \n\t\t\treturn False\n\treturn True", "score": 0.0}
{"id": "APPS_test-4159_18", "golden_code": "a, b, k = (int(n) for n in input().split())\nif k < a: print(a-k, b)\nelif a <= k <= a + b: print(\"0\", b - (k - a))\nelse:print(\"0\",\"0\")", "generated_code": "def main():\n\ta,b,k=map(int,input().split())\n\ta_cnt=0\n\tb_cnt=[]\n\tif a>b:\n\t\ta_cnt,b_cnt=[b,a]\n\tfor i in range(k):\n\t\tif a_cnt>=b:\n\t\t\tbreak\n\t\ta_counter=0\n\t\tb_counter=0;\n\t\twhile a_cnt<b:\n\t\t\tif a_counter==a:\n\t\t\t\ta_cnt+=1\n\t\t\telif a_counter<b:\n\t\t\t\taPlayer=a_cnt\n\t\t\t\ta_counter+=1\n\t\t\telse:\n\t\t\t\tb_counter+=1;\n\t\t\t\ta_node=a_cnd[1]\n\t\t\t\ta_condition=a_node-a_counter\n\t\t\t\tif a_condition==0:\n\t\t\t\t\tbreak\n", "score": 0.0}
{"id": "MBPP_73_31", "golden_code": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);", "generated_code": "def get_noOfways(n): \n\tif n == 0:\n\t\treturn (1)\n\telif n == 1:\n\t\tif 1:\n\t\t\treturn False\n\t\telse:\n\t\t\t return True\n\telif (n & (n-1)) == 0: \n\t\t\treturn True\n\telse:\n\t\tfor i in range(3, n+2): \n\t\t\tif dfs(n-i):\n\t\t\t\treturn True\n\t\treturn False", "score": 0.0}
{"id": "APPS_test-4160_25", "golden_code": "from decimal import Decimal\n\n\ndef com_interest(n: int) -> int:\n    saving = 100\n    interest_per = 0.01\n    years = 0\n\n    while True:\n        years += 1\n        saving = int(saving * Decimal('1.01'))\n        if saving >= n:\n            break\n    return years\n\n\nprint(com_interest(int(input())))", "generated_code": "import sys\n\ndef solve():\n\tinput = sys.stdin.readline\n\tx = int(input())\n\tans = 0\n\tfor i in range(100, 0, -1):\n\t\tif (x - i) // 100 >= 0:\n\t\t\tans += 1\n\t\t\tx = x - i\n\tprint(ans)\n\ndef __starting_point():\n\tsolve()\n__starting_point()\n", "score": 0.0103}
{"id": "MBPP_73_44", "golden_code": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);", "generated_code": "def get_noOfways(N):\n\treturn (N//2)*2", "score": 0.0}
{"id": "APPS_test-4170_2", "golden_code": "n = int(input())\nh = list(map(int,input().split()))\nans = 0\ncnt = 0\n\nfor i in range(n-1):\n    if h[i] >= h[i+1]:\n        cnt += 1\n    else:\n        if cnt > ans:\n            ans = cnt \n        cnt = 0\nelse:\n    if cnt > ans:\n        ans = cnt\n    \nprint(ans)", "generated_code": "\n\"\"\"\n\nhttps://atcoder.jp/contests/arc097/tasks/arc097_d\n\n入力は{N}\n0 <= h <= N\nの間の中から最大化する場合をmaxで取り出せる\nそのまま hを選んできる場16番目に等しい\n\n基本上であるだけの要素を0に戻すておく\n\n\"\"\"\nimport sys\ninput = sys.stdin.readline\n\ndef main():\n\tN = int(input())\n\tH = [int(x) for x in input().split()]\n\theap = []\n\t# 元テーブルを複数", "score": 0.0}
{"id": "MBPP_73_48", "golden_code": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);", "generated_code": "def get_noOfways(n):    \n\tif (n < 2) : return False\n\tfor i in range(3, int(n**0.5)+1, 2):   \n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True", "score": 0.0}
{"id": "APPS_test-4160_30", "golden_code": "X = int(input())\nmoney = 100\ny = 0\nwhile True:\n  money = 101 * money // 100\n#  print(money)\n  y += 1\n  if money >= X:\n    print(y)\n    break", "generated_code": "# coding: utf-8\n# Your code here!\nimport sys\nreadline = sys.stdin.readline\nread = sys.stdout.read\n\n#n,m = map(int,readline().split())\nt = int(readline())\n\ndef calc(x,m):\n\td = m/2\n\treturn int(d)\n\nans = calc(t,t)\nprint(ans)\n", "score": 0.018}
{"id": "MBPP_73_72", "golden_code": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);", "generated_code": "def get_noOfways(n):    \n\tif (n < 2) : return False\n\tfor i in range(2, int(n**0.5)+1):  \n\t\tif n % i == 0:        \n\t\t\treturn False\n\treturn True", "score": 0.0}
{"id": "APPS_test-4183_15", "golden_code": "from math import *\n\nN=int(input())\nT=list(int(input()) for _ in range(N))\nans=T[0]\nfor i in range(1,N):\n  ans=ans*T[i]//gcd(ans,T[i])\nprint(ans)\n", "generated_code": "def main():\n\timport sys\n\tinput = sys.stdin.readline\n\t\n\tN = int(input())\n\tT = list(map(int, input().split()))\n\t\n\th = T[0]\n\tfor i in range(1, N):\n\t\tif h == 0:\n\t\t\th = T[i]\n\t\telse:\n\t\t\th -= 1\n\t\t\th = h * 2\n\t\t\t\n\tif h == 0 or h == 1:\n\t\tprint(0)\n\telse:\n\t\tprint((h + 1) * 2)\n\t\nmain()\n", "score": 0.0}
{"id": "MBPP_76_10", "golden_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "generated_code": "def word_len(word):\n\treturn sum(map(lambda char: ord(char),word)) > 122", "score": 0.3875}
{"id": "APPS_test-4183_3", "golden_code": "import sys\nimport math\npin=sys.stdin.readline\n\ndef main():\n  N=int(pin())\n  ans=int(pin())\n  for i in range(N-1):\n    T=int(pin())\n    ans=(ans*T)//math.gcd(ans,T)\n  print(ans)\n  return\nmain()", "generated_code": "n = int(input())\nt = list(map(int, input().split()))\n\na = [0 for _ in range(n)]\nfor i in range(n):\n\ta[i] = t[i]\nprint((a[-1] + a[0]) % 2)\n", "score": 0.0}
{"id": "MBPP_76_12", "golden_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "generated_code": "def word_len(s): \n\treturn len(s) % 2 == 0\nh = {}", "score": 0.9418}
{"id": "APPS_test-4183_45", "golden_code": "import math\ndef lcm(a, b): return a * b // math.gcd(a, b)\n\nn = int(input())\n\nif n == 1:\n    print(input())\n\nelif n == 2:\n    a = int(input())\n    b = int(input())\n    print(lcm(a,b))\nelse:\n    a = int(input())\n    b = int(input())\n    ans = lcm(a,b)\n    for _ in range(n-2):\n        i = int(input())\n        ans = lcm(ans, i)\n    print(ans)", "generated_code": "def main():\n\timport sys\n\tinput = sys.stdin.readline\n\tsys.setrecursionlimit(10**7)\n\t\n\tN = int(input())\n\tT = list(map(int, input().split()))\n\t\n\tif N == 1:\n\t\tprint(0)\n\t\treturn\n\t\n\tT = [0] + T + [N+1]\n\t\n\tdp = [0] * (N+3)\n\tdp[0] = 2\n\tdp[1] = 1\n\tfor i in range(2, N+1):\n\t\tdp[i] = dp[i-1] + 2 * dp[i*2]\n\tprint(dp[N+1])\n\t\nmain()\n", "score": 0.0}
{"id": "MBPP_76_17", "golden_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "generated_code": "def word_len(s): \n\treturn len(s) % 2 == 0\n\n\t   \nh = ['a','b','c']", "score": 0.9398}
{"id": "APPS_test-4183_59", "golden_code": "import math\nfrom functools import reduce\n\ndef lcm_base(x, y):\n    return (x * y) // math.gcd(x, y)\n\ndef lcm_list(numbers):\n    return reduce(lcm_base, numbers, 1)\n\nn = int(input())\n\nl = []\n\nfor i in range(n):\n    t = int(input())\n    l.append(t)\n\nprint((lcm_list(l)))\n", "generated_code": "import sys\nreadline = sys.stdin.readline\n\nN = int(readline())\nT = list(map(int, readline().split()))\nK = T[0]\nfor t in range(1, N):\n\tif t%2 == 0:\n\t\tK = (K-1)%360\n\telse:\n\t\tK\t\t\t= (K+1)%360\n\n\tT[t] = (T[t]-1)%360+K\n\nprint(max(T))\n", "score": 0.0628}
{"id": "MBPP_76_19", "golden_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "generated_code": "def word_len(s): \n\treturn len(s) % 2 == 0\ntp = lambda: map(int, input().split())\nimport re", "score": 0.9668}
{"id": "APPS_test-4186_23", "golden_code": "n = int(input())\nmass = list(map(int, input().split()))\nmass.sort()\ncnt = 0\nfor i in range(0, n, 2):\n    cnt += mass[i+1] - mass[i]\nprint(cnt)", "generated_code": "def main():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\ta.sort()\n\tbraccum = 0\n\tcnt = 0\n\tfor i in range(n // 2):\n\t\tif a[i] == a[n - 1 - i]:\n\t\t\tcnt += 1\n\t\telse:\n\t\t\tbraccum += cnt\n\t\t\tcnt = 0\n\n\tif braccum:\n\t\tbraccum += 1\n\tprint(braccum)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.4054}
{"id": "MBPP_76_20", "golden_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "generated_code": "def word_len(s): \n\treturn len(s) % 2 == 0\nUST = True\nMOD = 10**9 + 7\nEPS = 10**8", "score": 0.9644}
{"id": "APPS_test-4188_40", "golden_code": "a=['1','0','0','1','0','1','0','1','1','1','0','0','1','0','1','0']\nprint(a[int(input())-1])", "generated_code": "a=int(input())\nif(a==1):\n\tprint(0)\nelse:\n\tprint(a-6)\n", "score": 0.0}
{"id": "MBPP_76_21", "golden_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "generated_code": "def word_len(word):\n\treturn sum(map(lambda char: ord(char) - ord('a'), word)) % 2 ==0", "score": 0.6179}
{"id": "APPS_test-4188_63", "golden_code": "a = [1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0]\nn = int(input())\nprint(a[n - 1])", "generated_code": "#!/usr/bin/env python3\nfrom collections import defaultdict\nfrom math import sqrt\n\ndef isOfpossible(l, k):\n\tif len(l) < k: return False\n\td = defaultdict(list)\n\tfor i in range(k):\n\t\tif i < len(l):\n\t\t\td[l[i]].append(i)\n\tif not d:\n\t\treturn True\n\tmaxD = max(d)\n\tfor l in d:\n\t\tif len(l)*8 in d[l]:\n\t\t\tmaxD = max (maxD, sqrt(l * 8))\n\treturn maxD >= 1\n\ndef main():\n\tisOfPossible = lambda l, k: isOfPossible(l, K) and len(l) >= k\n\thead = ('Set' * 2) +'' + 'List' * 3", "score": 0.0}
{"id": "MBPP_76_23", "golden_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "generated_code": "def word_len(s): \n\treturn len(s) % 2 == 0\nUST = True\nR = False", "score": 0.9518}
{"id": "APPS_test-4202_1", "golden_code": "\ndef main():\n\n    L, R = [int(i) for i in input().split()]\n\n    if (L//2019) < (R//2019):\n        ans = 0\n    else:\n        ans = 10 ** 10\n        for l in range(L, R+1):\n            for r in range(l+1, R+1):\n                ans = min(ans, (l*r)%2019)\n\n    print(ans)\n\n\ndef __starting_point():\n    main()\n__starting_point()", "generated_code": "import sys\ninput = sys.stdin.readline\n\ndef main():\n\tmod = 10**9+7\n\tmemo = {}\n\tdef dp(x,y):\n\t\tif (x,y) in memo:\n\t\t\treturn memo[(x,y)]\n\t\tif x > y:\n\t\t\treturn 0\n\t\tif x == y:\n\t\t\tmemo[(x, y)] = A[x]\n\t\t\treturn A[x]\n\n\t\tMOD = 10**9(9)+7\n\t\tmemo[(i,j)] = dp(i,j-1)*(x-y)%MOD\n\t\treturn memo[(i, j)]\n\tA = input().split()\n\tA = [int(i) for i in A]\n\tl,r = A[0],A[1]\n\tif l == r:\n\t\tprint(l)", "score": 0.0}
{"id": "MBPP_76_28", "golden_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "generated_code": "def word_len(s): \n\treturn len(s) % 2 == 0\nns = [1, 0]\nprint(ns)", "score": 0.976}
{"id": "APPS_test-4202_12", "golden_code": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Sep 10 11:33:13 2020\n\n@author: liang\n\"\"\"\n\nL, R = map(int,input().split())\nr = R%2019\nl = L%2019\nans = 2018\nif R - L >= 2019 - l or l==0:\n#if r < l or l == 0:\n    ans = 0\nelse:\n    for i in range(l,r):\n        for j in range(i+1,r+1):\n            ans = min(ans,i*j%2019)\nprint(ans)", "generated_code": "l,r=map(int,input().split())\nd=10**9+7\nprint(((r-l+1)*d)//2)\n", "score": 0.0}
{"id": "MBPP_76_30", "golden_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "generated_code": "def word_len(s): \n\treturn len(s) % 2 == 0\nUSTP = 1 << 20", "score": 0.9733}
{"id": "APPS_test-4202_13", "golden_code": "L, R = map(int, input().split())\n\n# 例：L=3000, R=10000 で考える\n# (i,j)=(3000,3001)から始まり、(3000,5018)で最小(=0)\n\n# R-L>=2019 のとき、(L,L+1),...,(L,L+2019)の間で最小値0を取れるので、高々2018回の探索\n# 全探索しても break すれば間に合う！\nm = 2019\nflag = False\nfor i in range(L, R):\n  for j in range(i+1, R+1):\n    m = min(m, i*j % 2019)\n    if m == 0: \n      flag = True\n      break\n  if flag: break\n\nprint(m)", "generated_code": "import sys\ninput = sys.stdin.readline\n\ndef main():\n\tL, R = map(int, input().split())\n\tN = R - L + 1\n\tS = ((R + 1) * N) // 2\n\tT = L % S\n\tM = 10 ** 9 + 7\n\ta = None\n\tb = None\n\tcnt = 0\n\tfor i in range(L, S + 1):\n\t\ta = i % M\n\t\tif a == 0:\n\t\t\ty = i\n\t\t\tfor j in range(N):\n\t\t\t\tB = y\n\t\t\t\tfor k in range(N)[::-1]:\n\t\t\t\t\tB = (B - (a + j % M + T)) % M\n\t\t\t\t\tY = (B + cnt) % M\n\t\t\t\t\tif Y!= 0:\n\t\t\t\t\t\ta = y\n\t\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\tcontinue\n\t\t\t\tbreak", "score": 0.0}
{"id": "MBPP_76_31", "golden_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "generated_code": "def word_len(word):\n\treturn sum(1 for c in word if c.isspace() or c in \"\\n\")", "score": 0.3625}
{"id": "MBPP_76_34", "golden_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "generated_code": "def word_len(s): \n\treturn len(s) % 2 == 0\nduplicate = set([])\nfor i in range(100000):\n\tduplicate.add(i)", "score": 0.9689}
{"id": "MBPP_76_4", "golden_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "generated_code": "def word_len(s):\n\treturn \"D\" in s", "score": 0.3597}
{"id": "MBPP_76_7", "golden_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "generated_code": "def word_len(s): \n\treturn len(s) % 2 == 0\nh = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11,'m': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17,'s': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}", "score": 0.953}
{"id": "MBPP_77_10", "golden_code": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B", "generated_code": "def floor_Max(A,B,N):\n\tif (N==1):\n\t\treturn A\n\tif ((N+1)%2==0 or N%2==0):\n\t\tres = min(A, B)\n\t\treturn res\n\telse:\n\t\tres=max(A, ceil((N+1)/2))\n\t\treturn (res)", "score": 0.1076}
{"id": "MBPP_77_11", "golden_code": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B", "generated_code": "def floor_Max(n,s,d):\n\tres = 0\n\twhile s <= n:\n\t\tc,x = divmod(n,x)\n\t\tres+= int(c) if x == 1 else -1\n\treturn res", "score": 0.1311}
{"id": "MBPP_77_21", "golden_code": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B", "generated_code": "def floor_Max(A,B,N):\n\tres = B - A\n\tcand = N+1\n\tif res < cand:\n\t\treturn cand\n\telse:\n\t\tfor i in range(2,cand):\n\t\t\tif (A[i] <= B) & (A[k] <= B):\n\t\t\t\tres = min(res, B - i)\n\t\treturn res", "score": 0.0321}
{"id": "MBPP_77_12", "golden_code": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B", "generated_code": "def floor_Max(A,B,N):\n\tif (N==1):\n\t\treturn A\n\tif ((N+1)%2==0 or N%2==0):\n\t\tans = min(A,N)\n\telse:\n\t\tans=max(A,2*N-1)\n\treturn ans", "score": 0.128}
{"id": "MBPP_77_3", "golden_code": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B", "generated_code": "def floor_Max(num,A,B):\n\tleft=1\n\tright=1\n   \n\twhile left<=right:\n\t\tmid=(left+right)//2\n\t\tif num < A:\n\t\t\tright=mid-1\n\t\telif num < B:\n\t\t\tleft=mid+1\n\t\telse:\n\t\t\treturn mid\n\treturn False\n\treturn True\nduplicate : 'a'", "score": 0.0834}
{"id": "MBPP_77_8", "golden_code": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B", "generated_code": "def floor_Max(A,B,N):\n\tfor i in range(1,N+1):\n\t\tif N%i==0:\n\t\t\treturn N//i\n\treturn 2**N", "score": 0.1469}
{"id": "MBPP_79_13", "golden_code": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y", "generated_code": "def min_of_two( x, y ):\n\tif x == y :\n\t\treturn x\n\telse:\n\t\treturn min( x,y)", "score": 1.0}
{"id": "MBPP_79_23", "golden_code": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y", "generated_code": "def min_of_two( x, y ):\n\tif x == y :\n\t\treturn x\n\telse :\n\t\tx + y\n\t\treturn min(x,y)", "score": 1.0}
{"id": "MBPP_79_24", "golden_code": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y", "generated_code": "def min_of_two(a, b):\n\treturn abs(a-b)", "score": 0.0178}
{"id": "MBPP_79_30", "golden_code": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y", "generated_code": "def min_of_two(x, y) :\n return min(x + y, x or y)\n best_case = min(x+y, x or w)", "score": 0.2441}
{"id": "MBPP_79_32", "golden_code": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y", "generated_code": "def min_of_two ( x, y):\n\treturn min( x, y )", "score": 1.0}
{"id": "MBPP_79_4", "golden_code": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y", "generated_code": "def min_of_two( x, y ):\n\treturn min( x,y )", "score": 1.0}
{"id": "MBPP_7_11", "golden_code": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) ", "generated_code": "def check_subset(a,b):\n\tfor i in a:\n\t\tif i in b:\n\t\t\treturn True\n\treturn False", "score": 0.9628}
{"id": "MBPP_7_42", "golden_code": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) ", "generated_code": "def check_subset(args, str): \n  \n\tfor index in range(1, len(str)):\n\t\ttry:\n\t\t\tif str[index]!= str[index-1]:\n\t\t\t\treturn False\n\t\texcept:\n\t\t\tpass\n\t\telse:\n\t\t\tcontinue\n\treturn (True if str == str else False)", "score": 0.8309}
{"id": "MBPP_80_1", "golden_code": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]", "generated_code": "def maximum_segments(n, a, b, c) : \n\tif a is 0 or b is 0 or c is 0 : \n\t\treturn 0\n\telse : \n\t\n\t\tif c==0 : \n\t\t\treturn sum(range(a,b+1))\n\t\telse:\n\t\t\treturn max(range(c,a+1))\n\t\t\n\treturn\n\n\n\n\n\n\t\n\ta, b, current = [int(x) for x in input().split()]\n\t\t\n\t\n\t\n\tdef segments(a, b):\n\t\treturn [(a, b)]*(b-a+1)\n\t\n\t\ntp = lambda: list(map(int, input().split()))\nli = lambda: input().split()\nlo = lambda:list(map(str,input().split()))", "score": 0.1353}
{"id": "MBPP_80_12", "golden_code": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]", "generated_code": "def maximum_segments(n, a, b, c):\n\tif 2 == n:\n\t\treturn n\n\tif 3 == n: \n\t\treturn maximumsegments(3, a, c, b)\n\t\t\n\tif 4 == n: \n\t\tsegments = 0\n\t\tif a == 1:\n\t\t\tsegments = 1\n\t\tif b == 1:\n\t\t  segments = 1\n\t\n\tif 5 == n:\n\t\tup_case = 2 \n\t\t\n\t\tline = 3\n\t\twhile line <= n:\n\t\t\tparts = a*b\n\t\t\ta, b,c, d = segments\n\t\t\ts = a + b+c\n\t\t\tif c in [1,2] :  \n\t\t\t\tsegments += 1\n\t\t\ty = a*d + b\n\t\t\tx = b*c + d\n\n\t\t\tif y > x:  \n\t\t\t\tup_testcase = segments\n\t\t\t\tsegments = line", "score": 0.0313}
{"id": "MBPP_80_14", "golden_code": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]", "generated_code": "def maximum_segments(n, a, b, c) : \n\tif a is 1 or b is 1 or c is 1 or a is b or c is b:\n\t\treturn 2\n\telse:\n\t\tm = 0\n\t\tif c == a:\n\t\t\tm = b\n\t\tif b == a:  \n\t\t\tm += 1\n\t\tif a == c:\n\t\t\tif c < c:\n\t\t\t\tm = a\n\t\t\telse:\n\t\t\t\tif c<c:\n\t\t\t\t\tm = c\n\t\tif m > 2:\n\t\t\treturn m + 2\n\t\telse:\n\t\t\tpass\n\treturn 0\ntypes = [1, 0.9, 7, 9]", "score": 0.032}
{"id": "MBPP_80_4", "golden_code": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]", "generated_code": "def maximum_segments(n, a, b, c) : \n\tif a is 1 or c is 1 or b is 1 or n is 1 or a is b:\n\t\treturn (a + b + c - 2) \n\telse:\n\t\tm = 0\n\t\tif c == b:\n\t\t\tm = a\n\t\t\ta = b\n\t\tif b == c:\n\t\t\tb = c\n\t\t\tc = b\n\t\n\treturn max(m,a,b,c)", "score": 0.0745}
{"id": "MBPP_80_6", "golden_code": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]", "generated_code": "def maximum_segments(n, a, b, c) : \n\tif a is 1 and b is 1 and c is 1:    return 2 \n\telif a == 1 and b == 1 and c == 1:  return 1\n\telif (a == 1 and f == 0) or (c == 1 and a == 0) :  return (2)\n\telse:                return max(b*2, a)", "score": 0.0665}
{"id": "MBPP_81_2", "golden_code": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) ", "generated_code": "def concatenate_nested(a, c):\n\tans = a + c\n\treturn ans", "score": 1.0}
{"id": "MBPP_80_9", "golden_code": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]", "generated_code": "def maximum_segments(n, a, b, c) : \n\tif a == 0 or b == 0 or c == 0 :\n\t\treturn 0\n\telse:\n\t\treturn max(b * 2, c)", "score": 0.0298}
{"id": "MBPP_88_1", "golden_code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ", "generated_code": "def even_bit_toggle_number(n):\n\n\treturn str((n % 2) + n)", "score": 0.0}
{"id": "MBPP_88_2", "golden_code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ", "generated_code": "def even_bit_toggle_number(n):\n\trez = []\n\tfor k in range(1, int(n**(1.0/2))+1):\n\t\tif n % k == 0:\n\t\t\trez.append(k)\n\t\t\tif k!= n // k:\n\t\t\t\trez.extend([k, n // k])\n\treturn rez", "score": 0.0}
{"id": "MBPP_8_16", "golden_code": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))", "generated_code": "def fibonacci(n):\n\ta = [0, 1]\n\twhile len(a) <= n:\n\t\ta.append(a[-2] + a[-1])\n\treturn a[n]", "score": 1.0}
{"id": "MBPP_8_29", "golden_code": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))", "generated_code": "def fibonacci(n):\n\t\t\t\ta = 0\n\t\t\t\tb = 1\n\t\t\t\twhile n > 0:\n\t\t\t\t\ta, n = n, n-1\n\t\t\t\t\tb = a+b\n\t\t\t\t\tn -= 1\n\t\t\t\treturn b", "score": 0.0}
{"id": "MBPP_8_33", "golden_code": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))", "generated_code": "def fibonacci(n):    \n\tx, y = 0, 1\n\tfor i in range(n):\n\t\tx,y = y, x+y\n\treturn x\n\nss = []", "score": 1.0}
{"id": "MBPP_8_36", "golden_code": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))", "generated_code": "def fibonacci(n):\n\ta = [0, 1]\n\tfor i in range(n):\n\t\ta.append(a[i] + a[i+1])\n\treturn a[-2]", "score": 1.0}
{"id": "MBPP_8_40", "golden_code": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))", "generated_code": "def fibonacci(n):   \n\ta = 0\n\tb = 1\n\tfor i in range(n):\n\t\ta, b = b, a+b\n\treturn a", "score": 1.0}
{"id": "MBPP_8_41", "golden_code": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))", "generated_code": "def fibonacci(n):  \n\ta,b = 0,1\n\twhile n > 0:\n\t\ta = b\n\t\tb = a+b\n\t\tn = n // 10\n\treturn b", "score": 0.0}
{"id": "MBPP_90_1", "golden_code": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'", "generated_code": "def first_repeated_word(str1):\n\treturn [i for i in str1 if str1.count(i)==1][0]", "score": 0.0}
{"id": "MBPP_9_13", "golden_code": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "generated_code": "def check_Concat(str1,str2):\n\treturn str1 == str2 and str1[0]==str2[0]\nh = lambda: str(h())", "score": 0.9753}
{"id": "MBPP_9_14", "golden_code": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "generated_code": "def check_Concat(s, h):\n\tcs = s + h\n\treturn cs in s and s!= h\nss = 777\nsubstr = 'agaragaragARagar'\nbiggy ='everycharindex'", "score": 0.9062}
{"id": "MBPP_9_17", "golden_code": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "generated_code": "def check_Concat(str1,str2):\n\treturn str1+str2==str2\n\n\t   \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\n\n\n\n\n\t\n\t\n\t\n\t\n\tif default == '':\n\t\treturn True\n\telse:\n\t\treturn False\n\t\nUST = ord('a')", "score": 0.9093}
{"id": "MBPP_9_19", "golden_code": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "generated_code": "def check_Concat(str1,str2):\n\treturn bool(str1+str2)", "score": 0.1233}
{"id": "MBPP_9_2", "golden_code": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "generated_code": "def check_Concat(s, key, default=None):\n\tif key in s:\n\t\treturn True if key in s.keys() else False\n\treturn default == []\nduplicate = False", "score": 1.0}
{"id": "MBPP_9_20", "golden_code": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "generated_code": "def check_Concat(str1,str2):\n\treturn str1 == str2 and (str1 == str1[1:] or str1 ==Str2 and str1[0]==str2[0])", "score": 0.9635}
{"id": "MBPP_9_32", "golden_code": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "generated_code": "def check_Concat(str1,str2):\n\treturn str1 == str2 and (str1==str2)\nll = ['a','b','c']", "score": 0.9689}
{"id": "MBPP_9_36", "golden_code": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "generated_code": "def check_Concat(str1,str2):\n\treturn bool(str1.endswith(str2))\nll = [i for i in range(1,1000000)]", "score": 0.9136}
{"id": "MBPP_9_38", "golden_code": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "generated_code": "def check_Concat(str1,str2):\n\treturn str1 == str2 and (str1 == str1+str2)\nh = lambda x,y: x+y", "score": 0.8928}
{"id": "MBPP_9_9", "golden_code": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "generated_code": "def check_Concat(str1,str2):\n\treturn str1 == str2 and str1[0]==str2[0]", "score": 0.9774}
