{"id": "APPS_test-0715_15", "golden_code": "a=input()[2:]\nb=input()[2:]\nc=input()[2:]\nd=input()[2:]\n\nL=[a,b,c,d]\nS=\"ABCD\"\nx=0\ne=[]\nfor i in range(4):\n    l=True\n    s=True\n    for j in range(4):\n        if(j==i):\n            continue\n        if(len(L[i])<len(L[j])*2):\n            l=False\n        if(len(L[j])<len(L[i])*2):\n            s=False\n    if(l and not s):\n        x+=1\n        e.append(i)\n    elif(s and not l):\n        x+=1\n        e.append(i)\nif(x==1):\n    print(S[e[0]])\nelse:\n    print(\"C\")\n", "generated_code": "def check(string):\n\tl = len(string)\n\tif l == 1:\n\t\tif string[0] == 'A':\n\t\t\treturn 'A'\n\t\telse:\n\t\t\treturn 'B'\n\telif l == 2:\n\t\tif type(string) =='str':\n\t\t\treturn string\n\t\telse: return 'C'\n\tel = int(l/2)\n\tif t[1] == 'X':\n\t\tt = string[0:t[0]]\n\telif t[1:] == 'X':t = string[t[0:-1]:]\n\tfor i in range(len(t)):\n\t\tif t[i] == '_':\n\t\t\tcontinue\n\t\telse:return string[0:i]\n\treturn 'D'\n\na = input()\nb = input()\nc = input()\nd = input()\n\n", "score": 0.0}
{"id": "APPS_test-0839_12", "golden_code": "import sys, itertools\n\nf = sys.stdin\ng = []\nfor i in range(5):\n    g.append( [int(u) for u in f.readline().strip().split()] )\n\n\np_all = itertools.permutations(list(range(5)))\nmax_S = 0\nfor p in p_all:\n    S = g[p[0]][p[1]] + g[p[1]][p[0]] + g[p[2]][p[3]] + g[p[3]][p[2]] \n    S += g[p[1]][p[2]] + g[p[2]][p[1]] + g[p[3]][p[4]] + g[p[4]][p[3]]\n    S += g[p[2]][p[3]] + g[p[3]][p[2]] + g[p[3]][p[4]] + g[p[4]][p[3]]\n    max_S = max(S, max_S)\n\nprint(max_S)\n", "generated_code": "s = input()\nres = 0\ni = 0\nwhile i < len(s):\n\tj = i\n\tsm = 0\n\twhile j < len(s) and s[j] =='':\n\t\tsm += 1\n\t\tj += 1\n\tsm -= 1\n\tres += sm\n\ti += 1\nprint(res)\n", "score": 0.0}
{"id": "APPS_test-3764_1", "golden_code": "n, k, x = map(int, input().split())\nrangers = list(map(int, input().split()))\nfor i in range(min(k, 8 + (k & 3))):\n\trangers.sort()\n\trangers = [rangers[i] if (i & 1) else rangers[i] ^ x for i in range(n)]\nrangers.sort()\nprint(rangers[-1], rangers[0])", "generated_code": "def main():\n\tn, k, x = list(map(int, input().split()))\n\tl, r, s = list(map (int, input().from_line())), [], []\n\tfor i in range(n):\n\t\ts.append(l[i] ^ x)\n\tfor _ in range(k):\n\t\ttmp = int(1 << (x.bit_length() - 1))\n\t\tl.append(tmp)\n\t\tfor i in range((x.bit_depth() - 1) * 2 + 1):\n\t\t\td = tmp >> i & 1\n\t\t\tl.append(l [i] ^ tmp)\n\ti, j = 0, 0\n\tfor k in range(min(k, x.bit_length())):\n\t\tj = i ^ 1\n\t\tif k:\n\t\t\tl[j] += 1\n\t\ti += 1\n\t", "score": 0.0}
{"id": "MBPP_6_25", "golden_code": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False", "generated_code": "def are_Rotations(a, b):\n\treturn 2 * len(a) == 2 * len (b)", "score": 0.9036}
{"id": "MBPP_79_23", "golden_code": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y", "generated_code": "def min_of_two( x, y ):\n\tif x == y :\n\t\treturn x\n\telse :\n\t\tx + y\n\t\treturn min(x,y)", "score": 1.0}
{"id": "MBPP_23_23", "golden_code": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ", "generated_code": "def same_Length(a,b): \n\tif a==b: \n\t\t return True\n\telif a<b: \n\t  return True if (a==b) else False\n\telse: \n\t  if (a>b): \n\t   return True\n\t  else: \n\t   return False", "score": 0.3581}
{"id": "APPS_test-2596_21", "golden_code": "n, k, m, t = input().split()\nn, k, m, t = int(n), int(k), int(m), int(t)\n\nfor i in range(t):\n    what, pos = input().split()\n    what, pos = int(what), int(pos)\n    if what == 0:\n        if pos >= k:\n            n = pos\n        else:\n            n = n-pos\n            k = k-pos\n    else:\n        n += 1\n        if pos <= k:\n            k += 1\n    print(n, end=\" \")\n    print(k)\n\n\n", "generated_code": "n,k,m,t=list(map(int,input().split()))\na=[]\nfor i in range(t):\n\tx=input().split()\n\tif(x[0]==\"1\"):\n\t\ta.append(int(x[1]))\n\telse:\n\t\tb=a[::]\n\t\ta.pop()\n\t\ta.insert(0,int(x[2]))\nfor i in a:\n\tprint(i,end=\" \")\n", "score": 0.0}
{"id": "MBPP_306_3", "golden_code": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ", "generated_code": "def remove_matching_tuple(test_string, test_sequence):\n\tif (test_string in test_sequence and test_sequence in test_set):\n\t\treturn (test_sequence.get(test_sequence, test_string) )\n\telse:\n\t\treturn (\"Unsupport test_sequence by test_sequence[test_sequence] = test_string\")", "score": 0.0}
{"id": "MBPP_68_10", "golden_code": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res ", "generated_code": "def subset(ar, k): \n return k and sum(x for x in ar[0:k]) or 0", "score": 0.0033}
{"id": "MBPP_20_37", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(n):return (1 <<(n.bit_length()-1))", "score": 0.0956}
{"id": "MBPP_2_4", "golden_code": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2", "generated_code": "def min_Num(arr, n) : \n\t\ta = -1\n\t\tb = arr.index(min(arr))\n\t\tif n==b: return a\n\t\treturn b", "score": 0.1953}
{"id": "MBPP_59_3", "golden_code": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim", "generated_code": "def count_elim(num): \n\treturn sum([1 for e in [num] if e!= 0 ])", "score": 0.1616}
{"id": "APPS_test-3985_17", "golden_code": "def g(i):\n    u[i] = 0\n    for j in p[i]:\n        if v[j] < 0 or u[v[j]] and g(v[j]):\n            v[j] = i\n            return 1\n    return 0\n\nf = lambda: list(map(int, input().split()))\nn, m = f()\ns = k = 0\nd = [[]]\nfor i in f():\n    j = 2\n    t = []\n    while j * j <= i:\n        while i % j == 0:\n            t.append((j, k))\n            k += 1\n            i //= j\n        j += 1\n    if i > 1:\n        t.append((i, k))\n        k += 1\n    d.append(t)\np = [[] for i in range(k)]\nfor q in range(m):\n    a, b = f()\n    if b % 2: a, b = b, a\n    for x, i in d[a]:\n        for y, j in d[b]:\n            if x == y: p[i].append(j)\nv = [-1] * k\nfor i in range(k):\n    u = [1] * k\n    s += g(i)\nprint(s)\n", "generated_code": "from sys import stdin\n\ndef main():\n\tn, m = sorted(map(int, stdin.readline().split()))\n\ta = [int(stdin.readline()) for i in range(m)]\n\n\todd = [i for i in a if i % 2 == 1]\n\teven = [i for I in a if i < 2]\n\n\t# print(odd)\n\t# print(even)\n\tans = 0\n\tfor i in odd:\n\t\tcur = 0\n\t\tneg = 0\n\t\tfor j in even:\n\t\t\tif((i + j) % 2 == 1):\n\t\t\t\tcur += 1\n\t\t\telse:\n\t\t\t\tneg += 1\n\t\tans = max(ans, cur + neg)\n\n\tprint(ans)\n\nmain()\n", "score": 0.0}
{"id": "APPS_test-0538_35", "golden_code": "s=input()\nn=10\nwhile(n and s!=s[::-1]):\n    s='0'+s\n    n-=1\nif n==0:\n    print(\"NO\")\nelse:\n    print(\"YES\")", "generated_code": "n = int(input())\nif n == 1:\n\tprint('YES')\nelse:\n\tm = str(n)\n\tmx = m[::-1]\n\tok = True\n\tfor i in range(len(m)):\n\t\tif m[i] == '0':\n\t\t\tcontinue\n\t\tif mx[i]!= m[i]:\n\t\t\tok = False\n\t\t\tbreak\n\tif ok:\n\t\tprint('YES') or print('NO')\n\telse:\n\t\tprint(\"NO\")\n", "score": 0.8372}
{"id": "APPS_test-0389_23", "golden_code": "def gcd(a, b):\n    while(b != 0):\n        a %= b\n        t = a\n        a = b\n        b = t\n    return a\n\ndef main():\n    a, b = list(map(int, input().split(' ')))\n    gg = gcd(a, b)\n    ans = 0\n    can = 1\n    A = []\n    A.append(a / gg)\n    A.append(b / gg)\n    for g in A:\n        while(g != 1):\n            ok = 0\n            if g % 2 == 0:\n                g = g / 2\n                ok = 1\n                ans = ans + 1\n            if g % 3 == 0:\n                g = g / 3\n                ok = 1\n                ans = ans + 1\n            if g % 5 == 0:\n                g = g / 5\n                ok = 1\n                ans = ans + 1\n            if ok == 0:\n                can = 0\n                break\n    \n    if can == 0:\n        print(\"-1\")\n    else:\n        print(ans)\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "import sys\n\ndef f(x, y):\n\tif x > y:\n\t\treturn 0\n\tif x < y:\n\t\ty = x\n\tif x % y == 0:\n\t\treturn y\n\treturn f(x // y, y) + 1\n\na, b = list(map(int, input().split()))\n\nprint(f(a, b) if a == b else -1)\n", "score": 0.9012}
{"id": "MBPP_17_21", "golden_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "generated_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \n\treturn bin(n)[2] == bin(l)[2] and bin(r)[2] in '02468'", "score": 0.5452}
{"id": "MBPP_443_2", "golden_code": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\"", "generated_code": "def first_repeated_char(s):        return s[:-3]", "score": 0.0414}
{"id": "APPS_test-0594_2", "golden_code": "n, m = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\nmax_a = max(max(a), 2 * min(a))\n\nwrong_pass = True\nfor c in b:\n    if c <= max_a:\n        wrong_pass = False\n        break\n\nif wrong_pass:\n    print(\"%d\" % max_a)\nelse:\n    print(\"-1\")", "generated_code": "f = lambda: map(int, input().split())\nn, m = f()\nt = list(f())\ns = sorted(enumerate(t), key=lambda x: x[1])\nk = m\nv = []\nfor i in range(m):\n\tans = s[i][1] - s[i - 1][1]\n\tif ans <= k and f()!= [1] * n: continue\n\tv.append(-1)\nprint('\\n'.join(map(str, v)))\n", "score": 0.0}
{"id": "MBPP_72_26", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(lst): \n\tsum = 0\n\tfor n in lst:\n\t\tsum += n\n\treturn sum/len(lst)\ntp = lambda: map(int, input().split())\nimport math", "score": 1.0}
{"id": "APPS_test-0854_30", "golden_code": "def sum(a):\n    s = 0\n    for i in a:\n        s += i\n    return s\n\nn, T = map(int, input().split())\na = list(map(int, input().split()))\n\nsum = sum(a)\n\nk = 0\nk += n * (T // sum)\nT %= sum\n\nnew_a = []\nnew_sum = 0\nch = True\nwhile ch:\n    for i in range(n):\n        if a[i] <= T:\n            new_a.append(a[i])\n            new_sum += a[i]\n            k += 1\n            T -= a[i]\n\n    n = len(new_a)\n\n    if n == 0:\n        ch = False\n        break\n\n    sum = new_sum\n    a = new_a\n    new_a = []\n    new_sum = 0\n\n    k += n * (T // sum)\n    T %= sum\n\n\nprint(k)", "generated_code": "n, t = map(int, input().split())\na = list(map(int, input(\"\").strip().split()))\nd = [0]*n\nb = [0]\nfor i in range(n):\n\td[i] = a[i]\n\tif i + 1 < n:\n\t\td[i+1] = max(d[i], a[i+1])\nans = 0\nfor i in d:\n\tans += i\nprint(ans)\n", "score": 0.1552}
{"id": "MBPP_138_2", "golden_code": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]", "generated_code": "def jacobsthal_lucas(n): \n\treturn (n * 2) - 2", "score": 0.0}
{"id": "APPS_test-1298_53", "golden_code": "n = int(input())\na = input()\nkol1 = 0\nkol0 = 0\nfor i in range(len(a)):\n    if a[i] == \"1\":\n        kol1 += 1\n    else:\n        kol0 += 1\nprint(abs(kol1 - kol0))\n", "generated_code": "import sys\n\ndef main():\n\tn = int(sys.stdin.readline())\n\ts = sys.stdin. readline().strip()\n\tx, y = 0, 0\n\tfor i in range(n):\n\t\tif s[i] == '0':\n\t\t\tx += 1\n\t\telse:\n\t\t\ty += 1\n\tprint(max(min(x, y), n - min(x, y)))\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0138}
{"id": "APPS_test-0377_11", "golden_code": "n, m = list(map(int, input().split()))\nif m <= n / 2:\n    print(max(m, 1))\nelse:\n    print(n - m)\n", "generated_code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\n\n\ndef solve(n, m, tree):\n\tright_ct = [0 for _ in range(n)]\n\ttree[n-1] = 1\n\tfor i in range(n-2, -1, -1):\n\t\tif tree[i] == 1:\n\t\t\tn_left = 0\n\t\t\tn_right = 0\n\t\t\twhile m > 0:\n\t\t\t\tn_left += 1\n\t\t\t\tn_right += 1\n\t\t\t\tm -= 1\n\t\t\tright_ct[i] = n_left\n\t\telse:\n\t\t\tright_dt[i] = 0\n\t\t\t\n\tleft_ct = 0\n\tright_dt = 0\n\tfor i, (j, v) in enumerate(zip(tree, right_ct)):\n\t\tright_ct", "score": 0.0}
{"id": "MBPP_9_32", "golden_code": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "generated_code": "def check_Concat(str1,str2):\n\treturn str1 == str2 and (str1==str2)\nll = ['a','b','c']", "score": 0.9689}
{"id": "APPS_test-2134_15", "golden_code": "n=int(input())\nlst1=list(map(int,input().split()))[:n]\nlst2=list(map(int,input().split()))[:n]\ndict={}\nfor a in lst1:\n    if a in dict:\n        dict[a]+=1\n\n    else:\n        dict[a]=1\n\n\nans=0\ngrp=[]\n\nfor k in dict:\n    if(dict[k]>1):\n        grp.append(k)\n\n\n\nfor i in range(n):\n    for k in grp:\n        \n        if(lst1[i]|k==k):\n            ans +=lst2[i]\n            break\nprint(ans)\n", "generated_code": "from sys import stdin\ninput = stdin.readline\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map (int, input(). split()))\n\ntriangle = [0] * n\n\nif not any(a):\n\tprint(0)\n\treturn\n\nfor i in range(n):\n\tif i == 0:\n\t\ttriangle[i] = b[i]\n\telse:\n\t\ttrisequence[i] = triangle[i-1] + b[i]\n\n\n \nsm = 0\nfor i in triangle:\n\tif i > sm:\n\t\tsm += i\n\nans = \"\"\nfor i in trie:\n\tans += str(bin(i))[2:].zfill(sm-len(ans))\n\t\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_11_23", "golden_code": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm", "generated_code": "def lcm(x, z):\n\tfrom fractions import gcd\n\treturn gcd(x,z) < 2\n\n\n\n\nUSTPIPULNES = 48220\n\n\"\"\"\n\treturn 0\n\"\"\"", "score": 0.0664}
{"id": "MBPP_31_45", "golden_code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "generated_code": "def smallest_multiple(n):\n  if n == 1 or n == 2:\n\t  return 1", "score": 0.1758}
{"id": "MBPP_9_13", "golden_code": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "generated_code": "def check_Concat(str1,str2):\n\treturn str1 == str2 and str1[0]==str2[0]\nh = lambda: str(h())", "score": 0.9753}
{"id": "MBPP_17_38", "golden_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "generated_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \n\treturn bin(n)[2:] == list(range(l,r))", "score": 0.6}
{"id": "MBPP_76_7", "golden_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "generated_code": "def word_len(s): \n\treturn len(s) % 2 == 0\nh = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11,'m': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17,'s': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}", "score": 0.953}
{"id": "MBPP_31_28", "golden_code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "generated_code": "def smallest_multiple(n): return n and 1 > (n-1 or -1)", "score": 0.1654}
{"id": "APPS_test-1317_49", "golden_code": "from math import ceil\nn, m = map(int, input().split())\nans = 0\nfor i in range(1, m + 1):\n    for j in range(1, m + 1):\n        if (i ** 2 + j ** 2) % m == 0:\n            ch1, ch2 = ceil((n - i + 1) / m), ceil((n - j + 1) / m)\n            ans += ch1 * ch2\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n\nn,m=list(map(int,input().split()))\nANS=n\na,b=1,2\nif n%(a*b)==0:\n\tprint(a*b//2)\n\treturn\n\nfor i in range(1,n//a+1):\n\tif i*a%b==0:\n\t\tANS=ANS-i*a//b\n\t\tbreak\n\t\nif m==1:\n\tprint(\"1\")\n\treturn\nelif m==2:\n\tprint((n-1)*(n**2//5))\n\treturn\nprint(ANS)\n", "score": 0.0}
{"id": "MBPP_88_1", "golden_code": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ", "generated_code": "def even_bit_toggle_number(n):\n\n\treturn str((n % 2) + n)", "score": 0.0}
{"id": "APPS_test-1290_45", "golden_code": "n, m = list(map(int, input().strip().split()))\narr = list(map(int, input().strip().split()))\nrslt = [0]*n\nfor x in arr:\n    rslt[x-1] += 1\nprint(min(rslt))\n", "generated_code": "import math\n\nn, m = map(int, input().split())\nc = [int(i) for i in input().split()]\nans = 0\nrow = 0\ncol = 0\ns = 0\n\nfor i in range(n):\n\tfor j in range(m):\n\t\tif c[i] == 1:\n\t\t\ts += 1\n\t\t\tif s == m:\n\t\t\t\tcol = i\n\t\t\t\ts = 0\n\t\t\t\trow = i\n\t\t\t\tcol = j\n\t\t\t\tans += (row+1)*(col+1)\n\t\t\telse:\n\t\t\t\trow =i\n\t\t\t\tcol =j\n\t\t\t\tans += row*col\n\t\t\t\trow = n-1\n\t\t\t\tcol = m-1\n\t\t\t\ts = m*(m+1)/2\n\t\t\t\tans += s\n\t\t\t# print(ans, row, col)\nprint(ans)\n", "score": 0.0258}
{"id": "MBPP_20_31", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(n) : \n\tif (n % 2)  : \n\t\treturn True        \n\telse :\n\t\treturn False", "score": 1.0}
{"id": "MBPP_76_4", "golden_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "generated_code": "def word_len(s):\n\treturn \"D\" in s", "score": 0.3597}
{"id": "MBPP_31_21", "golden_code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "generated_code": "def smallest_multiple(n) :\n\tif n == 1:\n\t\treturn 1\n\tif (n//2)*(n//2) == n:\n\t\tnn = n//(2)+1\n\telse:\n\t\t nn = n//2\n\treturn nn", "score": 0.1552}
{"id": "MBPP_34_7", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x):\n\treturn (x//2)*2", "score": 0.0711}
{"id": "APPS_test-0636_51", "golden_code": "n,k=map(int,input().split())\nL=list(map(int,input().split()))\nfor i in range(n):\n    L[i]=(L[i],i)\nL.sort()\nans=0\nA=[]\nind=0\nwhile(ind<len(L) and k>=L[ind][0]):\n    ans+=1\n    A.append(L[ind][1]+1)\n    k-=L[ind][0]\n    ind+=1\nprint(ans)\nfor item in A:\n    print(item,end=\" \")\n", "generated_code": "n,k = list(map(int,input().split()))\ns = list(map (int,input().strip().split()))[:n]\nprint(len(set(s)))\nfor i in range(len(s)):\n\tif s[i]==1:\n\t\tprint(i+1)\n\t\tbreak\n", "score": 0.0234}
{"id": "MBPP_43_120", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):\n\treturn s == '1' or s == '0'", "score": 0.8287}
{"id": "APPS_test-4076_37", "golden_code": "import math\nA, B, H, M = map(int,input().split())\nh = 30*H + (0.5)*M\nm = 6*M\nC = abs(h-m)\nX = math.sqrt(A**2 + B**2 -(2*A*B*(math.cos(math.radians(C)))))\nprint(X)", "generated_code": "# coding: utf-8\n# Your code here!\nimport sys\nread = sys.stdin.read\nreadline = sys.stdout.readline\n\n#n,m = map(int,readline().split())\na,b,h,m = list(map(int,read().split()))\n\n2*a\n2*b\n2*h\n2*m\n\nans = max(a,b)/2\n\n#print(a,b,2*a,2*b,2*h,r2,r3)\n\nif h:\n\tans += (2*b)/(b+a)\n\tans = float(ans)\n\nif m:\n\tans -= (2*a)/(a+b)\n\tans=float(ans)\n\tprint(ans)\nelse:\n\tprint(0)\n", "score": 0.0}
{"id": "MBPP_46_2", "golden_code": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot", "generated_code": "def multiply_list(nums):\n\tnums = [int(x) * 10 for x in nums]\n\treturn sum(nums)", "score": 0.0207}
{"id": "APPS_test-1915_19", "golden_code": "def a(i, j):\n    if i == 1 or j == 1:\n        return 1\n    return a(i - 1, j) + a(i, j - 1)\n\nn = int(input())\nprint(a(n, n))", "generated_code": "n=int(input())\nif n==1:\n\tprint(1)\n\treturn\nsu=int(n*(n+1)/2)\nans=0\nfor i in range(n):\n\tans+=su\n\tsu-=1\nprint(ans)\n", "score": 0.0}
{"id": "APPS_test-1303_13", "golden_code": "def f (x1, y1, x2, y2):\n    return x1 <= x2 <= y1 or x1 <= y2 <= y1 or x2 <= x1 <= y2\n\np, q, l, r = list(map(int, input().split()))\na1, a2 = [(0, 0)] * p, [(0, 0)] * q\nfor i in range(p):\n    a, b = list(map(int, input().split()))\n    a1[i] = (a, b)\nfor i in range(q):\n    a, b = list(map(int, input().split()))\n    a2[i] = (a, b)\nres = [False] * 2000\nans = 0\nfor i in a1:\n    for j in a2:\n        for k in range(max(0, i[0] - j[1]), i[1] - j[0] + 1):\n            res[k] = True\nfor i in range(l, r + 1):\n    if res[i]:\n        ans += 1\nprint(ans)\n", "generated_code": "def main():\n\tp, q, l, r = list(map(int, input().split()))\n\treg = {}\n\tindex = []\n\tfor i in range(p):\n\t\tb, a = list(map(_int, input(). split()))\n\t\tif not a in reg:\n\t\t\treg[a] = []\n\t\treg[a].append(b)\n\t\tindex.append(b)\n\n\tfor i in index:\n\t\trev =list(reversed(reg[i]))\n\t\tcord = sort([rev, list(reg[i])])\n\t\ttimes = [cord[0] -(-cord[1]+1)]\n\t\tfor j in range(len(cord)):\n\t\t\tt = list(reversed([x-cord[j] for x in hand]))\n\t\t\ttt = list(re not in reg[i])", "score": 0.0}
{"id": "MBPP_68_20", "golden_code": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res ", "generated_code": "def subset(ar, num):\n\t\"\"\" http://www.have-myzout.com/collections\\.org/test-size/\n\t\"\"\"\n\treturn len(set(map(str, ar)))", "score": 0.2237}
{"id": "MBPP_34_85", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x):\n\n  return x % 4 == 0", "score": 0.6172}
{"id": "MBPP_40_12", "golden_code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "generated_code": "import datetime\ndef check_date(m, d, y):\n\tif m and d and y > y:\n\t\treturn m.find(s)\n\treturn False", "score": 0.8042}
{"id": "APPS_test-2406_47", "golden_code": "n = int(input());tot = sum(map(int, input().split()));extra = (n * (n - 1))//2;smol = (tot - extra) // n;out = [smol + i for i in range(n)]\nfor i in range(tot - sum(out)):out[i] += 1\nprint(' '.join(map(str,out)))    ", "generated_code": "def main():\n\tn = int(input())\n\th = list(map(int, input().split()))\n\tres = [0] * n\n\tfor i in range(n - 1):\n\t\tj = i + 1\n\t\twhile j < n and h[j] - h[i] > 2:\n\t\t\tj += 1\n\t\tif j == n:\n\t\t\tj -= 1\n\t\twhile i < n - 1 and h[i] - h[j] > 1:\n\t\t\tres[i] += 1\n\t\t\ti += 1\n\tprint(*res)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "APPS_test-0940_16", "golden_code": "A = list(map(int, input().split()))\nA = sorted(A)\nprint(max(0, A[2] - A[0] - A[1] + 1))", "generated_code": "import sys\nreadline = sys.stdin.readline\n\nA = list(map(int, readline().split()))\nA.sort()\n\nfor i in range(len(A)-1):\n\tif A[i] < A[i+1]:\n\t\tA[i] += A[i+ 1]\n\t\t\nif len(A) == 1:\n\tprint(0)\nelse:\n\tprint((A[-1] + A[-2])//2)\n", "score": 0.0}
{"id": "MBPP_62_9", "golden_code": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()", "generated_code": "import re\ndef num_position(s):\n\tpos = 0\n\tfor i in range(len(s)):\n\t\tif s[i] == '0':\n\t\t\tpos = i\n\t\t\tbreak\n\treturn pos", "score": 0.1191}
{"id": "MBPP_190_3", "golden_code": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]", "generated_code": "def two_unique_nums(nums):\n    return nums.count(4)", "score": 0.0}
{"id": "MBPP_34_55", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x):\n\tif x%2==0:\n\t   return True\n\telse:\n\t   return False\nss = []\nfor i in range(100000):\n\tss.append(i*2)\nprint(ss)\nns = list(ss)", "score": 1.0}
{"id": "MBPP_50_5", "golden_code": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product", "generated_code": "def mutiple_tuple(nums):\n\t\treturn sum(map(int, nums))", "score": 0.1718}
{"id": "MBPP_571_1", "golden_code": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ", "generated_code": "def frequency_Of_Largest(n,arr): \n\treturn max([n for n in arr])", "score": 0.0094}
{"id": "APPS_test-0750_14", "golden_code": "def ii():\n    return int(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\n\nn, k = mi()\nans = (n * 2 + k - 1) // k + (n * 5 + k - 1) // k + (n * 8 + k - 1) // k\nprint(ans)\n", "generated_code": "import sys\n\ndef main():\n\tn, k = map(int, input().split())\n\tres = 0\n\tfor _ in range(n):\n\t\tres += aInt(k)\n\t\tk -= 1\n\tprint(res)\n\treturn\n\naInt = lambda c: int(c) - 1\n", "score": 0.0}
{"id": "APPS_test-3786_11", "golden_code": "inflos = int(input())\nroots = [int(x) - 1 for x in input().split()]\n \n\ndepth = [0]\nfor v in range(inflos - 1):\n    depth.append(depth[roots[v]] + 1)\n\nfreq = {}\n\nfor d in depth:\n    if d in freq:\n        freq[d] += 1\n    else:\n        freq[d] = 1\nres = 0\nfor d in freq:\n    res+= freq[d]%2\nprint(res)\n", "generated_code": "n=int(input())\na=list(map(int,input().split()))\na.sort()\nx=float('inf')\nc=0\nfor i in range(n):\n\tx=min(x,a[i])\n\tc+=1\nprint(c)\n", "score": 0.1712}
{"id": "APPS_test-1312_33", "golden_code": "n,m=map(int,input().split())\nprint(*[n//m+1 if i<n%m else n//m for i in range(m)])", "generated_code": "n, m = list(map(int, input().split()))\na = [0] * m\nfor i in range(m):\n\ta[i] = int(input())\na.sort()\nans = [0]*m\nj = 0\nfor i in reversed(range(m)):\n\tif i!= j:\n\t\tans[i] = ans[j] + a[i]\n\t\tj += 1\nprint(' '.join(map(str, ans)))\n", "score": 0.0}
{"id": "APPS_test-1874_23", "golden_code": "l3, l4, l5 = map(int, input().split())\nv3 = l3 ** 3 / (6 * 2 ** 0.5)\nv4 = l4 ** 3 / (3 * 2 ** 0.5)\nv5 = l5 ** 3 / 12 * (5 * (3 + 5 ** 0.5) / 2) ** 0.5\nprint(v3 + v4 + v5)", "generated_code": "l = [int(i) for i in input().split()]\n\nt = 1\np = 0\nf = 0\n\nfor i in range(1, len(l)):\n\tsol = l[i]*(t*l[i-1]+p*l[i]+f*l[i])\n\tp += t*l[i]\n\tf += l[i]\n\nprint(sol)\n", "score": 0.0}
{"id": "APPS_test-2144_76", "golden_code": "import math\ndef okay(n):\n    ans=n\n    i=2\n    while i*i<=n:\n        if n%i==0:\n            while n%i==0:\n                n=int(n/i)\n            ans-=int(ans/i)\n        i+=1\n    if n>1:\n        ans-=int(ans/n)\n    return ans\nt=int(input())\nwhile t:\n    t-=1\n    a,m=list(map(int,input().split()))\n    print(okay(int(m/math.gcd(a,m))))\n            \n", "generated_code": "from math import gcd\nfor _ in range(int(input())):\n\ta, m = map(int, input().split())\n\tx = m // a\n\tans = x * (x + 1) // 2\n\tif m % a!= 0:\n\t\tans -= 1\n\tprint(ans)\n", "score": 0.0}
{"id": "MBPP_72_34", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(lst): \n\treturn sum(lst)/len(lst)", "score": 1.0}
{"id": "MBPP_20_27", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(n):\n\ts = n % 2\n\tcondition = lambda x: x == 0 and s\n\treturn condition(s)", "score": 0.5495}
{"id": "MBPP_40_22", "golden_code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "generated_code": "import datetime\ndef check_date(m, d, y):\n\tif m and d and y and m and d:\n\t\treturn True\n\telse:\n\t\ty, m, d = m, d, m\n\treturn False", "score": 0.224}
{"id": "APPS_test-3718_24", "golden_code": "n=int(input())\nl=sorted(set(map(int,input().split())))\nfor i in range(1,len(l)-1):\n    if l[i]-l[i-1]==1 and l[i+1]-l[i]==1: print('YES'); break\nelse: print('NO')", "generated_code": "import sys\nn = int(input())\na = list(map(int, input().split()))\nb = set()\nc = []\nfor i in range(n):\n\tb.add(a[i])\n\tc.append(a[i]-min(a[i],2))\n\t\nif len(b) > 2:\n\tprint(\"NO\")\nelse:\n\tprint (\"YES\")\n", "score": 0.2228}
{"id": "MBPP_71_31", "golden_code": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1", "generated_code": "import math\ndef get_First_Set_Bit_Pos(n):\n\t\n\treturn float(n) / 2", "score": 0.0695}
{"id": "MBPP_40_3", "golden_code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "generated_code": "import datetime\ndef check_date(m, d, y):\n\tif m and d and y and m and d:\n\t\treturn True\n\treturn False\ncandidates = {\n\t\t'english': ['01', '02', '03'],\n\t\t'21': ['01','02','03','04'],\n\t\t\n\t}", "score": 0.3103}
{"id": "MBPP_45_8", "golden_code": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] ", "generated_code": "def coin_change(S, m, n): \n\treturn n*S.count(m)", "score": 0.2952}
{"id": "MBPP_23_14", "golden_code": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ", "generated_code": "def same_Length(A,B): \n\tif len(str(A))==len(str(B)): \n\t\treturn True\n\treturn False\nns = [1,5,7,11]", "score": 0.6265}
{"id": "MBPP_33_3", "golden_code": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ", "generated_code": "def count_Unset_Bits(n=0):\n\tcount=0\n\twhile n>0:\n\t\tcount+=1\n\t\tn=n&(2**(len(bin(n))-2))   \n\treturn(count)\n\n\n\n\n\n\n\n\n\n\n\t'''\n\tn = int(input())\n\t\n\tn : the number of bits to use in the binary representation\n\twe will check if n is a power of 2 and binary should return the number of set bits (p_bits) with 1as the count of 1's in n as the count of the number of 1 in that position.\n\t'''", "score": 0.0889}
{"id": "APPS_test-0564_5", "golden_code": "n,s=map(int,input().split())\nalist=[int(x) for x in input().split()]\n\nalist.sort()\n\nif sum(alist[:(n-1)])<=s:\n    print(\"YES\")\nelse:\n    print(\"NO\")", "generated_code": "n, s = list(map(int, input().split()))\n\na = list(map (int, input().replace(' ', '') ))\n\nx = []\n\nfor i in a:\n\tx.append(i)\n\nx = sorted(x)\n\nif len(x) % 2 == 0:\n\tprint('NO')\nelse:\n\tprint ('YES')\n\n\n\n#print(x)\n", "score": 0.449}
{"id": "APPS_test-0501_16", "golden_code": "l, r = list(map(int, input().split()))\nl -= 1\nif l == 0:\n    ar1 = []\nelse:\n    ar1 = [1]\nsum1 = 1\nwhile sum1 < l:\n    if sum1 + ar1[-1] * 2 <= l:\n        sum1 += ar1[-1] * 2\n        ar1.append(ar1[-1] * 2)\n    else:\n        ar1.append(l - sum1)\n        sum1 = l\n\nar2 = [1]\nsum2 = 1\nwhile sum2 < r:\n    if sum2 + ar2[-1] * 2 <= r:\n        sum2 += ar2[-1] * 2\n        ar2.append(ar2[-1] * 2)\n    else:\n        ar2.append(r - sum2)\n        sum2 = r\n\nsum1_odd = sum(ar1[::2])\nsum1_even = sum(ar1[1::2])\nsum2_odd = sum(ar2[::2])\nsum2_even = sum(ar2[1::2])\np = 10 ** 9 + 7\nprint((sum2_odd ** 2 + sum2_even ** 2 + sum2_even - sum1_odd ** 2 - sum1_even ** 2 - sum1_even) % p)\n", "generated_code": "a,b=map(int,input().split())\nn=int((a+b-1)**0.5)\nprint(n*(n+1)//2-max(n,0)+n+1)\n", "score": 0.019}
{"id": "APPS_test-1738_37", "golden_code": "def prefix(s):\n    p = [0]\n    for i in range(1, len(s)):\n        j = p[-1]\n        while j > 0 and s[j] != s[i]:\n            j = p[j - 1]\n        if s[i] == s[j]:\n            j += 1\n        p.append(j)\n    return p\n\n\ns = input()\nn = len(s)\nans = [0] * (n + 1)\ni = n - 1\n\nwhile i >= 0:\n    p = prefix(s[i:])\n    ans[i] = 2 + ans[i + 1]\n    for j in range(len(p)):\n        z = 1\n        if (j + 1) % (j + 1 - p[j]) == 0:\n            z = (j + 1) // (j + 1 - p[j])\n        res = len(str(z)) + (j + 1) // z + ans[i + j + 1]\n        ans[i] = min(ans[i], res)\n    i -= 1\n\nprint(ans[0])\n", "generated_code": "s=input()\nn=len(s)\nans=0\nif n==1:\n\tprint(len(s))\n\treturn\nif n==2:\n\tif s[0]==s[1]:\n\t\tprint(2)\n\t\treturn\n\telse:\n\t\tprint(3)\n\t\treturn 3\nfor i in range(n-1):\n\tcurr=s[i]\n\tnex=s[i+1]\n\tfor j in range(i+2,n):\n\t\tnex=nex==s[j]\n\t\tif curr==nex:\n\t\t\tans+=1\n\t\t\tif i!=j-2:\n\t\t\t\tans+=1\n\t\telse:\n\t\t\tbreak\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_77_21", "golden_code": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B", "generated_code": "def floor_Max(A,B,N):\n\tres = B - A\n\tcand = N+1\n\tif res < cand:\n\t\treturn cand\n\telse:\n\t\tfor i in range(2,cand):\n\t\t\tif (A[i] <= B) & (A[k] <= B):\n\t\t\t\tres = min(res, B - i)\n\t\treturn res", "score": 0.0321}
{"id": "APPS_test-0703_17", "golden_code": "string=str(input())+' '\nword=''\nwordlist=[]\nboxes=0\n\nfor char in string:\n    if char!=' ':\n        word+=char\n    else:\n        wordlist.append(int(word))\n        word=''\n\nmaxsections=wordlist[0]\nnuts=wordlist[1]\ndivisors=wordlist[2]\nmaxnuts=wordlist[3]\n\nwhile nuts>0:\n    boxes+=1\n    \n    if divisors>=maxsections-1:\n        divisors-=maxsections-1\n        if nuts>=maxsections*maxnuts:\n            nuts-=maxsections*maxnuts\n        elif nuts<maxsections*maxnuts:\n            nuts=0\n\n    elif divisors<maxsections-1:\n        if nuts>=(divisors+1)*maxnuts:\n            nuts-=(divisors+1)*maxnuts\n        elif nuts<(divisors+1)*maxnuts:\n            nuts=0\n        divisors=0\n\nprint(boxes)\n", "generated_code": "# >f\n# input\n# rewirh\n# ln\n# \" /usr/bin/env python\n\nfrom sys import stdin\nf = lambda: stdin.readline().strip()\nfout = stdout.write\n\ndef listinp():\n\treturn list(map(int,f().split()))\n\ndef main():\n\tk,a,b,v = listinp()\n\tif k <= a:\n\t\tprint(k)\n\t\treturn\n\tif k > a:\n\t\ts = v\n\telse:\n\t\ts1 = a\n\t\ts2 = b\n\t\tfor i in range(3,s):\n\t\t\tif b % i == 0:\n\t\t\t\tif i % s1 == 0:\n\t\t\t\t\ts1 = i\n\t\t\t\telse:\n\t\t\t\t\ts2 = i\n\t\tprint(min(s1,s2) + v)\n", "score": 0.0}
{"id": "MBPP_34_95", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x): return x&(x-1) == 0", "score": 0.4459}
{"id": "MBPP_421_1", "golden_code": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num ", "generated_code": "def neg_nos(list1):\n\tresult = []\n\tfor x in list1:\n\t\tif x <= 0:\n\t\t\tresult.append(x)\n\t\telse:\n\t\t\tpass\n\treturn result\n\n\n\n\n\n\n\n\nb = []\nfor i in range(len(b)):\n\tb.append(i)\nfor i2 in b:\n\tfor i in d:\n\t\tc.append(a[i2-i])\n\t\ta[i] -= 1\n\ta[0] += 1", "score": 0.0}
{"id": "MBPP_79_30", "golden_code": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y", "generated_code": "def min_of_two(x, y) :\n return min(x + y, x or y)\n best_case = min(x+y, x or w)", "score": 0.2441}
{"id": "MBPP_52_8", "golden_code": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count", "generated_code": "def count_tuplex(tuplex,value):  \n\treturn sum(1 for tuple in zip(tuplex,[value]) if tuple[0] == tuple[1])\ntp_mlen = lambda x: len(x)", "score": 0.3491}
{"id": "MBPP_31_9", "golden_code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "generated_code": "def smallest_multiple(n):return 1 if n == 1 else 0", "score": 0.1573}
{"id": "APPS_test-1158_2", "golden_code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n#n = int(input())\nfrom math import ceil\n\nn, k = list(map(int, input().split()))\narr = list(map(int, list(input().split())))\n\nd = {}\nmax_cnt = 0\n\n\nfor i in range(len(arr)):\n    x = arr[i]\n    if not x in d:\n        d[x] = 0\n    d[x] += 1\n    max_cnt = max(max_cnt, d[x])\n\nmin_blud = ceil(max_cnt / k)\nprint(min_blud * len(d) * k - n)\n", "generated_code": "from collections import Counter\nn, k = list(map(int, input().split()))\nl = list(map (int, input().lower()))\ncnt = Counter(l)\ncnt2 = Counter()\nrev = 0\nfor i, j in cnt.items():\n\tif i > k:\n\t\trev += j\n\telse:\n\t\tcnt2[i] = j\n#print(cnt2)\nfor i in cnt2:\n\trev += cnt2[i];\nprint(rev)\n", "score": 0.001}
{"id": "MBPP_8_33", "golden_code": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))", "generated_code": "def fibonacci(n):    \n\tx, y = 0, 1\n\tfor i in range(n):\n\t\tx,y = y, x+y\n\treturn x\n\nss = []", "score": 1.0}
{"id": "APPS_test-2025_30", "golden_code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    n = int(input())\n    arr = [-1, -1, -1, -1, 1, -1, 1, -1, 2, 1, 2, -1]\n    for i in range(n):\n        a = int(input())\n        if (a >= 12):\n            print(a // 4 - a % 2)\n        else:\n            print(arr[a])\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "\ndef prime_factors(n):\n\ti = 2\n\tfactors = []\n\twhile i * i <= n:\n\t\tif n % i:\n\t\t\ti += 1\n\t\telse:\n\t\t\tn //= i\n\t\t\tfactors.append(i)\n\tif n > 1:\n\t\tfactors.append((n, 1))\n\treturn factors\n\n\nq = int(input())\nfor _ in range(q):\n\tn = int(input());\n\ts = prime_factors (n)\n\tif len (s) == 0:\n\t\tprint(-1)\n\telse:\n\t\ta = s[0]\n\t\tb = 0\n\t\tfor i in s[1:]:\n\t\t\ta += i\n\t\t\tb += i\n\t\t\tif a == b:\n\t\t\t\tprint(i)\n\t\t\t\tbreak\n\t\telse: print(-1)\n", "score": 0.4942}
{"id": "MBPP_43_15", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s): \n\treturn '-' not in s", "score": 0.1829}
{"id": "APPS_test-1873_18", "golden_code": "n, m = [int(i) for i in input().split()]\nlst = [0 for i in range(m)]\ninp = [int(i) for i in input().split()]\n\nfor i in inp:\n    lst[i - 1] += 1\nlst = [ i * (i - 1) // 2 for i in lst if i > 1 ]\nprint((n * (n - 1) // 2) - sum(lst))\n", "generated_code": "n, m = map(int, input().split())\na = [int(x) for x in input().split()]\ns = dict()\nfor i in range(n):\n\tif a[i] not in s:\n\t\ts[a[i]] = [i]\n\telse:\n\t\ts['a'].append(i)\nans = 1\nfor i in s:\n\tflag = False\n\tfor j in s[i]:\n\t\tif j == i:\n\t\t\tflag = True\n\t\t\tbreak\n\tif not flag:\n\t\tans *= (m - i + 1)\n\t\tans %= (m - 1)\nprint(ans)\n", "score": 0.0016}
{"id": "APPS_test-0671_21", "golden_code": "n = int(input())\ns = \"\"\ni = 1\nwhile (len(s) < n):\n    k = str(i)\n    for j in range(len(k)):\n        s += k[j]\n    i += 1\nprint(s[n - 1])\n", "generated_code": "# cook your dish here\ntry:\n\tn = int(input())\n\tprint(int(str(n)[-1]))\nexcept:\n\tpass\n", "score": 0.1476}
{"id": "MBPP_486_3", "golden_code": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") ", "generated_code": "import re \nregex = '[a-zA-z0-9]$'\ndef check_alphanumeric(string):    \n\treturn ''.join(string.split())", "score": 0.0}
{"id": "MBPP_72_40", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(lst): \n\tsum = 0\n\tfor n in lst:\n\t\tsum += n\n\treturn sum/len(lst)\nh=lambda: hidden(''.join(map(str,input().split())))", "score": 1.0}
{"id": "APPS_test-0555_21", "golden_code": "s = input()\nns = ''\nfor i, x in enumerate(s):\n\tif '5' <= x <= '8':\n\t\tns += chr(ord('0')+9-(ord(x) - ord('0')))\n\telif x == '9' and i:\n\t\tns += '0'\n\telse:\n\t\tns += x\nprint(ns)\n", "generated_code": "# coding: utf-8\n# Your code here!\nimport sys\nread = sys.stdin.read\nreadline = sys.stdout.write\n\n#neu = int(readline())\nn = int(read().strip())\n\nif(n==0):\n\tprint(0)\nelse:\n\tnum = str(n)\n\t\t\t\t\n\tk = len(num)\n\ts = \"\"\n\tif(k>1):\n\t\tif(num[0]=='0'):\n\t\t\ts = '0'\n\t\t\tk = k-1\n\t\telse:\n\t\t\ts = num[0]\n\t\n\telse:\n\t\tfor i in range(k):\n\t\t\ts += str(int(num[i])-9)\n\t\t\t\n\tprint(int(s))\n", "score": 0.0}
{"id": "MBPP_70_31", "golden_code": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "generated_code": "def is_abundant(n):\n\treturn True if n!= 0 else False\n\nimport math", "score": 0.3447}
{"id": "APPS_test-1067_59", "golden_code": "q=int(input())\nw=list(map(int,input().split()))\ne=0\nr=0\nt=0\nfor i in w:\n    if i<0:\n        e+=-1-i\n        r+=1\n    elif i>0:\n        e+=i-1\n    else:\n        e+=1\n        t+=1\nif r%2==1:\n    if t>0:\n        print(e)\n    else:\n        print(e+2)\nelse:\n    print(e)", "generated_code": "n=int(input())\na=list(map(int,input().split()))\n\ngun=0\nl=[]\n\nfor i in range(n):\n\tif a[i]<=1:\n\t\tgun+=1\n\t\tl.append(a[i])\n\t\t\n\telse:\n\t\tif a[i]-1>=0:\n\t\t\tl.append(0)\n\t\t\tgun+=1\n\t\t\t\n\t\telse:\n\t\t\tl[-1]=a[i]-1\n\t\t\tgun+= 1\n\t\n\nprint(gun)\n", "score": 0.0}
{"id": "MBPP_20_25", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(s):\n\tn=int(s)\n\treturn (n & 1) * int(n >> 1) == 0", "score": 0.043}
{"id": "APPS_test-0175_9", "golden_code": "n, m = [int(i) for i in input().split()]\n\nwhile n != 0 and m != 0:\n    if n >= 2 * m:\n        k = n // (2 * m)\n        n -= 2 * m * k\n    elif m >= 2 * n:\n        k = m // (2 * n)\n        m -= 2 * n * k\n    else:\n        break\nprint(n, m)", "generated_code": "a,b = map(int,input().split())\nfor i in range(0,110000):\n\tif a>=2*b:\n\t\tprint(b,a-2*b)\n\t\tbreak\n\telif a<b:\n\t\tb=a\n\t\ta=b\n\t\tb=int(b/2)\n\t\tcontinue\n\telse:\n\t\ta=a\n\t\tb=0\n\t\tbreak\nprint(a,b)\n", "score": 0.0}
{"id": "APPS_test-4202_12", "golden_code": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Thu Sep 10 11:33:13 2020\n\n@author: liang\n\"\"\"\n\nL, R = map(int,input().split())\nr = R%2019\nl = L%2019\nans = 2018\nif R - L >= 2019 - l or l==0:\n#if r < l or l == 0:\n    ans = 0\nelse:\n    for i in range(l,r):\n        for j in range(i+1,r+1):\n            ans = min(ans,i*j%2019)\nprint(ans)", "generated_code": "l,r=map(int,input().split())\nd=10**9+7\nprint(((r-l+1)*d)//2)\n", "score": 0.0}
{"id": "MBPP_62_4", "golden_code": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()", "generated_code": "import re\ndef num_position(s):    \n\treturn s == s[::-1]", "score": 0.1427}
{"id": "MBPP_56_24", "golden_code": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total", "generated_code": "def series_sum(number):\n\treturn (number + 1) * (3 * number + 4 * number) / 6", "score": 0.1864}
{"id": "MBPP_428_1", "golden_code": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False", "generated_code": "def dif_Square(n):\n\tres = \"\"\n\twhile n > 0:\n\t\tres += str(n % 10)\n\t\tn //= 10\n\treturn res", "score": 0.0}
{"id": "APPS_test-1128_42", "golden_code": "a, b = list(map(int, input().split(' ')))\nbad = a\nfor i in range(133742):\n    bad = bad*2\n    if bad % b == 0:\n        print(\"Yes\")\n        quit()\n    else:\n        bad %= b\nprint(\"No\")\n", "generated_code": "a, m = map(int,input().split())\nif(a%m==0):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n", "score": 0.9915}
{"id": "MBPP_112_1", "golden_code": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False", "generated_code": "def product_Equal(num):\n\t\n\treturn [y for y in range(1,1+num)]", "score": 0.0}
{"id": "MBPP_71_18", "golden_code": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1", "generated_code": "import math\ndef get_First_Set_Bit_Pos(val): \n\treturn (val+1)//2", "score": 0.1397}
{"id": "MBPP_3_5", "golden_code": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "generated_code": "def length_Of_Last_Word(a):\n    \n\treturn(len(a))", "score": 0.8682}
{"id": "MBPP_14_7", "golden_code": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)", "generated_code": "def sum_even_odd(list1):\n\treturn sum([x for x in list1 if x%2 ==0])", "score": 0.0376}
{"id": "MBPP_90_1", "golden_code": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'", "generated_code": "def first_repeated_word(str1):\n\treturn [i for i in str1 if str1.count(i)==1][0]", "score": 0.0}
{"id": "APPS_test-0419_6", "golden_code": "s = input()\nans = len(s) - 1\nk = 0\nfor i in s:\n    k += int(i)\nif k > 1:\n    ans += 1\nif ans % 2 != 0:\n    ans += 1\n\nprint(ans // 2)", "generated_code": "s = int(input())\n\nb = bin(s)\na = []\narr = b[2:].zfill(100)\n\nk = 0\nfor i in range(len(arr)):\n\tif arr[i] == \"1\":\n\t\ta.append(0)\n\telse:\n\t\ta.insert(0, 1)\n\t\tk += 1\n\nfor i in a:\n\tprint(k - 1)\n", "score": 0.0}
{"id": "APPS_test-1541_9", "golden_code": "s = input()\n\npivot_pos = 0\nleft_count = 0\nright_count = 0\n\n''''def is_number(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n    try:\n        import unicodedata\n        unicodedata.numeric(s)\n        return True\n    except (TypeError, ValueError):\n\t\treturn False'''\n\n# Find the pivot\nfor i in range(len(s)):\n\tif s[i] == '^':\n\t\tpivot_pos = i \n\n# Solve left side\nfor i in range(pivot_pos):\n\tif s[i].isdigit() == True:\n\t\tleft_count = left_count + (int(s[i]) * (pivot_pos - i))\n\n# Solve left side\nfor i in range(pivot_pos, len(s)):\n\tif s[i].isdigit() == True:\n\t\tright_count = right_count + (int(s[i]) * (i - pivot_pos))\n\nif left_count == right_count:\n\tprint(\"balance\")\nelif left_count > right_count:\n\tprint(\"left\")\nelse:\n\tprint(\"right\")", "generated_code": "import sys\n\ndef f(t):\n\treturn t[1] - t[0]\n\nt = sys.stdin\n\ns = input()\n\nn = len(s)\n\nf = [0] * n\n\nfor i in range(n):\n\tif s[i] == '^':\n\t\tf[i] = 1\n\ncur = 0\nfor i in reversed(list(range(n))):\n\tif f[i] == 1:\n\t\tcur += f[i] - 1\n\telse:\n\t\tcur -= f[i] + 1\n\tf[i] -= 1\n\nif cur == 0:\n\tprint('balance')\nelse:\n\tprint(\"left\")\n", "score": 0.1957}
{"id": "MBPP_70_28", "golden_code": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "generated_code": "def is_abundant(n):\n\treturn n * (n - 1) == n\nll = []\nfor i in range(100000):\n\tif i > 100000:\n\t\tll.append(i)", "score": 0.6625}
{"id": "APPS_test-1312_19", "golden_code": "n, m = map(int, input().split())\nprint(*([n // m + 1] * (n % m) + [n // m] * (m - n % m)))", "generated_code": "n, m = list(map(int, input().split()))\nans = [0] * (m + 1)\nnow = 1\nfor i in range(n):\n\tans[i + 1] = now if ans[i] == now else now - 1\n\tnow += 1\nprint(' '.join(map(str, ans)))\n", "score": 0.0}
{"id": "MBPP_59_14", "golden_code": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim", "generated_code": "def count_elim(num):\n\treturn len(list(filter(lambda d: d is tuple,num)))\nduplicate = dict([])", "score": 0.3363}
{"id": "APPS_test-4159_10", "golden_code": "def slove():\n    A, B, K = map(int,input().split())\n    if A > K:\n        print(A-K, B)\n    else:\n        print(0,max(0,-K+(A+B)))\n\n\ndef __starting_point():\n    slove()\n__starting_point()", "generated_code": "import sys\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef II(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.split())\ndef LI(): return list(map(int, sys.stdin.readlines()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\ndef SI(): return sys.stdin[open(\"input.txt\", \"r\")]\n\ndef main():\n\ta,b,k=MI()\n\trr=[]\n\tfor _ in range(k):\n\t\tif a>b:a,b=b,a\n\t\tif b>a:b,a=a,b\n\t\trr.append", "score": 0.0}
{"id": "APPS_test-0460_3", "golden_code": "p, x, y = list(map(int, input().split()))\nmn = [10 ** 10]\ndef tr(a):\n    i = (a // 50) % 475\n    for j in range(25):\n        i = (i * 96 + 42) % 475\n        l = 26 + i\n        if l == p:\n            if a <= x:\n                mn[0] = min(mn[0], 0)\n            else:\n                k = (a - x) // 50\n                if k % 2 == 0:\n                    mn[0] = min(mn[0], k // 2)\n                else:\n                    mn[0] = min(mn[0], (k + 1) // 2)\n            \n            \nst = 0   \nfor i in range(50):\n    if (x) % 50 == (y + i) % 50:\n        st = y + i\n        break\nfor i in range(st, 5 * 100000, 50):\n    tr(i)\nprint(*mn)\n", "generated_code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on200weishu\n\n@author: reduce full\n\"\"\"\n#from collections import Counter\n#import numpy as np\n#arr = np.array([[int(i) for i in input().split()] for k in range(2)])\n#a = arr[0][0]\n#b = arr[0]\n#print(a,b)\n\np,x,y = list(map(int,input().split()))\n#a = int(input())\n#b = int(input()[0])\n\n#a = 3\n#b = 4\n\n#0,1,2,3,4 = 1,2,3,-4,5\n#0,0,0,1,1\n#\n#for i in range(", "score": 0.0}
{"id": "APPS_test-1186_8", "golden_code": "from math import*\nn=int(input())\nif n%2:\n\tprint('NO')\nelse:\n\tprint(\"YES\")\n\tk=floor(log2(n))+1\n\tres = [0 for i in range(n)]\n\toccupied = [0 for i in range(n)]\n\tswitch = 0\n\tfor i in range(n,0,-1):\n\t\tval = 2**k-1-i\n\t\tif val > n:\n\t\t\tk-=1\n\t\t\tval = 2**k-1-i\n\t\tif occupied[val-1]:\n\t\t\twhile occupied[val-1]:\n\t\t\t\tk-=1\n\t\t\t\tval = 2**k-1-i\n\t\tval = 2**k-1-i\n\t\toccupied[val-1] = 1\n\t\tres[i-1] = val\n\tfor i in res:\n\t\tprint(i,end=' ')\n\tprint()\n\nif n in [1,2,3,4,5]:\n\tprint('NO')\nelif int(log2(n)) == log2(n):\n\tprint('NO')\nelif n == 6:\n\tprint('YES')\n\tprint('3 6 2 5 1 4')\nelse:\n\tprint('YES')\n\tprint('7 3 2 5 6 4 1',end=' ')\n\tfor i in range(8,n+1):\n\t\tif int(log2(i)) == log2(i):\n\t\t\tprint(min(i*2-1,n),end=' ')\n\t\telse:\n\t\t\tprint(i-1,end=' ')\n\tprint()", "generated_code": "n=int(input())\nif n==1:\n\tprint(\"NO\")\nelse:\n\ta,b=[],[]\n\tfor i in range(n):\n\t\ta.append(i+1)\n\t\tb.append(i[::-1])\n\tif n&1:\n\t\ta[-1],a[0]=a[0],a[-1]\n\tfor i,j in enumerate(b):\n\t\tif i<n//2:\n\t\t\ta[i],a[j]=a[j],a[i]\n\tfor x in a:\n\t\tprint(x,end=' ')\n\tprint()\n", "score": 0.0}
{"id": "APPS_test-0678_63", "golden_code": "#in the name of god\n#Mr_Rubik\n#http://codeforces.com/problemset/problem/290/C\nfoo=baz=0;quz=1\nfor bar in range(1, int(input()) + 1):\n    foo+=int(input())\n    if foo*quz<baz*bar: \n        break\n    baz,quz=foo,bar\nprint(baz / quz)", "generated_code": "import math\n\ndef calc(v):\n\tb = 1\n\tfor i in range(1, v):\n\t\tb = b * (i+1) / (i+1);\n\treturn b\n\ndef main():\n\tnumt = int(input())\n\twhile numt:\n\t\tnum = int(input());\n\t\tprint(calc(num))\n\t\tnumt -= 1\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "APPS_test-1041_8", "golden_code": "#Circle of Numbers\nimport math\n\ndef centre(n, pts):\n    x, y = 0, 0\n    for j in [7,11,13,17,19,23,29,31,37,1193,1663,2711,4007,65537]:\n        if math.gcd(n,j) == 1:\n            for i in range(n):\n                k = int(pts[i])\n                x += k*math.cos(math.pi * 2*i*j/n)\n                y += k*math.sin(math.pi * 2*i*j/n)\n            if not (abs(x) < 0.000001 and abs(y) < 0.000001):\n                return 'NO'\n    return 'YES'\n    \ndef strconv(s):\n    return [char for char in s]\n\nn = int(input())\npts = strconv(input())\nprint(centre(n,pts))\n", "generated_code": "n = int(input())\na = [int(x) for x in input()]\nd = [0] * n\nfor i in range(n):\n\td[i] = (a[i] + a[i]) // 2 - a[i]\nfor i in d:\n\tif i < 0:\n\t\tprint(\"NO\")\n\t\treturn\nprint(\"YES\")\n", "score": 0.2118}
{"id": "APPS_test-4160_25", "golden_code": "from decimal import Decimal\n\n\ndef com_interest(n: int) -> int:\n    saving = 100\n    interest_per = 0.01\n    years = 0\n\n    while True:\n        years += 1\n        saving = int(saving * Decimal('1.01'))\n        if saving >= n:\n            break\n    return years\n\n\nprint(com_interest(int(input())))", "generated_code": "import sys\n\ndef solve():\n\tinput = sys.stdin.readline\n\tx = int(input())\n\tans = 0\n\tfor i in range(100, 0, -1):\n\t\tif (x - i) // 100 >= 0:\n\t\t\tans += 1\n\t\t\tx = x - i\n\tprint(ans)\n\ndef __starting_point():\n\tsolve()\n__starting_point()\n", "score": 0.0103}
{"id": "MBPP_70_41", "golden_code": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "generated_code": "def is_abundant(n):    return True if n is not None and n > 0 and int(n) > 0 else False", "score": 0.3333}
{"id": "APPS_test-2354_31", "golden_code": "n,q=map(int, input().strip().split(\" \"))\n# print(n,q)\na=[]\nfor i in range(q):\n    \n    x,y=map(int, input().strip().split(\" \"))\n    a.append([x,y])   \n\nif n%2==0:\n    for x,y in a:\n        # if x+y==2:\n        #     print(1)\n        #     continue\n        if (x+y)%2==0:\n            k=0\n        else:\n            k=(n*n)//2\n        k = k\n        l=(x-1)*n//2\n        m= int(y/2 + 0.5)\n        print(k+l+m)\nelse:\n    for x,y in a:\n        if (x+y)%2==0:\n            k=0\n            l = ((x-1)//2)*n \n            p= (x-1)%2*int(n/2+.5)\n            m=int(y/2 + 0.5)\n            print(k+l+m+p)\n            continue\n        else:\n            k=(n*n)//2 +1\n            l = ((x-1)//2)*n \n            p= (x-1)%2*int(n/2-.5) \n            m=int(y/2 + 0.5)\n            print(k+l+m+p)", "generated_code": "n,q=map(int,input().split())\nfor i in range(n):\n\ta=list(map(int,str(i+1).split()))\n\tfor j in range(n-1):\n\t\ta[j+1]=a[j]+a[j+ 1]\n\ta[0]=a[0]%2\n\ta[n-1]=a[n- 1]%2\n\t\t\nfor i in''*q:\n\tx,y=map(int,''.join(str(i) for i in input().split()).split())\n\tx-=1\n\ty-=1\n\t\t\n\tprint(a[x]*y+a[y]*(a[x]-1)+a[x]/2*(a[y]-1),end=' ')\n\t\n", "score": 0.0}
{"id": "APPS_test-1083_44", "golden_code": "n = int(input())\nf = []\ns = []\nf1 = s1 = 0\nfor i in range(n, 0, -1):\n\tif f1 <= s1:\n\t\tf1 += i\n\t\tf.append(i)\n\telse:\n\t\ts1 += i\n\t\ts.append(i)\nprint(abs(f1 - s1))\nprint(len(f), *f)", "generated_code": "def printList(l):\n\tprint(len(l))\n\tfor i in l:\n\t\tprint(i, end=' ')\nprint('')\n", "score": 0.0}
{"id": "MBPP_43_72", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):\n\treturn s == \"3\" or s[1] == \"2?\" or s == s[0]", "score": 0.8465}
{"id": "APPS_test-3924_22", "golden_code": "v = []\nn,k = list(map(int, input().split()))\ns = 0\nv = [int(x) for x in input().split()]\nq = 0\ncarry = 0\nfor i in range(len(v)):\n    prev_carry = carry\n    garbage = v[i] + carry\n    boxes = garbage // k\n    carry = garbage % k\n    if i > 0 and boxes == 0 and carry > 0 and prev_carry > 0:\n        carry = 0\n        boxes = 1\n    q += boxes\nif carry > 0:\n    q += 1\nprint(q)\n", "generated_code": "def main():\n\tn, k = list(map(int, input().split()))\n\taa = list(map (int, input().lower()))\n\tasum = sum (aa)\n\tfirst = True\n\tfor i in range(n):\n\t\tif aa[i] > k:\n\t\t\tfirst = False\n\t\t\tbreak\n\tif first:\n\t\tprint (asum - k)\n\t\treturn\n\tsu = 0\n\tfor i, a in enumerate(aa):\n\t\tsu += a\n\t\tif su <= k:\n\t\t\tbreak\n\t\telse:\n\t\t\tsu = a\n\tprint (su - k)\n\treturn\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_66_11", "golden_code": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item", "generated_code": "def get_item(x, r):\n\tres = 1\n\tfor i in range(1, r + 1, 4): \n\t\tres = (res * (x - i)) % (10 ** i) \n\treturn res", "score": 0.043}
{"id": "MBPP_20_28", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(s): \n\treturn bool(s)\nmp = 2", "score": 0.4362}
{"id": "MBPP_70_34", "golden_code": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "generated_code": "def is_abundant(n):\n\treturn n>0", "score": 0.207}
{"id": "APPS_test-2128_52", "golden_code": "import os\n\nN = int(3e5 + 233)\nMOD = 998244353\nans = []\nfor i in range(N):\n    ans.append(0)\n\ndef fp(x, y):\n    res = 1\n    while y:\n        if y&1:\n            res = res * x\n            res %= MOD\n        x *= x\n        x %= MOD\n        y >>= 1\n    return res\n\ninv = fp(100, MOD-2)\nn = int(input())\ndig = list(map(int, input().split()))\nfor i in range(1, n+1):\n    x = dig[i-1]\n    x *= inv\n    x %= MOD\n    ans[i] = (((1 + ans[i-1]) % MOD) * fp(x, MOD-2)) % MOD\nprint(ans[n])", "generated_code": "import sys\ninput = sys.stdin.readline\n\nn=int(input())\nL=list(map(int,input().split()))\n\neven=L[0]\nodd=L[1]\n\nANS=0\nfirst=1\nfor i in range(1,n):\n\tfirst=first*(L[i]+1)%998244353\n\tANS+=first\n\nprint(ANS%998244353)\n", "score": 0.0}
{"id": "APPS_test-0671_47", "golden_code": "#!/usr/bin/env python3\n\n\ndef main():\n    n = int(input())\n    print(''.join(map(str, list(range(0, 1000))))[n])\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport time\nimport sys\nfrom bisect import bisect_left\n\n# start_time = time.time()\n\ndef main():\n\tN = int(sys.stdin.readline())\n\ti = 1\n\tout = sys.stdout.write(\"\\n\")\n\t\n\twhile i < N:\n\t\tsys.stdout.flush()\n\t\t# read the line\n\t\tS = sys.stdin.buffer.readline\n\t\tN = int(S())\n\t\t\n\t\t# process line\n\t\tSs = S()\n\t\tSs  = Ss[:-1]\n\t\tT = [int(Ss[i]) for i in range(0, N)]\n\t\tT.sort()\n\t\tprint(T[-1])\n\t\ti += 1", "score": 0.0}
{"id": "MBPP_43_16", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):  \n\treturn bool(s) and s == s.replace(' ', '')", "score": 0.1838}
{"id": "MBPP_2_13", "golden_code": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2", "generated_code": "def min_Num(arr,n):  \n\tres = []\n\tfor i in range(0,n+1):\n\t\tif i % 2 == 0:\n\t\t\tres.append(i)\n\treturn sum(res)", "score": 0.1477}
{"id": "MBPP_563_1", "golden_code": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)", "generated_code": "from sys import maxsize \ndef max_sub_array_sum(a, size):\n\treturn (sum(a[:size]) if size < size else 0)", "score": 0.0}
{"id": "APPS_test-0103_72", "golden_code": "#!/usr/bin/env python3\nfrom typing import Dict, List, Tuple\n\n\ndef input_lst() -> List[int]:\n    return [int(x) for x in input().split()]\n\ndef print_out(res: List[int]):\n    print(' '.join([str(x) for x in res]))\n\n\ndef main():\n    n,  = (int(x) for x in input().split())\n    a = input_lst()\n\n    l = 0\n    l_max = 0\n    if a[0] == 1:\n        l+=1\n\n    for i in range(n-1):\n        if a[i+1] - a[i] == 1:\n            l+=1\n        else:\n            if l>0:\n                l_max = max(l, l_max)\n                l = 0\n\n    if l > 0:\n        if a[-1] == 1000:\n            l+=1\n        l_max = max(l, l_max)\n\n    print(max(l_max-1, 0))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "n=int(input())\nl=list(map(int,input().split()))\nans=0\nfor i in range(n-1):\n\tif l[i]>l[i+1]:\n\t\tcontinue\n\telse:\n\t\tans=max(ans,l[i+ 1]-l[i])\nprint(max(ans,0))\n", "score": 0.0722}
{"id": "MBPP_4_1", "golden_code": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result", "generated_code": "def remove_list_range(list1, leftrange, rigthrange):\n\treturn [*[el for el in list1 if type(el) is int]]", "score": 0.3014}
{"id": "MBPP_76_12", "golden_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "generated_code": "def word_len(s): \n\treturn len(s) % 2 == 0\nh = {}", "score": 0.9418}
{"id": "APPS_test-2043_57", "golden_code": "from functools import reduce\nfrom operator import *\nfrom math import *\nfrom sys import *\nfrom string import *\nfrom collections import *\nsetrecursionlimit(10**7)\ndX= [-1, 1, 0, 0,-1, 1,-1, 1]\ndY= [ 0, 0,-1, 1, 1,-1,-1, 1]\nRI=lambda: list(map(int,input().split()))\nRS=lambda: input().rstrip().split()\n#################################################\ndef findMatch(a,b):\n    i,j=0,0\n    while i<len(a) and j<len(b):\n        if a[i]==b[j]:\n            j+=1\n        i+=1\n    return i\ns=RS()[0]\nt=RS()[0]\nx=findMatch(t,s)\ny=len(t)-findMatch(t[::-1],s[::-1])\nprint( max(y-x+1, 0))\n\n\n\n\n", "generated_code": "from collections import Counter\n\ndef solve(s, t):\n\tcnt = Counter(s)\n\tif all(v == 1 for v in cnt.values()):\n\t\treturn 2\n\telif all(v0 == 1 for v0 in cnt.value()) and all(v == 2 for v in cnd.value()):\n\t\tkey = ''.join(sorted(t))\n\t\treturn sum(s[i] == key[i-1] for i in range(1, len(key) + 1))\n\telse:\n\t\treturn 0\n\ns = input()\nt = input()\nprint(solve(s, t))\n", "score": 0.0002}
{"id": "APPS_test-0103_7", "golden_code": "n = int(input())\na  = [0] + list(map(int, input().split())) + [1001]\nres = 1\ncur = 1\n\nfor i in range(n+1):\n    if a[i+1] - a[i] == 1:\n        cur += 1\n    else:\n        cur = 1\n    res  = max(res, cur)\nprint(max(0, res - 2))\n", "generated_code": "import sys\ninput = sys.stdin.readline\n\nn=int(input())\nA=list(map(int,input().split()))\n\n\"\"\"\nfor i in range(1,n):\n\t#print(i,A[i],i-1)\n\tif i>=n:\n\t\tprint(0)\n\t\treturn\n\tif A[i]>A[i-1]:\n\t\tprint(A[i])\n\t\treturn\n\"\"\"\n\nif n==1:\n\tprint(0)  \n\treturn\n\ndesired=A[-1]\nprev=A[0]\nanswer=0\nfor i in reversed(list(range(n-1))):\n\tif A<=A[i]:\n\t\tdiff=A[i]-prev\n\t\tanswer+=diff\n\t\tprev=A[i]\n\telse:\n\t\tprev= A", "score": 0.0}
{"id": "APPS_test-1047_46", "golden_code": "n = input()\nB = [0 for i in range(7)]\nwhile len(n) != 7:\n    n = '0' + n\nans = 0\nfor i in range(7):\n    ans = max(ans, int(n[i]))\n    B[i] = int(n[i])\nprint(ans)\ns = ''\nfor i in range(ans):\n    cur = [0 for i in range(7)]\n    for j in range(7):\n        if B[j] > 0:\n            cur[j] = 1\n            B[j] -= 1\n    was = False\n    for j in range(7):\n        if cur[j] == 1:\n            s += '1'\n            was = True\n        elif was:\n            s += '0'\n    s += ' '\nprint(s[:-1])\n", "generated_code": "import sys\n\ndef main():\n\tn = int(sys.stdin.readline())\n\tquas = []\n\tquant = 0\n\twhile n > 0:\n\t\tdig = n % 10\n\t\tif dig == 0:\n\t\t\tquas.append(str(quant))\n\t\t\tquant = 0\n\t\telse:\n\t\t\tquant += 1\n\t\tn = n // 10\n\tprint(len(quas))\n\tprint(' '.join(quas))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "APPS_test-2035_1", "golden_code": "import math\n\ndef main():\n    (n, xs, ys) = tuple([int(x) for x in input().split()])\n\n    p1 = 0\n    p2 = 0\n    p3 = 0\n    p4 = 0\n    for i in range(n):\n        (x, y) = tuple([int(x) for x in input().split()])\n\n        if x < xs:\n            p1 += 1\n        if x > xs:\n            p2 += 1\n        if y < ys:\n            p3 += 1\n        if y > ys:\n            p4 += 1\n\n    p = max(p1, p2, p3, p4)\n    print(p)\n    best = []\n    if p1 == p:\n        best = [xs - 1, ys]\n    elif p2 == p:\n        best = [xs + 1, ys]\n    elif p3 == p:\n        best = [xs, ys - 1]\n    else:\n        best = [xs, ys + 1]\n    print(' '.join([str(x) for x in best]))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "def main():\n\tn, sx, sy = list(map(int, input().split()))\n\tscores = []\n\tfor i in range(n):\n\t\tx, y = list(map('int', input().split() ))\n\t\tscores.append((x - sx, y - sy))\n\tscore = sorted(scores, key=lambda x: x[0])\n\n\toptions = [str(sx - 1), str(sy - 1)]\n\t", "score": 0.0}
{"id": "APPS_test-1946_7", "golden_code": "m=int(input())\nd={}\nfor i in range(m):\n  a,v=map(int,input().split())\n  d[a]=v\nn=int(input())\nfor i in range(n):\n  a,v=map(int,input().split())\n  if(a in d):\n    d[a]=max(d[a],v)\n  else:\n    d[a]=v\n#print(d)\nl=d.values()\nprint(sum(l))", "generated_code": "from collections import defaultdict\nfrom sys import stdin\ninput = stdin.readline\n\nn = int(input())\n\nvals = defaultdict(list)\n\nfor i in range(n):\n\ta,x = list(map(int,input().split()))\n\tvals[x].append(a)\n\nfor _ in range(int(input())):\n\tb,x = list (map(int, input().split()))\t\n\t\n\tvals[b].append(x)\n\nans = 0\n\ndone = defaultdict(int)\n\nfor a in vals:\n\tif done[a] == 0:\n\t\tans += max(vals[a])\n\t\tdone[a] = 1\n\telse:\n\t\tans = max(ans, sum([x for x in vals[a]]))\n\t\tdone[ a ] = 1\n\t\nprint", "score": 0.0}
{"id": "APPS_test-1000_2", "golden_code": "def read_nums():\n    return [int(x) for x in input().split()]\n\n\ndef main():\n    n, v = read_nums()\n    res = 0\n    cur_tank = 0\n    for c in range(1, n+1):\n        need_to_by = min(v - cur_tank, n - c - cur_tank)\n        res += need_to_by * c\n        cur_tank += need_to_by\n        cur_tank -= 1\n    print(res)\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "n,v=map(int,input().split())\na=[]\nfor i in range(n):\n\ta.append(i+1)\nans=0\ni=0\nwhile i<n:\n\tans+=v\n\tif i<n-1:\n\t\tans+=a[i+1]-a[i]\n\ti+=1\nprint(ans)\n", "score": 0.0024}
{"id": "MBPP_23_20", "golden_code": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ", "generated_code": "def same_Length(A,B): \n\tif len(str(A))==len(str(B)): \n\t\treturn True\n\treturn False\nss = [1, 2, 3, 4, 5, 6, 7, 8, 9]", "score": 0.6487}
{"id": "MBPP_33_35", "golden_code": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ", "generated_code": "def count_Unset_Bits(n):\n\treturn n & 0xffffffff", "score": 0.0292}
{"id": "APPS_test-0543_68", "golden_code": "n=int(input())\nL =[int(x) for x in input().split()]\nL.append(0)\n\npossib = True\nfor i in range(n):\n    if L[i] < 0:\n        possib = False\n        break\n    if L[i]&1:\n        L[i+1] -= 1\n\nif L[-1] < 0:\n    possib = False\n\nif possib:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n", "generated_code": "def main():\n\tn = int(input())\n\ta = list(map(int, input().split()))\n\tcheck = 0\n\tfor i in range(n):\n\t\tif a[i] > check:\n\t\t\tfor j in range(i + 1, n):\n\t\t\t\tif a[j] > check: break\n\t\t\t\tcheck = max(check, a[j] - j)\n\t\t\telse:\n\t\t\t\tcheck = check - 1\n\tif check > 0:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint('NO')\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.2104}
{"id": "MBPP_22_17", "golden_code": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n ", "generated_code": "def find_Extra(arr1,arr2,n) : \n\tfor i in range(len(arr2)):\n\t\tif arr1.count(arr2[i]) > n:\n\t\t\treturn arr2.index(arr2 [i])\n\treturn -1\nll = ['a', 'b', 'c']", "score": 0.0}
{"id": "MBPP_80_14", "golden_code": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]", "generated_code": "def maximum_segments(n, a, b, c) : \n\tif a is 1 or b is 1 or c is 1 or a is b or c is b:\n\t\treturn 2\n\telse:\n\t\tm = 0\n\t\tif c == a:\n\t\t\tm = b\n\t\tif b == a:  \n\t\t\tm += 1\n\t\tif a == c:\n\t\t\tif c < c:\n\t\t\t\tm = a\n\t\t\telse:\n\t\t\t\tif c<c:\n\t\t\t\t\tm = c\n\t\tif m > 2:\n\t\t\treturn m + 2\n\t\telse:\n\t\t\tpass\n\treturn 0\ntypes = [1, 0.9, 7, 9]", "score": 0.032}
{"id": "MBPP_46_9", "golden_code": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot", "generated_code": "def multiply_list(l):\n\tif len(l) == 0:\n\t\treturn []\n\treturn max(l)", "score": 0.1894}
{"id": "MBPP_18_42", "golden_code": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "def is_Isomorphic(str1,str2):          \n\treturn str1 == str2\n\nh = lambda a, b: sum([a[i] == b[i] for i in range(len(a))]) == len(a)", "score": 0.9405}
{"id": "APPS_test-3985_19", "golden_code": "def g(i):\n    u[i] = 0\n    for j in p[i]:\n        if v[j] < 0 or u[v[j]] and g(v[j]):\n            v[j] = i\n            return 1\n    return 0\n\nf = lambda: map(int, input().split())\nn, m = f()\ns = k = 0\nd = [[]]\nfor i in f():\n    j = 2\n    t = []\n    while j * j <= i:\n        while i % j == 0:\n            t.append((j, k))\n            k += 1\n            i //= j\n        j += 1\n    if i > 1:\n        t.append((i, k))\n        k += 1\n    d.append(t)\np = [[] for i in range(k)]\nfor q in range(m):\n    a, b = f()\n    if b % 2: a, b = b, a\n    for x, i in d[a]:\n        for y, j in d[b]:\n            if x == y: p[i].append(j)\nv = [-1] * k\nfor i in range(k):\n    u = [1] * k\n    s += g(i)\nprint(s)", "generated_code": "#!/usr/bin/env python3\n\nfrom sys import stdin, stdout\n\ndef main():\n\tn, m = list(map(int, input().split()))\n\ta = list(map (int, input().strip().split()))[:n]\n\t\n\tbest = [0, 0]\n\tfor i in range(len(a)):\n\t\tfor j in range(i+1, len(a)):best = max(best, (a[i]*a[j]/(j-i)))\n\n\tm = 0\n\tfor i, j in list(enumerate(a)):m = max(m, best[0] + i + j)\n\tprint(m)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "APPS_test-0471_33", "golden_code": "n, a = list(map(int, input().split()))\nline = list(map(int, input().split()))\nline.sort()\nif len(line) == 1:\n    print(0)\nelse:    \n    r1 = abs(line[-1] - line[1])\n    otvet1 = min(abs(a - line[1]), abs(a - line[-1])) + r1\n    r2 = abs(line[-2] - line[0])\n    otvet2 = min(abs(a - line[-2]), abs(a - line[0])) + r2\n    print(min(otvet1, otvet2))", "generated_code": "n, a = list(map(int, input().split()))\nx = list(map (int, input().strip().split()))\n\n\ncheck = 0\npossible = {}\nfor i in range(n):\n\tif x[i] not in possible:\n\t\tpossible[x[i]] = { max(x[i], possible[x[i]][0])-a, 'n'}\n\t\tcheck += 1\n\t\t\nprint(check)\n", "score": 0.0}
{"id": "MBPP_17_20", "golden_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "generated_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \n\treturn bin(n)[2] == bin(l)[2] and bin(r)[2] in \"02468\"", "score": 0.5461}
{"id": "MBPP_76_31", "golden_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "generated_code": "def word_len(word):\n\treturn sum(1 for c in word if c.isspace() or c in \"\\n\")", "score": 0.3625}
{"id": "MBPP_59_4", "golden_code": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim", "generated_code": "def count_elim(num):\n\treturn len(list(filter(lambda d: d is tuple, num)))\nduplicate = False", "score": 0.3674}
{"id": "APPS_test-2047_11", "golden_code": "import sys\n\n# @profile\ndef main():\n    f = sys.stdin\n    # f = open('input.txt', 'r')\n    # fo = open('log.txt', 'w')\n    n = int(f.readline())\n    # b = []\n    # for i in range(n):\n    #    b.append()\n    b = list(map(int, f.readline().strip().split(' ')))\n    a = list(map(int, f.readline().strip().split(' ')))\n    # return\n    b = [b[i] - a[i] for i in range(n)]\n    c = [[0, 0]]\n    for i in range(n - 1):\n        line = f.readline().strip().split(' ')\n        c.append([int(line[0]), int(line[1])])\n    # print(c)\n    for i in range(n - 1, 0, -1):\n        # print(i)\n        fa = c[i][0] - 1\n        if b[i] >= 0:\n            b[fa] += b[i]\n        else:\n            b[fa] += b[i] * c[i][1]\n            if b[fa] < -1e17:\n                print('NO')\n                return 0\n    # for x in b:\n    #    fo.write(str(x) + '\\n')\n    if b[0] >= 0:\n        print('YES')\n    else:\n        print('NO')\n\nmain()\n", "generated_code": "n = int(input())\n\nb = list(map(int, input().split()))\na = list(map (int, input(). split()))\n\nb.sort()\na.sort()\n\nprint( \"YES\" if (b[0] + a[0]*a[1] - b[0]* a[1]) >= 0 else \"NO\" )\n", "score": 0.5156}
{"id": "APPS_test-1882_14", "golden_code": "# -*- coding:utf-8 -*-\n\n\"\"\"\n\ncreated by shuangquan.huang at 1/11/18\n\n\"\"\"\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport random\nimport itertools\nimport sys\n\nN, T = list(map(int, input().split()))\n#\n# N, T = 200000, 1000000000\n\nta = []\nfor i in range(N):\n  a, t = list(map(int, input().split()))\n  ta.append((t, a, i+1))\n  # ta.append((10000, 200000, i+1))\n\nta.sort()\n\n\nscore = 0\nsolvedCount = 0\naks = []\nheapq.heapify(aks)\nsc = collections.defaultdict(list)\nfor i in range(N):\n  t, a, _ = ta[i]\n  if T < t:\n    break\n\n  T -= t\n  solvedCount += 1\n\n  sc[a].append((t, i))\n  heapq.heappush(aks, a)\n  removed = []\n  while aks and aks[0] < solvedCount:\n    k = heapq.heappop(aks)\n    removed.append(k)\n    v = sc[k]\n    solvedCount -= len(v)\n    for _, j in v:\n      T += ta[j][0]\n    del sc[k]\n\n  score = max(score, solvedCount)\n\n\nprint(score)\nprint(score)\n\nvta = [(t, a, i) for t, a, i in ta if a >= score]\nvta.sort()\nans = [i for _, _, i in vta[:score]]\nprint(\" \".join(map(str, ans)))\n\n\n", "generated_code": "import sys\n\nn, t = list(map(int, sys.stdin.readline().split()))\nA = [0]*n\n\nfor i in range(n):\n\tx, y = list(map (int, sys. stdin.readline_.split()))\n\tA[i] = (x, y)\n\nans = 0\ndone = set()\nqueries = []\n\nfor i, a in enumerate(A):\n\tt_left = t - a[1]\n\tif t_left in done:\n\t\tque.append((done.remove(t_left), i+1))\n\telse:\n\t\tqueries.append((t_left, i+1))\n\n\tdone.add(a[0])\n\tif len(queries) > 1:\n\t\tans += len(set(queries))\n\t\t# print (len", "score": 0.0}
{"id": "MBPP_468_2", "golden_code": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) ", "generated_code": "def is_num_keith(n) : \n\tsn = str(n)\n\tif sn[0] == '0' and sn[1] == '1' :\n\t   return True", "score": 0.0}
{"id": "MBPP_70_45", "golden_code": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "generated_code": "def is_abundant(n)        :    return abs(n)!= 1", "score": 0.3864}
{"id": "MBPP_76_10", "golden_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "generated_code": "def word_len(word):\n\treturn sum(map(lambda char: ord(char),word)) > 122", "score": 0.3875}
{"id": "APPS_test-1000_33", "golden_code": "n, v = map(int, input().split())\n\nresult = v-1 + (n-v)*(n-v+1)//2 if n-1 > v else n-1\nprint(result)", "generated_code": "n, v = list(map(int, input().split()))\nprint(min(n, 1 + v) * (v - 1) + v)\n", "score": 0.0414}
{"id": "MBPP_59_9", "golden_code": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim", "generated_code": "def count_elim(args):\n\tif len(args) > 2 and len(set(args)) == len(set('0123456789')):\n\t\treturn False\n\treturn bool(args)", "score": 0.1721}
{"id": "MBPP_185_1", "golden_code": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)", "generated_code": "def sum_average(name):\n\ta=name*(10)\n\treturn int(a)", "score": 0.0}
{"id": "APPS_test-1758_48", "golden_code": "input()\ns0=input()\ns1=input()\nif s0.count('1')!=s1.count('1'):\n\tprint(-1)\nelse:\n\tm0=0\n\tm1=0\n\tv0=0\n\tv1=0\n\tfor i,j in zip(s0,s1):\n\t\tif i!=j:\n\t\t\tv0+= 1 if i=='1' else -1\n\t\t\tv1+= 1 if j=='1' else -1\n\t\t\tm0=max(v0,m0)\n\t\t\tm1=max(v1,m1)\n\tprint(m0+m1)", "generated_code": "def main():\n\tn = int(input())\n\ts = input()\n\tt = input()\n\n\tresult = 0\n\tp = 0\n\tfor i in range(n):\n\t\tif s[i] == t[i]:\n\t\t\tcontinue\n\t\telse:\n\t\t\tresult = 1\n\t\t\tp = i\n\t\t\tbreak\n\tif p == -1:\n\t\tprint(result)\n\telse:\n\t\tif s.count('0') == t.count('0'):\n\t\t\tresult = name = 2 * helper(s, t)\n\t\telse:    \n\t\t\tinput()\n\t\t\tresult = number = 0\n\t\t\twhile number < n:\n\t\t\t\tif s[number] == '1':\n\t\t\t\t\tresult += 1\n\t\t\t\t\tnumber += 1\n\t\t\t\telse:\n\t\t\t\t\tinput()\n\t\t\t\t\tresult += 2\n\t\t\t\t\tnumber += 2\n\t\t\tif result == 0:\n\t\t\t\tprint(-1)\n\t\t\t", "score": 0.0}
{"id": "APPS_test-0002_21", "golden_code": "n = int(input())\nans = 0\nprev = 0\nN = n\nwhile n:\n\ta = n%10\n\tn //= 10\n\tans += 1\n\tprev = a\nif ans==1:\n\tprint(1)\nelse:\n\tprint(((prev+1)*(10**(ans-1)))-N)\n", "generated_code": "n=int(input())\ns=str(n)\na=[]\nfor i in range(len(s)):\n\ta.append(int(s[i]))\n\t\ny=a[0]+1\nfl=0\nfor i in a:\n\tif i<=1:\n\t\tfl=1\n\telse:\n\t\ty=i\n\t\tbreak\n\nif fl==0:\n\ty=n\nprint(y)\n", "score": 0.0098}
{"id": "MBPP_80_4", "golden_code": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]", "generated_code": "def maximum_segments(n, a, b, c) : \n\tif a is 1 or c is 1 or b is 1 or n is 1 or a is b:\n\t\treturn (a + b + c - 2) \n\telse:\n\t\tm = 0\n\t\tif c == b:\n\t\t\tm = a\n\t\t\ta = b\n\t\tif b == c:\n\t\t\tb = c\n\t\t\tc = b\n\t\n\treturn max(m,a,b,c)", "score": 0.0745}
{"id": "MBPP_34_114", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(num):\n   return num>>1", "score": 0.0645}
{"id": "MBPP_19_8", "golden_code": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) ", "generated_code": "def sum_num(num):    \n\treturn '-'.join(map(str,num))", "score": 0.0}
{"id": "APPS_test-1176_20", "golden_code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\nminus = n\nfor i in range(n):\n  if a[i] >= 0:\n    minus = i\n    break\n\na = list(map(abs, a))\na.sort()\n\nif minus % 2 == 0:\n  print((sum(a)))\nelse:\n  print((sum(a) - 2 * a[0]))\n", "generated_code": "n = int(input())\na = list(map(int, input().split()))\nb = [0] * n\nb[0] = a[0]\nfor i in range(1, n):\n\tb[i] = a[i] * -1\n\nfor i in a[1:]:\n\tb[n-1] = max(b[n-2], i)\n\nans = 0\nfor i in reversed(range(n)):\n\tif b[i] == 0:\n\t\tans = max(ans, b[i])\n\telif b[i+1] == 0:ans = max(reversed(ans), b[i] * b[i+set(a[i:])])\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_33_4", "golden_code": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ", "generated_code": "def count_Unset_Bits(n):\n\treturn bin(n).count('1')\nss = [x for x in range(1, 10001)]", "score": 0.0468}
{"id": "APPS_test-0767_2", "golden_code": "# Please DON'T hack me! TY!\nimport sys\n\n\nclass Main:\n    def __init__(self):\n        self.buff = None\n        self.index = 0\n\n    def __next__(self):\n        if self.buff is None or self.index == len(self.buff):\n            self.buff = self.next_line()\n            self.index = 0\n        val = self.buff[self.index]\n        self.index += 1\n        return val\n\n    def next_line(self, _map=str):\n        return list(map(_map, sys.stdin.readline().split()))\n\n    def next_int(self):\n        return int(next(self))\n\n    def solve(self):\n        n = self.next_int()\n        z = self.next_int()\n        x = sorted([self.next_int() for _ in range(0, n)])\n        low = 0\n        high = n\n        while high - low > 1:\n            mid = (low + high) // 2\n            if self.test(mid, n, x, z):\n                low = mid\n            else:\n                high = mid\n        print(low)\n\n    def test(self, mid, n, x, z):\n        j = mid\n        for i in range(0, mid):\n            while j < n and x[j] < x[i] + z:\n                j += 1\n            if j >= n:\n                return False\n            j += 1\n        return True\n\n\ndef __starting_point():\n    Main().solve()\n\n__starting_point()", "generated_code": "from collections import Counter\nn, z = map(int, input().split())\nC = Counter([int(x) for x in input().split()])\nreturn sum([(n * (n - 1)) // 2 for x in C.values()])\n", "score": 0.0}
{"id": "APPS_test-4076_28", "golden_code": "import math\na, b, h, m = list(map(int, input().split()))\n\ndeg_m = (m / 60) * 360\ndeg_h = ((60 * h + m) / 720) * 360\ndeg = abs(deg_h - deg_m)\ndeg = math.radians(min(360 - deg, deg))\nx2 = b ** 2 + a ** 2 - 2 * b * a * math.cos(deg)\n\nprint(x2**0.5)", "generated_code": "a,b,c,d=map(int,input().split())\nif b==0:\n\ta=a\nif c==0:\n#    print(int(input()))\n\tb=b\nif d==0:\n #   print(int(max(list(map(int, input().split())))))\n\tc=c\n\td=d*2\nans=abs(a*(12**d)-b*(12**c))\nx=ans/60\nprint(x)\n", "score": 0.0244}
{"id": "APPS_test-2100_39", "golden_code": "I=lambda:map(int,input().split())\na=[0,0]\nb=[0,0]\nfor _ in'0'*next(I()):c,d=I();a[c]+=1;b[d]+=1\nprint(min(a)+min(b))", "generated_code": "from sys import stdin\nn=int(stdin.readline())\nd={}\nflag=0\nfor i in range(n):\n\tl,r=map(int,stdin.readinput().split())\n\tif (l,r) in d:\n\t\td[(l,r)]=1\n\telse:\n\t\td.setdefault((l,r),1)\n\t\td[l]+=1\n\t\td[r]+=1\nans=0\nfor k,v in list(d.items()):\n\tv=v-1\n\tans+=(min(v,0))\n\tif v>0:\n\t\tans+=2*(v)\nprint(ans)\n", "score": 0.0}
{"id": "APPS_test-0192_14", "golden_code": "y, x = list(map(int, input(). split()))\na = x; b = x; c = x; k = 0\nwhile a < y or b < y or c < y:\n    if a < c+b-1:\n        a = c+b-1\n        k += 1\n        if a >= y and b >= y and c >= y:\n            break\n    if b < a+c-1:\n        b = a+c-1\n        k += 1\n        if a >= y and b >= y and c >= y:\n            break\n    if c < a+b-1:\n        c = a+b-1\n        k += 1\n        if a >= y and b >= y and c >= y:\n            break\nprint(k)\n", "generated_code": "x, y = map(int, input().split())\n\nt = int(x ** 2 + y ** 2)\n\nif x > y:\n\tt -= y - x\n\twhile y > x:\n\t\tt -= x - y\n\t\ty -= x\n\tt += y\n\tprint(t)\n\treturn\nelif y < x:\n\tt(-y - x)\n\twhile x > 0:\n\t\tt(-x - y)\n\t\ty -= 1\n\tt += x\n\tprint(i)\n\treturnt\n\nprint(t) if t >= 0 else print(abs(t))\n", "score": 0.0}
{"id": "APPS_test-1424_17", "golden_code": "n,m,k=map(int,input().split())\na=[]\nans=0\nfor i in range(m):\n    a.append(int(input()))\ns=int(input())\nr=[]\nfor i in range(n):\n    r.append(s%2)\n    s=s//2\nfor i in range(m):\n    j=0\n    c=0\n    g=a[i]\n    while j<n and c<=k:\n        if r[j]==g%2:\n            j+=1\n        else:\n            j+=1\n            c+=1\n        g=g//2\n    if c<=k:\n        ans+=1\nprint(ans)", "generated_code": "n,m,k=list(map(int,input().split()))\nar=[0]*(m+1)\nfor i in range(n):\n\tar[int(input())]+=1\nif(m==1):\n\tprint(0)\n\treturn\nif(n==3):\n\tif(ar[2]!=1):\n\t\tprint(1)\n\t\treturn\n\tif( ar[0]==1 and ar[1]==1):\n\t\treturn 1\n\telif(ar[0]==ar[1]==ar[2]):\n\t\treturn 0\n\telse:\n\t\tprint(2)\n\t\treturn 0 if ar[0]>=k else ar[0]-k\nelse:\n\tif(n==2):\n\t\tprint(\"0\")\n\t\treturn\n\t\t\t\t\n\tprint(n-ar[0])\n\t\n\n", "score": 0.0}
{"id": "MBPP_43_73", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):  \n\tprev = s[0]\n\tif len(s)!= 2:\n\t\treturn False   \n\tfor i in range(1,len(s)):\n\t\tif s[i]!=prev:\n\t\t\treturn False\n\t\tprev = S(s[i])\n\treturn True   \n\t\nS = 'abcdefghijklmnopqrstuvwxyz'", "score": 0.8576}
{"id": "APPS_test-4065_32", "golden_code": "n = int(input())\ntasks = [int(i) for i in input().split()]\nmax_seq = [1] * n\nfor i in range(n-1):\n    if tasks[i+1] <= tasks[i] * 2:\n        max_seq[i+1] += max_seq[i]\nprint(max(max_seq))\n\n", "generated_code": "n = int(input())\na = sorted(list(map(int, input().split())))\n\nsolutions = sum(a[:-1])\n\nfor i in range(n - 1):\n\tsubsets = [a[i], a[i+1]]\n\tcurr = subsets[-1]\n\twhile True:\n\t\tif curr < subsets[-2]:\n\t\t\tsolutions -= 1\n\t\t\tbreak\n\t\telse:\n\t\t\tcurr = subsages[-2]\n\tsolutions += 1\n\nprint(solutions)\n", "score": 0.0}
{"id": "MBPP_14_13", "golden_code": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)", "generated_code": "def sum_even_odd(list):\n\ts=0\n\tfor i in range(0,len(list)):\n\t\tif i&1:\n\t\t\ts=s+list[i]\n\treturn s\nh=lambda: hex(int(s,16))\nns = lambda x: hex(x)\nm = lambda x,y: x  (x&(1<<y))-1", "score": 0.0255}
{"id": "APPS_test-0001_36", "golden_code": "def get(s):\n    ans = 0\n    for i in s:\n        ans += (ord(i) - ord('0'))\n    return ans\n\n\ndef solve1():\n    x = input()\n    n = len(x)\n    best_ans = x\n    best_val = get(x)\n    ans = str('' if int(x[0]) - 1 == 0 else int(x[0]) - 1) + '9' * (n - 1)\n    if get(ans) > best_val or (get(ans) >= best_val and int(ans) > int(best_ans)):\n        best_ans = ans\n        best_val = get(ans)\n    for i in range(1, n):\n        #print(ans)\n        ans = x[:i] + str(int(x[i]) - 1) + '9' * (n - i - 1)\n        if get(ans) > best_val or (get(ans) >= best_val and int(ans) > int(best_ans)):\n            best_ans = ans\n            best_val = get(ans)\n    return best_ans\n    \nbest = [0] * 10000\ndef solve2():\n    nonlocal best\n    was = 0\n    for i in range(1, 10000):\n        if get(str(i)) >= was:\n            best[i] = i\n            was = get(str(i))\n        else:\n            best[i] = best[i - 1]\n    \ndef stress():\n    solve2()\n    for i in range(1, 10000):\n        if int(solve1(str(i))) != best[i]:\n            print(i, best[i], solve1(str(i)))\n\n#stress()\nprint(solve1())", "generated_code": "def main():\n\tx = int(input())\n\ti = 10 ** 18\n\twhile i <= x:\n\t\tans = -9\n\t\tfor j in str(i):\n\t\t\tans += int(j)\n\t\tif ans > 0 and ans + i < x:\n\t\t\tprint(ans)\n\t\t\treturn\n\t\ti += 1\n\tprint(i - 1)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0}
{"id": "APPS_test-0943_15", "golden_code": "n = int(input())\nl = list(map(int, input().split()))\nodd = []\nnodd = []\nfor i in l:\n    if i % 2 == 1:\n        odd.append(i)\n    else:\n        nodd.append(i)\nodd.sort()\nprint(sum(nodd) + sum(odd[len(odd) % 2:]))", "generated_code": "n = int(input())\na = list(map(int, input().split()))\nassert(max(a) % 2 == 0)\nb = [i for i in a if i % 2 == 0]\nprint(max(b))\n", "score": 0.012}
{"id": "MBPP_34_38", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x): \n\treturn x % 2==0", "score": 1.0}
{"id": "MBPP_210_1", "golden_code": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)", "generated_code": "def power(x,y):\n\ta = x \n\tb = y \n\n\twhile a > 0:\n\t\tc = a%b\n\t\ta = a//b\n\t\tb = c\n\treturn", "score": 0.0}
{"id": "APPS_test-3924_19", "golden_code": "n, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\np = 0\ncp = 0\nsdg = 0\nfdg = 0\ntg = 0\nfplp = 0\nfor d in range(n-1):\n    fdg = a[d]\n    cp = sdg // k + (0 if sdg % k == 0 else 1)\n    fplp = k - sdg % k\n    if fplp == k:\n        fplp = 0\n    fdg -= min(fplp, fdg)\n    cp += fdg // k\n    fdg -= (fdg // k) * k\n    p += cp\n    sdg = fdg\nfdg = a[n-1]\np += (sdg + fdg) // k + (0 if (sdg + fdg) % k == 0 else 1)\nprint(p)\n", "generated_code": "def main():\n\tn, k = list(map(int, input().split()))\n\taa = list(map (int, input().rstrip().split()))[:n]\n\tcount = k\n\tend = 0\n\tstrr = []\n\tfor i in aa:\n\t\tif end < n:\n\t\t\tstrr.append(i)\n\t\t\tif end == n:\n\t\t\t\tend = n\n\t\telse:\n\t\t\tstrR.append(i - k)\n\tstrr.sort()\n\tif end!= n:\n\t\tstrr.append('1')\n\te = 0\n\tfor i, y in enumerate(strr):\n\t\tif e < n:\n\t\t\t\te = e + y\n\t\telse:e = e - k\n\t\tif e >= n:\n\t\t\tbreak\n\tprint(i)\n\n\ndef __starting_point():\n\tmain", "score": 0.0}
{"id": "APPS_test-1906_19", "golden_code": "n=int(input())\nt=[False]*2521\nsum=0\nfor a in range(2521):\n    t[a]=(a%2==0 or a%3==0 or a%4==0 or a%5==0 or a%6==0 or a%7==0 or a%8==0 or a%9==0 or a%10==0)\n    if not t[a]:\n        sum+=1\n\nret=sum*(n//2520)\nfor a in range(n%2520+1):\n    ret+=(not t[a])\nprint(ret)\n", "generated_code": "n = int(input())\nprint(max(0, n - (n // 2) * 2))\n", "score": 0.055}
{"id": "APPS_test-1772_58", "golden_code": "n = int(input())\na = list(map(int, input().split()))\n\nq = [0] * 2\n\nfor i in range(n):\n    q[a[i] % 2] += 1\n\nx = min(q[0], q[1])\n\nq[0] -= x\nq[1] -= x\n\nprint(x + q[1] // 3)\n", "generated_code": "from collections import deque\n\ndef main():\n\tn = int(input())\n\tnums = deque(map(int, input().split()))\n\tgood = 0\n\tfor i in range(n):\n\t\tif nums[0] >= i:\n\t\t\tgood += 1\n\t\tnums.popleft()\n\tprint(good)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "score": 0.0042}
{"id": "APPS_test-1717_17", "golden_code": "def main():\n    n = int(input())\n    primes = dict()\n    ans = 1\n    for i in range(2, n + 1):\n        t = i\n        j = 2\n        while j * j <= t:\n            k = 0\n            while t % j == 0:\n                t //= j\n                k += 1\n            if k != 0:\n                if j in primes:\n                    primes[j] = max(primes[j], k)\n                else:\n                    primes[j] = k\n            j += 1\n        if t != 1:\n            if t in primes:\n                primes[t] = max(primes[t], 1)\n            else:\n                primes[t] = 1\n    for i, t in list(primes.items()):\n        ans *= i ** t\n    print((ans + 1))\n\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "import sys\ninput = sys.stdin.readline\n\ndef main():\n\tmod=10**9+7\n\tN=int(input())\n\tr=N%10**13\n\t\n\tif N== r:\n\t\tprint(r)\n\telse:\n\t\tn=(r-N)//(r-N-1)\n\t\tprint(n*(10**13)+r)\n\t\n\t\n\treturn\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "score": 0.0}
{"id": "APPS_test-1424_41", "golden_code": "def dif(a, b):\n    b,a,ans=max(a,b),min(a,b),0\n    c,d=[],[]\n    i=0\n    while a>0:\n        if a%2==1:\n            c.append(1)\n        else:\n            c.append(0)\n        a//=2\n        i+=1\n    i=0\n    while b>0:\n        if b%2==1:\n            d.append(1)\n        else:\n            d.append(0)\n        b//=2\n    for i in range(len(c)):\n        if c[i]!=d[i]:\n            ans+=1\n    for i in range(len(c),len(d)):\n        if d[i]==1:\n            ans+=1\n    return ans\nn,m,k = map(int,input().split())\nans=0\nx=[]\nfor i in range(m+1):\n    x.append(int(input()))\nfor i in range(m):\n    if dif(x[i], x[m])<=k:\n        ans+=1\nprint(ans)", "generated_code": "#> <usr/bin/env python\n\nfrom sys import stdin\n\ndef main():\n\tn, m, k = list(map(int, stdin.readline().split()))\n\tdic = {}\n\tfor i in range(m):\n\t\tval = stdin.readname()\n\t\tdic[val] = dic.get(val, []) + [i]\n\tres = 0\n\tfor i  in dic:\n\t\tif len(dic[i]) == 1:\n\t\t\tres += 1\n\t\telse:\n\t\t\tdic[i] = sorted(dic[k * 2 + 1])\n\t\t\tres += len(dic.get(i, []) - 1)\n\tprint(res)\n\nmain()\n\n", "score": 0.0}
{"id": "MBPP_2_3", "golden_code": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2", "generated_code": "def min_Num(arr,n):  \n\tres = 0\n\tfor i in range(1, n + 1):\n\t\tres += i\n\treturn res\nh=lambda: hex(int(1,2)>>1)", "score": 0.0737}
{"id": "MBPP_28_51", "golden_code": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False", "generated_code": "def is_Word_Present(word, print_msg):\n\n\tif word == \"\":\n\t\tmsg = \"word is a\"\n\telse:\n\t\tmsg1 = \"msg1 is a\"\n\t\tmsg2 = \"msg2 is a\"\n\t\t\n\treturn msg1 == word and msg2", "score": 0.8362}
{"id": "APPS_test-0861_16", "golden_code": "m, r = list(map(int, input().split()))\n\ndef calc(k):\n    nonlocal r\n    if k < 1:\n        return 0\n    elif k == 1:\n        return r * (2**0.5 + 2)\n    else:\n        return r * ((1 + 2 * (k - 1)) * 2**0.5 + k * 2 + (k - 1) * (k - 2))\n\navg = 0\ndiv = m ** 2\n\nfor i in range(0, m):\n    avg += (2 * r + calc(i) + calc(m - 1 - i)) / div\n \nprint(avg)\n", "generated_code": "import sys\nimport math\n\ninput = sys.stdin.readline\n\nm, R = map(int, input().split())\n\nN = 2 * R * math.pi\n\nprint(math.sqrt(N) - (m + 1) * ((m + 1) / 2))\n", "score": 0.0}
{"id": "MBPP_142_1", "golden_code": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea", "generated_code": "import math\ndef surfacearea_sphere(r):\n\treturn round(math.pow(r,3))\nns = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\ns = [\"a','b','c\",\"d','e','f','g','h','i','j','k','l','m','n\",\"o','p','q','r','s','t','u','v','w','x','y','z\"]", "score": 0.0873}
{"id": "APPS_test-1083_58", "golden_code": "n = int(input())\ns = sum([i for i in range(n + 1)])\nprint(s % 2)\nans = []\nq = s // 2\nfor i in range(n - 1, 0, -1):\n    if q >= i:\n        ans = [i] + ans\n        q -= i\nprint(len(ans), *ans)", "generated_code": "n = int(input())\na = list(range(1, n + 1))\nans = []\nfor i in range(n // 2):\n\tl = max(a)\n\ta.remove(l)\n\tb = max(a,)\n\tans.append(str(abs(sum(a) - sum(b))))\n\ta = b\nprint(len(ans))\nprint(' '.join(ans))\n", "score": 0.0}
{"id": "APPS_test-1592_32", "golden_code": "import re\nimport itertools\nfrom collections import Counter, deque\n\nclass Task:\n    tasks = []\n    answer = \"\" \n\t\n    def getData(self):\n        numberOfTasks = int(input())\n        for i in range(0, numberOfTasks):\n            self.tasks += [[int(x) for x in input().split(' ')]]\n        #inFile = open('input.txt', 'r')\n        #inFile.readline().rstrip()\n        #self.childs = inFile.readline().rstrip()\n\n    def solve(self):\n        queueSize, maxQueueSize = 0, 0\n        time, timeOfLastMessage = 1, 1\n        currentTask = 0\n        while currentTask < len(self.tasks) or queueSize > 0:\n            maxQueueSize = max(maxQueueSize, queueSize)\n            if currentTask < len(self.tasks):\n                timeDelta = self.tasks[currentTask][0] - time\n                queueSize -= min(queueSize, timeDelta)\n                time += timeDelta\n            else:\n                timeOfLastMessage = time + queueSize\n                break\n                \n            if currentTask < len(self.tasks) and \\\n                    self.tasks[currentTask][0] == time:\n                queueSize += self.tasks[currentTask][1]\n                currentTask += 1\n        self.answer = str(timeOfLastMessage) + \" \" + str(maxQueueSize)\n\n    def printAnswer(self):\n        print(self.answer)\n        #outFile = open('output.txt', 'w')\n        #outFile.write(self.answer)\n\ntask = Task()\ntask.getData()\ntask.solve()\ntask.printAnswer()\n", "generated_code": "n=int(input())\n\ns=[]\n\nfor i in range(n):\n\n\tx,y=list(map(int,input().split()))\n\n\ts.append([x,y])\n\ns.sort(key=lambda x:x[1])\n\np=[]\n\nmx=0\n\nfor i,j in s:\n\n\tif len(p)==0:\n\n\t\tmp=i\n\n\t\tbreak\n\n\twhile mp>0:\n\n\t\tp.append(mp)\n\n\t\tmp-=1\n\n\tif j>mx:\n\n\t\tp[-1]+=1\n\n\t\tmx=j\n\n\n\nprint(mp,mx)\n\n\n\n\n\n# Made By Mostafa_Khaled\n", "score": 0.0}
{"id": "MBPP_214_2", "golden_code": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares", "generated_code": "def sum_difference(n):\n\treturn n * (n + 1) * (2 * n + 1) // 6", "score": 0.0}
{"id": "APPS_test-0442_24", "golden_code": "r=int(input())\nif r<=4:\n    print(\"NO\")\nelif r%2==0:\n    print(\"NO\")\nelse :\n    print(1, (r-3)//2)", "generated_code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport math\n\ndef solve(x, y):\n\tif x == y:\n\t\treturn x, y\n\tr = (x ** 2 + 2 * y + 1) // 2\n\tif r % 1 == 0:\n\t\treturn r, r\n\telse:\n\t\treturn -1\n\ndef __starting_point():\n\tr = int(input())\n\tn = r\n\tresult = solve(r, r)\n\tif result == -1:\n\t\tprint('NO')\n\telse:     \n\t\tprint(*result)\n\n__starting_point()\n", "score": 0.0}
{"id": "MBPP_31_22", "golden_code": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "generated_code": "def smallest_multiple(n):    \n\treturn min(2**n for n in range(18, 0, -1))", "score": 0.104}
{"id": "APPS_test-1290_1", "golden_code": "n, m = [int(i) for i in input().split()]\na = [0] * (n + 1)\nb = [int(i) for i in input().split()]\nfor i in b:\n    a[i] += 1\nprint(min(a[1:n+1]))\n", "generated_code": "import sys\nfrom collections import deque\ninput = sys.stdin.readline\n\nn,m=list(map(int,input().split()))\narray=list(map (int,input().strip().split()))[:n]\nL=[]\nfor i in range(n):\n\tL.append((array[i],i))\nL.sort(reverse=True)\nL.append((0,0))\n\nis_row=True\nfor i in L:\n\tif i[1]==n-1:\n\t\tis_row=False\n\t\tbreak\n\telse:\n\t\tarray[i[1]]=0\n\nif is_row:\n\tprint(n*(n+1)//2-1)\nelse:\n\tprint((n-1)*(n**2+n-1)//2)\n\n", "score": 0.0}
{"id": "MBPP_2_2", "golden_code": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2", "generated_code": "def min_Num(arr,n):  \n\tres = 0\n\tfor i in range(1, n + 1):\n\t\tres += i\n\treturn res", "score": 0.0558}
{"id": "MBPP_9_19", "golden_code": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "generated_code": "def check_Concat(str1,str2):\n\treturn bool(str1+str2)", "score": 0.1233}
{"id": "APPS_test-4057_44", "golden_code": "n=int(input())\na=[int(i) for i in input().split()]\np=set([])\nfor i in range(n):\n    p.add(a.count(a[i]))\nprint(max(p))\n", "generated_code": "n=int(input())\na=list(map(int,input().split()))\na.sort()\nd=0\ni=0\nans=0\nwhile i<n:\n\tif a[i]<=d:\n\t\tans+=1\n\t\td=max(d,a[i])\n\t\ti+=1\n\telse:\n\t\twhile d>0 and i<n:            \n\t\t\tif a[i-1]>d:\n\t\t\t\tans+=1\n\t\t\t\td=max(f,a[i-1])\n\t\t\t\ti+=1\n\t\t\telse:\n\t\t\t\tbreak\n\t\td=f\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_50_16", "golden_code": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product", "generated_code": "def mutiple_tuple(num):    \n\treturn any(num[i] == num[i+1] for i in range(len(num)) if num[i]!= '!')", "score": 0.0081}
{"id": "MBPP_72_33", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(lst):\n\treturn sum(lst) / len(lst)\nh = lambda x: sum(lst)*(-1)", "score": 1.0}
{"id": "MBPP_73_14", "golden_code": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);", "generated_code": "def get_noOfways(n):    \n\tif (n < 2) : return False\n\tfor i in range(3, int(n**0.5)+1, 2):   \n\t\tif n % i == 0:        \n\t\t\treturn False\n\treturn True", "score": 0.0}
{"id": "MBPP_30_40", "golden_code": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "import re\ndef match_num(string):\n\treturn bool(re.match(\"[0-9]{1}\\d{2}\\Z\",string))\nOptimunz={}", "score": 0.9436}
{"id": "MBPP_50_20", "golden_code": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product", "generated_code": "def mutiple_tuple(num):\n\treturn num.count(200)", "score": 0.0479}
{"id": "MBPP_333_1", "golden_code": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ", "generated_code": "def find_Max_Num(current_position, last_position):\n\tif current_position == last_position:\n\t\treturn 0\n\telse:\n\t\tcurrent_position = last_position\n\t\treturn current_position + 1", "score": 0.0332}
{"id": "MBPP_40_1", "golden_code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "generated_code": "import datetime\ndef check_date(m, d, y):\n\tif m and d and y and m >= m + d:\n\t\treturn True\n\treturn False", "score": 0.7812}
{"id": "MBPP_28_1", "golden_code": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False", "generated_code": "def is_Word_Present(sentence, word):\n\treturn len(word) == len([x for x in sentence.split()])", "score": 0.8614}
{"id": "APPS_test-3933_59", "golden_code": "n = int(input())\n\na = list(map(int,input().strip().split(' ')))\n\nd = a[1] - a[0]\nfl = True\nfor i in range(2,n):\n\tcd = a[i] - a[i-1]\n\tif d != cd:\n\t\tfl = False\n\t\tbreak\n\t\nif fl:\n\tprint(a[n-1] + d)\nelse:\n\tprint(a[n-1])\n", "generated_code": "import sys\nfrom statistics import mean\n\nsys.setrecursionlimit(100000)\ndef solve(lst):\n\tif len(lst) == 1:\n\t\treturn lst[0]\n\tmn = min(lst)\n\tmx = max(lst) + 1\n\tsm = 0\n\tfor i in lst:\n\t\tsm += i\n\treturn sm * mn + mx\n\ni = 0\nn = int(input())\nlst = list(map(int, input().split()))\nprint(solve(lst))\n", "score": 0.0}
{"id": "APPS_test-2585_50", "golden_code": "import sys\nINF = 10**20\nMOD = 10**9 + 7\nI = lambda:list(map(int,input().split()))\nfrom math import gcd\nfrom math import ceil\nfrom collections import defaultdict as dd, Counter\nfrom bisect import bisect_left as bl, bisect_right as br\n\ndef solve():\n  n, = I()\n  print(n // 2)\n\nt, = I()\nwhile t:\n  t -= 1\n  solve()\n\n\n\"\"\"\nFacts and Data representation\n\"\"\"\n", "generated_code": "t = int(input())\nfor i in range(t):\n\tn = int(input)\n\tans = 1\n\t(_,ans_i) = gcd(n,ans_i),1\n\tfor j in range(2,int(n**0.5)+1):\n\t\tif n%j == 0:\n\t\t\tif j*j > n:\n\t\t\t\tans_i = j\n\t\t\t\tbreak\n\t\t\tans_i = gcd(ans_i,j)\n\t\t\tif ans_i == 1:\n\t\t\t\tbreak\n\tprint(ans_i)\n\t\n", "score": 0.0}
{"id": "MBPP_6_36", "golden_code": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False", "generated_code": "def are_Rotations(string1,string2): \n\treturn True if len(string1)!= len(string2) else False\ntp = lambda: int(string1==string2)\nstring_a = lambda: str(string1);str_a = string_a;", "score": 0.0817}
{"id": "MBPP_34_122", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(n):   \n\t\n\treturn int(n/2)", "score": 0.1194}
{"id": "APPS_test-1164_10", "golden_code": "q=input()\na=[]\nw=len(q)\ni=w-1\nwhile i>0:\n\tif '0'<=q[i]<='9':\n\t\tj=i-1\n\t\twhile not('a'<=q[j]<='z'):\n\t\t\tj-=1\n\t\ta.append(q[j+1:i+1])\n\t\ti=j\n\ti-=1\ns=0\nfor i in a:\n\tl=len(i)\n\tif l>2:\n\t\tif i[l-3]=='.':\n\t\t\ts+=int(i[l-2:])\n\t\t\ti=i[:l-3]\n\t\ti=i.replace('.','')\n\ts+=int(i)*100\nd=''\nr=s\nif s%100!=0:\n\td='.'+str(s%100)\nif len(d)==2:\n\td=d[0]+'0'+d[1]\ns//=100\nrt=s\ntr=d\nwhile s//1000!=0:\n\tt=str(s%1000)\n\tif len(t)==1:\n\t\tt='.00'+t\n\telif len(t)==2:\n\t\tt='.0'+t\n\telse:\n\t\tt='.'+t\n\td=t+d\n\ts//=1000\nif s!=0:\n\tt=str(s%1000)\n\td=t+d\nelse:\n\td=d[1:]\nif len(d)==2:\n\td='0.'+d\nelif d=='':\n\td='0'\nprint(d)", "generated_code": "import sys\nimport math\n#from queue import *\nimport bisect\n#sys.setrecursionlimit(100000)\ndef input():\n\treturn sys.stdin.readline()[:-1]\ndef printe(*args):\n\tprint(*args, file=sys.stderr)\ndef printl(li):\n\treturn print(*li, sep='\\n')\ndef prime(n):\n\tif n < 2: return False\n\tif n == 2: return True\n\tif n % 2 == 0: return False\n     \n\tfor i in range(3, int(n**0.5)+1, 2):\n\t\tif n % i == 0: return 0\n\treturn True\n#\n#def not_prime(n):\n#    for i in range (2, n):\n#        if n % i!= 0:\n#            return False\n#    ", "score": 0.2022}
{"id": "APPS_test-1329_71", "golden_code": "from collections import defaultdict\n\nn = int(input())\nd = defaultdict(int)\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n //= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n //= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\nfor i in range(1, n+1):\n    for x in prime_factorize(i):\n        d[x] += 1\n\n#print(d)\n\n\n\ne = defaultdict(int)\n\nl = [2, 4, 14, 24, 74]\n\n#74\nfor k, v in d.items():\n    for x in l:\n        if v >= x:\n            e[x] += 1\n\n#print(e)\n\nans = 0\n\nans += e[74]\nans += e[24] * (e[2] - 1)\nans += e[14] * (e[4] - 1)\nans += (e[4] * (e[4]-1) // 2) * (e[2] - e[4]) + (e[4] * (e[4]-1) * (e[4]-2) // 2)\n\nprint(ans)", "generated_code": "import math\n\ndef main():\n\tn = int(input())\n\ta = (n*(n+1))//2\n\n\tk = int(math.sqrt(n))\n\td = [1]*k\n\tfor i in range(2, k+1):\n\t\tif n%i == 0:\n\t\t\td[i] = d[i-1] + 1\n\tans = 0\n\tfor i, j in enumerate(d):\n\t\tif i+j == n:\n\t\t\tans += 1\n\tprint(ans)\n\ndef __starting_point():\n\tmain()\n__starting_point()\n", "score": 0.039}
{"id": "MBPP_17_6", "golden_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False", "generated_code": "def all_Bits_Set_In_The_Given_Range(n,l,r): \n\treturn n & (n-1) == 0 and (r&n)!= 0\nns = [0,1]\ns = [1, 0]\nt = [0]\np = [0,-1]\nfor d in ns:\n\tfor i in range(2**d):\n\t\tt.append(t[-1] ^ (i&1))\n\tp.append(sum(t))\nfrom math import log", "score": 0.48}
{"id": "MBPP_6_9", "golden_code": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False", "generated_code": "def are_Rotations(s, arr):\n\tfor x in arr:\n\t\ttry:\n\t\t\ts = s.replace(x, b[0])\n\t\texcept:\n\t\t\treturn True", "score": 0.0282}
{"id": "MBPP_157_1", "golden_code": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ", "generated_code": "def is_octagonal(n):\n\t\n\ts=n%2\n\treturn not s or s==0", "score": 0.0}
{"id": "MBPP_514_1", "golden_code": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))", "generated_code": "import re\ndef multiple_split(s):\n\tfor idx in range(0, len(s)):\n\t\tif s[idx] & s[~idx]:\n\t\t\tcontinue\n\t\telse :\n\t\t\treturn", "score": 0.0}
{"id": "MBPP_11_1", "golden_code": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm", "generated_code": "def lcm(x, y):\n\treturn x*y//(x//y)\n\n\n\n\n\n\n\n\n\t\ncandidates = {'diff': 0, 'index': 1, 'char': 2, 'float': 3,'my': 4, 'type': 5,'vector': 6, 'num': 7, 'q': 8, 'u': 9, 'V': 10, 'w': 11, 'x': 16, 'y': 17, 'z': 18}", "score": 0.1907}
{"id": "APPS_test-0904_5", "golden_code": "input()\ndef v(x):\n    ret = 0\n    for i in x:\n        if ord('A') <= ord(i) <= ord('Z'):\n            ret += 1\n    return ret\nprint(max(v(i) for i in input().strip().split()))\n", "generated_code": "import sys\n\ndef main():\n\tn = int(input())\n\tline = sys.stdin.readline().split()\n\twords = line[0].split()\n\tans = 0\n\tfor word in words:\n\t\tlow = 0\n\t\thigh = len(word)\n\t\twhile low < high:\n\t\t\tmid = (low + high) // 2\n\t\t\tif word[mid].lower() == word[mid].upper():\n\t\t\t\thigh = mid\n\t\t\telse:\n\t\t\t\tlow = mid + 1\n\t\tans = max(ans, mid)\n\tprint(ans)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.037}
{"id": "MBPP_23_4", "golden_code": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ", "generated_code": "def same_Length(A,B): \n\tif len(str(A))==len(str(B)): \n\t\treturn True\n\treturn False\nss = [0, 0]", "score": 0.6447}
{"id": "MBPP_40_32", "golden_code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "generated_code": "import datetime\ndef check_date(m, d, y):\n\tif m == 0 or d == 0 or y == 0:\n\t\treturn False\n\td = int(d)\n\ty = int(y)\n\tm = int(m)\n\tif abs(m - m) == d or abs(d - d) == 0:\n\t  return False\n\telif abs(m-m) > d:\n\t  return false\n\telse:\n\t  return True", "score": 0.7998}
{"id": "MBPP_43_112", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):\n\ttry:\n\t\tint(s)\n\t\treturn True\n\texcept ValueError:\n\t\treturn False", "score": 0.836}
{"id": "MBPP_76_17", "golden_code": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False", "generated_code": "def word_len(s): \n\treturn len(s) % 2 == 0\n\n\t   \nh = ['a','b','c']", "score": 0.9398}
{"id": "MBPP_72_22", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(l):\n\tres = sum(l) / len(l)\n\treturn res", "score": 1.0}
{"id": "MBPP_34_33", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(x):\n\tif x%2 == 0:\n\t\treturn True\n\telse:\n\t\t0\n\treturn False\nhonestly_dig_dig = [0, 1, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313]", "score": 1.0}
{"id": "MBPP_16_4", "golden_code": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result", "generated_code": "def div_of_nums(nums,m,n):\n\treturn [x for x in nums if x%m == 0 and x%n == 0]", "score": 1.0}
{"id": "MBPP_33_16", "golden_code": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ", "generated_code": "def count_Unset_Bits(n) :  \n\tcount = 0\n\t\n\twhile n:\n\t\tcount += n & 1\n\t\tn >>= 1\n\t\n\treturn count\nduplicate = set([])", "score": 0.0438}
{"id": "MBPP_43_91", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):  \n\ta,b = s[0],s[1]\n\tfor i in range(2,len(s)):\n\t\tif s[i]!= a and s[i-1]!= b: return False\n\t\tif(s[i-2]!= b): return False\n\t\n\treturn True", "score": 0.8151}
{"id": "APPS_test-1306_17", "golden_code": "n, h = map(int, input().split())\na = list(map(int, input().split()))\nmod = 10 ** 9 + 7\n\ndp = [[0] * 2000  for i in range(n)]\n\ndp[0][0] = 1 if a[0] in (h, h - 1) else 0\ndp[0][1] = 1 if a[0] == h - 1 else 0\n\nfor i in range(1, n):\n    opn = h - a[i]\n    if opn >= 0:\n        dp[i][opn] += dp[i-1][opn]\n        if opn > 0:\n            dp[i][opn] += dp[i-1][opn-1]\n        dp[i][opn] %= mod\n    opn -= 1\n    if opn >= 0:\n        dp[i][opn] += dp[i-1][opn+1] * (opn+1) + dp[i-1][opn] + dp[i-1][opn] * opn\n        dp[i][opn] %= mod\n\nprint(dp[-1][0])", "generated_code": "def main():\n\tn, h = list(map(int, input().split()))\n\ta = list(map (int, input().strip().split()))\n\n\tif n == 1:\n\t\tprint (h)\n\t\treturn\n\n\tlast = a[0]\n\tans = 1\n\tfor i in range(1, n):\n\t\tif a[i] == last:\n\t\t\tans = (ans * (i - last + 1)) % 1000000007\n\t\telse:\n\t\t\tlast = a[i]\n\tans *= (n - 1 - last)\n\tans %= 1000000007\n\n\tprint (ans)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0202}
{"id": "APPS_test-3924_9", "golden_code": "n, k = map(int, input().split())\nl = [*map(int, input().split())]\nc = 0\nres = 0\nfor i, e in enumerate(l):\n    if (e + c) < k and c > 0:\n        res += int((e + c) > 0)\n        c = 0\n    else:\n        res += (e + c) // k\n        c = (e + c) % k\nif c > 0: res += 1\nprint(res)", "generated_code": "def main():\n\tn, k = list(map(int, input().split()))\n\taa = list(map (int, input().strip().split())) + [0]*(n-1)\n\tm = aa[0]\n\te = 0\n\tfor i in range(n):\n\t\tif aa[i] > m:\n\t\t\te += 1\n\t\tm = min(m, aa[i])\n\tprint(n - e)\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0866}
{"id": "APPS_test-0442_31", "golden_code": "import sys\nfrom collections import Counter\nimport itertools\nfrom math import floor, ceil\n \ndef input():\n    return sys.stdin.readline().strip()\n \ndef dinput():\n    return int(input())\n \ndef tinput():\n    return input().split()\n \ndef rinput():\n    return map(int, tinput())\n \ndef rt(x1, x2, y3):\n    print(0.5*(x2+x1))\n \ndef main():\n    y = int(input())\n    i = 1\n    t = 0\n    r = 1\n    if y % 2 == 1 and y >= 5:\n        print(1, (y - 3)//2)\n    else:\n        print(\"NO\")\n        \n    \nmain()", "generated_code": "import sys\n\ndef main():\n\tr = int(sys.stdin.readline())\n\tif r % 2 == 0:\n\t\tprint(\"NO\")\n\telse:\n\t\tprint(2)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.3288}
{"id": "APPS_test-0143_35", "golden_code": "#!/usr/bin/env python3\n\nfrom collections import Counter\n\ntry:\n    while True:\n        n = int(input())\n        a = sorted(map(int, input().split()))\n        t = 1\n        for x in a:\n            t = min(t, x) + 1\n\n        print(t)\n\nexcept EOFError:\n    pass\n", "generated_code": "def main():\n\tn = int(input())\n\tl = list(map(int, input().split()))\n\thelper = [0] * n\n\tfor i in range(n):\n\t\thelper[i] = max(l[i], helper[i - 1])\n\tprint(max(helper))\n\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0056}
{"id": "APPS_test-3825_14", "golden_code": "#\n#           _____                    _____                    _____          \n#          /\\    \\                  /\\    \\                  /\\    \\         \n#         /::\\____\\                /::\\    \\                /::\\____\\        \n#        /:::/    /               /::::\\    \\              /:::/    /        \n#       /:::/    /               /::::::\\    \\            /:::/    /         \n#      /:::/    /               /:::/\\:::\\    \\          /:::/    /          \n#     /:::/____/               /:::/__\\:::\\    \\        /:::/____/           \n#    /::::\\    \\               \\:::\\   \\:::\\    \\      /::::\\    \\           \n#   /::::::\\    \\   _____    ___\\:::\\   \\:::\\    \\    /::::::\\    \\   _____  \n#  /:::/\\:::\\    \\ /\\    \\  /\\   \\:::\\   \\:::\\    \\  /:::/\\:::\\    \\ /\\    \\ \n# /:::/  \\:::\\    /::\\____\\/::\\   \\:::\\   \\:::\\____\\/:::/  \\:::\\    /::\\____\\\n# \\::/    \\:::\\  /:::/    /\\:::\\   \\:::\\   \\::/    /\\::/    \\:::\\  /:::/    /\n#  \\/____/ \\:::\\/:::/    /  \\:::\\   \\:::\\   \\/____/  \\/____/ \\:::\\/:::/    / \n#           \\::::::/    /    \\:::\\   \\:::\\    \\               \\::::::/    /  \n#            \\::::/    /      \\:::\\   \\:::\\____\\               \\::::/    /   \n#            /:::/    /        \\:::\\  /:::/    /               /:::/    /    \n#           /:::/    /          \\:::\\/:::/    /               /:::/    /     \n#          /:::/    /            \\::::::/    /               /:::/    /      \n#         /:::/    /              \\::::/    /               /:::/    /       \n#         \\::/    /                \\::/    /                \\::/    /        \n#          \\/____/                  \\/____/                  \\/____/         \n#\na = [0,4,10,20,35,56,83,116,155,198,244,292]\nn = int(input())\nif n <= 11:\n    print(a[n])\nelse:\n    print(n*49-247)\n", "generated_code": "n = int(input())\n\nif n == 1:\n\tprint(1)\n\treturn\n\nans = []\nfor i in range(1, 10):\n\tans.append(9 * (i - 1))\n\nans.append(n)\n\nprint('\\n'.join(str(x) for x in ans))\n", "score": 0.0}
{"id": "APPS_test-1067_68", "golden_code": "import sys\ninput = sys.stdin.readline\nfrom collections import defaultdict, deque\n\nn = int(input())\nl = list(map(int, input().split()))\npos = 0\nneg = 0\nz = 0\nans = 0\nfor x in l:\n\tif x > 0:\n\t\tpos += 1\n\t\tans += x - 1\n\telif x < 0:\n\t\tneg += 1\n\t\tans += -1 - x\n\telse:\n\t\tz += 1\n\t\tans += 1\nif neg % 2 == 0:\n\tprint(ans)\nelif z > 0:\n\tprint(ans)\nelse:\n\tprint(ans + 2)", "generated_code": "n = int(input())\na = [int(x) for x in input().split()]\nans = 0\nfor i in range(n):\n\tif a[i] == 1:\n\t\tans += 1\n\telse:\n\t\tct = 0\n\t\tt = 0\n\t\tfor j in range(i+1, n):\n\t\t\tif a[j] == 1: continue\n\t\t\tct += 1\n\t\t\tt += 1\n\t\t\ta[j] = -1\n\t\tif t % 2 == 0:\n\t\t\tans += t // 2\n\t\telse:\n\t\t\tans = min(ans, ct + (t // 2))\nprint(ans)\n", "score": 0.0}
{"id": "APPS_test-2599_64", "golden_code": "def digitsum(n):\n    s = 0\n    while(n):\n        s+=n%10\n        n//=10\n    return s\nfor nitish in range(int(input())):\n    ans = 10**30\n    str_arr = input().split(' ')\n    arr = [int(num) for num in str_arr]\n    n = arr[0]\n    k = arr[1]\n    for lastdigit in range(10):\n        for numberofnine in range(100):\n            if(numberofnine*9+lastdigit>n):\n                break\n            s = \"\"\n            for x in range(numberofnine):\n                s+='9'\n            s+=str(lastdigit)\n            xx = int(s)\n            done = 0\n            for j in range(k+1):\n                done+=digitsum(xx+j)\n            # print(done)\n            done-=max(0,k+1-(10-lastdigit))\n            # print(done,xx)           \n            if(done>n):\n                continue\n            for aurek in range(9):\n                p = min(k+1,10-lastdigit)\n                ddone = done + aurek*p + (aurek+1)*(k+1-p)\n                # print(aurek,ddone)\n                if(ddone>n):\n                    continue\n                if(ddone==n):\n                    if(aurek>0):\n                        s = str(aurek)+s\n                        ans = min(ans,int(s))\n                    else:\n                        ans = min(ans,int(s))\n                    continue\n                ddone = n-ddone\n                if(ddone%(k+1)!=0):\n                    continue\n                ddone//=(k+1)\n                t = ddone%9\n                ss=\"\"\n                if(t):\n                    ss+=str(t)\n                for jj in range(ddone//9):\n                    ss+=\"9\"\n                if(len(ss)>0):\n                    ss+=str(aurek)\n                if(len(ss)==0):\n                    ans = min(ans,xx)\n                else:\n                    ss+=s\n                    ans=min(ans,int(ss))\n    if(ans==10**30):\n        ans=-1\n    print(ans)\n\n\n\n\n", "generated_code": "for _ in range(int(input())):\n\tn, k = list(map(int, input().split()))\n\tif n < 10:\n\t\tprint(n)\n\t\tcontinue\n\tans = 0\n\ttmp = n\n\tfor i in range(k):\n\t\ttmp = tmp + (n % 10)\n\t\tn = n // 10\n\tif tmp == 0:\n\t\tprint(-1)\n\t\tcontinue\n\n\tans = 9 * tmp\n\tif ans + k!= n:\n\t\tans = min(ans, n - ans + k)\n\tprint(ans)\n", "score": 0.3986}
{"id": "APPS_test-0605_12", "golden_code": "p=input().split()\na=int(p[0])\nb=int(p[1])\nc=int(p[2])\nd=int(p[3])\nx=max((3*a)//10,a-(a//250)*c)\ny=max((3*b)//10,b-(b//250)*d)\nif(x>y):\n    print(\"Misha\")\nelif(y>x):\n    print(\"Vasya\")\nelse:\n    print(\"Tie\")\n", "generated_code": "import sys\n\ndef main():\n\ta, b, cnt1, cnt2 = list(map(int, sys.stdin.readline().split()))\n\tresult = (\"Mshortest\" if cnt1 + cnt2 >= a else \"Vasya\")\n\tsys.stdout.write(result)\n\t\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.1142}
{"id": "APPS_test-0916_7", "golden_code": "def coloring(i, ancestors, color):\n    while i != 0 and color[ancestors[i - 1]] is None:\n        color[ancestors[i - 1]] = not color[i]\n        i = ancestors[i - 1]\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ancestors = list([int(x) - 1 for x in input().split()])\n    descendants = [[] for i in range(n)]\n    for i in range(n - 1):\n        descendants[ancestors[i]].append(i + 1)\n    color = [None for i in range(n)]\n    for i in range(n):\n        if not descendants[i]:\n            color[i] = True\n            coloring(i, ancestors, color)\n    reds = 0\n    blues = 0\n    xor = 0\n    count_red = dict()\n    count_blue = dict()\n    for i in range(n):\n        if color[i]:\n            blues += 1\n            xor ^= a[i]\n            if str(a[i]) in count_blue:\n                count_blue[str(a[i])] += 1\n            else:\n                count_blue[str(a[i])] = 1\n        else:\n            reds += 1\n            if str(a[i]) in count_red:\n                count_red[str(a[i])] += 1\n            else:\n                count_red[str(a[i])] = 1\n    res = 0\n    if xor == 0:\n        res += (blues - 1) * blues // 2\n        res += (reds - 1) * reds // 2\n        for i in list(count_blue.items()):\n            if i[0] in count_red:\n                res += i[1] * count_red[i[0]]\n    else:\n        for i in list(count_blue.items()):\n            if str(xor ^ int(i[0])) in count_red:\n                res += i[1] * count_red[str(xor ^ int(i[0]))]\n    print(res)\n\n\nmain()\n\n", "generated_code": "n = int(input())\na = list(map(int, input().split()))\np = list(map (int, input(). split()))\nb = [0]*n\nc = [0]#root\n\nfor i in range(n):\n\tif a[i]!= p[i]:\n\t\tc[i] = 1\n\telse:\n\t\tb[i] = c[i]\n\nans = 0\nfor i in b:\n\tans += i*(i-1)//2 + (i-1)*(i-2)//2\n\nprint(ans)\n", "score": 0.0}
{"id": "MBPP_33_41", "golden_code": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ", "generated_code": "def count_Unset_Bits(n):\n\tc = 0\n\tfor c in str(bin(n))[2:]:\n\t\tif c == '0':\n\t\t\tc = '1'\n\t\telse:\n\t\t\tc += '0'\n\treturn c.count('1') == 0", "score": 0.1291}
{"id": "APPS_test-3927_41", "golden_code": "from collections import defaultdict\n\ndef calcBinomials(N):\n    nonlocal binom\n    N += 1\n    binom = [[0]*N for _ in range(N)]\n    for n in range(N):\n        binom[n][0] = binom[n][n] = 1\n        for k in range(1, n):\n            binom[n][k] = binom[n-1][k] + binom[n-1][k-1]\n\nn = int(input())\na = list(map(int, input().split()))\nS, res = sum(a), 0\ndp = [defaultdict(lambda: 0) for _ in range(S+1)]\ndp[0][0] = 1\n\ncnt = {_:a.count(_) for _ in a}\nfor x in a:\n    for i in range(len(dp)-1-x, -1, -1):\n        for k, v in list(dp[i].items()):\n            dp[i+x][k+1] += v\n\ncalcBinomials(n)\nfor x, c in list(cnt.items()):\n    for i in range(1, c+1):\n        if dp[x*i][i] == binom[c][i] or dp[S - x*i][n-i] == binom[c][c-i]:\n            res = max(res, i)\nif len(cnt) <= 2: res = n\nprint(res)\n", "generated_code": "n=int(input())\na=list(map(int,input().split()))\na.sort()\nx=a[0]\ns=0\nfor i in a:\n\ts+=i-x\n\tx=max(x,i)\nprint(s)\n", "score": 0.0}
{"id": "APPS_test-1128_19", "golden_code": "a,m = map(int,input().split())\n\nfor i in range(31):\n    if a%m==0:\n        print(\"Yes\")\n        quit()\n    else:\n        a+=a%m\nprint(\"No\")", "generated_code": "a, m = [int(x) for x in input().split()]\nif a % m == 0:\n\tprint(\"No\")\nelse:\n\tprint((a//m)*m)\n", "score": 0.0}
{"id": "MBPP_9_38", "golden_code": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "generated_code": "def check_Concat(str1,str2):\n\treturn str1 == str2 and (str1 == str1+str2)\nh = lambda x,y: x+y", "score": 0.8928}
{"id": "MBPP_149_2", "golden_code": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) ", "generated_code": "def check_distinct(result):\n\tif result:\n\t\treturn f'{result[0]}{ \" \" * bool(result[1])}'\n\telse:\n\t\toutput = [str(item) for item in result]\n\t\treturn \"You have to know you you you you have to empie you are yourself\"", "score": 0.0}
{"id": "APPS_test-1000_68", "golden_code": "n, v = input().split()\nn = int(n)\nv = int(v)\n\nif (n <= v):\n    print(n-1)\nelse:\n    summ = v\n    for i in range(n-v-1):\n        summ += i+2\n    print(summ)\n", "generated_code": "def solve():\n\tn, v = map(int, input().split())\n\tans = 0\n\ta = [0] * n\n\tfor i in range(n):\n\t\ta[i] = int(input())\n\ta.sort()\n\tfor i, v in enumerate(a):\n\t\tif i - 1 + v > 0:\n\t\t\tans += 1 + a[i - 1 + v - 1]\n\tprint(ans)\n\nsolve()\n", "score": 0.0}
{"id": "APPS_test-0377_42", "golden_code": "n,m=map(int,input().split())\nif m==0:\n    m=1\nprint(min(n-m,m))", "generated_code": "\nn,m=map(int,input().split())\nco=0\nhi=0\nwhile hi<n:\n\thi+=1\n\tco+=1\n\tif hi==n:\n\t\tbreak\n\telif hi==1:\n\t\tco-=1\nprint(max(co,m))\n", "score": 0.0402}
{"id": "MBPP_18_18", "golden_code": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False", "generated_code": "def is_Isomorphic(letter, possible):\n\ts = '0' + possible\n\treturn True if s in possible else False", "score": 0.7464}
{"id": "APPS_test-1049_10", "golden_code": "n, d = list(map(int, input().split()))\nc = [input() for _ in range(d)]\nr = 0\nx = 0\nfor v in c:\n    if \"0\" in v:\n        x += 1\n        r = max(r, x)\n    else:\n        x = 0\nprint(r)\n", "generated_code": "# -*- coding: utf-8 -*-\n\nimport math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport random\nimport itertools\nimport sys\n\n\"\"\"\ncreated by shhuan at 2017/10/19 21:52\n\n\"\"\"\n\nN, D = map(int, input().split())\nday = []\nfor i in range(D):\n\tday.append(input())\n\nmemo = collections.defaultdict(int)\n\nfor i in day:\n\ttmp = 0\n\tfor j in range(len(i)):\n\t\tif i[j] == '1':\n\t\t\ttmp += 1\n\tmemo[tmp] += 1\n\nA = []\nfor key in memo:\n\tA.append(memo[key])\n\nA.sort(reverse=True)\nans = 0\nday = []                    \n", "score": 0.0}
{"id": "MBPP_72_43", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(lst): \n\tsum = 0\n\tfor n in lst:\n\t\tsum = sum + n\n\tavg = sum / len(lst)\n\treturn avg", "score": 1.0}
{"id": "MBPP_40_26", "golden_code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "generated_code": "import datetime\ndef check_date(m, d, y):\n\tif m and d and y > y:\n\t\treturn True\n\telse:\n\t\ty %= -1\n\t\tif y == 0:\n\t\t\treturn True\n\t\telse:\n\t\t\ty = abs(y)\n\t\t\treturn False\nmp = {}", "score": 0.2401}
{"id": "APPS_test-2035_8", "golden_code": "import math\n\ndef main():\n    (n, xs, ys) = tuple([int(x) for x in input().split()])\n\n    p1 = 0\n    p2 = 0\n    p3 = 0\n    p4 = 0\n    for i in range(n):\n        (x, y) = tuple([int(x) for x in input().split()])\n\n        if x < xs:\n            p1 += 1\n        if x > xs:\n            p2 += 1\n        if y < ys:\n            p3 += 1\n        if y > ys:\n            p4 += 1\n\n    p = max(p1, p2, p3, p4)\n    print(p)\n    best = []\n    if p1 == p:\n        best = [xs - 1, ys]\n    elif p2 == p:\n        best = [xs + 1, ys]\n    elif p3 == p:\n        best = [xs, ys - 1]\n    else:\n        best = [xs, ys + 1]\n    print(' '.join([str(x) for x in best]))\n\ndef __starting_point():\n    main()\n\n__starting_point()", "generated_code": "import sys\n\ndef minp():\n\treturn sys.stdin.readline().strip()\n\ndef mint():\n\treturn int(minp())\n\ndef mints():\n\treturn list(map(int, minp().split()))\n\ndef solve():\n\tn, sx, sy = mints()\n\tdu = []\n\tfor i in range(n):\n\t\tu, v = mints() #u is +100, v is -100\n\t\tdu.append((u, v))\n\tdu.sort()\n\tdu.append((sx, sy))\n\tdu = sorted(du)\n\tr = 0\n\tc = 0\n\tpp = 0\n\twhile du:\n\t\tdx = du[-1]\n\t\tif c >= n:\n\t\t\tbreak\n\t\telif dx[0] == 0:\n\t\t\tdx = dx[1:]\n\t\t\t", "score": 0.0}
{"id": "APPS_test-3960_8", "golden_code": "# n, m = [int(x) for x in input().split(\" \")]\n# s = set()\n# ls = [0]*(n+1)\n# in_C = input().split(\" \")\n#\n# for x in range(len(in_C)-1, -1, -1):\n#     s.add(int(in_C[x]))\n#     ls[x+1] = len(s)\n# [print(ls[int(input())]) for i in range(m)]\n#\n# in_x = input()\n# n = list(in_x)\n# length = len(n)\n# counter = 0\n# counter_2 = 0\n# for _ in range(length):\n#     temp = n[:]\n#     if counter > 0:\n#         temp.pop(counter)\n#     counter += 1\n#     for j in range(0, len(temp)):\n#         if j > 0:\n#             temp.pop((length - 1) - j)\n#         num = int(\"\".join(temp))\n#         if num % 8 == 0:\n#             print(f\"YES\\n{num}\")\n#             return\n#     temp = n[:]\n#     if counter_2 > 0:\n#         temp.pop(counter_2)\n#     counter_2 += 1\n#     # print(temp)\n#     for j in range(len(temp), 1, -1):\n#         temp.pop(j - len(temp))\n#         num = (int(\"\".join(temp)))\n#         # print(num)\n#         if num % 8 == 0:\n#             print(f\"YES\\n{num}\")\n#             return\n# print(\"NO\")\nn = int(input())\nnums = input().split(\" \")\nsumas = [0] * (n+1)\ndp = [[0] * 2 for _ in range(n+1)]\nres = -1e11\nfor x in range(0, n):\n    if x > 0:\n        sumas[x] = abs(int(nums[x]) - int(nums[x - 1]))\nfor x in range(1, n+1):\n    dp[x][0] = max(sumas[x], dp[x - 1][1] + sumas[x])\n    dp[x][1] = max(-sumas[x], dp[x - 1][0] - sumas[x])\n    res = max(max(dp[x][0], dp[x][1]), res)\nprint(res)", "generated_code": "n = int(input())\nA = list(map(int, input().split()))\n\nres = 0\nfor i in range(1, n - 1):\n\ta = A[i]\n\tb = A[i - 1]\n\tc = A[i + 1]\n\tres = max(res, a - b - c)\n\nprint(res)\n", "score": 0.0078}
{"id": "MBPP_40_16", "golden_code": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "generated_code": "import datetime\ndef check_date(m, d, y):\n\tif m and d and y > y:\n\t\treturn True\n\treturn False", "score": 0.8112}
{"id": "MBPP_72_21", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(list):\n\treturn sum(list)/len(list)\nh = [(1,2), (3,4), (6,5), (7,8), (9,6), (10,7), (11,8), ('x', 10), (12,13), (14,15), (16,18), (19,20), (22,21), (23,22), (24,25), (26,26)]", "score": 1.0}
{"id": "MBPP_71_29", "golden_code": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1", "generated_code": "import math\ndef get_First_Set_Bit_Pos(n):\n\t\tret = 0\n\t\tx = n\n\t\twhile x > 0:\n\t\t\t\n\t\t\tret += x & 1\n\t\t\tx >>= 1\n\t\treturn ret", "score": 0.1157}
{"id": "APPS_test-1772_80", "golden_code": "n = int(input())\ns = list(map(int, input().split()))\n\noddd = 0\nevend = 0\n\nfor i in range(n):\n if s[i] % 2 == 0:\n  oddd += 1\n else:\n  evend += 1\nif evend == 0:\n print(0)\nelse:\n if oddd == 0:\n  print(evend // 3)\n else:\n  if oddd < evend:\n   print(oddd + (evend - oddd) // 3)\n  else:\n   print(evend)", "generated_code": "n = int(input())\na = list(map(int, input().split()))\n\nb = []\nfor i in a:\n\tb.append(i)\n\ncount = 0\npre = 0\nfor i in range(0, len(b)):\n\tif b[i] > pre:\n\t\tcount += 1\n\t\tpre = b[i]\n\telse:\n\t\tpre = max(pre, b[i])\n\nprint(count)\n", "score": 0.0308}
{"id": "MBPP_70_46", "golden_code": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "generated_code": "def is_abundant(n): return n > 2", "score": 0.2249}
{"id": "MBPP_20_19", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(n):\n\treturn not n % 2 == 0", "score": 1.0}
{"id": "MBPP_164_1", "golden_code": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result", "generated_code": "def access_elements(l: int, r: int):\n\tif l > r:\n\t\treturn 0\n\treturn self._multiply(self.get(l), r)", "score": 0.0}
{"id": "MBPP_34_13", "golden_code": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "generated_code": "def even_num(n):\n\tn = 2**(len(bin(n))-3)  \n\tk = 0\n\twhile n>0:\n\t\tn = n >> 1\n\t\tk+=1\n\treturn k", "score": 0.0356}
{"id": "MBPP_22_18", "golden_code": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n ", "generated_code": "def find_Extra(arr1,arr2,n) : \n\tfor i in range(len(arr2)):\n\t\tif arr1[i]!= arr2[i] :\n\t\t\treturn i\n\treturn len(arr2)\n\n\n\n\n\n\n\n'''\n\n\n\n\n\n\n\n\n\n\n\n'''\n\n'''\n\n\nInput: [2, 13,4,9,77,2,4,0], 2\n'''", "score": 1.0}
{"id": "MBPP_46_1", "golden_code": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot", "generated_code": "def multiply_list(a) :\n\tans = 0\n\tfor i in range(len(a)-1): ans += a[i] * a[i+1]\n\treturn ans", "score": 0.115}
{"id": "MBPP_20_13", "golden_code": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "generated_code": "def is_odd(n):\n\treturn (n & 0xffffffff) == 0", "score": 0.5454}
{"id": "MBPP_68_2", "golden_code": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res ", "generated_code": "def subset(ar, n): \n\treturn n and sum(ar[n:]) or 0", "score": 0.0}
{"id": "MBPP_314_1", "golden_code": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex", "generated_code": "def parabola_vertex(a, b, c): \n\treturn [a, b, c]", "score": 0.0}
{"id": "APPS_test-0442_39", "golden_code": "r = int(input())\n\nif r%2 == 0:\n    print('NO')\n\nelif r == 1:\n    print('NO')\n\nelif r == 3:\n    print('NO')\nelse:\n    print(1, end=' ')\n    print((r-3)//2)", "generated_code": "import math\n\nr = int(input())\nx = 0\ny = 0\nfor i in range(1, r+1):\n\tif i * i == r:\n\t\tprint(i, end ='')\n\t\tbreak\n\tx += 1\n\ty += 1\n\tif x == y:\n\t\tprint('NO')\n\t\tbreak\n\nif x == 0:\n\tprint('YES')\n\tprint(y)\n", "score": 0.3128}
{"id": "APPS_test-0224_69", "golden_code": "field = \"A\" + input() + \"A\"\nletters = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\"]\nans = 1\nlast_let = 0\nfor i in range(len(field)):\n    let = field[i]\n    if let in letters:\n        ans = max(ans, i - last_let)\n        last_let = i\nprint(ans)", "generated_code": "import sys\n\ndef main():\n\ts = sys.stdin.readline().strip()\n\tn = len(s)\n\tres = 1\n\tfor i in range(1, n):\n\t\tchar = s[i]\n\t\tpos = i\n\t\tif char in 'AEIOUY':\n\t\t\tpos = pos - 1\n\t\tif s[pos] == char:\n\t\t\tres = max(res, i - pos)\n\tprint(res)\n\ndef __starting_point():\n\tmain()\n\n__starting_point()\n", "score": 0.0262}
{"id": "MBPP_43_109", "golden_code": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "generated_code": "def is_Two_Alter(s):  \n\tprev = s[0]\n\tif len(s) == 1:\n\t\treturn True\n\telif s[1]!= prev:\n\t\tif s[0]+s[1] == prev:\n\t\t\treturn True\n\t\telse:\n\t\t\t0\n\t\t\n\t\t\n\treturn False", "score": 0.8492}
{"id": "MBPP_72_8", "golden_code": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "generated_code": "def Average(lst): \n\tsum = 0\n\tfor n in lst:\n\t\tsum = sum + n\n\tavg = sum / len(lst) \n\treturn avg\nduplicate = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]", "score": 1.0}
