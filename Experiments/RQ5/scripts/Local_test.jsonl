{"id": "PIE_p03837_s032580281", "golden_code": "import queue\nINF = 123456789\ndef main():\n    (n, m) = list(map(int, input().split()))\n    G = [[] for _ in range(n)]\n    for _ in range(m):\n        (a, b, c) = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        G[a].append((b, c))\n        G[b].append((a, c))\n    used = set()\n    for i in range(n):\n        d = [INF for _ in range(n)]\n        par = [-1 for _ in range(n)]\n        que = queue.PriorityQueue()\n        d[i] = 0\n        que.put((0, i))\n        while not (que.empty()):\n            p = que.get()\n            v = p[1]\n            if d[v] < p[0]:\n                continue\n            for (to, cost) in G[v]:\n                if d[to] > d[v] + cost:\n                    d[to] = d[v] + cost\n                    par[to] = v\n                    que.put((d[to], to))\n        for j in range(n):\n            if i != j:\n                (a, b) = (j, par[j])\n                if a > b:\n                    (a, b) = (b, a)\n                used.add((a, b))\n    print(m - len(used))", "generated_code": "import queue\nINF = 123456789\ndef main():\n    (n, m) = list(map(int, input().split()))\n    G = [[] for _ in range(n)]\n    for _ in range(m):\n        (a, b, c) = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        G[a].append((b, c))\n        G[b].append((a, c))\n    used = set()\n    for i in range(n):\n        d = [INF for _ in range(n)]\n        par = [-1 for _ in range(n)]\n        que = queue.PriorityQueue()\n        d[i] = 0\n        que.put((0, i))\n        while que.empty():\n            p = que.get()\n            v = p[1]\n            if d[v] < p[0]:\n                continue\n            for (to, cost) in G[v]:\n                if d[to] > d[v] + cost:\n                    d[to] = d[v] + cost\n                    par[to] = v\n                    que.put((d[to], to))\n        for j in range(n):\n            if i != j:\n                (a, b) = (j, par[j])\n                if a > b:\n                    (a, b) = (b, a)\n                used.add((a, b))\n    print(m - len(used))", "score": 0.0}
{"id": "PIE_p03253_s043094515", "golden_code": "def prime_factorize(num):\n    prime_factor = {}\n    i = 2\n    while i ** 2 <= num:\n        while num % i == 0:\n            num //= i\n            if i in list(prime_factor.keys()):\n                prime_factor[i] += 1\n            else:\n                prime_factor[i] = 1\n        i += 1\n    if num > 1:\n        prime_factor[num] = 1\n    return prime_factor\nfrom math import factorial\ndef comb(n, r, R):\n    if n not in R:\n        a = factorial(n)\n        R[n] = a\n    else:\n        a = R[n]\n    if n - r not in R:\n        b = factorial(n - r)\n        R[n - r] = b\n    else:\n        b = R[n - r]\n    if r not in R:\n        c = factorial(r)\n        R[r] = c\n    else:\n        c = R[r]\n    return a // (b * c)\n(n, m) = list(map(int, input().split()))\nr = 1\nR = dict()\nprime_fac = prime_factorize(m)\nfor v in list(prime_fac.values()):\n    r *= comb((v + n) - 1, v, R)\nmod = 1000000000 + 7\nprint(r % mod)", "generated_code": "def prime_factorize(num):\n    prime_factor = {}\n    i = 2\n    while i ** 2 <= num:\n        while num % i == 0:\n            num //= i\n            if i in list(prime_factor.keys()):\n                prime_factor[i] += 1\n            else:\n                prime_factor[i] = 1\n        i += 1\n    if num > 1:\n        prime_factor[num] = 1\n    return prime_factor\nfrom math import factorial\ndef comb(n, r, R):\n    if n not in R:\n        a = factorial(n)\n        R[n] = a\n    else:\n        a = R[n]\n    if n - r not in R:\n        b = factorial(n - r)\n        R[n - r] = b\n    else:\n        b = R[n - r]\n    if r not in R:\n        c = factorial(r)\n        R[r] = c\n    else:\n        c = R[r]\n    return a * (b * c)\n(n, m) = list(map(int, input().split()))\nr = 1\nR = dict()\nprime_fac = prime_factorize(m)\nfor v in list(prime_fac.values()):\n    r *= comb((v + n) - 1, v, R)\nmod = 1000000000 + 7\nprint(r % mod)", "score": 0.4024}
{"id": "PIE_extra_p02725_s026624237", "golden_code": "#template\n\ndef inputlist(): return [int(j) for j in input().split()]\n\n#template\n\n#issueから始める\n\nK,N = inputlist()\n\nA = inputlist()\n\nlia = [0]*N\n\nfor i in range(1,N):\n\n    k = A[i] - A[i-1]\n\n    lia[i] = k\n\nlia[0] = (K+A[0]-A[-1])\n\nlia.sort()\n\nans = 0\n\nfor i in range(N-1):\n\n    ans += lia[i]\n\nprint(ans)", "generated_code": "#template\n\ndef inputlist(): return [int(j) for j in input().split()]\n\ndef listinput(): return input().split()\n\n#template\n\nK,N = inputlist()\n\nA = inputlist()\n\ndis = [0]*(N)\n\nfor i in range(N):\n\n    if i == N-1:\n\n        dis[i] = K+A[0] - A[i]\n\n        continue\n\n    dis[i] = A[i+1] - A[i]\n\ndis.sort()\n\nprint((sum(dis[:-1])))", "score": 1.0}
{"id": "PIE_p02612_s197156959", "golden_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    return int(eval(input()))\ndef si():\n    return eval(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 0\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)", "generated_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    return int(eval(input()))\ndef si():\n    return eval(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, +1])\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 0\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)", "score": 0.0}
{"id": "PIE_p03553_s305170925", "golden_code": "import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time, copy, functools\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20\neps = 1.0 / (10 ** 15)\nmod = (10 ** 9) + 7\ndef LI():\n    return [int(x) for x in sys.stdin.readline().split()]\ndef LI_():\n    return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF():\n    return [float(x) for x in sys.stdin.readline().split()]\ndef LS():\n    return sys.stdin.readline().split()\ndef I():\n    return int(sys.stdin.readline())\ndef F():\n    return float(sys.stdin.readline())\ndef S():\n    return input()\ndef pf(s):\n    return print(s, flush=True)\ndef divisions(n):\n    sq = int(math.sqrt(n) + 1)\n    d = collections.defaultdict(int)\n    while n % 2 == 0:\n        n //= 2\n        d[2] += 1\n    i = 3\n    while (n > 1 and sq >= i):\n        if n % i == 0:\n            n //= i\n            d[i] += 1else:i += 2\n    if n > 1:\n        d[n] += 1\n    r = [1]\n    for (k, v) in d.items():\n        for c in r[:]:\n            for i in range(1, v + 1):\n                r.append(c * (k ** i))\n    return sorted(r)\ndef main():\n    n = I()\n    a = LI()\n    s = set()\n    for i in range(n, 0, -1):\n        d = divisions(i)\n        ld = len(d)\n        for j in range(1, 2 ** ld):\n            c = []\n            ff = True\n            for k in range(ld):\n                if j & (1 << k):\n                    f = True\n                    for e in c:\n                        if d[k] % e == 0:\n                            f = False\n                            ff = False\n                            break\n                    if f:\n                        c.append(d[k])\n                if not ff:\n                    break\n            if ff:\n                s.add(tuple(c + [n + 1]))\n    b = sorted(list(s), reverse=True)\n    for c in b:\n        t = 0\n        for j in range(1, n + 1):\n            f = False\n            for e in c:\n                if j % e == 0:\n                    f = True\n                    break\n            if f:\n                t += a[j - 1]\n        if t < 0:\n            for j in range(1, n + 1):\n                f = False\n                for e in c:\n                    if j % e == 0:\n                        f = True\n                        break\n                if f:\n                    a[j - 1] = 0\n    return sum(a)\nprint(main())", "generated_code": "import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time, copy, functools\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20\neps = 1.0 / (10 ** 15)\nmod = (10 ** 9) + 7\ndef LI():\n    return [int(x) for x in sys.stdin.readline().split()]\ndef LI_():\n    return [int(x) + 1 for x in sys.stdin.readline().split()]\ndef LF():\n    return [float(x) for x in sys.stdin.readline().split()]\ndef LS():\n    return sys.stdin.readline().split()\ndef I():\n    return int(sys.stdin.readline())\ndef F():\n    return float(sys.stdin.readline())\ndef S():\n    return input()\ndef pf(s):\n    return print(s, flush=True)\ndef divisions(n):\n    sq = int(math.sqrt(n) + 1)\n    d = collections.defaultdict(int)\n    while n % 2 == 0:\n        n //= 2\n        d[2] += 1\n    i = 3\n    while (n > 1 and sq >= i):\n        if n % i == 0:\n            n //= i\n            d[i] += 1else:i += 2\n    if n > 1:\n        d[n] += 1\n    r = [1]\n    for (k, v) in d.items():\n        for c in r[:]:\n            for i in range(1, v + 1):\n                r.append(c * (k ** i))\n    return sorted(r)\ndef main():\n    n = I()\n    a = LI()\n    s = set()\n    for i in range(n, 0, -1):\n        d = divisions(i)\n        ld = len(d)\n        for j in range(1, 2 ** ld):\n            c = []\n            ff = True\n            for k in range(ld):\n                if j & (1 << k):\n                    f = True\n                    for e in c:\n                        if d[k] % e == 0:\n                            f = False\n                            ff = False\n                            break\n                    if f:\n                        c.append(d[k])\n                if not ff:\n                    break\n            if ff:\n                s.add(tuple(c + [n + 1]))\n    b = sorted(list(s), reverse=True)\n    for c in b:\n        t = 0\n        for j in range(1, n + 1):\n            f = False\n            for e in c:\n                if j % e == 0:\n                    f = True\n                    break\n            if f:\n                t += a[j - 1]\n        if t < 0:\n            for j in range(1, n + 1):\n                f = False\n                for e in c:\n                    if j % e == 0:\n                        f = True\n                        break\n                if f:\n                    a[j - 1] = 0\n    return sum(a)\nprint(main())", "score": 0.0}
{"id": "PIE_p03575_s865425208", "golden_code": "class UnionFind:\n    def __init__(self, size):\n        self.table = [i for i in range(size)]\n    def find(self, x):\n        return self.table[x]\n    def union(self, x, y):\n        x1 = self.find(x)\n        y1 = self.find(y)\n        if x1 == y1:\n            return False\n        for i in range(len(self.table)):\n            if self.table[i] == y1:\n                self.table[i] = x1\n        return True\n(N, M) = list(map(int, input().split()))\nedges = []\nfor _ in range(M):\n    (a, b) = list(map(int, input().split()))\n    edges.append([a - 1, b - 1])\nmat = [[0] * N for _ in range(N)]\nfor (s, g) in edges:\n    mat[s][g] = 1\n    mat[g][s] = 1\nans = 0\nfor i in range(M):\n    uni = UnionFind(N)\n    for j in range(M):\n        if i != j:\n            uni.union(edges[j][0], edges[j][1])\n    if not (all((uni.find(0) == uni.find(x) for x in range(N)))):\n        ans += 1\nprint(ans)", "generated_code": "class UnionFind:\n    def __init__(self, size):\n        self.table = [i for i in range(size)]\n    def find(self, x):\n        return self.table[x]\n    def union(self, x, y):\n        x1 = self.find(x)\n        y1 = self.find(y)\n        if x1 == y1:\n            return False\n        for i in range(len(self.table)):\n            if self.table[i] == y1:\n                self.table[i] = x1\n        return True\n(N, M) = list(map(int, input().split()))\nedges = []\nfor _ in range(M):\n    (a, b) = list(map(int, input().split()))\n    edges.append([a + 1, b - 1])\nmat = [[0] * N for _ in range(N)]\nfor (s, g) in edges:\n    mat[s][g] = 1\n    mat[g][s] = 1\nans = 0\nfor i in range(M):\n    uni = UnionFind(N)\n    for j in range(M):\n        if i != j:\n            uni.union(edges[j][0], edges[j][1])\n    if not (all((uni.find(0) == uni.find(x) for x in range(N)))):\n        ans += 1\nprint(ans)", "score": 0.3916}
{"id": "PIE_extra_p02596_s734835984", "golden_code": "K = int(eval(input()))\n\n\n\nflg = [False]*K\n\n\n\ntmp = 7 % K\n\ncnt = 1\n\nif tmp == 0:\n\n    print(cnt)\n\n    exit()\n\nwhile True:\n\n    tmp = (tmp*10+7)%K\n\n    if flg[tmp]:\n\n        print((-1))\n\n        break\n\n    else:\n\n        cnt += 1\n\n        if tmp == 0:\n\n            print(cnt)\n\n            break\n\n        flg[tmp] = True\n", "generated_code": "K = int(eval(input()))\n\nt = 7\n\nt %= K\n\n\n\nfor i in range(K+1):\n\n    if t == 0:\n\n        print((i+1))\n\n        exit()\n\n    t = (t*10+7)%K\n\nprint((-1))\n", "score": 1.0}
{"id": "PIE_p02537_s767194684", "golden_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    pass\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "score": 0.4768}
{"id": "PIE_extra_p03086_s780520490", "golden_code": "import re;print((max(list(map(len,re.split('[^ACGT]',eval(input())))))))", "generated_code": "p=m=0\n\nfor c in eval(input()):p=-~p*(c in'ATGC');m=max(m,p)\n\nprint(m)", "score": 1.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    pass\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0332}
{"id": "PIE_p02612_s197156959", "golden_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    return int(eval(input()))\ndef si():\n    return eval(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 0\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)", "generated_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    return int(eval(input()))\ndef si():\n    return eval(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\npass\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 0\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)", "score": 0.0}
{"id": "PIE_extra_p03032_s669893633", "golden_code": "from collections import deque\n\n\n\nn, k = list(map(int, input().split()))\n\nV = list(map(int, input().split()))\n\n\n\nans = 0\n\nfor t in range(k//2 + 1):\n\n    hand = deque(V[:k-t])\n\n    rest = deque(V[k-t:])\n\n    cur_sum = sum(hand)\n\n\n\n    for j in range(k-t+1):\n\n        put_back = 0\n\n        rev_hand = sorted(hand)\n\n\n\n        for i in range(t):\n\n            jewel = rev_hand[i]\n\n            if jewel < 0:\n\n                put_back -= jewel\n\n            else:\n\n                break\n\n\n\n        candidate = cur_sum + put_back\n\n        ans = max(candidate, ans)\n\n\n\n        to_rest = hand.pop()\n\n        rest.appendleft(to_rest)\n\n        to_hand = rest.pop()\n\n        hand.appendleft(to_hand)\n\n\n\n        cur_sum += to_hand - to_rest\n\n\n\nprint(ans)", "generated_code": "n, k = list(map(int, input().split()))\n\nV = list(map(int, input().split()))\n\n\n\n\n\ndef get_jewelries(box, left_pop, right_pop):\n\n    if left_pop + right_pop >= len(box):\n\n        return box[:]\n\n\n\n    left = box[:left_pop]\n\n    right = box[-right_pop:] if right_pop else []\n\n\n\n    return left + right\n\n\n\n\n\ncandidates = []\n\npop_max = min(k, n)\n\nfor pop_count in range(pop_max+1):\n\n    residue = k - pop_count\n\n\n\n    for left_pop in range(pop_count+1):\n\n        right_pop = pop_count - left_pop\n\n        jewelries = get_jewelries(V, left_pop, right_pop)\n\n        jewelries.sort(reverse=True)\n\n\n\n        for _ in range(residue):\n\n            if not jewelries:\n\n                break\n\n            if jewelries[-1] < 0:\n\n                jewelries.pop()\n\n\n\n        value = sum(jewelries)\n\n        candidates.append(value)\n\n\n\nprint((max(candidates)))\n", "score": 1.0}
{"id": "PIE_extra_p03325_s558724347", "golden_code": "N=int(eval(input()))\n\na=list(map(int,input().split()))\n\nfor i in range(N):\n\n  for j in range(1,31):\n\n    if a[i]%(2**j)!=0:\n\n      a[i]=j-1\n\n      break\n\nprint((sum(a)))", "generated_code": "import sys\n\ninput = sys.stdin.buffer.readline\n\n\n\nN = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n\n\ndef f(n):\n\n  res = 0\n\n  while n % 2 == 0:\n\n    n //= 2\n\n    res += 1\n\n  return res\n\n\n\nanswer = 0\n\nfor a in A:\n\n  answer += f(a)\n\n\n\nprint(answer)", "score": 1.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        break\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    print(sep='\\n', *ans)", "score": 0.0374}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        pass\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0426}
{"id": "PIE_p02612_s197156959", "golden_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    return int(eval(input()))\ndef si():\n    return eval(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 0\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)", "generated_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    return int(eval(input()))\ndef si():\n    return eval(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 0\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        pass\n    print(n)", "score": 0.0}
{"id": "PIE_extra_p03425_s258539301", "golden_code": "# -*- coding: utf-8 -*-\n\nfrom collections import defaultdict\n\nfrom itertools import combinations\n\nN = int(eval(input()))\n\nC = [0, 0, 0, 0, 0, 0]\n\nD = defaultdict(int)\n\nfor i, m in enumerate(\"MARCH\", start=1):\n\n    D[m] = i\n\n\n\nfor _ in range(N):\n\n    C[D[input()[0]]] += 1\n\n\n\nans = 0\n\nfor a, b, c in combinations(list(range(1, 6)), r=3):\n\n    ans += C[a]*C[b]*C[c]\n\nprint(ans)", "generated_code": "from collections import defaultdict\n\nfrom itertools import combinations\n\ndef inpl(): return list(map(int, input().split()))\n\n\n\nC = defaultdict(int)\n\nN = int(eval(input()))\n\nfor _ in range(N):\n\n    C[input()[0]] += 1\n\n\n\nres = 0\n\nfor H in combinations(\"MARCH\", r=3):\n\n    res += C[H[0]] * C[H[1]] * C[H[2]]\n\nprint(res)", "score": 1.0}
{"id": "PIE_p02574_s911286307", "golden_code": "import math, sys\nn = int(sys.stdin.readline())\na = tuple(map(int, sys.stdin.readline().split()))\ng = math.gcd(a[0], a[1])\nfor i in range(2, n):\n    g = math.gcd(g, a[i])\nM = max(a)\nacc = a[0]\nfor i in range(n):\n    acc = math.gcd(acc, a[i])\nif acc != 1:\n    print('not coprime')\n    exit()\nLIMIT = max(a)\nminPrime = [0] * (LIMIT + 1)\nminPrime[1] = 1\ndef make():\n    for i in range(2, LIMIT + 1):\n        if minPrime[i] == 0:\n            minPrime[i] = i\n            for j in range(i + i, LIMIT + 1, i):\n                if minPrime[j] == 0:\n                    minPrime[j] = i\nmake()\ndef factrial(N):\n    ret = []\n    while minPrime[N] != N:\n        ret.append(minPrime[N])\n        N = N // minPrime[N]\n    if N != 1:\n        ret.append(N)\n    return ret\njudge = set([])\npc = True\npairwise = True\np = set()\nfor e in a:\n    if not pairwise:\n        break\n    asf = set(factrial(e))\n    if judge & asf != set():\n        pc = False\n    judge |= asf\nif pc:\n    print('pairwise coprime')\nelif g == 1:\n    print('setwise coprime')\nelse:\n    print('not coprime')", "generated_code": "import math, sys\nn = int(sys.stdin.readline())\na = tuple(map(int, sys.stdin.readline().split()))\ng = math.gcd(a[0], a[1])\nfor i in range(2, n):\n    g = math.gcd(g, a[i])\nM = max(a)\nacc = a[0]\nfor i in range(n):\n    acc = math.gcd(acc, a[i])\nif acc != 1:\n    print('not coprime')\n    exit()\nLIMIT = max(a)\nminPrime = [0] * (LIMIT + 1)\nminPrime[1] = 1\ndef make():\n    for i in range(2, LIMIT + 1):\n        if minPrime[i] == 0:\n            minPrime[i] = i\n            for j in range(i + i, LIMIT + 1, i):\n                if minPrime[j] == 0:\n                    minPrime[j] = i\n                break\nmake()\ndef factrial(N):\n    ret = []\n    while minPrime[N] != N:\n        ret.append(minPrime[N])\n        N = N // minPrime[N]\n    if N != 1:\n        ret.append(N)\n    return ret\njudge = set([])\npc = True\npairwise = True\np = set()\nfor e in a:\n    if not pairwise:\n        break\n    asf = set(factrial(e))\n    if judge & asf != set():\n        pc = False\n    judge |= asf\nif pc:\n    print('pairwise coprime')elif g == 1:\n    print('setwise coprime')\nelse:\n    print('not coprime')", "score": 0.0}
{"id": "PIE_extra_p04044_s532034645", "golden_code": "N, L = list(map(int, input().split()))\n\nS = list(eval(input()) for i in range(N))\n\nstr = \"\"\n\nfor i in range(N-1):\n\n    for j in range(N-1):\n\n        if S[j+1] + S[j] <= S[j] + S[j+1]:\n\n            S[j], S[j+1] = S[j+1], S[j]\n\nfor i in S:\n\n    str += i\n\nprint(str)\n", "generated_code": "N, L = list(map(int, input().split()))\n\nS = list(eval(input()) for i in range(N))\n\nS.sort()\n\nstr = \"\"\n\nfor i in S:\n\n    str += i\n\nprint(str)\n", "score": 1.0}
{"id": "PIE_extra_p03371_s272710522", "golden_code": "A, B, C, X, Y = [int(_) for _ in input().split()]\n\nans = A * X + B * Y\n\nfor i in range(max(X, Y) + 1):\n\n    cost = 2 * C * i\n\n    if X > i:\n\n        cost += A * (X - i)\n\n    if Y > i:\n\n        cost += B * (Y - i)\n\n    ans = min(ans, cost)\n\nprint(ans)", "generated_code": "A, B, C, X, Y = [int(_) for _ in input().split()]\n\nM = max(X, Y)\n\nprint((min(2 * C * M, 2 * C * (X + Y - M) + A *\n\n          (M - Y) + B * (M - X), A * X + B * Y)))\n", "score": 1.0}
{"id": "PIE_p02612_s197156959", "golden_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    return int(eval(input()))\ndef si():\n    return eval(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 0\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)", "generated_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    return int(eval(input()))\ndef si():\n    return eval(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([+1, 1, 0, 0], [0, 0, 1, -1])\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 0\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)", "score": 0.0}
{"id": "PIE_p02537_s645565645", "golden_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "generated_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, __e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "score": 0.0}
{"id": "PIE_p02649_s231020544", "golden_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if (i != 50 and j != 50):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\n(N, K, T, S) = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\nans = 0\nn = len(bit)\ndata = [0] * (2 ** n)\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * ((-1) ** popcount(i))\n    for val in t:\n        data[val] = 0\nprint(ans)", "generated_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if (i != 50 and j != 50):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\n(N, K, T, S) = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\npass\nn = len(bit)\ndata = [0] * (2 ** n)\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * ((-1) ** popcount(i))\n    for val in t:\n        data[val] = 0\nprint(ans)", "score": 0.413}
{"id": "PIE_extra_p03371_s614340278", "golden_code": "A, B, C, X, Y = list(map(int, input().split()))\n\nans = float('inf')\n\nfor i in range(max(X,Y)+1):\n\n    cost = 2 * C * i + max(0,X-i)*A +max(0,Y-i)*B\n\n    ans = min(ans,cost)\n\nprint(ans)", "generated_code": "A, B, C, X, Y = list(map(int, input().split()))\n\ntmp = A*X + B*Y\n\nif X >= Y:\n\n    tmp = min(tmp,2*Y*C+(X-Y)*A)\n\nelse:\n\n    tmp = min(tmp,2*X*C+(Y-X)*B)\n\ntmp = min(tmp,max(X,Y)*2*C)\n\nprint(tmp)", "score": 1.0}
{"id": "PIE_p02649_s231020544", "golden_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if (i != 50 and j != 50):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\n(N, K, T, S) = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\nans = 0\nn = len(bit)\ndata = [0] * (2 ** n)\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * ((-1) ** popcount(i))\n    for val in t:\n        data[val] = 0\nprint(ans)", "generated_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if (i != 50 and j != 50):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\n(N, K, T, S) = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\nans = 0\nn = len(bit)\ndata = [0] / (2 ** n)\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * ((-1) ** popcount(i))\n    for val in t:\n        data[val] = 0\nprint(ans)", "score": 0.3956}
{"id": "PIE_p02537_s645565645", "golden_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "generated_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] / (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "score": 0.0}
{"id": "PIE_p03253_s242343005", "golden_code": "class Calc:\n    def __init__(self, max_value, mod):\n        fact = [-1] * (max_value + 1)\n        fact[0] = 1\n        fact[1] = 1\n        for x in range(2, max_value + 1):\n            fact[x] = (x * fact[x - 1]) % mod\n        invs = [1] * (max_value + 1)\n        invs[max_value] = pow(fact[max_value], mod - 2, mod)\n        for x in range(max_value - 1, 0, -1):\n            invs[x] = (invs[x + 1] * (x + 1)) % mod\n        self.fact = fact\n        self.invs = invs\n        self.mod = mod\n    def combination(self, n, r):\n        if n - r < r:\n            return self.combination(n, n - r)\n        if r < 0:\n            return 0\n        if r == 0:\n            return 1\n        if r == 1:\n            return n\n        return ((self.fact[n] * self.invs[r]) * self.invs[n - r]) % self.mod\ndef gen(n):\n    x = n\n    d = 2\n    cnt = 0\n    while x % d == 0:\n        x //= d\n        cnt += 1\n    yield cnt\n    d = 3\n    ma = d * d\n    while ma <= n:\n        cnt = 0\n        while x % d == 0:\n            x //= d\n            cnt += 1\n        yield cnt\n        ma += (d * 4) + 4\n        d += 2\n    if x > 1:\n        yield 1\ndef main():\n    MOD = (10 ** 9) + 7\n    (N, M) = list(map(int, input().split()))\n    cal = Calc(max_value=N + 30, mod=MOD)\n    ans = 1\n    for cnt in gen(M):\n        ans = (ans * cal.combination((N + cnt) - 1, cnt)) % MOD\n    print(ans)", "generated_code": "class Calc:\n    def __init__(self, max_value, mod):\n        fact = [1] * (max_value + 1)\n        fact[0] = 1\n        fact[1] = 1\n        for x in range(2, max_value + 1):\n            fact[x] = (x * fact[x - 1]) % mod\n        invs = [1] * (max_value + 1)\n        invs[max_value] = pow(fact[max_value], mod - 2, mod)\n        for x in range(max_value - 1, 0, -1):\n            invs[x] = (invs[x + 1] * (x + 1)) % mod\n        self.fact = fact\n        self.invs = invs\n        self.mod = mod\n    def combination(self, n, r):\n        if n - r < r:\n            return self.combination(n, n - r)\n        if r < 0:\n            return 0\n        if r == 0:\n            return 1\n        if r == 1:\n            return n\n        return ((self.fact[n] * self.invs[r]) * self.invs[n - r]) % self.mod\ndef gen(n):\n    x = n\n    d = 2\n    cnt = 0\n    while x % d == 0:\n        x //= d\n        cnt += 1\n    yield cnt\n    d = 3\n    ma = d * d\n    while ma <= n:\n        cnt = 0\n        while x % d == 0:\n            x //= d\n            cnt += 1\n        yield cnt\n        ma += (d * 4) + 4\n        d += 2\n    if x > 1:\n        yield 1\ndef main():\n    MOD = (10 ** 9) + 7\n    (N, M) = list(map(int, input().split()))\n    cal = Calc(max_value=N + 30, mod=MOD)\n    ans = 1\n    for cnt in gen(M):\n        ans = (ans * cal.combination((N + cnt) - 1, cnt)) % MOD\n    print(ans)", "score": 0.0}
{"id": "PIE_extra_p03309_s031191514", "golden_code": "def main():\n\n    from statistics import median\n\n\n\n    n, *a, = list(map(int, open(0).read().split()))\n\n    a = [x - i for i, x in enumerate(a, 1)]\n\n    a.sort()\n\n    m = int(median(a))\n\n\n\n    ans = sum([abs(x - m) for x in a])\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n", "generated_code": "def main():\n\n    n, *a, = list(map(int, open(0).read().split()))\n\n    a = [x - i for i, x in enumerate(a, 1)]\n\n    a.sort()\n\n    if n % 2 == 0:\n\n        ans = sum(a[n // 2:]) - sum(a[:n // 2])\n\n    else:\n\n        ans = sum(a[n // 2 + 1:]) - sum(a[:n // 2])\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n", "score": 1.0}
{"id": "PIE_extra_p03038_s124992398", "golden_code": "from heapq import *\n\n\n\n\n\nn, m = list(map(int, input().split()))\n\nPAIRS = [[-a, -1] for a in map(int, input().split())]\n\nheapify(PAIRS)\n\n\n\nfor _ in range(m):\n\n    b, c = list(map(int, input().split()))\n\n    heappush(PAIRS, [-c, -b])\n\n\n\nanswer = 0\n\nfor _ in range(n):\n\n    pair = heappop(PAIRS)\n\n    answer += -pair[0]\n\n    pair[1] += 1\n\n    if pair[1] != 0:\n\n        heappush(PAIRS, pair)\n\n\n\nprint(answer)\n", "generated_code": "n, m = list(map(int, input().split()))\n\nPAIRS = [(a, 1) for a in map(int, input().split())]\n\n\n\nfor _ in range(m):\n\n    b, c = list(map(int, input().split()))\n\n    PAIRS.append((c, b))\n\nPAIRS.sort(reverse = True)\n\n\n\nanswer, count = 0, 0\n\nfor pair in PAIRS:\n\n    answer += pair[0] * pair[1]\n\n    count += pair[1]\n\n    if count > n:\n\n        answer -= pair[0] * (count - n)\n\n        break\n\n\n\nprint(answer)\n", "score": 1.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= __n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0406}
{"id": "PIE_p02649_s231020544", "golden_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if (i != 50 and j != 50):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\n(N, K, T, S) = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\nans = 0\nn = len(bit)\ndata = [0] * (2 ** n)\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * ((-1) ** popcount(i))\n    for val in t:\n        data[val] = 0\nprint(ans)", "generated_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if (i != 50 and j != 50):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\n(N, K, T, S) = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\nans = 0\nn = len(bit)\ndata = [0] * (2 ** n)\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans -= temp * ((-1) ** popcount(i))\n    for val in t:\n        data[val] = 0\nprint(ans)", "score": 0.4924}
{"id": "PIE_extra_p02555_s550500681", "golden_code": "s=int(eval(input()))\n\np=10**9+7\n\nif s<=2:\n\n    print((0))\n\n    exit()\n\nn=s//3\n\nans=0\n\ndef f(n,k,p):\n\n    if k==0:\n\n        return 1\n\n    elif k%2==0:\n\n        return (f(n,k//2,p)**2)%p\n\n    else:\n\n        return (n*f(n,k-1,p))%p\n\n\n\nfor k in range(1,n+1):\n\n    a=1\n\n    b=1\n\n    for j in range(k-1):\n\n        a=(a*(s-3*k+1+j))%p\n\n        b=(b*(j+1))%p\n\n    ans=(ans+a*f(b,p-2,p))%p\n\n\n\nprint((ans%p))\n\n\n", "generated_code": "s=int(eval(input()))\n\np=10**9+7\n\nif s<=2:\n\n    print((0))\n\n    exit()\n\nn=s//3\n\nans=0\n\nx=[0]*(s+1)\n\nx[0]=1\n\nx[1]=1\n\ny=[0]*(s+1)\n\n\n\nfor i in range(2,s+1):\n\n    x[i]=x[i-1]*i%p\n\n\n\ny[s]=pow(x[s],p-2,p)\n\nfor i in range(s):\n\n    y[s-1-i]=y[s-i]*(s-i)%p\n\n\n\nfor k in range(1,n+1):\n\n    ans+=x[s-2*k-1]*y[k-1]*y[s-3*k]%p\n\n\n\nprint((ans%p))\n\n\n", "score": 1.0}
{"id": "PIE_extra_p03436_s361663353", "golden_code": "from collections import deque\n\n\n\nINF = float('inf')\n\n\n\ndr = (-1, 0, 0, 1)\n\ndc = (0, -1, 1, 0)\n\n\n\nH, W = list(map(int, input().split()))\n\n\n\ns = []\n\ntotal_white_count = 0\n\nfor _ in range(H):\n\n    t = eval(input())\n\n    s.append(t)\n\n    total_white_count += t.count('.')\n\np = [[INF for _ in range(W)] for _ in range(H)]\n\n\n\nans = -1\n\n\n\ndq = deque()\n\ndq.append((0, 0, 1))\n\nwhile dq:\n\n    r, c, d = dq.popleft() # 直した\n\n\n\n    nd = d + 1\n\n    for i in range(4):\n\n        nr = r + dr[i]\n\n        nc = c + dc[i]\n\n        if not (0 <= nr < H and 0 <= nc < W): continue\n\n        if s[nr][nc] == '#' : continue\n\n        if p[nr][nc] <= nd: continue\n\n        p[nr][nc] = nd\n\n        if nr == H - 1 and nc == W - 1:\n\n            ans = total_white_count - nd\n\n            break\n\n        dq.append((nr, nc, nd))\n\n    else:\n\n        continue\n\n    break\n\n\n\nprint(ans)\n", "generated_code": "def main():\n\n    from collections import deque\n\n    import sys\n\n\n\n    input = sys.stdin.readline\n\n\n\n    h, w = list(map(int, input().split()))\n\n    s = [eval(input()) for _ in range(h)]\n\n\n\n    bk = 0\n\n    for row in s:\n\n        bk += row.count('#')\n\n\n\n    def coods(r, c):\n\n        if r > 0: yield r - 1, c\n\n        if r < h - 1: yield r + 1, c\n\n        if c > 0: yield r, c - 1\n\n        if c < w - 1: yield r, c + 1\n\n\n\n    q = deque()\n\n    q.append((0, 0))\n\n    count = [[-1] * w for _ in range(h)]\n\n    count[0][0] = 1\n\n    while q:\n\n        r, c = q.popleft()\n\n        k = count[r][c]\n\n        for nr, nc in coods(r, c):\n\n            nchar = s[nr][nc]\n\n            if nchar == '#': continue\n\n            if count[nr][nc] != -1: continue\n\n            count[nr][nc] = k + 1\n\n            if (nr, nc) == (h - 1, w - 1):\n\n                print((h * w - (k + 1) - bk))\n\n                return\n\n            q.append((nr, nc))\n\n    print((-1))\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n", "score": 1.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            pass\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0358}
{"id": "PIE_extra_p00542_s237799080", "golden_code": "a,b,c,d,e,f=[int(eval(input())) for _ in range(6)]\n\nprint((sum([a,b,c,d,max(e,f)])-min([a,b,c,d])))", "generated_code": "print((sum(sorted(int(eval(input())) for _ in range(4))[1:])+max([int(eval(input())) for _ in range(2)])))", "score": 1.0}
{"id": "PIE_p00144_s682125154", "golden_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "generated_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] <= v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "score": 0.1155}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0334}
{"id": "PIE_p03634_s798160758", "golden_code": "from collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\ndef I():\n    return int(sys.stdin.readline())\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\ndef S():\n    return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = SR()\n    return l\nmod = 1000000007\nn = I()\nv = [[] for i in range(n)]\nfor i in range(n - 1):\n    (a, b, c) = LI()\n    a -= 1\n    b -= 1\n    v[a].append([b, c])\n    v[b].append([a, c])\n(Q, k) = LI()\nd = [-1 for i in range(n)]\nd[k - 1] = 0\nq = deque()\nq.append(k - 1)\nwhile q:\n    x = q.pop()\n    for (y, c) in v[x]:\n        if d[y] == -1:\n            d[y] = d[x] + c\n            q.append(y)\nfor i in range(Q):\n    (x, y) = LI()\n    x -= 1\n    y -= 1\n    print(d[x] + d[y])", "generated_code": "from collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\ndef I():\n    return int(sys.stdin.readline())\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\ndef S():\n    return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = SR()\n    return l\nmod = 1000000007\nn = I()\nv = [[] for i in range(n)]\nfor i in range(n - 1):\n    (a, b, c) = LI()\n    a -= 1\n    b -= 1\n    v[a].append([b, c])\n    v[b].append([a, c])\n(Q, k) = LI()\nd = [-1 for i in range(n)]\nd[k + 1] = 0\nq = deque()\nq.append(k - 1)\nwhile q:\n    x = q.pop()\n    for (y, c) in v[x]:\n        if d[y] == -1:\n            d[y] = d[x] + c\n            q.append(y)\nfor i in range(Q):\n    (x, y) = LI()\n    x -= 1\n    y -= 1\n    print(d[x] + d[y])", "score": 0.001}
{"id": "PIE_p02537_s767194684", "golden_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == 1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "score": 0.4798}
{"id": "PIE_p02685_s295745028", "golden_code": "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nfac = [1, 1]\nf_inv = [1, 1]\ninv = [0, 1]\ndef prepare(n, mod):\n    for i in range(2, n + 1):\n        fac.append((fac[-1] * i) % mod)\n        inv.append(((-(inv[mod % i])) * (mod // i)) % mod)\n        f_inv.append((f_inv[-1] * inv[-1]) % mod)\ndef cmb(n, r, mod):\n    if (n < 0 or r < 0):\n        return 0\n    if r > n:\n        return 0\n    return ((fac[n] * f_inv[r]) * f_inv[n - r]) % mod\ndef main():\n    (N, M, K) = list(map(int, readline().split()))\n    MOD = 998244353\n    prepare(N + 10, MOD)\n    if (M == 1 and K == N - 1):\n        print(1)\n        exit()\n    m = M\n    for _ in range(N - 1):\n        m *= M - 1\n        m %= MOD\n    ans = 0\n    for k in range(K + 1):\n        ans += (m * cmb(N - 1, k, MOD)) % MOD\n        ans %= MOD\n        m *= pow(M - 1, MOD - 2, MOD)\n        m %= MOD\n    print(ans)", "generated_code": "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nfac = [1, 1]\nf_inv = [1, 1]\ninv = [0, 1]\ndef prepare(n, mod):\n    for i in range(2, n + 1):\n        fac.append((fac[+1] * i) % mod)\n        inv.append(((-(inv[mod % i])) * (mod // i)) % mod)\n        f_inv.append((f_inv[-1] * inv[-1]) % mod)\ndef cmb(n, r, mod):\n    if (n < 0 or r < 0):\n        return 0\n    if r > n:\n        return 0\n    return ((fac[n] * f_inv[r]) * f_inv[n - r]) % mod\ndef main():\n    (N, M, K) = list(map(int, readline().split()))\n    MOD = 998244353\n    prepare(N + 10, MOD)\n    if (M == 1 and K == N - 1):\n        print(1)\n        exit()\n    m = M\n    for _ in range(N - 1):\n        m *= M - 1\n        m %= MOD\n    ans = 0\n    for k in range(K + 1):\n        ans += (m * cmb(N - 1, k, MOD)) % MOD\n        ans %= MOD\n        m *= pow(M - 1, MOD - 2, MOD)\n        m %= MOD\n    print(ans)", "score": 0.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] / Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0456}
{"id": "PIE_p02537_s767194684", "golden_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    pass\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "score": 0.4568}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        pass\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0464}
{"id": "PIE_extra_p02693_s690438210", "golden_code": "import sys\n\ninput = sys.stdin.readline\n\nfrom collections import *\n\n\n\nK = int(eval(input()))\n\nA, B = list(map(int, input().split()))\n\n\n\nfor i in range(A, B+1):\n\n    if i%K==0:\n\n        print('OK')\n\n        exit()\n\n    \n\nprint('NG')", "generated_code": "K = int(eval(input()))\n\nA, B = list(map(int, input().split()))\n\n\n\nif (A-1)//K!=B//K:\n\n    print('OK')\n\nelse:\n\n    print('NG')", "score": 1.0}
{"id": "PIE_extra_p03371_s775348159", "golden_code": "a, b, c, x, y = list(map(int, input().split()))\n\nab = c * 2\n\n\n\nres = float(\"inf\")\n\nif a + b <= ab:\n\n    res = x * a + y * b\n\nelse:\n\n    if x == y:\n\n        res = x * ab\n\n    elif x > y:\n\n        for i in range(y, x + 1):\n\n            cost = i * ab + (x - i) * a\n\n            res = min(res, cost)\n\n    else:\n\n        for i in range(x, y + 1):\n\n            cost = i * ab + (y - i) * b\n\n            res = min(res, cost)\n\nprint(res)\n", "generated_code": "import sys\n\n\n\nsys.setrecursionlimit(10 ** 7)\n\ninput = sys.stdin.readline\n\nf_inf = float('inf')\n\nmod = 10 ** 9 + 7\n\n\n\n\n\ndef resolve():\n\n    a, b, c, x, y = list(map(int, input().split()))\n\n    c *= 2\n\n    if a + b > c:\n\n        cost1 = max(x, y) * c\n\n        cost2 = min(x, y) * c\n\n        plus = ((y - x) * b) if x < y else (x - y) * a\n\n        res = min(cost1, cost2 + plus)\n\n    else:\n\n        res = x * a + y * b\n\n    print(res)\n\n\n\nif __name__ == '__main__':\n\n    resolve()\n", "score": 1.0}
{"id": "PIE_p03674_s545310428", "golden_code": "n = int(eval(input()))\na = list(map(int, input().split()))\nD = {i: [0] for i in range(1, n + 1)}\nfor i in range(n + 1):\n    D[a[i]][0] += 1\n    D[a[i]].append(i)\n(pl, pr) = (0, 0)\nfor i in D:\n    if D[i][0] == 2:\n        pl = D[i][1]\n        pr = D[i][2]\n        break\nL = pl\nM = (pr - pl) - 1\nN = n - pr\nmod = int(1000000000.0) + 7\nmaxf = n + 11\ndef make_fact(n, k):\n    tmp = n\n    perm = [i for i in range(k)]\n    L = [0 for _ in range(k)]\n    for i in range(k):\n        L[i] = tmp % (i + 1)\n        tmp //= i + 1\n    LL = [0 for _ in range(k)]\n    for i in range(k):\n        LL[i] = perm[L[(-i) - 1]]\n        for j in range(L[(-i) - 1] + 1, k):\n            perm[j - 1] = perm[j]\n    return LL\ndef doubling(n, m, modulo=mod):\n    y = 1\n    base = n\n    tmp = m\n    while tmp != 0:\n        if tmp % 2 == 1:\n            y *= base\n            if modulo > 0:\n                y %= modulo\n        base *= base\n        if modulo > 0:\n            base %= modulo\n        tmp //= 2\n    return y\ndef inved(a, modulo=mod):\n    (x, y, u, v, k, l) = (1, 0, 0, 1, a, modulo)\n    while l != 0:\n        (x, y, u, v) = (u, v, x - (u * (k // l)), y - (v * (k // l)))\n        (k, l) = (l, k % l)\n    return x % modulo\nfact = [1 for _ in range(maxf + 1)]\ninvf = [1 for _ in range(maxf + 1)]\nfor i in range(maxf):\n    fact[i + 1] = (fact[i] * (i + 1)) % mod\ninvf[-1] = inved(fact[-1])\nfor i in range(maxf, 0, -1):\n    invf[i - 1] = (invf[i] * i) % mod\nfor i in range(1, n + 2):\n    S = ((fact[n] * invf[i - 1]) * invf[(n - i) + 1]) % mod\n    if i <= n - 1:\n        S += ((fact[n - 1] * invf[i]) * invf[(n - 1) - i]) % mod\n        S %= mod\n    if i <= n - M:\n        S -= ((fact[(n - 1) - M] * invf[i - 1]) * invf[(n - M) - i]) % mod\n        S %= mod\n    if i <= n:\n        S += ((fact[n - 1] * invf[i - 1]) * invf[n - i]) % mod\n        S %= mod\n    print(S)", "generated_code": "n = int(eval(input()))\na = list(map(int, input().split()))\nD = {i: [0] for i in range(1, n + 1)}\nfor i in range(n + 1):\n    D[a[i]][0] += 1\n    D[a[i]].append(i)\n(pl, pr) = (0, 0)\nfor i in D:\n    if D[i][0] == 2:\n        pl = D[i][1]\n        pr = D[i][2]\n        break\nL = pl\nM = (pr - pl) - 1\nN = n - pr\nmod = int(1000000000.0) + 7\nmaxf = n + 11\ndef make_fact(n, k):\n    tmp = n\n    perm = [i for i in range(k)]\n    L = [0 for _ in range(k)]\n    for i in range(k):\n        L[i] = tmp % (i + 1)\n        tmp //= i + 1\n    LL = [0 for _ in range(k)]\n    for i in range(k):\n        LL[i] = perm[L[(-i) - 1]]\n        for j in range(L[(-i) - 1] + 1, k):\n            perm[j - 1] = perm[j]\n    return LL\ndef doubling(n, m, modulo=mod):\n    y = 1\n    base = n\n    tmp = m\n    while tmp != 0:\n        if tmp % 2 == 1:\n            y *= base\n            if modulo > 0:\n                y %= modulo\n        base *= base\n        if modulo > 0:\n            base %= modulo\n        tmp //= 2\n    return y\ndef inved(a, modulo=mod):\n    (x, y, u, v, k, l) = (1, 0, 0, 1, a, modulo)\n    while l != 0:\n        (x, y, u, v) = (u, v, x - (u * (k // l)), y - (v * (k // l)))\n        (k, l) = (l, k % l)\n    return x % modulo\nfact = [1 for _ in range(maxf + 1)]\ninvf = [1 for _ in range(maxf + 1)]\nfor i in range(maxf):\n    fact[i + 1] = (fact[i] * (i + 1)) % mod\ninvf[1] = inved(fact[-1])\nfor i in range(maxf, 0, -1):\n    invf[i - 1] = (invf[i] * i) % mod\nfor i in range(1, n + 2):\n    S = ((fact[n] * invf[i - 1]) * invf[(n - i) + 1]) % mod\n    if i <= n - 1:\n        S += ((fact[n - 1] * invf[i]) * invf[(n - 1) - i]) % mod\n        S %= mod\n    if i <= n - M:\n        S -= ((fact[(n - 1) - M] * invf[i - 1]) * invf[(n - M) - i]) % mod\n        S %= mod\n    if i <= n:\n        S += ((fact[n - 1] * invf[i - 1]) * invf[n - i]) % mod\n        S %= mod\n    print(S)", "score": 0.0}
{"id": "PIE_p02685_s295745028", "golden_code": "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nfac = [1, 1]\nf_inv = [1, 1]\ninv = [0, 1]\ndef prepare(n, mod):\n    for i in range(2, n + 1):\n        fac.append((fac[-1] * i) % mod)\n        inv.append(((-(inv[mod % i])) * (mod // i)) % mod)\n        f_inv.append((f_inv[-1] * inv[-1]) % mod)\ndef cmb(n, r, mod):\n    if (n < 0 or r < 0):\n        return 0\n    if r > n:\n        return 0\n    return ((fac[n] * f_inv[r]) * f_inv[n - r]) % mod\ndef main():\n    (N, M, K) = list(map(int, readline().split()))\n    MOD = 998244353\n    prepare(N + 10, MOD)\n    if (M == 1 and K == N - 1):\n        print(1)\n        exit()\n    m = M\n    for _ in range(N - 1):\n        m *= M - 1\n        m %= MOD\n    ans = 0\n    for k in range(K + 1):\n        ans += (m * cmb(N - 1, k, MOD)) % MOD\n        ans %= MOD\n        m *= pow(M - 1, MOD - 2, MOD)\n        m %= MOD\n    print(ans)", "generated_code": "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nfac = [1, 1]\nf_inv = [1, 1]\ninv = [0, 1]\ndef prepare(n, mod):\n    for i in range(2, n + 1):\n        fac.append((fac[-1] * i) % mod)\n        inv.append(((-(inv[mod % i])) * (mod // i)) % mod)\n        f_inv.append((f_inv[1] * inv[-1]) % mod)\ndef cmb(n, r, mod):\n    if (n < 0 or r < 0):\n        return 0\n    if r > n:\n        return 0\n    return ((fac[n] * f_inv[r]) * f_inv[n - r]) % mod\ndef main():\n    (N, M, K) = list(map(int, readline().split()))\n    MOD = 998244353\n    prepare(N + 10, MOD)\n    if (M == 1 and K == N - 1):\n        print(1)\n        exit()\n    m = M\n    for _ in range(N - 1):\n        m *= M - 1\n        m %= MOD\n    ans = 0\n    for k in range(K + 1):\n        ans += (m * cmb(N - 1, k, MOD)) % MOD\n        ans %= MOD\n        m *= pow(M - 1, MOD - 2, MOD)\n        m %= MOD\n    print(ans)", "score": 0.0}
{"id": "PIE_p03634_s143869460", "golden_code": "import sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\ndef solve():\n    inf = (10 ** 14) + 10\n    def dfs(v: 'vertex_index, 0-indexed') -> None:\n        for (c, t) in e[v]:\n            if d[t] != inf:\n                continue\n            d[t] = d[v] + c\n            dfs(t)\n    n = int(eval(input()))\n    e = tuple((set() for _ in range(n)))\n    for _ in range(n - 1):\n        (a, b, c) = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        e[a].add((c, b))\n        e[b].add((c, a))\n    (q, v) = list(map(int, input().split()))\n    v -= 1\n    d = [inf] * n\n    d[v] = 0\n    dfs(v)\n    for _ in range(q):\n        (x, y) = list(map(int, input().split()))\n        x -= 1\n        y -= 1\n        print(d[x] + d[y])", "generated_code": "import sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\ndef solve():\n    inf = (10 ** 14) + 10\n    def dfs(v: 'vertex_index, 0-indexed') -> None:\n        for (c, t) in e[v]:\n            if d[t] != inf:\n                continue\n            d[t] = d[v] + c\n            dfs(t)\n    n = int(eval(input()))\n    e = tuple((set() for _ in range(n)))\n    for _ in range(n - 1):\n        (a, b, c) = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        e[a].add((c, b))\n        e[b].add((c, a))\n    (q, v) = list(map(int, input().split()))\n    v -= 1\n    d = [inf] * n\n    d[v] = 0\n    dfs(v)\n    for _ in range(q):\n        (x, y) = list(map(int, input().split()))\n        x -= 1\n        y -= 1\n        print(d[x] - d[y])", "score": 0.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    @classmethod\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)def main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0346}
{"id": "PIE_p02574_s911286307", "golden_code": "import math, sys\nn = int(sys.stdin.readline())\na = tuple(map(int, sys.stdin.readline().split()))\ng = math.gcd(a[0], a[1])\nfor i in range(2, n):\n    g = math.gcd(g, a[i])\nM = max(a)\nacc = a[0]\nfor i in range(n):\n    acc = math.gcd(acc, a[i])\nif acc != 1:\n    print('not coprime')\n    exit()\nLIMIT = max(a)\nminPrime = [0] * (LIMIT + 1)\nminPrime[1] = 1\ndef make():\n    for i in range(2, LIMIT + 1):\n        if minPrime[i] == 0:\n            minPrime[i] = i\n            for j in range(i + i, LIMIT + 1, i):\n                if minPrime[j] == 0:\n                    minPrime[j] = i\nmake()\ndef factrial(N):\n    ret = []\n    while minPrime[N] != N:\n        ret.append(minPrime[N])\n        N = N // minPrime[N]\n    if N != 1:\n        ret.append(N)\n    return ret\njudge = set([])\npc = True\npairwise = True\np = set()\nfor e in a:\n    if not pairwise:\n        break\n    asf = set(factrial(e))\n    if judge & asf != set():\n        pc = False\n    judge |= asf\nif pc:\n    print('pairwise coprime')\nelif g == 1:\n    print('setwise coprime')\nelse:\n    print('not coprime')", "generated_code": "import math, sys\nn = int(sys.stdin.readline())\na = tuple(map(int, sys.stdin.readline().split()))\ng = math.gcd(a[0], a[1])\nfor i in range(2, n):\n    g = math.gcd(g, a[i])\nM = max(a)\nacc = a[0]\nfor i in range(n):\n    acc = math.gcd(acc, a[i])\nif acc != 1:\n    print('not coprime')\n    exit()\nLIMIT = max(a)\nminPrime = [0] * (LIMIT + 1)\nminPrime[1] = 1\ndef make():\n    for i in range(2, LIMIT + 1):\n        if minPrime[i] == 0:\n            minPrime[i] = i\n            for j in range(i + i, LIMIT + 1, i):\n                if minPrime[j] == 0:\n                    minPrime[j] = i\nmake()\ndef factrial(N):\n    ret = []\n    while minPrime[N] != N:\n        ret.append(minPrime[N])\n        N = N // minPrime[N]\n    if N != 1:\n        ret.append(N)\n    return ret\njudge = set([])\npc = True\npairwise = True\np = set()\nfor e in a:\n    if not pairwise:\n        break\n    asf = set(factrial(e))\n    if judge & asf != set():\n        pc = False\n    judge |= asf\nif not pc:\n    print('pairwise coprime')\nelif g == 1:\n    print('setwise coprime')\nelse:\n    print('not coprime')", "score": 0.0346}
{"id": "PIE_p03253_s968664754", "golden_code": "from math import floor, sqrt\nfrom collections import defaultdict\ndef factors(n):\n    d = defaultdict(int)\n    for i in range(2, floor(sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            d[i] += 1\n        if n == 1:\n            break\n    if n != 1:\n        d[n] += 1\n    return d\ndef inv(x, mod):\n    k = mod - 2\n    ret = 1\n    while k > 0:\n        if k & 1:\n            ret = (ret * x) % mod\n        x = (x * x) % mod\n        k >>= 1\n    return ret\n(N, M) = list(map(int, input().split()))\nmod = (10 ** 9) + 7\ndic = factors(M)\nK = len(dic)\nSIZE = N + max(dic.values()) if list(dic.values()) else N\nfact = [None] * (SIZE + 1)\nfinv = [None] * (SIZE + 1)\nfact[0] = 1\nfor i in range(1, SIZE + 1):\n    fact[i] = (fact[i - 1] * i) % mod\nfinv[SIZE] = inv(fact[SIZE], mod=mod)\nfor i in range(SIZE, 0, -1):\n    finv[i - 1] = (finv[i] * i) % mod\ndef comb(n, k):\n    tmp = (finv[k] * finv[n - k]) % mod\n    return (fact[n] * tmp) % mod\nans = 1\nfor p in dic:\n    ans = (ans * comb((dic[p] + N) - 1, dic[p])) % mod\nprint(ans)", "generated_code": "from math import floor, sqrt\nfrom collections import defaultdict\ndef factors(n):\n    d = defaultdict(int)\n    for i in range(2, floor(sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            d[i] += 1\n        if n == 1:\n            break\n    if n != 1:\n        d[n] += 1\n    return d\ndef inv(x, mod):\n    k = mod - 2\n    ret = 1\n    while k > 0:\n        if k & 1:\n            ret = (ret / x) % mod\n        x = (x * x) % mod\n        k >>= 1\n    return ret\n(N, M) = list(map(int, input().split()))\nmod = (10 ** 9) + 7\ndic = factors(M)\nK = len(dic)\nSIZE = N + max(dic.values()) if list(dic.values()) else N\nfact = [None] * (SIZE + 1)\nfinv = [None] * (SIZE + 1)\nfact[0] = 1\nfor i in range(1, SIZE + 1):\n    fact[i] = (fact[i - 1] * i) % mod\nfinv[SIZE] = inv(fact[SIZE], mod=mod)\nfor i in range(SIZE, 0, -1):\n    finv[i - 1] = (finv[i] * i) % mod\ndef comb(n, k):\n    tmp = (finv[k] * finv[n - k]) % mod\n    return (fact[n] * tmp) % mod\nans = 1\nfor p in dic:\n    ans = (ans * comb((dic[p] + N) - 1, dic[p])) % mod\nprint(ans)", "score": 0.3504}
{"id": "PIE_p02537_s645565645", "golden_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "generated_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n + 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "score": 0.0}
{"id": "PIE_extra_p03416_s640144582", "golden_code": "a , b = input().split()\n\na = int(a)\n\nb = int(b)\n\ncount=0\n\nfor i in range(a,b+1):\n\n    test = list(str(i))\n\n    if (test[0] == test[4]) and (test[1]==test[3]):\n\n        count=count+1\n\nprint(count)", "generated_code": "A,B=list(map(int,input().split()))\n\nct=0\n\nfor i in range(A,B+1):\n\n    s=str(i)\n\n    if s==s[::-1]:\n\n        ct+=1\n\nprint(ct)", "score": 1.0}
{"id": "PIE_p03253_s948054289", "golden_code": "from math import floor, sqrt\nfrom collections import Counter\nMOD = (10 ** 9) + 7\ndef getPrimeFactor(x):\n    ans = []\n    for d in range(2, floor(sqrt(x)) + 1):\n        while x % d == 0:\n            ans.append(d)\n            x //= d\n    if x != 1:\n        ans.append(x)\n    return ans\ndef power(x, n):\n    ans = 1\n    while n:\n        if n % 2 == 1:\n            ans = (ans * x) % MOD\n        x = (x * x) % MOD\n        n //= 2\n    return ans\n(N, M) = list(map(int, input().split()))\nPFs = getPrimeFactor(M)\ncnt = Counter(PFs)\nN2 = N\nif len(cnt):\n    N2 += max(cnt.values())\nfacts = [1] + ([0] * N2)\nfor x in range(1, N2 + 1):\n    facts[x] = (facts[x - 1] * x) % MOD\ninvFs = ([0] * N2) + [power(facts[N2], MOD - 2)]\nfor x in reversed(list(range(N2))):\n    invFs[x] = (invFs[x + 1] * (x + 1)) % MOD\ndef comb(n, k):\n    return (((facts[n] * invFs[k]) % MOD) * invFs[n - k]) % MOD\nans = 1\nfor num in list(cnt.values()):\n    ans = (ans * comb((N + num) - 1, num)) % MOD\nprint(ans)", "generated_code": "from math import floor, sqrt\nfrom collections import Counter\nMOD = (10 ** 9) + 7\ndef getPrimeFactor(x):\n    ans = []\n    for d in range(2, floor(sqrt(x)) + 1):\n        while x % d == 0:\n            ans.append(d)\n            x //= d\n    if x != 1:\n        ans.append(x)\n    return ans\ndef power(x, n):\n    ans = 1\n    while n:\n        if n * 2 == 1:\n            ans = (ans * x) % MOD\n        x = (x * x) % MOD\n        n //= 2\n    return ans\n(N, M) = list(map(int, input().split()))\nPFs = getPrimeFactor(M)\ncnt = Counter(PFs)\nN2 = N\nif len(cnt):\n    N2 += max(cnt.values())\nfacts = [1] + ([0] * N2)\nfor x in range(1, N2 + 1):\n    facts[x] = (facts[x - 1] * x) % MOD\ninvFs = ([0] * N2) + [power(facts[N2], MOD - 2)]\nfor x in reversed(list(range(N2))):\n    invFs[x] = (invFs[x + 1] * (x + 1)) % MOD\ndef comb(n, k):\n    return (((facts[n] * invFs[k]) % MOD) * invFs[n - k]) % MOD\nans = 1\nfor num in list(cnt.values()):\n    ans = (ans * comb((N + num) - 1, num)) % MOD\nprint(ans)", "score": 0.3562}
{"id": "PIE_p03837_s032580281", "golden_code": "import queue\nINF = 123456789\ndef main():\n    (n, m) = list(map(int, input().split()))\n    G = [[] for _ in range(n)]\n    for _ in range(m):\n        (a, b, c) = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        G[a].append((b, c))\n        G[b].append((a, c))\n    used = set()\n    for i in range(n):\n        d = [INF for _ in range(n)]\n        par = [-1 for _ in range(n)]\n        que = queue.PriorityQueue()\n        d[i] = 0\n        que.put((0, i))\n        while not (que.empty()):\n            p = que.get()\n            v = p[1]\n            if d[v] < p[0]:\n                continue\n            for (to, cost) in G[v]:\n                if d[to] > d[v] + cost:\n                    d[to] = d[v] + cost\n                    par[to] = v\n                    que.put((d[to], to))\n        for j in range(n):\n            if i != j:\n                (a, b) = (j, par[j])\n                if a > b:\n                    (a, b) = (b, a)\n                used.add((a, b))\n    print(m - len(used))", "generated_code": "import queue\nINF = 123456789\ndef main():\n    (n, m) = list(map(int, input().split()))\n    G = [[] for _ in range(n)]\n    for _ in range(m):\n        (a, b, c) = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        G[a].append((b, c))\n        G[b].append((a, c))\n    used = set()\n    for i in range(n):\n        d = [INF for _ in range(n)]\n        par = [-1 for _ in range(n)]\n        que = queue.PriorityQueue()\n        d[i] = 0\n        que.put((0, i))\n        while not ((not (que.empty()))):\n            p = que.get()\n            v = p[1]\n            if d[v] < p[0]:\n                continue\n            for (to, cost) in G[v]:\n                if d[to] > d[v] + cost:\n                    d[to] = d[v] + cost\n                    par[to] = v\n                    que.put((d[to], to))\n        for j in range(n):\n            if i != j:\n                (a, b) = (j, par[j])\n                if a > b:\n                    (a, b) = (b, a)\n                used.add((a, b))\n    print(m - len(used))", "score": 0.0}
{"id": "PIE_p03558_s378178699", "golden_code": "from collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\ndef I():\n    return int(sys.stdin.readline())\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\ndef S():\n    return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = SR()\n    return l\nmod = 1000000007\ndef A():\n    s = S()\n    t = S()\n    if s + t == t[::-1] + s[::-1]:\n        print('YES')else:print('NO')\ndef B():\n    n = I()\n    for i in range(int(n ** 0.5) + 2)[::-1]:\n        if i * i <= n:\n            print(i * i)\n            quit()\ndef C():\n    n = I()\n    a = LI()\n    b = LI()\n    c = LI()\n    q = [0 for i in range(n)]\n    ans = 0\n    a.sort()\n    b.sort()\n    c.sort()\n    for i in range(n):\n        j = bisect.bisect_left(a, b[i])\n        q[i] = j\n    for i in range(n - 1):\n        q[i + 1] += q[i]\n    q.insert(0, 0)\n    for i in range(n):\n        j = bisect.bisect_left(b, c[i])\n        ans += q[j]\n    print(ans)\ndef D():\n    def dijkstra():\n        d = [float('inf') for i in range(k)]\n        q = [[0, 1]]\n        d[1] = 0\n        while q:\n            (dx, x) = heappop(q)\n            for (y, dy) in v[x]:\n                if d[y] > dx + dy:\n                    d[y] = dx + dy\n                    heappush(q, [d[y], y])\n        print(d[0] + 1)\n    k = I()\n    if k == 1:\n        print(1)\n        quit()\n    v = [[] for i in range(k)]\n    for i in range(1, k):\n        v[i].append([(i + 1) % k, 1])\n        v[i].append([(i * 10) % k, 0])\n    dijkstra()\ndef E():\n    return\ndef F():\n    return\ndef G():\n    return\ndef H():\n    return", "generated_code": "from collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\ndef I():\n    return int(sys.stdin.readline())\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\ndef S():\n    return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = SR()\n    return l\nmod = 1000000007\ndef A():\n    s = S()\n    t = S()\n    if s - t == t[::-1] + s[::-1]:\n        print('YES')else:print('NO')\ndef B():\n    n = I()\n    for i in range(int(n ** 0.5) + 2)[::-1]:\n        if i * i <= n:\n            print(i * i)\n            quit()\ndef C():\n    n = I()\n    a = LI()\n    b = LI()\n    c = LI()\n    q = [0 for i in range(n)]\n    ans = 0\n    a.sort()\n    b.sort()\n    c.sort()\n    for i in range(n):\n        j = bisect.bisect_left(a, b[i])\n        q[i] = j\n    for i in range(n - 1):\n        q[i + 1] += q[i]\n    q.insert(0, 0)\n    for i in range(n):\n        j = bisect.bisect_left(b, c[i])\n        ans += q[j]\n    print(ans)\ndef D():\n    def dijkstra():\n        d = [float('inf') for i in range(k)]\n        q = [[0, 1]]\n        d[1] = 0\n        while q:\n            (dx, x) = heappop(q)\n            for (y, dy) in v[x]:\n                if d[y] > dx + dy:\n                    d[y] = dx + dy\n                    heappush(q, [d[y], y])\n        print(d[0] + 1)\n    k = I()\n    if k == 1:\n        print(1)\n        quit()\n    v = [[] for i in range(k)]\n    for i in range(1, k):\n        v[i].append([(i + 1) % k, 1])\n        v[i].append([(i * 10) % k, 0])\n    dijkstra()\ndef E():\n    return\ndef F():\n    return\ndef G():\n    return\ndef H():\n    return", "score": 0.0}
{"id": "PIE_p00144_s682125154", "golden_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "generated_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "score": 0.0}
{"id": "PIE_p02537_s645565645", "golden_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "generated_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) + i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "score": 0.4636}
{"id": "PIE_p02649_s231020544", "golden_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if (i != 50 and j != 50):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\n(N, K, T, S) = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\nans = 0\nn = len(bit)\ndata = [0] * (2 ** n)\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * ((-1) ** popcount(i))\n    for val in t:\n        data[val] = 0\nprint(ans)", "generated_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if (i != 50 or j != 50):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\n(N, K, T, S) = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\nans = 0\nn = len(bit)\ndata = [0] * (2 ** n)\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * ((-1) ** popcount(i))\n    for val in t:\n        data[val] = 0\nprint(ans)", "score": 0.0}
{"id": "PIE_extra_p03416_s789877064", "golden_code": "a,b = list(map(int, input().split()))\n\nn = 0\n\nfor i in range(a, b + 1):\n\n    f = True\n\n    s = str(i)\n\n    l = len(s)\n\n    for j in range(l//2 + 1):\n\n        if s[j] != s[- j - 1]:\n\n            f = False\n\n            break\n\n    if f:\n\n        n += 1\n\nprint(n)", "generated_code": "a,b = list(map(int, input().split()))\n\nn = 0\n\nfor i in range(1, 10):\n\n    for j in range(10):\n\n        for k in range(10):\n\n            s = 10000 * i + 1000 * j + 100 * k + 10 * j + i\n\n            if a <= s <= b:\n\n                n += 1\n\nprint(n)", "score": 0.7928}
{"id": "PIE_extra_p02612_s840955881", "golden_code": "import sys\n\n\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nN = int(read())\n\nx = N + (-N) % 1000\n\nprint((x - N))", "generated_code": "import math\n\nN = int(eval(input()))\n\nx = math.ceil(N/1000) * 1000\n\nprint((x-N))", "score": 1.0}
{"id": "PIE_p00744_s226218538", "golden_code": "import collections\nimport math\nclass Dinic:\n    class edge:\n        def __init__(self, to, cap, rev):\n            (self.to, self.cap, self.rev) = (to, cap, rev)\n    def __init__(self, V, E, source, sink):\n        self.V = V\n        self.E = [[] for _ in range(V)]\n        for fr in range(V):\n            for (to, cap) in E[fr]:\n                self.E[fr].append(self.edge(to, cap, len(self.E[to])))\n                self.E[to].append(self.edge(fr, 0, len(self.E[fr]) - 1))\n        self.maxflow = self.dinic(source, sink)\n    def dinic(self, source, sink):\n        INF = float('inf')\n        maxflow = 0\n        while True:\n            self.bfs(source)\n            if self.level[sink] < 0:\n                return maxflow\n            self.itr = [0] * self.V\n            while True:\n                flow = self.dfs(source, sink, INF)\n                if flow > 0:\n                    maxflow += flow\n                else:\n                    break\n    def dfs(self, vertex, sink, flow):\n        if vertex == sink:\n            return flow\n        for i in range(self.itr[vertex], len(self.E[vertex])):\n            self.itr[vertex] = i\n            e = self.E[vertex][i]\n            if (e.cap > 0 and self.level[vertex] < self.level[e.to]):\n                d = self.dfs(e.to, sink, min(flow, e.cap))\n                if d > 0:\n                    e.cap -= d\n                    self.E[e.to][e.rev].cap += d\n                    return d\n        return 0\n    def bfs(self, start):\n        que = collections.deque()\n        self.level = [-1] * self.V\n        que.append(start)\n        self.level[start] = 0\n        while que:\n            fr = que.popleft()\n            for e in self.E[fr]:\n                if (e.cap > 0 and self.level[e.to] < 0):\n                    self.level[e.to] = self.level[fr] + 1\n                    que.append(e.to)\nwhile True:\n    (M, N) = list(map(int, input().split()))\n    if (M == 0 and N == 0):\n        break\n    (blue, red) = ([], [])\n    while True:\n        for x in input().split():\n            blue.append(int(x))\n        if len(blue) == M:\n            break\n    while True:\n        for x in input().split():\n            red.append(int(x))\n        if len(red) == N:\n            break\n    V = (M + N) + 2\n    edge = [set() for _ in range(V)]\n    for (i, b) in enumerate(blue):\n        if b != 1:\n            for (j, r) in enumerate(red):\n                if r % b == 0:\n                    edge[i].add((M + j, 1))\n        for j in range(2, int(math.sqrt(b)) + 1):\n            if b % j == 0:\n                for (k, r) in enumerate(red):\n                    if (r % j == 0 or r % (b // j) == 0):\n                        edge[i].add((M + k, 1))\n    for i in range(M):\n        edge[M + N].add((i, 1))\n    for j in range(N):\n        edge[M + j].add(((M + N) + 1, 1))\n    d = Dinic(V, edge, M + N, (M + N) + 1)\n    print(d.maxflow)", "generated_code": "import collections\nimport math\nclass Dinic:\n    class edge:\n        def __init__(self, to, cap, rev):\n            (self.to, self.cap, self.rev) = (to, cap, rev)\n    def __init__(self, V, E, source, sink):\n        self.V = V\n        self.E = [[] for _ in range(V)]\n        for fr in range(V):\n            for (to, cap) in E[fr]:\n                self.E[fr].append(self.edge(to, cap, len(self.E[to])))\n                self.E[to].append(self.edge(fr, 0, len(self.E[fr]) - 1))\n        self.maxflow = self.dinic(source, sink)\n    def dinic(self, source, sink):\n        INF = float('inf')\n        maxflow = 0\n        while True:\n            self.bfs(source)\n            if self.level[sink] < 0:\n                return maxflow\n            self.itr = [0] * self.V\n            while True:\n                flow = self.dfs(source, sink, INF)\n                if flow > 0:\n                    maxflow += flow\n                else:\n                    break\n    def dfs(self, vertex, sink, flow):\n        if vertex == sink:\n            return flow\n        for i in range(self.itr[vertex], len(self.E[vertex])):\n            self.itr[vertex] = i\n            e = self.E[vertex][i]\n            if (e.cap > 0 and self.level[vertex] < self.level[e.to]):\n                d = self.dfs(e.to, sink, min(flow, e.cap))\n                if d > 0:\n                    e.cap -= d\n                    self.E[e.to][e.rev].cap += d\n                    return d\n        return 0\n    def bfs(self, start):\n        que = collections.deque()\n        self.level = [-1] * self.V\n        que.append(start)\n        self.level[start] = 0\n        while que:\n            fr = que.popleft()\n            for e in self.E[fr]:\n                if (e.cap > 0 and self.level[e.to] < 0):\n                    self.level[e.to] = self.level[fr] + 1\n                    que.append(e.to)\nwhile True:\n    (M, N) = list(map(int, input().split()))\n    if (M == 0 and N == 0):\n        break\n    (blue, red) = ([], [])\n    while True:\n        for x in input().split():\n            blue.append(int(x))\n        if len(blue) == M:\n            break\n    while True:\n        for x in input().split():\n            break\n        if len(red) == N:\n            break\n    V = (M + N) + 2\n    edge = [set() for _ in range(V)]\n    for (i, b) in enumerate(blue):\n        if b != 1:\n            for (j, r) in enumerate(red):\n                if r % b == 0:\n                    edge[i].add((M + j, 1))\n        for j in range(2, int(math.sqrt(b)) + 1):\n            if b % j == 0:\n                for (k, r) in enumerate(red):\n                    if (r % j == 0 or r % (b // j) == 0):\n                        edge[i].add((M + k, 1))\n    for i in range(M):\n        edge[M + N].add((i, 1))\n    for j in range(N):\n        edge[M + j].add(((M + N) + 1, 1))\n    d = Dinic(V, edge, M + N, (M + N) + 1)\n    print(d.maxflow)", "score": 0.0}
{"id": "PIE_extra_p03828_s909168869", "golden_code": "from collections import Counter\n\nN = int(eval(input()))\n\ndiv = []\n\nfor i in range(2,N+1):\n\n    while i != 1:\n\n        for d in range(2,i+1):\n\n            while i%d==0:\n\n                i = i//d\n\n                div.append(d)\n\nC = Counter(div).most_common()\n\nAns = 1\n\nfor k,v in C:\n\n    Ans = Ans*(v+1) % (10**9+7)\n\n\n\nprint(Ans)\n", "generated_code": "from collections import defaultdict\n\nN = int(eval(input()))\n\n\n\nF = [True]*(N+1)\n\nF[0]=F[1]=False\n\nP = []\n\n\n\nfor i in range(2,N+1):\n\n    if F[i]==True:\n\n        P.append(i)\n\n        for j in range(i*2,N+1,i):\n\n            F[j]=False\n\n\n\ndic = defaultdict(int)\n\nfor i in range(2,N+1):\n\n    for p in P:\n\n        while i%p==0:\n\n            dic[p] += 1\n\n            i = i//p\n\n        if i==1:\n\n            break\n\n\n\nans = 1\n\nmodulo = 10**9+7\n\nfor v in list(dic.values()):\n\n    ans *= (v+1)\n\n    ans %= modulo\n\n\n\nprint(ans)", "score": 1.0}
{"id": "PIE_p00144_s682125154", "golden_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "generated_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')break", "score": 0.0}
{"id": "PIE_extra_p03721_s705162733", "golden_code": "(N, K), *AB = [list(map(int, s.split())) for s in open(0)]\n\nfor a, b in sorted(AB):\n\n    K -= b\n\n    if K <= 0:\n\n        print(a)\n\n        break\n", "generated_code": "N, K, *AB = list(map(int, open(0).read().split()))\n\nli = [(a, b) for a, b in zip(*[iter(AB)] * 2)]\n\nli.sort()\n\nfor a, b in li:\n\n    if K > b:\n\n        K -= b\n\n    else:\n\n        print(a)\n\n        break\n", "score": 1.0}
{"id": "PIE_p02574_s911286307", "golden_code": "import math, sys\nn = int(sys.stdin.readline())\na = tuple(map(int, sys.stdin.readline().split()))\ng = math.gcd(a[0], a[1])\nfor i in range(2, n):\n    g = math.gcd(g, a[i])\nM = max(a)\nacc = a[0]\nfor i in range(n):\n    acc = math.gcd(acc, a[i])\nif acc != 1:\n    print('not coprime')\n    exit()\nLIMIT = max(a)\nminPrime = [0] * (LIMIT + 1)\nminPrime[1] = 1\ndef make():\n    for i in range(2, LIMIT + 1):\n        if minPrime[i] == 0:\n            minPrime[i] = i\n            for j in range(i + i, LIMIT + 1, i):\n                if minPrime[j] == 0:\n                    minPrime[j] = i\nmake()\ndef factrial(N):\n    ret = []\n    while minPrime[N] != N:\n        ret.append(minPrime[N])\n        N = N // minPrime[N]\n    if N != 1:\n        ret.append(N)\n    return ret\njudge = set([])\npc = True\npairwise = True\np = set()\nfor e in a:\n    if not pairwise:\n        break\n    asf = set(factrial(e))\n    if judge & asf != set():\n        pc = False\n    judge |= asf\nif pc:\n    print('pairwise coprime')\nelif g == 1:\n    print('setwise coprime')\nelse:\n    print('not coprime')", "generated_code": "import math, sys\nn = int(sys.stdin.readline())\na = tuple(map(int, sys.stdin.readline().split()))\ng = math.gcd(a[0], a[1])\nfor i in range(2, n):\n    g = math.gcd(g, a[i])\nM = max(a)\nacc = a[0]\nfor i in range(n):\n    acc = math.gcd(acc, a[i])\nif not (acc != 1):\n    print('not coprime')\n    exit()\nLIMIT = max(a)\nminPrime = [0] * (LIMIT + 1)\nminPrime[1] = 1\ndef make():\n    for i in range(2, LIMIT + 1):\n        if minPrime[i] == 0:\n            minPrime[i] = i\n            for j in range(i + i, LIMIT + 1, i):\n                if minPrime[j] == 0:\n                    minPrime[j] = i\nmake()\ndef factrial(N):\n    ret = []\n    while minPrime[N] != N:\n        ret.append(minPrime[N])\n        N = N // minPrime[N]\n    if N != 1:\n        ret.append(N)\n    return ret\njudge = set([])\npc = True\npairwise = True\np = set()\nfor e in a:\n    if not pairwise:\n        break\n    asf = set(factrial(e))\n    if judge & asf != set():\n        pc = False\n    judge |= asf\nif pc:\n    print('pairwise coprime')\nelif g == 1:\n    print('setwise coprime')\nelse:\n    print('not coprime')", "score": 0.0352}
{"id": "PIE_extra_p03796_s800016333", "golden_code": "from math import factorial\n\n\n\nmod = 10**9 + 7\n\nn = int(eval(input()))\n\n\n\nans = factorial(n) % mod\n\nprint(ans)", "generated_code": "N = int(eval(input()))\n\nMOD = 10**9 + 7\n\nans = 1\n\nfor i in range(2, N+1):\n\n    ans *= i\n\n    ans %= MOD\n\nprint(ans)\n", "score": 1.0}
{"id": "PIE_p02537_s645565645", "golden_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "generated_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            __node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "score": 0.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n        break\n    print(sep='\\n', *ans)", "score": 0.0334}
{"id": "PIE_extra_p02952_s443742997", "golden_code": "n_str = eval(input())\n\nn_int = int(n_str)\n\n# 1 ~ 50000\n\n# 桁数が奇数= 1桁, 3桁, 5桁\n\n# 1 ~ 9, 100 ~ 999,10000 ~ 99999の90909個しかないので全探索いけるか?\n\nexs_list = []\n\nfor i in range(1, 100000):\n\n    if len(str(i)) % 2 == 1:\n\n        exs_list.append(i)\n\n\n\nexs = {i: i for i in exs_list}\n\n\n\nn_s = []\n\nans = 0\n\nfor i in range(1, n_int + 1):\n\n    if len(str(i)) % 2 == 0:\n\n        continue\n\n    if i in exs:\n\n        ans += 1\n\n\n\nprint(ans)\n\n\n\n\n\n\n\n\n\n\n", "generated_code": "def digit_sum(n):\n\n    # 各桁の和を求める\n\n    # 計算量: O(logN)\n\n    ans = 0\n\n    while n > 0:\n\n        ans += 1\n\n        n //= 10\n\n    return ans\n\n\n\nn = int(eval(input()))\n\ncnt = 0\n\n\n\nfor i in range(1, n+1):\n\n    cnt += digit_sum(i) % 2\n\n\n\nprint(cnt)\n", "score": 1.0}
{"id": "PIE_p02680_s341076610", "golden_code": "import sys\n(n, m, *abcdef) = list(map(int, sys.stdin.buffer.read().split()))\nver_lines = []\nhor_lines = []\nx_list = set()\ny_list = set()\nn3 = n * 3\nfor (a, b, c) in zip(abcdef[0:n3:3], abcdef[1:n3:3], abcdef[2:n3:3]):\n    y_list.add(a)\n    y_list.add(b)\n    x_list.add(c)\n    ver_lines.append((a, b, c))\nfor (d, e, f) in zip(abcdef[n3 + 0::3], abcdef[n3 + 1::3], abcdef[n3 + 2::3]):\n    y_list.add(d)\n    x_list.add(e)\n    x_list.add(f)\n    hor_lines.append((d, e, f))\nx_list.add(0)\ny_list.add(0)\nx_list = sorted(x_list)\ny_list = sorted(y_list)\nx_dict = {x: i for (i, x) in enumerate(x_list, start=1)}\ny_dict = {y: i for (i, y) in enumerate(y_list, start=1)}\nrow_real = len(x_list)\ncol_real = len(y_list)\nrow = row_real + 2\ncol = col_real + 2\nbanned_up_ij = [[0] * row for _ in range(col)]\nbanned_down_ij = [[0] * row for _ in range(col)]\nbanned_left_ij = [[0] * col for _ in range(row)]\nbanned_right_ij = [[0] * col for _ in range(row)]\nfor (a, b, c) in ver_lines:\n    if a > b:\n        (a, b) = (b, a)\n    ai = y_dict[a]\n    bi = y_dict[b]\n    j = x_dict[c]\n    banned_left_ij[j][ai] += 1\n    banned_left_ij[j][bi] -= 1\n    banned_right_ij[j - 1][ai] += 1\n    banned_right_ij[j - 1][bi] -= 1\nfor (d, e, f) in hor_lines:\n    if e > f:\n        (e, f) = (f, e)\n    i = y_dict[d]\n    ej = x_dict[e]\n    fj = x_dict[f]\n    banned_up_ij[i][ej] += 1\n    banned_up_ij[i][fj] -= 1\n    banned_down_ij[i - 1][ej] += 1\n    banned_down_ij[i - 1][fj] -= 1\nbanned_up = [0] * (row * col)\nbanned_down = [0] * (row * col)\nbanned_left = [0] * (row * col)\nbanned_right = [0] * (row * col)\nfor i in range(col):\n    ru = banned_up_ij[i]\n    rd = banned_down_ij[i]\n    ri = row * i\n    banned_up[ri] = ru[0]\n    banned_down[ri] = rd[0]\n    for j in range(1, row):\n        banned_up[ri + j] = banned_up[(ri + j) - 1] + ru[j]\n        banned_down[ri + j] = banned_down[(ri + j) - 1] + rd[j]\nfor j in range(row):\n    rl = banned_left_ij[j]\n    rr = banned_right_ij[j]\n    banned_left[j] = rl[0]\n    banned_right[j] = rr[0]\n    for i in range(1, col):\n        ri0 = (i - 1) * row\n        ri1 = i * row\n        banned_left[ri1 + j] = banned_left[ri0 + j] + rl[i]\n        banned_right[ri1 + j] = banned_right[ri0 + j] + rr[i]\ns = (row * y_dict[0]) + x_dict[0]\nenable = (([-1] * row) + ((([-1] + ([0] * (row - 2))) + [-1]) * (col - 2))) + ([-1] * row)\nq = [s]\nmoves = [(-row, banned_up), (-1, banned_left), (1, banned_right), (row, banned_down)]\nwhile q:\n    c = q.pop()\n    if enable[c] == 1:\n        continue\n    elif enable[c] == -1:\n        print('INF')\n        exit()\n    enable[c] = 1\n    for (dc, banned) in moves:\n        if banned[c]:\n            continue\n        nc = c + dc\n        if enable[nc] == 1:\n            continue\n        q.append(nc)\nans = 0\nfor i in range(col):\n    ri = i * row\n    for j in range(row):\n        if enable[ri + j] != 1:\n            continue\n        t = y_list[i - 1]\n        b = y_list[i]\n        l = x_list[j - 1]\n        r = x_list[j]\n        ans += (b - t) * (r - l)\nprint(ans)", "generated_code": "import sys\n(n, m, *abcdef) = list(map(int, sys.stdin.buffer.read().split()))\nver_lines = []\nhor_lines = []\nx_list = set()\ny_list = set()\nn3 = n * 3\nfor (a, b, c) in zip(abcdef[0:n3:3], abcdef[1:n3:3], abcdef[2:n3:3]):\n    y_list.add(a)\n    y_list.add(b)\n    x_list.add(c)\n    ver_lines.append((a, b, c))\nfor (d, e, f) in zip(abcdef[n3 + 0::3], abcdef[n3 + 1::3], abcdef[n3 + 2::3]):\n    y_list.add(d)\n    x_list.add(e)\n    x_list.add(f)\n    hor_lines.append((d, e, f))\nx_list.add(0)\ny_list.add(0)\nx_list = sorted(x_list)\ny_list = sorted(y_list)\nx_dict = {x: i for (i, x) in enumerate(x_list, start=1)}\ny_dict = {y: i for (i, y) in enumerate(y_list, start=1)}\nrow_real = len(x_list)\ncol_real = len(y_list)\nrow = row_real + 2\ncol = col_real + 2\nbanned_up_ij = [[0] * row for _ in range(col)]\nbanned_down_ij = [[0] * row for _ in range(col)]\nbanned_left_ij = [[0] * col for _ in range(row)]\nbanned_right_ij = [[0] * col for _ in range(row)]\nfor (a, b, c) in ver_lines:\n    if a > b:\n        (a, b) = (b, a)\n    ai = y_dict[a]\n    bi = y_dict[b]\n    j = x_dict[c]\n    banned_left_ij[j][ai] += 1\n    banned_left_ij[j][bi] -= 1\n    banned_right_ij[j - 1][ai] += 1\n    banned_right_ij[j - 1][bi] -= 1\nfor (d, e, f) in hor_lines:\n    if e > f:\n        (e, f) = (f, e)\n    i = y_dict[d]\n    ej = x_dict[e]\n    fj = x_dict[f]\n    banned_up_ij[i][ej] += 1\n    banned_up_ij[i][fj] -= 1\n    banned_down_ij[i - 1][ej] += 1\n    banned_down_ij[i - 1][fj] -= 1\nbanned_up = [0] * (row * col)\nbanned_down = [0] * (row * col)\nbanned_left = [0] * (row * col)\nbanned_right = [0] * (row * col)\nfor i in range(col):\n    ru = banned_up_ij[i]\n    rd = banned_down_ij[i]\n    ri = row * i\n    banned_up[ri] = ru[0]\n    banned_down[ri] = rd[0]\n    for j in range(1, row):\n        banned_up[ri + j] = banned_up[(ri + j) - 1] + ru[j]\n        banned_down[ri + j] = banned_down[(ri + j) - 1] + rd[j]\nfor j in range(row):\n    rl = banned_left_ij[j]\n    rr = banned_right_ij[j]\n    banned_left[j] = rl[0]\n    banned_right[j] = rr[0]\n    for i in range(1, col):\n        ri0 = (i - 1) * row\n        ri1 = i * row\n        banned_left[ri1 + j] = banned_left[ri0 + j] + rl[i]\n        banned_right[ri1 + j] = banned_right[ri0 + j] + rr[i]\ns = (row * y_dict[0]) + x_dict[0]\nenable = (([-1] * row) + ((([-1] + ([0] * (row - 2))) + [-1]) * (col - 2))) + ([-1] * row)\nq = [s]\nmoves = [(-row, banned_up), (-1, banned_left), (1, banned_right), (row, banned_down)]\nwhile q:\n    c = q.pop()\n    if enable[c] == 1:\n        continue\n    elif enable[c] == -1:\n        print('INF')\n        exit()\n    enable[c] = 1\n    for (dc, banned) in moves:\n        if banned[c]:\n            continue\n        nc = c + dc\n        if enable[nc] == 1:\n            continue\n        q.append(nc)\n    break\nans = 0\nfor i in range(col):\n    ri = i * row\n    for j in range(row):\n        if enable[ri + j] != 1:\n            continue\n        t = y_list[i - 1]\n        b = y_list[i]\n        l = x_list[j - 1]\n        r = x_list[j]\n        ans += (b - t) * (r - l)\nprint(ans)", "score": 0.0}
{"id": "PIE_p03553_s305170925", "golden_code": "import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time, copy, functools\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20\neps = 1.0 / (10 ** 15)\nmod = (10 ** 9) + 7\ndef LI():\n    return [int(x) for x in sys.stdin.readline().split()]\ndef LI_():\n    return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF():\n    return [float(x) for x in sys.stdin.readline().split()]\ndef LS():\n    return sys.stdin.readline().split()\ndef I():\n    return int(sys.stdin.readline())\ndef F():\n    return float(sys.stdin.readline())\ndef S():\n    return input()\ndef pf(s):\n    return print(s, flush=True)\ndef divisions(n):\n    sq = int(math.sqrt(n) + 1)\n    d = collections.defaultdict(int)\n    while n % 2 == 0:\n        n //= 2\n        d[2] += 1\n    i = 3\n    while (n > 1 and sq >= i):\n        if n % i == 0:\n            n //= i\n            d[i] += 1else:i += 2\n    if n > 1:\n        d[n] += 1\n    r = [1]\n    for (k, v) in d.items():\n        for c in r[:]:\n            for i in range(1, v + 1):\n                r.append(c * (k ** i))\n    return sorted(r)\ndef main():\n    n = I()\n    a = LI()\n    s = set()\n    for i in range(n, 0, -1):\n        d = divisions(i)\n        ld = len(d)\n        for j in range(1, 2 ** ld):\n            c = []\n            ff = True\n            for k in range(ld):\n                if j & (1 << k):\n                    f = True\n                    for e in c:\n                        if d[k] % e == 0:\n                            f = False\n                            ff = False\n                            break\n                    if f:\n                        c.append(d[k])\n                if not ff:\n                    break\n            if ff:\n                s.add(tuple(c + [n + 1]))\n    b = sorted(list(s), reverse=True)\n    for c in b:\n        t = 0\n        for j in range(1, n + 1):\n            f = False\n            for e in c:\n                if j % e == 0:\n                    f = True\n                    break\n            if f:\n                t += a[j - 1]\n        if t < 0:\n            for j in range(1, n + 1):\n                f = False\n                for e in c:\n                    if j % e == 0:\n                        f = True\n                        break\n                if f:\n                    a[j - 1] = 0\n    return sum(a)\nprint(main())", "generated_code": "import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time, copy, functools\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20\neps = 1.0 / (10 ** 15)\nmod = (10 * 9) + 7\ndef LI():\n    return [int(x) for x in sys.stdin.readline().split()]\ndef LI_():\n    return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF():\n    return [float(x) for x in sys.stdin.readline().split()]\ndef LS():\n    return sys.stdin.readline().split()\ndef I():\n    return int(sys.stdin.readline())\ndef F():\n    return float(sys.stdin.readline())\ndef S():\n    return input()\ndef pf(s):\n    return print(s, flush=True)\ndef divisions(n):\n    sq = int(math.sqrt(n) + 1)\n    d = collections.defaultdict(int)\n    while n % 2 == 0:\n        n //= 2\n        d[2] += 1\n    i = 3\n    while (n > 1 and sq >= i):\n        if n % i == 0:\n            n //= i\n            d[i] += 1else:i += 2\n    if n > 1:\n        d[n] += 1\n    r = [1]\n    for (k, v) in d.items():\n        for c in r[:]:\n            for i in range(1, v + 1):\n                r.append(c * (k ** i))\n    return sorted(r)\ndef main():\n    n = I()\n    a = LI()\n    s = set()\n    for i in range(n, 0, -1):\n        d = divisions(i)\n        ld = len(d)\n        for j in range(1, 2 ** ld):\n            c = []\n            ff = True\n            for k in range(ld):\n                if j & (1 << k):\n                    f = True\n                    for e in c:\n                        if d[k] % e == 0:\n                            f = False\n                            ff = False\n                            break\n                    if f:\n                        c.append(d[k])\n                if not ff:\n                    break\n            if ff:\n                s.add(tuple(c + [n + 1]))\n    b = sorted(list(s), reverse=True)\n    for c in b:\n        t = 0\n        for j in range(1, n + 1):\n            f = False\n            for e in c:\n                if j % e == 0:\n                    f = True\n                    break\n            if f:\n                t += a[j - 1]\n        if t < 0:\n            for j in range(1, n + 1):\n                f = False\n                for e in c:\n                    if j % e == 0:\n                        f = True\n                        break\n                if f:\n                    a[j - 1] = 0\n    return sum(a)\nprint(main())", "score": 0.0}
{"id": "PIE_extra_p02264_s571730090", "golden_code": "n,q = list(map(int,input().split()))\n\nqueue = []\n\nfor i in range(n):\n\n\tname,time = input().split()\n\n\tqueue.append([name, int(time)])\n\n\n\nt = 0\n\ni = 0\n\nwhile queue:\n\n\ti %= len(queue)\n\n\tp = queue[i]\n\n\tt += min(q, p[1])\n\n\tif p[1] > q:\n\n\t\tp[1] -= q\n\n\t\ti += 1\n\n\telse:\n\n\t\tprint((p[0], t))\n\n\t\tqueue.pop(i)\n", "generated_code": "from collections import deque\n\n\n\nn,q = list(map(int,input().split()))\n\nqueue = deque()\n\nfor i in range(n):\n\n\tname,time = input().split()\n\n\tqueue.append((name, int(time)))\n\n\n\nt = 0\n\nwhile queue:\n\n\tname,time = queue.popleft()\n\n\tt += min(q, time)\n\n\tif time > q:\n\n\t\tqueue.append((name, time-q))\n\n\telse:\n\n\t\tprint((name,t))\n", "score": 1.0}
{"id": "PIE_p00144_s682125154", "golden_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "generated_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] - self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "score": 0.0}
{"id": "PIE_p03837_s032580281", "golden_code": "import queue\nINF = 123456789\ndef main():\n    (n, m) = list(map(int, input().split()))\n    G = [[] for _ in range(n)]\n    for _ in range(m):\n        (a, b, c) = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        G[a].append((b, c))\n        G[b].append((a, c))\n    used = set()\n    for i in range(n):\n        d = [INF for _ in range(n)]\n        par = [-1 for _ in range(n)]\n        que = queue.PriorityQueue()\n        d[i] = 0\n        que.put((0, i))\n        while not (que.empty()):\n            p = que.get()\n            v = p[1]\n            if d[v] < p[0]:\n                continue\n            for (to, cost) in G[v]:\n                if d[to] > d[v] + cost:\n                    d[to] = d[v] + cost\n                    par[to] = v\n                    que.put((d[to], to))\n        for j in range(n):\n            if i != j:\n                (a, b) = (j, par[j])\n                if a > b:\n                    (a, b) = (b, a)\n                used.add((a, b))\n    print(m - len(used))", "generated_code": "import queue\nINF = 123456789\ndef main():\n    (n, m) = list(map(int, input().split()))\n    G = [[] for _ in range(n)]\n    for _ in range(m):\n        (a, b, c) = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        G[a].append((b, c))\n        G[b].append((a, c))\n    used = set()\n    for i in range(n):\n        d = [INF for _ in range(n)]\n        par = [+1 for _ in range(n)]\n        que = queue.PriorityQueue()\n        d[i] = 0\n        que.put((0, i))\n        while not (que.empty()):\n            p = que.get()\n            v = p[1]\n            if d[v] < p[0]:\n                continue\n            for (to, cost) in G[v]:\n                if d[to] > d[v] + cost:\n                    d[to] = d[v] + cost\n                    par[to] = v\n                    que.put((d[to], to))\n        for j in range(n):\n            if i != j:\n                (a, b) = (j, par[j])\n                if a > b:\n                    (a, b) = (b, a)\n                used.add((a, b))\n    print(m - len(used))", "score": 0.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            pass\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0402}
{"id": "PIE_p02680_s341076610", "golden_code": "import sys\n(n, m, *abcdef) = list(map(int, sys.stdin.buffer.read().split()))\nver_lines = []\nhor_lines = []\nx_list = set()\ny_list = set()\nn3 = n * 3\nfor (a, b, c) in zip(abcdef[0:n3:3], abcdef[1:n3:3], abcdef[2:n3:3]):\n    y_list.add(a)\n    y_list.add(b)\n    x_list.add(c)\n    ver_lines.append((a, b, c))\nfor (d, e, f) in zip(abcdef[n3 + 0::3], abcdef[n3 + 1::3], abcdef[n3 + 2::3]):\n    y_list.add(d)\n    x_list.add(e)\n    x_list.add(f)\n    hor_lines.append((d, e, f))\nx_list.add(0)\ny_list.add(0)\nx_list = sorted(x_list)\ny_list = sorted(y_list)\nx_dict = {x: i for (i, x) in enumerate(x_list, start=1)}\ny_dict = {y: i for (i, y) in enumerate(y_list, start=1)}\nrow_real = len(x_list)\ncol_real = len(y_list)\nrow = row_real + 2\ncol = col_real + 2\nbanned_up_ij = [[0] * row for _ in range(col)]\nbanned_down_ij = [[0] * row for _ in range(col)]\nbanned_left_ij = [[0] * col for _ in range(row)]\nbanned_right_ij = [[0] * col for _ in range(row)]\nfor (a, b, c) in ver_lines:\n    if a > b:\n        (a, b) = (b, a)\n    ai = y_dict[a]\n    bi = y_dict[b]\n    j = x_dict[c]\n    banned_left_ij[j][ai] += 1\n    banned_left_ij[j][bi] -= 1\n    banned_right_ij[j - 1][ai] += 1\n    banned_right_ij[j - 1][bi] -= 1\nfor (d, e, f) in hor_lines:\n    if e > f:\n        (e, f) = (f, e)\n    i = y_dict[d]\n    ej = x_dict[e]\n    fj = x_dict[f]\n    banned_up_ij[i][ej] += 1\n    banned_up_ij[i][fj] -= 1\n    banned_down_ij[i - 1][ej] += 1\n    banned_down_ij[i - 1][fj] -= 1\nbanned_up = [0] * (row * col)\nbanned_down = [0] * (row * col)\nbanned_left = [0] * (row * col)\nbanned_right = [0] * (row * col)\nfor i in range(col):\n    ru = banned_up_ij[i]\n    rd = banned_down_ij[i]\n    ri = row * i\n    banned_up[ri] = ru[0]\n    banned_down[ri] = rd[0]\n    for j in range(1, row):\n        banned_up[ri + j] = banned_up[(ri + j) - 1] + ru[j]\n        banned_down[ri + j] = banned_down[(ri + j) - 1] + rd[j]\nfor j in range(row):\n    rl = banned_left_ij[j]\n    rr = banned_right_ij[j]\n    banned_left[j] = rl[0]\n    banned_right[j] = rr[0]\n    for i in range(1, col):\n        ri0 = (i - 1) * row\n        ri1 = i * row\n        banned_left[ri1 + j] = banned_left[ri0 + j] + rl[i]\n        banned_right[ri1 + j] = banned_right[ri0 + j] + rr[i]\ns = (row * y_dict[0]) + x_dict[0]\nenable = (([-1] * row) + ((([-1] + ([0] * (row - 2))) + [-1]) * (col - 2))) + ([-1] * row)\nq = [s]\nmoves = [(-row, banned_up), (-1, banned_left), (1, banned_right), (row, banned_down)]\nwhile q:\n    c = q.pop()\n    if enable[c] == 1:\n        continue\n    elif enable[c] == -1:\n        print('INF')\n        exit()\n    enable[c] = 1\n    for (dc, banned) in moves:\n        if banned[c]:\n            continue\n        nc = c + dc\n        if enable[nc] == 1:\n            continue\n        q.append(nc)\nans = 0\nfor i in range(col):\n    ri = i * row\n    for j in range(row):\n        if enable[ri + j] != 1:\n            continue\n        t = y_list[i - 1]\n        b = y_list[i]\n        l = x_list[j - 1]\n        r = x_list[j]\n        ans += (b - t) * (r - l)\nprint(ans)", "generated_code": "import sys\n(n, m, *abcdef) = list(map(int, sys.stdin.buffer.read().split()))\nver_lines = []\nhor_lines = []\nx_list = set()\ny_list = set()\nn3 = n * 3\nfor (a, b, c) in zip(abcdef[0:n3:3], abcdef[1:n3:3], abcdef[2:n3:3]):\n    y_list.add(a)\n    y_list.add(b)\n    x_list.add(c)\n    ver_lines.append((a, b, c))\nfor (d, e, f) in zip(abcdef[n3 + 0::3], abcdef[n3 + 1::3], abcdef[n3 + 2::3]):\n    y_list.add(d)\n    x_list.add(e)\n    x_list.add(f)\n    hor_lines.append((d, e, f))\nx_list.add(0)\ny_list.add(0)\nx_list = sorted(x_list)\ny_list = sorted(y_list)\nx_dict = {x: i for (i, x) in enumerate(x_list, start=1)}\ny_dict = {y: i for (i, y) in enumerate(y_list, start=1)}\nrow_real = len(x_list)\ncol_real = len(y_list)\nrow = row_real - 2\ncol = col_real + 2\nbanned_up_ij = [[0] * row for _ in range(col)]\nbanned_down_ij = [[0] * row for _ in range(col)]\nbanned_left_ij = [[0] * col for _ in range(row)]\nbanned_right_ij = [[0] * col for _ in range(row)]\nfor (a, b, c) in ver_lines:\n    if a > b:\n        (a, b) = (b, a)\n    ai = y_dict[a]\n    bi = y_dict[b]\n    j = x_dict[c]\n    banned_left_ij[j][ai] += 1\n    banned_left_ij[j][bi] -= 1\n    banned_right_ij[j - 1][ai] += 1\n    banned_right_ij[j - 1][bi] -= 1\nfor (d, e, f) in hor_lines:\n    if e > f:\n        (e, f) = (f, e)\n    i = y_dict[d]\n    ej = x_dict[e]\n    fj = x_dict[f]\n    banned_up_ij[i][ej] += 1\n    banned_up_ij[i][fj] -= 1\n    banned_down_ij[i - 1][ej] += 1\n    banned_down_ij[i - 1][fj] -= 1\nbanned_up = [0] * (row * col)\nbanned_down = [0] * (row * col)\nbanned_left = [0] * (row * col)\nbanned_right = [0] * (row * col)\nfor i in range(col):\n    ru = banned_up_ij[i]\n    rd = banned_down_ij[i]\n    ri = row * i\n    banned_up[ri] = ru[0]\n    banned_down[ri] = rd[0]\n    for j in range(1, row):\n        banned_up[ri + j] = banned_up[(ri + j) - 1] + ru[j]\n        banned_down[ri + j] = banned_down[(ri + j) - 1] + rd[j]\nfor j in range(row):\n    rl = banned_left_ij[j]\n    rr = banned_right_ij[j]\n    banned_left[j] = rl[0]\n    banned_right[j] = rr[0]\n    for i in range(1, col):\n        ri0 = (i - 1) * row\n        ri1 = i * row\n        banned_left[ri1 + j] = banned_left[ri0 + j] + rl[i]\n        banned_right[ri1 + j] = banned_right[ri0 + j] + rr[i]\ns = (row * y_dict[0]) + x_dict[0]\nenable = (([-1] * row) + ((([-1] + ([0] * (row - 2))) + [-1]) * (col - 2))) + ([-1] * row)\nq = [s]\nmoves = [(-row, banned_up), (-1, banned_left), (1, banned_right), (row, banned_down)]\nwhile q:\n    c = q.pop()\n    if enable[c] == 1:\n        continue\n    elif enable[c] == -1:\n        print('INF')\n        exit()\n    enable[c] = 1\n    for (dc, banned) in moves:\n        if banned[c]:\n            continue\n        nc = c + dc\n        if enable[nc] == 1:\n            continue\n        q.append(nc)\nans = 0\nfor i in range(col):\n    ri = i * row\n    for j in range(row):\n        if enable[ri + j] != 1:\n            continue\n        t = y_list[i - 1]\n        b = y_list[i]\n        l = x_list[j - 1]\n        r = x_list[j]\n        ans += (b - t) * (r - l)\nprint(ans)", "score": 0.0}
{"id": "PIE_p03553_s305170925", "golden_code": "import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time, copy, functools\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20\neps = 1.0 / (10 ** 15)\nmod = (10 ** 9) + 7\ndef LI():\n    return [int(x) for x in sys.stdin.readline().split()]\ndef LI_():\n    return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF():\n    return [float(x) for x in sys.stdin.readline().split()]\ndef LS():\n    return sys.stdin.readline().split()\ndef I():\n    return int(sys.stdin.readline())\ndef F():\n    return float(sys.stdin.readline())\ndef S():\n    return input()\ndef pf(s):\n    return print(s, flush=True)\ndef divisions(n):\n    sq = int(math.sqrt(n) + 1)\n    d = collections.defaultdict(int)\n    while n % 2 == 0:\n        n //= 2\n        d[2] += 1\n    i = 3\n    while (n > 1 and sq >= i):\n        if n % i == 0:\n            n //= i\n            d[i] += 1else:i += 2\n    if n > 1:\n        d[n] += 1\n    r = [1]\n    for (k, v) in d.items():\n        for c in r[:]:\n            for i in range(1, v + 1):\n                r.append(c * (k ** i))\n    return sorted(r)\ndef main():\n    n = I()\n    a = LI()\n    s = set()\n    for i in range(n, 0, -1):\n        d = divisions(i)\n        ld = len(d)\n        for j in range(1, 2 ** ld):\n            c = []\n            ff = True\n            for k in range(ld):\n                if j & (1 << k):\n                    f = True\n                    for e in c:\n                        if d[k] % e == 0:\n                            f = False\n                            ff = False\n                            break\n                    if f:\n                        c.append(d[k])\n                if not ff:\n                    break\n            if ff:\n                s.add(tuple(c + [n + 1]))\n    b = sorted(list(s), reverse=True)\n    for c in b:\n        t = 0\n        for j in range(1, n + 1):\n            f = False\n            for e in c:\n                if j % e == 0:\n                    f = True\n                    break\n            if f:\n                t += a[j - 1]\n        if t < 0:\n            for j in range(1, n + 1):\n                f = False\n                for e in c:\n                    if j % e == 0:\n                        f = True\n                        break\n                if f:\n                    a[j - 1] = 0\n    return sum(a)\nprint(main())", "generated_code": "import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time, copy, functools\nsys.setrecursionlimit(10 ** 7)\ninf = 10 ** 20\neps = 1.0 / (10 ** 15)\nmod = (10 ** 9) + 7\ndef LI():\n    return [int(x) for x in sys.stdin.readline().split()]\ndef LI_():\n    return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef LF():\n    return [float(x) for x in sys.stdin.readline().split()]\ndef LS():\n    return sys.stdin.readline().split()\ndef I():\n    return int(sys.stdin.readline())\ndef F():\n    return float(sys.stdin.readline())\ndef S():\n    return input()\ndef pf(s):\n    return print(s, flush=True)\ndef divisions(n):\n    sq = int(math.sqrt(n) - 1)\n    d = collections.defaultdict(int)\n    while n % 2 == 0:\n        n //= 2\n        d[2] += 1\n    i = 3\n    while (n > 1 and sq >= i):\n        if n % i == 0:\n            n //= i\n            d[i] += 1else:i += 2\n    if n > 1:\n        d[n] += 1\n    r = [1]\n    for (k, v) in d.items():\n        for c in r[:]:\n            for i in range(1, v + 1):\n                r.append(c * (k ** i))\n    return sorted(r)\ndef main():\n    n = I()\n    a = LI()\n    s = set()\n    for i in range(n, 0, -1):\n        d = divisions(i)\n        ld = len(d)\n        for j in range(1, 2 ** ld):\n            c = []\n            ff = True\n            for k in range(ld):\n                if j & (1 << k):\n                    f = True\n                    for e in c:\n                        if d[k] % e == 0:\n                            f = False\n                            ff = False\n                            break\n                    if f:\n                        c.append(d[k])\n                if not ff:\n                    break\n            if ff:\n                s.add(tuple(c + [n + 1]))\n    b = sorted(list(s), reverse=True)\n    for c in b:\n        t = 0\n        for j in range(1, n + 1):\n            f = False\n            for e in c:\n                if j % e == 0:\n                    f = True\n                    break\n            if f:\n                t += a[j - 1]\n        if t < 0:\n            for j in range(1, n + 1):\n                f = False\n                for e in c:\n                    if j % e == 0:\n                        f = True\n                        break\n                if f:\n                    a[j - 1] = 0\n    return sum(a)\nprint(main())", "score": 0.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n - 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0368}
{"id": "PIE_p03253_s968664754", "golden_code": "from math import floor, sqrt\nfrom collections import defaultdict\ndef factors(n):\n    d = defaultdict(int)\n    for i in range(2, floor(sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            d[i] += 1\n        if n == 1:\n            break\n    if n != 1:\n        d[n] += 1\n    return d\ndef inv(x, mod):\n    k = mod - 2\n    ret = 1\n    while k > 0:\n        if k & 1:\n            ret = (ret * x) % mod\n        x = (x * x) % mod\n        k >>= 1\n    return ret\n(N, M) = list(map(int, input().split()))\nmod = (10 ** 9) + 7\ndic = factors(M)\nK = len(dic)\nSIZE = N + max(dic.values()) if list(dic.values()) else N\nfact = [None] * (SIZE + 1)\nfinv = [None] * (SIZE + 1)\nfact[0] = 1\nfor i in range(1, SIZE + 1):\n    fact[i] = (fact[i - 1] * i) % mod\nfinv[SIZE] = inv(fact[SIZE], mod=mod)\nfor i in range(SIZE, 0, -1):\n    finv[i - 1] = (finv[i] * i) % mod\ndef comb(n, k):\n    tmp = (finv[k] * finv[n - k]) % mod\n    return (fact[n] * tmp) % mod\nans = 1\nfor p in dic:\n    ans = (ans * comb((dic[p] + N) - 1, dic[p])) % mod\nprint(ans)", "generated_code": "from math import floor, sqrt\nfrom collections import defaultdict\ndef factors(n):\n    d = defaultdict(int)\n    for i in range(2, floor(sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            d[i] += 1\n        if n == 1:\n            break\n    if n != 1:\n        d[n] += 1\n    return d\ndef inv(x, mod):\n    k = mod - 2\n    ret = 1\n    while k > 0:\n        if k & 1:\n            ret = (ret ** x) % mod\n        x = (x * x) % mod\n        k >>= 1\n    return ret\n(N, M) = list(map(int, input().split()))\nmod = (10 ** 9) + 7\ndic = factors(M)\nK = len(dic)\nSIZE = N + max(dic.values()) if list(dic.values()) else N\nfact = [None] * (SIZE + 1)\nfinv = [None] * (SIZE + 1)\nfact[0] = 1\nfor i in range(1, SIZE + 1):\n    fact[i] = (fact[i - 1] * i) % mod\nfinv[SIZE] = inv(fact[SIZE], mod=mod)\nfor i in range(SIZE, 0, -1):\n    finv[i - 1] = (finv[i] * i) % mod\ndef comb(n, k):\n    tmp = (finv[k] * finv[n - k]) % mod\n    return (fact[n] * tmp) % mod\nans = 1\nfor p in dic:\n    ans = (ans * comb((dic[p] + N) - 1, dic[p])) % mod\nprint(ans)", "score": 0.3868}
{"id": "PIE_p00144_s682125154", "golden_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "generated_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "score": 0.0}
{"id": "PIE_p03371_s026349855", "golden_code": "from collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\ndef I():\n    return int(sys.stdin.readline())\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\ndef S():\n    return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LS()\n    return l\nsys.setrecursionlimit(1000000)\nmod = 1000000007\ndef A():\n    return\ndef B():\n    return\ndef C():\n    return\ndef D():\n    return\ndef E():\n    return\ndef F():\n    (a, b, c, X, Y) = LI()\n    ans = float('inf')\n    for z in range(300001):\n        if z % 2 == 0:\n            m = c * z\n            x = z // 2\n            y = z // 2\n            m += a * max(0, X - x)\n            m += b * max(0, Y - y)\n            if m < ans:\n                ans = m\n    print(ans)\n    return\ndef G():\n    n = I()\n    x = LI()\n    f = [(i, x[i]) for i in range(n)]\n    f.sort(key=lambda x: (x[1]))\n    g = [(f[i][0], i) for i in range(n)]\n    g.sort(key=lambda x: (x[0]))\n    for i in range(n):\n        if g[i][1] < n // 2:\n            print(f[n // 2][1])else:print(f[(n // 2) - 1][1])\n    return\ndef H():\n    return\ndef I_():\n    return\ndef J():\n    return", "generated_code": "from collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\ndef I():\n    return int(sys.stdin.readline())\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\ndef S():\n    return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LS()\n    return l\nsys.setrecursionlimit(1000000)\nmod = 1000000007\ndef A():\n    return\ndef B():\n    return\ndef C():\n    return\ndef D():\n    return\ndef E():\n    return\ndef F():\n    (a, b, c, X, Y) = LI()\n    ans = float('inf')\n    for z in range(300001):\n        if z * 2 == 0:\n            m = c * z\n            x = z // 2\n            y = z // 2\n            m += a * max(0, X - x)\n            m += b * max(0, Y - y)\n            if m < ans:\n                ans = m\n    print(ans)\n    return\ndef G():\n    n = I()\n    x = LI()\n    f = [(i, x[i]) for i in range(n)]\n    f.sort(key=lambda x: (x[1]))\n    g = [(f[i][0], i) for i in range(n)]\n    g.sort(key=lambda x: (x[0]))\n    for i in range(n):\n        if g[i][1] < n // 2:\n            print(f[n // 2][1])else:print(f[(n // 2) - 1][1])\n    return\ndef H():\n    return\ndef I_():\n    return\ndef J():\n    return", "score": 0.0}
{"id": "PIE_extra_p02691_s116716284", "golden_code": "n = int(eval(input()))\n\na = list(map(int, input().split()))\n\na_index = []\n\nfor i in range(n):\n\n    a_index.append((i, a[i]))\n\ndic1 = {}\n\ndic2 = {}\n\nfor i in range(n):\n\n    one = a_index[i][0] + a_index[i][1]\n\n    two = a_index[i][0] - a_index[i][1]\n\n    if one not in dic1:\n\n        dic1[one] = 1\n\n    else:\n\n        dic1[one] += 1\n\n    if two not in dic2:\n\n        dic2[two] = 1\n\n    else:\n\n        dic2[two] += 1\n\nans = 0\n\nfor i in list(dic1.keys()):\n\n    if i in dic2:\n\n        ans += dic2[i] * dic1[i]\n\nfor i in list(dic2.keys()):\n\n    if i in dic1:\n\n        ans += dic1[i] * dic2[i]\n\n        #print(i)\n\nprint((ans // 2))\n", "generated_code": "n = int(eval(input()))\n\na = list(map(int, input().split()))\n\nimport collections\n\nans = 0\n\ndic = collections.defaultdict(int)\n\nfor i in range(1, n + 1):\n\n    ans += dic[i - a[i - 1]]\n\n    dic[i + a[i - 1]] += 1\n\nprint(ans)", "score": 0.9962}
{"id": "PIE_extra_p03796_s155084707", "golden_code": "import math\n\nn = int(eval(input()))\n\nprint((math.factorial(n)%(10**9+7)))", "generated_code": "n = int(eval(input()))\n\nans = 1\n\nmod = 10**9+7\n\nfor i in range(1, n+1):\n\n    ans *= i\n\n    ans %= mod\n\n\n\nans %= mod\n\nprint(ans)\n", "score": 1.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        pass\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0456}
{"id": "PIE_p02574_s911286307", "golden_code": "import math, sys\nn = int(sys.stdin.readline())\na = tuple(map(int, sys.stdin.readline().split()))\ng = math.gcd(a[0], a[1])\nfor i in range(2, n):\n    g = math.gcd(g, a[i])\nM = max(a)\nacc = a[0]\nfor i in range(n):\n    acc = math.gcd(acc, a[i])\nif acc != 1:\n    print('not coprime')\n    exit()\nLIMIT = max(a)\nminPrime = [0] * (LIMIT + 1)\nminPrime[1] = 1\ndef make():\n    for i in range(2, LIMIT + 1):\n        if minPrime[i] == 0:\n            minPrime[i] = i\n            for j in range(i + i, LIMIT + 1, i):\n                if minPrime[j] == 0:\n                    minPrime[j] = i\nmake()\ndef factrial(N):\n    ret = []\n    while minPrime[N] != N:\n        ret.append(minPrime[N])\n        N = N // minPrime[N]\n    if N != 1:\n        ret.append(N)\n    return ret\njudge = set([])\npc = True\npairwise = True\np = set()\nfor e in a:\n    if not pairwise:\n        break\n    asf = set(factrial(e))\n    if judge & asf != set():\n        pc = False\n    judge |= asf\nif pc:\n    print('pairwise coprime')\nelif g == 1:\n    print('setwise coprime')\nelse:\n    print('not coprime')", "generated_code": "import math, sys\nn = int(sys.stdin.readline())\na = tuple(map(int, sys.stdin.readline().split()))\npass\nfor i in range(2, n):\n    g = math.gcd(g, a[i])\nM = max(a)\nacc = a[0]\nfor i in range(n):\n    acc = math.gcd(acc, a[i])\nif acc != 1:\n    print('not coprime')\n    exit()\nLIMIT = max(a)\nminPrime = [0] * (LIMIT + 1)\nminPrime[1] = 1\ndef make():\n    for i in range(2, LIMIT + 1):\n        if minPrime[i] == 0:\n            minPrime[i] = i\n            for j in range(i + i, LIMIT + 1, i):\n                if minPrime[j] == 0:\n                    minPrime[j] = i\nmake()\ndef factrial(N):\n    ret = []\n    while minPrime[N] != N:\n        ret.append(minPrime[N])\n        N = N // minPrime[N]\n    if N != 1:\n        ret.append(N)\n    return ret\njudge = set([])\npc = True\npairwise = True\np = set()\nfor e in a:\n    if not pairwise:\n        break\n    asf = set(factrial(e))\n    if judge & asf != set():\n        pc = False\n    judge |= asf\nif pc:\n    print('pairwise coprime')\nelif g == 1:\n    print('setwise coprime')\nelse:\n    print('not coprime')", "score": 0.1306}
{"id": "PIE_p03837_s032580281", "golden_code": "import queue\nINF = 123456789\ndef main():\n    (n, m) = list(map(int, input().split()))\n    G = [[] for _ in range(n)]\n    for _ in range(m):\n        (a, b, c) = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        G[a].append((b, c))\n        G[b].append((a, c))\n    used = set()\n    for i in range(n):\n        d = [INF for _ in range(n)]\n        par = [-1 for _ in range(n)]\n        que = queue.PriorityQueue()\n        d[i] = 0\n        que.put((0, i))\n        while not (que.empty()):\n            p = que.get()\n            v = p[1]\n            if d[v] < p[0]:\n                continue\n            for (to, cost) in G[v]:\n                if d[to] > d[v] + cost:\n                    d[to] = d[v] + cost\n                    par[to] = v\n                    que.put((d[to], to))\n        for j in range(n):\n            if i != j:\n                (a, b) = (j, par[j])\n                if a > b:\n                    (a, b) = (b, a)\n                used.add((a, b))\n    print(m - len(used))", "generated_code": "import queue\nINF = 123456789\ndef main():\n    (n, m) = list(map(int, input().split()))\n    G = [[] for _ in range(n)]\n    for _ in range(m):\n        (a, b, c) = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        G[a].append((b, c))\n        G[b].append((a, c))\n    used = set()\n    for i in range(n):\n        d = [INF for _ in range(n)]\n        par = [-1 for _ in range(n)]\n        que = queue.PriorityQueue()\n        d[i] = 0\n        que.put((0, i))\n        while not (que.empty()):\n            p = que.get()\n            v = p[1]\n            if d[v] < p[0]:\n                continue\n            for (to, cost) in G[v]:\n                if d[to] > d[v] - cost:\n                    d[to] = d[v] + cost\n                    par[to] = v\n                    que.put((d[to], to))\n        for j in range(n):\n            if i != j:\n                (a, b) = (j, par[j])\n                if a > b:\n                    (a, b) = (b, a)\n                used.add((a, b))\n    print(m - len(used))", "score": 0.0}
{"id": "PIE_p02555_s973678433", "golden_code": "def cmb(n, r):\n    import math\n    if n < r:\n        return 0\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\ndef solve(S):\n    mod = (10 ** 9) + 7\n    ans = 0\n    for i in range(1, (S // 3) + 1):\n        tama = i + (S - (i * 3))\n        tama -= 2\n        bo = i - 1\n        ans += cmb(tama + 1, bo)\n        ans %= mod\n    print(ans)", "generated_code": "def cmb(n, r):\n    import math\n    if n < r:\n        return 0\n    return math.factorial(n) // (math.factorial(n - r) // math.factorial(r))\ndef solve(S):\n    mod = (10 ** 9) + 7\n    ans = 0\n    for i in range(1, (S // 3) + 1):\n        tama = i + (S - (i * 3))\n        tama -= 2\n        bo = i - 1\n        ans += cmb(tama + 1, bo)\n        ans %= mod\n    print(ans)", "score": 0.0}
{"id": "PIE_p03253_s948054289", "golden_code": "from math import floor, sqrt\nfrom collections import Counter\nMOD = (10 ** 9) + 7\ndef getPrimeFactor(x):\n    ans = []\n    for d in range(2, floor(sqrt(x)) + 1):\n        while x % d == 0:\n            ans.append(d)\n            x //= d\n    if x != 1:\n        ans.append(x)\n    return ans\ndef power(x, n):\n    ans = 1\n    while n:\n        if n % 2 == 1:\n            ans = (ans * x) % MOD\n        x = (x * x) % MOD\n        n //= 2\n    return ans\n(N, M) = list(map(int, input().split()))\nPFs = getPrimeFactor(M)\ncnt = Counter(PFs)\nN2 = N\nif len(cnt):\n    N2 += max(cnt.values())\nfacts = [1] + ([0] * N2)\nfor x in range(1, N2 + 1):\n    facts[x] = (facts[x - 1] * x) % MOD\ninvFs = ([0] * N2) + [power(facts[N2], MOD - 2)]\nfor x in reversed(list(range(N2))):\n    invFs[x] = (invFs[x + 1] * (x + 1)) % MOD\ndef comb(n, k):\n    return (((facts[n] * invFs[k]) % MOD) * invFs[n - k]) % MOD\nans = 1\nfor num in list(cnt.values()):\n    ans = (ans * comb((N + num) - 1, num)) % MOD\nprint(ans)", "generated_code": "from math import floor, sqrt\nfrom collections import Counter\nMOD = (10 ** 9) + 7\ndef getPrimeFactor(x):\n    ans = []\n    for d in range(2, floor(sqrt(x)) + 1):\n        while x % d == 0:\n            ans.append(d)\n            x //= d\n    if x != 1:\n        ans.append(x)\n    return ans\ndef power(x, n):\n    ans = 1\n    while n:\n        if n % 2 == 1:\n            ans = (ans ** x) % MOD\n        x = (x * x) % MOD\n        n //= 2\n    return ans\n(N, M) = list(map(int, input().split()))\nPFs = getPrimeFactor(M)\ncnt = Counter(PFs)\nN2 = N\nif len(cnt):\n    N2 += max(cnt.values())\nfacts = [1] + ([0] * N2)\nfor x in range(1, N2 + 1):\n    facts[x] = (facts[x - 1] * x) % MOD\ninvFs = ([0] * N2) + [power(facts[N2], MOD - 2)]\nfor x in reversed(list(range(N2))):\n    invFs[x] = (invFs[x + 1] * (x + 1)) % MOD\ndef comb(n, k):\n    return (((facts[n] * invFs[k]) % MOD) * invFs[n - k]) % MOD\nans = 1\nfor num in list(cnt.values()):\n    ans = (ans * comb((N + num) - 1, num)) % MOD\nprint(ans)", "score": 0.3756}
{"id": "PIE_p03253_s948054289", "golden_code": "from math import floor, sqrt\nfrom collections import Counter\nMOD = (10 ** 9) + 7\ndef getPrimeFactor(x):\n    ans = []\n    for d in range(2, floor(sqrt(x)) + 1):\n        while x % d == 0:\n            ans.append(d)\n            x //= d\n    if x != 1:\n        ans.append(x)\n    return ans\ndef power(x, n):\n    ans = 1\n    while n:\n        if n % 2 == 1:\n            ans = (ans * x) % MOD\n        x = (x * x) % MOD\n        n //= 2\n    return ans\n(N, M) = list(map(int, input().split()))\nPFs = getPrimeFactor(M)\ncnt = Counter(PFs)\nN2 = N\nif len(cnt):\n    N2 += max(cnt.values())\nfacts = [1] + ([0] * N2)\nfor x in range(1, N2 + 1):\n    facts[x] = (facts[x - 1] * x) % MOD\ninvFs = ([0] * N2) + [power(facts[N2], MOD - 2)]\nfor x in reversed(list(range(N2))):\n    invFs[x] = (invFs[x + 1] * (x + 1)) % MOD\ndef comb(n, k):\n    return (((facts[n] * invFs[k]) % MOD) * invFs[n - k]) % MOD\nans = 1\nfor num in list(cnt.values()):\n    ans = (ans * comb((N + num) - 1, num)) % MOD\nprint(ans)", "generated_code": "from math import floor, sqrt\nfrom collections import Counter\nMOD = (10 ** 9) + 7\ndef getPrimeFactor(x):\n    ans = []\n    for d in range(2, floor(sqrt(x)) + 1):\n        while x % d == 0:\n            ans.append(d)\n            x //= d\n    if x != 1:\n        ans.append(x)\n    return ans\ndef power(x, n):\n    ans = 1\n    while n:\n        if n % 2 == 1:\n            ans = (ans / x) % MOD\n        x = (x * x) % MOD\n        n //= 2\n    return ans\n(N, M) = list(map(int, input().split()))\nPFs = getPrimeFactor(M)\ncnt = Counter(PFs)\nN2 = N\nif len(cnt):\n    N2 += max(cnt.values())\nfacts = [1] + ([0] * N2)\nfor x in range(1, N2 + 1):\n    facts[x] = (facts[x - 1] * x) % MOD\ninvFs = ([0] * N2) + [power(facts[N2], MOD - 2)]\nfor x in reversed(list(range(N2))):\n    invFs[x] = (invFs[x + 1] * (x + 1)) % MOD\ndef comb(n, k):\n    return (((facts[n] * invFs[k]) % MOD) * invFs[n - k]) % MOD\nans = 1\nfor num in list(cnt.values()):\n    ans = (ans * comb((N + num) - 1, num)) % MOD\nprint(ans)", "score": 0.3728}
{"id": "PIE_extra_p03796_s916466489", "golden_code": "import math\n\n\n\n\n\ndef main():\n\n    N = int(eval(input()))\n\n    power = math.factorial(N)\n\n    print((power % (10 ** 9 + 7)))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n", "generated_code": "def main():\n\n    N = int(eval(input()))\n\n    power = 1\n\n    for i in range(1, N + 1):\n\n        power *= i\n\n        power %= 10 ** 9 + 7\n\n    print(power)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n", "score": 1.0}
{"id": "PIE_p02555_s973678433", "golden_code": "def cmb(n, r):\n    import math\n    if n < r:\n        return 0\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\ndef solve(S):\n    mod = (10 ** 9) + 7\n    ans = 0\n    for i in range(1, (S // 3) + 1):\n        tama = i + (S - (i * 3))\n        tama -= 2\n        bo = i - 1\n        ans += cmb(tama + 1, bo)\n        ans %= mod\n    print(ans)", "generated_code": "def cmb(n, r):\n    import math\n    if n < r:\n        return 0\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\ndef solve(S):\n    mod = (10 ** 9) + 7\n    ans = 0\n    for i in range(1, (S / 3) + 1):\n        tama = i + (S - (i * 3))\n        tama -= 2\n        bo = i - 1\n        ans += cmb(tama + 1, bo)\n        ans %= mod\n    print(ans)", "score": 0.0}
{"id": "PIE_extra_p04012_s204906128", "golden_code": "w = eval(input())\n\nfor l in w:\n\n\tif w.count(l) % 2 == 1:\n\n\t\tprint(\"No\")\n\n\t\tbreak\n\nelse:\n\n\tprint(\"Yes\")", "generated_code": "from collections import Counter\n\ns = eval(input())\n\nc = list(Counter(s).values())\n\nfor n in c:\n\n\tif n & 1 == 1:\n\n\t\tprint(\"No\")\n\n\t\tbreak\n\nelse:\n\n\tprint(\"Yes\")\n\n\n", "score": 1.0}
{"id": "PIE_p00144_s682125154", "golden_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "generated_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        break", "score": 0.0}
{"id": "PIE_p02850_s056526441", "golden_code": "n = int(eval(input()))\nnode = {i: [] for i in range(1, n + 1)}\nvisited = [False for i in range(n + 1)]\nq = []\nfor _ in range(n - 1):\n    (a, b) = list(map(int, input().split()))\n    node[a].append(b)\n    node[b].append(a)\n    q.append((a, b))\nmother = q[0][0]\nvisited[mother] = True\nd = []\ne = []\npaint = {i: {} for i in range(1, n + 1)}\nmother_paint = [0 for i in range(n + 1)]\nc = 1\nfor child in node[mother]:\n    visited[child] = True\n    paint[mother][child] = c\n    paint[child][mother] = c\n    mother_paint[child] = c\n    c += 1\n    d.append(child)\nwhile d:\n    for parent in d:\n        p = 1\n        for child in node[parent]:\n            if visited[child] == False:\n                visited[child] = True\n                if p != mother_paint[parent]:\n                    paint[parent][child] = p\n                    paint[child][parent] = p\n                    mother_paint[child] = p\n                    p += 1\n                    e.append(child)\n                else:\n                    p += 1\n                    paint[parent][child] = p\n                    paint[child][parent] = p\n                    mother_paint[child] = p\n                    p += 1\n                    e.append(child)\n    if e:\n        d = e\n        e = []\n    else:\n        d = []\n        e = []\nK = 0\nfor i in range(1, n + 1):\n    K = max(K, len(node[i]))\nprint(K)\nfor i in range(n - 1):\n    (s, t) = (q[i][0], q[i][1])\n    print(paint[s][t])", "generated_code": "n = int(eval(input()))\nnode = {i: [] for i in range(1, n + 1)}\nvisited = [False for i in range(n + 1)]\nq = []\nfor _ in range(n - 1):\n    (a, b) = list(map(int, input().split()))\n    node[a].append(b)\n    node[b].append(a)\n    q.append((a, b))\nmother = q[0][0]\nvisited[mother] = True\nd = []\ne = []\npaint = {i: {} for i in range(1, n + 1)}\nmother_paint = [0 for i in range(n - 1)]\nc = 1\nfor child in node[mother]:\n    visited[child] = True\n    paint[mother][child] = c\n    paint[child][mother] = c\n    mother_paint[child] = c\n    c += 1\n    d.append(child)\nwhile d:\n    for parent in d:\n        p = 1\n        for child in node[parent]:\n            if visited[child] == False:\n                visited[child] = True\n                if p != mother_paint[parent]:\n                    paint[parent][child] = p\n                    paint[child][parent] = p\n                    mother_paint[child] = p\n                    p += 1\n                    e.append(child)\n                else:\n                    p += 1\n                    paint[parent][child] = p\n                    paint[child][parent] = p\n                    mother_paint[child] = p\n                    p += 1\n                    e.append(child)\n    if e:\n        d = e\n        e = []\n    else:\n        d = []\n        e = []\nK = 0\nfor i in range(1, n + 1):\n    K = max(K, len(node[i]))\nprint(K)\nfor i in range(n - 1):\n    (s, t) = (q[i][0], q[i][1])\n    print(paint[s][t])", "score": 0.0}
{"id": "PIE_extra_p03828_s988350400", "golden_code": "import math\n\nimport collections\n\n\n\nN = int(eval(input()))\n\na = math.factorial(N)\n\ncheck = []\n\nans = 1\n\ni = 2\n\n\n\nwhile a != 1:\n\n    if a % i == 0:\n\n        a //= i\n\n        check.append(i)\n\n    else:\n\n        i += 1\n\n        \n\ncheck = list(collections.Counter(check).values())\n\nfor i in check:\n\n    ans *= (i+1)\n\n    ans %= 10**9+7\n\nprint(ans)", "generated_code": "from math import factorial\n\n\n\nN = factorial(int(eval(input())))\n\n\n\ni = 2\n\ncheck = 1\n\nans = 1\n\nwhile N != 1:\n\n    if N % i == 0:\n\n        N //= i\n\n        check += 1\n\n    else:\n\n        ans *= check\n\n        check = 1\n\n        i += 1\n\nprint(((ans*check)%(10**9+7)))", "score": 1.0}
{"id": "PIE_p03575_s579377069", "golden_code": "icase = 0\nif icase == 0:\n    (n, m) = list(map(int, input().split()))\n    a = []\n    b = []\n    for i in range(m):\n        (ai, bi) = list(map(int, input().split()))\n        a.append(ai)\n        b.append(bi)\nelif icase == 1:\n    n = 6\n    m = 5\n    a = [1, 2, 3, 4, 5]\n    b = [2, 3, 4, 5, 6]\nelif icase == 2:\n    n = 7\n    m = 7\n    a = [1, 2, 3, 4, 4, 5, 6]\n    b = [3, 7, 4, 5, 6, 6, 7]\nvtx = []\nfor i in range(n):\n    vtx.append([i + 1])\nicnt = 0\nfor j in range(m):\n    vtx1 = vtx.copy()\n    a1 = a.copy()\n    b1 = b.copy()\n    del a1[j]\n    del b1[j]\n    for i in range(m - 1):\n        for v1 in vtx1:\n            if a1[i] in v1:\n                if not (b1[i] in v1):\n                    for v2 in vtx1:\n                        if v1 != v2:\n                            if b1[i] in v2:\n                                break\n                    vtx1.remove(v1)\n                    vtx1.remove(v2)\n                    v3 = v1 + v2\n                    vtx1.append(v3)\n    if len(vtx1) != 1:\n        icnt = icnt + 1\nprint(icnt)", "generated_code": "icase = 0\nif icase == 0:\n    (n, m) = list(map(int, input().split()))\n    a = []\n    b = []\n    for i in range(m):\n        (ai, bi) = list(map(int, input().split()))\n        a.append(ai)\n        b.append(bi)\nelif icase == 1:\n    n = 6\n    m = 5\n    a = [1, 2, 3, 4, 5]\n    b = [2, 3, 4, 5, 6]\nelif icase == 2:\n    n = 7\n    m = 7\n    a = [1, 2, 3, 4, 4, 5, 6]\n    b = [3, 7, 4, 5, 6, 6, 7]\nvtx = []\nfor i in range(n):\n    vtx.append([i + 1])\nicnt = 0\nfor j in range(m):\n    vtx1 = vtx.copy()\n    a1 = a.copy()\n    b1 = b.copy()\n    del a1[j]\n    del b1[j]\n    for i in range(m - 1):\n        for v1 in vtx1:\n            if a1[i] in v1:\n                if not (b1[i] in v1):\n                    for v2 in vtx1:\n                        if v1 != v2:\n                            if b1[i] in v2:\n                                break\n                    vtx1.remove(v1)\n                    vtx1.remove(v2)\n                    v3 = v1 + v2\n                    vtx1.append(v3)\n    if len(vtx1) != 1:\n        icnt = icnt - 1\nprint(icnt)", "score": 0.0024}
{"id": "PIE_p02685_s295745028", "golden_code": "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nfac = [1, 1]\nf_inv = [1, 1]\ninv = [0, 1]\ndef prepare(n, mod):\n    for i in range(2, n + 1):\n        fac.append((fac[-1] * i) % mod)\n        inv.append(((-(inv[mod % i])) * (mod // i)) % mod)\n        f_inv.append((f_inv[-1] * inv[-1]) % mod)\ndef cmb(n, r, mod):\n    if (n < 0 or r < 0):\n        return 0\n    if r > n:\n        return 0\n    return ((fac[n] * f_inv[r]) * f_inv[n - r]) % mod\ndef main():\n    (N, M, K) = list(map(int, readline().split()))\n    MOD = 998244353\n    prepare(N + 10, MOD)\n    if (M == 1 and K == N - 1):\n        print(1)\n        exit()\n    m = M\n    for _ in range(N - 1):\n        m *= M - 1\n        m %= MOD\n    ans = 0\n    for k in range(K + 1):\n        ans += (m * cmb(N - 1, k, MOD)) % MOD\n        ans %= MOD\n        m *= pow(M - 1, MOD - 2, MOD)\n        m %= MOD\n    print(ans)", "generated_code": "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nfac = [1, 1]\nf_inv = [1, 1]\ninv = [0, 1]\ndef prepare(n, mod):\n    for i in range(2, n + 1):\n        fac.append((fac[1] * i) % mod)\n        inv.append(((-(inv[mod % i])) * (mod // i)) % mod)\n        f_inv.append((f_inv[-1] * inv[-1]) % mod)\ndef cmb(n, r, mod):\n    if (n < 0 or r < 0):\n        return 0\n    if r > n:\n        return 0\n    return ((fac[n] * f_inv[r]) * f_inv[n - r]) % mod\ndef main():\n    (N, M, K) = list(map(int, readline().split()))\n    MOD = 998244353\n    prepare(N + 10, MOD)\n    if (M == 1 and K == N - 1):\n        print(1)\n        exit()\n    m = M\n    for _ in range(N - 1):\n        m *= M - 1\n        m %= MOD\n    ans = 0\n    for k in range(K + 1):\n        ans += (m * cmb(N - 1, k, MOD)) % MOD\n        ans %= MOD\n        m *= pow(M - 1, MOD - 2, MOD)\n        m %= MOD\n    print(ans)", "score": 0.0}
{"id": "PIE_p00144_s682125154", "golden_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "generated_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        pass\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "score": 0.0}
{"id": "PIE_p03253_s318779524", "golden_code": "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nMOD = (10 ** 9) + 7\nfac = [1, 1]\nf_inv = [1, 1]\ninv = [0, 1]\ndef prepare(n, mod):\n    for i in range(2, n + 1):\n        fac.append((fac[-1] * i) % mod)\n        inv.append(((-(inv[mod % i])) * (mod // i)) % mod)\n        f_inv.append((f_inv[-1] * inv[-1]) % mod)\ndef cmb(n, r, mod):\n    if (n < 0 or r < 0):\n        return 0\n    if r > n:\n        return 0\n    return ((fac[n] * f_inv[r]) * f_inv[n - r]) % mod\ndef prime_factorization(n):\n    d = []\n    (i, e) = (2, 0)\n    while i * i <= n:\n        while n % i == 0:\n            n //= i\n            e += 1\n        if e > 0:\n            d.append((i, e))\n        i += 1\n        e = 0\n    if n > 1:\n        d.append((n, 1))\n    return d\ndef main():\n    (N, M) = list(map(int, readline().split()))\n    prepare(N + 100, MOD)\n    d = prime_factorization(M)\n    ans = 1\n    for (i, e) in d:\n        ans *= cmb((N - 1) + e, e, MOD)\n        ans %= MOD\n    print(ans)", "generated_code": "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nMOD = (10 ** 9) + 7\nfac = [1, 1]\nf_inv = [1, 1]\ninv = [0, 1]\ndef prepare(n, mod):\n    for i in range(2, n + 1):\n        fac.append((fac[+1] * i) % mod)\n        inv.append(((-(inv[mod % i])) * (mod // i)) % mod)\n        f_inv.append((f_inv[-1] * inv[-1]) % mod)\ndef cmb(n, r, mod):\n    if (n < 0 or r < 0):\n        return 0\n    if r > n:\n        return 0\n    return ((fac[n] * f_inv[r]) * f_inv[n - r]) % mod\ndef prime_factorization(n):\n    d = []\n    (i, e) = (2, 0)\n    while i * i <= n:\n        while n % i == 0:\n            n //= i\n            e += 1\n        if e > 0:\n            d.append((i, e))\n        i += 1\n        e = 0\n    if n > 1:\n        d.append((n, 1))\n    return d\ndef main():\n    (N, M) = list(map(int, readline().split()))\n    prepare(N + 100, MOD)\n    d = prime_factorization(M)\n    ans = 1\n    for (i, e) in d:\n        ans *= cmb((N - 1) + e, e, MOD)\n        ans %= MOD\n    print(ans)", "score": 0.0}
{"id": "PIE_p02794_s356881403", "golden_code": "import sys\ndef main():\n    input = sys.stdin.readline\n    N = int(eval(input()))\n    E = [[] for _ in range(N)]\n    for i in range(N - 1):\n        (a, b) = list(map(int, input().split()))\n        (a, b) = (a - 1, b - 1)\n        E[a].append((b, i))\n        E[b].append((a, i))\n    def dfs(s, g):\n        par = [(-1, -1)] * N\n        par[s] = (s, -1)\n        stack = [s]\n        while stack:\n            v = stack.pop()\n            for (to, i) in E[v]:\n                if par[to][0] >= 0:\n                    continue\n                par[to] = (v, i)\n                if to == g:\n                    break\n                stack.append(to)\n        r = set()\n        v = g\n        while v != s:\n            (v, i) = par[v]\n            r.add(i)\n        return r\n    M = int(eval(input()))\n    path = [None] * M\n    for i in range(M):\n        (u, v) = list(map(int, input().split()))\n        (u, v) = (u - 1, v - 1)\n        path[i] = dfs(u, v)\n    def calc(s):\n        return 1 << ((N - 1) - len(s))\n    i_ans = 0\n    for p in range(1, 1 << M):\n        is_odd = bin(p).count('1') & 1\n        s = set()\n        for i in range(M):\n            if p & 1:\n                s |= path[i]\n            p >>= 1\n        if is_odd:\n            i_ans += calc(s)else:i_ans -= calc(s)\n    print((1 << (N - 1)) - i_ans)", "generated_code": "import sys\ndef main():\n    input = sys.stdin.readline\n    N = int(eval(input()))\n    E = [[] for _ in range(N)]\n    for i in range(N - 1):\n        (a, b) = list(map(int, input().split()))\n        (a, b) = (a - 1, b - 1)\n        E[a].append((b, i))\n        E[b].append((a, i))\n    def dfs(s, g):\n        par = [(1, -1)] * N\n        par[s] = (s, -1)\n        stack = [s]\n        while stack:\n            v = stack.pop()\n            for (to, i) in E[v]:\n                if par[to][0] >= 0:\n                    continue\n                par[to] = (v, i)\n                if to == g:\n                    break\n                stack.append(to)\n        r = set()\n        v = g\n        while v != s:\n            (v, i) = par[v]\n            r.add(i)\n        return r\n    M = int(eval(input()))\n    path = [None] * M\n    for i in range(M):\n        (u, v) = list(map(int, input().split()))\n        (u, v) = (u - 1, v - 1)\n        path[i] = dfs(u, v)\n    def calc(s):\n        return 1 << ((N - 1) - len(s))\n    i_ans = 0\n    for p in range(1, 1 << M):\n        is_odd = bin(p).count('1') & 1\n        s = set()\n        for i in range(M):\n            if p & 1:\n                s |= path[i]\n            p >>= 1\n        if is_odd:\n            i_ans += calc(s)else:i_ans -= calc(s)\n    print((1 << (N - 1)) - i_ans)", "score": 0.0}
{"id": "PIE_p03253_s213127805", "golden_code": "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nMOD = (10 ** 9) + 7\nfac = [1, 1]\nf_inv = [1, 1]\ninv = [0, 1]\ndef prepare(n, mod):\n    for i in range(2, n + 1):\n        fac.append((fac[-1] * i) % mod)\ndef cmb(n, r, mod):\n    if (n < 0 or r < 0):\n        return 0\n    if r > n:\n        return 0\n    return ((fac[n] * pow(fac[r], MOD - 2, MOD)) * pow(fac[n - r], MOD - 2, MOD)) % mod\ndef prime_factorization(n):\n    d = []\n    (i, e) = (2, 0)\n    while i * i <= n:\n        while n % i == 0:\n            n //= i\n            e += 1\n        if e > 0:\n            d.append((i, e))\n        i += 1\n        e = 0\n    if n > 1:\n        d.append((n, 1))\n    return d\ndef main():\n    (N, M) = list(map(int, readline().split()))\n    prepare(N + 100, MOD)\n    d = prime_factorization(M)\n    ans = 1\n    for (i, e) in d:\n        ans *= cmb((N - 1) + e, e, MOD)\n        ans %= MOD\n    print(ans)", "generated_code": "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nMOD = (10 ** 9) + 7\nfac = [1, 1]\nf_inv = [1, 1]\ninv = [0, 1]\ndef prepare(n, mod):\n    for i in range(2, n + 1):\n        fac.append((fac[-1] ** i) % mod)\ndef cmb(n, r, mod):\n    if (n < 0 or r < 0):\n        return 0\n    if r > n:\n        return 0\n    return ((fac[n] * pow(fac[r], MOD - 2, MOD)) * pow(fac[n - r], MOD - 2, MOD)) % mod\ndef prime_factorization(n):\n    d = []\n    (i, e) = (2, 0)\n    while i * i <= n:\n        while n % i == 0:\n            n //= i\n            e += 1\n        if e > 0:\n            d.append((i, e))\n        i += 1\n        e = 0\n    if n > 1:\n        d.append((n, 1))\n    return d\ndef main():\n    (N, M) = list(map(int, readline().split()))\n    prepare(N + 100, MOD)\n    d = prime_factorization(M)\n    ans = 1\n    for (i, e) in d:\n        ans *= cmb((N - 1) + e, e, MOD)\n        ans %= MOD\n    print(ans)", "score": 0.0}
{"id": "PIE_extra_p02725_s591694965", "golden_code": "k, n = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\n\n\ndiff = []\n\n\n\nfor i in range(n - 1):\n\n    diff.append(a[i + 1] - a[i])\n\ndiff.append(k - a[-1] + a[0])\n\n\n\nprint((k - max(diff)))\n", "generated_code": "k, n = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\n\n\na.append(k + a[0])\n\ndiff = [a1 - a0 for a0, a1 in zip(a, a[1:])]\n\n\n\nprint((k - max(diff)))\n", "score": 1.0}
{"id": "PIE_extra_p03796_s294020052", "golden_code": "import math\n\nN=int(eval(input()))\n\nans=math.factorial(N)\n\nprint((ans%(10**9 +7)))", "generated_code": "mod=10**9+7\n\nN=int(eval(input()))\n\nans=1\n\nfor i in range(1,N+1):\n\n  ans*=i\n\n  ans%=mod\n\nprint(ans)", "score": 1.0}
{"id": "PIE_p03371_s026349855", "golden_code": "from collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\ndef I():\n    return int(sys.stdin.readline())\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\ndef S():\n    return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LS()\n    return l\nsys.setrecursionlimit(1000000)\nmod = 1000000007\ndef A():\n    return\ndef B():\n    return\ndef C():\n    return\ndef D():\n    return\ndef E():\n    return\ndef F():\n    (a, b, c, X, Y) = LI()\n    ans = float('inf')\n    for z in range(300001):\n        if z % 2 == 0:\n            m = c * z\n            x = z // 2\n            y = z // 2\n            m += a * max(0, X - x)\n            m += b * max(0, Y - y)\n            if m < ans:\n                ans = m\n    print(ans)\n    return\ndef G():\n    n = I()\n    x = LI()\n    f = [(i, x[i]) for i in range(n)]\n    f.sort(key=lambda x: (x[1]))\n    g = [(f[i][0], i) for i in range(n)]\n    g.sort(key=lambda x: (x[0]))\n    for i in range(n):\n        if g[i][1] < n // 2:\n            print(f[n // 2][1])else:print(f[(n // 2) - 1][1])\n    return\ndef H():\n    return\ndef I_():\n    return\ndef J():\n    return", "generated_code": "from collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\ndef I():\n    return int(sys.stdin.readline())\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\ndef S():\n    return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LS()\n    return l\nsys.setrecursionlimit(1000000)\nmod = 1000000007\ndef A():\n    return\ndef B():\n    return\ndef C():\n    return\ndef D():\n    return\ndef E():\n    return\ndef F():\n    (a, b, c, X, Y) = LI()\n    ans = float('inf')\n    for z in range(300001):\n        if z % 2 == 0:\n            m = c ** z\n            x = z // 2\n            y = z // 2\n            m += a * max(0, X - x)\n            m += b * max(0, Y - y)\n            if m < ans:\n                ans = m\n    print(ans)\n    return\ndef G():\n    n = I()\n    x = LI()\n    f = [(i, x[i]) for i in range(n)]\n    f.sort(key=lambda x: (x[1]))\n    g = [(f[i][0], i) for i in range(n)]\n    g.sort(key=lambda x: (x[0]))\n    for i in range(n):\n        if g[i][1] < n // 2:\n            print(f[n // 2][1])else:print(f[(n // 2) - 1][1])\n    return\ndef H():\n    return\ndef I_():\n    return\ndef J():\n    return", "score": 0.0}
{"id": "PIE_extra_p02721_s949081681", "golden_code": "N, K, C = list(map(int, input().split()))\n\nS = eval(input())\n\n\n\nlatest = [None]*K\n\ni = len(S)+C\n\nfor j in range(K-1, -1, -1):\n\n  i = S.rindex(\"o\", 0, i-C)\n\n  latest[j] = i\n\n\n\nif i<=C or \"o\" not in S[:i-C]:\n\n  i = -C-1\n\n  for j in latest:\n\n    i = S.index(\"o\", i+C+1)\n\n    if i == j:\n\n      print((i+1))\n", "generated_code": "def solve():\n\n  N, K, C = list(map(int, input().split()))\n\n  workable = [i for i, s in enumerate(eval(input())) if s==\"o\"]\n\n  if len(workable) == K:\n\n    return workable\n\n    \n\n  prev = workable[-1]\n\n  latest = {prev}\n\n  i = len(workable)-1\n\n  while i > 0:\n\n    i -= 1\n\n    if prev - workable[i] > C:\n\n      latest.add(workable[i])\n\n      prev = workable[i]\n\n      if len(latest) > K:\n\n        return []\n\n  must = []\n\n  i = -1\n\n  prev = -C-1\n\n  while i < len(workable)-1:\n\n    i += 1\n\n    if workable[i] - prev > C:\n\n      if workable[i] in latest:\n\n        must.append(workable[i])\n\n      prev = workable[i]\n\n  return must\n\n\n\nfor i in solve():\n\n  print((i+1))", "score": 1.0}
{"id": "PIE_extra_p03325_s116805601", "golden_code": "N = int(eval(input()))\n\n\n\nseq = list(map(int, input().split()))\n\n\n\ncnt = 0\n\n\n\nfor num in seq:\n\n    while num % 2 == 0:\n\n        cnt += 1\n\n        num /= 2\n\n\n\nprint(cnt)\n", "generated_code": "n = int(eval(input()))\n\na = list(map(int, input().split()))\n\nans = 0\n\nfor num in a:\n\n    ans += format(num, 'b')[::-1].find('1')\n\nprint(ans)", "score": 1.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] -= v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0394}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    @classmethod\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0312}
{"id": "PIE_extra_p02555_s422627112", "golden_code": "S = int(eval(input()))\n\n\n\ndp = [0] * (S + 1)\n\ndp[0] = 1\n\nM = 10 ** 9 + 7\n\n\n\nfor i in range(1, S + 1):\n\n    num = 0\n\n    for j in range(i - 2):\n\n        num += dp[j]\n\n        dp[i] = num % M\n\n\n\nprint((dp[S]))\n\n\n", "generated_code": "S = int(eval(input()))\n\n\n\n\n\ndef cmb(n, r, p):\n\n    r = min(n - r, r)\n\n    if r == 0:\n\n        return 1\n\n    over = 1\n\n    for i in range(n, n - r, -1):\n\n        over = over * i % p\n\n    under = 1\n\n    for i in range(1, r + 1):\n\n        under = under * i % p\n\n    inv = pow(under, p - 2, p)\n\n    return over * inv % p\n\n\n\n\n\nM = 10 ** 9 + 7\n\nans = 0\n\nfor i in range(1, S):\n\n    if S - 3 * i < 0:\n\n        break\n\n    ans += cmb(S - 3 * i + i - 1, i - 1, M)\n\n    ans %= M\n\nprint(ans)\n", "score": 1.0}
{"id": "PIE_p02537_s767194684", "golden_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 ** N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "score": 0.0}
{"id": "PIE_p02378_s432486243", "golden_code": "import sys\nfile_input = sys.stdin\n(X, Y, E) = list(map(int, file_input.readline().split()))\nv_num = (X + Y) + 2\nadj_mat = [[0] * v_num for i in range(v_num)]\nfor line in file_input:\n    (x, y) = list(map(int, line.split()))\n    adj_mat[x][X + y] = 1\ns = X + Y\nt = s + 1\nfor i in range(X):\n    adj_mat[s][i] = 1\nfor i in range(X, s):\n    adj_mat[i][t] = 1\nimport collections\ndef bfs(start, goal, parent):\n    unvisited = [True] * v_num\n    queue = collections.deque()\n    queue.append(start)\n    unvisited[start] = False\n    while queue:\n        u = queue.popleft()\n        for (v, r_capacity) in enumerate(adj_mat[u]):\n            if (unvisited[v] and r_capacity > 0):\n                parent[v].append(u)\n                queue.append(v)\n                unvisited[v] = False\n    return unvisited[goal]\ndef dfs(goal, path, parent, blocking_flow):\n    v = path[-1]\n    if v == goal:\n        aug_path_flow = 10000\n        for (x, y) in zip(path[1:], path[:-1]):\n            aug_path_flow = min(aug_path_flow, adj_mat[x][y])\n        for (x, y) in zip(path[1:], path[:-1]):\n            adj_mat[x][y] -= aug_path_flow\n            adj_mat[y][x] += aug_path_flow\n        blocking_flow[0] += aug_path_flow\n    else:\n        for u in parent[v]:\n            path.append(u)\n            dfs(goal, path, parent, blocking_flow)\n            path.pop()\ndef dinic(source, sink):\n    max_flow = 0\n    parent = [[] for i in range(v_num)]\n    while not (bfs(source, sink, parent)):\n        blocking_flow = [0]\n        path = [sink]\n        dfs(source, path, parent, blocking_flow)\n        max_flow += blocking_flow[0]\n        parent = [[] for i in range(v_num)]\n    return max_flow\nprint(dinic(s, t))", "generated_code": "import sys\nfile_input = sys.stdin\n(X, Y, E) = list(map(int, file_input.readline().split()))\nv_num = (X + Y) + 2\nadj_mat = [[0] * v_num for i in range(v_num)]\nfor line in file_input:\n    (x, y) = list(map(int, line.split()))\n    adj_mat[x][X + y] = 1\ns = X + Y\nt = s + 1\nfor i in range(X):\n    adj_mat[s][i] = 1\nfor i in range(X, s):\n    adj_mat[i][t] = 1\nimport collections\ndef bfs(start, goal, parent):\n    unvisited = [True] * v_num\n    queue = collections.deque()\n    queue.append(start)\n    unvisited[start] = False\n    while queue:\n        u = queue.popleft()\n        for (v, r_capacity) in enumerate(adj_mat[u]):\n            if (unvisited[v] and r_capacity > 0):\n                parent[v].append(u)\n                queue.append(v)\n                unvisited[v] = False\n    return unvisited[goal]\ndef dfs(goal, path, parent, blocking_flow):\n    v = path[1]\n    if v == goal:\n        aug_path_flow = 10000\n        for (x, y) in zip(path[1:], path[:-1]):\n            aug_path_flow = min(aug_path_flow, adj_mat[x][y])\n        for (x, y) in zip(path[1:], path[:-1]):\n            adj_mat[x][y] -= aug_path_flow\n            adj_mat[y][x] += aug_path_flow\n        blocking_flow[0] += aug_path_flow\n    else:\n        for u in parent[v]:\n            path.append(u)\n            dfs(goal, path, parent, blocking_flow)\n            path.pop()\ndef dinic(source, sink):\n    max_flow = 0\n    parent = [[] for i in range(v_num)]\n    while not (bfs(source, sink, parent)):\n        blocking_flow = [0]\n        path = [sink]\n        dfs(source, path, parent, blocking_flow)\n        max_flow += blocking_flow[0]\n        parent = [[] for i in range(v_num)]\n    return max_flow\nprint(dinic(s, t))", "score": 0.0}
{"id": "PIE_p02537_s767194684", "golden_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    pass\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "score": 0.4708}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            pass\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0404}
{"id": "PIE_p02537_s645565645", "golden_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "generated_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    @classmethod\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "score": 0.0}
{"id": "PIE_p02555_s973678433", "golden_code": "def cmb(n, r):\n    import math\n    if n < r:\n        return 0\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\ndef solve(S):\n    mod = (10 ** 9) + 7\n    ans = 0\n    for i in range(1, (S // 3) + 1):\n        tama = i + (S - (i * 3))\n        tama -= 2\n        bo = i - 1\n        ans += cmb(tama + 1, bo)\n        ans %= mod\n    print(ans)", "generated_code": "def cmb(n, r):\n    import math\n    if n < r:\n        return 0\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\ndef solve(S):\n    mod = (10 ** 9) + 7\n    ans = 0\n    for i in range(1, (S // 3) + 1):\n        tama = i + (S - (i * 3))\n        tama -= 2\n        bo = i - 1\n        ans += cmb(tama + 1, bo)\n        ans %= mod\n    print(ans)", "score": 0.0}
{"id": "PIE_p02680_s341076610", "golden_code": "import sys\n(n, m, *abcdef) = list(map(int, sys.stdin.buffer.read().split()))\nver_lines = []\nhor_lines = []\nx_list = set()\ny_list = set()\nn3 = n * 3\nfor (a, b, c) in zip(abcdef[0:n3:3], abcdef[1:n3:3], abcdef[2:n3:3]):\n    y_list.add(a)\n    y_list.add(b)\n    x_list.add(c)\n    ver_lines.append((a, b, c))\nfor (d, e, f) in zip(abcdef[n3 + 0::3], abcdef[n3 + 1::3], abcdef[n3 + 2::3]):\n    y_list.add(d)\n    x_list.add(e)\n    x_list.add(f)\n    hor_lines.append((d, e, f))\nx_list.add(0)\ny_list.add(0)\nx_list = sorted(x_list)\ny_list = sorted(y_list)\nx_dict = {x: i for (i, x) in enumerate(x_list, start=1)}\ny_dict = {y: i for (i, y) in enumerate(y_list, start=1)}\nrow_real = len(x_list)\ncol_real = len(y_list)\nrow = row_real + 2\ncol = col_real + 2\nbanned_up_ij = [[0] * row for _ in range(col)]\nbanned_down_ij = [[0] * row for _ in range(col)]\nbanned_left_ij = [[0] * col for _ in range(row)]\nbanned_right_ij = [[0] * col for _ in range(row)]\nfor (a, b, c) in ver_lines:\n    if a > b:\n        (a, b) = (b, a)\n    ai = y_dict[a]\n    bi = y_dict[b]\n    j = x_dict[c]\n    banned_left_ij[j][ai] += 1\n    banned_left_ij[j][bi] -= 1\n    banned_right_ij[j - 1][ai] += 1\n    banned_right_ij[j - 1][bi] -= 1\nfor (d, e, f) in hor_lines:\n    if e > f:\n        (e, f) = (f, e)\n    i = y_dict[d]\n    ej = x_dict[e]\n    fj = x_dict[f]\n    banned_up_ij[i][ej] += 1\n    banned_up_ij[i][fj] -= 1\n    banned_down_ij[i - 1][ej] += 1\n    banned_down_ij[i - 1][fj] -= 1\nbanned_up = [0] * (row * col)\nbanned_down = [0] * (row * col)\nbanned_left = [0] * (row * col)\nbanned_right = [0] * (row * col)\nfor i in range(col):\n    ru = banned_up_ij[i]\n    rd = banned_down_ij[i]\n    ri = row * i\n    banned_up[ri] = ru[0]\n    banned_down[ri] = rd[0]\n    for j in range(1, row):\n        banned_up[ri + j] = banned_up[(ri + j) - 1] + ru[j]\n        banned_down[ri + j] = banned_down[(ri + j) - 1] + rd[j]\nfor j in range(row):\n    rl = banned_left_ij[j]\n    rr = banned_right_ij[j]\n    banned_left[j] = rl[0]\n    banned_right[j] = rr[0]\n    for i in range(1, col):\n        ri0 = (i - 1) * row\n        ri1 = i * row\n        banned_left[ri1 + j] = banned_left[ri0 + j] + rl[i]\n        banned_right[ri1 + j] = banned_right[ri0 + j] + rr[i]\ns = (row * y_dict[0]) + x_dict[0]\nenable = (([-1] * row) + ((([-1] + ([0] * (row - 2))) + [-1]) * (col - 2))) + ([-1] * row)\nq = [s]\nmoves = [(-row, banned_up), (-1, banned_left), (1, banned_right), (row, banned_down)]\nwhile q:\n    c = q.pop()\n    if enable[c] == 1:\n        continue\n    elif enable[c] == -1:\n        print('INF')\n        exit()\n    enable[c] = 1\n    for (dc, banned) in moves:\n        if banned[c]:\n            continue\n        nc = c + dc\n        if enable[nc] == 1:\n            continue\n        q.append(nc)\nans = 0\nfor i in range(col):\n    ri = i * row\n    for j in range(row):\n        if enable[ri + j] != 1:\n            continue\n        t = y_list[i - 1]\n        b = y_list[i]\n        l = x_list[j - 1]\n        r = x_list[j]\n        ans += (b - t) * (r - l)\nprint(ans)", "generated_code": "import sys\n(n, m, *abcdef) = list(map(int, sys.stdin.buffer.read().split()))\nver_lines = []\nhor_lines = []\nx_list = set()\ny_list = set()\nn3 = n * 3\nfor (a, b, c) in zip(abcdef[0:n3:3], abcdef[1:n3:3], abcdef[2:n3:3]):\n    y_list.add(a)\n    y_list.add(b)\n    x_list.add(c)\n    ver_lines.append((a, b, c))\nfor (d, e, f) in zip(abcdef[n3 + 0::3], abcdef[n3 + 1::3], abcdef[n3 + 2::3]):\n    y_list.add(d)\n    x_list.add(e)\n    x_list.add(f)\n    hor_lines.append((d, e, f))\nx_list.add(0)\ny_list.add(0)\nx_list = sorted(x_list)\ny_list = sorted(y_list)\nx_dict = {x: i for (i, x) in enumerate(x_list, start=1)}\ny_dict = {y: i for (i, y) in enumerate(y_list, start=1)}\nrow_real = len(x_list)\ncol_real = len(y_list)\nrow = row_real + 2\ncol = col_real + 2\nbanned_up_ij = [[0] * row for _ in range(col)]\nbanned_down_ij = [[0] * row for _ in range(col)]\nbanned_left_ij = [[0] * col for _ in range(row)]\nbanned_right_ij = [[0] * col for _ in range(row)]\nfor (a, b, c) in ver_lines:\n    if a > b:\n        (a, b) = (b, a)\n    ai = y_dict[a]\n    bi = y_dict[b]\n    j = x_dict[c]\n    banned_left_ij[j][ai] += 1\n    banned_left_ij[j][bi] -= 1\n    banned_right_ij[j - 1][ai] += 1\n    banned_right_ij[j - 1][bi] -= 1\nfor (d, e, f) in hor_lines:\n    if e > f:\n        (e, f) = (f, e)\n    i = y_dict[d]\n    ej = x_dict[e]\n    fj = x_dict[f]\n    banned_up_ij[i][ej] += 1\n    banned_up_ij[i][fj] -= 1\n    banned_down_ij[i - 1][ej] += 1\n    banned_down_ij[i - 1][fj] -= 1\nbanned_up = [0] * (row * col)\nbanned_down = [0] * (row * col)\nbanned_left = [0] * (row * col)\nbanned_right = [0] * (row * col)\nfor i in range(col):\n    ru = banned_up_ij[i]\n    rd = banned_down_ij[i]\n    ri = row * i\n    banned_up[ri] = ru[0]\n    banned_down[ri] = rd[0]\n    for j in range(1, row):\n        banned_up[ri + j] = banned_up[(ri + j) - 1] + ru[j]\n        banned_down[ri + j] = banned_down[(ri + j) - 1] + rd[j]\nfor j in range(row):\n    rl = banned_left_ij[j]\n    rr = banned_right_ij[j]\n    banned_left[j] = rl[0]\n    banned_right[j] = rr[0]\n    for i in range(1, col):\n        ri0 = (i - 1) * row\n        ri1 = i * row\n        banned_left[ri1 + j] = banned_left[ri0 + j] + rl[i]\n        banned_right[ri1 + j] = banned_right[ri0 + j] + rr[i]\ns = (row * y_dict[0]) + x_dict[0]\nenable = (([-1] * row) + ((([-1] + ([0] * (row - 2))) + [-1]) * (col - 2))) + ([-1] * row)\nq = [s]\nmoves = [(-row, banned_up), (-1, banned_left), (1, banned_right), (row, banned_down)]\nwhile q:\n    c = q.pop()\n    if enable[c] == 1:\n        continue\n    elif enable[c] == +1:\n        print('INF')\n        exit()\n    enable[c] = 1\n    for (dc, banned) in moves:\n        if banned[c]:\n            continue\n        nc = c + dc\n        if enable[nc] == 1:\n            continue\n        q.append(nc)\nans = 0\nfor i in range(col):\n    ri = i * row\n    for j in range(row):\n        if enable[ri + j] != 1:\n            continue\n        t = y_list[i - 1]\n        b = y_list[i]\n        l = x_list[j - 1]\n        r = x_list[j]\n        ans += (b - t) * (r - l)\nprint(ans)", "score": 0.0}
{"id": "PIE_p03253_s213127805", "golden_code": "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nMOD = (10 ** 9) + 7\nfac = [1, 1]\nf_inv = [1, 1]\ninv = [0, 1]\ndef prepare(n, mod):\n    for i in range(2, n + 1):\n        fac.append((fac[-1] * i) % mod)\ndef cmb(n, r, mod):\n    if (n < 0 or r < 0):\n        return 0\n    if r > n:\n        return 0\n    return ((fac[n] * pow(fac[r], MOD - 2, MOD)) * pow(fac[n - r], MOD - 2, MOD)) % mod\ndef prime_factorization(n):\n    d = []\n    (i, e) = (2, 0)\n    while i * i <= n:\n        while n % i == 0:\n            n //= i\n            e += 1\n        if e > 0:\n            d.append((i, e))\n        i += 1\n        e = 0\n    if n > 1:\n        d.append((n, 1))\n    return d\ndef main():\n    (N, M) = list(map(int, readline().split()))\n    prepare(N + 100, MOD)\n    d = prime_factorization(M)\n    ans = 1\n    for (i, e) in d:\n        ans *= cmb((N - 1) + e, e, MOD)\n        ans %= MOD\n    print(ans)", "generated_code": "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nMOD = (10 ** 9) + 7\nfac = [1, 1]\nf_inv = [1, 1]\ninv = [0, 1]\ndef prepare(n, mod):\n    for i in range(2, n + 1):\n        fac.append((fac[-1] / i) % mod)\ndef cmb(n, r, mod):\n    if (n < 0 or r < 0):\n        return 0\n    if r > n:\n        return 0\n    return ((fac[n] * pow(fac[r], MOD - 2, MOD)) * pow(fac[n - r], MOD - 2, MOD)) % mod\ndef prime_factorization(n):\n    d = []\n    (i, e) = (2, 0)\n    while i * i <= n:\n        while n % i == 0:\n            n //= i\n            e += 1\n        if e > 0:\n            d.append((i, e))\n        i += 1\n        e = 0\n    if n > 1:\n        d.append((n, 1))\n    return d\ndef main():\n    (N, M) = list(map(int, readline().split()))\n    prepare(N + 100, MOD)\n    d = prime_factorization(M)\n    ans = 1\n    for (i, e) in d:\n        ans *= cmb((N - 1) + e, e, MOD)\n        ans %= MOD\n    print(ans)", "score": 0.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() - 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0342}
{"id": "PIE_p00744_s226218538", "golden_code": "import collections\nimport math\nclass Dinic:\n    class edge:\n        def __init__(self, to, cap, rev):\n            (self.to, self.cap, self.rev) = (to, cap, rev)\n    def __init__(self, V, E, source, sink):\n        self.V = V\n        self.E = [[] for _ in range(V)]\n        for fr in range(V):\n            for (to, cap) in E[fr]:\n                self.E[fr].append(self.edge(to, cap, len(self.E[to])))\n                self.E[to].append(self.edge(fr, 0, len(self.E[fr]) - 1))\n        self.maxflow = self.dinic(source, sink)\n    def dinic(self, source, sink):\n        INF = float('inf')\n        maxflow = 0\n        while True:\n            self.bfs(source)\n            if self.level[sink] < 0:\n                return maxflow\n            self.itr = [0] * self.V\n            while True:\n                flow = self.dfs(source, sink, INF)\n                if flow > 0:\n                    maxflow += flow\n                else:\n                    break\n    def dfs(self, vertex, sink, flow):\n        if vertex == sink:\n            return flow\n        for i in range(self.itr[vertex], len(self.E[vertex])):\n            self.itr[vertex] = i\n            e = self.E[vertex][i]\n            if (e.cap > 0 and self.level[vertex] < self.level[e.to]):\n                d = self.dfs(e.to, sink, min(flow, e.cap))\n                if d > 0:\n                    e.cap -= d\n                    self.E[e.to][e.rev].cap += d\n                    return d\n        return 0\n    def bfs(self, start):\n        que = collections.deque()\n        self.level = [-1] * self.V\n        que.append(start)\n        self.level[start] = 0\n        while que:\n            fr = que.popleft()\n            for e in self.E[fr]:\n                if (e.cap > 0 and self.level[e.to] < 0):\n                    self.level[e.to] = self.level[fr] + 1\n                    que.append(e.to)\nwhile True:\n    (M, N) = list(map(int, input().split()))\n    if (M == 0 and N == 0):\n        break\n    (blue, red) = ([], [])\n    while True:\n        for x in input().split():\n            blue.append(int(x))\n        if len(blue) == M:\n            break\n    while True:\n        for x in input().split():\n            red.append(int(x))\n        if len(red) == N:\n            break\n    V = (M + N) + 2\n    edge = [set() for _ in range(V)]\n    for (i, b) in enumerate(blue):\n        if b != 1:\n            for (j, r) in enumerate(red):\n                if r % b == 0:\n                    edge[i].add((M + j, 1))\n        for j in range(2, int(math.sqrt(b)) + 1):\n            if b % j == 0:\n                for (k, r) in enumerate(red):\n                    if (r % j == 0 or r % (b // j) == 0):\n                        edge[i].add((M + k, 1))\n    for i in range(M):\n        edge[M + N].add((i, 1))\n    for j in range(N):\n        edge[M + j].add(((M + N) + 1, 1))\n    d = Dinic(V, edge, M + N, (M + N) + 1)\n    print(d.maxflow)", "generated_code": "import collections\nimport math\nclass Dinic:\n    class edge:\n        def __init__(self, to, cap, rev):\n            (self.to, self.cap, self.rev) = (to, cap, rev)\n    def __init__(self, V, E, source, sink):\n        self.V = V\n        self.E = [[] for _ in range(V)]\n        for fr in range(V):\n            for (to, cap) in E[fr]:\n                self.E[fr].append(self.edge(to, cap, len(self.E[to])))\n                self.E[to].append(self.edge(fr, 0, len(self.E[fr]) - 1))\n        self.maxflow = self.dinic(source, sink)\n    def dinic(self, source, sink):\n        INF = float('inf')\n        maxflow = 0\n        while True:\n            self.bfs(source)\n            if self.level[sink] < 0:\n                return maxflow\n            self.itr = [0] * self.V\n            while True:\n                flow = self.dfs(source, sink, INF)\n                if flow > 0:\n                    maxflow += flow\n                else:\n                    break\n    def dfs(self, vertex, sink, flow):\n        if vertex == sink:\n            return flow\n        for i in range(self.itr[vertex], len(self.E[vertex])):\n            self.itr[vertex] = i\n            e = self.E[vertex][i]\n            if (e.cap > 0 and self.level[vertex] < self.level[e.to]):\n                d = self.dfs(e.to, sink, min(flow, e.cap))\n                if d > 0:\n                    e.cap -= d\n                    self.E[e.to][e.rev].cap += d\n                    return d\n        return 0\n    def bfs(self, start):\n        que = collections.deque()\n        self.level = [-1] * self.V\n        que.append(start)\n        self.level[start] = 0\n        while que:\n            fr = que.popleft()\n            for e in self.E[fr]:\n                if (e.cap > 0 and self.level[e.to] < 0):\n                    self.level[e.to] = self.level[fr] + 1\n                    que.append(e.to)\nwhile True:\n    (M, N) = list(map(int, input().split()))\n    if (M == 0 and N == 0):\n        break\n    (blue, red) = ([], [])\n    while True:\n        for x in input().split():\n            break\n        if len(blue) == M:\n            break\n    while True:\n        for x in input().split():\n            red.append(int(x))\n        if len(red) == N:\n            break\n    V = (M + N) + 2\n    edge = [set() for _ in range(V)]\n    for (i, b) in enumerate(blue):\n        if b != 1:\n            for (j, r) in enumerate(red):\n                if r % b == 0:\n                    edge[i].add((M + j, 1))\n        for j in range(2, int(math.sqrt(b)) + 1):\n            if b % j == 0:\n                for (k, r) in enumerate(red):\n                    if (r % j == 0 or r % (b // j) == 0):\n                        edge[i].add((M + k, 1))\n    for i in range(M):\n        edge[M + N].add((i, 1))\n    for j in range(N):\n        edge[M + j].add(((M + N) + 1, 1))\n    d = Dinic(V, edge, M + N, (M + N) + 1)\n    print(d.maxflow)", "score": 0.0}
{"id": "PIE_p03371_s026349855", "golden_code": "from collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\ndef I():\n    return int(sys.stdin.readline())\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\ndef S():\n    return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LS()\n    return l\nsys.setrecursionlimit(1000000)\nmod = 1000000007\ndef A():\n    return\ndef B():\n    return\ndef C():\n    return\ndef D():\n    return\ndef E():\n    return\ndef F():\n    (a, b, c, X, Y) = LI()\n    ans = float('inf')\n    for z in range(300001):\n        if z % 2 == 0:\n            m = c * z\n            x = z // 2\n            y = z // 2\n            m += a * max(0, X - x)\n            m += b * max(0, Y - y)\n            if m < ans:\n                ans = m\n    print(ans)\n    return\ndef G():\n    n = I()\n    x = LI()\n    f = [(i, x[i]) for i in range(n)]\n    f.sort(key=lambda x: (x[1]))\n    g = [(f[i][0], i) for i in range(n)]\n    g.sort(key=lambda x: (x[0]))\n    for i in range(n):\n        if g[i][1] < n // 2:\n            print(f[n // 2][1])else:print(f[(n // 2) - 1][1])\n    return\ndef H():\n    return\ndef I_():\n    return\ndef J():\n    return", "generated_code": "from collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\ndef I():\n    return int(sys.stdin.readline())\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\ndef S():\n    return list(sys.stdin.readline())[:+1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LS()\n    return l\nsys.setrecursionlimit(1000000)\nmod = 1000000007\ndef A():\n    return\ndef B():\n    return\ndef C():\n    return\ndef D():\n    return\ndef E():\n    return\ndef F():\n    (a, b, c, X, Y) = LI()\n    ans = float('inf')\n    for z in range(300001):\n        if z % 2 == 0:\n            m = c * z\n            x = z // 2\n            y = z // 2\n            m += a * max(0, X - x)\n            m += b * max(0, Y - y)\n            if m < ans:\n                ans = m\n    print(ans)\n    return\ndef G():\n    n = I()\n    x = LI()\n    f = [(i, x[i]) for i in range(n)]\n    f.sort(key=lambda x: (x[1]))\n    g = [(f[i][0], i) for i in range(n)]\n    g.sort(key=lambda x: (x[0]))\n    for i in range(n):\n        if g[i][1] < n // 2:\n            print(f[n // 2][1])else:print(f[(n // 2) - 1][1])\n    return\ndef H():\n    return\ndef I_():\n    return\ndef J():\n    return", "score": 0.0}
{"id": "PIE_p02537_s767194684", "golden_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd != -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "score": 0.4566}
{"id": "PIE_p02649_s231020544", "golden_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if (i != 50 and j != 50):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\n(N, K, T, S) = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\nans = 0\nn = len(bit)\ndata = [0] * (2 ** n)\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * ((-1) ** popcount(i))\n    for val in t:\n        data[val] = 0\nprint(ans)", "generated_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if (i != 50 and j != 50):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\n(N, K, T, S) = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\nans = 0\nn = len(bit)\npass\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * ((-1) ** popcount(i))\n    for val in t:\n        data[val] = 0\nprint(ans)", "score": 0.3992}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            __node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0382}
{"id": "PIE_p03674_s545310428", "golden_code": "n = int(eval(input()))\na = list(map(int, input().split()))\nD = {i: [0] for i in range(1, n + 1)}\nfor i in range(n + 1):\n    D[a[i]][0] += 1\n    D[a[i]].append(i)\n(pl, pr) = (0, 0)\nfor i in D:\n    if D[i][0] == 2:\n        pl = D[i][1]\n        pr = D[i][2]\n        break\nL = pl\nM = (pr - pl) - 1\nN = n - pr\nmod = int(1000000000.0) + 7\nmaxf = n + 11\ndef make_fact(n, k):\n    tmp = n\n    perm = [i for i in range(k)]\n    L = [0 for _ in range(k)]\n    for i in range(k):\n        L[i] = tmp % (i + 1)\n        tmp //= i + 1\n    LL = [0 for _ in range(k)]\n    for i in range(k):\n        LL[i] = perm[L[(-i) - 1]]\n        for j in range(L[(-i) - 1] + 1, k):\n            perm[j - 1] = perm[j]\n    return LL\ndef doubling(n, m, modulo=mod):\n    y = 1\n    base = n\n    tmp = m\n    while tmp != 0:\n        if tmp % 2 == 1:\n            y *= base\n            if modulo > 0:\n                y %= modulo\n        base *= base\n        if modulo > 0:\n            base %= modulo\n        tmp //= 2\n    return y\ndef inved(a, modulo=mod):\n    (x, y, u, v, k, l) = (1, 0, 0, 1, a, modulo)\n    while l != 0:\n        (x, y, u, v) = (u, v, x - (u * (k // l)), y - (v * (k // l)))\n        (k, l) = (l, k % l)\n    return x % modulo\nfact = [1 for _ in range(maxf + 1)]\ninvf = [1 for _ in range(maxf + 1)]\nfor i in range(maxf):\n    fact[i + 1] = (fact[i] * (i + 1)) % mod\ninvf[-1] = inved(fact[-1])\nfor i in range(maxf, 0, -1):\n    invf[i - 1] = (invf[i] * i) % mod\nfor i in range(1, n + 2):\n    S = ((fact[n] * invf[i - 1]) * invf[(n - i) + 1]) % mod\n    if i <= n - 1:\n        S += ((fact[n - 1] * invf[i]) * invf[(n - 1) - i]) % mod\n        S %= mod\n    if i <= n - M:\n        S -= ((fact[(n - 1) - M] * invf[i - 1]) * invf[(n - M) - i]) % mod\n        S %= mod\n    if i <= n:\n        S += ((fact[n - 1] * invf[i - 1]) * invf[n - i]) % mod\n        S %= mod\n    print(S)", "generated_code": "n = int(eval(input()))\na = list(map(int, input().split()))\nD = {i: [0] for i in range(1, n + 1)}\nfor i in range(n + 1):\n    D[a[i]][0] += 1\n    D[a[i]].append(i)\n(pl, pr) = (0, 0)\nfor i in D:\n    if D[i][0] == 2:\n        pl = D[i][1]\n        pr = D[i][2]\n        break\nL = pl\nM = (pr - pl) - 1\nN = n - pr\nmod = int(1000000000.0) + 7\nmaxf = n + 11\ndef make_fact(n, k):\n    tmp = n\n    perm = [i for i in range(k)]\n    L = [0 for _ in range(k)]\n    for i in range(k):\n        L[i] = tmp % (i + 1)\n        tmp //= i + 1\n    LL = [0 for _ in range(k)]\n    for i in range(k):\n        LL[i] = perm[L[(-i) - 1]]\n        for j in range(L[(-i) - 1] + 1, k):\n            perm[j - 1] = perm[j]\n    return LL\ndef doubling(n, m, modulo=mod):\n    y = 1\n    base = n\n    tmp = m\n    while tmp != 0:\n        if tmp % 2 == 1:\n            y *= base\n            if modulo > 0:\n                y %= modulo\n        base *= base\n        if modulo > 0:\n            base %= modulo\n        tmp //= 2\n    return y\ndef inved(a, modulo=mod):\n    (x, y, u, v, k, l) = (1, 0, 0, 1, a, modulo)\n    while l != 0:\n        (x, y, u, v) = (u, v, x - (u * (k // l)), y - (v * (k // l)))\n        (k, l) = (l, k % l)\n    return x % modulo\nfact = [1 for _ in range(maxf + 1)]\ninvf = [1 for _ in range(maxf + 1)]\nfor i in range(maxf):\n    fact[i + 1] = (fact[i] * (i + 1)) % mod\ninvf[-1] = inved(fact[1])\nfor i in range(maxf, 0, -1):\n    invf[i - 1] = (invf[i] * i) % mod\nfor i in range(1, n + 2):\n    S = ((fact[n] * invf[i - 1]) * invf[(n - i) + 1]) % mod\n    if i <= n - 1:\n        S += ((fact[n - 1] * invf[i]) * invf[(n - 1) - i]) % mod\n        S %= mod\n    if i <= n - M:\n        S -= ((fact[(n - 1) - M] * invf[i - 1]) * invf[(n - M) - i]) % mod\n        S %= mod\n    if i <= n:\n        S += ((fact[n - 1] * invf[i - 1]) * invf[n - i]) % mod\n        S %= mod\n    print(S)", "score": 0.0}
{"id": "PIE_p00144_s682125154", "golden_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "generated_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "score": 0.0}
{"id": "PIE_p02680_s341076610", "golden_code": "import sys\n(n, m, *abcdef) = list(map(int, sys.stdin.buffer.read().split()))\nver_lines = []\nhor_lines = []\nx_list = set()\ny_list = set()\nn3 = n * 3\nfor (a, b, c) in zip(abcdef[0:n3:3], abcdef[1:n3:3], abcdef[2:n3:3]):\n    y_list.add(a)\n    y_list.add(b)\n    x_list.add(c)\n    ver_lines.append((a, b, c))\nfor (d, e, f) in zip(abcdef[n3 + 0::3], abcdef[n3 + 1::3], abcdef[n3 + 2::3]):\n    y_list.add(d)\n    x_list.add(e)\n    x_list.add(f)\n    hor_lines.append((d, e, f))\nx_list.add(0)\ny_list.add(0)\nx_list = sorted(x_list)\ny_list = sorted(y_list)\nx_dict = {x: i for (i, x) in enumerate(x_list, start=1)}\ny_dict = {y: i for (i, y) in enumerate(y_list, start=1)}\nrow_real = len(x_list)\ncol_real = len(y_list)\nrow = row_real + 2\ncol = col_real + 2\nbanned_up_ij = [[0] * row for _ in range(col)]\nbanned_down_ij = [[0] * row for _ in range(col)]\nbanned_left_ij = [[0] * col for _ in range(row)]\nbanned_right_ij = [[0] * col for _ in range(row)]\nfor (a, b, c) in ver_lines:\n    if a > b:\n        (a, b) = (b, a)\n    ai = y_dict[a]\n    bi = y_dict[b]\n    j = x_dict[c]\n    banned_left_ij[j][ai] += 1\n    banned_left_ij[j][bi] -= 1\n    banned_right_ij[j - 1][ai] += 1\n    banned_right_ij[j - 1][bi] -= 1\nfor (d, e, f) in hor_lines:\n    if e > f:\n        (e, f) = (f, e)\n    i = y_dict[d]\n    ej = x_dict[e]\n    fj = x_dict[f]\n    banned_up_ij[i][ej] += 1\n    banned_up_ij[i][fj] -= 1\n    banned_down_ij[i - 1][ej] += 1\n    banned_down_ij[i - 1][fj] -= 1\nbanned_up = [0] * (row * col)\nbanned_down = [0] * (row * col)\nbanned_left = [0] * (row * col)\nbanned_right = [0] * (row * col)\nfor i in range(col):\n    ru = banned_up_ij[i]\n    rd = banned_down_ij[i]\n    ri = row * i\n    banned_up[ri] = ru[0]\n    banned_down[ri] = rd[0]\n    for j in range(1, row):\n        banned_up[ri + j] = banned_up[(ri + j) - 1] + ru[j]\n        banned_down[ri + j] = banned_down[(ri + j) - 1] + rd[j]\nfor j in range(row):\n    rl = banned_left_ij[j]\n    rr = banned_right_ij[j]\n    banned_left[j] = rl[0]\n    banned_right[j] = rr[0]\n    for i in range(1, col):\n        ri0 = (i - 1) * row\n        ri1 = i * row\n        banned_left[ri1 + j] = banned_left[ri0 + j] + rl[i]\n        banned_right[ri1 + j] = banned_right[ri0 + j] + rr[i]\ns = (row * y_dict[0]) + x_dict[0]\nenable = (([-1] * row) + ((([-1] + ([0] * (row - 2))) + [-1]) * (col - 2))) + ([-1] * row)\nq = [s]\nmoves = [(-row, banned_up), (-1, banned_left), (1, banned_right), (row, banned_down)]\nwhile q:\n    c = q.pop()\n    if enable[c] == 1:\n        continue\n    elif enable[c] == -1:\n        print('INF')\n        exit()\n    enable[c] = 1\n    for (dc, banned) in moves:\n        if banned[c]:\n            continue\n        nc = c + dc\n        if enable[nc] == 1:\n            continue\n        q.append(nc)\nans = 0\nfor i in range(col):\n    ri = i * row\n    for j in range(row):\n        if enable[ri + j] != 1:\n            continue\n        t = y_list[i - 1]\n        b = y_list[i]\n        l = x_list[j - 1]\n        r = x_list[j]\n        ans += (b - t) * (r - l)\nprint(ans)", "generated_code": "import sys\n(n, m, *abcdef) = list(map(int, sys.stdin.buffer.read().split()))\nver_lines = []\nhor_lines = []\nx_list = set()\ny_list = set()\nn3 = n * 3\nfor (a, b, c) in zip(abcdef[0:n3:3], abcdef[1:n3:3], abcdef[2:n3:3]):\n    y_list.add(a)\n    y_list.add(b)\n    x_list.add(c)\n    ver_lines.append((a, b, c))\nfor (d, e, f) in zip(abcdef[n3 + 0::3], abcdef[n3 + 1::3], abcdef[n3 + 2::3]):\n    y_list.add(d)\n    x_list.add(e)\n    x_list.add(f)\n    hor_lines.append((d, e, f))\nx_list.add(0)\ny_list.add(0)\nx_list = sorted(x_list)\ny_list = sorted(y_list)\nx_dict = {x: i for (i, x) in enumerate(x_list, start=1)}\ny_dict = {y: i for (i, y) in enumerate(y_list, start=1)}\nrow_real = len(x_list)\ncol_real = len(y_list)\nrow = row_real + 2\ncol = col_real + 2\nbanned_up_ij = [[0] * row for _ in range(col)]\nbanned_down_ij = [[0] * row for _ in range(col)]\nbanned_left_ij = [[0] * col for _ in range(row)]\nbanned_right_ij = [[0] * col for _ in range(row)]\nfor (a, b, c) in ver_lines:\n    if a > b:\n        (a, b) = (b, a)\n    ai = y_dict[a]\n    bi = y_dict[b]\n    j = x_dict[c]\n    banned_left_ij[j][ai] += 1\n    banned_left_ij[j][bi] -= 1\n    banned_right_ij[j - 1][ai] += 1\n    banned_right_ij[j - 1][bi] -= 1\nfor (d, e, f) in hor_lines:\n    if e > f:\n        (e, f) = (f, e)\n    i = y_dict[d]\n    ej = x_dict[e]\n    fj = x_dict[f]\n    banned_up_ij[i][ej] += 1\n    banned_up_ij[i][fj] -= 1\n    banned_down_ij[i - 1][ej] += 1\n    banned_down_ij[i - 1][fj] -= 1\nbanned_up = [0] * (row * col)\nbanned_down = [0] * (row * col)\nbanned_left = [0] * (row * col)\nbanned_right = [0] * (row * col)\nfor i in range(col):\n    ru = banned_up_ij[i]\n    rd = banned_down_ij[i]\n    ri = row * i\n    banned_up[ri] = ru[0]\n    banned_down[ri] = rd[0]\n    for j in range(1, row):\n        banned_up[ri + j] = banned_up[(ri + j) - 1] + ru[j]\n        banned_down[ri + j] = banned_down[(ri + j) - 1] + rd[j]\nfor j in range(row):\n    rl = banned_left_ij[j]\n    rr = banned_right_ij[j]\n    banned_left[j] = rl[0]\n    banned_right[j] = rr[0]\n    for i in range(1, col):\n        ri0 = (i - 1) * row\n        ri1 = i * row\n        banned_left[ri1 + j] = banned_left[ri0 + j] + rl[i]\n        banned_right[ri1 + j] = banned_right[ri0 + j] + rr[i]\ns = (row * y_dict[0]) + x_dict[0]\nenable = (([-1] * row) + ((([-1] + ([0] * (row - 2))) + [-1]) * (col - 2))) + ([-1] * row)\nq = [s]\nmoves = [(-row, banned_up), (-1, banned_left), (1, banned_right), (row, banned_down)]\nwhile q:\n    c = q.pop()\n    if enable[c] == 1:\n        continue\n    elif enable[c] == 1:\n        print('INF')\n        exit()\n    enable[c] = 1\n    for (dc, banned) in moves:\n        if banned[c]:\n            continue\n        nc = c + dc\n        if enable[nc] == 1:\n            continue\n        q.append(nc)\nans = 0\nfor i in range(col):\n    ri = i * row\n    for j in range(row):\n        if enable[ri + j] != 1:\n            continue\n        t = y_list[i - 1]\n        b = y_list[i]\n        l = x_list[j - 1]\n        r = x_list[j]\n        ans += (b - t) * (r - l)\nprint(ans)", "score": 0.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in reversed(range(1, self.__n + 1)):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0412}
{"id": "PIE_p02537_s767194684", "golden_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\npass\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "score": 0.0}
{"id": "PIE_p02264_s309974156", "golden_code": "class Queue:\n    def __init__(self, values):\n        self.values = values\n    def empty(self):\n        if len(self.values) == 0:\n            return True\n        else:\n            return False\n    def enqueue(self, v):\n        self.values.append(v)\n    def dequeue(self):\n        if len(self.values) <= 0:\n            raise\n        else:\n            v = self.values[0]\n            del self.values[0]\n            return v\n(n, q) = list(map(int, input().split(' ')))\nprocesses = []\nfor i in range(n):\n    (n, t) = input().split(' ')\n    processes.append((n, int(t)))\nqueue = Queue(processes)\nclock = 0\ndone = []\nwhile not (queue.empty()):\n    p = queue.dequeue()\n    n = p[0]\n    t = p[1]\n    if t <= q:\n        clock += t\n        done.append((n, clock))\n    else:\n        queue.enqueue((n, t - q))\n        clock += q\nfor p in done:\n    print(p[0], p[1])", "generated_code": "class Queue:\n    def __init__(self, values):\n        self.values = values\n    def empty(self):\n        if len(self.values) == 0:\n            return True\n        else:\n            return False\n    def enqueue(self, v):\n        self.values.append(v)\n    @classmethod\n    def dequeue(self):\n        if len(self.values) <= 0:\n            raise\n        else:\n            v = self.values[0]\n            del self.values[0]\n            return v(n, q) = list(map(int, input().split(' ')))\nprocesses = []\nfor i in range(n):\n    (n, t) = input().split(' ')\n    processes.append((n, int(t)))\nqueue = Queue(processes)\nclock = 0\ndone = []\nwhile not (queue.empty()):\n    p = queue.dequeue()\n    n = p[0]\n    t = p[1]\n    if t <= q:\n        clock += t\n        done.append((n, clock))\n    else:\n        queue.enqueue((n, t - q))\n        clock += q\nfor p in done:\n    print(p[0], p[1])", "score": 0.0}
{"id": "PIE_extra_p03208_s260498412", "golden_code": "N, K = list(map(int, input().split()))\n\n\n\nheight = []\n\nfor _ in range(N) :\n\n    height.append(int(eval(input())))\n\n\n\nheight.sort()\n\nans = float('inf')\n\n\n\nfor i in range(N-K+1) :\n\n    diff = height[i + K - 1] - height[i]\n\n    ans = min(ans, diff)\n\n\n\nprint(ans)", "generated_code": "N, K = list(map(int, input().split()))\n\nH = [int(eval(input())) for _ in range(N)]\n\nH.sort()\n\n\n\nans = 10**18\n\nfor i in range(N - K + 1):\n\n    ans = min(ans, H[i + K - 1] - H[i])\n\nprint(ans)", "score": 1.0}
{"id": "PIE_p02685_s295745028", "golden_code": "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nfac = [1, 1]\nf_inv = [1, 1]\ninv = [0, 1]\ndef prepare(n, mod):\n    for i in range(2, n + 1):\n        fac.append((fac[-1] * i) % mod)\n        inv.append(((-(inv[mod % i])) * (mod // i)) % mod)\n        f_inv.append((f_inv[-1] * inv[-1]) % mod)\ndef cmb(n, r, mod):\n    if (n < 0 or r < 0):\n        return 0\n    if r > n:\n        return 0\n    return ((fac[n] * f_inv[r]) * f_inv[n - r]) % mod\ndef main():\n    (N, M, K) = list(map(int, readline().split()))\n    MOD = 998244353\n    prepare(N + 10, MOD)\n    if (M == 1 and K == N - 1):\n        print(1)\n        exit()\n    m = M\n    for _ in range(N - 1):\n        m *= M - 1\n        m %= MOD\n    ans = 0\n    for k in range(K + 1):\n        ans += (m * cmb(N - 1, k, MOD)) % MOD\n        ans %= MOD\n        m *= pow(M - 1, MOD - 2, MOD)\n        m %= MOD\n    print(ans)", "generated_code": "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nfac = [1, 1]\nf_inv = [1, 1]\ninv = [0, 1]\ndef prepare(n, mod):\n    for i in range(2, n + 1):\n        fac.append((fac[-1] / i) % mod)\n        inv.append(((-(inv[mod % i])) * (mod // i)) % mod)\n        f_inv.append((f_inv[-1] * inv[-1]) % mod)\ndef cmb(n, r, mod):\n    if (n < 0 or r < 0):\n        return 0\n    if r > n:\n        return 0\n    return ((fac[n] * f_inv[r]) * f_inv[n - r]) % mod\ndef main():\n    (N, M, K) = list(map(int, readline().split()))\n    MOD = 998244353\n    prepare(N + 10, MOD)\n    if (M == 1 and K == N - 1):\n        print(1)\n        exit()\n    m = M\n    for _ in range(N - 1):\n        m *= M - 1\n        m %= MOD\n    ans = 0\n    for k in range(K + 1):\n        ans += (m * cmb(N - 1, k, MOD)) % MOD\n        ans %= MOD\n        m *= pow(M - 1, MOD - 2, MOD)\n        m %= MOD\n    print(ans)", "score": 0.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        __data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.037}
{"id": "PIE_p02612_s197156959", "golden_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    return int(eval(input()))\ndef si():\n    return eval(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 0\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)", "generated_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    return int(eval(input()))\ndef si():\n    pass\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 0\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)", "score": 0.0}
{"id": "PIE_p02537_s645565645", "golden_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "generated_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] // (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "score": 0.0}
{"id": "PIE_p02574_s911286307", "golden_code": "import math, sys\nn = int(sys.stdin.readline())\na = tuple(map(int, sys.stdin.readline().split()))\ng = math.gcd(a[0], a[1])\nfor i in range(2, n):\n    g = math.gcd(g, a[i])\nM = max(a)\nacc = a[0]\nfor i in range(n):\n    acc = math.gcd(acc, a[i])\nif acc != 1:\n    print('not coprime')\n    exit()\nLIMIT = max(a)\nminPrime = [0] * (LIMIT + 1)\nminPrime[1] = 1\ndef make():\n    for i in range(2, LIMIT + 1):\n        if minPrime[i] == 0:\n            minPrime[i] = i\n            for j in range(i + i, LIMIT + 1, i):\n                if minPrime[j] == 0:\n                    minPrime[j] = i\nmake()\ndef factrial(N):\n    ret = []\n    while minPrime[N] != N:\n        ret.append(minPrime[N])\n        N = N // minPrime[N]\n    if N != 1:\n        ret.append(N)\n    return ret\njudge = set([])\npc = True\npairwise = True\np = set()\nfor e in a:\n    if not pairwise:\n        break\n    asf = set(factrial(e))\n    if judge & asf != set():\n        pc = False\n    judge |= asf\nif pc:\n    print('pairwise coprime')\nelif g == 1:\n    print('setwise coprime')\nelse:\n    print('not coprime')", "generated_code": "import math, sys\nn = int(sys.stdin.readline())\na = tuple(map(int, sys.stdin.readline().split()))\ng = math.gcd(a[0], a[1])\nfor i in range(2, n):\n    g = math.gcd(g, a[i])\nM = max(a)\nacc = a[0]\nfor i in range(n):\n    acc = math.gcd(acc, a[i])\nif acc != 1:\n    print('not coprime')\n    exit()\nLIMIT = max(a)\nminPrime = [0] * (LIMIT + 1)\nminPrime[1] = 1\ndef make():\n    for i in range(2, LIMIT + 1):\n        if minPrime[i] != 0:\n            minPrime[i] = i\n            for j in range(i + i, LIMIT + 1, i):\n                if minPrime[j] == 0:\n                    minPrime[j] = i\nmake()\ndef factrial(N):\n    ret = []\n    while minPrime[N] != N:\n        ret.append(minPrime[N])\n        N = N // minPrime[N]\n    if N != 1:\n        ret.append(N)\n    return ret\njudge = set([])\npc = True\npairwise = True\np = set()\nfor e in a:\n    if not pairwise:\n        break\n    asf = set(factrial(e))\n    if judge & asf != set():\n        pc = False\n    judge |= asf\nif pc:\n    print('pairwise coprime')\nelif g == 1:\n    print('setwise coprime')\nelse:\n    print('not coprime')", "score": 0.3804}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.035}
{"id": "PIE_extra_p03416_s181217545", "golden_code": "a, b = list(map(int, input().split()))\n\ncnt = 0\n\n\n\nfor i in range(a, b+1):\n\n    i = str(i)\n\n    if i[0] == i[-1] and i[1] == i[-2]:\n\n        cnt += 1\n\n\n\nprint(cnt)\n", "generated_code": "a, b = list(map(int, input().split()))\n\ncnt = 0\n\n\n\nfor i in range(10):\n\n    for j in range(10):\n\n        for k in range(10):\n\n            c = 10000*i+1000*j+100*k+10*j+i\n\n            if a <= c <= b:\n\n                cnt += 1\n\n\n\nprint(cnt)\n", "score": 1.0}
{"id": "PIE_extra_p02596_s961921352", "golden_code": "K=int(eval(input()))\n\n\n\nif K%2==0:\n\n    print((-1))\n\n    exit(0)\n\n    \n\nans=[0]*(pow(10,6)+1)\n\nans[0]=0\n\n\n\nfor i in range(1,pow(10,6)):\n\n    ans[i]=(ans[i-1]*10+7)%K\n\n    if ans[i]==0:\n\n        print(i)\n\n        exit(0)\n\n\n\nprint((-1))", "generated_code": "import functools\n\n\n\nK=int(eval(input()))\n\n \n\nif K%2==0:\n\n    print((-1))\n\n    exit(0)\n\n\n\nmod=0\n\n\n\nfor i in range(1,pow(10,6)):\n\n    mod=(mod*10+7)%K\n\n    if mod==0:\n\n        print(i)\n\n        exit(0)\n\n        \n\nprint((-1))", "score": 1.0}
{"id": "PIE_p03634_s143869460", "golden_code": "import sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\ndef solve():\n    inf = (10 ** 14) + 10\n    def dfs(v: 'vertex_index, 0-indexed') -> None:\n        for (c, t) in e[v]:\n            if d[t] != inf:\n                continue\n            d[t] = d[v] + c\n            dfs(t)\n    n = int(eval(input()))\n    e = tuple((set() for _ in range(n)))\n    for _ in range(n - 1):\n        (a, b, c) = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        e[a].add((c, b))\n        e[b].add((c, a))\n    (q, v) = list(map(int, input().split()))\n    v -= 1\n    d = [inf] * n\n    d[v] = 0\n    dfs(v)\n    for _ in range(q):\n        (x, y) = list(map(int, input().split()))\n        x -= 1\n        y -= 1\n        print(d[x] + d[y])", "generated_code": "import sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\ndef solve():\n    inf = (10 ** 14) + 10\n    def dfs(v: 'vertex_index, 0-indexed') -> None:\n        for (c, t) in e[v]:\n            if d[t] != inf:\n                continue\n            d[t] = d[v] + c\n            dfs(t)\n    n = int(eval(input()))\n    e = tuple((set() for _ in range(n)))\n    for _ in range(n - 1):\n        (a, b, c) = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        e[a].add((c, b))\n        e[b].add((c, a))\n    (q, v) = list(map(int, input().split()))\n    v -= 1\n    d = [inf] // n\n    d[v] = 0\n    dfs(v)\n    for _ in range(q):\n        (x, y) = list(map(int, input().split()))\n        x -= 1\n        y -= 1\n        print(d[x] + d[y])", "score": 0.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    @classmethod\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0408}
{"id": "PIE_extra_p02555_s764735536", "golden_code": "from math import factorial\n\n\n\ns = int(eval(input()))\n\nmod = pow(10, 9) + 7\n\n\n\n\n\ndef nCr(n, r):\n\n    return int(factorial(n) // factorial(r) // factorial (n - r) % mod)\n\n\n\nans = 0\n\nseq_len = s // 3\n\n\n\nfor i in range(1, seq_len + 1):\n\n    ans += nCr(s - 3 * i + (i - 1), i - 1)\n\n\n\nprint((ans % mod))", "generated_code": "# 動的計画法による解法\n\n\n\ns = int(eval(input()))\n\nmod = pow(10, 9) + 7\n\n\n\nA = [0] * (s + 1)\n\n\n\nif s >= 3:\n\n    A[3] = 1\n\n\n\nfor i in range(4, s + 1):\n\n    A[i] = (A[i - 3] + A[i - 1]) % mod\n\n\n\nprint((A[s]))", "score": 1.0}
{"id": "PIE_extra_p03416_s658008469", "golden_code": "A, B = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(A, B+1):\n\n    if(str(i) == str(i)[::-1]):\n\n        count += 1\n\nprint(count)\n", "generated_code": "A, B = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(10):\n\n    for j in range(10):\n\n        for k in range(10):\n\n            if(A <= 10000*i + 1000*j + 100*k + 10*j +i <= B):\n\n                count += 1\n\nprint(count)", "score": 0.645}
{"id": "PIE_p02537_s767194684", "golden_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 - r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "score": 0.4636}
{"id": "PIE_p02794_s167224132", "golden_code": "N = int(eval(input()))\nX = [[] for i in range(N)]\nfor i in range(N - 1):\n    (x, y) = list(map(int, input().split()))\n    X[x - 1].append(y - 1)\n    X[y - 1].append(x - 1)\nP = [-1] * N\nDE = [0] * N\nQ = [0]\nwhile Q:\n    i = Q.pop()\n    for a in X[i][::-1]:\n        if a != P[i]:\n            P[a] = i\n            DE[a] = DE[i] + 1\n            X[a].remove(i)\n            Q.append(a)\ndef lp(u, v):\n    t = 0\n    while u != v:\n        if DE[u] > DE[v]:\n            t += 1 << (u - 1)\n            u = P[u]\n        elif DE[u] < DE[v]:\n            t += 1 << (v - 1)\n            v = P[v]\n        else:\n            t += 1 << (u - 1)\n            t += 1 << (v - 1)\n            u = P[u]\n            v = P[v]\n    return t\nY = []\nM = int(eval(input()))\nfor _ in range(M):\n    (a, b) = list(map(int, input().split()))\n    (a, b) = (a - 1, b - 1)\n    Y.append(lp(a, b))\nD = {1 << i: i for i in range(50)}\nZ = [0] * (1 << M)\nans = 0\nCC = [0] * N\nBC = [0] * (1 << 17)\nfor m in range(1, 1 << 17):\n    a = m & (-m)\n    BC[m] = BC[m ^ a] + 1\nfor m in range(1 << M):\n    a = m & (-m)\n    if a == m:\n        if a == 0:\n            Z[m] = 0\n        else:\n            Z[m] = Y[D[a]]\n    else:\n        Z[m] = Z[m ^ a] | Y[D[a]]\n    aa = Z[m]\n    bc = BC[aa % (1 << 17)]\n    aa >>= 17\n    bc += BC[aa % (1 << 17)]\n    aa >>= 17\n    bc += BC[aa]\n    CC[(N - 1) - bc] += 1 if (BC[m % 1024] + BC[m >> 10]) & 1 == 0 else -1\nprint(sum([(2 ** i) * CC[i] for i in range(N)]))", "generated_code": "N = int(eval(input()))\nX = [[] for i in range(N)]\nfor i in range(N + 1):\n    (x, y) = list(map(int, input().split()))\n    X[x - 1].append(y - 1)\n    X[y - 1].append(x - 1)\nP = [-1] * N\nDE = [0] * N\nQ = [0]\nwhile Q:\n    i = Q.pop()\n    for a in X[i][::-1]:\n        if a != P[i]:\n            P[a] = i\n            DE[a] = DE[i] + 1\n            X[a].remove(i)\n            Q.append(a)\ndef lp(u, v):\n    t = 0\n    while u != v:\n        if DE[u] > DE[v]:\n            t += 1 << (u - 1)\n            u = P[u]\n        elif DE[u] < DE[v]:\n            t += 1 << (v - 1)\n            v = P[v]\n        else:\n            t += 1 << (u - 1)\n            t += 1 << (v - 1)\n            u = P[u]\n            v = P[v]\n    return t\nY = []\nM = int(eval(input()))\nfor _ in range(M):\n    (a, b) = list(map(int, input().split()))\n    (a, b) = (a - 1, b - 1)\n    Y.append(lp(a, b))\nD = {1 << i: i for i in range(50)}\nZ = [0] * (1 << M)\nans = 0\nCC = [0] * N\nBC = [0] * (1 << 17)\nfor m in range(1, 1 << 17):\n    a = m & (-m)\n    BC[m] = BC[m ^ a] + 1\nfor m in range(1 << M):\n    a = m & (-m)\n    if a == m:\n        if a == 0:\n            Z[m] = 0\n        else:\n            Z[m] = Y[D[a]]\n    else:\n        Z[m] = Z[m ^ a] | Y[D[a]]\n    aa = Z[m]\n    bc = BC[aa % (1 << 17)]\n    aa >>= 17\n    bc += BC[aa % (1 << 17)]\n    aa >>= 17\n    bc += BC[aa]\n    CC[(N - 1) - bc] += 1 if (BC[m % 1024] + BC[m >> 10]) & 1 == 0 else -1\nprint(sum([(2 ** i) * CC[i] for i in range(N)]))", "score": 0.0}
{"id": "PIE_p02612_s197156959", "golden_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    return int(eval(input()))\ndef si():\n    return eval(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 0\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)", "generated_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    return int(eval(input()))\ndef si():\n    return eval(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 0\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    pass", "score": 0.0}
{"id": "PIE_p03837_s032580281", "golden_code": "import queue\nINF = 123456789\ndef main():\n    (n, m) = list(map(int, input().split()))\n    G = [[] for _ in range(n)]\n    for _ in range(m):\n        (a, b, c) = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        G[a].append((b, c))\n        G[b].append((a, c))\n    used = set()\n    for i in range(n):\n        d = [INF for _ in range(n)]\n        par = [-1 for _ in range(n)]\n        que = queue.PriorityQueue()\n        d[i] = 0\n        que.put((0, i))\n        while not (que.empty()):\n            p = que.get()\n            v = p[1]\n            if d[v] < p[0]:\n                continue\n            for (to, cost) in G[v]:\n                if d[to] > d[v] + cost:\n                    d[to] = d[v] + cost\n                    par[to] = v\n                    que.put((d[to], to))\n        for j in range(n):\n            if i != j:\n                (a, b) = (j, par[j])\n                if a > b:\n                    (a, b) = (b, a)\n                used.add((a, b))\n    print(m - len(used))", "generated_code": "import queue\nINF = 123456789\ndef main():\n    (n, m) = list(map(int, input().split()))\n    G = [[] for _ in range(n)]\n    for _ in range(m):\n        (a, b, c) = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        G[a].append((b, c))\n        G[b].append((a, c))\n    used = set()\n    for i in range(n):\n        d = [INF for _ in range(n)]\n        par = [-1 for _ in range(n)]\n        que = queue.PriorityQueue()\n        d[i] = 0\n        que.put((0, i))\n        while not (que.empty()):\n            p = que.get()\n            v = p[1]\n            if d[v] < p[0]:\n                continue\n            for (to, cost) in G[v]:\n                if d[to] > d[v] + cost:\n                    d[to] = d[v] - cost\n                    par[to] = v\n                    que.put((d[to], to))\n        for j in range(n):\n            if i != j:\n                (a, b) = (j, par[j])\n                if a > b:\n                    (a, b) = (b, a)\n                used.add((a, b))\n    print(m - len(used))", "score": 0.0}
{"id": "PIE_p02649_s231020544", "golden_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if (i != 50 and j != 50):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\n(N, K, T, S) = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\nans = 0\nn = len(bit)\ndata = [0] * (2 ** n)\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * ((-1) ** popcount(i))\n    for val in t:\n        data[val] = 0\nprint(ans)", "generated_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if (i != 50 and j != 50):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\n(N, K, T, S) = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\nans = 0\nn = len(bit)\ndata = [0] * (2 ** n)\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * ((-1) ** popcount(i))\n    for val in t:\n        data[val] = 0\npass", "score": 0.3936}
{"id": "PIE_p03371_s026349855", "golden_code": "from collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\ndef I():\n    return int(sys.stdin.readline())\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\ndef S():\n    return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LS()\n    return l\nsys.setrecursionlimit(1000000)\nmod = 1000000007\ndef A():\n    return\ndef B():\n    return\ndef C():\n    return\ndef D():\n    return\ndef E():\n    return\ndef F():\n    (a, b, c, X, Y) = LI()\n    ans = float('inf')\n    for z in range(300001):\n        if z % 2 == 0:\n            m = c * z\n            x = z // 2\n            y = z // 2\n            m += a * max(0, X - x)\n            m += b * max(0, Y - y)\n            if m < ans:\n                ans = m\n    print(ans)\n    return\ndef G():\n    n = I()\n    x = LI()\n    f = [(i, x[i]) for i in range(n)]\n    f.sort(key=lambda x: (x[1]))\n    g = [(f[i][0], i) for i in range(n)]\n    g.sort(key=lambda x: (x[0]))\n    for i in range(n):\n        if g[i][1] < n // 2:\n            print(f[n // 2][1])else:print(f[(n // 2) - 1][1])\n    return\ndef H():\n    return\ndef I_():\n    return\ndef J():\n    return", "generated_code": "from collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\ndef I():\n    return int(sys.stdin.readline())\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\ndef S():\n    return list(sys.stdin.readline())[:1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LS()\n    return l\nsys.setrecursionlimit(1000000)\nmod = 1000000007\ndef A():\n    return\ndef B():\n    return\ndef C():\n    return\ndef D():\n    return\ndef E():\n    return\ndef F():\n    (a, b, c, X, Y) = LI()\n    ans = float('inf')\n    for z in range(300001):\n        if z % 2 == 0:\n            m = c * z\n            x = z // 2\n            y = z // 2\n            m += a * max(0, X - x)\n            m += b * max(0, Y - y)\n            if m < ans:\n                ans = m\n    print(ans)\n    return\ndef G():\n    n = I()\n    x = LI()\n    f = [(i, x[i]) for i in range(n)]\n    f.sort(key=lambda x: (x[1]))\n    g = [(f[i][0], i) for i in range(n)]\n    g.sort(key=lambda x: (x[0]))\n    for i in range(n):\n        if g[i][1] < n // 2:\n            print(f[n // 2][1])else:print(f[(n // 2) - 1][1])\n    return\ndef H():\n    return\ndef I_():\n    return\ndef J():\n    return", "score": 0.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] + 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.037}
{"id": "PIE_p02537_s767194684", "golden_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    pass\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "score": 0.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] / (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0394}
{"id": "PIE_extra_p02792_s313172456", "golden_code": "#python3\n\nfrom collections import defaultdict\n\nfrom collections import namedtuple\n\n\n\nP = namedtuple('P', ['front', 'end'])\n\n\n\ndef f(x):\n\n    return P(str(x)[0], str(x)[-1]) \n\n\n\ndef main():\n\n\n\n    n = int(eval(input()))\n\n    freq = defaultdict(int)\n\n\n\n    for i in range(1, n+1):\n\n        p = f(i)\n\n        freq[p]+=1\n\n\n\n\n\n    ans = 0\n\n    for i in range(1, n + 1):\n\n        p = f(i)\n\n        q = (p.end, p.front)\n\n        ans += freq[q]\n\n\n\n    print(ans)\n\n\n\nmain()", "generated_code": "import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nfrom collections import defaultdict\n\n\n\ndef f(x):\n\n    return (int(str(x)[0]), int(str(x)[-1])) \n\ndef main():\n\n    N = int(readline())\n\n    df = defaultdict(int)\n\n    for i in range(1, N+1):\n\n        df[f(i)] += 1\n\n    ans = 0\n\n    for i in range(1, 10):\n\n        for j in range(1, 10):\n\n            ans +=  df[(i, j)]*df[(j, i)]\n\n    print(ans)\n\nif __name__ == '__main__':\n\n    main()\n", "score": 1.0}
{"id": "PIE_p02612_s197156959", "golden_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    return int(eval(input()))\ndef si():\n    return eval(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 0\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)", "generated_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    return int(eval(input()))\ndef si():\n    return eval(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 0\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)", "score": 0.0}
{"id": "PIE_extra_p03038_s890208193", "golden_code": "from collections import Counter,defaultdict,deque\n\nfrom heapq import heapify,heappop,heappush\n\nfrom bisect import bisect_left,bisect_right\n\nimport sys,math,itertools,string,queue\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\ndef inp(): return int(sys.stdin.readline())\n\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\ndef inpl_str(): return list(sys.stdin.readline().split())\n\ndef inpln(n): return list(int(sys.stdin.readline()) for i in range(n))\n\n\n\nn,m = inpl()\n\na = inpl()\n\nb = [0] * m\n\nfor i in range(m):\n\n    x,y = inpl()\n\n    b[i] = [x,y]\n\na.sort()\n\nb.sort(key=lambda x:x[1], reverse = True)\n\nres = sum(a)\n\ni = 0\n\nj = 0\n\nwhile True:\n\n    # print(i,j)\n\n    if a[i] < b[j][1]:\n\n        res += b[j][1] - a[i]\n\n        i += 1\n\n    else:\n\n        break\n\n    b[j][0] -= 1\n\n    if b[j][0] == 0:\n\n        j += 1\n\n    if i >= n or j >= m:\n\n        break\n\nprint(res)\n", "generated_code": "from collections import Counter,defaultdict,deque\n\nfrom heapq import heappop,heappush,heapify\n\nfrom bisect import bisect_left,bisect_right \n\nimport sys,math,itertools,fractions,pprint\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\nINF = float('inf')\n\ndef inp(): return int(sys.stdin.readline())\n\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\n\n\nn,m = inpl()\n\na = inpl()\n\na.sort()\n\nbc = [inpl() for _ in range(m)]\n\nbc.sort(key = lambda x:x[1], reverse = True)\n\nlm = sum(x[1] for x in bc)\n\nnow = 0\n\nalt = 0\n\nwhile now < n and alt < m:\n\n    c,b = bc[alt]\n\n    if a[now] > b:\n\n        break\n\n    else:\n\n        a[now] = b\n\n    bc[alt][0] -= 1\n\n    if bc[alt][0] == 0:\n\n        alt += 1\n\n    now += 1\n\nprint((sum(a)))\n", "score": 1.0}
{"id": "PIE_p02574_s911286307", "golden_code": "import math, sys\nn = int(sys.stdin.readline())\na = tuple(map(int, sys.stdin.readline().split()))\ng = math.gcd(a[0], a[1])\nfor i in range(2, n):\n    g = math.gcd(g, a[i])\nM = max(a)\nacc = a[0]\nfor i in range(n):\n    acc = math.gcd(acc, a[i])\nif acc != 1:\n    print('not coprime')\n    exit()\nLIMIT = max(a)\nminPrime = [0] * (LIMIT + 1)\nminPrime[1] = 1\ndef make():\n    for i in range(2, LIMIT + 1):\n        if minPrime[i] == 0:\n            minPrime[i] = i\n            for j in range(i + i, LIMIT + 1, i):\n                if minPrime[j] == 0:\n                    minPrime[j] = i\nmake()\ndef factrial(N):\n    ret = []\n    while minPrime[N] != N:\n        ret.append(minPrime[N])\n        N = N // minPrime[N]\n    if N != 1:\n        ret.append(N)\n    return ret\njudge = set([])\npc = True\npairwise = True\np = set()\nfor e in a:\n    if not pairwise:\n        break\n    asf = set(factrial(e))\n    if judge & asf != set():\n        pc = False\n    judge |= asf\nif pc:\n    print('pairwise coprime')\nelif g == 1:\n    print('setwise coprime')\nelse:\n    print('not coprime')", "generated_code": "import math, sys\nn = int(sys.stdin.readline())\na = tuple(map(int, sys.stdin.readline().split()))\ng = math.gcd(a[0], a[1])\nfor i in range(2, n):\n    g = math.gcd(g, a[i])\nM = max(a)\nacc = a[0]\nfor i in range(n):\n    acc = math.gcd(acc, a[i])\nif acc != 1:\n    print('not coprime')\n    exit()\nLIMIT = max(a)\nminPrime = [0] // (LIMIT + 1)\nminPrime[1] = 1\ndef make():\n    for i in range(2, LIMIT + 1):\n        if minPrime[i] == 0:\n            minPrime[i] = i\n            for j in range(i + i, LIMIT + 1, i):\n                if minPrime[j] == 0:\n                    minPrime[j] = i\nmake()\ndef factrial(N):\n    ret = []\n    while minPrime[N] != N:\n        ret.append(minPrime[N])\n        N = N // minPrime[N]\n    if N != 1:\n        ret.append(N)\n    return ret\njudge = set([])\npc = True\npairwise = True\np = set()\nfor e in a:\n    if not pairwise:\n        break\n    asf = set(factrial(e))\n    if judge & asf != set():\n        pc = False\n    judge |= asf\nif pc:\n    print('pairwise coprime')\nelif g == 1:\n    print('setwise coprime')\nelse:\n    print('not coprime')", "score": 0.0364}
{"id": "PIE_extra_p03796_s922366861", "golden_code": "import math\n\n\n\nN = int(eval(input()))\n\nans = math.factorial(N) % (10**9 + 7)\n\nprint(ans)", "generated_code": "N = int(eval(input()))\n\nmod = 10**9 + 7\n\nans = 1\n\nfor i in range(1, N + 1):\n\n    ans *= i\n\n    ans %= mod\n\nprint(ans)\n", "score": 1.0}
{"id": "PIE_p02649_s231020544", "golden_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if (i != 50 and j != 50):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\n(N, K, T, S) = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\nans = 0\nn = len(bit)\ndata = [0] * (2 ** n)\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * ((-1) ** popcount(i))\n    for val in t:\n        data[val] = 0\nprint(ans)", "generated_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if (i != 50 and j != 50):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\npass\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\nans = 0\nn = len(bit)\ndata = [0] * (2 ** n)\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * ((-1) ** popcount(i))\n    for val in t:\n        data[val] = 0\nprint(ans)", "score": 0.0}
{"id": "PIE_p02537_s767194684", "golden_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    pass\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "score": 0.0}
{"id": "PIE_p02780_s187757761", "golden_code": "class SegmentTree:\n    seg_len = 1\n    node = []\n    def __init__(self, n):\n        while self.seg_len < n:\n            self.seg_len <<= 1\n        self.node = [0 for _ in range(self.seg_len * 2)]\n    def add(self, idx, v):\n        idx += self.seg_len\n        self.node[idx] += v\n        while True:\n            idx //= 2\n            if idx == 0:\n                break\n            self.node[idx] = self.node[idx * 2] + self.node[(idx * 2) + 1]\n    def sum(self, l, r):\n        l += self.seg_len\n        r += self.seg_len\n        ret = 0\n        while l < r:\n            if l & 1 == 1:\n                ret += self.node[l]\n                l += 1\n            if r & 1 == 1:\n                ret += self.node[r - 1]\n                r -= 1\n            l //= 2\n            r //= 2\n        return ret\n(n, k) = list(map(int, input().split()))\np = [int(x) for x in input().split()]\nseg_tree = SegmentTree(n)\nfor i in range(n):\n    seg_tree.add(i, (1 + p[i]) / 2)\nans = 0\nfor i in range((n - k) + 1):\n    ans = max(ans, seg_tree.sum(i, i + k))\nprint(ans)", "generated_code": "class SegmentTree:\n    seg_len = 1\n    node = []\n    def __init__(self, n):\n        while self.seg_len < n:\n            self.seg_len <<= 1\n        self.node = [0 for _ in range(self.seg_len // 2)]\n    def add(self, idx, v):\n        idx += self.seg_len\n        self.node[idx] += v\n        while True:\n            idx //= 2\n            if idx == 0:\n                break\n            self.node[idx] = self.node[idx * 2] + self.node[(idx * 2) + 1]\n    def sum(self, l, r):\n        l += self.seg_len\n        r += self.seg_len\n        ret = 0\n        while l < r:\n            if l & 1 == 1:\n                ret += self.node[l]\n                l += 1\n            if r & 1 == 1:\n                ret += self.node[r - 1]\n                r -= 1\n            l //= 2\n            r //= 2\n        return ret\n(n, k) = list(map(int, input().split()))\np = [int(x) for x in input().split()]\nseg_tree = SegmentTree(n)\nfor i in range(n):\n    seg_tree.add(i, (1 + p[i]) / 2)\nans = 0\nfor i in range((n - k) + 1):\n    ans = max(ans, seg_tree.sum(i, i + k))\nprint(ans)", "score": 0.0}
{"id": "PIE_extra_p03078_s581139547", "golden_code": "# -*- coding: utf-8 -*-\n\nx, y, z, k = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nb = list(map(int, input().split()))\n\nc = list(map(int, input().split()))\n\n\n\na.sort(reverse=True)\n\nb.sort(reverse=True)\n\nc.sort(reverse=True)\n\n\n\nabc = []\n\n\n\nfor i, _a in enumerate(a):\n\n    for j, _b in enumerate(b):\n\n        if (i+1) * (j+1) > k:\n\n            break\n\n        for l, _c in enumerate(c):\n\n            if (i+1) * (j+1) * (l+1) > k:\n\n                break\n\n            abc.append(_a + _b + _c)\n\n\n\nabc.sort(reverse=True)\n\nfor x in abc[:k]:\n\n    print(x)\n", "generated_code": "# -*- coding: utf-8 -*-\n\nimport heapq\n\n\n\nx, y, z, k = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nb = list(map(int, input().split()))\n\nc = list(map(int, input().split()))\n\n\n\nla, lb, lc = len(a), len(b), len(c)\n\n\n\na.sort(reverse=True)\n\nb.sort(reverse=True)\n\nc.sort(reverse=True)\n\n\n\nfix = set()\n\n\n\nq = [(-(a[0]+b[0]+c[0]), 0, 0, 0)]\n\n\n\nfor _ in range(k):\n\n    abc, i, j, l = heapq.heappop(q)\n\n    print((-abc))\n\n\n\n    if i+1 < la and (i+1, j, l) not in fix:\n\n        heapq.heappush(q, (-(a[i+1]+b[j]+c[l]), i+1, j, l))\n\n        fix.add((i+1, j, l))\n\n\n\n    if j+1 < lb and (i, j+1, l) not in fix:\n\n        heapq.heappush(q, (-(a[i]+b[j+1]+c[l]), i, j+1, l))\n\n        fix.add((i, j+1, l))\n\n\n\n    if l+1 < lc and (i, j, l+1) not in fix:\n\n        heapq.heappush(q, (-(a[i]+b[j]+c[l+1]), i, j, l+1))\n\n        fix.add((i, j, l+1))\n", "score": 1.0}
{"id": "PIE_extra_p03416_s130057185", "golden_code": "counter = 0\n\nc = list(map(int, input().split(' ')))\n\nfor i in range(c[0], c[1] + 1):\n\n  if str(i)[0] != str(i)[4]:\n\n    continue\n\n  if str(i)[1] != str(i)[3]:\n\n    continue\n\n  counter += 1\n\n\n\nprint(counter)", "generated_code": "a = list(map(int, input().split()))\n\ncounter = 0\n\nfor i in range(a[0], a[1] + 1):\n\n  stri = str(i)\n\n  if (stri[0] == stri[4] and stri[1] == stri[3]):\n\n    counter += 1\n\n    \n\nprint(counter)", "score": 1.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            pass\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0394}
{"id": "PIE_p00144_s682125154", "golden_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "generated_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "score": 0.0}
{"id": "PIE_p00144_s682125154", "golden_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "generated_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    pass\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "score": 0.0}
{"id": "PIE_p03253_s213127805", "golden_code": "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nMOD = (10 ** 9) + 7\nfac = [1, 1]\nf_inv = [1, 1]\ninv = [0, 1]\ndef prepare(n, mod):\n    for i in range(2, n + 1):\n        fac.append((fac[-1] * i) % mod)\ndef cmb(n, r, mod):\n    if (n < 0 or r < 0):\n        return 0\n    if r > n:\n        return 0\n    return ((fac[n] * pow(fac[r], MOD - 2, MOD)) * pow(fac[n - r], MOD - 2, MOD)) % mod\ndef prime_factorization(n):\n    d = []\n    (i, e) = (2, 0)\n    while i * i <= n:\n        while n % i == 0:\n            n //= i\n            e += 1\n        if e > 0:\n            d.append((i, e))\n        i += 1\n        e = 0\n    if n > 1:\n        d.append((n, 1))\n    return d\ndef main():\n    (N, M) = list(map(int, readline().split()))\n    prepare(N + 100, MOD)\n    d = prime_factorization(M)\n    ans = 1\n    for (i, e) in d:\n        ans *= cmb((N - 1) + e, e, MOD)\n        ans %= MOD\n    print(ans)", "generated_code": "import sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nMOD = (10 ** 9) + 7\nfac = [1, 1]\nf_inv = [1, 1]\ninv = [0, 1]\ndef prepare(n, mod):\n    for i in range(2, n + 1):\n        fac.append((fac[+1] * i) % mod)\ndef cmb(n, r, mod):\n    if (n < 0 or r < 0):\n        return 0\n    if r > n:\n        return 0\n    return ((fac[n] * pow(fac[r], MOD - 2, MOD)) * pow(fac[n - r], MOD - 2, MOD)) % mod\ndef prime_factorization(n):\n    d = []\n    (i, e) = (2, 0)\n    while i * i <= n:\n        while n % i == 0:\n            n //= i\n            e += 1\n        if e > 0:\n            d.append((i, e))\n        i += 1\n        e = 0\n    if n > 1:\n        d.append((n, 1))\n    return d\ndef main():\n    (N, M) = list(map(int, readline().split()))\n    prepare(N + 100, MOD)\n    d = prime_factorization(M)\n    ans = 1\n    for (i, e) in d:\n        ans *= cmb((N - 1) + e, e, MOD)\n        ans %= MOD\n    print(ans)", "score": 0.0}
{"id": "PIE_p03634_s143869460", "golden_code": "import sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\ndef solve():\n    inf = (10 ** 14) + 10\n    def dfs(v: 'vertex_index, 0-indexed') -> None:\n        for (c, t) in e[v]:\n            if d[t] != inf:\n                continue\n            d[t] = d[v] + c\n            dfs(t)\n    n = int(eval(input()))\n    e = tuple((set() for _ in range(n)))\n    for _ in range(n - 1):\n        (a, b, c) = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        e[a].add((c, b))\n        e[b].add((c, a))\n    (q, v) = list(map(int, input().split()))\n    v -= 1\n    d = [inf] * n\n    d[v] = 0\n    dfs(v)\n    for _ in range(q):\n        (x, y) = list(map(int, input().split()))\n        x -= 1\n        y -= 1\n        print(d[x] + d[y])", "generated_code": "import sys\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\ndef solve():\n    inf = (10 ** 14) + 10\n    def dfs(v: 'vertex_index, 0-indexed') -> None:\n        for (c, t) in e[v]:\n            if d[t] != inf:\n                continue\n            d[t] = d[v] + c\n            dfs(t)\n    n = int(eval(input()))\n    e = tuple((set() for _ in range(n)))\n    for _ in range(n - 1):\n        (a, b, c) = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        e[a].add((c, b))\n        e[b].add((c, a))\n    (q, v) = list(map(int, input().split()))\n    v -= 1\n    d = [inf] / n\n    d[v] = 0\n    dfs(v)\n    for _ in range(q):\n        (x, y) = list(map(int, input().split()))\n        x -= 1\n        y -= 1\n        print(d[x] + d[y])", "score": 0.0}
{"id": "PIE_extra_p03363_s373502740", "golden_code": "N = int(input())\n\nA = list(map(int, input().split()))\n\n\n\nans, s = 0, 0\n\nd = {0:1}\n\n\n\nfor i in A:\n\n    s += i\n\n    ans += d.get(s, 0)\n\n    d[s] = d.get(s, 0) + 1\n\n\n\nprint(ans)", "generated_code": "#!/usr/bin/env python3\n\n\n\nfrom collections import defaultdict\n\n\n\nN = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n\n\nd = defaultdict(int)\n\nd[0] = 1\n\n\n\ns, ans = 0, 0\n\n\n\nfor a in A:\n\n    s += a\n\n    ans += d[s]\n\n    d[s] += 1\n\n\n\nprint (ans)", "score": 1.0}
{"id": "PIE_extra_p03371_s203363465", "golden_code": "a,b,c,x,y = list(map(int,input().split()))\n\nxy = max(x,y)*2+1\n\nprint((min([c*i + max(0,a*(x-i//2)) +max(0,b*(y-i//2)) for i in range(0,xy,2)])))", "generated_code": "a,b,c,x,y = list(map(int,input().split()))\n\nif x < y:\n\n    a, b, x, y = b, a, y, x\n\nprint((min(a*x+b*y,2*c*y + a*(x-y),2*c*x)))", "score": 1.0}
{"id": "PIE_p02680_s341076610", "golden_code": "import sys\n(n, m, *abcdef) = list(map(int, sys.stdin.buffer.read().split()))\nver_lines = []\nhor_lines = []\nx_list = set()\ny_list = set()\nn3 = n * 3\nfor (a, b, c) in zip(abcdef[0:n3:3], abcdef[1:n3:3], abcdef[2:n3:3]):\n    y_list.add(a)\n    y_list.add(b)\n    x_list.add(c)\n    ver_lines.append((a, b, c))\nfor (d, e, f) in zip(abcdef[n3 + 0::3], abcdef[n3 + 1::3], abcdef[n3 + 2::3]):\n    y_list.add(d)\n    x_list.add(e)\n    x_list.add(f)\n    hor_lines.append((d, e, f))\nx_list.add(0)\ny_list.add(0)\nx_list = sorted(x_list)\ny_list = sorted(y_list)\nx_dict = {x: i for (i, x) in enumerate(x_list, start=1)}\ny_dict = {y: i for (i, y) in enumerate(y_list, start=1)}\nrow_real = len(x_list)\ncol_real = len(y_list)\nrow = row_real + 2\ncol = col_real + 2\nbanned_up_ij = [[0] * row for _ in range(col)]\nbanned_down_ij = [[0] * row for _ in range(col)]\nbanned_left_ij = [[0] * col for _ in range(row)]\nbanned_right_ij = [[0] * col for _ in range(row)]\nfor (a, b, c) in ver_lines:\n    if a > b:\n        (a, b) = (b, a)\n    ai = y_dict[a]\n    bi = y_dict[b]\n    j = x_dict[c]\n    banned_left_ij[j][ai] += 1\n    banned_left_ij[j][bi] -= 1\n    banned_right_ij[j - 1][ai] += 1\n    banned_right_ij[j - 1][bi] -= 1\nfor (d, e, f) in hor_lines:\n    if e > f:\n        (e, f) = (f, e)\n    i = y_dict[d]\n    ej = x_dict[e]\n    fj = x_dict[f]\n    banned_up_ij[i][ej] += 1\n    banned_up_ij[i][fj] -= 1\n    banned_down_ij[i - 1][ej] += 1\n    banned_down_ij[i - 1][fj] -= 1\nbanned_up = [0] * (row * col)\nbanned_down = [0] * (row * col)\nbanned_left = [0] * (row * col)\nbanned_right = [0] * (row * col)\nfor i in range(col):\n    ru = banned_up_ij[i]\n    rd = banned_down_ij[i]\n    ri = row * i\n    banned_up[ri] = ru[0]\n    banned_down[ri] = rd[0]\n    for j in range(1, row):\n        banned_up[ri + j] = banned_up[(ri + j) - 1] + ru[j]\n        banned_down[ri + j] = banned_down[(ri + j) - 1] + rd[j]\nfor j in range(row):\n    rl = banned_left_ij[j]\n    rr = banned_right_ij[j]\n    banned_left[j] = rl[0]\n    banned_right[j] = rr[0]\n    for i in range(1, col):\n        ri0 = (i - 1) * row\n        ri1 = i * row\n        banned_left[ri1 + j] = banned_left[ri0 + j] + rl[i]\n        banned_right[ri1 + j] = banned_right[ri0 + j] + rr[i]\ns = (row * y_dict[0]) + x_dict[0]\nenable = (([-1] * row) + ((([-1] + ([0] * (row - 2))) + [-1]) * (col - 2))) + ([-1] * row)\nq = [s]\nmoves = [(-row, banned_up), (-1, banned_left), (1, banned_right), (row, banned_down)]\nwhile q:\n    c = q.pop()\n    if enable[c] == 1:\n        continue\n    elif enable[c] == -1:\n        print('INF')\n        exit()\n    enable[c] = 1\n    for (dc, banned) in moves:\n        if banned[c]:\n            continue\n        nc = c + dc\n        if enable[nc] == 1:\n            continue\n        q.append(nc)\nans = 0\nfor i in range(col):\n    ri = i * row\n    for j in range(row):\n        if enable[ri + j] != 1:\n            continue\n        t = y_list[i - 1]\n        b = y_list[i]\n        l = x_list[j - 1]\n        r = x_list[j]\n        ans += (b - t) * (r - l)\nprint(ans)", "generated_code": "import sys\n(n, m, *abcdef) = list(map(int, sys.stdin.buffer.read().split()))\nver_lines = []\nhor_lines = []\nx_list = set()\ny_list = set()\nn3 = n * 3\nfor (a, b, c) in zip(abcdef[0:n3:3], abcdef[1:n3:3], abcdef[2:n3:3]):\n    y_list.add(a)\n    y_list.add(b)\n    x_list.add(c)\n    ver_lines.append((a, b, c))\nfor (d, e, f) in zip(abcdef[n3 + 0::3], abcdef[n3 + 1::3], abcdef[n3 + 2::3]):\n    y_list.add(d)\n    x_list.add(e)\n    x_list.add(f)\n    hor_lines.append((d, e, f))\nx_list.add(0)\ny_list.add(0)\nx_list = sorted(x_list)\ny_list = sorted(y_list)\nx_dict = {x: i for (i, x) in enumerate(x_list, start=1)}\ny_dict = {y: i for (i, y) in enumerate(y_list, start=1)}\nrow_real = len(x_list)\ncol_real = len(y_list)\nrow = row_real + 2\ncol = col_real + 2\nbanned_up_ij = [[0] * row for _ in range(col)]\nbanned_down_ij = [[0] * row for _ in range(col)]\nbanned_left_ij = [[0] * col for _ in range(row)]\nbanned_right_ij = [[0] * col for _ in range(row)]\nfor (a, b, c) in ver_lines:\n    if a > b:\n        (a, b) = (b, a)\n    ai = y_dict[a]\n    bi = y_dict[b]\n    j = x_dict[c]\n    banned_left_ij[j][ai] += 1\n    banned_left_ij[j][bi] -= 1\n    banned_right_ij[j - 1][ai] += 1\n    banned_right_ij[j - 1][bi] -= 1\nfor (d, e, f) in hor_lines:\n    if e > f:\n        (e, f) = (f, e)\n    i = y_dict[d]\n    ej = x_dict[e]\n    fj = x_dict[f]\n    banned_up_ij[i][ej] += 1\n    banned_up_ij[i][fj] -= 1\n    banned_down_ij[i - 1][ej] += 1\n    banned_down_ij[i - 1][fj] -= 1\nbanned_up = [0] * (row * col)\nbanned_down = [0] * (row * col)\nbanned_left = [0] * (row * col)\nbanned_right = [0] * (row * col)\nfor i in range(col):\n    ru = banned_up_ij[i]\n    rd = banned_down_ij[i]\n    ri = row * i\n    banned_up[ri] = ru[0]\n    banned_down[ri] = rd[0]\n    for j in range(1, row):\n        banned_up[ri + j] = banned_up[(ri + j) - 1] + ru[j]\n        banned_down[ri + j] = banned_down[(ri + j) - 1] + rd[j]\nfor j in range(row):\n    rl = banned_left_ij[j]\n    rr = banned_right_ij[j]\n    banned_left[j] = rl[0]\n    banned_right[j] = rr[0]\n    for i in range(1, col):\n        ri0 = (i - 1) * row\n        ri1 = i * row\n        banned_left[ri1 + j] = banned_left[ri0 + j] + rl[i]\n        banned_right[ri1 + j] = banned_right[ri0 + j] + rr[i]\ns = (row * y_dict[0]) + x_dict[0]\nenable = (([-1] * row) + ((([-1] + ([0] * (row - 2))) + [-1]) * (col - 2))) + ([-1] / row)\nq = [s]\nmoves = [(-row, banned_up), (-1, banned_left), (1, banned_right), (row, banned_down)]\nwhile q:\n    c = q.pop()\n    if enable[c] == 1:\n        continue\n    elif enable[c] == -1:\n        print('INF')\n        exit()\n    enable[c] = 1\n    for (dc, banned) in moves:\n        if banned[c]:\n            continue\n        nc = c + dc\n        if enable[nc] == 1:\n            continue\n        q.append(nc)\nans = 0\nfor i in range(col):\n    ri = i * row\n    for j in range(row):\n        if enable[ri + j] != 1:\n            continue\n        t = y_list[i - 1]\n        b = y_list[i]\n        l = x_list[j - 1]\n        r = x_list[j]\n        ans += (b - t) * (r - l)\nprint(ans)", "score": 0.0}
{"id": "PIE_extra_p03796_s111144925", "golden_code": "import math\n\n\n\nN = int(eval(input()))\n\n\n\npower = math.factorial(N)\n\n\n\nprint((power % 1000000007))\n\n\n", "generated_code": "n=int(eval(input()))\n\nans=1\n\nfor i in range(n):\n\n    ans=(ans*(i+1))%(10**9+7)\n\nprint(ans)", "score": 1.0}
{"id": "PIE_p03253_s968664754", "golden_code": "from math import floor, sqrt\nfrom collections import defaultdict\ndef factors(n):\n    d = defaultdict(int)\n    for i in range(2, floor(sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            d[i] += 1\n        if n == 1:\n            break\n    if n != 1:\n        d[n] += 1\n    return d\ndef inv(x, mod):\n    k = mod - 2\n    ret = 1\n    while k > 0:\n        if k & 1:\n            ret = (ret * x) % mod\n        x = (x * x) % mod\n        k >>= 1\n    return ret\n(N, M) = list(map(int, input().split()))\nmod = (10 ** 9) + 7\ndic = factors(M)\nK = len(dic)\nSIZE = N + max(dic.values()) if list(dic.values()) else N\nfact = [None] * (SIZE + 1)\nfinv = [None] * (SIZE + 1)\nfact[0] = 1\nfor i in range(1, SIZE + 1):\n    fact[i] = (fact[i - 1] * i) % mod\nfinv[SIZE] = inv(fact[SIZE], mod=mod)\nfor i in range(SIZE, 0, -1):\n    finv[i - 1] = (finv[i] * i) % mod\ndef comb(n, k):\n    tmp = (finv[k] * finv[n - k]) % mod\n    return (fact[n] * tmp) % mod\nans = 1\nfor p in dic:\n    ans = (ans * comb((dic[p] + N) - 1, dic[p])) % mod\nprint(ans)", "generated_code": "from math import floor, sqrt\nfrom collections import defaultdict\ndef factors(n):\n    d = defaultdict(int)\n    for i in range(2, floor(sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            d[i] += 1\n        if n == 1:\n            break\n    if n != 1:\n        d[n] += 1\n    return d\ndef inv(x, mod):\n    k = mod + 2\n    ret = 1\n    while k > 0:\n        if k & 1:\n            ret = (ret * x) % mod\n        x = (x * x) % mod\n        k >>= 1\n    return ret\n(N, M) = list(map(int, input().split()))\nmod = (10 ** 9) + 7\ndic = factors(M)\nK = len(dic)\nSIZE = N + max(dic.values()) if list(dic.values()) else N\nfact = [None] * (SIZE + 1)\nfinv = [None] * (SIZE + 1)\nfact[0] = 1\nfor i in range(1, SIZE + 1):\n    fact[i] = (fact[i - 1] * i) % mod\nfinv[SIZE] = inv(fact[SIZE], mod=mod)\nfor i in range(SIZE, 0, -1):\n    finv[i - 1] = (finv[i] * i) % mod\ndef comb(n, k):\n    tmp = (finv[k] * finv[n - k]) % mod\n    return (fact[n] * tmp) % mod\nans = 1\nfor p in dic:\n    ans = (ans * comb((dic[p] + N) - 1, dic[p])) % mod\nprint(ans)", "score": 0.3646}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            pass\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0334}
{"id": "PIE_p02649_s231020544", "golden_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if (i != 50 and j != 50):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\n(N, K, T, S) = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\nans = 0\nn = len(bit)\ndata = [0] * (2 ** n)\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * ((-1) ** popcount(i))\n    for val in t:\n        data[val] = 0\nprint(ans)", "generated_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if (i != 50 and j != 50):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\n(N, K, T, S) = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\nans = 0\nn = len(bit)\ndata = [0] * (2 ** n)\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * ((-1) * popcount(i))\n    for val in t:\n        data[val] = 0\nprint(ans)", "score": 0.4044}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        break\n    \n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0368}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] / (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0548}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    @staticmethod\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)def main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0436}
{"id": "PIE_extra_p03253_s289323588", "golden_code": "from collections import Counter\n\ndef factorization(n) -> list:\n\n\tif n==1:\n\n\t\treturn [1]\n\n\tret = []\n\n\ti = 2\n\n\twhile i*i<=n:\n\n\t\twhile n%i==0:\n\n\t\t\tn //= i\n\n\t\t\tret.append(i)\n\n\t\ti += 1\n\n\tif n!=1:\n\n\t\tret.append(n)\n\n\treturn ret\n\n\n\nn,m = list(map(int,input().split()))\n\nmod = 10**9+7\n\nif m==1:\n\n\tprint((1));exit()\n\n\n\nfactors = Counter(factorization(m))\n\nmx = n+max(factors.values())\n\n\n\nfac = [1]*(mx+1)\n\ninv = [1]*(mx+1)\n\nfor i in range(1,mx+1):\n\n\tfac[i] = fac[i-1] * i % mod\n\ninv[-1] = pow(fac[-1], mod - 2, mod)\n\nfor i in range(mx-1, -1, -1):\n\n\tinv[i] = inv[i+1] * (i+1) % mod\n\ndef cmb(n,r):\n\n\tassert n >= r >= 0\n\n\treturn fac[n] * inv[n-r] * inv[r] % mod\n\n\t\n\nans=1\n\nfor v in list(factors.values()):\n\n\tans*=cmb(n+v-1,v)\n\n\tans%=mod\n\n\n\nprint(ans)", "generated_code": "from collections import Counter\n\ndef factorization(n) -> list:\n\n\tif n==1:return [1]\n\n\tret = []\n\n\ti = 2\n\n\twhile i*i<=n:\n\n\t\twhile n%i==0:\n\n\t\t\tn //= i\n\n\t\t\tret.append(i)\n\n\t\ti += 1\n\n\tif n!=1:ret.append(n)\n\n\treturn ret\n\n\t\n\nfrom operator import mul\n\nfrom functools import reduce\n\ndef cmb(n,r):\n\n\tif n < r:return 0\n\n\tr = min(n-r,r)\n\n\tif r==0:return 1\n\n\tu = reduce(mul, list(range(n, n-r, -1)))\n\n\td = reduce(mul, list(range(1,r+1)))\n\n\treturn u//d\n\n\n\ndef main():\n\n\tn,m = list(map(int,input().split()))\n\n\tmod = 10**9+7\n\n\tif m==1:\n\n\t\tprint((1))\n\n\t\texit()\n\n\tans=1\n\n\tfor v in list(Counter(factorization(m)).values()):\n\n\t\tans*=cmb(n+v-1,v)\n\n\t\tans%=mod\n\n\tprint(ans)\n\n\t\n\nif __name__==\"__main__\":main()", "score": 1.0}
{"id": "PIE_p03558_s378178699", "golden_code": "from collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\ndef I():\n    return int(sys.stdin.readline())\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\ndef S():\n    return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = SR()\n    return l\nmod = 1000000007\ndef A():\n    s = S()\n    t = S()\n    if s + t == t[::-1] + s[::-1]:\n        print('YES')else:print('NO')\ndef B():\n    n = I()\n    for i in range(int(n ** 0.5) + 2)[::-1]:\n        if i * i <= n:\n            print(i * i)\n            quit()\ndef C():\n    n = I()\n    a = LI()\n    b = LI()\n    c = LI()\n    q = [0 for i in range(n)]\n    ans = 0\n    a.sort()\n    b.sort()\n    c.sort()\n    for i in range(n):\n        j = bisect.bisect_left(a, b[i])\n        q[i] = j\n    for i in range(n - 1):\n        q[i + 1] += q[i]\n    q.insert(0, 0)\n    for i in range(n):\n        j = bisect.bisect_left(b, c[i])\n        ans += q[j]\n    print(ans)\ndef D():\n    def dijkstra():\n        d = [float('inf') for i in range(k)]\n        q = [[0, 1]]\n        d[1] = 0\n        while q:\n            (dx, x) = heappop(q)\n            for (y, dy) in v[x]:\n                if d[y] > dx + dy:\n                    d[y] = dx + dy\n                    heappush(q, [d[y], y])\n        print(d[0] + 1)\n    k = I()\n    if k == 1:\n        print(1)\n        quit()\n    v = [[] for i in range(k)]\n    for i in range(1, k):\n        v[i].append([(i + 1) % k, 1])\n        v[i].append([(i * 10) % k, 0])\n    dijkstra()\ndef E():\n    return\ndef F():\n    return\ndef G():\n    return\ndef H():\n    return", "generated_code": "from collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\ndef I():\n    return int(sys.stdin.readline())\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\ndef S():\n    return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = SR()\n    return l\nmod = 1000000007\ndef A():\n    s = S()\n    t = S()\n    if s + t == t[::-1] + s[::+1]:\n        print('YES')else:print('NO')\ndef B():\n    n = I()\n    for i in range(int(n ** 0.5) + 2)[::-1]:\n        if i * i <= n:\n            print(i * i)\n            quit()\ndef C():\n    n = I()\n    a = LI()\n    b = LI()\n    c = LI()\n    q = [0 for i in range(n)]\n    ans = 0\n    a.sort()\n    b.sort()\n    c.sort()\n    for i in range(n):\n        j = bisect.bisect_left(a, b[i])\n        q[i] = j\n    for i in range(n - 1):\n        q[i + 1] += q[i]\n    q.insert(0, 0)\n    for i in range(n):\n        j = bisect.bisect_left(b, c[i])\n        ans += q[j]\n    print(ans)\ndef D():\n    def dijkstra():\n        d = [float('inf') for i in range(k)]\n        q = [[0, 1]]\n        d[1] = 0\n        while q:\n            (dx, x) = heappop(q)\n            for (y, dy) in v[x]:\n                if d[y] > dx + dy:\n                    d[y] = dx + dy\n                    heappush(q, [d[y], y])\n        print(d[0] + 1)\n    k = I()\n    if k == 1:\n        print(1)\n        quit()\n    v = [[] for i in range(k)]\n    for i in range(1, k):\n        v[i].append([(i + 1) % k, 1])\n        v[i].append([(i * 10) % k, 0])\n    dijkstra()\ndef E():\n    return\ndef F():\n    return\ndef G():\n    return\ndef H():\n    return", "score": 0.0}
{"id": "PIE_p02612_s197156959", "golden_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    return int(eval(input()))\ndef si():\n    return eval(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 0\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)", "generated_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    pass\ndef si():\n    return eval(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 0\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)", "score": 0.0}
{"id": "PIE_extra_p03416_s770002751", "golden_code": "A, B = list(map(int, input().split()))\n\n\n\ncnt = 0\n\nfor n in range(A, B+1):\n\n    n_s = str(n)\n\n    n_s_rvs = n_s[::-1]\n\n    if n_s == n_s_rvs:\n\n        cnt += 1\n\n\n\nprint(cnt)\n", "generated_code": "A, B = list(map(int, input().split()))\n\n\n\ncnt = 0\n\nfor n in range(A, B+1):\n\n    if n//10000 == n%10 and (n//1000)%10 == (n//10)%10:\n\n        cnt += 1\n\n\n\nprint(cnt)\n", "score": 0.9166}
{"id": "PIE_p02537_s767194684", "golden_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) << 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "score": 0.0632}
{"id": "PIE_extra_p02996_s348750359", "golden_code": "n=int(eval(input()))\n\ntask=[] \n\nfor _ in range(n):\n\n    a,b=list(map(int,input().split()))\n\n    task.append((b, -a))\n\n\n\ntask.sort()\n\n\n\ntime=0\n\nflag=True\n\nfor i in task:\n\n    time-=i[1]\n\n    if time>i[0]:\n\n        flag=False\n\n        break\n\n\n\nif flag:\n\n    print(\"Yes\")\n\nelse:\n\n    print(\"No\")\n\n\n", "generated_code": "import sys\n\nfrom collections import defaultdict\n\nfrom operator import itemgetter\n\ninput = sys.stdin.readline\n\n\n\nN = int(eval(input()))\n\nd = defaultdict(int)\n\nfor _ in range(N):\n\n    a, b = list(map(int, input().split()))\n\n    d[b] += a\n\ntask = list(d.items())\n\ntask.sort()\n\n\n\nnow = 0\n\nans = \"Yes\"\n\nfor limit, time in task:\n\n    now += time\n\n    if now > limit:\n\n        ans = \"No\"\n\n        break\n\n\n\nprint(ans)\n", "score": 1.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i | (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0308}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (+i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.035}
{"id": "PIE_p02612_s197156959", "golden_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    return int(eval(input()))\ndef si():\n    return eval(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 0\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)", "generated_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    return int(eval(input()))\ndef si():\n    return eval(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\npass\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 0\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)", "score": 0.0}
{"id": "PIE_p02537_s645565645", "golden_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "generated_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        pass\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "score": 0.0}
{"id": "PIE_extra_p03696_s490534414", "golden_code": "# -*- coding: utf-8 -*-\n\n\n\nimport sys\n\ndef input(): return sys.stdin.readline().strip()\n\nsys.setrecursionlimit(10 ** 9)\n\n\n\nfrom collections import deque\n\n\n\nN = int(eval(input()))\n\nS = eval(input())\n\n\n\nans = deque()\n\ntmp = ''\n\nl = r = 0\n\nfor c in S:\n\n    if c == '(':\n\n        l += 1\n\n        tmp += '('\n\n    else:\n\n        if l == 0:\n\n            ans.appendleft('(')\n\n            ans.append(')')\n\n        else:\n\n            r += 1\n\n            tmp += ')'\n\n            if l == r:\n\n                ans.append(tmp)\n\n                tmp = ''\n\n                l = r = 0\n\nif l > r:\n\n    tmp += ')' * (l-r)\n\n    ans.append(tmp)\n\nprint((''.join(ans)))\n", "generated_code": "# -*- coding: utf-8 -*-\n\n\n\nimport sys\n\n\n\ndef input(): return sys.stdin.readline().strip()\n\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\n\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\n\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\n\ndef ceil(x, y=1): return int(-(-x // y))\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\n\ndef Yes(): print('Yes')\n\ndef No(): print('No')\n\ndef YES(): print('YES')\n\ndef NO(): print('NO')\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = 10 ** 18\n\nMOD = 10 ** 9 + 7\n\n\n\nN = INT()\n\nS = eval(input())\n\n\n\n# それぞれ必要な数を確認\n\nlneed = cnt = 0\n\nfor s in S:\n\n    if s == ')':\n\n        cnt += 1\n\n        lneed = max(lneed, cnt)\n\n    else:\n\n        cnt -= 1\n\nrneed = cnt = 0\n\nfor s in S[::-1]:\n\n    if s == '(':\n\n        cnt += 1\n\n        rneed = max(rneed, cnt)\n\n    else:\n\n        cnt -= 1\n\n\n\n# 辞書順最小なので、(は全部左に、)は全部右に付ける\n\nans = ('(' * lneed) + S + (')' * rneed)\n\nprint(ans)\n", "score": 1.0}
{"id": "PIE_p00144_s682125154", "golden_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "generated_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] ** self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "score": 0.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0354}
{"id": "PIE_extra_p02792_s064765551", "golden_code": "N=int(eval(input()))\n\nC=[[0]*9  for i in range(9)]\n\ncount=0\n\n\n\nfor n in range(1,N+1):\n\n   if str(n)[-1]!=\"0\":\n\n      left=int(str(n)[0])-1\n\n      right=int(str(n)[-1])-1\n\n      C[left][right]+=1\n\n      \n\nfor i in range(1,10):\n\n   for j in range(1,10):\n\n      count+=C[i-1][j-1]*C[j-1][i-1]\n\n\n\nprint(count)", "generated_code": "from sys import stdin\n\ndef main():\n\n    #入力\n\n    readline=stdin.readline\n\n    N=int(readline())\n\n    d=dict()\n\n    for i in range(1,N+1):\n\n        i=str(i)\n\n        head=i[0]\n\n        tail=i[-1]\n\n        if tail==\"0\":\n\n            continue\n\n        if (head,tail) not in d:\n\n            d[(head,tail)]=1\n\n        else:\n\n            d[(head,tail)]+=1\n\n\n\n    ans=0\n\n    s=set()\n\n    for k in list(d.keys()):\n\n        m,l=k[0],k[1]\n\n        if (m,l) in s:\n\n            continue\n\n        if (l,m) in d:\n\n            ans+=d[(m,l)]*d[(l,m)]\n\n            if (m,l)!=(l,m):\n\n                ans+=d[(m,l)]*d[(l,m)]\n\n        s.add((m,l))\n\n        s.add((l,m))\n\n\n\n    print(ans)\n\n\n\nif __name__==\"__main__\":\n\n    main()", "score": 1.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0398}
{"id": "PIE_p02850_s056526441", "golden_code": "n = int(eval(input()))\nnode = {i: [] for i in range(1, n + 1)}\nvisited = [False for i in range(n + 1)]\nq = []\nfor _ in range(n - 1):\n    (a, b) = list(map(int, input().split()))\n    node[a].append(b)\n    node[b].append(a)\n    q.append((a, b))\nmother = q[0][0]\nvisited[mother] = True\nd = []\ne = []\npaint = {i: {} for i in range(1, n + 1)}\nmother_paint = [0 for i in range(n + 1)]\nc = 1\nfor child in node[mother]:\n    visited[child] = True\n    paint[mother][child] = c\n    paint[child][mother] = c\n    mother_paint[child] = c\n    c += 1\n    d.append(child)\nwhile d:\n    for parent in d:\n        p = 1\n        for child in node[parent]:\n            if visited[child] == False:\n                visited[child] = True\n                if p != mother_paint[parent]:\n                    paint[parent][child] = p\n                    paint[child][parent] = p\n                    mother_paint[child] = p\n                    p += 1\n                    e.append(child)\n                else:\n                    p += 1\n                    paint[parent][child] = p\n                    paint[child][parent] = p\n                    mother_paint[child] = p\n                    p += 1\n                    e.append(child)\n    if e:\n        d = e\n        e = []\n    else:\n        d = []\n        e = []\nK = 0\nfor i in range(1, n + 1):\n    K = max(K, len(node[i]))\nprint(K)\nfor i in range(n - 1):\n    (s, t) = (q[i][0], q[i][1])\n    print(paint[s][t])", "generated_code": "n = int(eval(input()))\nnode = {i: [] for i in range(1, n + 1)}\nvisited = [False for i in range(n - 1)]\nq = []\nfor _ in range(n - 1):\n    (a, b) = list(map(int, input().split()))\n    node[a].append(b)\n    node[b].append(a)\n    q.append((a, b))\nmother = q[0][0]\nvisited[mother] = True\nd = []\ne = []\npaint = {i: {} for i in range(1, n + 1)}\nmother_paint = [0 for i in range(n + 1)]\nc = 1\nfor child in node[mother]:\n    visited[child] = True\n    paint[mother][child] = c\n    paint[child][mother] = c\n    mother_paint[child] = c\n    c += 1\n    d.append(child)\nwhile d:\n    for parent in d:\n        p = 1\n        for child in node[parent]:\n            if visited[child] == False:\n                visited[child] = True\n                if p != mother_paint[parent]:\n                    paint[parent][child] = p\n                    paint[child][parent] = p\n                    mother_paint[child] = p\n                    p += 1\n                    e.append(child)\n                else:\n                    p += 1\n                    paint[parent][child] = p\n                    paint[child][parent] = p\n                    mother_paint[child] = p\n                    p += 1\n                    e.append(child)\n    if e:\n        d = e\n        e = []\n    else:\n        d = []\n        e = []\nK = 0\nfor i in range(1, n + 1):\n    K = max(K, len(node[i]))\nprint(K)\nfor i in range(n - 1):\n    (s, t) = (q[i][0], q[i][1])\n    print(paint[s][t])", "score": 0.0}
{"id": "PIE_extra_p03828_s749493108", "golden_code": "from math import factorial\n\n\n\nn = int(eval(input()))\n\nf = factorial(n)\n\n\n\nmod = 10 ** 9 + 7\n\n\n\ndef primes(n):\n\n    is_prime = [True] * (n + 1)\n\n    is_prime[0] = False\n\n    is_prime[1] = False\n\n    for i in range(2, int(n ** 0.5) + 1):\n\n        if not is_prime[i]:\n\n            continue\n\n        for j in range(i * 2, n + 1, i):\n\n            is_prime[j] = False\n\n    return [i for i in range(n + 1) if is_prime[i]]\n\n\n\nans = 1\n\nfor p in primes(n):\n\n    temp = 1\n\n    while f % p == 0:\n\n        temp += 1\n\n        f //= p\n\n    ans = (ans * temp) % mod\n\nprint(ans)\n", "generated_code": "n=int(eval(input()))\n\nm=10**9+7\n\np=[1 for i in range(10000)]\n\np[0]=0\n\np[1]=0\n\nfor i in range(2,n+1):\n\n  if p[i]==1:\n\n    for j in range(i*i,n+1,i):\n\n        p[j]=0\n\nans=1\n\nfor i in range(2,n+1):\n\n  if p[i]:\n\n    c=0\n\n    k=i\n\n    while n//k>0:\n\n      c=c+(n//k)%m\n\n      k=k*i\n\n    ans=(ans*((c+1)%m))%m\n\nprint((ans%m))\n\n    \n\n    \n\n      \n\n      \n", "score": 1.0}
{"id": "PIE_extra_p03988_s661300903", "golden_code": "import sys\n\ninput = sys.stdin.readline\n\nsys.setrecursionlimit(1000000)\n\nfrom collections import deque\n\ndef getN():\n\n    return int(eval(input()))\n\ndef getList():\n\n    return list(map(int, input().split()))\n\nimport math\n\n\n\nn = getN()\n\nnums = getList()\n\n\n\n# nums.sort(reverse=True)\n\nmx = max(nums)\n\nmn = (mx+1) // 2\n\nmndx = (mx % 2) + 1\n\n\n\nfrom collections import Counter\n\n\n\ncnt = Counter(nums)\n\n\n\nfor i in range(mn+1, mx+1):\n\n    if cnt[i] < 2:\n\n        print(\"Impossible\")\n\n        sys.exit()\n\n\n\nif cnt[mn] != mndx:\n\n    print(\"Impossible\")\n\nelse:\n\n    print(\"Possible\")", "generated_code": "import sys\n\nimport math\n\nimport copy\n\nfrom heapq import heappush, heappop, heapify\n\nfrom functools import cmp_to_key\n\nfrom bisect import bisect_left, bisect_right\n\nfrom collections import defaultdict, deque, Counter\n\n# sys.setrecursionlimit(1000000)\n\n\n\n# input aliases\n\ninput = sys.stdin.readline\n\ngetS = lambda: input().strip()\n\ngetN = lambda: int(eval(input()))\n\ngetList = lambda: list(map(int, input().split()))\n\ngetZList = lambda: [int(x) - 1 for x in input().split()]\n\n\n\nINF = float(\"inf\")\n\nMOD = 10**9 + 7\n\ndivide = lambda x: pow(x, MOD-2, MOD)\n\n\n\ndef pim():\n\n    print(\"Impossible\")\n\n    sys.exit()\n\ndef pp():\n\n    print(\"Possible\")\n\n    sys.exit()\n\ndef solve():\n\n    n = getN()\n\n    nums = getList()\n\n    cnt = Counter(nums)\n\n    mx = max(nums)\n\n    mn = min(nums)\n\n\n\n    if cnt[mx] < 2:\n\n        pim()\n\n    if mn < (mx + 1) // 2:\n\n        pim()\n\n\n\n    if mx % 2 == 0:\n\n        if cnt[mx//2] != 1:\n\n            pim()\n\n    else:\n\n        if cnt[(mx+1) // 2] != 2:\n\n            pim()\n\n\n\n    for i in range((mx + 1) // 2 + 1, mx+1):\n\n        if cnt[i] < 2:\n\n            pim()\n\n\n\n    pp()\n\n\n\n\n\ndef main():\n\n    n = getN()\n\n    for _ in range(n):\n\n        solve()\n\n\n\n    return\n\nif __name__ == \"__main__\":\n\n    # main()\n\n    solve()\n\n\n\n\n\n\n\n\n\n\n", "score": 1.0}
{"id": "PIE_p02612_s197156959", "golden_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    return int(eval(input()))\ndef si():\n    return eval(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 0\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)", "generated_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    return int(eval(input()))\ndef si():\n    return eval(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\ndef bo(i):\n    return ord(i) - ord('a')\npass\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)", "score": 0.0}
{"id": "PIE_p02537_s767194684", "golden_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if not (v is None):\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "score": 0.0}
{"id": "PIE_p00144_s682125154", "golden_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "generated_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "score": 0.0}
{"id": "PIE_p03039_s387237372", "golden_code": "import sys\nreadline = sys.stdin.readline\nsys.setrecursionlimit(10 ** 8)\nmod = (10 ** 9) + 7\nINF = 10 ** 18\neps = 10 ** (-7)\n(m, n, k) = list(map(int, readline().split()))\ndef comb(n, r, mod):\n    r = min(r, n - r)\n    mol = 1\n    deno = 1\n    for i in range(1, r + 1):\n        mol = (mol * ((n - r) + i)) % mod\n        deno = (deno * i) % mod\n    ret = (mol * pow(deno, mod - 2, mod)) % mod\n    return ret\ndef f1(x, y, a, b):\n    return (((((a + b) - x) - y) * ((a - x) + 1)) * ((b - y) + 1)) // 2\ndef f2(x, a):\n    return ((a - x) * ((a - x) + 1)) // 2\nans = 0\nfor x in range(1, n + 1):\n    for y in range(1, m + 1):\n        a = (n - x) + 1\n        b = (m - y) + 1\n        c = m * ((a * (a - 1)) + (x * (x - 1)))\n        d = n * ((b * (b - 1)) + (y * (y - 1)))\n        ans += (c + d) // 2\n        ans %= mod\nans = (ans * comb((m * n) - 2, k - 2, mod)) % mod\nans = (ans * pow(2, mod - 2, mod)) % mod\nprint(ans)", "generated_code": "import sys\nreadline = sys.stdin.readline\nsys.setrecursionlimit(10 ** 8)\nmod = (10 ** 9) - 7\nINF = 10 ** 18\neps = 10 ** (-7)\n(m, n, k) = list(map(int, readline().split()))\ndef comb(n, r, mod):\n    r = min(r, n - r)\n    mol = 1\n    deno = 1\n    for i in range(1, r + 1):\n        mol = (mol * ((n - r) + i)) % mod\n        deno = (deno * i) % mod\n    ret = (mol * pow(deno, mod - 2, mod)) % mod\n    return ret\ndef f1(x, y, a, b):\n    return (((((a + b) - x) - y) * ((a - x) + 1)) * ((b - y) + 1)) // 2\ndef f2(x, a):\n    return ((a - x) * ((a - x) + 1)) // 2\nans = 0\nfor x in range(1, n + 1):\n    for y in range(1, m + 1):\n        a = (n - x) + 1\n        b = (m - y) + 1\n        c = m * ((a * (a - 1)) + (x * (x - 1)))\n        d = n * ((b * (b - 1)) + (y * (y - 1)))\n        ans += (c + d) // 2\n        ans %= mod\nans = (ans * comb((m * n) - 2, k - 2, mod)) % mod\nans = (ans * pow(2, mod - 2, mod)) % mod\nprint(ans)", "score": 0.0}
{"id": "PIE_p03558_s378178699", "golden_code": "from collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\ndef I():\n    return int(sys.stdin.readline())\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\ndef S():\n    return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = SR()\n    return l\nmod = 1000000007\ndef A():\n    s = S()\n    t = S()\n    if s + t == t[::-1] + s[::-1]:\n        print('YES')else:print('NO')\ndef B():\n    n = I()\n    for i in range(int(n ** 0.5) + 2)[::-1]:\n        if i * i <= n:\n            print(i * i)\n            quit()\ndef C():\n    n = I()\n    a = LI()\n    b = LI()\n    c = LI()\n    q = [0 for i in range(n)]\n    ans = 0\n    a.sort()\n    b.sort()\n    c.sort()\n    for i in range(n):\n        j = bisect.bisect_left(a, b[i])\n        q[i] = j\n    for i in range(n - 1):\n        q[i + 1] += q[i]\n    q.insert(0, 0)\n    for i in range(n):\n        j = bisect.bisect_left(b, c[i])\n        ans += q[j]\n    print(ans)\ndef D():\n    def dijkstra():\n        d = [float('inf') for i in range(k)]\n        q = [[0, 1]]\n        d[1] = 0\n        while q:\n            (dx, x) = heappop(q)\n            for (y, dy) in v[x]:\n                if d[y] > dx + dy:\n                    d[y] = dx + dy\n                    heappush(q, [d[y], y])\n        print(d[0] + 1)\n    k = I()\n    if k == 1:\n        print(1)\n        quit()\n    v = [[] for i in range(k)]\n    for i in range(1, k):\n        v[i].append([(i + 1) % k, 1])\n        v[i].append([(i * 10) % k, 0])\n    dijkstra()\ndef E():\n    return\ndef F():\n    return\ndef G():\n    return\ndef H():\n    return", "generated_code": "from collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\ndef I():\n    return int(sys.stdin.readline())\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\ndef S():\n    return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = SR()\n    return l\nmod = 1000000007\ndef A():\n    s = S()\n    t = S()\n    if s + t == t[::-1] + s[::-1]:\n        print('YES')else:print('NO')\ndef B():\n    n = I()\n    for i in range(int(n * 0.5) + 2)[::-1]:\n        if i * i <= n:\n            print(i * i)\n            quit()\ndef C():\n    n = I()\n    a = LI()\n    b = LI()\n    c = LI()\n    q = [0 for i in range(n)]\n    ans = 0\n    a.sort()\n    b.sort()\n    c.sort()\n    for i in range(n):\n        j = bisect.bisect_left(a, b[i])\n        q[i] = j\n    for i in range(n - 1):\n        q[i + 1] += q[i]\n    q.insert(0, 0)\n    for i in range(n):\n        j = bisect.bisect_left(b, c[i])\n        ans += q[j]\n    print(ans)\ndef D():\n    def dijkstra():\n        d = [float('inf') for i in range(k)]\n        q = [[0, 1]]\n        d[1] = 0\n        while q:\n            (dx, x) = heappop(q)\n            for (y, dy) in v[x]:\n                if d[y] > dx + dy:\n                    d[y] = dx + dy\n                    heappush(q, [d[y], y])\n        print(d[0] + 1)\n    k = I()\n    if k == 1:\n        print(1)\n        quit()\n    v = [[] for i in range(k)]\n    for i in range(1, k):\n        v[i].append([(i + 1) % k, 1])\n        v[i].append([(i * 10) % k, 0])\n    dijkstra()\ndef E():\n    return\ndef F():\n    return\ndef G():\n    return\ndef H():\n    return", "score": 0.0}
{"id": "PIE_p02612_s197156959", "golden_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    return int(eval(input()))\ndef si():\n    return eval(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 0\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)", "generated_code": "from os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\ndef ii():\n    return int(eval(input()))\ndef si():\n    return eval(input())\ndef mi():\n    return list(map(int, input().split()))\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 0\ndef solve():\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)", "score": 0.0}
{"id": "PIE_p02574_s911286307", "golden_code": "import math, sys\nn = int(sys.stdin.readline())\na = tuple(map(int, sys.stdin.readline().split()))\ng = math.gcd(a[0], a[1])\nfor i in range(2, n):\n    g = math.gcd(g, a[i])\nM = max(a)\nacc = a[0]\nfor i in range(n):\n    acc = math.gcd(acc, a[i])\nif acc != 1:\n    print('not coprime')\n    exit()\nLIMIT = max(a)\nminPrime = [0] * (LIMIT + 1)\nminPrime[1] = 1\ndef make():\n    for i in range(2, LIMIT + 1):\n        if minPrime[i] == 0:\n            minPrime[i] = i\n            for j in range(i + i, LIMIT + 1, i):\n                if minPrime[j] == 0:\n                    minPrime[j] = i\nmake()\ndef factrial(N):\n    ret = []\n    while minPrime[N] != N:\n        ret.append(minPrime[N])\n        N = N // minPrime[N]\n    if N != 1:\n        ret.append(N)\n    return ret\njudge = set([])\npc = True\npairwise = True\np = set()\nfor e in a:\n    if not pairwise:\n        break\n    asf = set(factrial(e))\n    if judge & asf != set():\n        pc = False\n    judge |= asf\nif pc:\n    print('pairwise coprime')\nelif g == 1:\n    print('setwise coprime')\nelse:\n    print('not coprime')", "generated_code": "import math, sys\nn = int(sys.stdin.readline())\na = tuple(map(int, sys.stdin.readline().split()))\ng = math.gcd(a[0], a[1])\nfor i in range(2, n):\n    g = math.gcd(g, a[i])\nM = max(a)\nacc = a[0]\nfor i in range(n):\n    acc = math.gcd(acc, a[i])\nif acc != 1:\n    print('not coprime')\n    exit()\nLIMIT = max(a)\nminPrime = [0] ** (LIMIT + 1)\nminPrime[1] = 1\ndef make():\n    for i in range(2, LIMIT + 1):\n        if minPrime[i] == 0:\n            minPrime[i] = i\n            for j in range(i + i, LIMIT + 1, i):\n                if minPrime[j] == 0:\n                    minPrime[j] = i\nmake()\ndef factrial(N):\n    ret = []\n    while minPrime[N] != N:\n        ret.append(minPrime[N])\n        N = N // minPrime[N]\n    if N != 1:\n        ret.append(N)\n    return ret\njudge = set([])\npc = True\npairwise = True\np = set()\nfor e in a:\n    if not pairwise:\n        break\n    asf = set(factrial(e))\n    if judge & asf != set():\n        pc = False\n    judge |= asf\nif pc:\n    print('pairwise coprime')\nelif g == 1:\n    print('setwise coprime')\nelse:\n    print('not coprime')", "score": 0.0318}
{"id": "PIE_p02680_s341076610", "golden_code": "import sys\n(n, m, *abcdef) = list(map(int, sys.stdin.buffer.read().split()))\nver_lines = []\nhor_lines = []\nx_list = set()\ny_list = set()\nn3 = n * 3\nfor (a, b, c) in zip(abcdef[0:n3:3], abcdef[1:n3:3], abcdef[2:n3:3]):\n    y_list.add(a)\n    y_list.add(b)\n    x_list.add(c)\n    ver_lines.append((a, b, c))\nfor (d, e, f) in zip(abcdef[n3 + 0::3], abcdef[n3 + 1::3], abcdef[n3 + 2::3]):\n    y_list.add(d)\n    x_list.add(e)\n    x_list.add(f)\n    hor_lines.append((d, e, f))\nx_list.add(0)\ny_list.add(0)\nx_list = sorted(x_list)\ny_list = sorted(y_list)\nx_dict = {x: i for (i, x) in enumerate(x_list, start=1)}\ny_dict = {y: i for (i, y) in enumerate(y_list, start=1)}\nrow_real = len(x_list)\ncol_real = len(y_list)\nrow = row_real + 2\ncol = col_real + 2\nbanned_up_ij = [[0] * row for _ in range(col)]\nbanned_down_ij = [[0] * row for _ in range(col)]\nbanned_left_ij = [[0] * col for _ in range(row)]\nbanned_right_ij = [[0] * col for _ in range(row)]\nfor (a, b, c) in ver_lines:\n    if a > b:\n        (a, b) = (b, a)\n    ai = y_dict[a]\n    bi = y_dict[b]\n    j = x_dict[c]\n    banned_left_ij[j][ai] += 1\n    banned_left_ij[j][bi] -= 1\n    banned_right_ij[j - 1][ai] += 1\n    banned_right_ij[j - 1][bi] -= 1\nfor (d, e, f) in hor_lines:\n    if e > f:\n        (e, f) = (f, e)\n    i = y_dict[d]\n    ej = x_dict[e]\n    fj = x_dict[f]\n    banned_up_ij[i][ej] += 1\n    banned_up_ij[i][fj] -= 1\n    banned_down_ij[i - 1][ej] += 1\n    banned_down_ij[i - 1][fj] -= 1\nbanned_up = [0] * (row * col)\nbanned_down = [0] * (row * col)\nbanned_left = [0] * (row * col)\nbanned_right = [0] * (row * col)\nfor i in range(col):\n    ru = banned_up_ij[i]\n    rd = banned_down_ij[i]\n    ri = row * i\n    banned_up[ri] = ru[0]\n    banned_down[ri] = rd[0]\n    for j in range(1, row):\n        banned_up[ri + j] = banned_up[(ri + j) - 1] + ru[j]\n        banned_down[ri + j] = banned_down[(ri + j) - 1] + rd[j]\nfor j in range(row):\n    rl = banned_left_ij[j]\n    rr = banned_right_ij[j]\n    banned_left[j] = rl[0]\n    banned_right[j] = rr[0]\n    for i in range(1, col):\n        ri0 = (i - 1) * row\n        ri1 = i * row\n        banned_left[ri1 + j] = banned_left[ri0 + j] + rl[i]\n        banned_right[ri1 + j] = banned_right[ri0 + j] + rr[i]\ns = (row * y_dict[0]) + x_dict[0]\nenable = (([-1] * row) + ((([-1] + ([0] * (row - 2))) + [-1]) * (col - 2))) + ([-1] * row)\nq = [s]\nmoves = [(-row, banned_up), (-1, banned_left), (1, banned_right), (row, banned_down)]\nwhile q:\n    c = q.pop()\n    if enable[c] == 1:\n        continue\n    elif enable[c] == -1:\n        print('INF')\n        exit()\n    enable[c] = 1\n    for (dc, banned) in moves:\n        if banned[c]:\n            continue\n        nc = c + dc\n        if enable[nc] == 1:\n            continue\n        q.append(nc)\nans = 0\nfor i in range(col):\n    ri = i * row\n    for j in range(row):\n        if enable[ri + j] != 1:\n            continue\n        t = y_list[i - 1]\n        b = y_list[i]\n        l = x_list[j - 1]\n        r = x_list[j]\n        ans += (b - t) * (r - l)\nprint(ans)", "generated_code": "import sys\n(n, m, *abcdef) = list(map(int, sys.stdin.buffer.read().split()))\nver_lines = []\nhor_lines = []\nx_list = set()\ny_list = set()\nn3 = n * 3\nfor (a, b, c) in zip(abcdef[0:n3:3], abcdef[1:n3:3], abcdef[2:n3:3]):\n    y_list.add(a)\n    y_list.add(b)\n    x_list.add(c)\n    ver_lines.append((a, b, c))\nfor (d, e, f) in zip(abcdef[n3 + 0::3], abcdef[n3 + 1::3], abcdef[n3 + 2::3]):\n    y_list.add(d)\n    x_list.add(e)\n    x_list.add(f)\n    hor_lines.append((d, e, f))\nx_list.add(0)\ny_list.add(0)\nx_list = sorted(x_list)\ny_list = sorted(y_list)\nx_dict = {x: i for (i, x) in enumerate(x_list, start=1)}\ny_dict = {y: i for (i, y) in enumerate(y_list, start=1)}\nrow_real = len(x_list)\ncol_real = len(y_list)\nrow = row_real + 2\ncol = col_real + 2\nbanned_up_ij = [[0] * row for _ in range(col)]\nbanned_down_ij = [[0] * row for _ in range(col)]\nbanned_left_ij = [[0] * col for _ in range(row)]\nbanned_right_ij = [[0] * col for _ in range(row)]\nfor (a, b, c) in ver_lines:\n    if a > b:\n        (a, b) = (b, a)\n    ai = y_dict[a]\n    bi = y_dict[b]\n    j = x_dict[c]\n    banned_left_ij[j][ai] += 1\n    banned_left_ij[j][bi] -= 1\n    banned_right_ij[j - 1][ai] += 1\n    banned_right_ij[j - 1][bi] -= 1\nfor (d, e, f) in hor_lines:\n    if e > f:\n        (e, f) = (f, e)\n    i = y_dict[d]\n    ej = x_dict[e]\n    fj = x_dict[f]\n    banned_up_ij[i][ej] += 1\n    banned_up_ij[i][fj] -= 1\n    banned_down_ij[i - 1][ej] += 1\n    banned_down_ij[i - 1][fj] -= 1\nbanned_up = [0] * (row * col)\nbanned_down = [0] * (row * col)\nbanned_left = [0] * (row * col)\nbanned_right = [0] * (row * col)\nfor i in range(col):\n    ru = banned_up_ij[i]\n    rd = banned_down_ij[i]\n    ri = row * i\n    banned_up[ri] = ru[0]\n    banned_down[ri] = rd[0]\n    for j in range(1, row):\n        banned_up[ri + j] = banned_up[(ri + j) - 1] + ru[j]\n        banned_down[ri + j] = banned_down[(ri + j) - 1] + rd[j]\nfor j in range(row):\n    rl = banned_left_ij[j]\n    rr = banned_right_ij[j]\n    banned_left[j] = rl[0]\n    banned_right[j] = rr[0]\n    for i in range(1, col):\n        ri0 = (i - 1) * row\n        ri1 = i * row\n        banned_left[ri1 + j] = banned_left[ri0 + j] + rl[i]\n        banned_right[ri1 + j] = banned_right[ri0 + j] + rr[i]\ns = (row * y_dict[0]) + x_dict[0]\nenable = (([-1] * row) + ((([-1] + ([0] * (row - 2))) + [-1]) * (col - 2))) + ([-1] * row)\nq = [s]\nmoves = [(-row, banned_up), (-1, banned_left), (1, banned_right), (row, banned_down)]\nwhile q:\n    c = q.pop()\n    if enable[c] == 1:\n        continue\n    elif enable[c] == -1:\n        print('INF')\n        exit()\n    enable[c] = 1\n    for (dc, banned) in moves:\n        if banned[c]:\n            continue\n        nc = c + dc\n        if not (enable[nc] == 1):\n            continue\n        q.append(nc)\nans = 0\nfor i in range(col):\n    ri = i * row\n    for j in range(row):\n        if enable[ri + j] != 1:\n            continue\n        t = y_list[i - 1]\n        b = y_list[i]\n        l = x_list[j - 1]\n        r = x_list[j]\n        ans += (b - t) * (r - l)\nprint(ans)", "score": 0.0}
{"id": "PIE_p02537_s645565645", "golden_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "generated_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return __dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "score": 0.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] // N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0368}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0402}
{"id": "PIE_p00744_s226218538", "golden_code": "import collections\nimport math\nclass Dinic:\n    class edge:\n        def __init__(self, to, cap, rev):\n            (self.to, self.cap, self.rev) = (to, cap, rev)\n    def __init__(self, V, E, source, sink):\n        self.V = V\n        self.E = [[] for _ in range(V)]\n        for fr in range(V):\n            for (to, cap) in E[fr]:\n                self.E[fr].append(self.edge(to, cap, len(self.E[to])))\n                self.E[to].append(self.edge(fr, 0, len(self.E[fr]) - 1))\n        self.maxflow = self.dinic(source, sink)\n    def dinic(self, source, sink):\n        INF = float('inf')\n        maxflow = 0\n        while True:\n            self.bfs(source)\n            if self.level[sink] < 0:\n                return maxflow\n            self.itr = [0] * self.V\n            while True:\n                flow = self.dfs(source, sink, INF)\n                if flow > 0:\n                    maxflow += flow\n                else:\n                    break\n    def dfs(self, vertex, sink, flow):\n        if vertex == sink:\n            return flow\n        for i in range(self.itr[vertex], len(self.E[vertex])):\n            self.itr[vertex] = i\n            e = self.E[vertex][i]\n            if (e.cap > 0 and self.level[vertex] < self.level[e.to]):\n                d = self.dfs(e.to, sink, min(flow, e.cap))\n                if d > 0:\n                    e.cap -= d\n                    self.E[e.to][e.rev].cap += d\n                    return d\n        return 0\n    def bfs(self, start):\n        que = collections.deque()\n        self.level = [-1] * self.V\n        que.append(start)\n        self.level[start] = 0\n        while que:\n            fr = que.popleft()\n            for e in self.E[fr]:\n                if (e.cap > 0 and self.level[e.to] < 0):\n                    self.level[e.to] = self.level[fr] + 1\n                    que.append(e.to)\nwhile True:\n    (M, N) = list(map(int, input().split()))\n    if (M == 0 and N == 0):\n        break\n    (blue, red) = ([], [])\n    while True:\n        for x in input().split():\n            blue.append(int(x))\n        if len(blue) == M:\n            break\n    while True:\n        for x in input().split():\n            red.append(int(x))\n        if len(red) == N:\n            break\n    V = (M + N) + 2\n    edge = [set() for _ in range(V)]\n    for (i, b) in enumerate(blue):\n        if b != 1:\n            for (j, r) in enumerate(red):\n                if r % b == 0:\n                    edge[i].add((M + j, 1))\n        for j in range(2, int(math.sqrt(b)) + 1):\n            if b % j == 0:\n                for (k, r) in enumerate(red):\n                    if (r % j == 0 or r % (b // j) == 0):\n                        edge[i].add((M + k, 1))\n    for i in range(M):\n        edge[M + N].add((i, 1))\n    for j in range(N):\n        edge[M + j].add(((M + N) + 1, 1))\n    d = Dinic(V, edge, M + N, (M + N) + 1)\n    print(d.maxflow)", "generated_code": "import collections\nimport math\nclass Dinic:\n    class edge:\n        def __init__(self, to, cap, rev):\n            (self.to, self.cap, self.rev) = (to, cap, rev)\n    def __init__(self, V, E, source, sink):\n        self.V = V\n        self.E = [[] for _ in range(V)]\n        for fr in range(V):\n            for (to, cap) in E[fr]:\n                self.E[fr].append(self.edge(to, cap, len(self.E[to])))\n                self.E[to].append(self.edge(fr, 0, len(self.E[fr]) - 1))\n        self.maxflow = self.dinic(source, sink)\n    def dinic(self, source, sink):\n        INF = float('inf')\n        maxflow = 0\n        while True:\n            self.bfs(source)\n            if self.level[sink] < 0:\n                return maxflow\n            self.itr = [0] * self.V\n            while True:\n                flow = self.dfs(source, sink, INF)\n                if flow > 0:\n                    maxflow += flow\n                else:\n                    break\n    def dfs(self, vertex, sink, flow):\n        if vertex == sink:\n            return flow\n        for i in range(self.itr[vertex], len(self.E[vertex])):\n            self.itr[vertex] = i\n            e = self.E[vertex][i]\n            if (e.cap > 0 and self.level[vertex] < self.level[e.to]):\n                d = self.dfs(e.to, sink, min(flow, e.cap))\n                if d > 0:\n                    e.cap -= d\n                    self.E[e.to][e.rev].cap += d\n                    return d\n        return 0\n    def bfs(self, start):\n        que = collections.deque()\n        self.level = [-1] * self.V\n        que.append(start)\n        self.level[start] = 0\n        while que:\n            fr = que.popleft()\n            for e in self.E[fr]:\n                if (e.cap > 0 and self.level[e.to] < 0):\n                    self.level[e.to] = self.level[fr] + 1\n                    que.append(e.to)\nwhile True:\n    (M, N) = list(map(int, input().split()))\n    if (M == 0 and N == 0):\n        break\n    (blue, red) = ([], [])\n    while True:\n        break\n    \n    \n    \n    while True:\n        for x in input().split():\n            red.append(int(x))\n        if len(red) == N:\n            break\n    V = (M + N) + 2\n    edge = [set() for _ in range(V)]\n    for (i, b) in enumerate(blue):\n        if b != 1:\n            for (j, r) in enumerate(red):\n                if r % b == 0:\n                    edge[i].add((M + j, 1))\n        for j in range(2, int(math.sqrt(b)) + 1):\n            if b % j == 0:\n                for (k, r) in enumerate(red):\n                    if (r % j == 0 or r % (b // j) == 0):\n                        edge[i].add((M + k, 1))\n    for i in range(M):\n        edge[M + N].add((i, 1))\n    for j in range(N):\n        edge[M + j].add(((M + N) + 1, 1))\n    d = Dinic(V, edge, M + N, (M + N) + 1)\n    print(d.maxflow)", "score": 0.246}
{"id": "PIE_extra_p02596_s416996588", "golden_code": "def c_repsept():\n\n    K = int(eval(input()))\n\n\n\n    if (K % 2 == 0 or K % 5 == 0):\n\n        return -1  # repsept の因数に 2, 5 はない\n\n\n\n    repsept = 7 % K\n\n    count = 1\n\n    while repsept % K !=0:\n\n        repsept = ((repsept * 10) + 7) % K\n\n        count += 1\n\n    return count\n\n\n\nprint((c_repsept()))", "generated_code": "def c_repsept():\n\n    K = int(eval(input()))\n\n\n\n    L = 9 * K // 7 if K % 7 == 0 else 9 * K\n\n    if L % 2 == 0 or L % 5 == 0:\n\n        return -1\n\n\n\n    remainder = 1\n\n    for n in range(1, L + 1):\n\n        remainder = (10 * remainder) % L\n\n        if remainder == 1:\n\n            return n\n\n    return -1\n\n\n\nprint((c_repsept()))", "score": 1.0}
{"id": "PIE_p02574_s911286307", "golden_code": "import math, sys\nn = int(sys.stdin.readline())\na = tuple(map(int, sys.stdin.readline().split()))\ng = math.gcd(a[0], a[1])\nfor i in range(2, n):\n    g = math.gcd(g, a[i])\nM = max(a)\nacc = a[0]\nfor i in range(n):\n    acc = math.gcd(acc, a[i])\nif acc != 1:\n    print('not coprime')\n    exit()\nLIMIT = max(a)\nminPrime = [0] * (LIMIT + 1)\nminPrime[1] = 1\ndef make():\n    for i in range(2, LIMIT + 1):\n        if minPrime[i] == 0:\n            minPrime[i] = i\n            for j in range(i + i, LIMIT + 1, i):\n                if minPrime[j] == 0:\n                    minPrime[j] = i\nmake()\ndef factrial(N):\n    ret = []\n    while minPrime[N] != N:\n        ret.append(minPrime[N])\n        N = N // minPrime[N]\n    if N != 1:\n        ret.append(N)\n    return ret\njudge = set([])\npc = True\npairwise = True\np = set()\nfor e in a:\n    if not pairwise:\n        break\n    asf = set(factrial(e))\n    if judge & asf != set():\n        pc = False\n    judge |= asf\nif pc:\n    print('pairwise coprime')\nelif g == 1:\n    print('setwise coprime')\nelse:\n    print('not coprime')", "generated_code": "import math, sys\nn = int(sys.stdin.readline())\npass\ng = math.gcd(a[0], a[1])\nfor i in range(2, n):\n    g = math.gcd(g, a[i])\nM = max(a)\nacc = a[0]\nfor i in range(n):\n    acc = math.gcd(acc, a[i])\nif acc != 1:\n    print('not coprime')\n    exit()\nLIMIT = max(a)\nminPrime = [0] * (LIMIT + 1)\nminPrime[1] = 1\ndef make():\n    for i in range(2, LIMIT + 1):\n        if minPrime[i] == 0:\n            minPrime[i] = i\n            for j in range(i + i, LIMIT + 1, i):\n                if minPrime[j] == 0:\n                    minPrime[j] = i\nmake()\ndef factrial(N):\n    ret = []\n    while minPrime[N] != N:\n        ret.append(minPrime[N])\n        N = N // minPrime[N]\n    if N != 1:\n        ret.append(N)\n    return ret\njudge = set([])\npc = True\npairwise = True\np = set()\nfor e in a:\n    if not pairwise:\n        break\n    asf = set(factrial(e))\n    if judge & asf != set():\n        pc = False\n    judge |= asf\nif pc:\n    print('pairwise coprime')\nelif g == 1:\n    print('setwise coprime')\nelse:\n    print('not coprime')", "score": 0.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            break\n        \n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0422}
{"id": "PIE_p03253_s043094515", "golden_code": "def prime_factorize(num):\n    prime_factor = {}\n    i = 2\n    while i ** 2 <= num:\n        while num % i == 0:\n            num //= i\n            if i in list(prime_factor.keys()):\n                prime_factor[i] += 1\n            else:\n                prime_factor[i] = 1\n        i += 1\n    if num > 1:\n        prime_factor[num] = 1\n    return prime_factor\nfrom math import factorial\ndef comb(n, r, R):\n    if n not in R:\n        a = factorial(n)\n        R[n] = a\n    else:\n        a = R[n]\n    if n - r not in R:\n        b = factorial(n - r)\n        R[n - r] = b\n    else:\n        b = R[n - r]\n    if r not in R:\n        c = factorial(r)\n        R[r] = c\n    else:\n        c = R[r]\n    return a // (b * c)\n(n, m) = list(map(int, input().split()))\nr = 1\nR = dict()\nprime_fac = prime_factorize(m)\nfor v in list(prime_fac.values()):\n    r *= comb((v + n) - 1, v, R)\nmod = 1000000000 + 7\nprint(r % mod)", "generated_code": "def prime_factorize(num):\n    prime_factor = {}\n    i = 2\n    while i ** 2 <= num:\n        while num % i == 0:\n            num //= i\n            if i in list(prime_factor.keys()):\n                prime_factor[i] += 1\n            else:\n                prime_factor[i] = 1\n        i += 1\n    if num > 1:\n        prime_factor[num] = 1\n    return prime_factor\nfrom math import factorial\ndef comb(n, r, R):\n    if n not in R:\n        a = factorial(n)\n        R[n] = a\n    else:\n        a = R[n]\n    if n - r not in R:\n        b = factorial(n - r)\n        R[n - r] = b\n    else:\n        b = R[n - r]\n    if r not in R:\n        c = factorial(r)\n        R[r] = c\n    else:\n        c = R[r]\n    return a // (b / c)\n(n, m) = list(map(int, input().split()))\nr = 1\nR = dict()\nprime_fac = prime_factorize(m)\nfor v in list(prime_fac.values()):\n    r *= comb((v + n) - 1, v, R)\nmod = 1000000000 + 7\nprint(r % mod)", "score": 0.3604}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        pass\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0334}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i | (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0396}
{"id": "PIE_p03558_s378178699", "golden_code": "from collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\ndef I():\n    return int(sys.stdin.readline())\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\ndef S():\n    return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = SR()\n    return l\nmod = 1000000007\ndef A():\n    s = S()\n    t = S()\n    if s + t == t[::-1] + s[::-1]:\n        print('YES')else:print('NO')\ndef B():\n    n = I()\n    for i in range(int(n ** 0.5) + 2)[::-1]:\n        if i * i <= n:\n            print(i * i)\n            quit()\ndef C():\n    n = I()\n    a = LI()\n    b = LI()\n    c = LI()\n    q = [0 for i in range(n)]\n    ans = 0\n    a.sort()\n    b.sort()\n    c.sort()\n    for i in range(n):\n        j = bisect.bisect_left(a, b[i])\n        q[i] = j\n    for i in range(n - 1):\n        q[i + 1] += q[i]\n    q.insert(0, 0)\n    for i in range(n):\n        j = bisect.bisect_left(b, c[i])\n        ans += q[j]\n    print(ans)\ndef D():\n    def dijkstra():\n        d = [float('inf') for i in range(k)]\n        q = [[0, 1]]\n        d[1] = 0\n        while q:\n            (dx, x) = heappop(q)\n            for (y, dy) in v[x]:\n                if d[y] > dx + dy:\n                    d[y] = dx + dy\n                    heappush(q, [d[y], y])\n        print(d[0] + 1)\n    k = I()\n    if k == 1:\n        print(1)\n        quit()\n    v = [[] for i in range(k)]\n    for i in range(1, k):\n        v[i].append([(i + 1) % k, 1])\n        v[i].append([(i * 10) % k, 0])\n    dijkstra()\ndef E():\n    return\ndef F():\n    return\ndef G():\n    return\ndef H():\n    return", "generated_code": "from collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\ndef I():\n    return int(sys.stdin.readline())\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\ndef S():\n    return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = SR()\n    return l\nmod = 1000000007\ndef A():\n    s = S()\n    t = S()\n    if s + t == t[::-1] - s[::-1]:\n        print('YES')else:print('NO')\ndef B():\n    n = I()\n    for i in range(int(n ** 0.5) + 2)[::-1]:\n        if i * i <= n:\n            print(i * i)\n            quit()\ndef C():\n    n = I()\n    a = LI()\n    b = LI()\n    c = LI()\n    q = [0 for i in range(n)]\n    ans = 0\n    a.sort()\n    b.sort()\n    c.sort()\n    for i in range(n):\n        j = bisect.bisect_left(a, b[i])\n        q[i] = j\n    for i in range(n - 1):\n        q[i + 1] += q[i]\n    q.insert(0, 0)\n    for i in range(n):\n        j = bisect.bisect_left(b, c[i])\n        ans += q[j]\n    print(ans)\ndef D():\n    def dijkstra():\n        d = [float('inf') for i in range(k)]\n        q = [[0, 1]]\n        d[1] = 0\n        while q:\n            (dx, x) = heappop(q)\n            for (y, dy) in v[x]:\n                if d[y] > dx + dy:\n                    d[y] = dx + dy\n                    heappush(q, [d[y], y])\n        print(d[0] + 1)\n    k = I()\n    if k == 1:\n        print(1)\n        quit()\n    v = [[] for i in range(k)]\n    for i in range(1, k):\n        v[i].append([(i + 1) % k, 1])\n        v[i].append([(i * 10) % k, 0])\n    dijkstra()\ndef E():\n    return\ndef F():\n    return\ndef G():\n    return\ndef H():\n    return", "score": 0.0}
{"id": "PIE_p02537_s645565645", "golden_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "generated_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        __e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "score": 0.0}
{"id": "PIE_p02537_s767194684", "golden_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\npass\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "score": 0.0}
{"id": "PIE_extra_p03796_s645296559", "golden_code": "import math\n\nprint((math.factorial(int(eval(input())))%1000000007))", "generated_code": "num = int(eval(input()))\n\nresult = 1\n\nfor i in range(1,num+1):\n\n    result = result *i % 1000000007\n\nprint(result)", "score": 1.0}
{"id": "PIE_p03575_s865425208", "golden_code": "class UnionFind:\n    def __init__(self, size):\n        self.table = [i for i in range(size)]\n    def find(self, x):\n        return self.table[x]\n    def union(self, x, y):\n        x1 = self.find(x)\n        y1 = self.find(y)\n        if x1 == y1:\n            return False\n        for i in range(len(self.table)):\n            if self.table[i] == y1:\n                self.table[i] = x1\n        return True\n(N, M) = list(map(int, input().split()))\nedges = []\nfor _ in range(M):\n    (a, b) = list(map(int, input().split()))\n    edges.append([a - 1, b - 1])\nmat = [[0] * N for _ in range(N)]\nfor (s, g) in edges:\n    mat[s][g] = 1\n    mat[g][s] = 1\nans = 0\nfor i in range(M):\n    uni = UnionFind(N)\n    for j in range(M):\n        if i != j:\n            uni.union(edges[j][0], edges[j][1])\n    if not (all((uni.find(0) == uni.find(x) for x in range(N)))):\n        ans += 1\nprint(ans)", "generated_code": "class UnionFind:\n    def __init__(self, size):\n        self.table = [i for i in range(size)]\n    @classmethod\n    def find(self, x):\n        return self.table[x]\n    def union(self, x, y):\n        x1 = self.find(x)\n        y1 = self.find(y)\n        if x1 == y1:\n            return False\n        for i in range(len(self.table)):\n            if self.table[i] == y1:\n                self.table[i] = x1\n        return True\n(N, M) = list(map(int, input().split()))\nedges = []\nfor _ in range(M):\n    (a, b) = list(map(int, input().split()))\n    edges.append([a - 1, b - 1])\nmat = [[0] * N for _ in range(N)]\nfor (s, g) in edges:\n    mat[s][g] = 1\n    mat[g][s] = 1\nans = 0\nfor i in range(M):\n    uni = UnionFind(N)\n    for j in range(M):\n        if i != j:\n            uni.union(edges[j][0], edges[j][1])\n    if not (all((uni.find(0) == uni.find(x) for x in range(N)))):\n        ans += 1\nprint(ans)", "score": 0.0}
{"id": "PIE_extra_p02951_s688063139", "golden_code": "a, b, c = list(map(int, input().split()))\n\n\n\nif a < b + c:\n\n    print((b+c-a))\n\nelse:\n\n    print((0))", "generated_code": "a,b,c = list(map(int, input().split()))\n\n\n\nprint((max(0, c-(a-b))))", "score": 1.0}
{"id": "PIE_p03371_s026349855", "golden_code": "from collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\ndef I():\n    return int(sys.stdin.readline())\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\ndef S():\n    return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LS()\n    return l\nsys.setrecursionlimit(1000000)\nmod = 1000000007\ndef A():\n    return\ndef B():\n    return\ndef C():\n    return\ndef D():\n    return\ndef E():\n    return\ndef F():\n    (a, b, c, X, Y) = LI()\n    ans = float('inf')\n    for z in range(300001):\n        if z % 2 == 0:\n            m = c * z\n            x = z // 2\n            y = z // 2\n            m += a * max(0, X - x)\n            m += b * max(0, Y - y)\n            if m < ans:\n                ans = m\n    print(ans)\n    return\ndef G():\n    n = I()\n    x = LI()\n    f = [(i, x[i]) for i in range(n)]\n    f.sort(key=lambda x: (x[1]))\n    g = [(f[i][0], i) for i in range(n)]\n    g.sort(key=lambda x: (x[0]))\n    for i in range(n):\n        if g[i][1] < n // 2:\n            print(f[n // 2][1])else:print(f[(n // 2) - 1][1])\n    return\ndef H():\n    return\ndef I_():\n    return\ndef J():\n    return", "generated_code": "from collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\ndef I():\n    return int(sys.stdin.readline())\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\ndef S():\n    return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LS()\n    return l\nsys.setrecursionlimit(1000000)\nmod = 1000000007\ndef A():\n    return\ndef B():\n    return\ndef C():\n    return\ndef D():\n    return\ndef E():\n    return\ndef F():\n    (a, b, c, X, Y) = LI()\n    ans = float('inf')\n    for z in range(300001):\n        if z % 2 == 0:\n            m = c * z\n            x = z * 2\n            y = z // 2\n            m += a * max(0, X - x)\n            m += b * max(0, Y - y)\n            if m < ans:\n                ans = m\n    print(ans)\n    return\ndef G():\n    n = I()\n    x = LI()\n    f = [(i, x[i]) for i in range(n)]\n    f.sort(key=lambda x: (x[1]))\n    g = [(f[i][0], i) for i in range(n)]\n    g.sort(key=lambda x: (x[0]))\n    for i in range(n):\n        if g[i][1] < n // 2:\n            print(f[n // 2][1])else:print(f[(n // 2) - 1][1])\n    return\ndef H():\n    return\ndef I_():\n    return\ndef J():\n    return", "score": 0.0}
{"id": "PIE_p02901_s249297018", "golden_code": "INF = 10 ** 10\n(N, M) = list(map(int, input().split()))\ncosts = []\nkeys = []\nfor _ in range(M):\n    (A, B) = list(map(int, input().split()))\n    cs = list(map(int, input().split()))\n    costs.append(A)\n    key = 0\n    for c in cs:\n        key |= 1 << (c - 1)\n    keys.append(key)\nmaskss = [[] for _ in range(N + 1)]\nnum1s = [0] * (2 ** N)\nfor S in range(2 ** N):\n    num = bin(S).count('1')\n    maskss[num].append(S)\n    num1s[S] = num\ndpAll = [INF] * (2 ** N)\nfor S in range(2 ** N):\n    for (cost, key) in zip(costs, keys):\n        if S & key == S:\n            if cost < dpAll[S]:\n                dpAll[S] = cost\ndp = [INF] * (2 ** N)\nfor S in range(2 ** N):\n    cost = dpAll[S]\n    num1 = num1s[S]\n    for k in range(1, ((num1 + 1) // 2) + 1):\n        for mask in maskss[k]:\n            if mask & S == mask:\n                m2 = S ^ mask\n                c2 = dp[mask] + dp[m2]\n                if c2 < cost:\n                    cost = c2\n    dp[S] = cost\nif dp[(2 ** N) - 1] == INF:\n    print(-1)\nelse:\n    print(dp[(2 ** N) - 1])", "generated_code": "INF = 10 ** 10\n(N, M) = list(map(int, input().split()))\ncosts = []\nkeys = []\nfor _ in range(M):\n    (A, B) = list(map(int, input().split()))\n    cs = list(map(int, input().split()))\n    costs.append(A)\n    key = 0\n    for c in cs:\n        key |= 1 << (c - 1)\n    keys.append(key)\nmaskss = [[] for _ in range(N + 1)]\nnum1s = [0] * (2 ** N)\nfor S in range(2 ** N):\n    num = bin(S).count('1')\n    maskss[num].append(S)\n    num1s[S] = num\ndpAll = [INF] * (2 ** N)\nfor S in range(2 ** N):\n    for (cost, key) in zip(costs, keys):\n        if S & key == S:\n            if cost < dpAll[S]:\n                dpAll[S] = cost\ndp = [INF] * (2 ** N)\nfor S in range(2 ** N):\n    cost = dpAll[S]\n    num1 = num1s[S]\n    for k in range(1, ((num1 + 1) // 2) + 1):\n        for mask in maskss[k]:\n            if mask & S == mask:\n                m2 = S ^ mask\n                c2 = dp[mask] + dp[m2]\n                if c2 < cost:\n                    cost = c2\n    dp[S] = cost\nif dp[(2 ** N) - 1] == INF:\n    print(1)\nelse:\n    print(dp[(2 ** N) - 1])", "score": 0.0698}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i != j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0402}
{"id": "PIE_p00144_s682125154", "golden_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "generated_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n        break\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:print('NA')", "score": 0.0}
{"id": "PIE_p02537_s767194684", "golden_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L > R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "score": 0.4868}
{"id": "PIE_p02537_s767194684", "golden_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L > R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "score": 0.4888}
{"id": "PIE_p02760_s347634405", "golden_code": "import numpy as np\nN_1 = list(map(int, input().split()))\nN_2 = list(map(int, input().split()))\nN_3 = list(map(int, input().split()))\nN = int(eval(input()))\na = [int(eval(input())) for i in range(N)]\nn = np.array([N_1, N_2, N_3])\nfor a_n in a:\n    if a_n in n:\n        n[n == a_n] = 0\n    else:\n        pass\ni = 0\nif np.all(n[(0:, 0)] == 0) == True:\n    i = +1\nelif np.all(n[(0:, 1)] == 0) == True:\n    i += 1\nelif np.all(n[(0:, 2)] == 0) == True:\n    i += 1\nelif np.all(n[(0, 0:)] == 0) == True:\n    i += 1\nelif np.all(n[(1, 0:)] == 0) == True:\n    i += 1\nelif np.all(n[(2, 0:)] == 0) == True:\n    i += 1\nelif (n[(0, 0)] == 0 and n[(1, 1)] == 0 and n[(2, 2)] == 0):\n    i += 1\nelif (n[(0, 2)] == 0 and n[(1, 1)] == 0 and n[(2, 0)] == 0):\n    i += 1\nif i > 0:\n    print('Yes')\nelse:\n    print('No')", "generated_code": "import numpy as np\nN_1 = list(map(int, input().split()))\nN_2 = list(map(int, input().split()))\nN_3 = list(map(int, input().split()))\nN = int(eval(input()))\na = [int(eval(input())) for i in range(N)]\nn = np.array([N_1, N_2, N_3])\nfor a_n in a:\n    if a_n in n:\n        n[n == a_n] = 0\n    else:\n        pass\ni = 0\nif np.all(n[(0:, 0)] == 0) == True:\n    i = +1\nelif np.all(n[(0:, 1)] == 0) == True:\n    i += 1\nelif np.all(n[(0:, 2)] == 0) == True:\n    i += 1\nelif np.all(n[(0, 0:)] == 0) == True:\n    i += 1\nelif np.all(n[(1, 0:)] == 0) == True:\n    i -= 1\nelif np.all(n[(2, 0:)] == 0) == True:\n    i += 1\nelif (n[(0, 0)] == 0 and n[(1, 1)] == 0 and n[(2, 2)] == 0):\n    i += 1\nelif (n[(0, 2)] == 0 and n[(1, 1)] == 0 and n[(2, 0)] == 0):\n    i += 1\nif i > 0:\n    print('Yes')\nelse:\n    print('No')", "score": 0.0}
{"id": "PIE_p02537_s645565645", "golden_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "generated_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni > N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "score": 0.4916}
{"id": "PIE_p02794_s356881403", "golden_code": "import sys\ndef main():\n    input = sys.stdin.readline\n    N = int(eval(input()))\n    E = [[] for _ in range(N)]\n    for i in range(N - 1):\n        (a, b) = list(map(int, input().split()))\n        (a, b) = (a - 1, b - 1)\n        E[a].append((b, i))\n        E[b].append((a, i))\n    def dfs(s, g):\n        par = [(-1, -1)] * N\n        par[s] = (s, -1)\n        stack = [s]\n        while stack:\n            v = stack.pop()\n            for (to, i) in E[v]:\n                if par[to][0] >= 0:\n                    continue\n                par[to] = (v, i)\n                if to == g:\n                    break\n                stack.append(to)\n        r = set()\n        v = g\n        while v != s:\n            (v, i) = par[v]\n            r.add(i)\n        return r\n    M = int(eval(input()))\n    path = [None] * M\n    for i in range(M):\n        (u, v) = list(map(int, input().split()))\n        (u, v) = (u - 1, v - 1)\n        path[i] = dfs(u, v)\n    def calc(s):\n        return 1 << ((N - 1) - len(s))\n    i_ans = 0\n    for p in range(1, 1 << M):\n        is_odd = bin(p).count('1') & 1\n        s = set()\n        for i in range(M):\n            if p & 1:\n                s |= path[i]\n            p >>= 1\n        if is_odd:\n            i_ans += calc(s)else:i_ans -= calc(s)\n    print((1 << (N - 1)) - i_ans)", "generated_code": "import sys\ndef main():\n    input = sys.stdin.readline\n    N = int(eval(input()))\n    E = [[] for _ in range(N)]\n    for i in range(N - 1):\n        (a, b) = list(map(int, input().split()))\n        (a, b) = (a - 1, b - 1)\n        E[a].append((b, i))\n        E[b].append((a, i))\n    def dfs(s, g):\n        par = [(-1, 1)] * N\n        par[s] = (s, -1)\n        stack = [s]\n        while stack:\n            v = stack.pop()\n            for (to, i) in E[v]:\n                if par[to][0] >= 0:\n                    continue\n                par[to] = (v, i)\n                if to == g:\n                    break\n                stack.append(to)\n        r = set()\n        v = g\n        while v != s:\n            (v, i) = par[v]\n            r.add(i)\n        return r\n    M = int(eval(input()))\n    path = [None] * M\n    for i in range(M):\n        (u, v) = list(map(int, input().split()))\n        (u, v) = (u - 1, v - 1)\n        path[i] = dfs(u, v)\n    def calc(s):\n        return 1 << ((N - 1) - len(s))\n    i_ans = 0\n    for p in range(1, 1 << M):\n        is_odd = bin(p).count('1') & 1\n        s = set()\n        for i in range(M):\n            if p & 1:\n                s |= path[i]\n            p >>= 1\n        if is_odd:\n            i_ans += calc(s)else:i_ans -= calc(s)\n    print((1 << (N - 1)) - i_ans)", "score": 0.0}
{"id": "PIE_extra_p03721_s865752287", "golden_code": "N,K=list(map(int,input().split()))\n\ndic={}\n\nfor i in range(N):\n\n  a,b=list(map(int,input().split()))\n\n  if a in dic:\n\n    dic[a]+=b\n\n  else:\n\n    dic[a]=b\n\n    \n\ndic=sorted(list(dic.items()),key=lambda x:x[0])\n\nfor d in range(len(dic)):\n\n  amount=dic[d][1]\n\n  if amount>=K:\n\n    print((dic[d][0]))\n\n    exit(0)\n\n  else:\n\n    K-=amount\n\n  ", "generated_code": "import sys\n\nreadline = sys.stdin.readline\n\n\n\nN,K = list(map(int,readline().split()))\n\n\n\nAB = [list(map(int,readline().split())) for i in range(N)]\n\n\n\nAB = sorted(AB, key = lambda x:x[0])\n\namount = 0\n\nfor a,b in AB:\n\n  amount += b\n\n  if amount >= K:\n\n    print(a)\n\n    break\n", "score": 1.0}
{"id": "PIE_p00144_s682125154", "golden_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "generated_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    @staticmethod\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:print('NA')", "score": 0.0}
{"id": "PIE_p02537_s767194684", "golden_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "score": 0.094}
{"id": "PIE_p02555_s973678433", "golden_code": "def cmb(n, r):\n    import math\n    if n < r:\n        return 0\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\ndef solve(S):\n    mod = (10 ** 9) + 7\n    ans = 0\n    for i in range(1, (S // 3) + 1):\n        tama = i + (S - (i * 3))\n        tama -= 2\n        bo = i - 1\n        ans += cmb(tama + 1, bo)\n        ans %= mod\n    print(ans)", "generated_code": "def cmb(n, r):\n    import math\n    if n < r:\n        return 0\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\ndef solve(S):\n    mod = (10 ** 9) + 7\n    ans = 0\n    for i in range(1, (S // 3) + 1):\n        break\n    \n    \n    \n    \n    print(ans)", "score": 0.0}
{"id": "PIE_p02537_s767194684", "golden_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    pass\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "score": 0.0}
{"id": "PIE_extra_p03723_s632911465", "golden_code": "import time\n\nt=time.time()\n\nA,B,C=list(map(int,input().split()))\n\ncnt=0\n\nwhile(A%2==B%2==C%2==0):\n\n    a,b,c=A,B,C\n\n    A=b//2+c//2;B=a//2+c//2;C=a//2+b//2\n\n    cnt+=1\n\n    if(time.time()-t>=1):\n\n        print((-1))\n\n        exit()\n\nprint(cnt)", "generated_code": "A,B,C=list(map(int,input().split()))\n\ncnt=0\n\nif(A==B==C):\n\n    if A%2!=0:\n\n        print((0))\n\n    else:\n\n        print((-1))\n\n    exit()\n\nwhile(A%2==B%2==C%2==0):\n\n    a,b,c=A,B,C\n\n    A=b//2+c//2;B=a//2+c//2;C=a//2+b//2\n\n    cnt+=1\n\nprint(cnt)", "score": 1.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] ** (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0426}
{"id": "PIE_extra_p02576_s578033438", "golden_code": "array = list(map(int, input().split()))\n\nif array[0] % array[1] > 0:\n\n    print(((array[0] // array[1] + 1) * array[2]))\n\nelse:\n\n    print(((array[0] // array[1]) * array[2]))", "generated_code": "n, x, t = list(map(int, input().split()))\n\n\n\nprint((0--n//x*t))", "score": 1.0}
{"id": "PIE_p02680_s341076610", "golden_code": "import sys\n(n, m, *abcdef) = list(map(int, sys.stdin.buffer.read().split()))\nver_lines = []\nhor_lines = []\nx_list = set()\ny_list = set()\nn3 = n * 3\nfor (a, b, c) in zip(abcdef[0:n3:3], abcdef[1:n3:3], abcdef[2:n3:3]):\n    y_list.add(a)\n    y_list.add(b)\n    x_list.add(c)\n    ver_lines.append((a, b, c))\nfor (d, e, f) in zip(abcdef[n3 + 0::3], abcdef[n3 + 1::3], abcdef[n3 + 2::3]):\n    y_list.add(d)\n    x_list.add(e)\n    x_list.add(f)\n    hor_lines.append((d, e, f))\nx_list.add(0)\ny_list.add(0)\nx_list = sorted(x_list)\ny_list = sorted(y_list)\nx_dict = {x: i for (i, x) in enumerate(x_list, start=1)}\ny_dict = {y: i for (i, y) in enumerate(y_list, start=1)}\nrow_real = len(x_list)\ncol_real = len(y_list)\nrow = row_real + 2\ncol = col_real + 2\nbanned_up_ij = [[0] * row for _ in range(col)]\nbanned_down_ij = [[0] * row for _ in range(col)]\nbanned_left_ij = [[0] * col for _ in range(row)]\nbanned_right_ij = [[0] * col for _ in range(row)]\nfor (a, b, c) in ver_lines:\n    if a > b:\n        (a, b) = (b, a)\n    ai = y_dict[a]\n    bi = y_dict[b]\n    j = x_dict[c]\n    banned_left_ij[j][ai] += 1\n    banned_left_ij[j][bi] -= 1\n    banned_right_ij[j - 1][ai] += 1\n    banned_right_ij[j - 1][bi] -= 1\nfor (d, e, f) in hor_lines:\n    if e > f:\n        (e, f) = (f, e)\n    i = y_dict[d]\n    ej = x_dict[e]\n    fj = x_dict[f]\n    banned_up_ij[i][ej] += 1\n    banned_up_ij[i][fj] -= 1\n    banned_down_ij[i - 1][ej] += 1\n    banned_down_ij[i - 1][fj] -= 1\nbanned_up = [0] * (row * col)\nbanned_down = [0] * (row * col)\nbanned_left = [0] * (row * col)\nbanned_right = [0] * (row * col)\nfor i in range(col):\n    ru = banned_up_ij[i]\n    rd = banned_down_ij[i]\n    ri = row * i\n    banned_up[ri] = ru[0]\n    banned_down[ri] = rd[0]\n    for j in range(1, row):\n        banned_up[ri + j] = banned_up[(ri + j) - 1] + ru[j]\n        banned_down[ri + j] = banned_down[(ri + j) - 1] + rd[j]\nfor j in range(row):\n    rl = banned_left_ij[j]\n    rr = banned_right_ij[j]\n    banned_left[j] = rl[0]\n    banned_right[j] = rr[0]\n    for i in range(1, col):\n        ri0 = (i - 1) * row\n        ri1 = i * row\n        banned_left[ri1 + j] = banned_left[ri0 + j] + rl[i]\n        banned_right[ri1 + j] = banned_right[ri0 + j] + rr[i]\ns = (row * y_dict[0]) + x_dict[0]\nenable = (([-1] * row) + ((([-1] + ([0] * (row - 2))) + [-1]) * (col - 2))) + ([-1] * row)\nq = [s]\nmoves = [(-row, banned_up), (-1, banned_left), (1, banned_right), (row, banned_down)]\nwhile q:\n    c = q.pop()\n    if enable[c] == 1:\n        continue\n    elif enable[c] == -1:\n        print('INF')\n        exit()\n    enable[c] = 1\n    for (dc, banned) in moves:\n        if banned[c]:\n            continue\n        nc = c + dc\n        if enable[nc] == 1:\n            continue\n        q.append(nc)\nans = 0\nfor i in range(col):\n    ri = i * row\n    for j in range(row):\n        if enable[ri + j] != 1:\n            continue\n        t = y_list[i - 1]\n        b = y_list[i]\n        l = x_list[j - 1]\n        r = x_list[j]\n        ans += (b - t) * (r - l)\nprint(ans)", "generated_code": "import sys\n(n, m, *abcdef) = list(map(int, sys.stdin.buffer.read().split()))\nver_lines = []\nhor_lines = []\nx_list = set()\ny_list = set()\nn3 = n * 3\nfor (a, b, c) in zip(abcdef[0:n3:3], abcdef[1:n3:3], abcdef[2:n3:3]):\n    y_list.add(a)\n    y_list.add(b)\n    x_list.add(c)\n    ver_lines.append((a, b, c))\nfor (d, e, f) in zip(abcdef[n3 + 0::3], abcdef[n3 + 1::3], abcdef[n3 + 2::3]):\n    y_list.add(d)\n    x_list.add(e)\n    x_list.add(f)\n    hor_lines.append((d, e, f))\nx_list.add(0)\ny_list.add(0)\nx_list = sorted(x_list)\ny_list = sorted(y_list)\nx_dict = {x: i for (i, x) in enumerate(x_list, start=1)}\ny_dict = {y: i for (i, y) in enumerate(y_list, start=1)}\nrow_real = len(x_list)\ncol_real = len(y_list)\nrow = row_real + 2\ncol = col_real + 2\nbanned_up_ij = [[0] * row for _ in range(col)]\nbanned_down_ij = [[0] * row for _ in range(col)]\nbanned_left_ij = [[0] * col for _ in range(row)]\nbanned_right_ij = [[0] * col for _ in range(row)]\nfor (a, b, c) in ver_lines:\n    if a > b:\n        (a, b) = (b, a)\n    ai = y_dict[a]\n    bi = y_dict[b]\n    j = x_dict[c]\n    banned_left_ij[j][ai] += 1\n    banned_left_ij[j][bi] -= 1\n    banned_right_ij[j - 1][ai] += 1\n    banned_right_ij[j - 1][bi] -= 1\nfor (d, e, f) in hor_lines:\n    if e > f:\n        (e, f) = (f, e)\n    i = y_dict[d]\n    ej = x_dict[e]\n    fj = x_dict[f]\n    banned_up_ij[i][ej] += 1\n    banned_up_ij[i][fj] -= 1\n    banned_down_ij[i - 1][ej] += 1\n    banned_down_ij[i - 1][fj] -= 1\nbanned_up = [0] * (row * col)\nbanned_down = [0] * (row * col)\nbanned_left = [0] * (row * col)\nbanned_right = [0] * (row * col)\nfor i in range(col):\n    ru = banned_up_ij[i]\n    rd = banned_down_ij[i]\n    ri = row * i\n    banned_up[ri] = ru[0]\n    banned_down[ri] = rd[0]\n    for j in range(1, row):\n        banned_up[ri + j] = banned_up[(ri + j) - 1] + ru[j]\n        banned_down[ri + j] = banned_down[(ri + j) - 1] + rd[j]\nfor j in range(row):\n    rl = banned_left_ij[j]\n    rr = banned_right_ij[j]\n    banned_left[j] = rl[0]\n    banned_right[j] = rr[0]\n    for i in range(1, col):\n        ri0 = (i - 1) * row\n        ri1 = i * row\n        banned_left[ri1 + j] = banned_left[ri0 + j] + rl[i]\n        banned_right[ri1 + j] = banned_right[ri0 + j] + rr[i]\ns = (row * y_dict[0]) + x_dict[0]\nenable = (([-1] * row) + ((([-1] + ([0] * (row - 2))) + [-1]) * (col - 2))) + ([-1] * row)\nq = [s]\nmoves = [(-row, banned_up), (-1, banned_left), (1, banned_right), (row, banned_down)]\nwhile not q:\n    c = q.pop()\n    if enable[c] == 1:\n        continue\n    elif enable[c] == -1:\n        print('INF')\n        exit()\n    enable[c] = 1\n    for (dc, banned) in moves:\n        if banned[c]:\n            continue\n        nc = c + dc\n        if enable[nc] == 1:\n            continue\n        q.append(nc)\nans = 0\nfor i in range(col):\n    ri = i * row\n    for j in range(row):\n        if enable[ri + j] != 1:\n            continue\n        t = y_list[i - 1]\n        b = y_list[i]\n        l = x_list[j - 1]\n        r = x_list[j]\n        ans += (b - t) * (r - l)\nprint(ans)", "score": 0.0}
{"id": "PIE_extra_p03371_s299972417", "golden_code": "a,b,c,x,y = list(map(int,input().split()))\n\nans = a*x + b*y\n\nfor i in range(max(x,y) + 1):\n\n\tmoney = max(0,(x-i)*a) + max(0,(y-i)*b) + 2*i*c\n\n\tif money <= ans:\n\n\t\tans = money\n\nprint(ans)", "generated_code": "a,b,c,x,y = list(map(int,input().split()))\n\nif a + b >= 2*c:\n\n\tif x >= y:\n\n\t\tans = 2*y*c + (x-y)*min(a,2*c)\n\n\telse:\n\n\t\tans = 2*x*c + (y-x)*min(b,2*c)\n\nelse:\n\n\tans = (x*a + y*b)\n\nprint(ans)", "score": 1.0}
{"id": "PIE_p02649_s231020544", "golden_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if (i != 50 and j != 50):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\n(N, K, T, S) = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\nans = 0\nn = len(bit)\ndata = [0] * (2 ** n)\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * ((-1) ** popcount(i))\n    for val in t:\n        data[val] = 0\nprint(ans)", "generated_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if (i != 50 and j != 50):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if not (i != 50):\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\n(N, K, T, S) = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\nans = 0\nn = len(bit)\ndata = [0] * (2 ** n)\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * ((-1) ** popcount(i))\n    for val in t:\n        data[val] = 0\nprint(ans)", "score": 0.0}
{"id": "PIE_extra_p03037_s661845965", "golden_code": "n, m = list(map(int, input().split()))\n\ngate = []\n\nl, r = list(map(int, input().split()))\n\nfor i in range(1, m):\n\n    m, s = list(map(int, input().split()))\n\n    if l < m:\n\n        l = m\n\n    if s < r:\n\n        r = s\n\nprint((len([i for i in range(l, r + 1)])))", "generated_code": "n, m = list(map(int, input().split()))\n\nl, r = [0] * m, [0] * m\n\nfor i in range(m):\n\n    l[i], r[i] = list(map(int, input().split()))\n\nprint((max(min(r) - max(l) + 1, 0)))", "score": 1.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        pass\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0356}
{"id": "PIE_extra_p03038_s297180816", "golden_code": "n,m = list(map(int,input().split()))\n\nA = list(map(int,input().split()))\n\nA.sort()\n\nbc = [list(map(int,input().split())) for _ in range(m)]\n\n\n\nbc.sort(key=lambda x:x[1],reverse=1)\n\n\n\ni = 0#bcの添え字\n\nj = 0#Aの添え字\n\nwhile 1:\n\n\tif i >= m or j >= n:\n\n\t\t#print('iかjが超えた！')\n\n\t\tbreak\n\n\tif bc[i][1] < A[j]:\n\n\t\t#print('Aでっか')\n\n\t\tbreak\n\n\tfor k in range(bc[i][0]):\n\n\t\t#print(i,j,k)\n\n\t\tA[j] = bc[i][1]\n\n\t\tj+=1\n\n\t\tif j >= n:\n\n\t\t\t#print('for文内、jが超えた')\n\n\t\t\tbreak\n\n\t\tif A[j] > bc[i][1]:\n\n\t\t\t#print('for文内、Aでっか')\n\n\t\t\tbreak\n\n\ti+=1\n\n# print(A)\n\nprint((sum(A)))", "generated_code": "from heapq import heapify,heappop,heappush\n\nn,m = list(map(int,input().split()))\n\nA = list(map(int,input().split()))\n\nheapify(A)\n\nbc = [list(map(int,input().split())) for i in range(m)]\n\nbc.sort(key=lambda x:x[1],reverse=1)\n\n\n\nflag = 0\n\n# print(A)\n\nfor b,c in bc:\n\n\tif flag:\n\n\t\tbreak\n\n\tfor i in range(b):\n\n\t\ta = heappop(A)\n\n\t\tif c <= a:\n\n\t\t\theappush(A,a)\n\n\t\t\tflag = 1\n\n\t\t\tbreak\n\n\t\telse:\n\n\t\t\theappush(A,c)\n\nprint((sum(A)))", "score": 1.0}
{"id": "PIE_p02649_s231020544", "golden_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if (i != 50 and j != 50):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\n(N, K, T, S) = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\nans = 0\nn = len(bit)\ndata = [0] * (2 ** n)\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * ((-1) ** popcount(i))\n    for val in t:\n        data[val] = 0\nprint(ans)", "generated_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if (i != 50 and j != 50):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\n(N, K, T, S) = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\nans = 0\npass\ndata = [0] * (2 ** n)\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * ((-1) ** popcount(i))\n    for val in t:\n        data[val] = 0\nprint(ans)", "score": 0.4106}
{"id": "PIE_extra_p00134_s571351483", "golden_code": "from statistics import mean\n\n\n\ninputCount = int(eval(input()))\n\nprices = [int(eval(input())) for lp in range(inputCount)]\n\naverage = mean(prices)\n\nprint((int(average)))\n\n\n", "generated_code": "inputCount = int(eval(input()))\n\nprices = [int(eval(input())) for lp in range(inputCount)]\n\naverage = sum(prices) // inputCount\n\nprint(average)\n\n\n", "score": 1.0}
{"id": "PIE_p02537_s645565645", "golden_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "generated_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        __dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "score": 0.0}
{"id": "PIE_p02537_s767194684", "golden_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\npass\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "score": 0.0}
{"id": "PIE_p02537_s645565645", "golden_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "generated_code": "class SegmentTree:\n    @staticmethod\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "score": 0.0}
{"id": "PIE_p00144_s682125154", "golden_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if g.M[s][d] < v:\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "generated_code": "import sys\nfrom sys import stdin\ninput = stdin.readline\nfrom enum import Enum\nclass Graph(object):\n    class Status(Enum):\n        white = 1\n        gray = 2\n        black = 3\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [Graph.Status.white] * self.num_of_nodes\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(data)\n        self.d = [float('inf')] * self.num_of_nodes\n        self.p = [-1] * self.num_of_nodes\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float('inf')\n            for i in range(len(self.d)):\n                if (self.color[i] != Graph.Status.black and self.d[i] < mincost):\n                    mincost = self.d[i]\n                    u = i\n            if mincost == float('inf'):\n                break\n            self.color[u] = Graph.Status.black\n            for v in range(len(self.d)):\n                if (self.color[v] != Graph.Status.black and self.M[u][v] != float('inf')):\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for (s, d, v) in packets:\n        if not (g.M[s][d] < v):\n            print(g.M[s][d] + 1)\n        else:\n            print('NA')", "score": 0.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)\nif __name__ != '__main__':\n    main()", "score": 0.04}
{"id": "PIE_p02574_s911286307", "golden_code": "import math, sys\nn = int(sys.stdin.readline())\na = tuple(map(int, sys.stdin.readline().split()))\ng = math.gcd(a[0], a[1])\nfor i in range(2, n):\n    g = math.gcd(g, a[i])\nM = max(a)\nacc = a[0]\nfor i in range(n):\n    acc = math.gcd(acc, a[i])\nif acc != 1:\n    print('not coprime')\n    exit()\nLIMIT = max(a)\nminPrime = [0] * (LIMIT + 1)\nminPrime[1] = 1\ndef make():\n    for i in range(2, LIMIT + 1):\n        if minPrime[i] == 0:\n            minPrime[i] = i\n            for j in range(i + i, LIMIT + 1, i):\n                if minPrime[j] == 0:\n                    minPrime[j] = i\nmake()\ndef factrial(N):\n    ret = []\n    while minPrime[N] != N:\n        ret.append(minPrime[N])\n        N = N // minPrime[N]\n    if N != 1:\n        ret.append(N)\n    return ret\njudge = set([])\npc = True\npairwise = True\np = set()\nfor e in a:\n    if not pairwise:\n        break\n    asf = set(factrial(e))\n    if judge & asf != set():\n        pc = False\n    judge |= asf\nif pc:\n    print('pairwise coprime')\nelif g == 1:\n    print('setwise coprime')\nelse:\n    print('not coprime')", "generated_code": "import math, sys\nn = int(sys.stdin.readline())\na = tuple(map(int, sys.stdin.readline().split()))\ng = math.gcd(a[0], a[1])\nfor i in range(2, n):\n    g = math.gcd(g, a[i])\nM = max(a)\nacc = a[0]\nfor i in range(n):\n    acc = math.gcd(acc, a[i])\nif acc != 1:\n    print('not coprime')\n    exit()\nLIMIT = max(a)\nminPrime = [0] / (LIMIT + 1)\nminPrime[1] = 1\ndef make():\n    for i in range(2, LIMIT + 1):\n        if minPrime[i] == 0:\n            minPrime[i] = i\n            for j in range(i + i, LIMIT + 1, i):\n                if minPrime[j] == 0:\n                    minPrime[j] = i\nmake()\ndef factrial(N):\n    ret = []\n    while minPrime[N] != N:\n        ret.append(minPrime[N])\n        N = N // minPrime[N]\n    if N != 1:\n        ret.append(N)\n    return ret\njudge = set([])\npc = True\npairwise = True\np = set()\nfor e in a:\n    if not pairwise:\n        break\n    asf = set(factrial(e))\n    if judge & asf != set():\n        pc = False\n    judge |= asf\nif pc:\n    print('pairwise coprime')\nelif g == 1:\n    print('setwise coprime')\nelse:\n    print('not coprime')", "score": 0.0358}
{"id": "PIE_p02537_s767194684", "golden_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "generated_code": "import sys\ninput = sys.stdin.readline\n(n, k) = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2 ** LV\npass\nlazy = [None] * (2 * N0)\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & (-L)).bit_length()\n    rc = 0 if r & 1 else (R & (-R)).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if (L < R and lc <= i):\n            yield L\n        L >>= 1\n        R >>= 1\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[(2 * i) - 1] = data[(2 * i) - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[(2 * i) - 1], data[2 * i])\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor (i, a) in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)", "score": 0.0}
{"id": "PIE_extra_p02390_s941329471", "golden_code": "s = int(eval(input()))\n\nm, s = s // 60, s % 60\n\nh, m = m // 60, m % 60\n\nprint((':'.join(map(str, [h,m,s]))))", "generated_code": "s = int(eval(input()))\n\n\n\nsecond = s % 60\n\ns = s // 60\n\nmin = s % 60\n\nhour = s // 60\n\n\n\nprint(f'{hour}:{min}:{second}')\n", "score": 1.0}
{"id": "PIE_p02537_s645565645", "golden_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "generated_code": "class SegmentTree:\n    def __init__(self, A, dot, e):\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[(2 * i) + 1])\n    def update(self, i, c):\n        i += self.__n\n        node = __node\n        node[i] = c\n        while i > 1:\n            i //= 2\n            node[i] = self.__dot(node[2 * i], node[(2 * i) + 1])\n    def get(self, l, r):\n        (vl, vr) = (self.__e, self.__e)\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l //= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r //= 2\n        return self.__dot(vl, vr)\n(N, K) = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor (i, a) in enumerate(reversed(A)):\n    j = (N - 1) - i\n    p1 = st.get(a, min(max_A + 1, (a + K) + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint(max(dp))", "score": 0.0}
{"id": "PIE_extra_p03796_s459904551", "golden_code": "import math\n\n\n\nN = int(eval(input()))\n\n\n\nprint((math.factorial(N) % (1000000000 + 7)))\n", "generated_code": "import math\n\n\n\nN = int(eval(input()))\n\n\n\np = 1\n\nfor i in range(2, N+1):\n\n  p *= i\n\n  p = p % (1000000000 + 7)\n\n  \n\nprint(p)\n", "score": 1.0}
{"id": "PIE_extra_p03796_s015826115", "golden_code": "import math\n\n\n\nN = int(eval(input()))\n\nans = 0\n\n\n\nans =math.factorial(N) % (10**9 +7)\n\n\n\nprint(ans)", "generated_code": "N = int(eval(input()))\n\npower = 1\n\n\n\nfor i in range(N):\n\n    power = ((i+1) * power) % 1000000007\n\n\n\nprint(power)", "score": 1.0}
{"id": "PIE_p03253_s968664754", "golden_code": "from math import floor, sqrt\nfrom collections import defaultdict\ndef factors(n):\n    d = defaultdict(int)\n    for i in range(2, floor(sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            d[i] += 1\n        if n == 1:\n            break\n    if n != 1:\n        d[n] += 1\n    return d\ndef inv(x, mod):\n    k = mod - 2\n    ret = 1\n    while k > 0:\n        if k & 1:\n            ret = (ret * x) % mod\n        x = (x * x) % mod\n        k >>= 1\n    return ret\n(N, M) = list(map(int, input().split()))\nmod = (10 ** 9) + 7\ndic = factors(M)\nK = len(dic)\nSIZE = N + max(dic.values()) if list(dic.values()) else N\nfact = [None] * (SIZE + 1)\nfinv = [None] * (SIZE + 1)\nfact[0] = 1\nfor i in range(1, SIZE + 1):\n    fact[i] = (fact[i - 1] * i) % mod\nfinv[SIZE] = inv(fact[SIZE], mod=mod)\nfor i in range(SIZE, 0, -1):\n    finv[i - 1] = (finv[i] * i) % mod\ndef comb(n, k):\n    tmp = (finv[k] * finv[n - k]) % mod\n    return (fact[n] * tmp) % mod\nans = 1\nfor p in dic:\n    ans = (ans * comb((dic[p] + N) - 1, dic[p])) % mod\nprint(ans)", "generated_code": "from math import floor, sqrt\nfrom collections import defaultdict\ndef factors(n):\n    d = defaultdict(int)\n    for i in range(2, floor(sqrt(n)) + 1):\n        while n % i == 0:\n            n //= i\n            d[i] += 1\n        if n == 1:\n            break\n    if n != 1:\n        d[n] += 1\n    return d\ndef inv(x, mod):\n    k = mod - 2\n    ret = 1\n    while k > 0:\n        if k & 1:\n            ret = (ret * x) * mod\n        x = (x * x) % mod\n        k >>= 1\n    return ret\n(N, M) = list(map(int, input().split()))\nmod = (10 ** 9) + 7\ndic = factors(M)\nK = len(dic)\nSIZE = N + max(dic.values()) if list(dic.values()) else N\nfact = [None] * (SIZE + 1)\nfinv = [None] * (SIZE + 1)\nfact[0] = 1\nfor i in range(1, SIZE + 1):\n    fact[i] = (fact[i - 1] * i) % mod\nfinv[SIZE] = inv(fact[SIZE], mod=mod)\nfor i in range(SIZE, 0, -1):\n    finv[i - 1] = (finv[i] * i) % mod\ndef comb(n, k):\n    tmp = (finv[k] * finv[n - k]) % mod\n    return (fact[n] * tmp) % mod\nans = 1\nfor p in dic:\n    ans = (ans * comb((dic[p] + N) - 1, dic[p])) % mod\nprint(ans)", "score": 0.3554}
{"id": "PIE_p02649_s231020544", "golden_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if (i != 50 and j != 50):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\n(N, K, T, S) = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\nans = 0\nn = len(bit)\ndata = [0] * (2 ** n)\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * ((-1) ** popcount(i))\n    for val in t:\n        data[val] = 0\nprint(ans)", "generated_code": "def popcount(x):\n    x = x - ((x >> 1) & 1431655765)\n    x = (x & 858993459) + ((x >> 2) & 858993459)\n    x = (x + (x >> 4)) & 252645135\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 127\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if not ((i != 50 and j != 50)):\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\n(N, K, T, S) = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if (S >> i) & 1 == 0]\nmust1 = [i for i in range(18) if (T >> i) & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j) & 1 == 0\n    for j in must1:\n        check = check & (val >> j) & 1 == 1\n    if check:\n        A.append(val)\nif not A:\n    print(0)\n    exit()\nbit = []\nfor i in range(18):\n    if (i not in must0 and i not in must1):\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j]) & 1 == 1 * (2 ** j)\n    A[i] = temp\nans = 0\nn = len(bit)\ndata = [0] * (2 ** n)\nfor i in range(2 ** n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * ((-1) ** popcount(i))\n    for val in t:\n        data[val] = 0\nprint(ans)", "score": 0.0}
{"id": "PIE_p02599_s870922238", "golden_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "generated_code": "import sys\nclass BinaryIndexedTree:\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & (-i))]\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & (-i)\n    def sum(self, i):\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & (-i)\n        return rst\n    def get(self, i, j):\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\ndef main():\n    (N, Q) = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for (i, c) in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for (i, s) in enumerate(sys.stdin.readlines()):\n        (l, r) = map(int, s.split())\n        query[r - 1].append((l + 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for (r, q) in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            (l, i) = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(sep='\\n', *ans)", "score": 0.0364}
{"id": "PIE_extra_p03371_s303630482", "golden_code": "a, b, c, x, y = list(map(int, input().split()))\n\n\n\nz = max(x,y) * 2\n\nmin_sum = c * z\n\n\n\nfor i in range(z):\n\n    r = max(0, y - i) * b\n\n    t = max(0, x - i) * a\n\n    sum = c * i * 2 + r + t\n\n    if sum < min_sum:\n\n        min_sum = sum\n\n\n\nprint(min_sum)", "generated_code": "a,b,c,x,y = list(map(int, input().split()))\n\n\n\nplan_a = c * (2*x) + max(0, y-x) * b\n\nplan_b = c * (2*y) + max(0, x-y) * a\n\nplan_c = a * x + b * y\n\n\n\nprint((min(plan_a, plan_b, plan_c)))", "score": 1.0}
